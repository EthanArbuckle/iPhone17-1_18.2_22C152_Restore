uint64_t gms::BasicMaterial<ggl::Texture2D>::targetShininess(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 360))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceShininess(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 360))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxSpecularity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 336))(&v11, a3);
    result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 336))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minSpecularity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 336))(&v11, a3);
    result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 336))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSpecularity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 336))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSpecularity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 336))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 264))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxLineWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 240))(&v11, a3);
    result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 240))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minLineWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 240))(&v11, a3);
    result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 240))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::lineWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 240))(&v14, a3.n128_f32[0]);
      result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 240))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 240);
  return (void *)v8(a3);
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetLineWidth(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 240))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceLineWidth(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10)) {
    int v8 = HIDWORD(v10);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

void *gms::BasicMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 192))(v15, a3.n128_f32[0]);
      result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        result = (*(void *(**)(char *__return_ptr, float))(*result + 192))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 192);
  return (void *)v8(a3);
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 192))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 168))();
}

void gms::BasicMaterial<ggl::Texture2D>::~BasicMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::BasicMaterial<ggl::Texture2D>::~BasicMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gms::BasicMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<gms::BasicMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gms::BasicMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(unsigned char *)(v2 + 48))
      {
        float v3 = *(std::__shared_weak_count **)(v2 + 40);
        if (v3)
        {
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  v4 = (void *)gdc::Registry::storage<md::ls::NeedsClimateTint>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  float v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      void *v21 = v5;
      float32x4_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      float32x4_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    int v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *int v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NeedsClimateTint>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF522628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsClimateTint>(gdc::Entity,md::ls::NeedsClimateTint &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void ecs2::addComponent<md::ls::TexturesToDisconnect>(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = *a3;
  uint64_t v5 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_1EF523630;
  *(_OWORD *)(v6 + 8) = v7;
  *((void *)v6 + 3) = v5;
  *((void *)v6 + 4) = a2;
  unint64_t v10 = v6;
  int v11 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v9);
  if (v11 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF58F440[v11])(&v8, v9);
  }
}

void sub_1A1E3CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PendingDeletion>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v4, v3, &v5);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522478;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF522478;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingDeletion>(gdc::Entity,md::ls::PendingDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(void *a1, int8x8_t *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TexturesToDisconnect>(a2);
  uint64_t v6 = (unsigned char *)a1[1];
  char v5 = (unsigned char *)a1[2];
  int64_t v7 = v5 - v6;
  if (v5 == v6)
  {
    uint64_t v9 = 0;
    long long v10 = 0uLL;
  }
  else
  {
    if (v7 < 0) {
      abort();
    }
    char v8 = (char *)operator new(v5 - v6);
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v7);
    *(void *)&long long v10 = v8;
    *((void *)&v10 + 1) = v9;
  }
  long long v42 = v10;
  uint64_t v43 = v3;
  int v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v43);
  if (v12)
  {
    unint64_t v19 = (void *)v4[11];
    unint64_t v18 = v4[12];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v24 = (void *)v4[10];
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v19 - v24) + 1;
      if (v25 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v24) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v28 = (char *)operator new(24 * v27);
      }
      else
      {
        long long v28 = 0;
      }
      uint64_t v29 = &v28[8 * (v19 - v24)];
      *(void *)uint64_t v29 = 0;
      *((void *)v29 + 1) = 0;
      *((void *)v29 + 2) = 0;
      int64_t v30 = *((void *)&v42 + 1) - v42;
      if (*((void *)&v42 + 1) != (void)v42)
      {
        if (v30 < 0) {
          abort();
        }
        uint64_t v31 = (char *)operator new(*((void *)&v42 + 1) - v42);
        *(void *)uint64_t v29 = v31;
        *((void *)v29 + 1) = v31;
        uint64_t v32 = &v31[8 * (v30 >> 3)];
        *((void *)v29 + 2) = v32;
        memcpy(v31, (const void *)v42, v30);
        *((void *)v29 + 1) = v32;
      }
      uint64_t v33 = &v28[24 * v27];
      unint64_t v23 = v29 + 24;
      if (v19 == v24)
      {
        v4[10] = v29;
        v4[11] = v23;
        v4[12] = v33;
      }
      else
      {
        do
        {
          v34 = v29;
          *((void *)v29 - 2) = 0;
          *((void *)v29 - 1) = 0;
          long long v35 = *(_OWORD *)(v19 - 3);
          v19 -= 3;
          *(_OWORD *)(v29 - 24) = v35;
          v29 -= 24;
          *((void *)v34 - 1) = v19[2];
          *unint64_t v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
        }
        while (v19 != v24);
        unint64_t v19 = (void *)v4[10];
        v36 = (void *)v4[11];
        v4[10] = v29;
        v4[11] = v23;
        v4[12] = v33;
        if (v36 != v19)
        {
          v37 = v36;
          do
          {
            v39 = (void *)*(v37 - 3);
            v37 -= 3;
            v38 = v39;
            if (v39)
            {
              *(v36 - 2) = v38;
              operator delete(v38);
            }
            v36 = v37;
          }
          while (v37 != v19);
        }
      }
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *unint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      int64_t v20 = *((void *)&v42 + 1) - v42;
      if (*((void *)&v42 + 1) != (void)v42)
      {
        if (v20 < 0) {
          abort();
        }
        v21 = (char *)operator new(*((void *)&v42 + 1) - v42);
        *unint64_t v19 = v21;
        v19[1] = v21;
        v22 = &v21[8 * (v20 >> 3)];
        v19[2] = v22;
        memcpy(v21, (const void *)v42, v20);
        v19[1] = v22;
      }
      unint64_t v23 = v19 + 3;
      v4[11] = v19 + 3;
    }
    v4[11] = v23;
    uint64_t v15 = v4[31];
  }
  else
  {
    uint64_t v13 = v4[10] + 24 * (((uint64_t)v11 - v4[7]) >> 3);
    uint64_t v14 = *(void **)v13;
    if (*(void *)v13)
    {
      *(void *)(v13 + 8) = v14;
      operator delete(v14);
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
    }
    *(_OWORD *)uint64_t v13 = v42;
    *(void *)(v13 + 16) = v9;
    uint64_t v15 = v4[31];
    if (v13 != v4[11])
    {
      uint64_t v16 = (void *)v4[16];
      if (v16)
      {
        while (1)
        {
          v45 = &v43;
          uint64_t v46 = 1;
          uint64_t v44 = v15;
          uint64_t v17 = v16[6];
          if (!v17) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v17 + 48))(v17, &v44, &v45);
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_12;
          }
        }
LABEL_49:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
LABEL_12:
      *(void *)&long long v42 = 0;
      goto LABEL_46;
    }
    *(void *)&long long v42 = 0;
  }
  for (i = (void *)v4[22]; i; i = (void *)*i)
  {
    v45 = &v43;
    uint64_t v46 = 1;
    uint64_t v44 = v15;
    uint64_t v41 = i[6];
    if (!v41) {
      goto LABEL_49;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v41 + 48))(v41, &v44, &v45);
  }
LABEL_46:
  if ((void)v42) {
    operator delete((void *)v42);
  }
}

void sub_1A1E3CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  operator delete(v10);
  if (v9) {
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TexturesToDisconnect>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TexturesToDisconnect>::remove(void *a1, unint64_t a2)
{
  unint64_t v40 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != v15 - 24)
  {
    uint64_t v16 = *(char **)(v15 - 24);
    uint64_t v17 = *(unsigned char **)(v15 - 16);
    size_t v18 = v17 - v16;
    unint64_t v19 = (v17 - v16) >> 3;
    uint64_t v20 = *(void *)(v14 + 16);
    v21 = *(char **)v14;
    if (v19 > (v20 - *(void *)v14) >> 3)
    {
      if (v21)
      {
        *(void *)(v14 + 8) = v21;
        operator delete(v21);
        uint64_t v20 = 0;
        *(void *)uint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0;
      }
      if ((v18 & 0x8000000000000000) != 0) {
        goto LABEL_41;
      }
      uint64_t v22 = v20 >> 2;
      if (v20 >> 2 <= v19) {
        uint64_t v22 = (v17 - v16) >> 3;
      }
      BOOL v23 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v23) {
        unint64_t v24 = v22;
      }
      if (v24 >> 61) {
        goto LABEL_41;
      }
      uint64_t v25 = 8 * v24;
      unint64_t v26 = (char *)operator new(8 * v24);
      v21 = v26;
      *(void *)uint64_t v14 = v26;
      *(void *)(v14 + 8) = v26;
      *(void *)(v14 + 16) = &v26[v25];
      if (v17 != v16) {
        memcpy(v26, v16, v17 - v16);
      }
      unint64_t v27 = (char **)(v14 + 8);
      goto LABEL_32;
    }
    uint64_t v29 = *(char **)(v14 + 8);
    unint64_t v27 = (char **)(v14 + 8);
    long long v28 = v29;
    size_t v30 = v29 - v21;
    unint64_t v31 = (v29 - v21) >> 3;
    if (v31 >= v19)
    {
      if (v17 == v16)
      {
LABEL_32:
        *unint64_t v27 = &v21[v18];
        uint64_t v15 = a1[11];
        goto LABEL_33;
      }
      uint64_t v33 = v21;
      v34 = v16;
    }
    else
    {
      uint64_t v32 = &v16[8 * v31];
      if (v28 != v21)
      {
        memmove(v21, v16, v30);
        v21 = *v27;
      }
      size_t v18 = v17 - v32;
      if (v17 == v32) {
        goto LABEL_32;
      }
      uint64_t v33 = v21;
      v34 = v32;
    }
    memmove(v33, v34, v18);
    goto LABEL_32;
  }
LABEL_33:
  uint64_t v36 = v15 - 24;
  long long v35 = *(void **)(v15 - 24);
  if (v35)
  {
    *(void *)(v15 - 16) = v35;
    operator delete(v35);
  }
  a1[11] = v36;
  v37 = (void *)a1[28];
  if (v37)
  {
    uint64_t v38 = a1[31];
    while (1)
    {
      v42[0] = &v40;
      v42[1] = 1;
      uint64_t v41 = v38;
      uint64_t v39 = v37[6];
      if (!v39) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v39 + 48))(v39, &v41, v42);
      v37 = (void *)*v37;
      if (!v37) {
        return 1;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_41:
    abort();
  }
  return 1;
}

void gdc::ComponentStorageWrapper<md::ls::TexturesToDisconnect>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result;
  *a2 = &unk_1EF523630;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v5 = (unsigned char *)result[1];
  uint64_t v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    a2[1] = v7;
    a2[2] = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a2[3] = v8;
    __n128 result = memcpy(v7, v5, v6);
    a2[2] = v8;
  }
  a2[4] = v3[4];
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EF523630;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = (unsigned char *)a1[1];
  uint64_t v3 = (unsigned char *)a1[2];
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  v2[4] = a1[4];
  return v2;
}

void sub_1A1E3D4C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(void *a1)
{
  *a1 = &unk_1EF523630;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TexturesToDisconnect>(gdc::Entity,md::ls::TexturesToDisconnect &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(void *a1)
{
  *a1 = &unk_1EF523630;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RampMaterialData>(a2);
  long long v24 = *(_OWORD *)(a1 + 8);
  long long v25 = *(_OWORD *)(a1 + 24);
  uint64_t v26 = v3;
  int64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    char v12 = (char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (char *)v4[10];
      uint64_t v15 = (v12 - v14) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        goto LABEL_30;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[32 * v15];
      *(_OWORD *)uint64_t v20 = v24;
      *((_OWORD *)v20 + 1) = v25;
      uint64_t v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          long long v21 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        char v12 = (char *)v4[10];
      }
      v4[10] = v20;
      v4[11] = v13;
      v4[12] = &v19[32 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)char v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      uint64_t v13 = v12 + 32;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    unint64_t v7 = (_OWORD *)(v4[10] + 4 * ((void)v5 - v4[7]));
    *unint64_t v7 = v24;
    v7[1] = v25;
    uint64_t v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v22 = (void *)v4[22];
  if (v22)
  {
    while (1)
    {
      long long v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v27, &v28);
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_OWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 16);
  *uint64_t v14 = *(_OWORD *)(v15 - 32);
  v14[1] = v16;
  a1[11] -= 32;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RampMaterialData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5226B8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF5226B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RampMaterialData>(gdc::Entity,md::ls::RampMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520390;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EF520390;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::~__func()
{
}

void non-virtual thunk to'ggl::ManeuverPoint::Mesh::~Mesh(ggl::ManeuverPoint::Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::ManeuverPoint::Mesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::ManeuverPoint::Mesh *)((char *)this - 16));
}

void ggl::ManeuverPoint::Mesh::~Mesh(ggl::ManeuverPoint::Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ManeuverPoint::BasePipelineState::~BasePipelineState(ggl::ManeuverPoint::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::ManeuverPoint::BasePipelineSetup::textureIsEnabled(ggl::ManeuverPoint::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::ManeuverPoint::BasePipelineSetup::constantDataIsEnabled(ggl::ManeuverPoint::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::ManeuverPoint::BasePipelineSetup::~BasePipelineSetup(ggl::ManeuverPoint::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ManeuverPoint::BasePipelineSetup::BasePipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup((void *)a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((void *)a1, a2, 0);
  }
  *(void *)a1 = &unk_1EF55B088;
  uint64_t v11 = *(uint64_t **)(a1 + 64);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  *uint64_t v11 = *a4;
  v11[1] = 0;
  uint64_t v14 = *(void **)(a1 + 160);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)v14[1];
  *uint64_t v14 = v12;
  v14[1] = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *a5;
  uint64_t v18 = a5[1];
  *(void *)(v16 + 16) = *a5;
  *(void *)(v16 + 24) = 0;
  uint64_t v19 = *(void *)(a1 + 160);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v20 = *(std::__shared_weak_count **)(v19 + 24);
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  **(void **)(a1 + 96) = a6;
  return a1;
}

void altitude::DigitalGlobeProvider::requestFailed(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  char v5 = *(unsigned char *)(a4 + 1);
  if (v5)
  {
    int v6 = a5;
    int v7 = *(_DWORD *)(a4 + 4);
    int v8 = *(_DWORD *)(a4 + 8);
    char v9 = *(unsigned char *)a4;
    v34[0] = *(unsigned char *)a4;
    v34[1] = v5 - 1;
    int v35 = v7 >> 1;
    int v36 = v8 >> 1;
    __p = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v11 = *a3;
    uint64_t v10 = a3[1];
    int64_t v12 = v10 - *a3;
    if (v10 == *a3)
    {
      unint64_t v20 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_23;
      }
      uint64_t v15 = (char *)operator new(v12);
      uint64_t v16 = v15;
      uint64_t v17 = 0;
      uint64_t v18 = &v15[24 * v14];
      __p = v15;
      uint64_t v33 = v18;
      do
      {
        uint64_t v19 = &v15[v17];
        *(_WORD *)uint64_t v19 = *(_WORD *)(v11 + v17);
        *(void *)(v19 + 4) = *(void *)(v11 + v17 + 4);
        v17 += 24;
      }
      while (v11 + v17 != v10);
      unint64_t v20 = &v15[v17];
      int v6 = a5;
      if (&v15[v17] < v18)
      {
        char *v20 = v9;
        v20[1] = v5;
        i = v20 + 24;
        *((_DWORD *)v20 + 1) = v7;
        *((_DWORD *)v20 + 2) = v8;
LABEL_20:
        uint64_t v32 = i;
        altitude::DigitalGlobeProvider::requestPatch(a1, a2, v34, (uint64_t **)&__p, v6);
        if (__p)
        {
          uint64_t v32 = __p;
          operator delete(__p);
        }
        return;
      }
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 3) + 1;
    if (v22 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v25 = 24 * v24;
      uint64_t v26 = (char *)operator new(24 * v24);
      uint64_t v27 = &v26[8 * ((v20 - v16) >> 3)];
      *uint64_t v27 = v9;
      v27[1] = v5;
      *((_DWORD *)v27 + 1) = v7;
      *((_DWORD *)v27 + 2) = v8;
      for (i = v27 + 24; v20 != v16; *(void *)(v27 + 4) = *(void *)(v20 + 4))
      {
        __int16 v28 = *((_WORD *)v20 - 12);
        v20 -= 24;
        *((_WORD *)v27 - 12) = v28;
        v27 -= 24;
      }
      __p = v27;
      uint64_t v33 = &v26[v25];
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_20;
    }
LABEL_23:
    abort();
  }
}

void altitude::DigitalGlobeProvider::requestPatch(uint64_t a1, uint64_t a2, char *a3, uint64_t **a4, int a5)
{
  altitude::MapProvider::cacheLookup((altitude::MapProvider *)&v85, *(const QuadTile **)(a1 + 16), *(_DWORD *)(a1 + 24), a3);
  int v9 = *(_DWORD *)(a1 + 24);
  if (v9 == 16)
  {
    int v10 = 33;
  }
  else if (v9 == 32)
  {
    int v10 = 45;
  }
  else
  {
    int v10 = 7;
  }
  int v11 = v86;
  int v12 = HIDWORD(v87);
  if (v9 == 32 || v9 == 64)
  {
    if (v86 >= 0x20u) {
      int v13 = v87;
    }
    else {
      int v13 = (1 << v86) + ~v87;
    }
    unint64_t v14 = (char *)operator new(0x20uLL);
    uint64_t v15 = v14 + 32;
    *((void *)v14 + 1) = 0;
    *(_DWORD *)unint64_t v14 = v10;
    *((_DWORD *)v14 + 1) = 0;
    *((_DWORD *)v14 + 4) = v11;
    *((_DWORD *)v14 + 5) = v13;
    *((_DWORD *)v14 + 6) = v12;
    *((_DWORD *)v14 + 7) = 0;
    uint64_t v16 = *(void *)(a2 + 176);
    if (!v16) {
      goto LABEL_44;
    }
  }
  else
  {
    int v82 = a5;
    v83 = a4;
    int v17 = v86 + 1;
    int v18 = 2 * HIDWORD(v87);
    if (v86 >= 0x1Fu) {
      int v19 = 2 * v87;
    }
    else {
      int v19 = (2 << v86) + ~(2 * v87);
    }
    int v84 = v19;
    if (v86 >= 0x1Fu) {
      int v20 = (2 * v87) | 1;
    }
    else {
      int v20 = (2 << v86) + ((2 * v87) ^ 0xFFFFFFFE);
    }
    uint64_t v21 = (char *)operator new(0x20uLL);
    *(_DWORD *)uint64_t v21 = v10;
    *(void *)(v21 + 4) = 0;
    *((_DWORD *)v21 + 3) = 0;
    *((_DWORD *)v21 + 4) = v17;
    *((_DWORD *)v21 + 5) = v19;
    *((_DWORD *)v21 + 6) = v18;
    *((_DWORD *)v21 + 7) = 0;
    unint64_t v22 = (char *)operator new(0x40uLL);
    *((_DWORD *)v22 + 8) = v10;
    *(void *)(v22 + 36) = 0;
    *((_DWORD *)v22 + 11) = 0;
    *((_DWORD *)v22 + 12) = v17;
    int v80 = v20;
    *((_DWORD *)v22 + 13) = v20;
    *((_DWORD *)v22 + 14) = v18;
    *((_DWORD *)v22 + 15) = 0;
    long long v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v21;
    *((_OWORD *)v22 + 1) = v23;
    operator delete(v21);
    unint64_t v24 = (char *)operator new(0x80uLL);
    uint64_t v25 = v24;
    *((_DWORD *)v24 + 16) = v10;
    uint64_t v26 = v24 + 128;
    *(void *)(v24 + 68) = 0;
    *((_DWORD *)v24 + 19) = 0;
    *((_DWORD *)v24 + 20) = v17;
    int v81 = v17;
    int v27 = (2 * v12) | 1;
    *((_DWORD *)v24 + 21) = v84;
    *((_DWORD *)v24 + 22) = v27;
    __int16 v28 = v24 + 96;
    uint64_t v29 = -32;
    *((_DWORD *)v24 + 23) = 0;
    do
    {
      size_t v30 = &v24[v29];
      long long v31 = *(_OWORD *)&v22[v29 + 80];
      *((_OWORD *)v30 + 4) = *(_OWORD *)&v22[v29 + 64];
      *((_OWORD *)v30 + 5) = v31;
      v29 -= 32;
    }
    while (v29 != -96);
    unint64_t v14 = v24;
    operator delete(v22);
    if (v28 >= v26)
    {
      uint64_t v32 = (v28 - v25) >> 5;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 59) {
        goto LABEL_101;
      }
      if ((v26 - v25) >> 4 > v33) {
        unint64_t v33 = (v26 - v14) >> 4;
      }
      if ((unint64_t)(v26 - v25) >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
      }
      if (v33 >> 59) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v34 = (char *)operator new(32 * v33) + 32 * v32;
      *((void *)v34 + 1) = 0;
      *(_DWORD *)v34 = v10;
      *((_DWORD *)v34 + 1) = 0;
      *((_DWORD *)v34 + 4) = v81;
      *((_DWORD *)v34 + 5) = v80;
      *((_DWORD *)v34 + 6) = v27;
      *((_DWORD *)v34 + 7) = 0;
      uint64_t v15 = v34 + 32;
      if (v28 == v25)
      {
        a4 = v83;
      }
      else
      {
        int v35 = (long long *)(v25 + 80);
        a4 = v83;
        do
        {
          long long v36 = *(v35 - 1);
          long long v37 = *v35;
          v35 -= 2;
          *((_OWORD *)v34 - 2) = v36;
          *((_OWORD *)v34 - 1) = v37;
          v34 -= 32;
          v29 += 32;
        }
        while (v29);
      }
      operator delete(v25);
      unint64_t v14 = v34;
      a5 = v82;
      uint64_t v16 = *(void *)(a2 + 176);
      if (!v16) {
        goto LABEL_44;
      }
    }
    else
    {
      *((void *)v28 + 1) = 0;
      *(_DWORD *)__int16 v28 = v10;
      *((_DWORD *)v28 + 1) = 0;
      a5 = v82;
      *((_DWORD *)v28 + 4) = v81;
      *((_DWORD *)v28 + 5) = v80;
      uint64_t v15 = v28 + 32;
      *((_DWORD *)v28 + 6) = v27;
      *((_DWORD *)v28 + 7) = 0;
      a4 = v83;
      uint64_t v16 = *(void *)(a2 + 176);
      if (!v16) {
        goto LABEL_44;
      }
    }
  }
  if (!*(void *)(a2 + 184))
  {
LABEL_44:
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 152));
    *(_DWORD *)(a2 + 160) |= 1u;
    pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 152));
    goto LABEL_100;
  }
  *(_DWORD *)(a2 + 208) = a5;
  char v38 = *(unsigned char *)(*(void *)(a2 + 192) + 28);
  uint64_t v93 = 0x200000005;
  char v94 = v85;
  char v95 = v11;
  uint64_t v96 = v87;
  v98 = 0;
  v99 = 0;
  __p = 0;
  int64_t v39 = v15 - v14;
  if (v15 != v14)
  {
    if (v39 < 0) {
      goto LABEL_101;
    }
    uint64_t v40 = v39 >> 5;
    uint64_t v41 = operator new(v39);
    __p = v41;
    v99 = &v41[2 * v40];
    long long v42 = v14;
    do
    {
      long long v43 = *(_OWORD *)v42;
      long long v44 = *((_OWORD *)v42 + 1);
      v42 += 32;
      *uint64_t v41 = v43;
      v41[1] = v44;
      v41 += 2;
    }
    while (v42 != v15);
    v98 = v41;
  }
  char v100 = v38;
  uint64_t v45 = *(unsigned int *)(*(void *)(a2 + 8) + 88);
  uint64_t v46 = atomic_load((unsigned int *)(a2 + 16));
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104))(&v90, v16, &v93, v45, v46, 1, 1);
  unint64_t v47 = v91;
  v48 = v92;
  if (v92)
  {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    v89 = v48;
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    v89 = 0;
  }
  unint64_t v88 = v47;
  karo::Job::addBlockingSubJob((uint64_t *)a2, &v88, -1, 0);
  v49 = v89;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  v51 = (uint64_t **)(a2 + 224);
  v50 = *(uint64_t **)(a2 + 224);
  if (v50)
  {
    while (1)
    {
      while (1)
      {
        v52 = (uint64_t **)v50;
        unint64_t v53 = v50[4];
        if (v47 >= v53) {
          break;
        }
        v50 = *v52;
        v51 = v52;
        if (!*v52) {
          goto LABEL_56;
        }
      }
      if (v53 >= v47) {
        break;
      }
      v50 = v52[1];
      if (!v50)
      {
        v51 = v52 + 1;
        goto LABEL_56;
      }
    }
    v55 = v52;
  }
  else
  {
    v52 = (uint64_t **)(a2 + 224);
LABEL_56:
    v54 = (uint64_t **)operator new(0x48uLL);
    v55 = v54;
    v54[4] = (uint64_t *)v47;
    v54[5] = (uint64_t *)v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v54[6] = 0;
    v54[7] = 0;
    v54[8] = 0;
    *v54 = 0;
    v54[1] = 0;
    v54[2] = (uint64_t *)v52;
    *v51 = (uint64_t *)v54;
    uint64_t v56 = **(void **)(a2 + 216);
    v57 = (uint64_t *)v54;
    if (v56)
    {
      *(void *)(a2 + 216) = v56;
      v57 = *v51;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 224), v57);
    ++*(void *)(a2 + 232);
  }
  if (v55 + 6 == a4) {
    goto LABEL_90;
  }
  v59 = (long long *)*a4;
  v58 = (long long *)a4[1];
  unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)*a4) >> 3);
  uint64_t v61 = (uint64_t)v55[8];
  v62 = (char *)v55[6];
  if (0xAAAAAAAAAAAAAAABLL * ((v61 - (uint64_t)v62) >> 3) >= v60)
  {
    v71 = v55[7];
    v69 = (void **)(v55 + 7);
    v70 = (char *)v71;
    unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - v62) >> 3);
    if (v72 >= v60)
    {
      for (i = v62; v59 != v58; v59 = (long long *)((char *)v59 + 24))
      {
        long long v78 = *v59;
        *((void *)i + 2) = *((void *)v59 + 2);
        *(_OWORD *)i = v78;
        i += 24;
      }
      int64_t v68 = i - v62;
    }
    else
    {
      uint64_t v73 = (uint64_t)v59 + 24 * v72;
      if (v70 != v62)
      {
        uint64_t v74 = 24 * v72;
        do
        {
          long long v75 = *v59;
          *((void *)v62 + 2) = *((void *)v59 + 2);
          *(_OWORD *)v62 = v75;
          v62 += 24;
          v59 = (long long *)((char *)v59 + 24);
          v74 -= 24;
        }
        while (v74);
        v62 = (char *)*v69;
      }
      v76 = v62;
      if ((long long *)v73 != v58)
      {
        v76 = v62;
        do
        {
          *(_WORD *)v76 = *(_WORD *)v73;
          *(void *)((char *)v76 + 4) = *(void *)(v73 + 4);
          v73 += 24;
          v76 += 3;
        }
        while ((long long *)v73 != v58);
      }
      int64_t v68 = (char *)v76 - v62;
    }
    goto LABEL_89;
  }
  if (v62)
  {
    v55[7] = (uint64_t *)v62;
    operator delete(v62);
    uint64_t v61 = 0;
    v55[6] = 0;
    v55[7] = 0;
    v55[8] = 0;
  }
  if (v60 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_101;
  }
  unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (v61 >> 3);
  uint64_t v64 = 2 * v63;
  if (2 * v63 <= v60) {
    uint64_t v64 = v60;
  }
  unint64_t v65 = v63 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v64;
  if (v65 > 0xAAAAAAAAAAAAAAALL) {
LABEL_101:
  }
    abort();
  uint64_t v66 = 24 * v65;
  v62 = (char *)operator new(24 * v65);
  v55[6] = (uint64_t *)v62;
  v55[8] = (uint64_t *)&v62[v66];
  v67 = v62;
  if (v59 != v58)
  {
    v67 = v62;
    do
    {
      *(_WORD *)v67 = *(_WORD *)v59;
      *(void *)((char *)v67 + 4) = *(void *)((char *)v59 + 4);
      v59 = (long long *)((char *)v59 + 24);
      v67 += 3;
    }
    while (v59 != v58);
  }
  int64_t v68 = (char *)v67 - v62;
  v69 = (void **)(v55 + 7);
LABEL_89:
  *v69 = &v62[v68];
LABEL_90:
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  v90 = off_1EF5677B0;
  if (v91) {
    atomic_fetch_add((atomic_uint *volatile)(v91 + 128), 0xFFFFFFFF);
  }
  v79 = v92;
  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  if (__p)
  {
    v98 = __p;
    operator delete(__p);
  }
LABEL_100:
  operator delete(v14);
}

uint64_t altitude::DigitalGlobeProvider::request(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (*(void *)(a1 + 8))
  {
    altitude::MapProvider::cacheLookup((altitude::MapProvider *)v5, *(const QuadTile **)(a1 + 16), *(_DWORD *)(a1 + 24), a4);
    operator new();
  }
  return 0;
}

void altitude::DigitalGlobeProvider::~DigitalGlobeProvider(altitude::DigitalGlobeProvider *this)
{
}

void karo::graphics::NoCullCullingGraph::unregisterElement(void *a1, unint64_t a2)
{
  long long v4 = a1 + 6;
  uint64_t v3 = (uint64_t *)a1[6];
  if (v3)
  {
    char v5 = v4;
    int v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v6;
      }
      else {
        int v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        char v5 = v6;
      }
      int v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      int v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          int v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[5] == v5) {
        a1[5] = v11;
      }
      --a1[7];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t *karo::graphics::NoCullCullingGraph::registerElement(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  char v5 = (uint64_t **)(result + 6);
  long long v4 = (uint64_t *)result[6];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        long long v4 = *v6;
        char v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      long long v4 = v6[1];
      if (!v4)
      {
        char v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v6 = (uint64_t **)(result + 6);
LABEL_8:
    BOOL v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = a2;
    *BOOL v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *char v5 = v8;
    uint64_t v9 = *(void *)v3[5];
    if (v9)
    {
      v3[5] = v9;
      int v10 = *v5;
    }
    else
    {
      int v10 = v8;
    }
    __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[6], v10);
    ++v3[7];
  }
  return result;
}

void karo::graphics::NoCullCullingGraph::cull(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(void **)(a1 + 40);
  char v5 = (void *)(a1 + 48);
  if (v4 != (void *)(a1 + 48))
  {
    unint64_t v7 = *(void **)(a4 + 8);
    while (1)
    {
      unint64_t v8 = *(void *)(a4 + 16);
      if ((unint64_t)v7 >= v8) {
        break;
      }
      *v7++ = v4[4];
LABEL_34:
      *(void *)(a4 + 8) = v7;
      uint64_t v26 = (void *)v4[1];
      if (v26)
      {
        do
        {
          int v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (void *)v4[2];
          BOOL v28 = *v27 == (void)v4;
          long long v4 = v27;
        }
        while (!v28);
      }
      long long v4 = v27;
      if (v27 == v5) {
        return;
      }
    }
    uint64_t v9 = *(unsigned char **)a4;
    uint64_t v10 = (uint64_t)v7 - *(void *)a4;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      abort();
    }
    uint64_t v13 = v8 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    *uint64_t v16 = v4[4];
    int v17 = v16 + 1;
    if (v7 == (void *)v9)
    {
      uint64_t v9 = v7;
    }
    else
    {
      unint64_t v18 = (char *)(v7 - 1) - v9;
      if (v18 < 0x168)
      {
        int v19 = v7;
        goto LABEL_29;
      }
      if (&v15[v10 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v15[v10 - 8])
      {
        int v19 = v7;
        goto LABEL_29;
      }
      if ((void *)((char *)v7 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
      {
        int v19 = v7;
        goto LABEL_29;
      }
      if ((unint64_t)((char *)v7 - v15 - v10) < 0x20)
      {
        int v19 = v7;
        goto LABEL_29;
      }
      uint64_t v20 = (v18 >> 3) + 1;
      int v19 = &v7[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v21 = &v15[8 * v11 - 16];
      unint64_t v22 = (long long *)(v7 - 2);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v16 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_29:
          uint64_t v25 = *--v19;
          *--uint64_t v16 = v25;
        }
        while (v19 != (void *)v9);
        uint64_t v9 = *(unsigned char **)a4;
      }
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v17;
    *(void *)(a4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
    unint64_t v7 = v17;
    goto LABEL_34;
  }
}

void karo::graphics::NoCullCullingGraph::~NoCullCullingGraph(karo::graphics::NoCullCullingGraph *this)
{
  *(void *)this = &unk_1EF568300;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 6));
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF568300;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 6));
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void md::MapLabeler::~MapLabeler(md::MapLabeler *this)
{
  *(void *)this = &unk_1EF5302A0;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1EF536078;
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v4, *((void *)this + 3) - v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(void *)this = &unk_1EF5302A0;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1EF536078;
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v4, *((void *)this + 3) - v4);
  }
}

void ggl::SDFGlyph::DefaultPipelineState::~DefaultPipelineState(ggl::SDFGlyph::DefaultPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::SDFGlyph::DefaultPipelineSetup::textureIsEnabled(ggl::SDFGlyph::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::SDFGlyph::DefaultPipelineSetup::constantDataIsEnabled(ggl::SDFGlyph::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::SDFGlyph::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::SDFGlyph::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::SDFGlyph::HaloPipelineState::~HaloPipelineState(ggl::SDFGlyph::HaloPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::SDFGlyph::HaloPipelineSetup::textureIsEnabled(ggl::SDFGlyph::HaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::SDFGlyph::HaloPipelineSetup::constantDataIsEnabled(ggl::SDFGlyph::HaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::SDFGlyph::HaloPipelineSetup::~HaloPipelineSetup(ggl::SDFGlyph::HaloPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::SDFGlyph::SuperSamplePipelineState::~SuperSamplePipelineState(ggl::SDFGlyph::SuperSamplePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::SDFGlyph::SuperSamplePipelineSetup::textureIsEnabled(ggl::SDFGlyph::SuperSamplePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::SDFGlyph::SuperSamplePipelineSetup::constantDataIsEnabled(ggl::SDFGlyph::SuperSamplePipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::SDFGlyph::SuperSamplePipelineSetup::~SuperSamplePipelineSetup(ggl::SDFGlyph::SuperSamplePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    char v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      char v5 = __p;
    }
    unint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARDebugDrawMeshBoundsLogic::runBeforeLayout(uint64_t a1)
{
  id v242 = +[VKDebugSettings sharedSettings];
  if ([v242 arDebugDrawMeshFeatureBounds])
  {
    uint64_t v2 = *(int8x8_t **)(a1 + 120);
    uint64_t v3 = (void *)gdc::Registry::storage<arComponents::IsVisible>(v2);
    uint64_t v4 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v2);
    char v5 = (void *)gdc::Registry::storage<arComponents::Boundary>(v2);
    int v6 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v2);
    uint64_t v241 = a1;
    char v7 = *(int8x8_t **)(a1 + 120);
    unint64_t v8 = (void *)gdc::Registry::storage<arComponents::IsVisible>(v7);
    char v9 = (void *)gdc::Registry::storage<arComponents::MeshDataComponent>(v7);
    v240 = (void *)gdc::Registry::storage<arComponents::Boundary>(v7);
    uint64_t v10 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v7);
    uint64_t v11 = v5 + 4;
    unint64_t v12 = v6 + 4;
    uint64_t v14 = v3[7];
    uint64_t v13 = v3[8];
    if (v4[8] - v4[7] >= (unint64_t)(v13 - v14)) {
      uint64_t v15 = v3 + 4;
    }
    else {
      uint64_t v15 = v4 + 4;
    }
    if (v5[8] - v5[7] < v15[4] - v15[3]) {
      uint64_t v15 = v5 + 4;
    }
    if (v6[8] - v6[7] >= v15[4] - v15[3]) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v6 + 4;
    }
    if (v3 + 4 == v16 && v14 != v13)
    {
      do
      {
        unint64_t v24 = *(unsigned int *)(v14 + 4);
        unint64_t v25 = v24 >> 7;
        uint64_t v26 = v4[4];
        if (v24 >> 7 < (v4[5] - v26) >> 3)
        {
          uint64_t v27 = *(void *)(v26 + 8 * v25);
          if (v27)
          {
            uint64_t v28 = v24 & 0x7F;
            unint64_t v29 = *(unsigned __int16 *)(v27 + 2 * v28);
            uint64_t v31 = v4[7];
            uint64_t v30 = v4[8];
            if (v29 < (v30 - v31) >> 3)
            {
              uint64_t v32 = v31 + 8 * v29;
              if (v32 != v30 && *(_DWORD *)(v32 + 4) == v24)
              {
                uint64_t v34 = v5[4];
                if (v25 < (v5[5] - v34) >> 3)
                {
                  uint64_t v35 = *(void *)(v34 + 8 * v25);
                  if (v35)
                  {
                    unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v28);
                    uint64_t v38 = v5[7];
                    uint64_t v37 = v5[8];
                    if (v36 < (v37 - v38) >> 3)
                    {
                      uint64_t v39 = v38 + 8 * v36;
                      if (v39 != v37 && *(_DWORD *)(v39 + 4) == v24)
                      {
                        uint64_t v41 = v6[4];
                        if (v25 < (v6[5] - v41) >> 3)
                        {
                          uint64_t v42 = *(void *)(v41 + 8 * v25);
                          if (v42)
                          {
                            unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v28);
                            uint64_t v45 = v6[7];
                            uint64_t v44 = v6[8];
                            if (v43 < (v44 - v45) >> 3)
                            {
                              uint64_t v46 = v45 + 8 * v43;
                              if (v46 != v44 && *(_DWORD *)(v46 + 4) == v24)
                              {
                                v233 = v12;
                                v236 = v10;
                                v231 = v11;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v14);
                                uint64_t v11 = v231;
                                unint64_t v12 = v233;
                                uint64_t v10 = v236;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v14 += 8;
      }
      while (v14 != v13);
    }
    if (v4 + 4 == v16)
    {
      uint64_t v72 = v4[7];
      uint64_t v73 = v4[8];
      while (v72 != v73)
      {
        unint64_t v74 = *(unsigned int *)(v72 + 4);
        unint64_t v75 = v74 >> 7;
        uint64_t v76 = v3[4];
        if (v74 >> 7 < (v3[5] - v76) >> 3)
        {
          uint64_t v77 = *(void *)(v76 + 8 * v75);
          if (v77)
          {
            uint64_t v78 = v74 & 0x7F;
            unint64_t v79 = *(unsigned __int16 *)(v77 + 2 * v78);
            uint64_t v81 = v3[7];
            uint64_t v80 = v3[8];
            if (v79 < (v80 - v81) >> 3)
            {
              uint64_t v82 = v81 + 8 * v79;
              if (v82 != v80 && *(_DWORD *)(v82 + 4) == v74)
              {
                uint64_t v84 = v5[4];
                if (v75 < (v5[5] - v84) >> 3)
                {
                  uint64_t v85 = *(void *)(v84 + 8 * v75);
                  if (v85)
                  {
                    unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * v78);
                    uint64_t v88 = v5[7];
                    uint64_t v87 = v5[8];
                    if (v86 < (v87 - v88) >> 3)
                    {
                      uint64_t v89 = v88 + 8 * v86;
                      if (v89 != v87 && *(_DWORD *)(v89 + 4) == v74)
                      {
                        uint64_t v91 = v6[4];
                        if (v75 < (v6[5] - v91) >> 3)
                        {
                          uint64_t v92 = *(void *)(v91 + 8 * v75);
                          if (v92)
                          {
                            unint64_t v93 = *(unsigned __int16 *)(v92 + 2 * v78);
                            uint64_t v95 = v6[7];
                            uint64_t v94 = v6[8];
                            if (v93 < (v94 - v95) >> 3)
                            {
                              uint64_t v96 = v95 + 8 * v93;
                              if (v96 != v94 && *(_DWORD *)(v96 + 4) == v74)
                              {
                                v234 = v12;
                                v238 = v10;
                                v232 = v11;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v72);
                                uint64_t v11 = v232;
                                unint64_t v12 = v234;
                                uint64_t v10 = v238;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v72 += 8;
      }
    }
    if (v11 == v16)
    {
      uint64_t v98 = v5[7];
      uint64_t v99 = v5[8];
      while (v98 != v99)
      {
        unint64_t v100 = *(unsigned int *)(v98 + 4);
        unint64_t v101 = v100 >> 7;
        uint64_t v102 = v3[4];
        if (v100 >> 7 < (v3[5] - v102) >> 3)
        {
          uint64_t v103 = *(void *)(v102 + 8 * v101);
          if (v103)
          {
            uint64_t v104 = v100 & 0x7F;
            unint64_t v105 = *(unsigned __int16 *)(v103 + 2 * v104);
            uint64_t v107 = v3[7];
            uint64_t v106 = v3[8];
            if (v105 < (v106 - v107) >> 3)
            {
              uint64_t v108 = v107 + 8 * v105;
              if (v108 != v106 && *(_DWORD *)(v108 + 4) == v100)
              {
                uint64_t v110 = v4[4];
                if (v101 < (v4[5] - v110) >> 3)
                {
                  uint64_t v111 = *(void *)(v110 + 8 * v101);
                  if (v111)
                  {
                    unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v104);
                    uint64_t v114 = v4[7];
                    uint64_t v113 = v4[8];
                    if (v112 < (v113 - v114) >> 3)
                    {
                      uint64_t v115 = v114 + 8 * v112;
                      if (v115 != v113 && *(_DWORD *)(v115 + 4) == v100)
                      {
                        uint64_t v117 = v6[4];
                        if (v101 < (v6[5] - v117) >> 3)
                        {
                          uint64_t v118 = *(void *)(v117 + 8 * v101);
                          if (v118)
                          {
                            unint64_t v119 = *(unsigned __int16 *)(v118 + 2 * v104);
                            uint64_t v121 = v6[7];
                            uint64_t v120 = v6[8];
                            if (v119 < (v120 - v121) >> 3)
                            {
                              uint64_t v122 = v121 + 8 * v119;
                              if (v122 != v120 && *(_DWORD *)(v122 + 4) == v100)
                              {
                                v235 = v12;
                                v239 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v98);
                                unint64_t v12 = v235;
                                uint64_t v10 = v239;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v98 += 8;
      }
    }
    if (v12 == v16)
    {
      uint64_t v124 = v6[7];
      uint64_t v125 = v6[8];
      while (v124 != v125)
      {
        unint64_t v126 = *(unsigned int *)(v124 + 4);
        unint64_t v127 = v126 >> 7;
        uint64_t v128 = v3[4];
        if (v126 >> 7 < (v3[5] - v128) >> 3)
        {
          uint64_t v129 = *(void *)(v128 + 8 * v127);
          if (v129)
          {
            uint64_t v130 = v126 & 0x7F;
            unint64_t v131 = *(unsigned __int16 *)(v129 + 2 * v130);
            uint64_t v133 = v3[7];
            uint64_t v132 = v3[8];
            if (v131 < (v132 - v133) >> 3)
            {
              uint64_t v134 = v133 + 8 * v131;
              if (v134 != v132 && *(_DWORD *)(v134 + 4) == v126)
              {
                uint64_t v136 = v4[4];
                if (v127 < (v4[5] - v136) >> 3)
                {
                  uint64_t v137 = *(void *)(v136 + 8 * v127);
                  if (v137)
                  {
                    unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * v130);
                    uint64_t v140 = v4[7];
                    uint64_t v139 = v4[8];
                    if (v138 < (v139 - v140) >> 3)
                    {
                      uint64_t v141 = v140 + 8 * v138;
                      if (v141 != v139 && *(_DWORD *)(v141 + 4) == v126)
                      {
                        uint64_t v143 = v5[4];
                        if (v127 < (v5[5] - v143) >> 3)
                        {
                          uint64_t v144 = *(void *)(v143 + 8 * v127);
                          if (v144)
                          {
                            unint64_t v145 = *(unsigned __int16 *)(v144 + 2 * v130);
                            uint64_t v147 = v5[7];
                            uint64_t v146 = v5[8];
                            if (v145 < (v146 - v147) >> 3)
                            {
                              uint64_t v148 = v147 + 8 * v145;
                              if (v148 != v146 && *(_DWORD *)(v148 + 4) == v126)
                              {
                                v150 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v124);
                                uint64_t v10 = v150;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v124 += 8;
      }
    }
    unint64_t v18 = v10 + 4;
    uint64_t v20 = v8[7];
    uint64_t v19 = v8[8];
    if (v9[8] - v9[7] >= (unint64_t)(v19 - v20)) {
      uint64_t v21 = v8 + 4;
    }
    else {
      uint64_t v21 = v9 + 4;
    }
    if (v240[8] - v240[7] < v21[4] - v21[3]) {
      uint64_t v21 = v240 + 4;
    }
    if (v10[8] - v10[7] >= v21[4] - v21[3]) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = v10 + 4;
    }
    if (v8 + 4 == v22 && v20 != v19)
    {
      do
      {
        unint64_t v48 = *(unsigned int *)(v20 + 4);
        unint64_t v49 = v48 >> 7;
        uint64_t v50 = v9[4];
        if (v48 >> 7 < (v9[5] - v50) >> 3)
        {
          uint64_t v51 = *(void *)(v50 + 8 * v49);
          if (v51)
          {
            uint64_t v52 = v48 & 0x7F;
            unint64_t v53 = *(unsigned __int16 *)(v51 + 2 * v52);
            uint64_t v55 = v9[7];
            uint64_t v54 = v9[8];
            if (v53 < (v54 - v55) >> 3)
            {
              uint64_t v56 = v55 + 8 * v53;
              if (v56 != v54 && *(_DWORD *)(v56 + 4) == v48)
              {
                uint64_t v58 = v240[4];
                if (v49 < (v240[5] - v58) >> 3)
                {
                  uint64_t v59 = *(void *)(v58 + 8 * v49);
                  if (v59)
                  {
                    unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * v52);
                    uint64_t v62 = v240[7];
                    uint64_t v61 = v240[8];
                    if (v60 < (v61 - v62) >> 3)
                    {
                      uint64_t v63 = v62 + 8 * v60;
                      if (v63 != v61 && *(_DWORD *)(v63 + 4) == v48)
                      {
                        uint64_t v65 = v10[4];
                        if (v49 < (v10[5] - v65) >> 3)
                        {
                          uint64_t v66 = *(void *)(v65 + 8 * v49);
                          if (v66)
                          {
                            unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * v52);
                            uint64_t v69 = v10[7];
                            uint64_t v68 = v10[8];
                            if (v67 < (v68 - v69) >> 3)
                            {
                              uint64_t v70 = v69 + 8 * v67;
                              if (v70 != v68 && *(_DWORD *)(v70 + 4) == v48)
                              {
                                v237 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v20);
                                uint64_t v10 = v237;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v20 += 8;
      }
      while (v20 != v19);
    }
    if (v9 + 4 == v22)
    {
      uint64_t v151 = v9[7];
      uint64_t v152 = v9[8];
      while (v151 != v152)
      {
        unint64_t v153 = *(unsigned int *)(v151 + 4);
        unint64_t v154 = v153 >> 7;
        uint64_t v155 = v8[4];
        if (v153 >> 7 < (v8[5] - v155) >> 3)
        {
          uint64_t v156 = *(void *)(v155 + 8 * v154);
          if (v156)
          {
            uint64_t v157 = v153 & 0x7F;
            unint64_t v158 = *(unsigned __int16 *)(v156 + 2 * v157);
            uint64_t v160 = v8[7];
            uint64_t v159 = v8[8];
            if (v158 < (v159 - v160) >> 3)
            {
              uint64_t v161 = v160 + 8 * v158;
              if (v161 != v159 && *(_DWORD *)(v161 + 4) == v153)
              {
                uint64_t v163 = v240[4];
                if (v154 < (v240[5] - v163) >> 3)
                {
                  uint64_t v164 = *(void *)(v163 + 8 * v154);
                  if (v164)
                  {
                    unint64_t v165 = *(unsigned __int16 *)(v164 + 2 * v157);
                    uint64_t v167 = v240[7];
                    uint64_t v166 = v240[8];
                    if (v165 < (v166 - v167) >> 3)
                    {
                      uint64_t v168 = v167 + 8 * v165;
                      if (v168 != v166 && *(_DWORD *)(v168 + 4) == v153)
                      {
                        uint64_t v170 = v10[4];
                        if (v154 < (v10[5] - v170) >> 3)
                        {
                          uint64_t v171 = *(void *)(v170 + 8 * v154);
                          if (v171)
                          {
                            unint64_t v172 = *(unsigned __int16 *)(v171 + 2 * v157);
                            uint64_t v174 = v10[7];
                            uint64_t v173 = v10[8];
                            if (v172 < (v173 - v174) >> 3)
                            {
                              uint64_t v175 = v174 + 8 * v172;
                              if (v175 != v173 && *(_DWORD *)(v175 + 4) == v153)
                              {
                                v177 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v151);
                                uint64_t v10 = v177;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v151 += 8;
      }
    }
    if (v240 + 4 == v22)
    {
      uint64_t v178 = v240[7];
      uint64_t v179 = v240[8];
      while (v178 != v179)
      {
        unint64_t v180 = *(unsigned int *)(v178 + 4);
        unint64_t v181 = v180 >> 7;
        uint64_t v182 = v8[4];
        if (v180 >> 7 < (v8[5] - v182) >> 3)
        {
          uint64_t v183 = *(void *)(v182 + 8 * v181);
          if (v183)
          {
            uint64_t v184 = v180 & 0x7F;
            unint64_t v185 = *(unsigned __int16 *)(v183 + 2 * v184);
            uint64_t v187 = v8[7];
            uint64_t v186 = v8[8];
            if (v185 < (v186 - v187) >> 3)
            {
              uint64_t v188 = v187 + 8 * v185;
              if (v188 != v186 && *(_DWORD *)(v188 + 4) == v180)
              {
                uint64_t v190 = v9[4];
                if (v181 < (v9[5] - v190) >> 3)
                {
                  uint64_t v191 = *(void *)(v190 + 8 * v181);
                  if (v191)
                  {
                    unint64_t v192 = *(unsigned __int16 *)(v191 + 2 * v184);
                    uint64_t v194 = v9[7];
                    uint64_t v193 = v9[8];
                    if (v192 < (v193 - v194) >> 3)
                    {
                      uint64_t v195 = v194 + 8 * v192;
                      if (v195 != v193 && *(_DWORD *)(v195 + 4) == v180)
                      {
                        uint64_t v197 = v10[4];
                        if (v181 < (v10[5] - v197) >> 3)
                        {
                          uint64_t v198 = *(void *)(v197 + 8 * v181);
                          if (v198)
                          {
                            unint64_t v199 = *(unsigned __int16 *)(v198 + 2 * v184);
                            uint64_t v201 = v10[7];
                            uint64_t v200 = v10[8];
                            if (v199 < (v200 - v201) >> 3)
                            {
                              uint64_t v202 = v201 + 8 * v199;
                              if (v202 != v200 && *(_DWORD *)(v202 + 4) == v180)
                              {
                                v204 = v10;
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v178);
                                uint64_t v10 = v204;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v178 += 8;
      }
    }
    if (v18 == v22)
    {
      uint64_t v205 = v10[7];
      uint64_t v206 = v10[8];
      while (v205 != v206)
      {
        unint64_t v207 = *(unsigned int *)(v205 + 4);
        unint64_t v208 = v207 >> 7;
        uint64_t v209 = v8[4];
        if (v207 >> 7 < (v8[5] - v209) >> 3)
        {
          uint64_t v210 = *(void *)(v209 + 8 * v208);
          if (v210)
          {
            uint64_t v211 = v207 & 0x7F;
            unint64_t v212 = *(unsigned __int16 *)(v210 + 2 * v211);
            uint64_t v214 = v8[7];
            uint64_t v213 = v8[8];
            if (v212 < (v213 - v214) >> 3)
            {
              uint64_t v215 = v214 + 8 * v212;
              if (v215 != v213 && *(_DWORD *)(v215 + 4) == v207)
              {
                uint64_t v217 = v9[4];
                if (v208 < (v9[5] - v217) >> 3)
                {
                  uint64_t v218 = *(void *)(v217 + 8 * v208);
                  if (v218)
                  {
                    unint64_t v219 = *(unsigned __int16 *)(v218 + 2 * v211);
                    uint64_t v221 = v9[7];
                    uint64_t v220 = v9[8];
                    if (v219 < (v220 - v221) >> 3)
                    {
                      uint64_t v222 = v221 + 8 * v219;
                      if (v222 != v220 && *(_DWORD *)(v222 + 4) == v207)
                      {
                        uint64_t v224 = v240[4];
                        if (v208 < (v240[5] - v224) >> 3)
                        {
                          uint64_t v225 = *(void *)(v224 + 8 * v208);
                          if (v225)
                          {
                            unint64_t v226 = *(unsigned __int16 *)(v225 + 2 * v211);
                            uint64_t v228 = v240[7];
                            uint64_t v227 = v240[8];
                            if (v226 < (v227 - v228) >> 3)
                            {
                              uint64_t v229 = v228 + 8 * v226;
                              if (v229 != v227 && *(_DWORD *)(v229 + 4) == v207) {
                                _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(v241, *(void *)v205);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v205 += 8;
      }
    }
  }
}

void sub_1A1E40470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::IsVisible>(int8x8_t *a1)
{
  uint64_t v10 = 0x55CAA77C36360ED8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x55CAA77C36360ED8;
    if (*(void *)&v1 <= 0x55CAA77C36360ED8uLL) {
      uint64_t v3 = 0x55CAA77C36360ED8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x55CAA77C36360ED8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x55CAA77C36360ED8)
      {
        if (v5[2] == 0x55CAA77C36360ED8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x55CAA77C36360ED8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x55CAA77C36360ED8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E406E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MeshComponent>(int8x8_t *a1)
{
  uint64_t v10 = 0x18B420914FEF5BA6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x18B420914FEF5BA6;
    if (*(void *)&v1 <= 0x18B420914FEF5BA6uLL) {
      uint64_t v3 = 0x18B420914FEF5BA6uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x18B420914FEF5BA6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x18B420914FEF5BA6)
      {
        if (v5[2] == 0x18B420914FEF5BA6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x18B420914FEF5BA6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x18B420914FEF5BA6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E40958(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Boundary>(int8x8_t *a1)
{
  uint64_t v10 = 0x7130F622D05EDC68;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7130F622D05EDC68;
    if (*(void *)&v1 <= 0x7130F622D05EDC68uLL) {
      uint64_t v3 = 0x7130F622D05EDC68uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7130F622D05EDC68;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7130F622D05EDC68)
      {
        if (v5[2] == 0x7130F622D05EDC68) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7130F622D05EDC68) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7130F622D05EDC68) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E40BC8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::WorldTransform>(int8x8_t *a1)
{
  uint64_t v10 = 0x3A6FAD8338D694D6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3A6FAD8338D694D6;
    if (*(void *)&v1 <= 0x3A6FAD8338D694D6uLL) {
      uint64_t v3 = 0x3A6FAD8338D694D6uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3A6FAD8338D694D6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3A6FAD8338D694D6)
      {
        if (v5[2] == 0x3A6FAD8338D694D6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3A6FAD8338D694D6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3A6FAD8338D694D6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E40E38(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MeshDataComponent>(int8x8_t *a1)
{
  unint64_t v10 = 0xF1DF98F0053592CELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF1DF98F0053592CELL;
    if (*(void *)&v1 <= 0xF1DF98F0053592CELL) {
      unint64_t v3 = 0xF1DF98F0053592CELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF1DF98F0053592CELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF1DF98F0053592CELL)
      {
        if (v5[2] == 0xF1DF98F0053592CELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF1DF98F0053592CELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF1DF98F0053592CELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E410A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md26ARDebugDrawMeshBoundsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_28ARDebugDrawMeshBoundsContextEENK3__0clENS5_6EntityERN12arComponents13MeshComponentERNSG_8BoundaryERNSG_14WorldTransformE(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a2);
  char v5 = (void *)gdc::Registry::storage<arComponents::ShadowPipeline>(*(int8x8_t **)(a1 + 120));
  unint64_t v6 = a2 >> 39;
  uint64_t v7 = v5[4];
  if (a2 >> 39 >= (v5[5] - v7) >> 3 || (uint64_t v8 = *(void *)(v7 + 8 * v6)) == 0)
  {
    uint64_t v11 = v5[8];
    goto LABEL_8;
  }
  unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v10 = v5[7];
  uint64_t v11 = v5[8];
  if (v9 >= (v11 - v10) >> 3)
  {
LABEL_8:
    uint64_t v13 = v11;
    goto LABEL_9;
  }
  uint64_t v12 = v10 + 8 * v9;
  if (*(_DWORD *)(v12 + 4) == v4) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v5[8];
  }
LABEL_9:
  uint64_t v14 = (void *)gdc::Registry::storage<arComponents::StandardPipeline>(*(int8x8_t **)(a1 + 120));
  uint64_t v15 = v14[4];
  if (v6 >= (v14[5] - v15) >> 3 || (uint64_t v16 = *(void *)(v15 + 8 * v6)) == 0)
  {
    uint64_t v18 = v14[8];
    goto LABEL_16;
  }
  unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v19 = v14[7];
  uint64_t v18 = v14[8];
  if (v17 >= (v18 - v19) >> 3)
  {
LABEL_16:
    uint64_t v20 = v18;
    goto LABEL_17;
  }
  uint64_t v20 = v19 + 8 * v17;
  if (*(_DWORD *)(v20 + 4) != v4) {
    uint64_t v20 = v14[8];
  }
LABEL_17:
  if (v13 == v11) {
    int v21 = 65280;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = v20 == v18;
  uint64_t v23 = *(int8x8_t **)(a1 + 120);
  __int16 v29 = 256;
  BOOL v24 = v22 || v13 != v11;
  if (v13 == v11 && v22) {
    int v25 = -65536;
  }
  else {
    int v25 = -16777216;
  }
  int v26 = v25 | v21;
  if (v24) {
    int v27 = 255;
  }
  else {
    int v27 = 0;
  }
  int v30 = v26 | v27;
  uint64_t v28 = (void *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v23);
  gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(v28, a2, (uint64_t)&v29);
}

uint64_t gdc::Registry::storage<arComponents::ShadowPipeline>(int8x8_t *a1)
{
  unint64_t v10 = 0xA3C8162527B8C964;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA3C8162527B8C964;
    if (*(void *)&v1 <= 0xA3C8162527B8C964) {
      unint64_t v3 = 0xA3C8162527B8C964 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA3C8162527B8C964;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA3C8162527B8C964)
      {
        if (v5[2] == 0xA3C8162527B8C964) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA3C8162527B8C964) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA3C8162527B8C964) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E41468(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::StandardPipeline>(int8x8_t *a1)
{
  uint64_t v10 = 0x5BD3262791F15BBDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5BD3262791F15BBDLL;
    if (*(void *)&v1 <= 0x5BD3262791F15BBDuLL) {
      uint64_t v3 = 0x5BD3262791F15BBDuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5BD3262791F15BBDLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5BD3262791F15BBDLL)
      {
        if (v5[2] == 0x5BD3262791F15BBDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5BD3262791F15BBDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5BD3262791F15BBDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E416D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::NeedsDebugDraw>(int8x8_t *a1)
{
  unint64_t v10 = 0x9B24ADCC720E2B64;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9B24ADCC720E2B64;
    if (*(void *)&v1 <= 0x9B24ADCC720E2B64) {
      unint64_t v3 = 0x9B24ADCC720E2B64 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9B24ADCC720E2B64;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9B24ADCC720E2B64)
      {
        if (v5[2] == 0x9B24ADCC720E2B64) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9B24ADCC720E2B64) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9B24ADCC720E2B64) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E41948(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  char v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v24);
  if (v6)
  {
    uint64_t v12 = (_WORD *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (unsigned char *)a1[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v14) >> 1) + 1;
      if (v15 > 0x2AAAAAAAAAAAAAAALL) {
        goto LABEL_26;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 1);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x1555555555555555) {
        unint64_t v17 = 0x2AAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17 > 0x2AAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v18 = 6 * v17;
      uint64_t v19 = (char *)operator new(6 * v17);
      uint64_t v20 = &v19[2 * (((char *)v12 - v14) >> 1)];
      *(_WORD *)uint64_t v20 = *(_WORD *)a3;
      *(_DWORD *)(v20 + 2) = *(_DWORD *)(a3 + 2);
      for (i = v20 + 6; v12 != (_WORD *)v14; *(_DWORD *)(v20 + 2) = *(_DWORD *)(v12 + 1))
      {
        __int16 v21 = *(v12 - 3);
        v12 -= 3;
        *((_WORD *)v20 - 3) = v21;
        v20 -= 6;
      }
      a1[10] = v20;
      a1[11] = i;
      a1[12] = &v19[v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *uint64_t v12 = *(_WORD *)a3;
      *(_DWORD *)(v12 + 1) = *(_DWORD *)(a3 + 2);
      i = (char *)(v12 + 3);
    }
    a1[11] = i;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 6 * (((uint64_t)v5 - a1[7]) >> 3);
    *(_WORD *)uint64_t v7 = *(_WORD *)a3;
    *(unsigned char *)(v7 + 2) = *(unsigned char *)(a3 + 2);
    *(unsigned char *)(v7 + 3) = *(unsigned char *)(a3 + 3);
    *(unsigned char *)(v7 + 4) = *(unsigned char *)(a3 + 4);
    *(unsigned char *)(v7 + 5) = *(unsigned char *)(a3 + 5);
    uint64_t v8 = a1[31];
    if (v7 != a1[11])
    {
      unint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          int v26 = &v24;
          uint64_t v27 = 1;
          uint64_t v25 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v25, &v26);
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_25:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
        abort();
      }
      return;
    }
  }
  BOOL v22 = (void *)a1[22];
  if (v22)
  {
    while (1)
    {
      int v26 = &v24;
      uint64_t v27 = 1;
      uint64_t v25 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v25, &v26);
      BOOL v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_25;
  }
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 6 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)uint64_t v14 = *(_WORD *)(v15 - 6);
  *(unsigned char *)(v14 + 2) = *(unsigned char *)(v15 - 4);
  *(unsigned char *)(v14 + 3) = *(unsigned char *)(v15 - 3);
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 - 2);
  *(unsigned char *)(v14 + 5) = *(unsigned char *)(v15 - 1);
  a1[11] -= 6;
  unint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::NeedsDebugDraw>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::StandardPipeline>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::ShadowPipeline>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::MeshDataComponent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::WorldTransform>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::WorldTransform>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 80 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (void *)a1[11];
  v14[3] = *(v15 - 7);
  v14[4] = *(v15 - 6);
  v14[5] = *(v15 - 5);
  v14[6] = *(v15 - 4);
  uint64_t v16 = *(v15 - 10);
  v15 -= 10;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::WorldTransform>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::WorldTransform>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Boundary>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Boundary>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 6);
  v15 -= 6;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Boundary>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::Boundary>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::MeshComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v17 = *(void *)(v15 - 16);
  uint64_t v16 = *(void *)(v15 - 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = a1[11];
  unint64_t v20 = *(std::__shared_weak_count **)(v19 - 8);
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  a1[11] = v19 - 16;
  uint64_t v21 = (void *)a1[28];
  if (!v21) {
    return 1;
  }
  uint64_t v22 = a1[31];
  while (1)
  {
    v26[0] = &v24;
    v26[1] = 1;
    uint64_t v25 = v22;
    uint64_t v23 = v21[6];
    if (!v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v23 + 48))(v23, &v25, v26);
    uint64_t v21 = (void *)*v21;
    if (!v21) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MeshComponent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::MeshComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::MeshComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<arComponents::IsVisible>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          uint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              uint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::IsVisible>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::IsVisible>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x9BE0A35B5769E59FLL && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9BE0A35B5769E59FLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

void md::Logic<md::ARDebugDrawMeshBoundsLogic,md::ARDebugDrawMeshBoundsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1E42E40(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARDebugDrawMeshBoundsContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARDebugDrawMeshBoundsContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C08;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARDebugDrawMeshBoundsContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C08;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::ARDebugDrawMeshBoundsLogic::~ARDebugDrawMeshBoundsLogic(md::ARDebugDrawMeshBoundsLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void std::default_delete<md::RouteLineSharedResources>::operator()[abi:nn180100](md::RouteLineSharedRenderStates *a1)
{
  std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::~__hash_table((uint64_t)a1 + 256);
  uint64_t v2 = *((void *)a1 + 30);
  *((void *)a1 + 30) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)a1 + 29);
  *((void *)a1 + 29) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)a1 + 28);
  *((void *)a1 + 28) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)a1 + 26);
  *((void *)a1 + 26) = 0;
  if (v5)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(v5 + 104));
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    MEMORY[0x1A6239270](v5, 0x1020C40AD78EA61);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 25);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 23);
    if (!v8) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 23);
    if (!v8) {
      goto LABEL_18;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_18:
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 21);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 19);
    if (!v10) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 19);
    if (!v10) {
      goto LABEL_24;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_24:
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 17);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 15);
    if (!v12) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 15);
    if (!v12) {
      goto LABEL_30;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_30:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 13);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  md::RouteLineSharedRenderStates::~RouteLineSharedRenderStates(a1);
  JUMPOUT(0x1A6239270);
}

void std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[9];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      uint64_t v5 = v2[2];
      if (v5) {
        goto LABEL_7;
      }
LABEL_3:
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        goto LABEL_10;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = v2[2];
    if (!v5) {
      goto LABEL_3;
    }
LABEL_7:
    v2[3] = v5;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v2[5] + 40))(v2[5], v5, v2[4] - v5);
    goto LABEL_3;
  }
LABEL_10:
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void md::RouteLineSharedRenderStates::~RouteLineSharedRenderStates(md::RouteLineSharedRenderStates *this)
{
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)this;
  *(void *)this = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
}

void md::CRouteRenderResources::~CRouteRenderResources(md::CRouteRenderResources *this)
{
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1A6239270](v2, 0x20C40960023A9);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v4);
  }
  uint64_t v5 = (md::RouteLineSharedRenderStates *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    std::default_delete<md::RouteLineSharedResources>::operator()[abi:nn180100](v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x1000C4049ECCB0CLL);
  }
  uint64_t v7 = *(void *)this;
  *(void *)this = 0;
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C4049ECCB0CLL);
  }
}

void md::RouteLayoutInfo::~RouteLayoutInfo(md::RouteLayoutInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (char *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v6 = (char *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_16;
    }
  }
  uint64_t v7 = (char *)*((void *)this + 4);
  uint64_t v8 = v6;
  if (v7 != v6)
  {
    do
    {
      uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 - 1);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v7 -= 16;
    }
    while (v7 != v6);
    uint64_t v8 = (char *)*((void *)this + 3);
  }
  *((void *)this + 4) = v6;
  operator delete(v8);
LABEL_16:
  uint64_t v10 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v11 = *((void *)this + 1);
    uint64_t v12 = *(void **)this;
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      uint64_t v12 = *(void **)this;
    }
    *((void *)this + 1) = v10;
    operator delete(v12);
  }
}

void md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void *std::function<void ()(gdc::Registry *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v35 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v35);
  if (v6)
  {
    uint64_t v14 = (char *)a1[11];
    unint64_t v13 = a1[12];
    if ((unint64_t)v14 >= v13)
    {
      unint64_t v20 = (char *)a1[10];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v20) >> 5) + 1;
      if (v21 > 0x2AAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v20) >> 5);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x155555555555555) {
        unint64_t v23 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0x2AAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v24 = (char *)operator new(96 * v23);
      }
      else
      {
        unint64_t v24 = 0;
      }
      long long v25 = a3[3];
      int v26 = &v24[32 * ((v14 - v20) >> 5)];
      *((_OWORD *)v26 + 2) = a3[2];
      *((_OWORD *)v26 + 3) = v25;
      long long v27 = a3[5];
      *((_OWORD *)v26 + 4) = a3[4];
      *((_OWORD *)v26 + 5) = v27;
      long long v28 = a3[1];
      *(_OWORD *)int v26 = *a3;
      *((_OWORD *)v26 + 1) = v28;
      uint64_t v19 = v26 + 96;
      if (v14 != v20)
      {
        do
        {
          long long v29 = *((_OWORD *)v14 - 5);
          *((_OWORD *)v26 - 6) = *((_OWORD *)v14 - 6);
          *((_OWORD *)v26 - 5) = v29;
          long long v30 = *((_OWORD *)v14 - 4);
          long long v31 = *((_OWORD *)v14 - 3);
          long long v32 = *((_OWORD *)v14 - 1);
          *((_OWORD *)v26 - 2) = *((_OWORD *)v14 - 2);
          *((_OWORD *)v26 - 1) = v32;
          *((_OWORD *)v26 - 4) = v30;
          *((_OWORD *)v26 - 3) = v31;
          v26 -= 96;
          v14 -= 96;
        }
        while (v14 != v20);
        uint64_t v14 = (char *)a1[10];
      }
      a1[10] = v26;
      a1[11] = v19;
      a1[12] = &v24[96 * v23];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      long long v15 = a3[1];
      *(_OWORD *)uint64_t v14 = *a3;
      *((_OWORD *)v14 + 1) = v15;
      long long v16 = a3[2];
      long long v17 = a3[3];
      long long v18 = a3[5];
      *((_OWORD *)v14 + 4) = a3[4];
      *((_OWORD *)v14 + 5) = v18;
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = v17;
      uint64_t v19 = v14 + 96;
    }
    a1[11] = v19;
    uint64_t v10 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 96 * (((uint64_t)v5 - a1[7]) >> 3);
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a3 + 6);
    *(_DWORD *)(v7 + 28) = *((_DWORD *)a3 + 7);
    *(_DWORD *)(v7 + 32) = *((_DWORD *)a3 + 8);
    *(_DWORD *)(v7 + 36) = *((_DWORD *)a3 + 9);
    *(_DWORD *)(v7 + 40) = *((_DWORD *)a3 + 10);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)a3 + 11);
    *(_DWORD *)(v7 + 48) = *((_DWORD *)a3 + 12);
    *(_DWORD *)(v7 + 52) = *((_DWORD *)a3 + 13);
    *(_DWORD *)(v7 + 56) = *((_DWORD *)a3 + 14);
    *(_DWORD *)(v7 + 60) = *((_DWORD *)a3 + 15);
    *(_DWORD *)(v7 + 64) = *((_DWORD *)a3 + 16);
    *(_DWORD *)(v7 + 68) = *((_DWORD *)a3 + 17);
    long long v9 = *(long long *)((char *)a3 + 72);
    *(void *)(v7 + 85) = *(void *)((char *)a3 + 85);
    *(_OWORD *)(v7 + 72) = v9;
    uint64_t v10 = a1[31];
    if (v7 != a1[11])
    {
      uint64_t v11 = (void *)a1[16];
      if (v11)
      {
        while (1)
        {
          uint64_t v37 = &v35;
          uint64_t v38 = 1;
          uint64_t v36 = v10;
          uint64_t v12 = v11[6];
          if (!v12) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v12 + 48))(v12, &v36, &v37);
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v33 = (void *)a1[22];
  if (v33)
  {
    while (1)
    {
      uint64_t v37 = &v35;
      uint64_t v38 = 1;
      uint64_t v36 = v10;
      uint64_t v34 = v33[6];
      if (!v34) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v34 + 48))(v34, &v36, &v37);
      unint64_t v33 = (void *)*v33;
      if (!v33) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void addPreviousComponents(int8x8_t *a1, unint64_t a2, int8x8_t *a3, uint64_t a4)
{
  long long v8 = (void *)gdc::Registry::storage<md::components::CustomRenderState>(a1);
  unint64_t v9 = a2 >> 39;
  uint64_t v10 = v8[4];
  if (a2 >> 39 < (v8[5] - v10) >> 3
    && (uint64_t v11 = *(void *)(v10 + 8 * v9)) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F)), v14 = v8[7], v13 = v8[8], v12 < (v13 - v14) >> 3)
    && ((v15 = v14 + 8 * v12, v15 != v13) ? (BOOL v16 = *(_DWORD *)(v15 + 4) == HIDWORD(a2)) : (BOOL v16 = 0), v16))
  {
    uint64_t v78 = v8[11];
    uint64_t v17 = v8[10] + 24 * v12;
  }
  else
  {
    uint64_t v17 = v8[11];
    uint64_t v78 = v17;
  }
  uint64_t v79 = v17;
  long long v18 = (void *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a1);
  uint64_t v19 = v18[4];
  if (v9 < (v18[5] - v19) >> 3
    && (uint64_t v20 = *(void *)(v19 + 8 * v9)) != 0
    && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(a2) & 0x7F)), uint64_t v23 = v18[7], v22 = v18[8], v21 < (v22 - v23) >> 3)
    && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == HIDWORD(a2)) : (v25 = 0), v25))
  {
    uint64_t v77 = (unsigned char *)v18[11];
    int v26 = (unsigned char *)(v18[10] + v21);
  }
  else
  {
    int v26 = (unsigned char *)v18[11];
    uint64_t v77 = v26;
  }
  long long v27 = (void *)gdc::Registry::storage<md::components::NonTiled>(a1);
  uint64_t v28 = v27[4];
  if (v9 < (v27[5] - v28) >> 3
    && (uint64_t v29 = *(void *)(v28 + 8 * v9)) != 0
    && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(a2) & 0x7F)), v32 = v27[7], uint64_t v31 = v27[8], v30 < (v31 - v32) >> 3)
    && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == HIDWORD(a2)) : (v34 = 0), v34))
  {
    unint64_t v75 = v27[11];
    unint64_t v35 = v27[10] + v30;
  }
  else
  {
    unint64_t v35 = v27[11];
    unint64_t v75 = v35;
  }
  unint64_t v76 = v35;
  uint64_t v36 = (void *)gdc::Registry::storage<md::components::CustomZIndex>(a1);
  uint64_t v37 = v36[4];
  uint64_t v80 = a3;
  if (v9 < (v36[5] - v37) >> 3
    && (uint64_t v38 = *(void *)(v37 + 8 * v9)) != 0
    && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(a2) & 0x7F)), uint64_t v41 = v36[7], v40 = v36[8], v39 < (v40 - v41) >> 3)
    && ((uint64_t v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == HIDWORD(a2)) : (v43 = 0), v43))
  {
    uint64_t v44 = (_DWORD *)v36[11];
    uint64_t v45 = (_DWORD *)(v36[10] + 4 * v39);
  }
  else
  {
    uint64_t v44 = (_DWORD *)v36[11];
    uint64_t v45 = v44;
  }
  uint64_t v46 = (void *)gdc::Registry::storage<md::components::OcclusionType>(a1);
  uint64_t v47 = v46[4];
  if (v9 < (v46[5] - v47) >> 3
    && (uint64_t v48 = *(void *)(v47 + 8 * v9)) != 0
    && (unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(a2) & 0x7F)), v51 = v46[7], v50 = v46[8], v49 < (v50 - v51) >> 3)
    && ((v52 = v51 + 8 * v49, v52 != v50) ? (BOOL v53 = *(_DWORD *)(v52 + 4) == HIDWORD(a2)) : (BOOL v53 = 0), v53))
  {
    uint64_t v54 = (unsigned char *)v46[11];
    uint64_t v55 = (unsigned char *)(v46[10] + v49);
  }
  else
  {
    uint64_t v54 = (unsigned char *)v46[11];
    uint64_t v55 = v54;
  }
  uint64_t v56 = (void *)gdc::Registry::storage<md::components::StencilBucket>(a1);
  uint64_t v57 = v56[4];
  if (v9 < (v56[5] - v57) >> 3
    && (uint64_t v58 = *(void *)(v57 + 8 * v9)) != 0
    && (v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(a2) & 0x7F)), v61 = v56[7], uint64_t v60 = v56[8], v59 < (v60 - v61) >> 3)
    && ((v62 = v61 + 8 * v59, v62 != v60) ? (BOOL v63 = *(_DWORD *)(v62 + 4) == HIDWORD(a2)) : (BOOL v63 = 0), v63))
  {
    uint64_t v64 = (unsigned char *)v56[11];
    uint64_t v65 = (unsigned char *)(v56[10] + v59);
  }
  else
  {
    uint64_t v64 = (unsigned char *)v56[11];
    uint64_t v65 = v64;
  }
  if (v55 == v54) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = v55;
  }
  if (v45 == v44) {
    uint64_t v45 = 0;
  }
  if (v26 == v77) {
    int v26 = 0;
  }
  if (v65 == v64) {
    unint64_t v67 = 0;
  }
  else {
    unint64_t v67 = v65;
  }
  if (v79 != v78 && v79)
  {
    uint64_t v68 = *(std::__shared_weak_count **)(v79 + 8);
    v81[0] = *(void *)v79;
    v81[1] = (uint64_t)v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v82 = *(unsigned char *)(v79 + 16);
    uint64_t v69 = (void *)gdc::Registry::storage<md::components::CustomRenderState>(v80);
    gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(v69, a4, v81);
    if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v26)
  {
    LOBYTE(v81[0]) = *v26;
    uint64_t v70 = (void *)gdc::Registry::storage<md::components::IntendedSceneLayer>(v80);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v70, a4, v81);
  }
  if (v76 != v75 && v76)
  {
    v71 = (void *)gdc::Registry::storage<md::components::NonTiled>(v80);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v71, a4);
  }
  if (v45)
  {
    LODWORD(v81[0]) = *v45;
    uint64_t v72 = (void *)gdc::Registry::storage<md::components::CustomZIndex>(v80);
    gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v72, a4, v81);
  }
  if (v66)
  {
    LOBYTE(v81[0]) = *v66;
    uint64_t v73 = (void *)gdc::Registry::storage<md::components::OcclusionType>(v80);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v73, a4, v81);
  }
  if (v67)
  {
    LOBYTE(v81[0]) = *v67;
    unint64_t v74 = (void *)gdc::Registry::storage<md::components::StencilBucket>(v80);
    gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v74, a4, v81);
  }
}

void sub_1A1E442E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::CustomZIndex>(int8x8_t *a1)
{
  uint64_t v10 = 0x11C900ADCB57DAC9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x11C900ADCB57DAC9;
    if (*(void *)&v1 <= 0x11C900ADCB57DAC9uLL) {
      uint64_t v3 = 0x11C900ADCB57DAC9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x11C900ADCB57DAC9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x11C900ADCB57DAC9)
      {
        if (v5[2] == 0x11C900ADCB57DAC9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x11C900ADCB57DAC9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x11C900ADCB57DAC9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E44534(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::OcclusionType>(int8x8_t *a1)
{
  uint64_t v10 = 0x2CA863C195D6BB81;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2CA863C195D6BB81;
    if (*(void *)&v1 <= 0x2CA863C195D6BB81uLL) {
      uint64_t v3 = 0x2CA863C195D6BB81uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2CA863C195D6BB81;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2CA863C195D6BB81)
      {
        if (v5[2] == 0x2CA863C195D6BB81) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2CA863C195D6BB81) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2CA863C195D6BB81) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E447A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::StencilBucket>(int8x8_t *a1)
{
  unint64_t v10 = 0xCB3B3DB6B3944ED2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCB3B3DB6B3944ED2;
    if (*(void *)&v1 <= 0xCB3B3DB6B3944ED2) {
      unint64_t v3 = 0xCB3B3DB6B3944ED2 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCB3B3DB6B3944ED2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCB3B3DB6B3944ED2)
      {
        if (v5[2] == 0xCB3B3DB6B3944ED2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCB3B3DB6B3944ED2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCB3B3DB6B3944ED2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E44A14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::components::StencilBucket>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::StencilBucket>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  BOOL v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    BOOL v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::StencilBucket>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::StencilBucket>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::OcclusionType>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::OcclusionType>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  BOOL v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    BOOL v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::OcclusionType>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::OcclusionType>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomZIndex>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::CustomZIndex>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  BOOL v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    BOOL v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::CustomZIndex>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::CustomZIndex>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::NonTiled>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::NonTiled>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::NonTiled>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::NonTiled>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::Asset>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Asset>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10] + 72 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  __int16 v16 = *(_WORD *)(v15 - 56);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 72);
  *(_WORD *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(v15 - 52);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 - 48);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 - 44);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 - 40);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 36);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 32);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 28);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 24);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 20);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 16);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 12);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 8);
  a1[11] -= 72;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Asset>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::Asset>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::AssetLogic>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56D050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF56D050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::components::SubtileZone>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::SubtileZone>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(unsigned char *)(v14 + v7) = *(unsigned char *)--a1[11];
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::SubtileZone>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::SubtileZone>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void gdc::ComponentStorageWrapper<md::components::ClientState>::emplace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v5 = (gss::Allocator *)geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((void *)(a1 + 32), (uint64_t)&v34);
  if (v6)
  {
    unint64_t v13 = *(void *)(a1 + 96);
    unint64_t v14 = *(void *)(a1 + 88);
    if (v14 >= v13)
    {
      uint64_t v16 = *(void *)(a1 + 80);
      uint64_t v17 = (uint64_t)(v14 - v16) >> 4;
      if ((unint64_t)(v17 + 1) >> 60) {
        goto LABEL_42;
      }
      uint64_t v18 = v13 - v16;
      uint64_t v19 = v18 >> 3;
      if (v18 >> 3 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      uint64_t v40 = a1 + 96;
      if (v20)
      {
        if (v20 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v21 = (uint64_t *)operator new(16 * v20);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v36 = v21;
      uint64_t v37 = (uint64_t)&v21[2 * v17];
      uint64_t v38 = v37;
      unint64_t v39 = (char *)&v21[2 * v20];
      uint64_t v22 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map((uint64_t *)v37, (uint64_t *)a3);
      uint64_t v23 = v37;
      uint64_t v15 = v38 + 16;
      uint64_t v24 = *(char **)(a1 + 80);
      BOOL v25 = *(char **)(a1 + 88);
      if (v25 == v24)
      {
        *(void *)(a1 + 80) = v37;
        *(void *)(a1 + 88) = v15;
        *(void *)(a1 + 96) = v39;
      }
      else
      {
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = v23 + v26;
          uint64_t v28 = &v25[v26];
          *(void *)(v27 - 9) = 0;
          *(void *)(v27 - 16) = 0;
          *(unsigned char *)(v27 - 1) = 1;
          *(void *)(v27 - 16) = *(void *)&v25[v26 - 16];
          uint64_t v29 = *(void *)&v25[v26 - 8];
          *(_DWORD *)(v27 - 8) = v29;
          *(_WORD *)(v23 + v26 - 4) = WORD2(v29);
          *(unsigned char *)(v27 - 2) = v25[v26 - 2];
          *(unsigned char *)(v27 - 1) = v25[v26 - 1];
          *(void *)(v28 - 9) = 0;
          *((void *)v28 - 2) = 0;
          *(v28 - 1) = 1;
          v26 -= 16;
        }
        while (&v25[v26] != v24);
        BOOL v25 = *(char **)(a1 + 80);
        unint64_t v30 = *(char **)(a1 + 88);
        *(void *)(a1 + 80) = v23 + v26;
        *(void *)(a1 + 88) = v15;
        *(void *)(a1 + 96) = v39;
        while (v30 != v25)
        {
          if (!*(v30 - 2) && *((void *)v30 - 2))
          {
            uint64_t v31 = gss::Allocator::instance((gss::Allocator *)v22);
            uint64_t v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v31 + 40))(v31, *((void *)v30 - 2), *((unsigned __int16 *)v30 - 2));
            *((void *)v30 - 2) = 0;
          }
          v30 -= 16;
        }
      }
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(*(uint64_t **)(a1 + 88), (uint64_t *)a3);
      uint64_t v15 = v14 + 16;
      *(void *)(a1 + 88) = v15;
    }
    *(void *)(a1 + 88) = v15;
    uint64_t v10 = *(void *)(a1 + 248);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 80) + 2 * ((void)v5 - *(void *)(a1 + 56));
    if (v7 != a3)
    {
      if (!*(unsigned char *)(v7 + 14))
      {
        if (*(void *)v7)
        {
          uint64_t v8 = gss::Allocator::instance(v5);
          (*(void (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *(void *)v7, *(unsigned __int16 *)(v7 + 12));
          *(void *)uint64_t v7 = 0;
        }
      }
      *(void *)uint64_t v7 = *(void *)a3;
      uint64_t v9 = *(void *)(a3 + 8);
      *(_DWORD *)(v7 + 8) = v9;
      *(_WORD *)(v7 + 12) = WORD2(v9);
      *(_WORD *)(v7 + 14) = *(_WORD *)(a3 + 14);
      *(void *)(a3 + 7) = 0;
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 15) = 1;
    }
    uint64_t v10 = *(void *)(a1 + 248);
    if (v7 != *(void *)(a1 + 88))
    {
      uint64_t v11 = *(void **)(a1 + 128);
      if (v11)
      {
        while (1)
        {
          uint64_t v36 = &v34;
          uint64_t v37 = 1;
          uint64_t v35 = v10;
          uint64_t v12 = v11[6];
          if (!v12) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v12 + 48))(v12, &v35, &v36);
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
LABEL_41:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_42:
        abort();
      }
      return;
    }
  }
  uint64_t v32 = *(void **)(a1 + 176);
  if (v32)
  {
    while (1)
    {
      uint64_t v36 = &v34;
      uint64_t v37 = 1;
      uint64_t v35 = v10;
      uint64_t v33 = v32[6];
      if (!v33) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v33 + 48))(v33, &v35, &v36);
      uint64_t v32 = (void *)*v32;
      if (!v32) {
        return;
      }
    }
    goto LABEL_41;
  }
}

void sub_1A1E459D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<md::components::ClientState>::~__split_buffer((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_1A1E459E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::SupportsDebugHighlight>(int8x8_t *a1)
{
  uint64_t v10 = 0x1F1291CF60257E81;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1F1291CF60257E81;
    if (*(void *)&v1 <= 0x1F1291CF60257E81uLL) {
      uint64_t v3 = 0x1F1291CF60257E81uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1F1291CF60257E81;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1F1291CF60257E81)
      {
        if (v5[2] == 0x1F1291CF60257E81) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1F1291CF60257E81) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1F1291CF60257E81) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E45C28(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::Asset>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if (v6)
  {
    unint64_t v13 = (char *)a1[11];
    unint64_t v12 = a1[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v18 = (char *)a1[10];
      unint64_t v19 = 0x8E38E38E38E38E39 * ((v13 - v18) >> 3) + 1;
      if (v19 > 0x38E38E38E38E38ELL) {
        goto LABEL_30;
      }
      unint64_t v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - (void)v18) >> 3);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x1C71C71C71C71C7) {
        unint64_t v21 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 > 0x38E38E38E38E38ELL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v22 = (char *)operator new(72 * v21);
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = &v22[8 * ((v13 - v18) >> 3)];
      long long v24 = a3[3];
      *((_OWORD *)v23 + 2) = a3[2];
      *((_OWORD *)v23 + 3) = v24;
      *((void *)v23 + 8) = *((void *)a3 + 8);
      long long v25 = a3[1];
      *(_OWORD *)uint64_t v23 = *a3;
      *((_OWORD *)v23 + 1) = v25;
      uint64_t v17 = v23 + 72;
      if (v13 != v18)
      {
        do
        {
          *(_OWORD *)(v23 - 72) = *(_OWORD *)(v13 - 72);
          long long v26 = *(_OWORD *)(v13 - 56);
          long long v27 = *(_OWORD *)(v13 - 40);
          long long v28 = *(_OWORD *)(v13 - 24);
          *((void *)v23 - 1) = *((void *)v13 - 1);
          *(_OWORD *)(v23 - 24) = v28;
          *(_OWORD *)(v23 - 40) = v27;
          *(_OWORD *)(v23 - 56) = v26;
          v23 -= 72;
          v13 -= 72;
        }
        while (v13 != v18);
        unint64_t v13 = (char *)a1[10];
      }
      a1[10] = v23;
      a1[11] = v17;
      a1[12] = &v22[72 * v21];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v13 = *a3;
      long long v14 = a3[1];
      long long v15 = a3[2];
      long long v16 = a3[3];
      *((void *)v13 + 8) = *((void *)a3 + 8);
      *((_OWORD *)v13 + 2) = v15;
      *((_OWORD *)v13 + 3) = v16;
      *((_OWORD *)v13 + 1) = v14;
      uint64_t v17 = v13 + 72;
    }
    a1[11] = v17;
    uint64_t v9 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 72 * (((uint64_t)v5 - a1[7]) >> 3);
    long long v8 = *a3;
    *(_WORD *)(v7 + 16) = *((_WORD *)a3 + 8);
    *(_OWORD *)uint64_t v7 = v8;
    *(_DWORD *)(v7 + 20) = *((_DWORD *)a3 + 5);
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a3 + 6);
    *(_DWORD *)(v7 + 28) = *((_DWORD *)a3 + 7);
    *(_DWORD *)(v7 + 32) = *((_DWORD *)a3 + 8);
    *(_DWORD *)(v7 + 36) = *((_DWORD *)a3 + 9);
    *(_DWORD *)(v7 + 40) = *((_DWORD *)a3 + 10);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)a3 + 11);
    *(_DWORD *)(v7 + 48) = *((_DWORD *)a3 + 12);
    *(_DWORD *)(v7 + 52) = *((_DWORD *)a3 + 13);
    *(_DWORD *)(v7 + 56) = *((_DWORD *)a3 + 14);
    *(_DWORD *)(v7 + 60) = *((_DWORD *)a3 + 15);
    *(_DWORD *)(v7 + 64) = *((_DWORD *)a3 + 16);
    uint64_t v9 = a1[31];
    if (v7 != a1[11])
    {
      uint64_t v10 = (void *)a1[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v33 = &v31;
          uint64_t v34 = 1;
          uint64_t v32 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v32, &v33);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v29 = (void *)a1[22];
  if (v29)
  {
    while (1)
    {
      uint64_t v33 = &v31;
      uint64_t v34 = 1;
      uint64_t v32 = v9;
      uint64_t v30 = v29[6];
      if (!v30) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v30 + 48))(v30, &v32, &v33);
      uint64_t v29 = (void *)*v29;
      if (!v29) {
        return;
      }
    }
    goto LABEL_29;
  }
}

BOOL gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  long long v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    long long v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::HideWhenCollapsed>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::MarketMask>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::MarketMask>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(unsigned char *)(v14 + v7) = *(unsigned char *)--a1[11];
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::MarketMask>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::MarketMask>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::PendingMaterial>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::PendingMaterial>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::AlbedoTint>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::AlbedoTint>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 4);
  v15 -= 4;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::AlbedoTint>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::AlbedoTint>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  int v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    int v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::PositionScaleFactor>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::remove(void *a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 304 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 304);
  long long v17 = *(_OWORD *)(v15 - 288);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 - 272);
  *(_OWORD *)uint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 268);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 264);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 260);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 256);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 252);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 248);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 244);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 240);
  *(_DWORD *)(v14 + 68) = *(_DWORD *)(v15 - 236);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 - 232);
  *(_DWORD *)(v14 + 76) = *(_DWORD *)(v15 - 228);
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(v15 - 224);
  *(_DWORD *)(v14 + 84) = *(_DWORD *)(v15 - 220);
  *(_DWORD *)(v14 + 88) = *(_DWORD *)(v15 - 216);
  *(_DWORD *)(v14 + 92) = *(_DWORD *)(v15 - 212);
  *(_DWORD *)(v14 + 96) = *(_DWORD *)(v15 - 208);
  *(_DWORD *)(v14 + 100) = *(_DWORD *)(v15 - 204);
  *(_DWORD *)(v14 + 104) = *(_DWORD *)(v15 - 200);
  *(void *)(v14 + 112) = *(void *)(v15 - 192);
  *(void *)(v14 + 120) = *(void *)(v15 - 184);
  *(void *)(v14 + 128) = *(void *)(v15 - 176);
  *(void *)(v14 + 136) = *(void *)(v15 - 168);
  *(void *)(v14 + 144) = *(void *)(v15 - 160);
  *(void *)(v14 + 152) = *(void *)(v15 - 152);
  *(void *)(v14 + 160) = *(void *)(v15 - 144);
  *(void *)(v14 + 168) = *(void *)(v15 - 136);
  *(void *)(v14 + 176) = *(void *)(v15 - 128);
  *(void *)(v14 + 184) = *(void *)(v15 - 120);
  *(void *)(v14 + 192) = *(void *)(v15 - 112);
  *(void *)(v14 + 200) = *(void *)(v15 - 104);
  *(void *)(v14 + 208) = *(void *)(v15 - 96);
  *(void *)(v14 + 216) = *(void *)(v15 - 88);
  *(void *)(v14 + 224) = *(void *)(v15 - 80);
  *(void *)(v14 + 232) = *(void *)(v15 - 72);
  *(void *)(v14 + 240) = *(void *)(v15 - 64);
  *(void *)(v14 + 248) = *(void *)(v15 - 56);
  *(void *)(v14 + 256) = *(void *)(v15 - 48);
  *(void *)(v14 + 264) = *(void *)(v15 - 40);
  *(void *)(v14 + 272) = *(void *)(v15 - 32);
  *(void *)(v14 + 280) = *(void *)(v15 - 24);
  *(void *)(v14 + 288) = *(void *)(v15 - 16);
  *(void *)(v14 + 296) = *(void *)(v15 - 8);
  a1[11] -= 304;
  uint64_t v18 = (void *)a1[28];
  if (!v18) {
    return 1;
  }
  uint64_t v19 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    uint64_t v22 = v19;
    uint64_t v20 = v18[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v22, v23);
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::DynamicMeshInstance>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::SupportsDebugHighlight>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

gss::Allocator *std::__split_buffer<md::components::ClientState>::~__split_buffer(gss::Allocator *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3 != v2)
  {
    do
    {
      uint64_t v5 = v3 - 2;
      *((void *)v1 + 2) = v3 - 2;
      if (!*((unsigned char *)v3 - 2) && *v5)
      {
        uint64_t v6 = gss::Allocator::instance(this);
        this = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 40))(v6, *(v3 - 2), *((unsigned __int16 *)v3 - 2));
        *(v3 - 2) = 0;
        uint64_t v5 = (void *)*((void *)v1 + 2);
      }
      uint64_t v3 = v5;
    }
    while (v5 != v2);
  }
  if (*(void *)v1) {
    operator delete(*(void **)v1);
  }
  return v1;
}

BOOL gdc::ComponentStorageWrapper<md::components::ClientState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::ClientState>::remove(void *a1, unint64_t a2)
{
  unint64_t v22 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator=(v14, a1[11] - 16);
  uint64_t v16 = a1[11];
  unint64_t v17 = (void *)(v16 - 16);
  if (!*(unsigned char *)(v16 - 2))
  {
    if (*v17)
    {
      uint64_t v18 = gss::Allocator::instance(v15);
      (*(void (**)(uint64_t, void, void))(*(void *)v18 + 40))(v18, *(void *)(v16 - 16), *(unsigned __int16 *)(v16 - 4));
      *(void *)(v16 - 16) = 0;
    }
  }
  a1[11] = v17;
  uint64_t v19 = (void *)a1[28];
  if (!v19) {
    return 1;
  }
  uint64_t v20 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    uint64_t v23 = v20;
    uint64_t v21 = v19[6];
    if (!v21) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v21 + 48))(v21, &v23, v24);
    uint64_t v19 = (void *)*v19;
    if (!v19) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::ClientState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::ClientState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::ClientState>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,md::components::ClientState>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (gss::Allocator *)a1[6];
    if (v3 != v2)
    {
      do
      {
        if (!*(unsigned char *)(v3 - 2) && *(void *)(v3 - 16))
        {
          uint64_t v5 = gss::Allocator::instance(v4);
          uint64_t v4 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *(void *)(v3 - 16), *(unsigned __int16 *)(v3 - 4));
          *(void *)(v3 - 16) = 0;
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (gss::Allocator *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<md::components::ClientState>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::remove(void *a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10] + 96 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 80);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 96);
  *(void *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 - 72);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 - 68);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 - 64);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 60);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 - 56);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 52);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 48);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 44);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 40);
  *(_DWORD *)(v14 + 60) = *(_DWORD *)(v15 - 36);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 32);
  *(_DWORD *)(v14 + 68) = *(_DWORD *)(v15 - 28);
  uint64_t v17 = *(void *)(v15 - 11);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 85) = v17;
  a1[11] -= 96;
  uint64_t v18 = (void *)a1[28];
  if (!v18) {
    return 1;
  }
  uint64_t v19 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    uint64_t v22 = v19;
    uint64_t v20 = v18[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v22, v23);
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return 0;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return 0;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v5;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    *uint64_t v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v5) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_1A1E473EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D0E0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF56D0E0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__1NS_9allocatorISJ_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D098;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF56D098;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x88B81689974D86F3 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x12B1E486D3040E2CLL;
    if (*(void *)&v5 <= 0x12B1E486D3040E2CuLL) {
      uint64_t v7 = 0x12B1E486D3040E2CuLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x12B1E486D3040E2CLL;
  }
  uint8x8_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x12B1E486D3040E2CLL)
      {
        if (v9[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x12B1E486D3040E2CLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x12B1E486D3040E2CLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t gdc::ObjectHolder<md::AssetContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::AssetContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5552F8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::AssetContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5552F8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::AssetLogic::~AssetLogic(md::AssetLogic *this)
{
  *(void *)this = &unk_1EF5301C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EF5301C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t std::__shared_ptr_emplace<md::LabelLayerData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::LabelLayerData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FC30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelLayerData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTile>::__on_zero_shared(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 288);
        std::mutex::lock((std::mutex *)(v6 + 568));
        uint64_t v7 = *(void **)(v6 + 648);
        unint64_t v8 = *(void *)(v6 + 656);
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v11 = *(void *)(v6 + 640);
          uint64_t v12 = ((uint64_t)v7 - v11) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            abort();
          }
          uint64_t v14 = v8 - v11;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            uint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 664) + 16))(*(void *)(v6 + 664), 16 * v15, 8);
            BOOL v17 = (_OWORD *)(v16 + 16 * v12);
            uint64_t v18 = v16 + 16 * v15;
            if (v16)
            {
              long long v19 = *(_OWORD *)(a1 + 48);
              *BOOL v17 = v19;
              if (*((void *)&v19 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
              }
            }
          }
          else
          {
            uint64_t v18 = 0;
            BOOL v17 = (_OWORD *)(16 * v12);
          }
          uint64_t v10 = v17 + 1;
          uint64_t v20 = *(void **)(v6 + 648);
          unint64_t v21 = *(void **)(v6 + 640);
          if (v20 == v21)
          {
            *(void *)(v6 + 640) = v17;
            *(void *)(v6 + 648) = v10;
            uint64_t v24 = *(void *)(v6 + 656);
            *(void *)(v6 + 656) = v18;
          }
          else
          {
            do
            {
              long long v22 = *((_OWORD *)v20 - 1);
              v20 -= 2;
              *--BOOL v17 = v22;
              void *v20 = 0;
              v20[1] = 0;
            }
            while (v20 != v21);
            uint64_t v20 = *(void **)(v6 + 640);
            uint64_t v23 = *(void **)(v6 + 648);
            *(void *)(v6 + 640) = v17;
            *(void *)(v6 + 648) = v10;
            uint64_t v24 = *(void *)(v6 + 656);
            *(void *)(v6 + 656) = v18;
            if (v23 != v20)
            {
              uint64_t v33 = v24;
              do
              {
                long long v25 = (std::__shared_weak_count *)*(v23 - 1);
                if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
                v23 -= 2;
              }
              while (v23 != v20);
              uint64_t v24 = v33;
            }
          }
          if (v20) {
            (*(void (**)(void, void *, uint64_t))(**(void **)(v6 + 664) + 40))(*(void *)(v6 + 664), v20, v24 - (void)v20);
          }
        }
        else
        {
          if (v7)
          {
            *uint64_t v7 = *(void *)(a1 + 48);
            uint64_t v9 = *(void *)(a1 + 56);
            v7[1] = v9;
            if (v9) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
            }
          }
          uint64_t v10 = v7 + 2;
        }
        *(void *)(v6 + 648) = v10;
        unsigned __int8 v26 = atomic_load((unsigned __int8 *)(v6 + 632));
        atomic_store(1u, (unsigned __int8 *)(v6 + 632));
        std::mutex::unlock((std::mutex *)(v6 + 568));
        if ((v26 & 1) == 0)
        {
          atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v27 = *(void *)(*(void *)(v5 + 152) + 112);
          atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          long long v28 = operator new(0x20uLL);
          *long long v28 = &unk_1EF572030;
          v28[1] = v5;
          v28[2] = v4;
          v28[3] = v6;
          uint64_t v37 = v28;
          geo::TaskQueue::async(&v34, v27, v36);
          uint64_t v29 = v35;
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
          if (v37 == v36)
          {
            (*(void (**)(void *))(v36[0] + 32))(v36);
          }
          else if (v37)
          {
            (*(void (**)(void))(*v37 + 40))();
          }
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 296);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 256, *(void **)(a1 + 264));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 224, *(void **)(a1 + 232));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 192, *(void **)(a1 + 200));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 160, *(void **)(a1 + 168));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 128, *(void **)(a1 + 136));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 96, *(void **)(a1 + 104));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a1 + 64, *(void **)(a1 + 72));
  uint64_t v31 = *(std::__shared_weak_count **)(a1 + 56);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(a1 + 40);
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
}

void sub_1A1E47E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v17)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  std::__shared_weak_count::__release_weak(v16);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  long long v19 = *(std::__shared_weak_count **)(v15 + 296);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 256, *(void **)(v15 + 264));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 224, *(void **)(v15 + 232));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 192, *(void **)(v15 + 200));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 160, *(void **)(v15 + 168));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 128, *(void **)(v15 + 136));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 96, *(void **)(v15 + 104));
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v15 + 64, *(void **)(v15 + 72));
  uint64_t v20 = *(std::__shared_weak_count **)(v15 + 56);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unint64_t v21 = *(std::__shared_weak_count **)(v15 + 40);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::SelectedLabelLayerDataSource::~SelectedLabelLayerDataSource(md::SelectedLabelLayerDataSource *this)
{
  *(void *)this = &unk_1EF54A608;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 112);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 824));
  *(void *)this = &unk_1EF53D8A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (md::SelectedLabelLayerDataSource *)*((void *)this + 100);
  if (v4 == (md::SelectedLabelLayerDataSource *)((char *)this + 776))
  {
    (*(void (**)(char *))(*((void *)this + 97) + 32))((char *)this + 776);
  }
  else if (v4)
  {
    (*(void (**)(md::SelectedLabelLayerDataSource *))(*(void *)v4 + 40))(v4);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  md::SelectedLabelLayerDataSource *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF54A608;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 112);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 824));
  *(void *)this = &unk_1EF53D8A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (md::SelectedLabelLayerDataSource *)*((void *)this + 100);
  if (v4 == (md::SelectedLabelLayerDataSource *)((char *)this + 776))
  {
    (*(void (**)(char *))(*((void *)this + 97) + 32))((char *)this + 776);
  }
  else if (v4)
  {
    (*(void (**)(md::SelectedLabelLayerDataSource *))(*(void *)v4 + 40))(v4);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::SelectedLabelLayerDataSource::setSelectedRoadFeature(md::SelectedLabelLayerDataSource *this, uint64_t a2, const char *a3, const char *a4)
{
  if (a2)
  {
    uint64_t v16 = a2;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v17, a3, a4);
    uint64_t v21 = v16;
    long long v22 = v17;
    long long v23 = v18;
    long long v17 = 0uLL;
    long long v24 = v19;
    long long v25 = v20;
    *(void *)&long long v18 = 0;
    long long v19 = 0uLL;
    *(void *)&long long v20 = 0;
    char v26 = 1;
    md::SelectedLabelLayerDataSource::resetSelectedFeatureID((uint64_t)this, (uint64_t)&v21);
    if (!v26) {
      goto LABEL_5;
    }
    if (SBYTE7(v25) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**((void **)&v25 + 1) + 40))(*((void *)&v25 + 1), v24, v25 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SBYTE7(v23) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SBYTE7(v20) & 0x80000000) == 0) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
    }
    else if ((SBYTE7(v23) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    (*(void (**)(void, void, uint64_t))(**((void **)&v23 + 1) + 40))(*((void *)&v23 + 1), v22, v23 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SBYTE7(v20) & 0x80000000) == 0)
    {
LABEL_6:
      if ((SBYTE7(v18) & 0x80000000) == 0) {
        return;
      }
LABEL_15:
      uint64_t v5 = v17;
      uint64_t v6 = *((void *)&v18 + 1);
      uint64_t v7 = v18;
      goto LABEL_18;
    }
LABEL_14:
    (*(void (**)(void, void, uint64_t))(**((void **)&v20 + 1) + 40))(*((void *)&v20 + 1), v19, v20 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SBYTE7(v18) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_15;
  }
  v8[0] = 0;
  char v15 = 0;
  md::SelectedLabelLayerDataSource::resetSelectedFeatureID((uint64_t)this, (uint64_t)v8);
  if (!v15) {
    return;
  }
  if (SHIBYTE(v13) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v12, v13 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v5 = v9;
  uint64_t v7 = v10;
  uint64_t v6 = v11;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v5, v7 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_1A1E48514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<md::LabelSelectedFeatureInfo>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1E48528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::optional<md::LabelSelectedFeatureInfo>::~optional(v12 - 112);
  md::LabelSelectedFeatureInfo::~LabelSelectedFeatureInfo((md::LabelSelectedFeatureInfo *)va);
  _Unwind_Resume(a1);
}

void md::SelectedLabelLayerDataSource::resetSelectedFeatureID(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 72)) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  long long v22 = 0;
  uint64_t v4 = (std::mutex *)(a1 + 824);
  std::mutex::lock((std::mutex *)(a1 + 824));
  uint64_t v5 = *(void *)(a1 + 888);
  if (v3) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = v5 != v3;
  }
  else if (*(void *)v3 == *(void *)v5)
  {
    int v7 = md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==((unsigned __int8 *)(v3 + 8), (unsigned __int8 *)(v5 + 8)) ^ 1;
  }
  else
  {
    int v7 = 1;
  }
  if (v3) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = (atomic_ullong *)operator new(0x60uLL);
    uint64_t v9 = v11;
    v11[1] = 0;
    v11[2] = 0;
    *uint64_t v11 = (atomic_ullong)&unk_1EF581B78;
    v11[3] = *(void *)v3;
    uint64_t v10 = v11 + 3;
    uint64_t v12 = v11 + 4;
    v9[7] = *(void *)(v3 + 32);
    if (*(char *)(v3 + 31) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v12, *(void **)(v3 + 8), *(void *)(v3 + 16));
    }
    else
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)(v3 + 8);
      v12[2] = *(void *)(v3 + 24);
    }
    uint64_t v13 = (void **)(v9 + 8);
    v9[11] = *(void *)(v3 + 64);
    if (*(char *)(v3 + 63) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v13, *(void **)(v3 + 40), *(void *)(v3 + 48));
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(v3 + 40);
      v9[10] = *(void *)(v3 + 56);
    }
    long long v22 = v9;
  }
  std::mutex::unlock(v4);
  if (!v7) {
    goto LABEL_37;
  }
  gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)a1);
  uint64_t v14 = *(void **)(a1 + 16);
  std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(v14);
  if (v14[6])
  {
    char v15 = (unsigned char *)v14[5];
    if (v15)
    {
      do
      {
        if (v15[112]) {
          v15[112] = 0;
        }
        long long v20 = *(unsigned char **)v15;
        uint64_t v21 = (void *)*((void *)v15 + 4);
        if (v21 != *((void **)v15 + 6)) {
          free(v21);
        }
        operator delete(v15);
        char v15 = v20;
      }
      while (v20);
    }
    v14[5] = 0;
    uint64_t v16 = v14[4];
    if (v16)
    {
      for (uint64_t i = 0; i != v16; ++i)
        *(void *)(v14[3] + 8 * i) = 0;
    }
    v14[6] = 0;
  }
  v14[8] = v14;
  v14[9] = 0;
  if (v9) {
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 888) = v10;
  long long v18 = *(std::__shared_weak_count **)(a1 + 896);
  *(void *)(a1 + 896) = v9;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    long long v19 = (std::__shared_weak_count *)v22;
    if (!v22) {
      return;
    }
  }
  else
  {
LABEL_37:
    long long v19 = (std::__shared_weak_count *)v22;
    if (!v22) {
      return;
    }
  }
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_1A1E48804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 55) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v9 + 56) + 40))(*(void *)(v9 + 56), *(void *)(v9 + 32), *(void *)(v9 + 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v9);
  operator delete(v12);
  std::mutex::unlock(v10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::optional<md::LabelSelectedFeatureInfo>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 64) + 40))(*(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
    }
    else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    {
      return a1;
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), *(void *)(a1 + 8), *(void *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFLL);
  }
  return a1;
}

void md::LabelSelectedFeatureInfo::~LabelSelectedFeatureInfo(md::LabelSelectedFeatureInfo *this)
{
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    (*(void (**)(void, void, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), *((void *)this + 1), *((void *)this + 3) & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
  (*(void (**)(void, void, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), *((void *)this + 5), *((void *)this + 7) & 0x7FFFFFFFFFFFFFFFLL);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

uint64_t std::__shared_ptr_emplace<md::LabelSelectedFeatureInfo>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = result;
  if (*(char *)(result + 87) < 0)
  {
    __n128 result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(result + 88) + 40))(*(void *)(result + 88), *(void *)(result + 64), *(void *)(result + 80) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
      return result;
    }
  }
  else if ((*(char *)(result + 55) & 0x80000000) == 0)
  {
    return result;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 56) + 40);
  return v2();
}

void std::__shared_ptr_emplace<md::LabelSelectedFeatureInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelSelectedFeatureInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_string(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(void *)a1, *(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  return a1;
}

void md::SelectedLabelLayerDataSource::deselectRoadFeature(md::SelectedLabelLayerDataSource *this)
{
  v1[0] = 0;
  char v8 = 0;
  md::SelectedLabelLayerDataSource::resetSelectedFeatureID((uint64_t)this, (uint64_t)v1);
  if (v8)
  {
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v3) & 0x80000000) == 0) {
        return;
      }
LABEL_6:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v2, v3 & 0x7FFFFFFFFFFFFFFFLL);
      return;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5, v6 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v3) < 0) {
      goto LABEL_6;
    }
  }
}

void sub_1A1E48C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t altitude::TileLoader::loadTileData(uint64_t this, altitude::Tile *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(this + 56);
  if (*(void *)(this + 64) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      this = (*(uint64_t (**)(void, altitude::Tile *, uint64_t))(**(void **)(v3 + 8 * v7) + 24))(*(void *)(v3 + 8 * v7), a2, a3);
      unint64_t v7 = v8;
      uint64_t v3 = *(void *)(v6 + 56);
      ++v8;
    }
    while (v7 < (*(void *)(v6 + 64) - v3) >> 3);
  }
  return this;
}

float altitude::TileLoader::computeBasePriorityFromPosition(uint64_t a1, double *a2)
{
  uint64_t v3 = a1 + 40;
  uint64_t v4 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 24))(a1 + 40);
  double v5 = v4[4];
  double v6 = v4[5];
  double v7 = v4[6];
  double v8 = *(double *)(v3 + 1376);
  double v9 = *(double *)(v3 + 1368);
  double v10 = *(double *)(v3 + 1360);
  double v11 = v4[3];
  double v12 = -(v9 * v6 - v8 * v5) - (v9 * v6 - v8 * v5);
  double v13 = -(v8 * v11 - v10 * v6) - (v8 * v11 - v10 * v6);
  double v14 = -(v10 * v5 - v9 * v11) - (v10 * v5 - v9 * v11);
  double v15 = *a2 + v13 * v6 - (v10 + *v4 + v12 * v7 + v14 * v5);
  double v16 = a2[1] + v14 * v11 - (v9 + v4[1] + v12 * v6 + v13 * v7);
  double v17 = a2[2] + v12 * v5 - (v8 + v4[2] + v13 * v11 + v14 * v7);
  float v18 = fmin(sqrt(v15 * v15 + v16 * v16 + v17 * v17) / *(double *)(v3 + 904), 1.0);
  long long v19 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  double v20 = *a2 - *v19;
  double v21 = a2[1] - v19[1];
  double v22 = a2[2] - v19[2];
  double v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  double v24 = v23 * v20;
  long long v25 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  double v27 = v25[3];
  double v26 = v25[4];
  *(float *)&double v26 = fmax(-(v23 * (v21 * ((v26 + v26) * v25[5] + v27 * -2.0 * v25[6]))+ v23 * v22 * (1.0 - (v26 + v26) * v26 + v27 * -2.0 * v27)+ v24 * -(v27 * -2.0 * v25[5] - v25[6] * (v26 + v26))), 0.0);
  *(float *)&double v27 = *(float *)(v3 + 1272) * 0.1;
  *(float *)&double v21 = fminf(fmaxf(*(float *)&v27, 0.0), 1.0);
  float v28 = powf(*(float *)&v26, *(float *)&v27 + 1.0);
  return (float)((float)(1.0 - *(float *)&v21) + (float)(v28 * *(float *)&v21))
       - (float)(v18 * (float)((float)(1.0 - *(float *)&v21) + (float)(v28 * *(float *)&v21)));
}

void md::S2ResourceDataRequester::createDebugNode(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    (*(void (**)(char *__return_ptr))(*(void *)v4 + 24))(v37);
    if (v37[0])
    {
      unint64_t v5 = *(void *)&v37[4];
      v37[23] = 14;
      strcpy(v37, "Download Range");
      double v6 = (char *)operator new(0x80uLL);
      v36[1] = (uint64_t)(v6 + 128);
      v36[2] = (uint64_t)(v6 + 128);
      *((void *)v6 + 1) = v5;
      *((void *)v6 + 5) = 0;
      *((void *)v6 + 6) = 0;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 9) = HIDWORD(v5);
      *((void *)v6 + 12) = 0;
      *((_DWORD *)v6 + 14) = 1;
      *((void *)v6 + 13) = 0;
      *((void *)v6 + 14) = 0;
      *((_DWORD *)v6 + 30) = 1;
      v36[0] = (uint64_t)v6;
      gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, v36);
      if (v6[119] < 0)
      {
        operator delete(*((void **)v6 + 12));
        if ((v6[55] & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((v6[55] & 0x80000000) == 0)
      {
LABEL_5:
        double v7 = v6;
        goto LABEL_11;
      }
      operator delete(*((void **)v6 + 4));
      goto LABEL_5;
    }
  }
  v37[23] = 14;
  strcpy(v37, "Download Range");
  memset(&v34, 0, sizeof(v34));
  int v35 = 4;
  std::string::__assign_external(&v34, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v33);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 28)) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  double v7 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_11:
  operator delete(v7);
  if (!*(unsigned char *)(a1 + 28))
  {
LABEL_12:
    v37[23] = 17;
    strcpy(v37, "Visible Range Min");
    memset(&__p, 0, sizeof(__p));
    int v26 = 4;
    std::string::__assign_external(&__p, "None");
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*(unsigned char *)(a1 + 36)) {
        goto LABEL_14;
      }
    }
    else if (*(unsigned char *)(a1 + 36))
    {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
LABEL_8:
  v37[23] = 17;
  strcpy(v37, "Visible Range Min");
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v32 = 1;
  uint64_t v29 = 0;
  uint64_t v28 = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v27);
  if (*(unsigned char *)(a1 + 36))
  {
LABEL_14:
    v37[23] = 17;
    strcpy(v37, "Visible Range Max");
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = 1;
    uint64_t v20 = 0;
    uint64_t v19 = v9;
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v18);
    goto LABEL_20;
  }
LABEL_18:
  v37[23] = 17;
  strcpy(v37, "Visible Range Max");
  memset(&v16, 0, sizeof(v16));
  int v17 = 4;
  std::string::__assign_external(&v16, "None");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
LABEL_20:
  v37[23] = 17;
  strcpy(v37, "gdc::ResourceType");
  unint64_t v10 = *(unsigned __int16 *)(a1 + 24);
  if (v10 > 0x35) {
    double v11 = "<Invalid>";
  }
  else {
    double v11 = off_1E5A96820[v10];
  }
  memset(&v13, 0, sizeof(v13));
  int v14 = 4;
  std::string::__assign_external(&v13, v11);
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v37, (uint64_t)v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1A1E49298(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void **std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t md::S2ResourceDataRequester::setVisibleZoomRange(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 28);
  if (*(unsigned char *)a2)
  {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 4);
    if (!v2) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else if (*(unsigned char *)(result + 28))
  {
    *(unsigned char *)(result + 28) = 0;
  }
  int v3 = *(unsigned __int8 *)(result + 36);
  if (*(unsigned char *)(a2 + 8))
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 12);
    if (!v3) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else if (*(unsigned char *)(result + 36))
  {
    *(unsigned char *)(result + 36) = 0;
  }
  return result;
}

void md::S2ResourceDataRequester::~S2ResourceDataRequester(md::S2ResourceDataRequester *this)
{
  *(void *)this = &unk_1EF543CB0;
  if (*((unsigned char *)this + 36)) {
    *((unsigned char *)this + 36) = 0;
  }
  if (*((unsigned char *)this + 28)) {
    *((unsigned char *)this + 28) = 0;
  }
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF543CB0;
  if (*((unsigned char *)this + 36)) {
    *((unsigned char *)this + 36) = 0;
  }
  if (*((unsigned char *)this + 28)) {
    *((unsigned char *)this + 28) = 0;
  }
}

void md::TrafficAccum::reset(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t *a9, int a10, char a11)
{
  *(void *)(a1 + 8) = *(void *)a1;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 80) = *(void *)(a1 + 72);
  *(void *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 128) = a3;
  *(unsigned char *)(a1 + 96) = a4;
  *(_DWORD *)(a1 + 100) = a5;
  *(_DWORD *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 108) = 0;
  if (a8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a8 + 8), 1uLL, memory_order_relaxed);
  }
  double v12 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = a7;
  *(void *)(a1 + 152) = a8;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *a9;
    uint64_t v14 = a9[1];
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *a9;
  uint64_t v14 = a9[1];
  if (v14) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  double v15 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 168) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(_DWORD *)(a1 + 196) = a10;
  *(unsigned char *)(a1 + 224) = a11;
}

void md::TrafficAccum::addPoints(float32x2_t **a1, char *a2, char *a3, uint64_t a4, int a5, float *a6, float a7, float a8, double a9, int8x16_t a10)
{
  float v13 = ceilf(a7);
  float v14 = floorf(a7);
  BOOL v15 = a7 < a8;
  if (a7 >= a8) {
    float v16 = v14;
  }
  else {
    float v16 = v13;
  }
  double v17 = vabds_f32(v16, a7);
  float v18 = floorf(a8);
  float v19 = ceilf(a8);
  if (v15) {
    float v20 = v18;
  }
  else {
    float v20 = v19;
  }
  float v21 = v18 - v13;
  float v22 = v14 - v19;
  if (!v15) {
    float v21 = v22;
  }
  double v23 = vabds_f32(v20, a8);
  unsigned int v24 = (float)(v21 + 1.0);
  unsigned int v335 = v24;
  if (v17 > 0.01) {
    ++v24;
  }
  if (v23 <= 0.01) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v24 + 1;
  }
  double v27 = *a1;
  int v26 = a1[1];
  uint64_t v28 = v26;
  uint64_t v29 = (char *)v26 - (char *)*a1;
  uint64_t v30 = v29 >> 3;
  unint64_t v31 = (v29 >> 3) + v25;
  if (v31 <= a1[2] - *a1)
  {
    std::string v34 = (char *)*a1;
    v333 = (char *)a1[1];
    goto LABEL_27;
  }
  if (v31 >> 61) {
    goto LABEL_346;
  }
  uint64_t v32 = 8 * v31;
  uint64_t v33 = (char *)operator new(8 * v31);
  v333 = &v33[8 * v30];
  std::string v34 = v333;
  if (v26 != v27)
  {
    unint64_t v35 = (char *)v26 - (char *)v27 - 8;
    if (v35 < 0x58)
    {
      std::string v34 = &v33[8 * v30];
      do
      {
LABEL_24:
        float32x2_t v41 = v28[-1];
        --v28;
        *((float32x2_t *)v34 - 1) = v41;
        v34 -= 8;
      }
      while (v28 != v27);
      goto LABEL_25;
    }
    std::string v34 = &v33[8 * v30];
    if ((unint64_t)((char *)v26 - v29 - v33) < 0x20) {
      goto LABEL_24;
    }
    uint64_t v36 = (v35 >> 3) + 1;
    uint64_t v28 = &v26[-(v36 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v37 = &v33[8 * v30 - 16];
    uint64_t v38 = (char *)&v26[-2];
    uint64_t v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)uint64_t v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    std::string v34 = &v333[-8 * (v36 & 0x3FFFFFFFFFFFFFFCLL)];
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_24;
    }
  }
LABEL_25:
  *a1 = (float32x2_t *)v34;
  a1[1] = (float32x2_t *)v333;
  a1[2] = (float32x2_t *)&v33[v32];
  if (v27)
  {
    operator delete(v27);
    std::string v34 = (char *)*a1;
    v333 = (char *)a1[1];
  }
LABEL_27:
  v332 = v34;
  if (!a3) {
    goto LABEL_40;
  }
  BOOL v43 = (char *)a1[3];
  uint64_t v42 = (char *)a1[4];
  uint64_t v44 = (v42 - v43) >> 2;
  unint64_t v45 = v44 + v25;
  if (v44 + v25 <= (unint64_t)(((char *)a1[5] - v43) >> 2)) {
    goto LABEL_40;
  }
  if (v45 >> 62) {
    goto LABEL_346;
  }
  uint64_t v46 = 4 * v45;
  uint64_t v47 = operator new(4 * v45);
  uint64_t v48 = (float32x2_t *)&v47[4 * v44];
  unint64_t v49 = (char *)v48;
  if (v42 != v43)
  {
    unint64_t v50 = v42 - v43 - 4;
    if (v50 < 0x2C)
    {
      unint64_t v49 = &v47[4 * v44];
      do
      {
LABEL_37:
        int v56 = *((_DWORD *)v42 - 1);
        v42 -= 4;
        *((_DWORD *)v49 - 1) = v56;
        v49 -= 4;
      }
      while (v42 != v43);
      goto LABEL_38;
    }
    unint64_t v49 = &v47[4 * v44];
    if ((unint64_t)(v43 - v47) < 0x20) {
      goto LABEL_37;
    }
    uint64_t v51 = (v50 >> 2) + 1;
    uint64_t v52 = &v47[4 * v44 - 16];
    BOOL v53 = (long long *)(v42 - 16);
    uint64_t v54 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v55 = *v53;
      *(v52 - 1) = *(v53 - 1);
      *uint64_t v52 = v55;
      v52 -= 2;
      v53 -= 2;
      v54 -= 8;
    }
    while (v54);
    unint64_t v49 = (char *)v48 - 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    v42 -= 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_37;
    }
  }
LABEL_38:
  a1[3] = (float32x2_t *)v49;
  a1[4] = v48;
  a1[5] = (float32x2_t *)&v47[v46];
  if (v43) {
    operator delete(v43);
  }
LABEL_40:
  if (!a4) {
    goto LABEL_53;
  }
  uint64_t v58 = (char *)a1[6];
  uint64_t v57 = (char *)a1[7];
  uint64_t v59 = (v57 - v58) >> 3;
  unint64_t v60 = v59 + v25;
  if (v59 + v25 <= (unint64_t)(((char *)a1[8] - v58) >> 3)) {
    goto LABEL_53;
  }
  if (v60 >> 61) {
    goto LABEL_346;
  }
  uint64_t v61 = 8 * v60;
  uint64_t v62 = operator new(8 * v60);
  BOOL v63 = (float32x2_t *)&v62[8 * v59];
  uint64_t v64 = (char *)v63;
  if (v57 != v58)
  {
    unint64_t v65 = v57 - v58 - 8;
    if (v65 < 0x58)
    {
      uint64_t v64 = &v62[8 * v59];
      do
      {
LABEL_50:
        uint64_t v71 = *((void *)v57 - 1);
        v57 -= 8;
        *((void *)v64 - 1) = v71;
        v64 -= 8;
      }
      while (v57 != v58);
      goto LABEL_51;
    }
    uint64_t v64 = &v62[8 * v59];
    if ((unint64_t)(v58 - v62) < 0x20) {
      goto LABEL_50;
    }
    uint64_t v66 = (v65 >> 3) + 1;
    unint64_t v67 = &v62[8 * v59 - 16];
    uint64_t v68 = (long long *)(v57 - 16);
    uint64_t v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v70 = *v68;
      *(v67 - 1) = *(v68 - 1);
      _OWORD *v67 = v70;
      v67 -= 2;
      v68 -= 2;
      v69 -= 4;
    }
    while (v69);
    uint64_t v64 = (char *)&v63[-(v66 & 0x3FFFFFFFFFFFFFFCLL)];
    v57 -= 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_50;
    }
  }
LABEL_51:
  a1[6] = (float32x2_t *)v64;
  a1[7] = v63;
  a1[8] = (float32x2_t *)&v62[v61];
  if (v58) {
    operator delete(v58);
  }
LABEL_53:
  if (v17 > 0.01)
  {
    uint64_t v72 = (int)v14;
    uint64_t v73 = v72 + 1;
    float v74 = a7 - v14;
    float32x2_t v75 = vmla_n_f32(*(float32x2_t *)&a2[8 * v72], vsub_f32(*(float32x2_t *)&a2[8 * v72 + 8], *(float32x2_t *)&a2[8 * v72]), a7 - v14);
    uint64_t v77 = a1[1];
    unint64_t v76 = (unint64_t)a1[2];
    if ((unint64_t)v77 >= v76)
    {
      uint64_t v79 = *a1;
      uint64_t v80 = (char *)v77 - (char *)*a1;
      uint64_t v81 = v80 >> 3;
      unint64_t v82 = (v80 >> 3) + 1;
      if (v82 >> 61) {
        goto LABEL_346;
      }
      uint64_t v83 = v76 - (void)v79;
      if (v83 >> 2 > v82) {
        unint64_t v82 = v83 >> 2;
      }
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v82;
      }
      if (v84)
      {
        if (v84 >> 61) {
          goto LABEL_347;
        }
        uint64_t v85 = operator new(8 * v84);
        float v74 = a7 - v14;
      }
      else
      {
        uint64_t v85 = 0;
      }
      unint64_t v86 = (float32x2_t *)&v85[8 * v81];
      uint64_t v87 = (float32x2_t *)&v85[8 * v84];
      *unint64_t v86 = v75;
      uint64_t v78 = v86 + 1;
      if (v77 == v79)
      {
        uint64_t v79 = v77;
      }
      else
      {
        unint64_t v88 = (char *)v77 - (char *)v79 - 8;
        if (v88 < 0x58) {
          goto LABEL_350;
        }
        if ((unint64_t)((char *)v77 - v85 - v80) < 0x20) {
          goto LABEL_350;
        }
        uint64_t v89 = (v88 >> 3) + 1;
        v90 = &v85[8 * v81 - 16];
        uint64_t v91 = v77 - 2;
        uint64_t v92 = v89 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v93 = *(_OWORD *)v91->f32;
          *(v90 - 1) = *(_OWORD *)v91[-2].f32;
          _OWORD *v90 = v93;
          v90 -= 2;
          v91 -= 4;
          v92 -= 4;
        }
        while (v92);
        v86 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
        v77 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
        if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_350:
          do
          {
            float32x2_t v94 = v77[-1];
            --v77;
            v86[-1] = v94;
            --v86;
          }
          while (v77 != v79);
          uint64_t v79 = *a1;
        }
      }
      *a1 = v86;
      a1[1] = v78;
      a1[2] = v87;
      if (v79)
      {
        operator delete(v79);
        float v74 = a7 - v14;
      }
    }
    else
    {
      *uint64_t v77 = v75;
      uint64_t v78 = v77 + 1;
    }
    a1[1] = v78;
    if (a3)
    {
      float v95 = *(float *)&a3[4 * v72] + (float)((float)(*(float *)&a3[4 * v73] - *(float *)&a3[4 * v72]) * v74);
      v97 = (float *)a1[4];
      unint64_t v96 = (unint64_t)a1[5];
      if ((unint64_t)v97 >= v96)
      {
        uint64_t v99 = (float *)a1[3];
        uint64_t v100 = v97 - v99;
        unint64_t v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 62) {
          goto LABEL_346;
        }
        uint64_t v102 = v96 - (void)v99;
        if (v102 >> 1 > v101) {
          unint64_t v101 = v102 >> 1;
        }
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v103 = v101;
        }
        if (v103)
        {
          if (v103 >> 62) {
            goto LABEL_347;
          }
          uint64_t v104 = operator new(4 * v103);
        }
        else
        {
          uint64_t v104 = 0;
        }
        unint64_t v105 = (float *)&v104[4 * v100];
        uint64_t v106 = (float32x2_t *)&v104[4 * v103];
        *unint64_t v105 = v95;
        uint64_t v98 = v105 + 1;
        if (v97 != v99)
        {
          unint64_t v107 = (char *)v97 - (char *)v99 - 4;
          if (v107 < 0x2C) {
            goto LABEL_351;
          }
          if ((unint64_t)((char *)v99 - v104) < 0x20) {
            goto LABEL_351;
          }
          uint64_t v108 = (v107 >> 2) + 1;
          v109 = &v104[4 * v100 - 16];
          uint64_t v110 = v97 - 4;
          uint64_t v111 = v108 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v112 = *(_OWORD *)v110;
            *(v109 - 1) = *((_OWORD *)v110 - 1);
            _OWORD *v109 = v112;
            v109 -= 2;
            v110 -= 8;
            v111 -= 8;
          }
          while (v111);
          v105 -= v108 & 0x7FFFFFFFFFFFFFF8;
          v97 -= v108 & 0x7FFFFFFFFFFFFFF8;
          if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_351:
            do
            {
              int v113 = *((_DWORD *)v97-- - 1);
              *((_DWORD *)v105-- - 1) = v113;
            }
            while (v97 != v99);
          }
        }
        a1[3] = (float32x2_t *)v105;
        a1[4] = (float32x2_t *)v98;
        a1[5] = v106;
        if (v99) {
          operator delete(v99);
        }
      }
      else
      {
        float *v97 = v95;
        uint64_t v98 = v97 + 1;
      }
      a1[4] = (float32x2_t *)v98;
    }
    if (a4)
    {
      uint64_t v114 = (float *)(a4 + 16 * v72);
      uint64_t v115 = (float *)(a4 + 16 * v73);
      float v116 = a7 - (float)(int)v72;
      float v117 = *v114 + (float)((float)(*v115 - *v114) * v116);
      float v118 = v114[2] + (float)((float)(v115[2] - v114[2]) * v116);
      uint64_t v120 = (float *)a1[7];
      unint64_t v119 = (unint64_t)a1[8];
      if ((unint64_t)v120 >= v119)
      {
        uint64_t v122 = (float *)a1[6];
        uint64_t v123 = ((char *)v120 - (char *)v122) >> 3;
        unint64_t v124 = v123 + 1;
        if ((unint64_t)(v123 + 1) >> 61) {
          goto LABEL_346;
        }
        uint64_t v125 = v119 - (void)v122;
        if (v125 >> 2 > v124) {
          unint64_t v124 = v125 >> 2;
        }
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v126 = v124;
        }
        if (v126)
        {
          if (v126 >> 61) {
            goto LABEL_347;
          }
          unint64_t v127 = operator new(8 * v126);
        }
        else
        {
          unint64_t v127 = 0;
        }
        uint64_t v128 = (float *)&v127[8 * v123];
        uint64_t v129 = (float32x2_t *)&v127[8 * v126];
        *uint64_t v128 = v117;
        v128[1] = v118;
        uint64_t v121 = v128 + 2;
        if (v120 == v122)
        {
          uint64_t v122 = v120;
        }
        else
        {
          unint64_t v130 = (char *)v120 - (char *)v122 - 8;
          if (v130 < 0x58) {
            goto LABEL_352;
          }
          if ((unint64_t)((char *)v122 - v127) < 0x20) {
            goto LABEL_352;
          }
          uint64_t v131 = (v130 >> 3) + 1;
          uint64_t v132 = &v127[8 * v123 - 16];
          uint64_t v133 = v120 - 4;
          uint64_t v134 = v131 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v135 = *(_OWORD *)v133;
            *(v132 - 1) = *((_OWORD *)v133 - 1);
            *uint64_t v132 = v135;
            v132 -= 2;
            v133 -= 8;
            v134 -= 4;
          }
          while (v134);
          v128 -= 2 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
          v120 -= 2 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
          if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_352:
            do
            {
              uint64_t v136 = *((void *)v120 - 1);
              v120 -= 2;
              *((void *)v128 - 1) = v136;
              v128 -= 2;
            }
            while (v120 != v122);
            uint64_t v122 = (float *)a1[6];
          }
        }
        a1[6] = (float32x2_t *)v128;
        a1[7] = (float32x2_t *)v121;
        a1[8] = v129;
        if (v122) {
          operator delete(v122);
        }
      }
      else
      {
        *uint64_t v120 = v117;
        v120[1] = v118;
        uint64_t v121 = v120 + 2;
      }
      a1[7] = (float32x2_t *)v121;
    }
  }
  if (v335)
  {
    int v137 = 0;
    int v334 = (int)v16;
    while (1)
    {
      if (a7 < a8) {
        int v139 = v137;
      }
      else {
        int v139 = -v137;
      }
      int v140 = v139 + v334;
      float32x2_t v141 = *(float32x2_t *)&a2[8 * v139 + 8 * v334];
      uint64_t v143 = a1[1];
      unint64_t v142 = (unint64_t)a1[2];
      if ((unint64_t)v143 >= v142)
      {
        unint64_t v145 = *a1;
        uint64_t v146 = (char *)v143 - (char *)*a1;
        uint64_t v147 = v146 >> 3;
        unint64_t v148 = (v146 >> 3) + 1;
        if (v148 >> 61) {
          goto LABEL_346;
        }
        uint64_t v149 = v142 - (void)v145;
        if (v149 >> 2 > v148) {
          unint64_t v148 = v149 >> 2;
        }
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v150 = v148;
        }
        if (v150)
        {
          if (v150 >> 61) {
            goto LABEL_347;
          }
          uint64_t v151 = operator new(8 * v150);
        }
        else
        {
          uint64_t v151 = 0;
        }
        uint64_t v152 = (float32x2_t *)&v151[8 * v147];
        *uint64_t v152 = v141;
        uint64_t v144 = v152 + 1;
        if (v143 == v145)
        {
          unint64_t v145 = v143;
        }
        else
        {
          unint64_t v153 = (char *)&v143[-1] - (char *)v145;
          if (v153 < 0x58) {
            goto LABEL_353;
          }
          if ((unint64_t)((char *)v143 - &v151[v146]) < 0x20) {
            goto LABEL_353;
          }
          uint64_t v154 = (v153 >> 3) + 1;
          uint64_t v155 = &v151[8 * v147 - 16];
          uint64_t v156 = v143 - 2;
          uint64_t v157 = v154 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v158 = *(_OWORD *)v156->f32;
            *(v155 - 1) = *(_OWORD *)v156[-2].f32;
            *uint64_t v155 = v158;
            v155 -= 2;
            v156 -= 4;
            v157 -= 4;
          }
          while (v157);
          v152 -= v154 & 0x3FFFFFFFFFFFFFFCLL;
          v143 -= v154 & 0x3FFFFFFFFFFFFFFCLL;
          if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_353:
            do
            {
              float32x2_t v159 = v143[-1];
              --v143;
              v152[-1] = v159;
              --v152;
            }
            while (v143 != v145);
            unint64_t v145 = *a1;
          }
        }
        *a1 = v152;
        a1[1] = v144;
        a1[2] = (float32x2_t *)&v151[8 * v150];
        if (v145) {
          operator delete(v145);
        }
      }
      else
      {
        *uint64_t v143 = v141;
        uint64_t v144 = v143 + 1;
      }
      a1[1] = v144;
      if (a3)
      {
        uint64_t v161 = (char *)a1[4];
        unint64_t v160 = (unint64_t)a1[5];
        if ((unint64_t)v161 >= v160)
        {
          uint64_t v163 = (char *)a1[3];
          uint64_t v164 = (v161 - v163) >> 2;
          unint64_t v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62) {
            goto LABEL_346;
          }
          uint64_t v166 = v160 - (void)v163;
          if (v166 >> 1 > v165) {
            unint64_t v165 = v166 >> 1;
          }
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v167 = v165;
          }
          if (v167)
          {
            if (v167 >> 62) {
              goto LABEL_347;
            }
            uint64_t v168 = operator new(4 * v167);
          }
          else
          {
            uint64_t v168 = 0;
          }
          v169 = (float32x2_t *)&v168[4 * v164];
          v169->i32[0] = *(_DWORD *)&a3[4 * v140];
          v162 = (char *)v169 + 4;
          if (v161 != v163)
          {
            unint64_t v170 = v161 - 4 - v163;
            if (v170 < 0x2C) {
              goto LABEL_354;
            }
            if ((unint64_t)(v163 - v168) < 0x20) {
              goto LABEL_354;
            }
            uint64_t v171 = (v170 >> 2) + 1;
            unint64_t v172 = &v168[4 * v164 - 16];
            uint64_t v173 = v161 - 16;
            uint64_t v174 = v171 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v175 = *(_OWORD *)v173;
              *(v172 - 1) = *((_OWORD *)v173 - 1);
              *unint64_t v172 = v175;
              v172 -= 2;
              v173 -= 32;
              v174 -= 8;
            }
            while (v174);
            v169 = (float32x2_t *)((char *)v169 - 4 * (v171 & 0x7FFFFFFFFFFFFFF8));
            v161 -= 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
            if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_354:
              do
              {
                int v176 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                v169[-1].i32[1] = v176;
                v169 = (float32x2_t *)((char *)v169 - 4);
              }
              while (v161 != v163);
            }
          }
          a1[3] = v169;
          a1[4] = (float32x2_t *)v162;
          a1[5] = (float32x2_t *)&v168[4 * v167];
          if (v163) {
            operator delete(v163);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v161 = *(_DWORD *)&a3[4 * v140];
          v162 = v161 + 4;
        }
        a1[4] = (float32x2_t *)v162;
      }
      if (a4) {
        break;
      }
LABEL_129:
      if (++v137 == v335) {
        goto LABEL_203;
      }
    }
    v177 = (int *)(a4 + 16 * v140);
    int v178 = *v177;
    int v179 = v177[2];
    unint64_t v181 = (char *)a1[7];
    unint64_t v180 = (unint64_t)a1[8];
    if ((unint64_t)v181 < v180)
    {
      *(_DWORD *)unint64_t v181 = v178;
      *((_DWORD *)v181 + 1) = v179;
      unint64_t v138 = v181 + 8;
LABEL_128:
      a1[7] = (float32x2_t *)v138;
      goto LABEL_129;
    }
    uint64_t v182 = (char *)a1[6];
    uint64_t v183 = (v181 - v182) >> 3;
    unint64_t v184 = v183 + 1;
    if ((unint64_t)(v183 + 1) >> 61) {
      goto LABEL_346;
    }
    uint64_t v185 = v180 - (void)v182;
    if (v185 >> 2 > v184) {
      unint64_t v184 = v185 >> 2;
    }
    if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v186 = v184;
    }
    if (v186)
    {
      if (v186 >> 61) {
        goto LABEL_347;
      }
      uint64_t v187 = operator new(8 * v186);
    }
    else
    {
      uint64_t v187 = 0;
    }
    uint64_t v188 = (float32x2_t *)&v187[8 * v183];
    v188->i32[0] = v178;
    v188->i32[1] = v179;
    if (v181 == v182)
    {
      uint64_t v182 = v181;
      uint64_t v190 = (float32x2_t *)&v187[8 * v183];
      goto LABEL_201;
    }
    unint64_t v189 = v181 - 8 - v182;
    if (v189 >= 0x58)
    {
      uint64_t v190 = (float32x2_t *)&v187[8 * v183];
      if ((unint64_t)(v182 - v187) >= 0x20)
      {
        uint64_t v191 = (v189 >> 3) + 1;
        unint64_t v192 = &v187[8 * v183 - 16];
        uint64_t v193 = v181 - 16;
        uint64_t v194 = v191 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v195 = *(_OWORD *)v193;
          *(v192 - 1) = *((_OWORD *)v193 - 1);
          *unint64_t v192 = v195;
          v192 -= 2;
          v193 -= 32;
          v194 -= 4;
        }
        while (v194);
        uint64_t v190 = &v188[-(v191 & 0x3FFFFFFFFFFFFFFCLL)];
        v181 -= 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
        if (v191 == (v191 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_201;
        }
      }
    }
    else
    {
      uint64_t v190 = (float32x2_t *)&v187[8 * v183];
    }
    do
    {
      float32x2_t v196 = *(float32x2_t *)(v181 - 8);
      v181 -= 8;
      v190[-1] = v196;
      --v190;
    }
    while (v181 != v182);
    uint64_t v182 = (char *)a1[6];
LABEL_201:
    unint64_t v138 = (char *)&v188[1];
    a1[6] = v190;
    a1[7] = v188 + 1;
    a1[8] = (float32x2_t *)&v187[8 * v186];
    if (v182) {
      operator delete(v182);
    }
    goto LABEL_128;
  }
LABEL_203:
  uint64_t v197 = v332;
  if (v23 > 0.01)
  {
    uint64_t v198 = (int)v18;
    uint64_t v199 = v198 + 1;
    float v200 = a8 - v18;
    float32x2_t v201 = vmla_n_f32(*(float32x2_t *)&a2[8 * v198], vsub_f32(*(float32x2_t *)&a2[8 * v198 + 8], *(float32x2_t *)&a2[8 * v198]), a8 - v18);
    v203 = a1[1];
    unint64_t v202 = (unint64_t)a1[2];
    if ((unint64_t)v203 >= v202)
    {
      uint64_t v205 = *a1;
      uint64_t v206 = (char *)v203 - (char *)*a1;
      uint64_t v207 = v206 >> 3;
      unint64_t v208 = (v206 >> 3) + 1;
      if (v208 >> 61) {
        goto LABEL_346;
      }
      uint64_t v209 = v202 - (void)v205;
      if (v209 >> 2 > v208) {
        unint64_t v208 = v209 >> 2;
      }
      if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v210 = v208;
      }
      if (v210)
      {
        if (v210 >> 61) {
          goto LABEL_347;
        }
        uint64_t v211 = operator new(8 * v210);
        float v200 = a8 - v18;
      }
      else
      {
        uint64_t v211 = 0;
      }
      unint64_t v212 = (float32x2_t *)&v211[8 * v207];
      uint64_t v213 = (float32x2_t *)&v211[8 * v210];
      *unint64_t v212 = v201;
      v204 = v212 + 1;
      if (v203 == v205)
      {
        uint64_t v205 = v203;
      }
      else
      {
        unint64_t v214 = (char *)v203 - (char *)v205 - 8;
        if (v214 < 0x58) {
          goto LABEL_355;
        }
        if ((unint64_t)((char *)v203 - v211 - v206) < 0x20) {
          goto LABEL_355;
        }
        uint64_t v215 = (v214 >> 3) + 1;
        v216 = &v211[8 * v207 - 16];
        uint64_t v217 = v203 - 2;
        uint64_t v218 = v215 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v219 = *(_OWORD *)v217->f32;
          *(v216 - 1) = *(_OWORD *)v217[-2].f32;
          _OWORD *v216 = v219;
          v216 -= 2;
          v217 -= 4;
          v218 -= 4;
        }
        while (v218);
        v212 -= v215 & 0x3FFFFFFFFFFFFFFCLL;
        v203 -= v215 & 0x3FFFFFFFFFFFFFFCLL;
        if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_355:
          do
          {
            float32x2_t v220 = v203[-1];
            --v203;
            v212[-1] = v220;
            --v212;
          }
          while (v203 != v205);
          uint64_t v205 = *a1;
        }
      }
      *a1 = v212;
      a1[1] = v204;
      a1[2] = v213;
      if (v205)
      {
        operator delete(v205);
        float v200 = a8 - v18;
      }
      uint64_t v197 = v332;
    }
    else
    {
      float32x2_t *v203 = v201;
      v204 = v203 + 1;
    }
    a1[1] = v204;
    if (a3)
    {
      float v221 = *(float *)&a3[4 * v198] + (float)((float)(*(float *)&a3[4 * v199] - *(float *)&a3[4 * v198]) * v200);
      v223 = (float *)a1[4];
      unint64_t v222 = (unint64_t)a1[5];
      if ((unint64_t)v223 >= v222)
      {
        uint64_t v225 = (float *)a1[3];
        uint64_t v226 = v223 - v225;
        unint64_t v227 = v226 + 1;
        if ((unint64_t)(v226 + 1) >> 62) {
          goto LABEL_346;
        }
        uint64_t v228 = v222 - (void)v225;
        if (v228 >> 1 > v227) {
          unint64_t v227 = v228 >> 1;
        }
        if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v229 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v229 = v227;
        }
        if (v229)
        {
          if (v229 >> 62) {
            goto LABEL_347;
          }
          v230 = operator new(4 * v229);
        }
        else
        {
          v230 = 0;
        }
        v231 = (float *)&v230[4 * v226];
        v232 = (float32x2_t *)&v230[4 * v229];
        float *v231 = v221;
        uint64_t v224 = v231 + 1;
        if (v223 != v225)
        {
          unint64_t v233 = (char *)v223 - (char *)v225 - 4;
          if (v233 < 0x2C) {
            goto LABEL_356;
          }
          if ((unint64_t)((char *)v225 - v230) < 0x20) {
            goto LABEL_356;
          }
          uint64_t v234 = (v233 >> 2) + 1;
          v235 = &v230[4 * v226 - 16];
          v236 = v223 - 4;
          uint64_t v237 = v234 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v238 = *(_OWORD *)v236;
            *(v235 - 1) = *((_OWORD *)v236 - 1);
            _OWORD *v235 = v238;
            v235 -= 2;
            v236 -= 8;
            v237 -= 8;
          }
          while (v237);
          v231 -= v234 & 0x7FFFFFFFFFFFFFF8;
          v223 -= v234 & 0x7FFFFFFFFFFFFFF8;
          if (v234 != (v234 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_356:
            do
            {
              int v239 = *((_DWORD *)v223-- - 1);
              *((_DWORD *)v231-- - 1) = v239;
            }
            while (v223 != v225);
          }
        }
        a1[3] = (float32x2_t *)v231;
        a1[4] = (float32x2_t *)v224;
        a1[5] = v232;
        if (v225) {
          operator delete(v225);
        }
        uint64_t v197 = v332;
      }
      else
      {
        float *v223 = v221;
        uint64_t v224 = v223 + 1;
      }
      a1[4] = (float32x2_t *)v224;
    }
    if (a4)
    {
      v240 = (float *)(a4 + 16 * v198);
      uint64_t v241 = (float *)(a4 + 16 * v199);
      float v242 = a8 - (float)(int)v198;
      float v243 = *v240 + (float)((float)(*v241 - *v240) * v242);
      float v244 = v240[2] + (float)((float)(v241[2] - v240[2]) * v242);
      v246 = (float *)a1[7];
      unint64_t v245 = (unint64_t)a1[8];
      if ((unint64_t)v246 >= v245)
      {
        v248 = (float *)a1[6];
        uint64_t v249 = ((char *)v246 - (char *)v248) >> 3;
        unint64_t v250 = v249 + 1;
        if ((unint64_t)(v249 + 1) >> 61) {
          goto LABEL_346;
        }
        uint64_t v251 = v245 - (void)v248;
        if (v251 >> 2 > v250) {
          unint64_t v250 = v251 >> 2;
        }
        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v252 = v250;
        }
        if (v252)
        {
          if (v252 >> 61) {
            goto LABEL_347;
          }
          v253 = operator new(8 * v252);
        }
        else
        {
          v253 = 0;
        }
        v254 = (float *)&v253[8 * v249];
        v255 = (float32x2_t *)&v253[8 * v252];
        float *v254 = v243;
        v254[1] = v244;
        v247 = v254 + 2;
        if (v246 == v248)
        {
          v248 = v246;
        }
        else
        {
          unint64_t v256 = (char *)v246 - (char *)v248 - 8;
          if (v256 < 0x58) {
            goto LABEL_357;
          }
          if ((unint64_t)((char *)v248 - v253) < 0x20) {
            goto LABEL_357;
          }
          uint64_t v257 = (v256 >> 3) + 1;
          v258 = &v253[8 * v249 - 16];
          v259 = v246 - 4;
          uint64_t v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v261 = *(_OWORD *)v259;
            *(v258 - 1) = *((_OWORD *)v259 - 1);
            _OWORD *v258 = v261;
            v258 -= 2;
            v259 -= 8;
            v260 -= 4;
          }
          while (v260);
          v254 -= 2 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
          v246 -= 2 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
          if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_357:
            do
            {
              uint64_t v262 = *((void *)v246 - 1);
              v246 -= 2;
              *((void *)v254 - 1) = v262;
              v254 -= 2;
            }
            while (v246 != v248);
            v248 = (float *)a1[6];
          }
        }
        a1[6] = (float32x2_t *)v254;
        a1[7] = (float32x2_t *)v247;
        a1[8] = v255;
        if (v248) {
          operator delete(v248);
        }
      }
      else
      {
        float *v246 = v243;
        v246[1] = v244;
        v247 = v246 + 2;
      }
      a1[7] = (float32x2_t *)v247;
    }
  }
  if (!a6) {
    goto LABEL_343;
  }
  unint64_t v263 = (v333 - v197) >> 3;
  v264 = *a1;
  v265 = (char *)a1[1];
  uint64_t v266 = (v265 - (char *)*a1) >> 3;
  if (v263 < v266 - 1)
  {
    float32x2_t v267 = v264[v263];
    unint64_t v268 = v266 + ~v263;
    float v269 = 0.0;
    if (v268 > 7)
    {
      a10.u64[1] = (unint64_t)v264[v263];
      int8x16_t v281 = (int8x16_t)vdupq_lane_s32((int32x2_t)v267, 0);
      unint64_t v282 = v268 & 0xFFFFFFFFFFFFFFF8;
      v283 = &v264[v263 + 5];
      float32x4_t v284 = 0uLL;
      unint64_t v285 = v268 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v286 = 0uLL;
      do
      {
        v287 = (const float *)&v283[-4];
        float32x4x2_t v339 = vld2q_f32(v287);
        int32x4_t v289 = *(int32x4_t *)v283->f32;
        int8x16_t v288 = *(int8x16_t *)v283[2].f32;
        v283 += 8;
        float32x4_t v290 = (float32x4_t)vuzp1q_s32(v289, (int32x4_t)v288);
        float32x4_t v291 = (float32x4_t)vuzp2q_s32(v289, (int32x4_t)v288);
        float32x4_t v292 = vsubq_f32((float32x4_t)vextq_s8(v281, (int8x16_t)v339.val[0], 0xCuLL), v339.val[0]);
        float32x4_t v293 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v339.val[0], (int8x16_t)v290, 0xCuLL), v290);
        float32x4_t v294 = vsubq_f32((float32x4_t)vextq_s8(a10, (int8x16_t)v339.val[1], 0xCuLL), v339.val[1]);
        v339.val[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v339.val[1], (int8x16_t)v291, 0xCuLL), v291);
        float32x4_t v284 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v292, v292), v294, v294)), v284);
        float32x4_t v286 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v293, v293), v339.val[0], v339.val[0])), v286);
        a10 = (int8x16_t)v291;
        int8x16_t v281 = (int8x16_t)v290;
        v285 -= 8;
      }
      while (v285);
      float32x4_t v295 = vaddq_f32(v286, v284);
      float v269 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v295, v295));
      if (v268 == v282) {
        goto LABEL_299;
      }
      uint64_t v270 = v263 + v282;
      float32x2_t v267 = (float32x2_t)vextq_s8(v288, v288, 8uLL).u64[0];
    }
    else
    {
      uint64_t v270 = (v333 - v197) >> 3;
    }
    uint64_t v296 = ~v270 + v266;
    v297 = &v264[v270 + 1];
    do
    {
      float32x2_t v298 = *v297++;
      float32x2_t v299 = vsub_f32(v267, v298);
      float v269 = sqrtf(vaddv_f32(vmul_f32(v299, v299))) + v269;
      float32x2_t v267 = v298;
      --v296;
    }
    while (v296);
LABEL_299:
    float v271 = *a6;
    float v300 = 0.0;
    if (v269 > 0.000001) {
      float v300 = (float)(a6[1] - v271) / v269;
    }
    v301 = (float *)a1[10];
    while (1)
    {
      unint64_t v303 = (unint64_t)a1[11];
      if ((unint64_t)v301 >= v303) {
        break;
      }
      float *v301 = v271;
      v272 = v301 + 1;
LABEL_303:
      a1[10] = (float32x2_t *)v272;
      float32x2_t v302 = vsub_f32(v264[v263], v264[v263 + 1]);
      float v271 = v271 + (float)(sqrtf(vaddv_f32(vmul_f32(v302, v302))) * v300);
      v301 = v272;
      if (++v263 >= ((v265 - (char *)v264) >> 3) - 1) {
        goto LABEL_282;
      }
    }
    v304 = (float *)a1[9];
    uint64_t v305 = v301 - v304;
    unint64_t v306 = v305 + 1;
    if ((unint64_t)(v305 + 1) >> 62) {
      goto LABEL_346;
    }
    uint64_t v307 = v303 - (void)v304;
    if (v307 >> 1 > v306) {
      unint64_t v306 = v307 >> 1;
    }
    if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v308 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v308 = v306;
    }
    if (v308)
    {
      if (v308 >> 62) {
        goto LABEL_347;
      }
      v309 = operator new(4 * v308);
    }
    else
    {
      v309 = 0;
    }
    v310 = (float *)&v309[4 * v305];
    float *v310 = v271;
    v272 = v310 + 1;
    if (v301 == v304) {
      goto LABEL_328;
    }
    unint64_t v311 = (char *)(v301 - 1) - (char *)v304;
    if (v311 < 0xBC)
    {
      v312 = v301;
      goto LABEL_327;
    }
    if (&v309[(char *)v301 - (char *)v304 - 4 - (v311 & 0xFFFFFFFFFFFFFFFCLL)] > &v309[(char *)v301 - (char *)v304 - 4])
    {
      v312 = v301;
    }
    else
    {
      if ((float *)((char *)v301 - (v311 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v301 - 1)
      {
        if ((unint64_t)((char *)v304 - v309) < 0x20)
        {
          v312 = v301;
          goto LABEL_327;
        }
        uint64_t v313 = (v311 >> 2) + 1;
        v312 = &v301[-(v313 & 0x7FFFFFFFFFFFFFF8)];
        v314 = &v309[4 * v305 - 16];
        v315 = v301 - 4;
        uint64_t v316 = v313 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v317 = *(_OWORD *)v315;
          *(v314 - 1) = *((_OWORD *)v315 - 1);
          _OWORD *v314 = v317;
          v314 -= 2;
          v315 -= 8;
          v316 -= 8;
        }
        while (v316);
        v310 -= v313 & 0x7FFFFFFFFFFFFFF8;
        if (v313 != (v313 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_327;
        }
LABEL_328:
        a1[9] = (float32x2_t *)v310;
        a1[10] = (float32x2_t *)v272;
        a1[11] = (float32x2_t *)&v309[4 * v308];
        if (v304)
        {
          operator delete(v304);
          v264 = *a1;
          v265 = (char *)a1[1];
        }
        goto LABEL_303;
      }
      v312 = v301;
    }
    do
    {
LABEL_327:
      int v318 = *((_DWORD *)v312-- - 1);
      *((_DWORD *)v310-- - 1) = v318;
    }
    while (v312 != v304);
    goto LABEL_328;
  }
  float v271 = *a6;
  v272 = (float *)a1[10];
LABEL_282:
  unint64_t v273 = (unint64_t)a1[11];
  if ((unint64_t)v272 >= v273)
  {
    v275 = (float *)a1[9];
    uint64_t v276 = v272 - v275;
    unint64_t v277 = v276 + 1;
    if (!((unint64_t)(v276 + 1) >> 62))
    {
      uint64_t v278 = v273 - (void)v275;
      if (v278 >> 1 > v277) {
        unint64_t v277 = v278 >> 1;
      }
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v279 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v279 = v277;
      }
      if (!v279)
      {
        v280 = 0;
LABEL_331:
        v319 = (float *)&v280[4 * v276];
        v320 = (float32x2_t *)&v280[4 * v279];
        float *v319 = v271;
        v274 = v319 + 1;
        if (v272 == v275) {
          goto LABEL_340;
        }
        unint64_t v321 = (char *)v272 - (char *)v275 - 4;
        if (v321 >= 0x2C)
        {
          if ((unint64_t)((char *)v275 - v280) >= 0x20)
          {
            uint64_t v323 = (v321 >> 2) + 1;
            v322 = &v272[-(v323 & 0x7FFFFFFFFFFFFFF8)];
            v324 = &v280[4 * v276 - 16];
            v325 = v272 - 4;
            uint64_t v326 = v323 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v327 = *(_OWORD *)v325;
              *(v324 - 1) = *((_OWORD *)v325 - 1);
              _OWORD *v324 = v327;
              v324 -= 2;
              v325 -= 8;
              v326 -= 8;
            }
            while (v326);
            v319 -= v323 & 0x7FFFFFFFFFFFFFF8;
            if (v323 == (v323 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_340:
              a1[9] = (float32x2_t *)v319;
              a1[10] = (float32x2_t *)v274;
              a1[11] = v320;
              if (v275) {
                operator delete(v275);
              }
              goto LABEL_342;
            }
          }
          else
          {
            v322 = v272;
          }
        }
        else
        {
          v322 = v272;
        }
        do
        {
          int v328 = *((_DWORD *)v322-- - 1);
          *((_DWORD *)v319-- - 1) = v328;
        }
        while (v322 != v275);
        goto LABEL_340;
      }
      if (!(v279 >> 62))
      {
        v280 = operator new(4 * v279);
        goto LABEL_331;
      }
LABEL_347:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_346:
    abort();
  }
  float *v272 = v271;
  v274 = v272 + 1;
LABEL_342:
  a1[10] = (float32x2_t *)v274;
LABEL_343:
  int v329 = *((_DWORD *)a1 + 27);
  if (!v329)
  {
    *((float *)a1 + 28) = a7;
    a1[22] = (float32x2_t *)a2;
    a1[23] = (float32x2_t *)a3;
    *((_DWORD *)a1 + 48) = a5;
  }
  *((_DWORD *)a1 + 27) = v329 + 1;
}

void md::TrafficAccum::flushToRibbonCollection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 120))
  {
    double v7 = *(_DWORD **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    if (*(void *)a1 != v6)
    {
      size_t v12 = v6 - (void)v7;
      unint64_t v13 = (v6 - (uint64_t)v7) >> 3;
      if ((unint64_t)(v6 - (void)v7) > 0x2000)
      {
        float v16 = malloc_type_malloc(v6 - (void)v7, 0x100004000313F17uLL);
        if (!v16) {
          return;
        }
        float v14 = v16;
      }
      else
      {
        MEMORY[0x1F4188790](a1);
        float v14 = (_DWORD *)((char *)&v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v14, v12);
        if (v12 <= 0x17)
        {
          uint64_t v15 = 0;
          do
          {
            *(void *)&v14[2 * v15] = *(void *)&v7[2 * v15];
            ++v15;
          }
          while (v13 != v15);
          uint64_t v192 = v13;
          goto LABEL_11;
        }
      }
      uint64_t v192 = 1;
      *float v14 = *v7;
      v14[1] = v7[1];
      unint64_t v17 = v13 - 1;
      geo::dpSimplify<gm::Matrix<float,2,1>>((uint64_t)v7, 0, v17, (uint64_t)v14, &v192);
      float v18 = &v7[2 * v17];
      uint64_t v19 = v192;
      unint64_t v13 = ++v192;
      float v20 = &v14[2 * v19];
      _DWORD *v20 = *v18;
      v20[1] = v18[1];
LABEL_11:
      uint64_t v21 = *(unsigned __int8 *)(a1 + 96);
      int v22 = *(_DWORD *)(a2 + 4 * v21);
      if (v13 <= 5)
      {
        if (v13)
        {
          v26.i64[0] = *(void *)v14;
          v27.i64[0] = *(void *)v14;
          v27.i64[1] = *(void *)v14;
          *(int32x2_t *)v28.f32 = vdup_n_s32(0x7F7FFFFFu);
          v28.i64[1] = *(void *)v14;
          v26.i64[1] = 0x80000000800000;
          float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, v26), v27, (int8x16_t)xmmword_1A28FC750);
          if (v13 != 1)
          {
            v30.i64[0] = *((void *)v14 + 1);
            v31.i64[0] = v30.i64[0];
            v31.i64[1] = v30.i64[0];
            v32.i64[0] = v29.i64[0];
            v32.i64[1] = v30.i64[0];
            v30.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
            float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v32, v30), v31, (int8x16_t)v29);
            if (v13 != 2)
            {
              v33.i64[0] = *((void *)v14 + 2);
              v34.i64[0] = v33.i64[0];
              v34.i64[1] = v33.i64[0];
              v35.i64[0] = v29.i64[0];
              v35.i64[1] = v33.i64[0];
              v33.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
              float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v35, v33), v34, (int8x16_t)v29);
              if (v13 != 3)
              {
                v36.i64[0] = *((void *)v14 + 3);
                v37.i64[0] = v36.i64[0];
                v37.i64[1] = v36.i64[0];
                v38.i64[0] = v29.i64[0];
                v38.i64[1] = v36.i64[0];
                v36.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
                float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v36), v37, (int8x16_t)v29);
                if (v13 != 4)
                {
                  v39.i64[0] = *((void *)v14 + 4);
                  v40.i64[0] = v39.i64[0];
                  v40.i64[1] = v39.i64[0];
                  v41.i64[0] = v29.i64[0];
                  v41.i64[1] = v39.i64[0];
                  v39.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
                  float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v41, v39), v40, (int8x16_t)v29);
                }
              }
            }
          }
        }
        else
        {
          float32x4_t v29 = (float32x4_t)xmmword_1A28FC750;
        }
        float v54 = 0.0019531;
        if (!v22) {
          float v54 = 0.012;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32(v29, (float32x4_t)xmmword_1A28FCDA0))) & 1) == 0
          && vaddq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1), v29)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3)).f32[0] <= v54)
        {
          goto LABEL_241;
        }
      }
      uint64_t v23 = *(unsigned __int8 *)(*(void *)(a1 + 120) + 153) - 1 < 2;
      uint64_t v188 = 0;
      unint64_t v189 = 0;
      unsigned int v24 = *(void (***)(void))(a1 + 144);
      uint64_t v25 = *(std::__shared_weak_count **)(a1 + 152);
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v188 = v24;
        unint64_t v189 = v25;
        LOBYTE(v21) = *(unsigned char *)(a1 + 96);
      }
      else
      {
        uint64_t v188 = *(void (***)(void))(a1 + 144);
      }
      BOOL v42 = *(_DWORD *)(a1 + 100) == 0;
      if (*(_DWORD *)(a1 + 100)) {
        int v43 = -1;
      }
      else {
        int v43 = 1;
      }
      *(float *)&uint64_t v190 = (float)v43;
      BYTE4(v190) = v21;
      int v191 = *(_DWORD *)(a1 + 196);
      if ((v22 - 1) >= 2)
      {
        if (v22 != 3)
        {
          if (v22)
          {
LABEL_238:
            uint64_t v173 = v189;
            if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
LABEL_241:
            if (v12 > 0x2000) {
              free(v14);
            }
            return;
          }
          {
            operator new();
          }
          uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
          uint64_t v45 = v44;
          uint64_t v46 = v192;
          *(_OWORD *)(v44 + 49) = 0u;
          *(_OWORD *)(v44 + 8) = 0u;
          *(_OWORD *)(v44 + 24) = 0u;
          *(_OWORD *)(v44 + 40) = 0u;
          *(void *)(v44 + 56) = v46;
          *(void *)uint64_t v44 = &unk_1EF553D70;
          *(void *)(v44 + 80) = 0;
          *(void *)(v44 + 88) = 0;
          *(void *)(v44 + 72) = 0;
          if (v46)
          {
            *(void *)(v44 + 88) = v46;
            {
              operator new();
            }
            uint64_t v47 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 8 * v46, 8);
            *(void *)(v45 + 72) = v47;
            *(unsigned char *)(v45 + 64) = 1;
            uint64_t v48 = *(void *)(v45 + 88);
          }
          else
          {
            uint64_t v48 = 0;
            uint64_t v47 = 0;
          }
          *(void *)uint64_t v45 = &unk_1EF533428;
          v193[0] = (void (***)(void))v45;
          *(unsigned char *)(v45 + 96) = v23;
          memcpy(v47, v14, 8 * v48);
          uint64_t v73 = std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(a3, (md::TrafficBatchKey *)&v188, (uint64_t)&v188);
          float v74 = v73;
          float32x2_t v75 = (void *)*((void *)v73 + 7);
          unint64_t v76 = *((void *)v73 + 8);
          if ((unint64_t)v75 < v76)
          {
            if (v75)
            {
              uint64_t v77 = v193[0];
              v193[0] = 0;
              *float32x2_t v75 = v77;
            }
            uint64_t v78 = v75 + 1;
LABEL_175:
            *((void *)v74 + 7) = v78;
            std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100](v193);
            goto LABEL_238;
          }
          uint64_t v79 = *((void *)v73 + 6);
          uint64_t v80 = ((uint64_t)v75 - v79) >> 3;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61) {
            abort();
          }
          uint64_t v82 = v76 - v79;
          if (v82 >> 2 > v81) {
            unint64_t v81 = v82 >> 2;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v83 = v81;
          }
          if (v83)
          {
            uint64_t v84 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v73 + 9) + 16))(*((void *)v73 + 9), 8 * v83, 8);
            uint64_t v85 = (void *)(v84 + 8 * v80);
            uint64_t v86 = v84 + 8 * v83;
            if (v84)
            {
              uint64_t v87 = v193[0];
              v193[0] = 0;
              *uint64_t v85 = v87;
            }
          }
          else
          {
            uint64_t v86 = 0;
            uint64_t v85 = (void *)(8 * v80);
          }
          uint64_t v78 = v85 + 1;
          uint64_t v128 = (char *)*((void *)v74 + 6);
          uint64_t v129 = (char *)*((void *)v74 + 7);
          if (v129 == v128)
          {
            *((void *)v74 + 6) = v85;
            *((void *)v74 + 7) = v78;
            uint64_t v135 = *((void *)v74 + 8);
            *((void *)v74 + 8) = v86;
            goto LABEL_173;
          }
          unint64_t v130 = v129 - v128 - 8;
          if (v130 > 0x57
            && ((unint64_t v131 = (v128 - v129 + 7) & 0xFFFFFFFFFFFFFFF8, &v129[v131] >= (char *)v85)
             || (char *)v85 + v131 >= v129))
          {
            uint64_t v174 = (v130 >> 3) + 1;
            uint64_t v132 = &v129[-8 * (v174 & 0x3FFFFFFFFFFFFFFCLL)];
            long long v175 = v85 - 2;
            int v176 = v129 - 32;
            uint64_t v177 = v174 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v179 = *(_OWORD *)v176;
              long long v178 = *((_OWORD *)v176 + 1);
              *(_OWORD *)int v176 = 0uLL;
              *((_OWORD *)v176 + 1) = 0uLL;
              v176 -= 32;
              *(v175 - 1) = v179;
              *long long v175 = v178;
              v175 -= 2;
              v177 -= 4;
            }
            while (v177);
            v85 -= v174 & 0x3FFFFFFFFFFFFFFCLL;
            if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              uint64_t v129 = (char *)*((void *)v74 + 6);
              uint64_t v134 = (char *)*((void *)v74 + 7);
              *((void *)v74 + 6) = v85;
              *((void *)v74 + 7) = v78;
              uint64_t v135 = *((void *)v74 + 8);
              *((void *)v74 + 8) = v86;
              while (v134 != v129)
              {
                int v137 = (void (***)(void))*((void *)v134 - 1);
                v134 -= 8;
                uint64_t v136 = v137;
                *(void *)uint64_t v134 = 0;
                if (v137)
                {
                  (**v136)(v136);
                  {
                    operator new();
                  }
                  (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v136, 104);
                }
              }
LABEL_173:
              if (v129) {
                (*(void (**)(void, char *, uint64_t))(**((void **)v74 + 9) + 40))(*((void *)v74 + 9), v129, v135 - (void)v129);
              }
              goto LABEL_175;
            }
          }
          else
          {
            uint64_t v132 = (char *)*((void *)v74 + 7);
          }
          do
          {
            uint64_t v133 = *((void *)v132 - 1);
            v132 -= 8;
            *(void *)uint64_t v132 = 0;
            *--uint64_t v85 = v133;
          }
          while (v132 != v128);
          goto LABEL_165;
        }
        {
          operator new();
        }
        uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
        uint64_t v56 = v55;
        uint64_t v57 = v192;
        *(_OWORD *)(v55 + 49) = 0u;
        *(_OWORD *)(v55 + 8) = 0u;
        *(_OWORD *)(v55 + 24) = 0u;
        *(_OWORD *)(v55 + 40) = 0u;
        *(void *)(v55 + 56) = v57;
        *(void *)uint64_t v55 = &unk_1EF553D70;
        *(void *)(v55 + 80) = 0;
        *(void *)(v55 + 88) = 0;
        *(void *)(v55 + 72) = 0;
        if (v57)
        {
          *(void *)(v55 + 88) = v57;
          {
            operator new();
          }
          uint64_t v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 8 * v57, 8);
          *(void *)(v56 + 72) = v58;
          *(unsigned char *)(v56 + 64) = 1;
          uint64_t v59 = *(void *)(v56 + 88);
        }
        else
        {
          uint64_t v59 = 0;
          uint64_t v58 = 0;
        }
        *(void *)uint64_t v56 = &unk_1EF538800;
        uint64_t v187 = (void (***)(void))v56;
        *(unsigned char *)(v56 + 96) = v23;
        *(_DWORD *)(v56 + 100) = v42;
        memcpy(v58, v14, 8 * v59);
        unint64_t v88 = md::TrafficBatchKey::hash((md::TrafficBatchKey *)&v188);
        unint64_t v90 = v88;
        unint64_t v91 = a5[1];
        if (v91)
        {
          v89.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v91);
          v89.n128_u16[0] = vaddlv_u8((uint8x8_t)v89.n128_u64[0]);
          unint64_t v92 = v89.n128_u32[0];
          if (v89.n128_u32[0] > 1uLL)
          {
            uint64_t v23 = v88;
            if (v88 >= v91) {
              uint64_t v23 = v88 % v91;
            }
          }
          else
          {
            uint64_t v23 = (v91 + 0x7FFFFFFFFFFFFFFFLL) & v88;
          }
          uint64_t v104 = *(float ***)(*a5 + 8 * v23);
          if (v104)
          {
            unint64_t v105 = *v104;
            if (*v104)
            {
              v89.n128_u32[0] = v190;
              if (v92 < 2)
              {
                while (1)
                {
                  unint64_t v107 = *((void *)v105 + 1);
                  if (v107 == v88)
                  {
                    if (*((void (***)(void))v105 + 2) == v188
                      && v105[8] == *(float *)&v190
                      && *((unsigned __int8 *)v105 + 36) == BYTE4(v190)
                      && *((_DWORD *)v105 + 10) == v191)
                    {
                      goto LABEL_207;
                    }
                  }
                  else if ((v107 & (v91 - 1)) != v23)
                  {
                    goto LABEL_122;
                  }
                  unint64_t v105 = *(float **)v105;
                  if (!v105) {
                    goto LABEL_122;
                  }
                }
              }
              do
              {
                unint64_t v106 = *((void *)v105 + 1);
                if (v106 == v88)
                {
                  if (*((void (***)(void))v105 + 2) == v188
                    && v105[8] == *(float *)&v190
                    && *((unsigned __int8 *)v105 + 36) == BYTE4(v190)
                    && *((_DWORD *)v105 + 10) == v191)
                  {
                    goto LABEL_207;
                  }
                }
                else
                {
                  if (v106 >= v91) {
                    v106 %= v91;
                  }
                  if (v106 != v23) {
                    break;
                  }
                }
                unint64_t v105 = *(float **)v105;
              }
              while (v105);
            }
          }
        }
LABEL_122:
        uint64_t v108 = (float *)operator new(0x50uLL);
        unint64_t v105 = v108;
        v109 = (float **)(a5 + 2);
        v193[0] = (void (***)(void))v108;
        v193[1] = (void (***)(void))(a5 + 2);
        *(void *)uint64_t v108 = 0;
        *((void *)v108 + 1) = v90;
        uint64_t v110 = v189;
        *((void *)v108 + 2) = v188;
        *((void *)v108 + 3) = v110;
        if (v110) {
          atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)v108 + 4) = v190;
        *((_DWORD *)v108 + 10) = v191;
        *((void *)v108 + 7) = 0;
        *((void *)v108 + 8) = 0;
        *((void *)v108 + 6) = 0;
        {
          operator new();
        }
        *((void *)v105 + 9) = mdm::Allocator::instance(void)::alloc;
        char v194 = 1;
        v89.n128_f32[0] = (float)(unint64_t)(a5[3] + 1);
        float v111 = *((float *)a5 + 8);
        if (v91 && (float)(v111 * (float)v91) >= v89.n128_f32[0])
        {
LABEL_197:
          uint64_t v147 = *a5;
          unint64_t v148 = *(float ***)(*a5 + 8 * v23);
          if (v148)
          {
            *(void *)unint64_t v105 = *v148;
          }
          else
          {
            *(void *)unint64_t v105 = *v109;
            _OWORD *v109 = v105;
            *(void *)(v147 + 8 * v23) = v109;
            if (!*(void *)v105)
            {
LABEL_206:
              ++a5[3];
LABEL_207:
              unint64_t v150 = (void *)*((void *)v105 + 7);
              unint64_t v151 = *((void *)v105 + 8);
              if ((unint64_t)v150 < v151)
              {
                if (v150)
                {
                  uint64_t v152 = v187;
                  uint64_t v187 = 0;
                  void *v150 = v152;
                }
                unint64_t v153 = v150 + 1;
LABEL_237:
                *((void *)v105 + 7) = v153;
                std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100](&v187);
                goto LABEL_238;
              }
              uint64_t v154 = (void (**)(void))*((void *)v105 + 6);
              uint64_t v155 = (void (**)(void))v150 - v154;
              unint64_t v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 61) {
                abort();
              }
              uint64_t v157 = v151 - (void)v154;
              if (v157 >> 2 > v156) {
                unint64_t v156 = v157 >> 2;
              }
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
                uint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v158 = v156;
              }
              if (v158)
              {
                uint64_t v159 = (*(uint64_t (**)(void (**)(void), uint64_t, uint64_t, __n128))(**((void **)v105 + 9) + 16))(*((void (***)(void))v105 + 9), 8 * v158, 8, v89);
                unint64_t v160 = (void *)(v159 + 8 * v155);
                uint64_t v161 = v159 + 8 * v158;
                if (v159)
                {
                  v162 = v187;
                  uint64_t v187 = 0;
                  *unint64_t v160 = v162;
                }
              }
              else
              {
                uint64_t v161 = 0;
                unint64_t v160 = (void *)(8 * v155);
              }
              unint64_t v153 = v160 + 1;
              uint64_t v163 = (char *)*((void *)v105 + 6);
              uint64_t v164 = (char *)*((void *)v105 + 7);
              if (v164 == v163)
              {
                *((void *)v105 + 6) = v160;
                *((void *)v105 + 7) = v153;
                unint64_t v170 = (char *)*((void *)v105 + 8);
                *((void *)v105 + 8) = v161;
                goto LABEL_235;
              }
              unint64_t v165 = v164 - v163 - 8;
              if (v165 > 0x57
                && ((unint64_t v166 = (v163 - v164 + 7) & 0xFFFFFFFFFFFFFFF8, &v164[v166] >= (char *)v160)
                 || (char *)v160 + v166 >= v164))
              {
                uint64_t v180 = (v165 >> 3) + 1;
                unint64_t v167 = &v164[-8 * (v180 & 0x3FFFFFFFFFFFFFFCLL)];
                unint64_t v181 = v160 - 2;
                uint64_t v182 = v164 - 32;
                uint64_t v183 = v180 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v185 = *(_OWORD *)v182;
                  long long v184 = *((_OWORD *)v182 + 1);
                  *(_OWORD *)uint64_t v182 = 0uLL;
                  *((_OWORD *)v182 + 1) = 0uLL;
                  v182 -= 32;
                  *(v181 - 1) = v185;
                  *unint64_t v181 = v184;
                  v181 -= 2;
                  v183 -= 4;
                }
                while (v183);
                v160 -= v180 & 0x3FFFFFFFFFFFFFFCLL;
                if (v180 == (v180 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_227:
                  uint64_t v164 = (char *)*((void *)v105 + 6);
                  v169 = (char *)*((void *)v105 + 7);
                  *((void *)v105 + 6) = v160;
                  *((void *)v105 + 7) = v153;
                  unint64_t v170 = (char *)*((void *)v105 + 8);
                  *((void *)v105 + 8) = v161;
                  while (v169 != v164)
                  {
                    unint64_t v172 = (void (***)(void))*((void *)v169 - 1);
                    v169 -= 8;
                    uint64_t v171 = v172;
                    *(void *)v169 = 0;
                    if (v172)
                    {
                      (**v171)(v171);
                      {
                        operator new();
                      }
                      (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v171, 104);
                    }
                  }
LABEL_235:
                  if (v164) {
                    (*(void (**)(void (**)(void), char *, int64_t))(**((void **)v105 + 9)
                  }
                                                                                                 + 40))(*((void (***)(void))v105 + 9), v164, v170 - v164);
                  goto LABEL_237;
                }
              }
              else
              {
                unint64_t v167 = (char *)*((void *)v105 + 7);
              }
              do
              {
                uint64_t v168 = *((void *)v167 - 1);
                v167 -= 8;
                *(void *)unint64_t v167 = 0;
                *--unint64_t v160 = v168;
              }
              while (v167 != v163);
              goto LABEL_227;
            }
            unint64_t v149 = *(void *)(*(void *)v105 + 8);
            if ((v91 & (v91 - 1)) != 0)
            {
              if (v149 >= v91) {
                v149 %= v91;
              }
            }
            else
            {
              v149 &= v91 - 1;
            }
            unint64_t v148 = (float **)(*a5 + 8 * v149);
          }
          *unint64_t v148 = v105;
          goto LABEL_206;
        }
        BOOL v112 = 1;
        if (v91 >= 3) {
          BOOL v112 = (v91 & (v91 - 1)) != 0;
        }
        unint64_t v113 = v112 | (2 * v91);
        v89.n128_f32[0] = v89.n128_f32[0] / v111;
        unint64_t v114 = vcvtps_u32_f32(v89.n128_f32[0]);
        if (v113 <= v114) {
          size_t prime = v114;
        }
        else {
          size_t prime = v113;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v91 = a5[1];
        if (prime <= v91)
        {
          if (prime >= v91) {
            goto LABEL_184;
          }
          unint64_t v126 = vcvtps_u32_f32((float)(unint64_t)a5[3] / *((float *)a5 + 8));
          if (v91 < 3
            || (v89.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v91),
                v89.n128_u16[0] = vaddlv_u8((uint8x8_t)v89.n128_u64[0]),
                v89.n128_u32[0] > 1uLL))
          {
            unint64_t v126 = std::__next_prime(v126);
          }
          else
          {
            uint64_t v127 = 1 << -(char)__clz(v126 - 1);
            if (v126 >= 2) {
              unint64_t v126 = v127;
            }
          }
          if (prime <= v126) {
            size_t prime = v126;
          }
          if (prime >= v91)
          {
            unint64_t v91 = a5[1];
LABEL_184:
            if ((v91 & (v91 - 1)) != 0)
            {
              if (v90 >= v91) {
                uint64_t v23 = v90 % v91;
              }
              else {
                uint64_t v23 = v90;
              }
            }
            else
            {
              uint64_t v23 = (v91 + 0x7FFFFFFFFFFFFFFFLL) & v90;
            }
            goto LABEL_197;
          }
          if (!prime)
          {
            unint64_t v186 = (void *)*a5;
            *a5 = 0;
            if (v186) {
              operator delete(v186);
            }
            unint64_t v91 = 0;
            a5[1] = 0;
            goto LABEL_184;
          }
        }
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float v116 = operator new(8 * prime);
        float v117 = (void *)*a5;
        *a5 = (uint64_t)v116;
        if (v117) {
          operator delete(v117);
        }
        uint64_t v118 = 0;
        a5[1] = prime;
        do
          *(void *)(*a5 + 8 * v118++) = 0;
        while (prime != v118);
        unint64_t v119 = *v109;
        if (!*v109)
        {
LABEL_183:
          unint64_t v91 = prime;
          goto LABEL_184;
        }
        size_t v120 = *((void *)v119 + 1);
        size_t v121 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v122 = v120 & v121;
          *(void *)(*a5 + 8 * v122) = v109;
          for (uint64_t i = *(float **)v119; *(void *)v119; uint64_t i = *(float **)v119)
          {
            size_t v124 = *((void *)i + 1) & v121;
            if (v124 == v122)
            {
              unint64_t v119 = i;
            }
            else if (*(void *)(*a5 + 8 * v124))
            {
              *(void *)unint64_t v119 = *(void *)i;
              uint64_t v125 = 8 * v124;
              *(void *)uint64_t i = **(void **)(*a5 + v125);
              **(void **)(*a5 + v125) = i;
            }
            else
            {
              *(void *)(*a5 + 8 * v124) = v119;
              unint64_t v119 = i;
              size_t v122 = v124;
            }
          }
          goto LABEL_183;
        }
        if (v120 >= prime) {
          v120 %= prime;
        }
        *(void *)(*a5 + 8 * v120) = v109;
        uint64_t v144 = *(float **)v119;
        if (!*(void *)v119) {
          goto LABEL_183;
        }
        while (1)
        {
          size_t v146 = *((void *)v144 + 1);
          if (v146 >= prime) {
            v146 %= prime;
          }
          if (v146 != v120)
          {
            if (!*(void *)(*a5 + 8 * v146))
            {
              *(void *)(*a5 + 8 * v146) = v119;
              goto LABEL_188;
            }
            *(void *)unint64_t v119 = *(void *)v144;
            uint64_t v145 = 8 * v146;
            *(void *)uint64_t v144 = **(void **)(*a5 + v145);
            **(void **)(*a5 + v145) = v144;
            uint64_t v144 = v119;
          }
          size_t v146 = v120;
LABEL_188:
          unint64_t v119 = v144;
          uint64_t v144 = *(float **)v144;
          size_t v120 = v146;
          if (!v144) {
            goto LABEL_183;
          }
        }
      }
      {
        operator new();
      }
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
      uint64_t v50 = v49;
      uint64_t v51 = v192;
      *(_OWORD *)(v49 + 49) = 0u;
      *(_OWORD *)(v49 + 8) = 0u;
      *(_OWORD *)(v49 + 24) = 0u;
      *(_OWORD *)(v49 + 40) = 0u;
      *(void *)(v49 + 56) = v51;
      *(void *)uint64_t v49 = &unk_1EF553D70;
      *(void *)(v49 + 80) = 0;
      *(void *)(v49 + 88) = 0;
      *(void *)(v49 + 72) = 0;
      if (v51)
      {
        *(void *)(v49 + 88) = v51;
        {
          operator new();
        }
        uint64_t v52 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 8 * v51, 8);
        *(void *)(v50 + 72) = v52;
        *(unsigned char *)(v50 + 64) = 1;
        size_t v53 = 8 * *(void *)(v50 + 88);
      }
      else
      {
        size_t v53 = 0;
        uint64_t v52 = 0;
      }
      *(void *)uint64_t v50 = &unk_1EF53A9A0;
      v193[0] = (void (***)(void))v50;
      *(unsigned char *)(v50 + 96) = v23;
      *(_DWORD *)(v50 + 100) = v42;
      memcpy(v52, v14, v53);
      unint64_t v60 = std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(a4, (md::TrafficBatchKey *)&v188, (uint64_t)&v188);
      uint64_t v61 = v60;
      uint64_t v62 = (uint64_t *)*((void *)v60 + 7);
      unint64_t v63 = *((void *)v60 + 8);
      if ((unint64_t)v62 < v63)
      {
        if (v62)
        {
          v193[0] = 0;
          uint64_t *v62 = v50;
        }
        uint64_t v64 = v62 + 1;
LABEL_95:
        *((void *)v61 + 7) = v64;
        unint64_t v103 = v193[0];
        v193[0] = 0;
        if (v103)
        {
          (**v103)(v103);
          {
            operator new();
          }
          (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v103, 104);
        }
        goto LABEL_238;
      }
      uint64_t v65 = *((void *)v60 + 6);
      uint64_t v66 = ((uint64_t)v62 - v65) >> 3;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61) {
        abort();
      }
      uint64_t v68 = v63 - v65;
      if (v68 >> 2 > v67) {
        unint64_t v67 = v68 >> 2;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v69 = v67;
      }
      if (v69)
      {
        uint64_t v70 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v60 + 9) + 16))(*((void *)v60 + 9), 8 * v69, 8);
        uint64_t v71 = (uint64_t *)(v70 + 8 * v66);
        uint64_t v72 = v70 + 8 * v69;
        if (v70)
        {
          v193[0] = 0;
          uint64_t *v71 = v50;
        }
      }
      else
      {
        uint64_t v72 = 0;
        uint64_t v71 = (uint64_t *)(8 * v66);
      }
      uint64_t v64 = v71 + 1;
      long long v93 = (char *)*((void *)v61 + 6);
      float32x2_t v94 = (char *)*((void *)v61 + 7);
      if (v94 == v93)
      {
        *((void *)v61 + 6) = v71;
        *((void *)v61 + 7) = v64;
        uint64_t v100 = *((void *)v61 + 8);
        *((void *)v61 + 8) = v72;
        goto LABEL_93;
      }
      unint64_t v95 = v94 - v93 - 8;
      if (v95 > 0x57
        && ((unint64_t v96 = (v93 - v94 + 7) & 0xFFFFFFFFFFFFFFF8, &v94[v96] >= (char *)v71) || (char *)v71 + v96 >= v94))
      {
        uint64_t v138 = (v95 >> 3) + 1;
        v97 = &v94[-8 * (v138 & 0x3FFFFFFFFFFFFFFCLL)];
        int v139 = v71 - 2;
        int v140 = v94 - 32;
        uint64_t v141 = v138 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v143 = *(_OWORD *)v140;
          long long v142 = *((_OWORD *)v140 + 1);
          *(_OWORD *)int v140 = 0uLL;
          *((_OWORD *)v140 + 1) = 0uLL;
          v140 -= 32;
          *((_OWORD *)v139 - 1) = v143;
          *(_OWORD *)int v139 = v142;
          v139 -= 4;
          v141 -= 4;
        }
        while (v141);
        v71 -= v138 & 0x3FFFFFFFFFFFFFFCLL;
        if (v138 == (v138 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_85:
          float32x2_t v94 = (char *)*((void *)v61 + 6);
          uint64_t v99 = (char *)*((void *)v61 + 7);
          *((void *)v61 + 6) = v71;
          *((void *)v61 + 7) = v64;
          uint64_t v100 = *((void *)v61 + 8);
          *((void *)v61 + 8) = v72;
          while (v99 != v94)
          {
            uint64_t v102 = (void (***)(void))*((void *)v99 - 1);
            v99 -= 8;
            unint64_t v101 = v102;
            *(void *)uint64_t v99 = 0;
            if (v102)
            {
              (**v101)(v101);
              {
                operator new();
              }
              (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v101, 104);
            }
          }
LABEL_93:
          if (v94) {
            (*(void (**)(void, char *, uint64_t))(**((void **)v61 + 9) + 40))(*((void *)v61 + 9), v94, v100 - (void)v94);
          }
          goto LABEL_95;
        }
      }
      else
      {
        v97 = (char *)*((void *)v61 + 7);
      }
      do
      {
        uint64_t v98 = *((void *)v97 - 1);
        v97 -= 8;
        *(void *)v97 = 0;
        *--uint64_t v71 = v98;
      }
      while (v97 != v93);
      goto LABEL_85;
    }
  }
}

void sub_1A1E4BFBC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](v1 - 112);
  std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100]((void (****)(void))(v1 - 160));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 152);
  _Unwind_Resume(a1);
}

uint64_t geo::dpSimplify<gm::Matrix<float,2,1>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = result;
  __asm { FMOV            V9.2S, #1.0 }
  while (1)
  {
    uint64_t v14 = a2 + 1;
    if (a2 + 1 >= a3) {
      break;
    }
    float32x2_t v15 = *(float32x2_t *)(v8 + 8 * a2);
    float32x2_t v16 = vsub_f32(*(float32x2_t *)(v8 + 8 * a3), v15);
    float32x2_t v17 = vmul_f32(v16, v16);
    uint64_t v18 = 0;
    if (vaddv_f32(v17) <= 1.0e-15)
    {
      float v25 = 0.0;
      do
      {
        float32x2_t v26 = vsub_f32(*(float32x2_t *)(v8 + 8 * v14), v15);
        v26.f32[0] = vaddv_f32(vmul_f32(v26, v26));
        float v24 = fmaxf(v26.f32[0], v25);
        if (v26.f32[0] > v25) {
          uint64_t v18 = v14;
        }
        ++v14;
        float v25 = v24;
      }
      while (a3 != v14);
    }
    else
    {
      float32x2_t v19 = vdiv_f32(_D9, vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17));
      float v20 = 0.0;
      do
      {
        float32x2_t v21 = *(float32x2_t *)(v8 + 8 * v14);
        float32x2_t v22 = vmul_f32(vsub_f32(v21, v15), v16);
        float32x2_t v23 = vsub_f32(v21, vmla_n_f32(v15, v16, fminf(fmaxf(vmul_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22), v19).f32[0], 0.0), 1.0)));
        v22.f32[0] = vaddv_f32(vmul_f32(v23, v23));
        float v24 = fmaxf(v22.f32[0], v20);
        if (v22.f32[0] > v20) {
          uint64_t v18 = v14;
        }
        ++v14;
        float v20 = v24;
      }
      while (a3 != v14);
    }
    if (v24 <= 0.00000023842) {
      break;
    }
    __n128 result = geo::dpSimplify<gm::Matrix<float,2,1>>(v8);
    int8x16_t v27 = (_DWORD *)(v8 + 8 * v18);
    uint64_t v28 = (*a5)++;
    float32x4_t v29 = (_DWORD *)(a4 + 8 * v28);
    *float32x4_t v29 = *v27;
    v29[1] = v27[1];
    a2 = v18;
  }
  return result;
}

float *std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(uint64_t *a1, md::TrafficBatchKey *this, uint64_t a3)
{
  unint64_t v7 = md::TrafficBatchKey::hash(this);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v7;
    }
    size_t v12 = *(float ***)(*a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = *(void *)this;
        float v15 = *((float *)this + 4);
        int v16 = *((unsigned __int8 *)this + 20);
        int v17 = *((_DWORD *)this + 6);
        if (v11 < 2)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v13 + 1);
            if (v19 == v7)
            {
              if (*((void *)v13 + 2) == v14
                && v13[8] == v15
                && *((unsigned __int8 *)v13 + 36) == v16
                && *((_DWORD *)v13 + 10) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v9 - 1)) != v3)
            {
              goto LABEL_29;
            }
            unint64_t v13 = *(float **)v13;
            if (!v13) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v13 + 1);
          if (v18 == v7)
          {
            if (*((void *)v13 + 2) == v14
              && v13[8] == v15
              && *((unsigned __int8 *)v13 + 36) == v16
              && *((_DWORD *)v13 + 10) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v9) {
              v18 %= v9;
            }
            if (v18 != v3) {
              break;
            }
          }
          unint64_t v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_29:
  float v20 = (float **)(a1 + 2);
  float32x2_t v21 = (float *)operator new(0x50uLL);
  unint64_t v13 = v21;
  *(void *)float32x2_t v21 = 0;
  *((void *)v21 + 1) = v8;
  uint64_t v22 = *(void *)(a3 + 8);
  *((void *)v21 + 2) = *(void *)a3;
  *((void *)v21 + 3) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v21 + 4) = *(void *)(a3 + 16);
  v21[10] = *(float *)(a3 + 24);
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 6) = 0;
  {
    operator new();
  }
  *((void *)v13 + 9) = mdm::Allocator::instance(void)::alloc;
  float v23 = (float)(unint64_t)(a1[3] + 1);
  float v24 = *((float *)a1 + 8);
  if (!v9 || (float)(v24 * (float)v9) < v23)
  {
    BOOL v25 = 1;
    if (v9 >= 3) {
      BOOL v25 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v9);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = a1[1];
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_69;
      }
      unint64_t v39 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v9)
      {
        unint64_t v9 = a1[1];
LABEL_69:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v8;
        }
        goto LABEL_82;
      }
      if (!prime)
      {
        uint64_t v49 = (void *)*a1;
        *a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
        goto LABEL_69;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    float32x4_t v29 = operator new(8 * prime);
    float32x4_t v30 = (void *)*a1;
    *a1 = (uint64_t)v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v31++) = 0;
    while (prime != v31);
    float32x4_t v32 = *v20;
    if (!*v20)
    {
LABEL_68:
      unint64_t v9 = prime;
      goto LABEL_69;
    }
    size_t v33 = *((void *)v32 + 1);
    size_t v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v35 = v33 & v34;
      *(void *)(*a1 + 8 * v35) = v20;
      for (uint64_t i = *(float **)v32; *(void *)v32; uint64_t i = *(float **)v32)
      {
        size_t v37 = *((void *)i + 1) & v34;
        if (v37 == v35)
        {
          float32x4_t v32 = i;
        }
        else if (*(void *)(*a1 + 8 * v37))
        {
          *(void *)float32x4_t v32 = *(void *)i;
          uint64_t v38 = 8 * v37;
          *(void *)uint64_t i = **(void **)(*a1 + v38);
          **(void **)(*a1 + v38) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v37) = v32;
          float32x4_t v32 = i;
          size_t v35 = v37;
        }
      }
      goto LABEL_68;
    }
    if (v33 >= prime) {
      v33 %= prime;
    }
    *(void *)(*a1 + 8 * v33) = v20;
    BOOL v42 = *(float **)v32;
    if (!*(void *)v32) {
      goto LABEL_68;
    }
    while (1)
    {
      size_t v44 = *((void *)v42 + 1);
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v33)
      {
        if (!*(void *)(*a1 + 8 * v44))
        {
          *(void *)(*a1 + 8 * v44) = v32;
          goto LABEL_73;
        }
        *(void *)float32x4_t v32 = *(void *)v42;
        uint64_t v43 = 8 * v44;
        *(void *)BOOL v42 = **(void **)(*a1 + v43);
        **(void **)(*a1 + v43) = v42;
        BOOL v42 = v32;
      }
      size_t v44 = v33;
LABEL_73:
      float32x4_t v32 = v42;
      BOOL v42 = *(float **)v42;
      size_t v33 = v44;
      if (!v42) {
        goto LABEL_68;
      }
    }
  }
LABEL_82:
  uint64_t v45 = *a1;
  uint64_t v46 = *(float ***)(*a1 + 8 * v3);
  if (v46)
  {
    *(void *)unint64_t v13 = *v46;
LABEL_90:
    *uint64_t v46 = v13;
    goto LABEL_91;
  }
  *(void *)unint64_t v13 = *v20;
  _DWORD *v20 = v13;
  *(void *)(v45 + 8 * v3) = v20;
  if (*(void *)v13)
  {
    unint64_t v47 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v47 >= v9) {
        v47 %= v9;
      }
    }
    else
    {
      v47 &= v9 - 1;
    }
    uint64_t v46 = (float **)(*a1 + 8 * v47);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v13;
}

void sub_1A1E4C700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void (****std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(void)))(void)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    unint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      unint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v5) {
        operator new();
      }
    }
    (*(void (**)(void, void (***)(void), uint64_t))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), v2, 104);
  }
  return a1;
}

float *std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(uint64_t *a1, md::TrafficBatchKey *this, uint64_t a3)
{
  unint64_t v7 = md::TrafficBatchKey::hash(this);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v7;
    }
    size_t v12 = *(float ***)(*a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = *(void *)this;
        float v15 = *((float *)this + 4);
        int v16 = *((unsigned __int8 *)this + 20);
        int v17 = *((_DWORD *)this + 6);
        if (v11 < 2)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v13 + 1);
            if (v19 == v7)
            {
              if (*((void *)v13 + 2) == v14
                && v13[8] == v15
                && *((unsigned __int8 *)v13 + 36) == v16
                && *((_DWORD *)v13 + 10) == v17)
              {
                return v13;
              }
            }
            else if ((v19 & (v9 - 1)) != v3)
            {
              goto LABEL_29;
            }
            unint64_t v13 = *(float **)v13;
            if (!v13) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v13 + 1);
          if (v18 == v7)
          {
            if (*((void *)v13 + 2) == v14
              && v13[8] == v15
              && *((unsigned __int8 *)v13 + 36) == v16
              && *((_DWORD *)v13 + 10) == v17)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v9) {
              v18 %= v9;
            }
            if (v18 != v3) {
              break;
            }
          }
          unint64_t v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_29:
  float v20 = (float **)(a1 + 2);
  float32x2_t v21 = (float *)operator new(0x50uLL);
  unint64_t v13 = v21;
  *(void *)float32x2_t v21 = 0;
  *((void *)v21 + 1) = v8;
  uint64_t v22 = *(void *)(a3 + 8);
  *((void *)v21 + 2) = *(void *)a3;
  *((void *)v21 + 3) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v21 + 4) = *(void *)(a3 + 16);
  v21[10] = *(float *)(a3 + 24);
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 6) = 0;
  {
    operator new();
  }
  *((void *)v13 + 9) = mdm::Allocator::instance(void)::alloc;
  float v23 = (float)(unint64_t)(a1[3] + 1);
  float v24 = *((float *)a1 + 8);
  if (!v9 || (float)(v24 * (float)v9) < v23)
  {
    BOOL v25 = 1;
    if (v9 >= 3) {
      BOOL v25 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v9);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = a1[1];
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_69;
      }
      unint64_t v39 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v9)
      {
        unint64_t v9 = a1[1];
LABEL_69:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v8;
        }
        goto LABEL_82;
      }
      if (!prime)
      {
        uint64_t v49 = (void *)*a1;
        *a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
        goto LABEL_69;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    float32x4_t v29 = operator new(8 * prime);
    float32x4_t v30 = (void *)*a1;
    *a1 = (uint64_t)v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v31++) = 0;
    while (prime != v31);
    float32x4_t v32 = *v20;
    if (!*v20)
    {
LABEL_68:
      unint64_t v9 = prime;
      goto LABEL_69;
    }
    size_t v33 = *((void *)v32 + 1);
    size_t v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v35 = v33 & v34;
      *(void *)(*a1 + 8 * v35) = v20;
      for (uint64_t i = *(float **)v32; *(void *)v32; uint64_t i = *(float **)v32)
      {
        size_t v37 = *((void *)i + 1) & v34;
        if (v37 == v35)
        {
          float32x4_t v32 = i;
        }
        else if (*(void *)(*a1 + 8 * v37))
        {
          *(void *)float32x4_t v32 = *(void *)i;
          uint64_t v38 = 8 * v37;
          *(void *)uint64_t i = **(void **)(*a1 + v38);
          **(void **)(*a1 + v38) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v37) = v32;
          float32x4_t v32 = i;
          size_t v35 = v37;
        }
      }
      goto LABEL_68;
    }
    if (v33 >= prime) {
      v33 %= prime;
    }
    *(void *)(*a1 + 8 * v33) = v20;
    BOOL v42 = *(float **)v32;
    if (!*(void *)v32) {
      goto LABEL_68;
    }
    while (1)
    {
      size_t v44 = *((void *)v42 + 1);
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v33)
      {
        if (!*(void *)(*a1 + 8 * v44))
        {
          *(void *)(*a1 + 8 * v44) = v32;
          goto LABEL_73;
        }
        *(void *)float32x4_t v32 = *(void *)v42;
        uint64_t v43 = 8 * v44;
        *(void *)BOOL v42 = **(void **)(*a1 + v43);
        **(void **)(*a1 + v43) = v42;
        BOOL v42 = v32;
      }
      size_t v44 = v33;
LABEL_73:
      float32x4_t v32 = v42;
      BOOL v42 = *(float **)v42;
      size_t v33 = v44;
      if (!v42) {
        goto LABEL_68;
      }
    }
  }
LABEL_82:
  uint64_t v45 = *a1;
  uint64_t v46 = *(float ***)(*a1 + 8 * v3);
  if (v46)
  {
    *(void *)unint64_t v13 = *v46;
LABEL_90:
    *uint64_t v46 = v13;
    goto LABEL_91;
  }
  *(void *)unint64_t v13 = *v20;
  _DWORD *v20 = v13;
  *(void *)(v45 + 8 * v3) = v20;
  if (*(void *)v13)
  {
    unint64_t v47 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v47 >= v9) {
        v47 %= v9;
      }
    }
    else
    {
      v47 &= v9 - 1;
    }
    uint64_t v46 = (float **)(*a1 + 8 * v47);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v13;
}

void sub_1A1E4CD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void md::CasedTrafficRibbon::~CasedTrafficRibbon(md::CasedTrafficRibbon *this)
{
  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  float *v2;
  int v3;

  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
}

void md::SolidTrafficRibbon::~SolidTrafficRibbon(md::SolidTrafficRibbon *this)
{
  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  float *v2;
  int v3;

  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
}

void md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,2,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553D70;
  if (*(unsigned char *)(a1 + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *(void *)(a1 + 72), 0);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,2,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553D70;
  if (*(unsigned char *)(a1 + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *(void *)(a1 + 72), 0);
  }
  return a1;
}

void md::TrafficRibbon::~TrafficRibbon(md::TrafficRibbon *this)
{
  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  float *v2;
  int v3;

  *(void *)this = &unk_1EF553D70;
  if (*((unsigned char *)this + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
}

void md::TrafficAccum::flushToRibbonCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 120))
  {
    unint64_t v7 = *(void *)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    if (*(void *)a1 != v6)
    {
      size_t v12 = v6 - v7;
      unint64_t v13 = (uint64_t)(v6 - v7) >> 3;
      unint64_t v14 = v13 + ((uint64_t)(v6 - v7) >> 2);
      size_t v15 = 4 * v14;
      if (4 * v14 > 0x2000)
      {
        int v17 = (float *)malloc_type_malloc(4 * v14, 0x10000403E1C8BA9uLL);
        int v16 = v17;
        if (!v17) {
          return;
        }
      }
      else
      {
        MEMORY[0x1F4188790](a1);
        int v16 = (float *)((char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v16, v15);
      }
      uint64_t v113 = a2;
      unint64_t v114 = (char *)(v13 - 1);
      if (v13 <= 1) {
        unint64_t v21 = 1;
      }
      else {
        unint64_t v21 = v13;
      }
      if (v21 > 0x17)
      {
        unint64_t v22 = 0;
        BOOL v23 = !is_mul_ok(v21 - 1, 0xCuLL);
        uint64_t v24 = 3 * (v21 - 1);
        unint64_t v25 = (unint64_t)&v16[v24 + 1];
        unint64_t v26 = (unint64_t)&v16[v24 + 2];
        unint64_t v27 = (char *)&v16[v24];
        BOOL v29 = v26 >= (unint64_t)(v16 + 2) && v25 >= (unint64_t)(v16 + 1) && v27 >= (char *)v16;
        if (!v29 || v23) {
          goto LABEL_25;
        }
        if ((unint64_t)v16 >= v7 + 8 * v21 || v7 >= (unint64_t)&v16[3 * v21])
        {
          unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
          float32x4_t v30 = (const float *)(v7 + 32);
          long long v31 = 0uLL;
          float32x4_t v32 = v16;
          unint64_t v33 = v21 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            size_t v34 = v30 - 8;
            float32x4x2_t v125 = vld2q_f32(v34);
            *(float32x4x2_t *)(&v18 - 2) = vld2q_f32(v30);
            long long v19 = 0uLL;
            size_t v35 = v32 + 24;
            vst3q_f32(v32, *(float32x4x3_t *)(&v31 - 2));
            float32x4_t v36 = v32 + 12;
            vst3q_f32(v36, *(float32x4x3_t *)(&v18 - 2));
            v30 += 16;
            float32x4_t v32 = v35;
            v33 -= 8;
          }
          while (v33);
          if (v21 == v22) {
            goto LABEL_27;
          }
          goto LABEL_25;
        }
      }
      unint64_t v22 = 0;
LABEL_25:
      unint64_t v37 = v21 - v22;
      uint64_t v38 = (char *)&v16[3 * v22 + 2];
      unint64_t v39 = (uint64_t *)(v7 + 8 * v22);
      do
      {
        uint64_t v40 = *v39++;
        *((void *)v38 - 1) = v40;
        *(_DWORD *)uint64_t v38 = 0;
        v38 += 12;
        --v37;
      }
      while (v37);
LABEL_27:
      BOOL v41 = *(void *)(a1 + 32) == *(void *)(a1 + 24);
      float v116 = v16;
      size_t v115 = v15;
      if (!v41)
      {
        unint64_t v110 = v12;
        unint64_t v111 = v13;
        uint64_t v42 = 0;
        char v43 = 0;
        unint64_t v112 = v7;
        size_t v44 = (float *)(v7 + 4);
        uint64_t v45 = 2;
        do
        {
          uint64_t v48 = *(void *)(a1 + 24);
          long long v49 = *(_OWORD *)(a3 + 16);
          v123[0] = *(_OWORD *)a3;
          v123[1] = v49;
          uint64_t v50 = *a4;
          uint64_t v51 = (std::__shared_weak_count *)a4[1];
          v122[1] = *a4;
          v122[2] = v51;
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v52 = md::drape(v123, v50, v51, a5, *(v44 - 1), *v44, *(float *)(v48 + 4 * v42), *(double *)(a1 + 216), v18, *(double *)&v19, v20);
          v116[v45] = v52;
          if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
          double v46 = v116[v45];
          BOOL v47 = v46 <= -3.40282337e38;
          if (v46 >= 3.40282337e38) {
            BOOL v47 = 1;
          }
          v43 |= v47;
          ++v42;
          v45 += 3;
          v44 += 2;
        }
        while (v21 != v42);
        char v53 = v43 & (*(unsigned __int8 *)(a5 + 1) > 0xDu);
        size_t v15 = v115;
        int v16 = v116;
        unint64_t v7 = v112;
        unint64_t v13 = v111;
        size_t v12 = v110;
        if (v53)
        {
          if (*(unsigned char *)(a3 + 24))
          {
            if (v110 <= 8)
            {
              MEMORY[0x1F4188790](v17);
              uint64_t v66 = (unint64_t *)((char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
              bzero(v66, v12);
LABEL_66:
              uint64_t v78 = 0;
              do
              {
                v66[v78] = v78;
                ++v78;
              }
              while (v13 != v78);
              v122[0] = v13;
              BOOL v77 = 1;
              size_t v79 = v15;
              if (v15 > 0x2000)
              {
LABEL_69:
                unint64_t v114 = (char *)malloc_type_malloc(v79, 0x10000403E1C8BA9uLL);
                if (!v114)
                {
LABEL_98:
                  if (!v77) {
                    free(v66);
                  }
                  goto LABEL_100;
                }
LABEL_74:
                unint64_t v112 = v79;
                if (v13)
                {
                  uint64_t v82 = 0;
                  uint64_t v83 = v114 + 8;
                  do
                  {
                    uint64_t v84 = (char *)&v16[3 * v66[v82]];
                    *(v83 - 2) = *(_DWORD *)v84;
                    *(v83 - 1) = *((_DWORD *)v84 + 1);
                    *uint64_t v83 = *((_DWORD *)v84 + 2);
                    v83 += 3;
                    ++v82;
                  }
                  while (v13 != v82);
                  if (v13 > 5) {
                    goto LABEL_86;
                  }
                  v85.i64[0] = *(void *)(v7 + 8 * *v66);
                  v86.i64[0] = v85.i64[0];
                  v86.i64[1] = v85.i64[0];
                  *(int32x2_t *)v87.f32 = vdup_n_s32(0x7F7FFFFFu);
                  v87.i64[1] = v85.i64[0];
                  v85.i64[1] = 0x80000000800000;
                  float32x4_t v88 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v87, v85), v86, (int8x16_t)xmmword_1A28FC750);
                  if (v13 != 1)
                  {
                    v89.i64[0] = *(void *)(v7 + 8 * v66[1]);
                    v90.i64[0] = v89.i64[0];
                    v90.i64[1] = v89.i64[0];
                    v91.i64[0] = v88.i64[0];
                    v91.i64[1] = v89.i64[0];
                    v89.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
                    float32x4_t v88 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v91, v89), v90, (int8x16_t)v88);
                    if (v13 != 2)
                    {
                      v92.i64[0] = *(void *)(v7 + 8 * v66[2]);
                      v93.i64[0] = v92.i64[0];
                      v93.i64[1] = v92.i64[0];
                      v94.i64[0] = v88.i64[0];
                      v94.i64[1] = v92.i64[0];
                      v92.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
                      float32x4_t v88 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v94, v92), v93, (int8x16_t)v88);
                      if (v13 != 3)
                      {
                        v95.i64[0] = *(void *)(v7 + 8 * v66[3]);
                        v96.i64[0] = v95.i64[0];
                        v96.i64[1] = v95.i64[0];
                        v97.i64[0] = v88.i64[0];
                        v97.i64[1] = v95.i64[0];
                        v95.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
                        float32x4_t v88 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, v95), v96, (int8x16_t)v88);
                        if (v13 != 4)
                        {
                          v98.i64[0] = *(void *)(v7 + 8 * v66[4]);
                          v99.i64[0] = v98.i64[0];
                          v99.i64[1] = v98.i64[0];
                          v100.i64[0] = v88.i64[0];
                          v100.i64[1] = v98.i64[0];
                          v98.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
                          float32x4_t v88 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v100, v98), v99, (int8x16_t)v88);
                        }
                      }
                    }
                  }
                }
                else
                {
                  float32x4_t v88 = (float32x4_t)xmmword_1A28FC750;
                }
                if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32(v88, (float32x4_t)xmmword_1A28FCDA0))) & 1) == 0
                  && vaddq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))), (float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 3)).f32[0] <= 0.0019531)
                {
                  if (v112 > 0x2000) {
                    free(v114);
                  }
                  goto LABEL_98;
                }
LABEL_86:
                long long v117 = 0u;
                long long v118 = 0u;
                uint64_t v101 = *(void *)(a1 + 160);
                uint64_t v102 = *(void *)(a1 + 168);
                if (v102)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v102 + 8), 1uLL, memory_order_relaxed);
                  *(void *)&long long v118 = v101;
                  *((void *)&v118 + 1) = v102;
                }
                else
                {
                  *(void *)&long long v118 = *(void *)(a1 + 160);
                }
                LODWORD(v111) = v77;
                uint64_t v104 = *(void *)(a1 + 144);
                uint64_t v103 = *(void *)(a1 + 152);
                if (v103) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
                }
                *(void *)&long long v117 = v104;
                *((void *)&v117 + 1) = v103;
                char v105 = *(unsigned char *)(a1 + 96);
                int v106 = *(_DWORD *)(a1 + 196);
                char v121 = *(unsigned char *)(a1 + 224);
                char v119 = v105;
                int v120 = v106;
                {
                  operator new();
                }
                uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 128, 8);
                uint64_t v108 = v107;
                uint64_t v109 = v122[0];
                *(_OWORD *)(v107 + 49) = 0u;
                *(_OWORD *)(v107 + 8) = 0u;
                *(_OWORD *)(v107 + 24) = 0u;
                *(_OWORD *)(v107 + 40) = 0u;
                *(void *)(v107 + 56) = v109;
                *(void *)uint64_t v107 = &unk_1EF553D90;
                *(void *)(v107 + 80) = 0;
                *(void *)(v107 + 88) = 0;
                *(void *)(v107 + 72) = 0;
                if (v109)
                {
                  *(void *)(v107 + 88) = v109;
                  {
                    operator new();
                  }
                  *(void *)(v108 + 72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 12 * v109, 8);
                  *(unsigned char *)(v108 + 64) = 1;
                }
                *(void *)uint64_t v108 = &unk_1EF53D4E0;
                *(void *)(v108 + 96) = 0;
                *(void *)(v108 + 104) = 0;
                *(void *)(v108 + 112) = 0;
                operator new[]();
              }
LABEL_73:
              MEMORY[0x1F4188790](v67);
              unint64_t v114 = (char *)&v110 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v114, v79);
              goto LABEL_74;
            }
            uint64_t v54 = 2;
            uint64_t v55 = v116 + 5;
            float v56 = *v116;
            if (v111 > 2) {
              uint64_t v54 = v111;
            }
            uint64_t v57 = v54 - 1;
            double v58 = 1.0 / *(double *)(a1 + 216);
            do
            {
              float v59 = *(v55 - 3);
              float v60 = *v55 - v59;
              double v61 = v56;
              float v56 = *(v55 - 2);
              float v62 = sqrt((v56 - v61) * (v56 - v61) + (*(v55 - 1) - *(v55 - 4)) * (*(v55 - 1) - *(v55 - 4)));
              float v63 = v60 / v62;
              BOOL v64 = v63 <= 0.0 || v63 <= 0.7;
              if (!v64 && v58 * v60 > 4.0) {
                *uint64_t v55 = v59;
              }
              v55 += 3;
              --v57;
            }
            while (v57);
            if ((uint64_t)v12 >= 9)
            {
              uint64_t v68 = (float32x2_t *)&v16[3 * v13 - 3];
              uint64_t v69 = (uint64_t)v114;
              do
              {
                float v70 = v68[1].f32[0];
                float v71 = v68[-1].f32[1] - v70;
                double v72 = v58 * v71;
                float64x2_t v73 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v68 - 12)), vcvtq_f64_f32(*v68));
                *(float *)v73.f64 = sqrt(vaddvq_f64(vmulq_f64(v73, v73)));
                float v74 = v71 / *(float *)v73.f64;
                if (v74 > 0.0 && v74 > 0.7 && v72 > 4.0) {
                  v68[-1].f32[1] = v70;
                }
                uint64_t v68 = (float32x2_t *)((char *)v68 - 12);
                BOOL v64 = v69-- <= 1;
              }
              while (!v64);
            }
          }
        }
      }
      BOOL v77 = v12 <= 0x2000;
      if (v12 > 0x2000)
      {
        uint64_t v66 = malloc_type_malloc(v12, 0x100004000313F17uLL);
        if (!v66)
        {
LABEL_100:
          if (v15 > 0x2000) {
            free(v16);
          }
          return;
        }
      }
      else
      {
        MEMORY[0x1F4188790](v17);
        uint64_t v66 = (unint64_t *)((char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v66, v12);
        if (v12 <= 0x17) {
          goto LABEL_66;
        }
      }
      v122[0] = 1;
      *uint64_t v66 = 0;
      uint64_t v80 = v114;
      uint64_t v67 = geo::dpSimplifyViaIndexes<gm::Matrix<float,3,1>,unsigned long>((uint64_t)v16, 0, (unint64_t)v114, (uint64_t)v66, v122);
      uint64_t v81 = v122[0];
      unint64_t v13 = ++v122[0];
      v66[v81] = v80;
      size_t v79 = 12 * (v81 + 1);
      if (v79 > 0x2000) {
        goto LABEL_69;
      }
      goto LABEL_73;
    }
  }
}

void sub_1A1E4EC44(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](v1 - 136);
  std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>::~unique_ptr[abi:nn180100]((void (****)(void))(v1 - 264));
  md::DaVinciTrafficBatchKey::~DaVinciTrafficBatchKey((md::DaVinciTrafficBatchKey *)(v1 - 256));
  _Unwind_Resume(a1);
}

void sub_1A1E4EC8C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<float,3,1>,unsigned long>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = result;
  unint64_t v9 = (float *)(result + 12 * a3);
  uint64_t v10 = result + 20;
  while (1)
  {
    uint64_t v11 = a2 + 1;
    if (a2 + 1 >= a3) {
      break;
    }
    size_t v12 = (float *)(v8 + 12 * a2);
    float v13 = *v12;
    float v14 = v12[1];
    float v15 = *v9 - *v12;
    float v16 = v9[1] - v14;
    float v17 = v12[2];
    float v18 = v9[2] - v17;
    float v19 = (float)((float)(v15 * v15) + (float)(v16 * v16)) + (float)(v18 * v18);
    uint64_t v20 = 0;
    unint64_t v21 = (float *)(v10 + 12 * a2);
    if (v19 <= 1.0e-15)
    {
      float v30 = 0.0;
      do
      {
        float v31 = *(v21 - 2);
        float v32 = *(v21 - 1);
        float v33 = *v21;
        v21 += 3;
        float v34 = (float)((float)((float)(v31 - v13) * (float)(v31 - v13)) + (float)((float)(v32 - v14) * (float)(v32 - v14)))
            + (float)((float)(v33 - v17) * (float)(v33 - v17));
        float v29 = fmaxf(v34, v30);
        if (v34 > v30) {
          uint64_t v20 = v11;
        }
        ++v11;
        float v30 = v29;
      }
      while (a3 != v11);
    }
    else
    {
      float v22 = 0.0;
      float v23 = 1.0 / v19;
      do
      {
        float v24 = *(v21 - 2);
        float v25 = *(v21 - 1);
        float v26 = *v21;
        v21 += 3;
        float v27 = fminf(fmaxf((float)((float)((float)((float)(v24 - v13) * v15) + (float)((float)(v25 - v14) * v16))+ (float)((float)(v26 - v17) * v18))* v23, 0.0), 1.0);
        float v28 = (float)((float)((float)(v24 - (float)(v13 + (float)(v27 * v15)))
                            * (float)(v24 - (float)(v13 + (float)(v27 * v15))))
                    + (float)((float)(v25 - (float)(v14 + (float)(v27 * v16)))
                            * (float)(v25 - (float)(v14 + (float)(v27 * v16)))))
            + (float)((float)(v26 - (float)(v17 + (float)(v27 * v18))) * (float)(v26 - (float)(v17 + (float)(v27 * v18))));
        float v29 = fmaxf(v28, v22);
        if (v28 > v22) {
          uint64_t v20 = v11;
        }
        ++v11;
        float v22 = v29;
      }
      while (a3 != v11);
    }
    if (v29 <= 0.00000023842) {
      break;
    }
    __n128 result = geo::dpSimplifyViaIndexes<gm::Matrix<float,3,1>,unsigned long>(v8);
    uint64_t v35 = (*a5)++;
    *(void *)(a4 + 8 * v35) = v20;
    a2 = v20;
  }
  return result;
}

void (****std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(void)))(void)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    int v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v5) {
        operator new();
      }
    }
    (*(void (**)(void, void (***)(void), uint64_t))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), v2, 128);
  }
  return a1;
}

void md::DaVinciTrafficBatchKey::~DaVinciTrafficBatchKey(md::DaVinciTrafficBatchKey *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t md::Ribbons::SmoothRibbon<gm::Matrix<float,3,1>>::~SmoothRibbon(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553D90;
  if (*(unsigned char *)(a1 + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *(void *)(a1 + 72), 0);
  }
  return a1;
}

void md::DaVinciTrafficRibbon::~DaVinciTrafficRibbon(md::DaVinciTrafficRibbon *this)
{
  md::DaVinciTrafficRibbon::~DaVinciTrafficRibbon(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  int v6;

  *(void *)this = &unk_1EF53D4E0;
  int v2 = *((void *)this + 12);
  if (v2) {
    MEMORY[0x1A6239250](v2, 0x1000C8000313F17);
  }
  int v3 = *((void *)this + 13);
  if (v3) {
    MEMORY[0x1A6239250](v3, 0x1000C8052888210);
  }
  int v4 = *((void *)this + 14);
  if (v4) {
    MEMORY[0x1A6239250](v4, 0x1000C8052888210);
  }
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    int v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v6) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *((void *)this + 9), 0);
  }
}

void md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,3,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553D90;
  if (*(unsigned char *)(a1 + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *(void *)(a1 + 72), 0);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t md::Ribbons::StandardModeRibbonUsingPositionType<gm::Matrix<float,3,1>>::~StandardModeRibbonUsingPositionType(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553D90;
  if (*(unsigned char *)(a1 + 64))
  {
    int v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *(void *)(a1 + 72), 0);
  }
  return a1;
}

void sub_1A1E4F584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKManifestTileGroupObserverProxy * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559CF8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKManifestTileGroupObserverProxy * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559CF8;

  return a1;
}

void geo::_retain_ptr<NSSet<NSNumber *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559D78;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSSet<NSNumber *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559D78;

  return a1;
}

void geo::_retain_ptr<VKCamera * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559F38;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKCamera * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559F38;

  return a1;
}

void geo::_retain_ptr<VKStateCaptureHandler * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5599F8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKStateCaptureHandler * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5599F8;

  return a1;
}

void geo::_retain_ptr<VKARWalkingCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559C58;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKARWalkingCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559C58;

  return a1;
}

void geo::_retain_ptr<VKMuninCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559A78;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKMuninCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559A78;

  return a1;
}

void sub_1A1E5018C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A1E50694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E50750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E50EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E50F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E50FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5103C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E510F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E511AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E512FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E513B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E515C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5166C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E517C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E519D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E51CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  size_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A1E51DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E522FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E52520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1E5266C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrIN2md11LabelMarkerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrIN2md11LabelMarkerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1A1E52864(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2 - 32);
  _Unwind_Resume(a1);
}

void sub_1A1E52944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E52B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1E52C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E52D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E52E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E52EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E52F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E530D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E532E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5342C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E534E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E53634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E536F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5383C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E53A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  *(void *)(v23 - 72) = v22;
  _Unwind_Resume(a1);
}

void sub_1A1E53BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c131_ZTSN3geo11_retain_ptrIU8__strongP15VKMuninJunctionNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE64c127_ZTSN3geo11_retain_ptrIU8__strongP11VKMuninRoadNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_1EF559418;

  *(void *)(a1 + 40) = &unk_1EF559638;
  uint64_t v2 = *(void **)(a1 + 48);
}

void __copy_helper_block_ea8_40c131_ZTSN3geo11_retain_ptrIU8__strongP15VKMuninJunctionNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE64c127_ZTSN3geo11_retain_ptrIU8__strongP11VKMuninRoadNS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(void *a1, uint64_t a2)
{
  a1[5] = &unk_1EF559638;
  a1[6] = 0;
  id v4 = *(id *)(a2 + 48);
  int v5 = (void *)a1[6];
  a1[6] = v4;

  a1[8] = &unk_1EF559418;
  a1[9] = 0;
  id v6 = *(id *)(a2 + 72);
  unint64_t v7 = (void *)a1[9];
  a1[9] = v6;
}

void geo::_retain_ptr<VKMuninRoad * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559418;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKMuninRoad * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559418;

  return a1;
}

void geo::_retain_ptr<VKMuninJunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559638;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKMuninJunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559638;

  return a1;
}

void sub_1A1E53F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E545F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E549E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E54FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E55138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E551CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E55258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E55344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E553EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5548C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5549C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E55550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E558BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1A1E559E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E55AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E55F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E56090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E56150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E561C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E56234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E562A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5640C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1A1E5653C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1A1E569C4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1A1E57868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E57C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E58250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      (*(void (**)(uint64_t))(*(void *)a1[4] + 40))(a1[4]);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  }
  return a1;
}

void sub_1A1E5865C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1E5869C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1A1E5902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1A1E59450(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1E5962C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1E597E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1E59C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E59EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5A558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5C290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a40);

  _Unwind_Resume(a1);
}

void sub_1A1E5C88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5C954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5D530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::unordered_map<std::string,double>::~unordered_map[abi:nn180100](v30 - 168);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,double>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      int v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_1A1E5DBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5DEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1172(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1173(uint64_t a1)
{
}

void sub_1A1E5E21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5E334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5E3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5E580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5E72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5E7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  size_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A1E5EC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5ED80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5EEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5EF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F5C8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1E5F760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5F9F0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void *std::function<void ()(md::LogicBase *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A1E5FBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1A1E5FDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5FEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5FF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E5FFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E60010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E60080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6022C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E60578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)VKMapView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *std::function<NSString * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(GEOResourceManifestManager *,GEOActiveTileGroup *,GEOActiveTileGroup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(GEOResourceManifestManager *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(GEOExperimentConfiguration *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A1E60838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E609A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E60B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E60C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6100C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E61084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E61174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E61234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E612F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E613B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E615B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1E61724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1E61738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A1E61804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E619E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E61BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E61CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v11) {

  }
  if (v10) {
  _Unwind_Resume(a1);
  }
}

void sub_1A1E622C4(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1A1E62494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6261C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6277C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E628FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1A1E63784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E638E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E63FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E64048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E64098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E640E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E64138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E644D4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v3 - 80);
  if (v5 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)(v3 - 104) + 32))(v3 - 104);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelCategoryFilter>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EF5598D8;
}

void geo::_retain_ptr<GEOPOICategoryFilter * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5598D8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOPOICategoryFilter * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5598D8;

  return a1;
}

void std::__shared_ptr_emplace<md::LabelCategoryFilter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelCategoryFilter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A1E6559C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E65610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E65684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6593C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E65B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E65C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKDebugTree * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5593F8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKDebugTree * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5593F8;

  return a1;
}

void sub_1A1E66134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A1E661E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E663A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E66474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E664C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E66524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E66664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E666D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E66944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E66AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E66BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1E67128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E679DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E680C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E681CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E682B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E68D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E69D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::function<void ()(NSDictionary *,gdc::DebugTreeNode &)>::~function((void *)(v9 - 208));

  _Unwind_Resume(a1);
}

void *std::function<void ()(NSDictionary *,gdc::DebugTreeNode &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A1E6A4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6AA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1E6AD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LandmarkTileData::~LandmarkTileData(md::LandmarkTileData *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v5 = *(void **)this;
    if (v4 != v3)
    {
      do
      {
        id v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)this;
    }
    *((void *)this + 1) = v3;
    operator delete(v5);
  }
}

void **std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 24;
      id v6 = v3 - 24;
      uint64_t v7 = v3 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        id v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1A1E6B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1E6B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1E6B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6B974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6BA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6BC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6C320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A1E6C36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6CE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  if (a23)
  {
    if (!atomic_fetch_add(&a23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1E6D2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

void sub_1A1E6D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }

  _Unwind_Resume(a1);
}

void sub_1A1E6D66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }

  _Unwind_Resume(a1);
}

void sub_1A1E6DB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

void sub_1A1E6DC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }

  _Unwind_Resume(a1);
}

void sub_1A1E6DEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1E6E660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6E888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1E6E970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A1E6EDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6EE9C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1E6F0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6F2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)VKMapCanvas;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A1E6F38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6F6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_1A1E6FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  gdc::ResourceStatusContainer::~ResourceStatusContainer((gdc::ResourceStatusContainer *)va);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va1);

  _Unwind_Resume(a1);
}

void std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*a1);
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2 != (void *)a1[7]) {
      free(v2);
    }
    operator delete(a1);
  }
}

void gdc::ResourceStatusContainer::~ResourceStatusContainer(gdc::ResourceStatusContainer *this)
{
  std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*((void **)this + 7));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = (void *)v2[3];
      if (v5 != (void *)v2[5]) {
        free(v5);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }
}

void sub_1A1E6FEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1E70210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,void *a24)
{
  float v26 = a24;
  if (a24)
  {
    do
    {
      float v27 = (void *)*v26;
      float v28 = (void *)v26[3];
      if (v28 != (void *)v26[5]) {
        free(v28);
      }
      operator delete(v26);
      float v26 = v27;
    }
    while (v27);
  }
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      id v6 = (void *)v2[3];
      if (v6 != (void *)v2[5]) {
        free(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3 != (void *)v2[5]) {
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<gdc::LayerDataRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gdc::LayerDataRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::TerrainMeshProviderLogic::runBeforeLayout(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v256 = *MEMORY[0x1E4F143B8];
  v252[0] = &unk_1EF51EE30;
  v252[1] = a2;
  v250[0] = &unk_1EF51EE78;
  v250[1] = a2;
  uint64_t v251 = v250;
  v255 = v254;
  v253 = v252;
  v254[0] = &unk_1EF51EE78;
  v254[1] = a2;
  std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::operator()((uint64_t)v252);
  if (v251 == v250)
  {
    (*(void (**)(void *))(v250[0] + 32))(v250);
  }
  else if (v251)
  {
    (*(void (**)(void *))(*v251 + 40))(v251);
  }
  if (v253 == v252)
  {
    (*(void (**)(void *))(v252[0] + 32))(v252);
    uint64_t v8 = a3[2];
    uint64_t v7 = a3[3];
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v253) {
      (*(void (**)(void *))(*v253 + 40))(v253);
    }
    uint64_t v8 = a3[2];
    uint64_t v7 = a3[3];
    if (!v8)
    {
LABEL_13:
      if (!v7 || !*(unsigned char *)(v7 + 56))
      {
        if (*(void *)(a1 + 192))
        {
          uint64_t v14 = *(void **)(a1 + 184);
          if (v14)
          {
            do
            {
              float v15 = (void *)*v14;
              operator delete(v14);
              uint64_t v14 = v15;
            }
            while (v15);
          }
          *(void *)(a1 + 184) = 0;
          uint64_t v16 = *(void *)(a1 + 176);
          if (v16)
          {
            for (uint64_t i = 0; i != v16; ++i)
              *(void *)(*(void *)(a1 + 168) + 8 * i) = 0;
          }
          *(void *)(a1 + 192) = 0;
        }
        if (*(void *)(a1 + 152))
        {
          float v18 = *(void **)(a1 + 144);
          if (v18)
          {
            do
            {
              float v19 = (void *)*v18;
              operator delete(v18);
              float v18 = v19;
            }
            while (v19);
          }
          *(void *)(a1 + 144) = 0;
          uint64_t v20 = *(void *)(a1 + 136);
          if (v20)
          {
            for (uint64_t j = 0; j != v20; ++j)
              *(void *)(*(void *)(a1 + 128) + 8 * j) = 0;
          }
          *(void *)(a1 + 152) = 0;
        }
        if (*(void *)(a4 + 32))
        {
          uint64_t v22 = *(void **)(a4 + 24);
          if (v22)
          {
            do
            {
              uint64_t v23 = (void *)*v22;
              operator delete(v22);
              uint64_t v22 = v23;
            }
            while (v23);
          }
          *(void *)(a4 + 24) = 0;
          uint64_t v24 = *(void *)(a4 + 16);
          if (v24)
          {
            for (uint64_t k = 0; k != v24; ++k)
              *(void *)(*(void *)(a4 + 8) + 8 * k) = 0;
          }
          *(void *)(a4 + 32) = 0;
        }
        if (*(void *)(a4 + 64))
        {
          float v26 = (uint64_t *)(a4 + 48);
          uint64_t v27 = *(void *)(a4 + 48);
          float v28 = *(uint64_t **)(a4 + 56);
          uint64_t v29 = *v28;
          *(void *)(v29 + 8) = *(void *)(v27 + 8);
          **(void **)(v27 + 8) = v29;
          *(void *)(a4 + 64) = 0;
          if (v28 != (uint64_t *)(a4 + 48))
          {
            do
            {
              uint64_t v30 = (uint64_t *)v28[1];
              float v31 = (std::__shared_weak_count *)v28[6];
              if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
              operator delete(v28);
              float v28 = v30;
            }
            while (v30 != v26);
          }
        }
        goto LABEL_387;
      }
      goto LABEL_15;
    }
  }
  char v9 = *(void **)(v8 + 160);
  if (v9[21] == v9[20] && v9[24] == v9[23]) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v10 = *(int8x8_t **)(a1 + 120);
  if (!v10) {
    goto LABEL_387;
  }
  int8x8_t v11 = v10[17];
  if (!*(void *)&v11) {
    goto LABEL_387;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = 43;
    if (*(void *)&v11 <= 0x2BuLL) {
      uint64_t v13 = 0x2Bu % *(void *)&v10[17];
    }
  }
  else
  {
    uint64_t v13 = (v11.i32[0] - 1) & 0x2BLL;
  }
  float v32 = (uint64_t *)a3[1];
  int v33 = *(_DWORD *)(*a3 + 88);
  int8x8_t v34 = v10[16];
  uint64_t v35 = *(uint64_t ***)(*(void *)&v34 + 8 * v13);
  if (!v35 || (float32x4_t v36 = *v35) == 0)
  {
LABEL_64:
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v39 = 77;
      if (*(void *)&v11 <= 0x4DuLL) {
        uint64_t v39 = 0x4Du % v11.u8[0];
      }
    }
    else
    {
      uint64_t v39 = (v11.i32[0] - 1) & 0x4DLL;
    }
    uint64_t v40 = *(uint64_t ***)(*(void *)&v34 + 8 * v39);
    if (!v40) {
      goto LABEL_387;
    }
    BOOL v41 = *v40;
    if (!v41) {
      goto LABEL_387;
    }
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v42 = *(void *)&v11 - 1;
      while (1)
      {
        uint64_t v44 = v41[1];
        if (v44 == 77)
        {
          if (*((_WORD *)v41 + 8) == 77) {
            goto LABEL_84;
          }
        }
        else if ((v44 & v42) != v39)
        {
          goto LABEL_387;
        }
        BOOL v41 = (uint64_t *)*v41;
        if (!v41) {
          goto LABEL_387;
        }
      }
    }
    while (1)
    {
      unint64_t v43 = v41[1];
      if (v43 == 77)
      {
        if (*((_WORD *)v41 + 8) == 77) {
          goto LABEL_84;
        }
      }
      else
      {
        if (v43 >= *(void *)&v11) {
          v43 %= *(void *)&v11;
        }
        if (v43 != v39) {
          goto LABEL_387;
        }
      }
      BOOL v41 = (uint64_t *)*v41;
      if (!v41) {
        goto LABEL_387;
      }
    }
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v38 = v36[1];
      if (v38 == 43)
      {
        if (*((_WORD *)v36 + 8) == 43) {
          goto LABEL_84;
        }
      }
      else if ((v38 & (*(void *)&v11 - 1)) != v13)
      {
        goto LABEL_64;
      }
      float32x4_t v36 = (uint64_t *)*v36;
      if (!v36) {
        goto LABEL_64;
      }
    }
  }
  while (1)
  {
    unint64_t v37 = v36[1];
    if (v37 == 43) {
      break;
    }
    if (v37 >= *(void *)&v11) {
      v37 %= *(void *)&v11;
    }
    if (v37 != v13) {
      goto LABEL_64;
    }
LABEL_54:
    float32x4_t v36 = (uint64_t *)*v36;
    if (!v36) {
      goto LABEL_64;
    }
  }
  if (*((_WORD *)v36 + 8) != 43) {
    goto LABEL_54;
  }
LABEL_84:
  double v46 = (void *)(a1 + 128);
  uint64_t v45 = *(void *)(a1 + 128);
  unsigned int v231 = v33 - 2;
  uint64_t v48 = *(void *)(a1 + 168);
  unint64_t v47 = *(void *)(a1 + 176);
  uint64_t v50 = (unsigned __int8 **)(a1 + 184);
  uint64_t v49 = *(void *)(a1 + 184);
  if ((v33 - 2) >= 3) {
    int v51 = 43;
  }
  else {
    int v51 = 77;
  }
  int v225 = v51;
  unint64_t v52 = *(void *)(a1 + 136);
  uint64_t v54 = (uint64_t ***)(a1 + 144);
  uint64_t v53 = *(void *)(a1 + 144);
  uint64_t v55 = *(void *)(a1 + 192);
  uint64_t v56 = *(void *)(a1 + 152);
  int v57 = *(_DWORD *)(a1 + 200);
  int v58 = *(_DWORD *)(a1 + 160);
  *(void *)(a1 + 168) = v45;
  *(void *)(a1 + 176) = v52;
  *double v46 = v48;
  *(void *)(a1 + 136) = v47;
  uint64_t *v50 = (unsigned __int8 *)v53;
  *(void *)(a1 + 144) = v49;
  *(void *)(a1 + 192) = v56;
  *(void *)(a1 + 152) = v55;
  *(_DWORD *)(a1 + 200) = v58;
  *(_DWORD *)(a1 + 160) = v57;
  if (v56)
  {
    unint64_t v59 = *(void *)(v53 + 8);
    if ((v52 & (v52 - 1)) != 0)
    {
      if (v59 >= v52) {
        v59 %= v52;
      }
    }
    else
    {
      v59 &= v52 - 1;
    }
    *(void *)(v45 + 8 * v59) = v50;
  }
  if (v55)
  {
    unint64_t v60 = (unint64_t)(*v54)[1];
    if ((v47 & (v47 - 1)) != 0)
    {
      if (v60 >= v47) {
        v60 %= v47;
      }
    }
    else
    {
      v60 &= v47 - 1;
    }
    *(void *)(*v46 + 8 * v60) = v54;
    double v61 = *v54;
    if (*v54)
    {
      do
      {
        float v62 = *v61;
        operator delete(v61);
        double v61 = (uint64_t **)v62;
      }
      while (v62);
      unint64_t v47 = *(void *)(a1 + 136);
    }
    *uint64_t v54 = 0;
    if (v47)
    {
      for (uint64_t m = 0; m != v47; ++m)
        *(void *)(*v46 + 8 * m) = 0;
    }
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v64 = *v32;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  uint64_t v65 = *(_WORD **)(v64 + 48);
  uint64_t v66 = *(_WORD **)(v64 + 56);
  if (v65 == v66)
  {
    uint64_t v67 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    uint64_t v67 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    uint64_t v68 = *(_WORD **)(v64 + 48);
    while (*v68 != 11)
    {
      v68 += 16;
      if (v68 == v66) {
        goto LABEL_118;
      }
    }
    if (v68 == v66)
    {
      uint64_t v67 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v65 != 11)
      {
        v65 += 16;
        if (v65 == v66)
        {
          uint64_t v65 = *(_WORD **)(v64 + 56);
          break;
        }
      }
      uint64_t v67 = (uint64_t *)(v65 + 4);
    }
  }
LABEL_118:
  float v71 = (uint64_t *)*v67;
  uint64_t v69 = v67 + 1;
  float v70 = v71;
  if (v71 != v69)
  {
    do
    {
      BOOL v77 = *(int32x2_t **)(v70[4] + 32);
      __int32 v78 = v77[1].i32[0];
      LOBYTE(__p[0]) = v77[1].i32[1];
      BYTE1(__p[0]) = v78;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v77);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a1 + 128, (unsigned __int8 *)__p, (uint64_t)__p);
      size_t v79 = (uint64_t *)v70[1];
      if (v79)
      {
        do
        {
          uint64_t v80 = v79;
          size_t v79 = (uint64_t *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          uint64_t v80 = (uint64_t *)v70[2];
          BOOL v81 = *v80 == (void)v70;
          float v70 = v80;
        }
        while (!v81);
      }
      float v70 = v80;
    }
    while (v80 != v69);
  }
  uint64_t v72 = *v32;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  float64x2_t v73 = *(_WORD **)(v72 + 48);
  float v74 = *(_WORD **)(v72 + 56);
  if (v73 == v74)
  {
    float32x2_t v75 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    float32x2_t v75 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    unint64_t v76 = v73;
    while (*v76 != 12)
    {
      v76 += 16;
      if (v76 == v74) {
        goto LABEL_139;
      }
    }
    if (v76 == v74)
    {
      float32x2_t v75 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v73 != 12)
      {
        v73 += 16;
        if (v73 == v74)
        {
          float64x2_t v73 = v74;
          break;
        }
      }
      float32x2_t v75 = (uint64_t *)(v73 + 4);
    }
  }
LABEL_139:
  uint64_t v84 = (uint64_t *)*v75;
  uint64_t v82 = v75 + 1;
  uint64_t v83 = v84;
  if (v84 != v82)
  {
    do
    {
      int8x16_t v90 = *(int32x2_t **)(v83[4] + 32);
      __int32 v91 = v90[1].i32[0];
      LOBYTE(__p[0]) = v90[1].i32[1];
      BYTE1(__p[0]) = v91;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v90);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a1 + 128, (unsigned __int8 *)__p, (uint64_t)__p);
      float32x4_t v92 = (uint64_t *)v83[1];
      if (v92)
      {
        do
        {
          int8x16_t v93 = v92;
          float32x4_t v92 = (uint64_t *)*v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          int8x16_t v93 = (uint64_t *)v83[2];
          BOOL v81 = *v93 == (void)v83;
          uint64_t v83 = v93;
        }
        while (!v81);
      }
      uint64_t v83 = v93;
    }
    while (v93 != v82);
  }
  uint64_t v85 = *v32;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  int8x16_t v86 = *(_WORD **)(v85 + 48);
  float32x4_t v87 = *(_WORD **)(v85 + 56);
  if (v86 == v87)
  {
    float32x4_t v88 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    float32x4_t v88 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    float32x4_t v89 = v86;
    while (*v89 != 71)
    {
      v89 += 16;
      if (v89 == v87) {
        goto LABEL_160;
      }
    }
    if (v89 == v87)
    {
      float32x4_t v88 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v86 != 71)
      {
        v86 += 16;
        if (v86 == v87)
        {
          int8x16_t v86 = v87;
          break;
        }
      }
      float32x4_t v88 = (uint64_t *)(v86 + 4);
    }
  }
LABEL_160:
  int8x16_t v96 = (uint64_t *)*v88;
  float32x4_t v94 = v88 + 1;
  float32x4_t v95 = v96;
  if (v96 != v94)
  {
    do
    {
      uint64_t v102 = *(int32x2_t **)(v95[4] + 32);
      __int32 v103 = v102[1].i32[0];
      LOBYTE(__p[0]) = v102[1].i32[1];
      BYTE1(__p[0]) = v103;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v102);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a1 + 128, (unsigned __int8 *)__p, (uint64_t)__p);
      uint64_t v104 = (uint64_t *)v95[1];
      if (v104)
      {
        do
        {
          char v105 = v104;
          uint64_t v104 = (uint64_t *)*v104;
        }
        while (v104);
      }
      else
      {
        do
        {
          char v105 = (uint64_t *)v95[2];
          BOOL v81 = *v105 == (void)v95;
          float32x4_t v95 = v105;
        }
        while (!v81);
      }
      float32x4_t v95 = v105;
    }
    while (v105 != v94);
  }
  uint64_t v97 = *v32;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  float32x4_t v98 = *(_WORD **)(v97 + 48);
  int8x16_t v99 = *(_WORD **)(v97 + 56);
  float32x4_t v100 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v98 != v99)
  {
    uint64_t v101 = *(_WORD **)(v97 + 48);
    while (*v101 != 72)
    {
      v101 += 16;
      if (v101 == v99) {
        goto LABEL_180;
      }
    }
    if (v101 == v99)
    {
      float32x4_t v100 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v98 != 72)
      {
        v98 += 16;
        if (v98 == v99)
        {
          float32x4_t v98 = *(_WORD **)(v97 + 56);
          break;
        }
      }
      float32x4_t v100 = (uint64_t *)(v98 + 4);
    }
  }
LABEL_180:
  uint64_t v108 = (uint64_t *)*v100;
  int v106 = v100 + 1;
  uint64_t v107 = v108;
  if (v108 != v106)
  {
    do
    {
      unint64_t v110 = *(int32x2_t **)(v107[4] + 32);
      __int32 v111 = v110[1].i32[0];
      LOBYTE(__p[0]) = v110[1].i32[1];
      BYTE1(__p[0]) = v111;
      *(int32x2_t *)((char *)__p + 4) = vrev64_s32(*v110);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a1 + 128, (unsigned __int8 *)__p, (uint64_t)__p);
      unint64_t v112 = (uint64_t *)v107[1];
      if (v112)
      {
        do
        {
          uint64_t v113 = v112;
          unint64_t v112 = (uint64_t *)*v112;
        }
        while (v112);
      }
      else
      {
        do
        {
          uint64_t v113 = (uint64_t *)v107[2];
          BOOL v81 = *v113 == (void)v107;
          uint64_t v107 = v113;
        }
        while (!v81);
      }
      uint64_t v107 = v113;
    }
    while (v113 != v106);
  }
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 256) + 24))(__p);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 256) + 24))(v244);
  if (LOBYTE(__p[0]))
  {
    if (LOBYTE(v244[0]))
    {
      LOBYTE(v109) = BYTE4(v244[0]);
      if (HIDWORD(v244[0]) >= HIDWORD(__p[0])) {
        LOBYTE(v109) = BYTE4(__p[0]);
      }
    }
    else
    {
      LOBYTE(v109) = BYTE4(__p[0]);
    }
LABEL_195:
    unint64_t v114 = *v54;
    unsigned int v109 = v109;
    n = (uint64_t **)(a1 + 144);
    if (*v54) {
      goto LABEL_196;
    }
  }
  else
  {
    if (LOBYTE(v244[0]))
    {
      LOBYTE(v109) = BYTE4(v244[0]);
      goto LABEL_195;
    }
    unint64_t v114 = *v54;
    unsigned int v109 = 11;
    for (n = (uint64_t **)(a1 + 144); v114; unint64_t v114 = (uint64_t **)*v114)
    {
LABEL_196:
      if (*((unsigned __int8 *)v114 + 17) >= v109) {
        break;
      }
    }
  }
  size_t v115 = *v50;
  if (*v50)
  {
    uint64_t v228 = (uint64_t *)(a4 + 8);
    do
    {
      uint64_t v116 = v115[16];
      int8x8_t v117 = *(int8x8_t *)(a1 + 136);
      if (v117)
      {
        uint64_t v118 = v115[17];
        unint64_t v119 = (v118
              - 0x61C8864680B583EBLL
              + ((v116 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v116 - 0x61C8864680B583EBLL) >> 2)) ^ (v116 - 0x61C8864680B583EBLL);
        uint64_t v120 = *((int *)v115 + 5);
        uint64_t v121 = *((int *)v115 + 6);
        unint64_t v122 = (v120 - 0x61C8864680B583EBLL + (v119 << 6) + (v119 >> 2)) ^ v119;
        unint64_t v123 = (v121 - 0x61C8864680B583EBLL + (v122 << 6) + (v122 >> 2)) ^ v122;
        uint8x8_t v124 = (uint8x8_t)vcnt_s8(v117);
        v124.i16[0] = vaddlv_u8(v124);
        if (v124.u32[0] > 1uLL)
        {
          unint64_t v125 = v123;
          if (v123 >= *(void *)&v117) {
            unint64_t v125 = v123 % *(void *)&v117;
          }
        }
        else
        {
          unint64_t v125 = v123 & (*(void *)&v117 - 1);
        }
        unint64_t v126 = *(uint64_t ***)(*v46 + 8 * v125);
        if (v126)
        {
          uint64_t v127 = *v126;
          if (v127)
          {
            if (v124.u32[0] < 2uLL)
            {
              uint64_t v128 = *(void *)&v117 - 1;
              while (1)
              {
                uint64_t v130 = v127[1];
                if (v130 == v123)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v127 + 17), *((unsigned __int8 *)v127 + 16)) == __PAIR64__(v118, v116)
                    && *(uint64_t *)((char *)v127 + 20) == __PAIR64__(v121, v120))
                  {
                    goto LABEL_201;
                  }
                }
                else if ((v130 & v128) != v125)
                {
                  goto LABEL_225;
                }
                uint64_t v127 = (uint64_t *)*v127;
                if (!v127) {
                  goto LABEL_225;
                }
              }
            }
            do
            {
              unint64_t v129 = v127[1];
              if (v129 == v123)
              {
                if (__PAIR64__(*((unsigned __int8 *)v127 + 17), *((unsigned __int8 *)v127 + 16)) == __PAIR64__(v118, v116)
                  && *(uint64_t *)((char *)v127 + 20) == __PAIR64__(v121, v120))
                {
                  goto LABEL_201;
                }
              }
              else
              {
                if (v129 >= *(void *)&v117) {
                  v129 %= *(void *)&v117;
                }
                if (v129 != v125) {
                  break;
                }
              }
              uint64_t v127 = (uint64_t *)*v127;
            }
            while (v127);
          }
        }
      }
LABEL_225:
      unint64_t v131 = *(void *)(a4 + 16);
      uint64_t v132 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*(void *)(a4 + 8), v131, v115 + 16);
      if (v132)
      {
        uint64_t v133 = *(unsigned __int8 **)(a4 + 56);
        uint64_t v134 = (unsigned __int8 *)v132[5];
        if (v133 != v134)
        {
          uint64_t v135 = (unsigned __int8 *)*((void *)v134 + 1);
          if (v135 != v133)
          {
            uint64_t v136 = *(void *)v134;
            *(void *)(v136 + 8) = v135;
            **((void **)v134 + 1) = v136;
            uint64_t v137 = *(void *)v133;
            *(void *)(v137 + 8) = v134;
            *(void *)uint64_t v134 = v137;
            *(void *)uint64_t v133 = v134;
            *((void *)v134 + 1) = v133;
            uint64_t v133 = *(unsigned __int8 **)(a4 + 56);
          }
        }
        if (v133 != (unsigned __int8 *)(a4 + 48))
        {
          uint64_t v138 = *v228;
          int v139 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*v228, v131, v115 + 16);
          if (v139)
          {
            int v140 = (unsigned __int8 *)v139[5];
            if (v133 != v140)
            {
              uint64_t v141 = (unsigned __int8 *)*((void *)v140 + 1);
              if (v141 != v133)
              {
                uint64_t v142 = *(void *)v140;
                *(void *)(v142 + 8) = v141;
                **((void **)v140 + 1) = v142;
                uint64_t v143 = *(void *)v133;
                *(void *)(v143 + 8) = v140;
                *(void *)int v140 = v143;
                *(void *)uint64_t v133 = v140;
                *((void *)v140 + 1) = v133;
                uint64_t v133 = *(unsigned __int8 **)(a4 + 56);
                uint64_t v138 = *(void *)(a4 + 8);
              }
            }
          }
          else
          {
            uint64_t v133 = (unsigned __int8 *)(a4 + 48);
          }
          uint64_t v144 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(v138, v131, v133 + 16);
          if (v144)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v228, v144);
            if (__p[0]) {
              operator delete(__p[0]);
            }
          }
          uint64_t v145 = *(void *)v133;
          *(void *)(v145 + 8) = *((void *)v133 + 1);
          **((void **)v133 + 1) = v145;
          --*(void *)(a4 + 64);
          size_t v146 = (std::__shared_weak_count *)*((void *)v133 + 6);
          if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
          operator delete(v133);
        }
      }
LABEL_201:
      size_t v115 = *(unsigned __int8 **)v115;
    }
    while (v115);
  }
  uint64_t v147 = *(void *)(a1 + 120);
  unint64_t v148 = *(unsigned __int16 **)(v147 + 80);
  unint64_t v149 = *(unsigned __int16 **)(v147 + 88);
  if (v148 != v149)
  {
    while (*v148 != v225)
    {
      v148 += 8;
      if (v148 == v149) {
        goto LABEL_387;
      }
    }
  }
  if (v148 != v149)
  {
    if (v114)
    {
      unint64_t v150 = (void *)*((void *)v148 + 1);
      if (v150)
      {
        unint64_t v151 = *n;
        if (*n)
        {
          unint64_t v229 = (uint64_t *)(a4 + 8);
          v230 = (uint64_t *)(a4 + 48);
          unint64_t v222 = (void *)(a4 + 24);
LABEL_251:
          uint64_t v152 = (uint64_t)(v151 + 2);
          unint64_t v153 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*(void *)(a4 + 8), *(void *)(a4 + 16), (unsigned __int8 *)v151 + 16);
          if (v153)
          {
            uint64_t v154 = *(uint64_t **)(a4 + 56);
            uint64_t v155 = (uint64_t *)v153[5];
            if (v154 != v155)
            {
              unint64_t v156 = (uint64_t *)v155[1];
              if (v156 != v154)
              {
                uint64_t v157 = *v155;
                *(void *)(v157 + 8) = v156;
                *(void *)v155[1] = v157;
                uint64_t v158 = *v154;
                *(void *)(v158 + 8) = v155;
                *uint64_t v155 = v158;
                *uint64_t v154 = (uint64_t)v155;
                v155[1] = (uint64_t)v154;
                uint64_t v154 = *(uint64_t **)(a4 + 56);
              }
            }
            if (v154 != v230) {
              goto LABEL_250;
            }
          }
          uint64_t v159 = (void *)v150[1];
          if (v159 == v150) {
            goto LABEL_250;
          }
          unsigned __int8 v226 = 0;
          uint64_t v224 = 0;
          while (1)
          {
            if (v231 >= 3)
            {
              uint64_t v164 = (void *)v159[16];
              unint64_t v160 = (std::__shared_weak_count *)v159[17];
              __p[0] = v164;
              __p[1] = v160;
              if (v160) {
                atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v163 = (*(uint64_t (**)(void *))(*(void *)v164 + 72))(v164);
              if (!v160)
              {
LABEL_271:
                if (!v163) {
                  goto LABEL_258;
                }
                goto LABEL_272;
              }
            }
            else
            {
              uint64_t v161 = (void *)v159[16];
              unint64_t v160 = (std::__shared_weak_count *)v159[17];
              __p[0] = v161;
              __p[1] = v160;
              if (v160) {
                atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v162 = (*(uint64_t (**)(void *))(*(void *)v161 + 72))(v161);
              uint64_t v163 = v162;
              if (!v162 || *(unsigned char *)(v162 + 104) == 2) {
                uint64_t v163 = (*(uint64_t (**)(void *))(*(void *)v161 + 80))(v161);
              }
              if (!v160) {
                goto LABEL_271;
              }
            }
            if (atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_271;
            }
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
            if (!v163) {
              goto LABEL_258;
            }
LABEL_272:
            if (*(unsigned char *)(v163 + 104) != 2 && *(unsigned __int8 *)(v163 + 56) == *(unsigned __int8 *)v152)
            {
              unsigned int v165 = *(unsigned __int8 *)(v163 + 57);
              uint64_t v166 = *(void *)(v163 + 60);
              unsigned int v167 = *((unsigned __int8 *)v151 + 17);
              BOOL v168 = v167 >= v165;
              unsigned int v169 = v167 - v165;
              if (v169 != 0 && v168)
              {
                if (v166 == __PAIR64__(*((int *)v151 + 6) >> v169, *((int *)v151 + 5) >> v169)) {
                  goto LABEL_282;
                }
              }
              else if (!v169 && v166 == *(uint64_t *)((char *)v151 + 20))
              {
LABEL_282:
                if (v165 > v226)
                {
                  uint64_t v224 = (float *)v163;
                  unsigned __int8 v226 = *(unsigned char *)(v163 + 57);
                }
              }
            }
LABEL_258:
            uint64_t v159 = (void *)v159[1];
            if (v159 == v150)
            {
              if (v224)
              {
                LOWORD(v244[0]) = 2;
                HIDWORD(v244[1]) = 1065353216;
                *(void **)((char *)v244 + 4) = 0;
                md::FlyoverTileBuilder::generateHeightMesh(__p, (uint64_t)(v151 + 2), v224, (float *)v244);
                unint64_t v170 = (std::__shared_weak_count *)operator new(0xA8uLL);
                uint64_t v171 = v170;
                v170->__shared_owners_ = 0;
                v170->__shared_weak_owners_ = 0;
                v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5830B0;
                *(_OWORD *)float v244 = *(_OWORD *)__p;
                if (__p[1]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
                }
                unint64_t v172 = v237;
                int v239 = (std::__shared_weak_count *)__p[2];
                v240 = v237;
                if (v237)
                {
                  atomic_fetch_add_explicit(&v237->__shared_owners_, 1uLL, memory_order_relaxed);
                  ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v170[1], (uint64_t)"Terrain Tile Mesh", (uint64_t *)v244, (uint64_t *)&v239);
                  if (!atomic_fetch_add(&v172->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
                else
                {
                  ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v170[1], (uint64_t)"Terrain Tile Mesh", (uint64_t *)v244, (uint64_t *)&v239);
                }
                uint64_t v173 = (std::__shared_weak_count *)v244[1];
                if (v244[1] && !atomic_fetch_add((atomic_ullong *volatile)v244[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
                v232 = v171;
                LOBYTE(v233) = 0;
                BYTE8(v234) = 0;
                uint64_t v235 = v238;
                int v239 = v171 + 1;
                v240 = v171;
                atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
                long long v241 = v233;
                long long v242 = v234;
                uint64_t v243 = v235;
                uint64_t v174 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*(void *)(a4 + 8), *(void *)(a4 + 16), (unsigned __int8 *)v151 + 16);
                if (v174)
                {
                  uint64_t v152 = (uint64_t)v174;
                  long long v175 = (uint64_t *)v174[5];
                  uint64_t v176 = *v175;
                  *(void *)(v176 + 8) = v175[1];
                  *(void *)v175[1] = v176;
                  --*(void *)(a4 + 64);
                  uint64_t v177 = (std::__shared_weak_count *)v175[6];
                  if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                  operator delete(v175);
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v244, v229, (void *)v152);
                  if (v244[0]) {
                    operator delete(v244[0]);
                  }
                }
                long long v178 = (char *)operator new(0x60uLL);
                long long v179 = v178;
                *((_WORD *)v178 + 8) = *((_WORD *)v151 + 8);
                *(void *)(v178 + 20) = *(uint64_t *)((char *)v151 + 20);
                uint64_t v180 = v240;
                *((void *)v178 + 5) = v239;
                *((void *)v178 + 6) = v180;
                if (v180) {
                  atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v227 = v180;
                long long v181 = v241;
                *(_OWORD *)(v178 + 72) = v242;
                *((void *)v178 + 11) = v243;
                *(_OWORD *)(v178 + 56) = v181;
                uint64_t v182 = *(void **)(a4 + 56);
                *(void *)long long v178 = v230;
                *((void *)v178 + 1) = v182;
                *uint64_t v182 = v178;
                uint64_t v183 = *(void *)(a4 + 64) + 1;
                *(void *)(a4 + 56) = v178;
                *(void *)(a4 + 64) = v183;
                uint64_t v184 = *((unsigned __int8 *)v151 + 16);
                uint64_t v185 = *((unsigned __int8 *)v151 + 17);
                unint64_t v186 = (v185
                      - 0x61C8864680B583EBLL
                      + ((v184 - 0x61C8864680B583EBLL) << 6)
                      + ((unint64_t)(v184 - 0x61C8864680B583EBLL) >> 2)) ^ (v184 - 0x61C8864680B583EBLL);
                uint64_t v187 = *((int *)v151 + 5);
                uint64_t v188 = *((int *)v151 + 6);
                unint64_t v189 = (v187 - 0x61C8864680B583EBLL + (v186 << 6) + (v186 >> 2)) ^ v186;
                unint64_t v190 = (v188 - 0x61C8864680B583EBLL + (v189 << 6) + (v189 >> 2)) ^ v189;
                unint64_t v191 = *(void *)(a4 + 16);
                if (v191)
                {
                  uint8x8_t v192 = (uint8x8_t)vcnt_s8((int8x8_t)v191);
                  v192.i16[0] = vaddlv_u8(v192);
                  if (v192.u32[0] > 1uLL)
                  {
                    uint64_t v152 = (v188 - 0x61C8864680B583EBLL + (v189 << 6) + (v189 >> 2)) ^ v189;
                    if (v190 >= v191) {
                      uint64_t v152 = v190 % v191;
                    }
                  }
                  else
                  {
                    uint64_t v152 = v190 & (v191 - 1);
                  }
                  uint64_t v193 = *(uint64_t ***)(*v229 + 8 * v152);
                  if (v193)
                  {
                    char v194 = *v193;
                    if (v194)
                    {
                      if (v192.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          uint64_t v196 = v194[1];
                          if (v196 == v190)
                          {
                            if (__PAIR64__(*((unsigned __int8 *)v194 + 17), *((unsigned __int8 *)v194 + 16)) == __PAIR64__(v185, v184)
                              && *(uint64_t *)((char *)v194 + 20) == __PAIR64__(v188, v187))
                            {
                              goto LABEL_363;
                            }
                          }
                          else if ((v196 & (v191 - 1)) != v152)
                          {
                            goto LABEL_325;
                          }
                          char v194 = (uint64_t *)*v194;
                          if (!v194) {
                            goto LABEL_325;
                          }
                        }
                      }
                      do
                      {
                        unint64_t v195 = v194[1];
                        if (v195 == v190)
                        {
                          if (__PAIR64__(*((unsigned __int8 *)v194 + 17), *((unsigned __int8 *)v194 + 16)) == __PAIR64__(v185, v184)
                            && *(uint64_t *)((char *)v194 + 20) == __PAIR64__(v188, v187))
                          {
                            goto LABEL_363;
                          }
                        }
                        else
                        {
                          if (v195 >= v191) {
                            v195 %= v191;
                          }
                          if (v195 != v152) {
                            break;
                          }
                        }
                        char v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                    }
                  }
                }
LABEL_325:
                uint64_t v197 = operator new(0x30uLL);
                *uint64_t v197 = 0;
                v197[1] = v190;
                *((_WORD *)v197 + 8) = *((_WORD *)v151 + 8);
                *(void *)((char *)v197 + 20) = *(uint64_t *)((char *)v151 + 20);
                v197[5] = v179;
                float v198 = (float)(unint64_t)(*(void *)(a4 + 32) + 1);
                float v199 = *(float *)(a4 + 40);
                if (!v191 || (float)(v199 * (float)v191) < v198)
                {
                  BOOL v200 = (v191 & (v191 - 1)) != 0;
                  if (v191 < 3) {
                    BOOL v200 = 1;
                  }
                  unint64_t v201 = v200 | (2 * v191);
                  unint64_t v202 = vcvtps_u32_f32(v198 / v199);
                  if (v201 <= v202) {
                    size_t prime = v202;
                  }
                  else {
                    size_t prime = v201;
                  }
                  if (prime == 1)
                  {
                    size_t prime = 2;
                  }
                  else if ((prime & (prime - 1)) != 0)
                  {
                    size_t prime = std::__next_prime(prime);
                    unint64_t v191 = *(void *)(a4 + 16);
                  }
                  if (prime > v191) {
                    goto LABEL_337;
                  }
                  if (prime < v191)
                  {
                    unint64_t v204 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 32) / *(float *)(a4 + 40));
                    if (v191 < 3
                      || (uint8x8_t v205 = (uint8x8_t)vcnt_s8((int8x8_t)v191), v205.i16[0] = vaddlv_u8(v205), v205.u32[0] > 1uLL))
                    {
                      unint64_t v204 = std::__next_prime(v204);
                    }
                    else
                    {
                      uint64_t v206 = 1 << -(char)__clz(v204 - 1);
                      if (v204 >= 2) {
                        unint64_t v204 = v206;
                      }
                    }
                    if (prime <= v204) {
                      size_t prime = v204;
                    }
                    if (prime < v191) {
LABEL_337:
                    }
                      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v229, prime);
                  }
                  unint64_t v191 = *(void *)(a4 + 16);
                  if ((v191 & (v191 - 1)) != 0)
                  {
                    if (v190 >= v191) {
                      uint64_t v152 = v190 % v191;
                    }
                    else {
                      uint64_t v152 = v190;
                    }
                  }
                  else
                  {
                    uint64_t v152 = (v191 - 1) & v190;
                  }
                }
                uint64_t v207 = *v229;
                unint64_t v208 = *(void **)(*v229 + 8 * v152);
                if (v208)
                {
                  *uint64_t v197 = *v208;
                  goto LABEL_361;
                }
                *uint64_t v197 = *v222;
                *unint64_t v222 = v197;
                *(void *)(v207 + 8 * v152) = v222;
                if (*v197)
                {
                  unint64_t v209 = *(void *)(*v197 + 8);
                  if ((v191 & (v191 - 1)) != 0)
                  {
                    if (v209 >= v191) {
                      v209 %= v191;
                    }
                  }
                  else
                  {
                    v209 &= v191 - 1;
                  }
                  unint64_t v208 = (void *)(*v229 + 8 * v209);
LABEL_361:
                  *unint64_t v208 = v197;
                }
                ++*(void *)(a4 + 32);
LABEL_363:
                unint64_t v210 = v227;
                if (!v227) {
                  goto LABEL_366;
                }
LABEL_364:
                if (!atomic_fetch_add(&v210->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                  std::__shared_weak_count::__release_weak(v210);
                }
LABEL_366:
                while (1)
                {
                  unint64_t v211 = *(void *)(a4 + 64);
                  if (v211 <= *(void *)a4) {
                    break;
                  }
                  uint64_t v212 = *v230;
                  LOWORD(v244[0]) = *(_WORD *)(*v230 + 16);
                  *(void **)((char *)v244 + 4) = *(void **)(v212 + 20);
                  uint64_t v213 = *(std::__shared_weak_count **)(v212 + 48);
                  v244[3] = *(void **)(v212 + 40);
                  unint64_t v245 = v213;
                  if (v213)
                  {
                    atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
                    unint64_t v214 = *(uint64_t **)(a4 + 48);
                    uint64_t v215 = (std::__shared_weak_count *)v214[6];
                    unint64_t v211 = *(void *)(a4 + 64);
                  }
                  else
                  {
                    uint64_t v215 = 0;
                    unint64_t v214 = (uint64_t *)v212;
                  }
                  long long v216 = *(_OWORD *)(v212 + 72);
                  long long v246 = *(_OWORD *)(v212 + 56);
                  long long v247 = v216;
                  uint64_t v248 = *(void *)(v212 + 88);
                  uint64_t v217 = *v214;
                  *(void *)(v217 + 8) = v214[1];
                  *(void *)v214[1] = v217;
                  *(void *)(a4 + 64) = v211 - 1;
                  if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                  operator delete(v214);
                  uint64_t v218 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(*(void *)(a4 + 8), *(void *)(a4 + 16), (unsigned __int8 *)v244);
                  if (v218)
                  {
                    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v249, v229, v218);
                    if (v249) {
                      operator delete(v249);
                    }
                  }
                  unint64_t v210 = v245;
                  if (v245) {
                    goto LABEL_364;
                  }
                }
                if (v232 && !atomic_fetch_add(&v232->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                  std::__shared_weak_count::__release_weak(v232);
                }
                long long v219 = v237;
                if (v237 && !atomic_fetch_add(&v237->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                  std::__shared_weak_count::__release_weak(v219);
                }
                float32x2_t v220 = (std::__shared_weak_count *)__p[1];
                if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                  std::__shared_weak_count::__release_weak(v220);
                }
              }
LABEL_250:
              unint64_t v151 = (uint64_t *)*v151;
              if (v151) {
                goto LABEL_251;
              }
              break;
            }
          }
        }
      }
    }
  }
LABEL_387:
  if (!v255)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v255 + 48))(v255);
  uint64_t result = (uint64_t)v255;
  if (v255 == v254) {
    return (*(uint64_t (**)(void *))(v254[0] + 32))(v254);
  }
  if (v255) {
    return (*(uint64_t (**)(void))(*v255 + 40))();
  }
  return result;
}

void sub_1A1E71FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  operator delete(v35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a17);
  md::DaVinciTrafficBatchKey::~DaVinciTrafficBatchKey((md::DaVinciTrafficBatchKey *)&a24);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v36 - 128));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TerrainMeshProviderLogic", "", v5, 2u);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::__list_iterator<std::pair<geo::QuadTile,md::TerrainTileMesh>,void *>>>>::find<geo::QuadTile>(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  uint64_t v6 = *((int *)a3 + 1);
  uint64_t v7 = *((int *)a3 + 2);
  unint64_t v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= a2) {
      uint64_t v11 = v9 % a2;
    }
  }
  else
  {
    uint64_t v11 = v9 & (a2 - 1);
  }
  uint8x8_t v12 = *(uint64_t ***)(a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v15 = result[1];
        if (v15 == v9)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v15 & (a2 - 1)) != v11)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v14 = result[1];
      if (v14 == v9)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v14 >= a2) {
          v14 %= a2;
        }
        if (v14 != v11) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos4UVMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5830B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5830B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TerrainMeshProviderLogic", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EE78;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51EE78;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_2>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EE30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51EE30;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1,std::allocator<md::TerrainMeshProviderLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::ResolvedDependencies const&,md::TerrainMeshProviderContext &)::$_1>,void ()(void)>::~__func()
{
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 100;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = a1 + 48;
  *(void *)(a1 + 56) = a1 + 48;
  *(void *)(a1 + 64) = 0;
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x44B2D9808992962CLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(uint64_t **)(a2 + 8);
    uint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    v12[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v7, v9);
    v12[1] = v10;
    v12[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v8, v9);
    v12[3] = v11;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v12, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68) {
      unint64_t v3 = 0xE42D19AFCA302E68 % a2;
    }
  }
  else
  {
    unint64_t v3 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  unint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0xE42D19AFCA302E68)
      {
        if (v6[2] == 0xE42D19AFCA302E68) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0xE42D19AFCA302E68) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v11 = 0x9F2276D081C2CB20;
    if (a2 <= 0x9F2276D081C2CB20) {
      unint64_t v11 = 0x9F2276D081C2CB20 % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & 0x9F2276D081C2CB20;
  }
  uint8x8_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x9F2276D081C2CB20)
      {
        if (v13[2] == 0x9F2276D081C2CB20) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x9F2276D081C2CB20)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x9F2276D081C2CB20)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x9F2276D081C2CB20) {
    return v10;
  }
  return v10;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xADE8F13E6C18D970;
    if (a2 <= 0xADE8F13E6C18D970) {
      unint64_t v3 = 0xADE8F13E6C18D970 % a2;
    }
  }
  else
  {
    unint64_t v3 = (a2 - 1) & 0xADE8F13E6C18D970;
  }
  unint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0xADE8F13E6C18D970)
      {
        if (v6[2] == 0xADE8F13E6C18D970) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0xADE8F13E6C18D970) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0xADE8F13E6C18D970) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0xADE8F13E6C18D970)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x336A901A15BB7353;
    if (a2 <= 0x336A901A15BB7353) {
      uint64_t v11 = 0x336A901A15BB7353 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x336A901A15BB7353;
  }
  uint8x8_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x336A901A15BB7353)
      {
        if (v13[2] == 0x336A901A15BB7353) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x336A901A15BB7353)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x336A901A15BB7353)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x336A901A15BB7353) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(uint64_t **)(a2 + 8);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(uint64_t **)(a2 + 8);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(uint64_t **)(a2 + 8);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x44B2D9808992962CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(uint64_t **)(a2 + 8);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      v11[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildRequiredTuple<md::StyleLogicContext,md::PendingSceneContext>(*v6, v8);
      v11[1] = v9;
      v11[2] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>::buildOptionalTuple<md::OverlaysContext,md::GridContext>(v7, v8);
      v11[3] = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v11, v3);
    }
  }
  return result;
}

void md::Logic<md::TerrainMeshProviderLogic,md::TerrainMeshProviderContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::PendingSceneContext>,gdc::TypeList<md::OverlaysContext,md::GridContext>>>::_allocateContext()
{
}

void sub_1A1E7341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v5);
  MEMORY[0x1A6239270](v4, 0x10A0C407D9D2971);
  geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache((uint64_t *)va);
  MEMORY[0x1A6239270](a4, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void *geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(void *a1)
{
  if (a1[8])
  {
    uint8x8_t v2 = a1 + 6;
    uint64_t v3 = a1[6];
    uint64_t v4 = (uint64_t *)a1[7];
    uint64_t v5 = *v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    a1[8] = 0;
    if (v4 != a1 + 6)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v4[1];
        uint64_t v7 = (std::__shared_weak_count *)v4[6];
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
    }
  }
  unint64_t v8 = (void *)a1[3];
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = (void *)a1[1];
  a1[1] = 0;
  if (v10) {
    operator delete(v10);
  }
  return a1;
}

uint64_t gdc::ObjectHolder<md::TerrainMeshProviderContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::TerrainMeshProviderContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5148F8;
  uint64_t v1 = (void *)a1[4];
  if (v1)
  {
    uint64_t v2 = geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(v1);
    MEMORY[0x1A6239270](v2, 0x10A0C407D9D2971);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::TerrainMeshProviderContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5148F8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = geo::Cache<geo::QuadTile,md::TerrainTileMesh,geo::QuadTileHash,geo::LRUPolicy>::~Cache(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C407D9D2971);
  }
  return a1;
}

void md::TerrainMeshProviderLogic::~TerrainMeshProviderLogic(md::TerrainMeshProviderLogic *this)
{
  md::TerrainMeshProviderLogic::~TerrainMeshProviderLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_1EF513A08;
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 18);
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v10) {
    operator delete(v10);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t md::TrafficStyleAttributes(gss::Allocator *a1, int a2)
{
  uint64_t v4 = gss::Allocator::instance(a1);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 16, 4);
  uint64_t v6 = v5;
  if (v5) {
    *uint64_t v5 = 0xA00000005;
  }
  v5[1] = 65543;
  uint64_t v33 = v4;
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 16, 4);
  uint64_t v30 = v7;
  float v32 = (char *)(v7 + 2);
  if (v7) {
    *uint64_t v7 = *v6;
  }
  v7[1] = v6[1];
  float v31 = v7 + 2;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v30);
  unint64_t v8 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 40))(v4, v6, 16);
  uint64_t v9 = gss::Allocator::instance(v8);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 16, 4);
  uint64_t v11 = v10;
  if (v10) {
    *uint64_t v10 = 0xA00000005;
  }
  v10[1] = 0x100010007;
  uint64_t v29 = v9;
  uint8x8_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 16, 4);
  float v26 = v12;
  float v28 = (char *)(v12 + 2);
  if (v12) {
    *uint8x8_t v12 = *v11;
  }
  v12[1] = v11[1];
  uint64_t v27 = v12 + 2;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v26);
  uint64_t v13 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 40))(v9, v11, 16);
  uint64_t v14 = gss::Allocator::instance(v13);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 16, 4);
  uint64_t v16 = v15;
  if (v15) {
    void *v15 = 0xA00000005;
  }
  v15[1] = 0x200010007;
  uint64_t v25 = v14;
  float v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 16, 4);
  uint64_t v22 = v17;
  uint64_t v24 = (char *)(v17 + 2);
  if (v17) {
    *float v17 = *v16;
  }
  v17[1] = v16[1];
  uint64_t v23 = v17 + 2;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v22);
  float v18 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v14 + 40))(v14, v16, 16);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t result = gss::Allocator::instance(v18);
  *((void *)a1 + 3) = result;
  if (a2)
  {
    if (&v26 == (void **)a1) {
      goto LABEL_19;
    }
    uint64_t v20 = (uint64_t)v26;
    unint64_t v21 = v27;
  }
  else
  {
    if (&v30 == (void **)a1) {
      goto LABEL_19;
    }
    uint64_t v20 = (uint64_t)v30;
    unint64_t v21 = v31;
  }
  uint64_t result = std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)a1, v20, v21, ((uint64_t)v21 - v20) >> 3);
LABEL_19:
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(void *)v25 + 40))(v25, v22, v24 - (char *)v22);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(void *)v29 + 40))(v29, v26, v28 - (char *)v26);
  }
  if (v30)
  {
    float v31 = v30;
    return (*(uint64_t (**)(uint64_t, void *, int64_t))(*(void *)v33 + 40))(v33, v30, v32 - (char *)v30);
  }
  return result;
}

uint64_t md::CoastlineRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 49) - *(unsigned char *)(result + 48) + 1;
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  int v4 = *v3;
  unsigned int v5 = v4 + v2;
  unsigned int v6 = v3[1];
  BOOL v7 = v5 > v6;
  if (v5 <= v6) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = v3 + 4;
  }
  *(void *)(*(void *)(result + 368) + 280) = v8;
  if (v7)
  {
    v3[1] = v3[2];
    int v4 = 1;
  }
  *uint64_t v3 = v4 + v2;
  *(_DWORD *)(*(void *)(result + 368) + 288) = v4 - *(unsigned __int8 *)(result + 48);
  return result;
}

void *md::CoastlineRenderLayer::layout(uint64_t **this, const md::LayoutContext *a2)
{
  uint64_t v739 = *MEMORY[0x1E4F143B8];
  v735[0] = &unk_1EF575048;
  v735[1] = a2;
  v733[0] = &unk_1EF575090;
  v733[1] = a2;
  v734 = v733;
  v738 = v737;
  v736 = v735;
  v737[0] = &unk_1EF575090;
  v737[1] = a2;
  std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v735);
  if (v734 == v733)
  {
    (*(void (**)(void *))(v733[0] + 32))(v733);
    unsigned __int8 v2 = (md::CoastlineRenderLayer *)this;
  }
  else
  {
    unsigned __int8 v2 = (md::CoastlineRenderLayer *)this;
    if (v734) {
      (*(void (**)(void *))(*v734 + 40))(v734);
    }
  }
  if (v736 == v735)
  {
    (*(void (**)(void *))(v735[0] + 32))(v735);
  }
  else if (v736)
  {
    (*(void (**)(void *))(*v736 + 40))(v736);
  }
  uint64_t v3 = *((void *)v2 + 44);
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  int v4 = *(void **)(*(void *)(*((void *)v2 + 5) + 24) + 8);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  uint64_t v7 = v6 - v5;
  if (v6 == v5) {
    goto LABEL_16;
  }
  uint64_t v8 = 0;
  unint64_t v9 = v7 >> 3;
  while (1)
  {
    uint64_t v10 = *(unsigned __int8 **)(v5 + 8 * v8);
    if (*v10 == *((unsigned __int8 *)v2 + 376))
    {
      unint64_t v11 = *((void *)v10 + 1);
      uint64_t v12 = v4[15];
      if (v11 < (v4[16] - v12) >> 3) {
        break;
      }
    }
    if (++v8 >= v9) {
      goto LABEL_16;
    }
  }
  uint64_t v13 = *(void *)(v12 + 8 * v11);
  if (!v13) {
LABEL_16:
  }
    uint64_t v14 = 0;
  else {
    uint64_t v14 = *(void *)(*(void *)(v13 + 24) + 8 * *((unsigned __int8 *)v2 + 377));
  }
  uint64_t v15 = *(void *)(v14 + 72);
  if (*(void *)(v14 + 80) != v15) {
    *(void *)(v14 + 80) = v15;
  }
  uint64_t v16 = this[46];
  ggl::FragmentedPool<ggl::RenderItem>::pushAll((uint64_t *)v16[2]);
  float v17 = (uint64_t *)v16[3];
  float v18 = (uint64_t *)v17[4];
  float v19 = (uint64_t *)v17[5];
  if (v18 != v19)
  {
    uint64_t v20 = (void *)v17[1];
    while (1)
    {
      uint64_t v21 = *v18;
      unint64_t v22 = v17[2];
      if ((unint64_t)v20 >= v22) {
        break;
      }
      if (v20) {
        void *v20 = v21;
      }
      ++v20;
LABEL_22:
      v17[1] = (uint64_t)v20;
      if (++v18 == v19)
      {
        uint64_t v42 = v17[4];
        if (v42 != v17[5]) {
          v17[5] = v42;
        }
        goto LABEL_51;
      }
    }
    uint64_t v23 = ((uint64_t)v20 - *v17) >> 3;
    if ((unint64_t)(v23 + 1) >> 61) {
LABEL_923:
    }
      abort();
    uint64_t v24 = v22 - *v17;
    uint64_t v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
      uint64_t v25 = v23 + 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v26 = v25;
    }
    if (v26)
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[3] + 16))(v17[3], 8 * v26, 8);
      float v28 = (void *)(v27 + 8 * v23);
      uint64_t v29 = v27 + 8 * v26;
      if (v27) {
        *float v28 = v21;
      }
    }
    else
    {
      uint64_t v29 = 0;
      float v28 = (void *)(8 * v23);
    }
    uint64_t v31 = *v17;
    uint64_t v30 = v17[1];
    uint64_t v32 = v30 - *v17;
    if (v30 == *v17)
    {
      int8x8_t v34 = v28;
      goto LABEL_47;
    }
    unint64_t v33 = v32 - 8;
    if ((unint64_t)(v32 - 8) < 0x38)
    {
      int8x8_t v34 = v28;
    }
    else
    {
      int8x8_t v34 = v28;
      if ((unint64_t)(v30 - (void)v28) >= 0x20)
      {
        uint64_t v35 = (v33 >> 3) + 1;
        uint64_t v36 = v28 - 2;
        unint64_t v37 = (long long *)(v30 - 16);
        uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          _OWORD *v36 = v39;
          v36 -= 2;
          v37 -= 2;
          v38 -= 4;
        }
        while (v38);
        int8x8_t v34 = &v28[-(v35 & 0x3FFFFFFFFFFFFFFCLL)];
        v30 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_46;
        }
      }
    }
    do
    {
      uint64_t v40 = *(void *)(v30 - 8);
      v30 -= 8;
      *--int8x8_t v34 = v40;
    }
    while (v30 != v31);
LABEL_46:
    uint64_t v30 = *v17;
LABEL_47:
    uint64_t v20 = v28 + 1;
    *float v17 = (uint64_t)v34;
    v17[1] = (uint64_t)(v28 + 1);
    uint64_t v41 = v17[2];
    v17[2] = v29;
    if (v30) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[3] + 40))(v17[3], v30, v41 - v30);
    }
    goto LABEL_22;
  }
LABEL_51:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll((uint64_t *)v16[13]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll((uint64_t *)v16[14]);
  unint64_t v43 = (uint64_t *)*v16;
  uint64_t v44 = *(uint64_t **)(*v16 + 32);
  uint64_t v45 = *(uint64_t **)(*v16 + 40);
  if (v44 == v45) {
    goto LABEL_83;
  }
  double v46 = (void *)v43[1];
  do
  {
    uint64_t v47 = *v44;
    unint64_t v48 = v43[2];
    if ((unint64_t)v46 < v48)
    {
      if (v46) {
        *double v46 = v47;
      }
      ++v46;
      goto LABEL_54;
    }
    uint64_t v49 = ((uint64_t)v46 - *v43) >> 3;
    if ((unint64_t)(v49 + 1) >> 61) {
      goto LABEL_923;
    }
    uint64_t v50 = v48 - *v43;
    uint64_t v51 = v50 >> 2;
    if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
      uint64_t v51 = v49 + 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v51;
    }
    if (v52)
    {
      uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43[3] + 16))(v43[3], 8 * v52, 8);
      uint64_t v54 = (void *)(v53 + 8 * v49);
      uint64_t v55 = v53 + 8 * v52;
      if (v53) {
        *uint64_t v54 = v47;
      }
    }
    else
    {
      uint64_t v55 = 0;
      uint64_t v54 = (void *)(8 * v49);
    }
    uint64_t v57 = *v43;
    uint64_t v56 = v43[1];
    uint64_t v58 = v56 - *v43;
    if (v56 == *v43)
    {
      unint64_t v60 = v54;
      goto LABEL_79;
    }
    unint64_t v59 = v58 - 8;
    if ((unint64_t)(v58 - 8) < 0x38)
    {
      unint64_t v60 = v54;
    }
    else
    {
      unint64_t v60 = v54;
      if ((unint64_t)(v56 - (void)v54) >= 0x20)
      {
        uint64_t v61 = (v59 >> 3) + 1;
        float v62 = v54 - 2;
        float v63 = (long long *)(v56 - 16);
        uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v65 = *v63;
          *(v62 - 1) = *(v63 - 1);
          _OWORD *v62 = v65;
          v62 -= 2;
          v63 -= 2;
          v64 -= 4;
        }
        while (v64);
        unint64_t v60 = &v54[-(v61 & 0x3FFFFFFFFFFFFFFCLL)];
        v56 -= 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_78;
        }
      }
    }
    do
    {
      uint64_t v66 = *(void *)(v56 - 8);
      v56 -= 8;
      *--unint64_t v60 = v66;
    }
    while (v56 != v57);
LABEL_78:
    uint64_t v56 = *v43;
LABEL_79:
    double v46 = v54 + 1;
    *unint64_t v43 = (uint64_t)v60;
    v43[1] = (uint64_t)(v54 + 1);
    uint64_t v67 = v43[2];
    v43[2] = v55;
    if (v56) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43[3] + 40))(v43[3], v56, v67 - v56);
    }
LABEL_54:
    v43[1] = (uint64_t)v46;
    ++v44;
  }
  while (v44 != v45);
  uint64_t v68 = v43[4];
  if (v68 != v43[5]) {
    v43[5] = v68;
  }
LABEL_83:
  uint64_t v69 = (uint64_t *)v16[1];
  float v70 = (uint64_t *)v69[4];
  float v71 = (uint64_t *)v69[5];
  if (v70 == v71) {
    goto LABEL_115;
  }
  uint64_t v72 = (void *)v69[1];
  while (2)
  {
    uint64_t v73 = *v70;
    unint64_t v74 = v69[2];
    if ((unint64_t)v72 < v74)
    {
      if (v72) {
        *uint64_t v72 = v73;
      }
      ++v72;
      goto LABEL_86;
    }
    uint64_t v75 = ((uint64_t)v72 - *v69) >> 3;
    if ((unint64_t)(v75 + 1) >> 61) {
      goto LABEL_923;
    }
    uint64_t v76 = v74 - *v69;
    uint64_t v77 = v76 >> 2;
    if (v76 >> 2 <= (unint64_t)(v75 + 1)) {
      uint64_t v77 = v75 + 1;
    }
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v78 = v77;
    }
    if (v78)
    {
      uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69[3] + 16))(v69[3], 8 * v78, 8);
      uint64_t v80 = (void *)(v79 + 8 * v75);
      uint64_t v81 = v79 + 8 * v78;
      if (v79) {
        *uint64_t v80 = v73;
      }
    }
    else
    {
      uint64_t v81 = 0;
      uint64_t v80 = (void *)(8 * v75);
    }
    uint64_t v83 = *v69;
    uint64_t v82 = v69[1];
    uint64_t v84 = v82 - *v69;
    if (v82 == *v69)
    {
      int8x16_t v86 = v80;
      goto LABEL_111;
    }
    unint64_t v85 = v84 - 8;
    if ((unint64_t)(v84 - 8) < 0x38)
    {
      int8x16_t v86 = v80;
      do
      {
LABEL_109:
        uint64_t v92 = *(void *)(v82 - 8);
        v82 -= 8;
        *--int8x16_t v86 = v92;
      }
      while (v82 != v83);
      goto LABEL_110;
    }
    int8x16_t v86 = v80;
    if ((unint64_t)(v82 - (void)v80) < 0x20) {
      goto LABEL_109;
    }
    uint64_t v87 = (v85 >> 3) + 1;
    float32x4_t v88 = v80 - 2;
    float32x4_t v89 = (long long *)(v82 - 16);
    uint64_t v90 = v87 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v91 = *v89;
      *(v88 - 1) = *(v89 - 1);
      *float32x4_t v88 = v91;
      v88 -= 2;
      v89 -= 2;
      v90 -= 4;
    }
    while (v90);
    int8x16_t v86 = &v80[-(v87 & 0x3FFFFFFFFFFFFFFCLL)];
    v82 -= 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
    if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_109;
    }
LABEL_110:
    uint64_t v82 = *v69;
LABEL_111:
    uint64_t v72 = v80 + 1;
    *uint64_t v69 = (uint64_t)v86;
    v69[1] = (uint64_t)(v80 + 1);
    uint64_t v93 = v69[2];
    v69[2] = v81;
    if (v82) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69[3] + 40))(v69[3], v82, v93 - v82);
    }
LABEL_86:
    v69[1] = (uint64_t)v72;
    if (++v70 != v71) {
      continue;
    }
    break;
  }
  uint64_t v94 = v69[4];
  if (v94 != v69[5]) {
    v69[5] = v94;
  }
LABEL_115:
  if (this[35] != this[34])
  {
    int v95 = *((_DWORD *)this[46] + 72);
    v727.n128_u8[0] = 0;
    md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles((uint64_t)this, a2, v14, v95, 1, &v727);
    int8x16_t v96 = (void *)*((void *)a2 + 1);
    int8x8_t v97 = (int8x8_t)v96[1];
    if (v97)
    {
      uint8x8_t v98 = (uint8x8_t)vcnt_s8(v97);
      v98.i16[0] = vaddlv_u8(v98);
      if (v98.u32[0] > 1uLL)
      {
        uint64_t v99 = 0x3070CB6B3C7F21D3;
        if (*(void *)&v97 <= 0x3070CB6B3C7F21D3uLL) {
          uint64_t v99 = 0x3070CB6B3C7F21D3uLL % *(void *)&v97;
        }
      }
      else
      {
        uint64_t v99 = (*(void *)&v97 - 1) & 0x3070CB6B3C7F21D3;
      }
      float32x4_t v100 = *(void **)(*v96 + 8 * v99);
      if (v100)
      {
        uint64_t v101 = (void *)*v100;
        if (v101)
        {
          if (v98.u32[0] < 2uLL)
          {
            uint64_t v102 = *(void *)&v97 - 1;
            while (1)
            {
              uint64_t v104 = v101[1];
              if (v104 == 0x3070CB6B3C7F21D3)
              {
                if (v101[2] == 0x3070CB6B3C7F21D3) {
                  goto LABEL_137;
                }
              }
              else if ((v104 & v102) != v99)
              {
                goto LABEL_917;
              }
              uint64_t v101 = (void *)*v101;
              if (!v101) {
                goto LABEL_917;
              }
            }
          }
          while (1)
          {
            unint64_t v103 = v101[1];
            if (v103 == 0x3070CB6B3C7F21D3) {
              break;
            }
            if (v103 >= *(void *)&v97) {
              v103 %= *(void *)&v97;
            }
            if (v103 != v99) {
              goto LABEL_917;
            }
LABEL_126:
            uint64_t v101 = (void *)*v101;
            if (!v101) {
              goto LABEL_917;
            }
          }
          if (v101[2] != 0x3070CB6B3C7F21D3) {
            goto LABEL_126;
          }
LABEL_137:
          uint64_t v105 = v101[5];
          if (*(void *)(v105 + 8) == 0x3070CB6B3C7F21D3)
          {
            if (*(void *)(v105 + 32))
            {
              uint64_t v670 = *(void *)(v105 + 32);
              id v672 = *(id *)a2;
              [v672 contentScale];
              uint64_t v107 = (void *)*((void *)a2 + 1);
              int8x8_t v108 = (int8x8_t)v107[1];
              if (!*(void *)&v108) {
                goto LABEL_162;
              }
              uint8x8_t v109 = (uint8x8_t)vcnt_s8(v108);
              v109.i16[0] = vaddlv_u8(v109);
              if (v109.u32[0] > 1uLL)
              {
                uint64_t v110 = 0x1AF456233693CD46;
                if (*(void *)&v108 <= 0x1AF456233693CD46uLL) {
                  uint64_t v110 = 0x1AF456233693CD46uLL % *(void *)&v108;
                }
              }
              else
              {
                uint64_t v110 = (*(void *)&v108 - 1) & 0x1AF456233693CD46;
              }
              __int32 v111 = *(void **)(*v107 + 8 * v110);
              if (!v111) {
                goto LABEL_162;
              }
              unint64_t v112 = (void *)*v111;
              if (!v112) {
                goto LABEL_162;
              }
              if (v109.u32[0] < 2uLL)
              {
                uint64_t v113 = *(void *)&v108 - 1;
                while (1)
                {
                  uint64_t v115 = v112[1];
                  if (v115 == 0x1AF456233693CD46)
                  {
                    if (v112[2] == 0x1AF456233693CD46) {
                      goto LABEL_160;
                    }
                  }
                  else if ((v115 & v113) != v110)
                  {
                    goto LABEL_162;
                  }
                  unint64_t v112 = (void *)*v112;
                  if (!v112) {
                    goto LABEL_162;
                  }
                }
              }
              while (2)
              {
                unint64_t v114 = v112[1];
                if (v114 != 0x1AF456233693CD46)
                {
                  if (v114 >= *(void *)&v108) {
                    v114 %= *(void *)&v108;
                  }
                  if (v114 != v110) {
                    goto LABEL_162;
                  }
                  goto LABEL_149;
                }
                if (v112[2] != 0x1AF456233693CD46)
                {
LABEL_149:
                  unint64_t v112 = (void *)*v112;
                  if (!v112) {
                    goto LABEL_162;
                  }
                  continue;
                }
                break;
              }
LABEL_160:
              uint64_t v116 = v112[5];
              if (*(void *)(v116 + 8) == 0x1AF456233693CD46)
              {
                uint64_t v117 = *(void *)(v116 + 32);
                goto LABEL_163;
              }
LABEL_162:
              uint64_t v117 = 0;
LABEL_163:
              *(void *)(v14 + 32) = this[46][35];
              v684 = (double *)v117;
              float v671 = fmaxf(*(float *)(v117 + 3080) + *(float *)(v117 + 3076), 1.0);
              uint64_t v118 = this[34];
              v673 = this[35];
              if (v118 != v673)
              {
                float v119 = 1.0 / v106;
                if ((int)v671 >= 0x17) {
                  unsigned int v120 = 23;
                }
                else {
                  unsigned int v120 = (int)v671;
                }
                float32x4_t v680 = (float32x4_t)vdupq_n_s32(0x37800080u);
                unsigned int v709 = v120;
                while (2)
                {
                  uint64_t v121 = (void *)*v118;
                  uint64_t v122 = *(void *)(*v118 + 384);
                  uint64_t v123 = 8;
                  if (!*((unsigned char *)this + 360)) {
                    uint64_t v123 = 7;
                  }
                  uint64_t v124 = this[46][v123];
                  unint64_t v125 = (std::__shared_weak_count *)v121[28];
                  v721 = (std::__shared_weak_count *)v121[27];
                  v722 = v125;
                  if (v125) {
                    atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  unint64_t v126 = (std::__shared_weak_count *)v121[30];
                  uint16x4_t v725 = (uint16x4_t)v121[29];
                  v726 = v126;
                  if (v126) {
                    atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v127 = *(uint64_t ***)(v122 + 776);
                  v701 = *(uint64_t ***)(v122 + 784);
                  if (v127 == v701) {
                    goto LABEL_330;
                  }
                  v676 = v118;
                  int v128 = (*(unsigned char *)(v122 + 169) + *((unsigned char *)this[46] + 288));
LABEL_178:
                  uint64_t v129 = **v127;
                  uint64_t v130 = (std::__shared_weak_count *)(*v127)[1];
                  v727.n128_u64[0] = v129;
                  v727.n128_u64[1] = (unint64_t)v130;
                  if (v130)
                  {
                    atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
                    v716 = (uint64_t *)v130;
                    atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  else
                  {
                    v716 = 0;
                  }
                  v715 = (uint64_t *)v129;
                  uint64_t v717 = 0;
                  v718 = 0;
                  unsigned __int8 v719 = 0;
                  if (v129) {
                    LODWORD(v129) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v129 + 48))(v129, &v717);
                  }
                  unsigned __int8 v719 = v129;
                  if (v130)
                  {
                    if (!atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                    LODWORD(v129) = v719;
                  }
                  if (v129)
                  {
                    uint64_t v131 = v715[3];
                    uint64_t v132 = *(float **)v131;
                    if (*(void *)v131
                      && (float v133 = *v132, LODWORD(v132) = *v132 == 1.0, *(unsigned char *)(v131 + 10))
                      && (v133 != 0.0 ? (_ZF = v133 == 1.0) : (_ZF = 1), !_ZF)
                      || (v135 = *(unsigned __int8 *)(v131 + v132 + 11), float v133 = 0.0, v135 == 2))
                    {
                      v727.n128_u8[0] = 1;
                      LOBYTE(v713) = 1;
                      float v136 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v131, 0x8Bu, v120, 0, &v727);
                      float v137 = v136
                           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v131, 0x8Bu, v120, 1u, &v713)- v136)* v133);
                    }
                    else
                    {
                      float v137 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v715[3], 0x8Bu, v120, v135, 0);
                    }
                  }
                  else
                  {
                    float v137 = 0.0;
                  }
                  float v138 = v137 + v137;
                  if ((float)(v137 + v137) <= 0.0) {
                    goto LABEL_320;
                  }
                  uint64_t v139 = this[46][3];
                  uint64_t v140 = *(void *)(v139 + 8);
                  if (v140 != *(void *)v139)
                  {
                    uint64_t v141 = *(void *)(v140 - 8);
                    *(void *)(v139 + 8) = v140 - 8;
                    uint64_t v142 = *(uint64_t **)(v139 + 40);
                    unint64_t v143 = *(void *)(v139 + 48);
                    if ((unint64_t)v142 < v143)
                    {
                      if (v142) {
                        *uint64_t v142 = v141;
                      }
                      uint64_t v144 = v142 + 1;
                      unsigned int v145 = v709;
                      goto LABEL_253;
                    }
                    uint64_t v150 = *(void *)(v139 + 32);
                    uint64_t v151 = ((uint64_t)v142 - v150) >> 3;
                    unint64_t v152 = v151 + 1;
                    unsigned int v145 = v709;
                    if ((unint64_t)(v151 + 1) >> 61) {
                      goto LABEL_929;
                    }
                    uint64_t v153 = v143 - v150;
                    if (v153 >> 2 > v152) {
                      unint64_t v152 = v153 >> 2;
                    }
                    if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
                      uint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v154 = v152;
                    }
                    if (v154)
                    {
                      uint64_t v155 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v139 + 56) + 16))(*(void *)(v139 + 56), 8 * v154, 8);
                      unint64_t v156 = (uint64_t *)(v155 + 8 * v151);
                      uint64_t v157 = v155 + 8 * v154;
                      if (v155) {
                        *unint64_t v156 = v141;
                      }
                    }
                    else
                    {
                      uint64_t v157 = 0;
                      unint64_t v156 = (uint64_t *)(8 * v151);
                    }
                    uint64_t v165 = *(void *)(v139 + 32);
                    uint64_t v164 = *(void *)(v139 + 40);
                    uint64_t v166 = v164 - v165;
                    if (v164 != v165)
                    {
                      unint64_t v167 = v166 - 8;
                      if ((unint64_t)(v166 - 8) < 0x38)
                      {
                        BOOL v168 = v156;
                      }
                      else
                      {
                        BOOL v168 = v156;
                        if ((unint64_t)(v164 - (void)v156) >= 0x20)
                        {
                          uint64_t v169 = (v167 >> 3) + 1;
                          unint64_t v170 = v156 - 2;
                          uint64_t v171 = (long long *)(v164 - 16);
                          uint64_t v172 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v173 = *v171;
                            *((_OWORD *)v170 - 1) = *(v171 - 1);
                            *(_OWORD *)unint64_t v170 = v173;
                            v170 -= 4;
                            v171 -= 2;
                            v172 -= 4;
                          }
                          while (v172);
                          BOOL v168 = &v156[-(v169 & 0x3FFFFFFFFFFFFFFCLL)];
                          v164 -= 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v169 == (v169 & 0x3FFFFFFFFFFFFFFCLL)) {
                            goto LABEL_250;
                          }
                        }
                      }
                      do
                      {
                        uint64_t v182 = *(void *)(v164 - 8);
                        v164 -= 8;
                        *--BOOL v168 = v182;
                      }
                      while (v164 != v165);
                      goto LABEL_250;
                    }
LABEL_244:
                    BOOL v168 = v156;
LABEL_251:
                    uint64_t v144 = v156 + 1;
                    *(void *)(v139 + 32) = v168;
                    *(void *)(v139 + 40) = v156 + 1;
                    uint64_t v184 = *(void *)(v139 + 48);
                    *(void *)(v139 + 48) = v157;
                    if (v164) {
                      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v139 + 56) + 40))(*(void *)(v139 + 56), v164, v184 - v164);
                    }
LABEL_253:
                    *(void *)(v139 + 40) = v144;
                    v727.n128_u64[0] = v141;
                    uint64_t v185 = *(void *)(v139 + 120);
                    if (!v185) {
                      goto LABEL_930;
                    }
                    (*(void (**)(uint64_t, __n128 *))(*(void *)v185 + 48))(v185, &v727);
                    unint64_t v186 = *(std::__shared_weak_count ***)(v141 + 64);
                    uint64_t v187 = v721;
                    *unint64_t v186 = v721;
                    v186[1] = 0;
                    uint64_t v188 = *(std::__shared_weak_count ***)(v141 + 160);
                    unint64_t v189 = v722;
                    if (v722) {
                      atomic_fetch_add_explicit(&v722->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    unint64_t v190 = v188[1];
                    *uint64_t v188 = v187;
                    v188[1] = v189;
                    if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                      std::__shared_weak_count::__release_weak(v190);
                    }
                    unint64_t v191 = *(uint16x4_t **)(v141 + 64);
                    uint16x4_t v192 = v725;
                    uint64_t v193 = v726;
                    v191[2] = v725;
                    v191[3] = 0;
                    uint64_t v194 = *(void *)(v141 + 160);
                    if (v193) {
                      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    unint64_t v195 = *(std::__shared_weak_count **)(v194 + 24);
                    *(uint16x4_t *)(v194 + 16) = v192;
                    *(void *)(v194 + 24) = v193;
                    if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                      if (!v719) {
                        goto LABEL_274;
                      }
LABEL_264:
                      uint64_t v196 = v715[3];
                      uint64_t v197 = *(float **)v196;
                      if (*(void *)v196
                        && (float v198 = *v197, LODWORD(v197) = *v197 == 1.0, *(unsigned char *)(v196 + 10))
                        && (v198 != 0.0 ? (BOOL v199 = v198 == 1.0) : (BOOL v199 = 1), !v199)
                        || (v200 = *(unsigned __int8 *)(v196 + v197 + 11), float v198 = 0.0, v200 == 2))
                      {
                        v727.n128_u8[0] = 1;
                        LOBYTE(v713) = 1;
                        float v201 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v196, 0x8Cu, v145, 0, &v727);
                        float v202 = v201
                             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v196, 0x8Cu, v145, 1u, &v713)- v201)* v198);
                      }
                      else
                      {
                        float v202 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v715[3], 0x8Cu, v145, v200, 0);
                      }
                    }
                    else
                    {
                      if (v719) {
                        goto LABEL_264;
                      }
LABEL_274:
                      float v202 = 0.0;
                    }
                    double v203 = v202;
                    double v204 = v684[389];
                    double v205 = -v204;
                    double v206 = v684[390];
                    double v207 = v684[391];
                    if (fabs(v203) <= 0.5)
                    {
                      double v210 = -v206;
                    }
                    else
                    {
                      __double2 v208 = __sincos_stret(v203 * 0.0174532925);
                      double v209 = v204 * v208.__cosval;
                      double v210 = -(v206 * v208.__cosval - v208.__sinval * v205);
                      double v205 = -(v209 - v206 * v208.__sinval);
                    }
                    unint64_t v211 = *(void *)(*(void *)(v141 + 64) + 32);
                    __n128 v727 = 0uLL;
                    uint64_t v212 = *(std::__shared_weak_count **)(v211 + 8);
                    if (v212) {
                      uint64_t v213 = *(float32x4_t **)(v211 + 72);
                    }
                    else {
                      uint64_t v213 = 0;
                    }
                    v214.n128_u64[0] = 0;
                    v214.n128_u64[1] = v211;
                    __n128 v689 = v214;
                    __n128 v727 = v214;
                    v728 = 0;
                    v729 = v212;
                    v731 = v213;
                    __int16 v730 = 1;
                    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v713, v715[3], 0x8Du, v145, 2u, 0);
                    *uint64_t v213 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v713)), v680);
                    float32_t v215 = v205;
                    float32_t v216 = v210;
                    float v217 = v207;
                    v213[2].f32[0] = v215;
                    v213[2].f32[1] = v216;
                    v213[2].f32[2] = -v217;
                    v213[1].f32[0] = v138 * v119;
                    if (v212)
                    {
                      if (v689.n128_u64[0] && *(unsigned char *)(v689.n128_u64[1] + 17) != 2) {
                        (*(void (**)(void))(*(void *)v689.n128_u64[0] + 64))();
                      }
                      uint64_t v218 = *(std::__shared_weak_count **)(v689.n128_u64[1] + 64);
                      if (v218 <= v212) {
                        uint64_t v218 = v212;
                      }
                      *(void *)(v689.n128_u64[1] + 56) = 0;
                      *(void *)(v689.n128_u64[1] + 64) = v218;
                    }
                    long long v219 = (void *)(*v127)[2];
                    float32x2_t v220 = (void *)*v219;
                    if (*(void *)(**(void **)(*(void *)*v219 + 64) + 48) != *(void *)(**(void **)(*(void *)*v219 + 64)
                                                                                                 + 40))
                    {
                      float v221 = (void *)v219[1];
                      while (v220 != v221)
                      {
                        uint64_t v223 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                        uint64_t v224 = v223;
                        *(void *)(v223 + 24) = v124;
                        *(void *)(v223 + 32) = v141;
                        *(void *)(v223 + 64) = *v220;
                        *(_DWORD *)(v223 + 40) = v128;
                        int v225 = *(uint64_t **)(v14 + 80);
                        unint64_t v226 = *(void *)(v14 + 88);
                        if ((unint64_t)v225 < v226)
                        {
                          if (v225) {
                            *int v225 = v223;
                          }
                          unint64_t v222 = v225 + 1;
                          goto LABEL_292;
                        }
                        uint64_t v227 = *(void *)(v14 + 72);
                        uint64_t v228 = ((uint64_t)v225 - v227) >> 3;
                        unint64_t v229 = v228 + 1;
                        if ((unint64_t)(v228 + 1) >> 61) {
                          abort();
                        }
                        uint64_t v230 = v226 - v227;
                        if (v230 >> 2 > v229) {
                          unint64_t v229 = v230 >> 2;
                        }
                        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8) {
                          uint64_t v231 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          uint64_t v231 = v229;
                        }
                        if (v231)
                        {
                          uint64_t v232 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 16))(*(void *)(v14 + 96), 8 * v231, 8);
                          long long v233 = (uint64_t *)(v232 + 8 * v228);
                          uint64_t v234 = v232 + 8 * v231;
                          if (v232) {
                            uint64_t *v233 = v224;
                          }
                        }
                        else
                        {
                          uint64_t v234 = 0;
                          long long v233 = (uint64_t *)(8 * v228);
                        }
                        uint64_t v236 = *(void *)(v14 + 72);
                        uint64_t v235 = *(void *)(v14 + 80);
                        uint64_t v237 = v235 - v236;
                        if (v235 == v236)
                        {
                          int v239 = v233;
                          goto LABEL_318;
                        }
                        unint64_t v238 = v237 - 8;
                        if ((unint64_t)(v237 - 8) < 0x38)
                        {
                          int v239 = v233;
                        }
                        else
                        {
                          int v239 = v233;
                          if ((unint64_t)(v235 - (void)v233) >= 0x20)
                          {
                            uint64_t v240 = (v238 >> 3) + 1;
                            long long v241 = v233 - 2;
                            long long v242 = (long long *)(v235 - 16);
                            uint64_t v243 = v240 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v244 = *v242;
                              *((_OWORD *)v241 - 1) = *(v242 - 1);
                              *(_OWORD *)long long v241 = v244;
                              v241 -= 4;
                              v242 -= 2;
                              v243 -= 4;
                            }
                            while (v243);
                            int v239 = &v233[-(v240 & 0x3FFFFFFFFFFFFFFCLL)];
                            v235 -= 8 * (v240 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v240 == (v240 & 0x3FFFFFFFFFFFFFFCLL)) {
                              goto LABEL_317;
                            }
                          }
                        }
                        do
                        {
                          uint64_t v245 = *(void *)(v235 - 8);
                          v235 -= 8;
                          *--int v239 = v245;
                        }
                        while (v235 != v236);
LABEL_317:
                        uint64_t v235 = *(void *)(v14 + 72);
LABEL_318:
                        unint64_t v222 = v233 + 1;
                        *(void *)(v14 + 72) = v239;
                        *(void *)(v14 + 80) = v233 + 1;
                        uint64_t v246 = *(void *)(v14 + 88);
                        *(void *)(v14 + 88) = v234;
                        if (v235) {
                          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 40))(*(void *)(v14 + 96), v235, v246 - v235);
                        }
LABEL_292:
                        *(void *)(v14 + 80) = v222;
                        ++v220;
                      }
                    }
LABEL_320:
                    if (v719) {
                      (*(void (**)(uint64_t *))(*v715 + 56))(v715);
                    }
                    long long v247 = (std::__shared_weak_count *)v718;
                    if (v718 && !atomic_fetch_add(v718 + 1, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                      std::__shared_weak_count::__release_weak(v247);
                      uint64_t v248 = (std::__shared_weak_count *)v716;
                      if (v716) {
                        goto LABEL_325;
                      }
                    }
                    else
                    {
                      uint64_t v248 = (std::__shared_weak_count *)v716;
                      if (v716)
                      {
LABEL_325:
                        if (!atomic_fetch_add(&v248->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                          std::__shared_weak_count::__release_weak(v248);
                        }
                      }
                    }
                    ++v127;
                    unsigned int v120 = v709;
                    if (v127 == v701)
                    {
                      unint64_t v126 = v726;
                      uint64_t v118 = v676;
LABEL_330:
                      if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                      uint64_t v249 = v722;
                      if (v722 && !atomic_fetch_add(&v722->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                        std::__shared_weak_count::__release_weak(v249);
                      }
                      if (++v118 == v673) {
                        goto LABEL_336;
                      }
                      continue;
                    }
                    goto LABEL_178;
                  }
                  break;
                }
                uint64_t v146 = *(void *)(v139 + 88);
                unsigned int v145 = v709;
                if (!v146) {
                  goto LABEL_930;
                }
                uint64_t v147 = (*(uint64_t (**)(uint64_t))(*(void *)v146 + 48))(v146);
                uint64_t v141 = v147;
                unint64_t v148 = *(uint64_t **)(v139 + 40);
                unint64_t v149 = *(void *)(v139 + 48);
                if ((unint64_t)v148 < v149)
                {
                  if (v148) {
                    *unint64_t v148 = v147;
                  }
                  uint64_t v144 = v148 + 1;
                  goto LABEL_253;
                }
                uint64_t v158 = *(void *)(v139 + 32);
                uint64_t v159 = ((uint64_t)v148 - v158) >> 3;
                unint64_t v160 = v159 + 1;
                if ((unint64_t)(v159 + 1) >> 61) {
LABEL_929:
                }
                  abort();
                uint64_t v161 = v149 - v158;
                if (v161 >> 2 > v160) {
                  unint64_t v160 = v161 >> 2;
                }
                if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
                  uint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v162 = v160;
                }
                if (v162)
                {
                  uint64_t v163 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v139 + 56) + 16))(*(void *)(v139 + 56), 8 * v162, 8);
                  unint64_t v156 = (uint64_t *)(v163 + 8 * v159);
                  uint64_t v157 = v163 + 8 * v162;
                  if (v163) {
                    *unint64_t v156 = v141;
                  }
                }
                else
                {
                  uint64_t v157 = 0;
                  unint64_t v156 = (uint64_t *)(8 * v159);
                }
                uint64_t v174 = *(void *)(v139 + 32);
                uint64_t v164 = *(void *)(v139 + 40);
                uint64_t v175 = v164 - v174;
                if (v164 == v174) {
                  goto LABEL_244;
                }
                unint64_t v176 = v175 - 8;
                if ((unint64_t)(v175 - 8) < 0x38)
                {
                  BOOL v168 = v156;
                }
                else
                {
                  BOOL v168 = v156;
                  if ((unint64_t)(v164 - (void)v156) >= 0x20)
                  {
                    uint64_t v177 = (v176 >> 3) + 1;
                    long long v178 = v156 - 2;
                    long long v179 = (long long *)(v164 - 16);
                    uint64_t v180 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v181 = *v179;
                      *((_OWORD *)v178 - 1) = *(v179 - 1);
                      *(_OWORD *)long long v178 = v181;
                      v178 -= 4;
                      v179 -= 2;
                      v180 -= 4;
                    }
                    while (v180);
                    BOOL v168 = &v156[-(v177 & 0x3FFFFFFFFFFFFFFCLL)];
                    v164 -= 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_250;
                    }
                  }
                }
                do
                {
                  uint64_t v183 = *(void *)(v164 - 8);
                  v164 -= 8;
                  *--BOOL v168 = v183;
                }
                while (v164 != v174);
LABEL_250:
                uint64_t v164 = *(void *)(v139 + 32);
                goto LABEL_251;
              }
LABEL_336:
              unint64_t v250 = +[VKPlatform sharedPlatform];
              int v251 = [v250 supportsCoastlineGlows];

              if (!v251) {
                goto LABEL_916;
              }
              v253 = this[34];
              v702 = this[35];
              if (v253 == v702) {
                goto LABEL_916;
              }
              char v254 = 0;
              v669 = (float64x2_t *)(v684 + 350);
              if ((int)v671 >= 0x17) {
                unsigned int v255 = 23;
              }
              else {
                unsigned int v255 = (int)v671;
              }
LABEL_342:
              char v674 = v254;
              char v256 = v254;
              while (2)
              {
                v710 = v253;
                uint64_t v257 = *(void *)(*v253 + 384);
                v258 = *(uint64_t ***)(v257 + 776);
                v259 = *(uint64_t ***)(v257 + 784);
                if (v258 == v259)
                {
LABEL_414:
                  v253 = v710 + 1;
                  if (v710 + 1 != v702) {
                    continue;
                  }
                  char v254 = v674;
                  if (v256) {
                    goto LABEL_416;
                  }
                  goto LABEL_916;
                }
                break;
              }
              while (2)
              {
                uint64_t isSuperset = **v258;
                uint64_t v260 = (std::__shared_weak_count *)(*v258)[1];
                v715 = (uint64_t *)isSuperset;
                v716 = (uint64_t *)v260;
                if (v260)
                {
                  atomic_fetch_add_explicit(&v260->__shared_owners_, 1uLL, memory_order_relaxed);
                  v727.n128_u64[1] = (unint64_t)v260;
                  atomic_fetch_add_explicit(&v260->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                else
                {
                  v727.n128_u64[1] = 0;
                }
                v727.n128_u64[0] = isSuperset;
                v728 = 0;
                v729 = 0;
                LOBYTE(v730) = 0;
                if (isSuperset) {
                  uint64_t isSuperset = (*(uint64_t (**)(uint64_t, void **))(*(void *)isSuperset + 48))(isSuperset, &v728);
                }
                LOBYTE(v730) = isSuperset;
                if (v260)
                {
                  if (!atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                    std::__shared_weak_count::__release_weak(v260);
                  }
                  uint64_t isSuperset = v730;
                }
                float v261 = 0.0;
                float v262 = 0.0;
                if (isSuperset)
                {
                  uint64_t v263 = *(void *)(v727.n128_u64[0] + 24);
                  v264 = *(float **)v263;
                  if (*(void *)v263
                    && (float v265 = *v264, LODWORD(v264) = *v264 == 1.0, *(unsigned char *)(v263 + 10))
                    && (v265 != 0.0 ? (BOOL v266 = v265 == 1.0) : (BOOL v266 = 1), !v266)
                    || (unsigned int v267 = *(unsigned __int8 *)(v263 + v264 + 11), v265 = 0.0, v267 == 2))
                  {
                    LOBYTE(v715) = 1;
                    LOBYTE(v721) = 1;
                    float v268 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v263, 0x8Eu, v255, 0, &v715);
                    uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v263, 0x8Eu, v255, 1u, &v721);
                    float v262 = v268 + (float)((float)(*(float *)isSuperset - v268) * v265);
                    goto LABEL_363;
                  }
                  uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 0x8Eu, v255, v267, 0);
                  float v262 = *(float *)isSuperset;
                  if (!(_BYTE)v730)
                  {
LABEL_384:
                    float v282 = 0.0;
                    float v275 = 0.0;
                    goto LABEL_398;
                  }
                }
                else
                {
LABEL_363:
                  if (!(_BYTE)v730) {
                    goto LABEL_384;
                  }
                }
                uint64_t v269 = *(void *)(v727.n128_u64[0] + 24);
                uint64_t v270 = *(float **)v269;
                if (*(void *)v269
                  && (float v271 = *v270, LODWORD(v270) = *v270 == 1.0, *(unsigned char *)(v269 + 10))
                  && (v271 != 0.0 ? (BOOL v272 = v271 == 1.0) : (BOOL v272 = 1), !v272)
                  || (v273 = *(unsigned __int8 *)(v269 + v270 + 11), float v271 = 0.0, v273 == 2))
                {
                  LOBYTE(v715) = 1;
                  LOBYTE(v721) = 1;
                  float v274 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v269, 0, v255, 0, &v715);
                  uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v269, 0, v255, 1u, &v721);
                  float v275 = v274 + (float)((float)(*(float *)isSuperset - v274) * v271);
                  if ((_BYTE)v730)
                  {
LABEL_373:
                    uint64_t v276 = *(void *)(v727.n128_u64[0] + 24);
                    unint64_t v277 = *(float **)v276;
                    if (*(void *)v276
                      && (float v278 = *v277, LODWORD(v277) = *v277 == 1.0, *(unsigned char *)(v276 + 10))
                      && (v278 != 0.0 ? (BOOL v279 = v278 == 1.0) : (BOOL v279 = 1), !v279)
                      || (v280 = *(unsigned __int8 *)(v276 + v277 + 11), float v278 = 0.0, v280 == 2))
                    {
                      LOBYTE(v715) = 1;
                      LOBYTE(v721) = 1;
                      float v281 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v276, 0x8Fu, v255, 0, &v715);
                      uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v276, 0x8Fu, v255, 1u, &v721);
                      float v282 = v281 + (float)((float)(*(float *)isSuperset - v281) * v278);
                      if (!(_BYTE)v730) {
                        goto LABEL_398;
                      }
                    }
                    else
                    {
                      uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 0x8Fu, v255, v280, 0);
                      float v282 = *(float *)isSuperset;
                      if (!(_BYTE)v730) {
                        goto LABEL_398;
                      }
                    }
                    uint64_t v283 = *(void *)(v727.n128_u64[0] + 24);
                    float32x4_t v284 = *(float **)v283;
                    if (*(void *)v283
                      && (float v285 = *v284, LODWORD(v284) = *v284 == 1.0, *(unsigned char *)(v283 + 10))
                      && (v285 != 0.0 ? (BOOL v286 = v285 == 1.0) : (BOOL v286 = 1), !v286)
                      || (v287 = *(unsigned __int8 *)(v283 + v284 + 11), float v285 = 0.0, v287 == 2))
                    {
                      LOBYTE(v715) = 1;
                      LOBYTE(v721) = 1;
                      float v288 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v283, 1u, v255, 0, &v715);
                      uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v283, 1u, v255, 1u, &v721);
                      float v261 = v288 + (float)((float)(*(float *)isSuperset - v288) * v285);
                    }
                    else
                    {
                      uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 1u, v255, v287, 0);
                      float v261 = *(float *)isSuperset;
                    }
LABEL_398:
                    BOOL v289 = v275 > 0.0019531 && v262 > 0.0019531;
                    BOOL v290 = v261 <= 0.0019531 || v282 <= 0.0019531;
                    if ((_BYTE)v730) {
                      uint64_t isSuperset = (*(uint64_t (**)(unint64_t))(*(void *)v727.n128_u64[0] + 56))(v727.n128_u64[0]);
                    }
                    float32x4_t v291 = v729;
                    if (v729 && !atomic_fetch_add(&v729->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                      std::__shared_weak_count::__release_weak(v291);
                    }
                    float32x4_t v292 = (std::__shared_weak_count *)v727.n128_u64[1];
                    if (v727.n128_u64[1]
                      && !atomic_fetch_add((atomic_ullong *volatile)(v727.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                      std::__shared_weak_count::__release_weak(v292);
                    }
                    if (v290)
                    {
                      v256 |= v289;
                      if (++v258 == v259) {
                        goto LABEL_414;
                      }
                      continue;
                    }
                    v253 = v710 + 1;
                    char v254 = 1;
                    if (v710 + 1 != v702) {
                      goto LABEL_342;
                    }
LABEL_416:
                    char v675 = v254;
                    float32x4_t v293 = this[34];
                    v677 = this[35];
                    unsigned int v711 = v255;
                    if (v293 != v677)
                    {
                      while (2)
                      {
                        float32x4_t v294 = (void *)*v293;
                        float32x4_t v295 = *(unsigned char **)(*v293 + 384);
                        uint64_t v296 = gss::Allocator::instance((gss::Allocator *)isSuperset);
                        v729 = (std::__shared_weak_count *)v296;
                        v297 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v296 + 16))(v296, 16, 4);
                        float32x2_t v298 = v297;
                        v727.n128_u64[0] = (unint64_t)v297;
                        v728 = v297 + 2;
                        if (v297) {
                          void *v297 = 0x200000005;
                        }
                        v297[1] = 0x1200000003;
                        v727.n128_u64[1] = (unint64_t)(v297 + 2);
                        gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v715, (uint64_t)&v727);
                        v690 = v294;
                        v681 = v293;
                        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v296 + 40))(v296, v298, 16);
                        char v299 = *((unsigned char *)this[46] + 288);
                        char v300 = v295[169];
                        uint64_t isSuperset = (*(uint64_t (**)(unsigned char *))(*(void *)v295 + 48))(v295);
                        uint64_t v301 = *(void *)isSuperset;
                        uint64_t v703 = *(void *)(isSuperset + 8);
                        if (*(void *)isSuperset != v703)
                        {
                          int v302 = (v300 + v299) | 0x40;
                          while (1)
                          {
                            id v303 = *(id *)(v301 + 8);
                            md::createFeatureAttributeSet((gss::Allocator *)&v721, *(uint64_t **)([v303 attributeSets] + 24));

                            uint64_t isSuperset = gss::FeatureAttributeSet::isSuperset((gss::FeatureAttributeSet *)&v721, (const gss::FeatureAttributeSet *)&v715);
                            if (isSuperset) {
                              break;
                            }
LABEL_475:
                            if (v721)
                            {
                              v722 = v721;
                              uint64_t isSuperset = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v724 + 40))(v724, v721, v723 - (void)v721);
                            }
                            v301 += 24;
                            if (v301 == v703) {
                              goto LABEL_477;
                            }
                          }
                          uint64_t v304 = ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::pop(this[46][2]);
                          uint64_t v305 = *(void **)(v304 + 64);
                          v305[1] = 0;
                          uint64_t v306 = v690[27];
                          *uint64_t v305 = v306;
                          uint64_t v307 = *(void **)(v304 + 160);
                          uint64_t v308 = v690[28];
                          if (v308) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v308 + 8), 1uLL, memory_order_relaxed);
                          }
                          v309 = (std::__shared_weak_count *)v307[1];
                          *uint64_t v307 = v306;
                          v307[1] = v308;
                          if (v309 && !atomic_fetch_add(&v309->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                            std::__shared_weak_count::__release_weak(v309);
                          }
                          uint64_t v310 = *(void *)(v304 + 64);
                          *(void *)(v310 + 24) = 0;
                          uint64_t v311 = v690[29];
                          *(void *)(v310 + 16) = v311;
                          uint64_t v312 = *(void *)(v304 + 160);
                          uint64_t v313 = v690[30];
                          if (v313) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v313 + 8), 1uLL, memory_order_relaxed);
                          }
                          v314 = *(std::__shared_weak_count **)(v312 + 24);
                          *(void *)(v312 + 16) = v311;
                          *(void *)(v312 + 24) = v313;
                          if (v314 && !atomic_fetch_add(&v314->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                            std::__shared_weak_count::__release_weak(v314);
                          }
                          **(void **)(v304 + 96) = this[46][28];
                          unint64_t v315 = *(void *)(*(void *)(v304 + 64) + 32);
                          __n128 v727 = 0uLL;
                          uint64_t v316 = *(std::__shared_weak_count **)(v315 + 8);
                          if (v316) {
                            uint64_t v317 = *(void *)(v315 + 72);
                          }
                          else {
                            uint64_t v317 = 0;
                          }
                          v318.n128_u64[0] = 0;
                          v318.n128_u64[1] = v315;
                          __n128 v696 = v318;
                          __n128 v727 = v318;
                          v728 = 0;
                          v729 = v316;
                          v731 = (float32x4_t *)v317;
                          __int16 v730 = 1;
                          *(_OWORD *)(v317 + 64) = xmmword_1A28FCDD0;
                          id v319 = *(id *)(v301 + 8);
                          *(void *)(v317 + 88) = *(void *)[v319 origin];

                          id v320 = *(id *)(v301 + 8);
                          [v320 size];
                          *(_DWORD *)(v317 + 96) = v321;
                          *(_DWORD *)(v317 + 100) = v322;

                          *(_DWORD *)(v317 + 80) = 1065353216;
                          *(_DWORD *)uint64_t v317 = 1065353216;
                          *(void *)(v317 + 12) = 0;
                          *(void *)(v317 + 4) = 0;
                          *(_DWORD *)(v317 + 20) = 1065353216;
                          *(void *)(v317 + 24) = 0;
                          *(void *)(v317 + 32) = 0;
                          *(_DWORD *)(v317 + 40) = 1065353216;
                          *(void *)(v317 + 52) = 0;
                          *(void *)(v317 + 44) = 0;
                          *(_DWORD *)(v317 + 60) = 1065353216;
                          if (v316)
                          {
                            if (v696.n128_u64[0] && *(unsigned char *)(v696.n128_u64[1] + 17) != 2) {
                              (*(void (**)(void))(*(void *)v696.n128_u64[0] + 64))();
                            }
                            uint64_t v323 = *(std::__shared_weak_count **)(v696.n128_u64[1] + 64);
                            if (v323 <= v316) {
                              uint64_t v323 = v316;
                            }
                            *(void *)(v696.n128_u64[1] + 56) = 0;
                            *(void *)(v696.n128_u64[1] + 64) = v323;
                          }
                          id v324 = *(id *)(v301 + 8);
                          uint64_t v325 = [v324 fillMeshes];

                          long long v327 = *(void **)v325;
                          uint64_t v326 = *(void **)(v325 + 8);
                          while (2)
                          {
                            if (v327 == v326) {
                              goto LABEL_475;
                            }
                            uint64_t isSuperset = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][13]);
                            uint64_t v329 = isSuperset;
                            *(void *)(isSuperset + 24) = this[46][4];
                            *(void *)(isSuperset + 32) = v304;
                            *(void *)(isSuperset + 64) = *v327;
                            *(_DWORD *)(isSuperset + 40) = v302;
                            v330 = *(uint64_t **)(v14 + 80);
                            unint64_t v331 = *(void *)(v14 + 88);
                            if ((unint64_t)v330 < v331)
                            {
                              if (v330) {
                                uint64_t *v330 = isSuperset;
                              }
                              int v328 = v330 + 1;
LABEL_447:
                              *(void *)(v14 + 80) = v328;
                              v327 += 2;
                              continue;
                            }
                            break;
                          }
                          uint64_t v332 = *(void *)(v14 + 72);
                          uint64_t v333 = ((uint64_t)v330 - v332) >> 3;
                          unint64_t v334 = v333 + 1;
                          if ((unint64_t)(v333 + 1) >> 61) {
                            abort();
                          }
                          uint64_t v335 = v331 - v332;
                          if (v335 >> 2 > v334) {
                            unint64_t v334 = v335 >> 2;
                          }
                          if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFF8) {
                            uint64_t v336 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v336 = v334;
                          }
                          if (v336)
                          {
                            uint64_t isSuperset = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96)
                                                                                             + 16))(*(void *)(v14 + 96), 8 * v336, 8);
                            v337 = (uint64_t *)(isSuperset + 8 * v333);
                            uint64_t v338 = isSuperset + 8 * v336;
                            if (isSuperset) {
                              uint64_t *v337 = v329;
                            }
                          }
                          else
                          {
                            uint64_t v338 = 0;
                            v337 = (uint64_t *)(8 * v333);
                          }
                          uint64_t v340 = *(void *)(v14 + 72);
                          uint64_t v339 = *(void *)(v14 + 80);
                          uint64_t v341 = v339 - v340;
                          if (v339 != v340)
                          {
                            unint64_t v342 = v341 - 8;
                            if ((unint64_t)(v341 - 8) < 0x38)
                            {
                              v343 = v337;
                            }
                            else
                            {
                              v343 = v337;
                              if ((unint64_t)(v339 - (void)v337) >= 0x20)
                              {
                                uint64_t v344 = (v342 >> 3) + 1;
                                v345 = v337 - 2;
                                v346 = (long long *)(v339 - 16);
                                uint64_t v347 = v344 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  long long v348 = *v346;
                                  *((_OWORD *)v345 - 1) = *(v346 - 1);
                                  *(_OWORD *)v345 = v348;
                                  v345 -= 4;
                                  v346 -= 2;
                                  v347 -= 4;
                                }
                                while (v347);
                                v343 = &v337[-(v344 & 0x3FFFFFFFFFFFFFFCLL)];
                                v339 -= 8 * (v344 & 0x3FFFFFFFFFFFFFFCLL);
                                if (v344 == (v344 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_472:
                                  uint64_t v339 = *(void *)(v14 + 72);
LABEL_473:
                                  int v328 = v337 + 1;
                                  *(void *)(v14 + 72) = v343;
                                  *(void *)(v14 + 80) = v337 + 1;
                                  uint64_t v350 = *(void *)(v14 + 88);
                                  *(void *)(v14 + 88) = v338;
                                  if (v339) {
                                    uint64_t isSuperset = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 40))(*(void *)(v14 + 96), v339, v350 - v339);
                                  }
                                  goto LABEL_447;
                                }
                              }
                            }
                            do
                            {
                              uint64_t v349 = *(void *)(v339 - 8);
                              v339 -= 8;
                              *--v343 = v349;
                            }
                            while (v339 != v340);
                            goto LABEL_472;
                          }
                          v343 = v337;
                          goto LABEL_473;
                        }
LABEL_477:
                        if (v715)
                        {
                          v716 = v715;
                          uint64_t isSuperset = (*(uint64_t (**)(atomic_ullong *, uint64_t *, uint64_t))(*v718 + 40))(v718, v715, v717 - (void)v715);
                        }
                        float32x4_t v293 = v681 + 1;
                        if (v681 + 1 != v677) {
                          continue;
                        }
                        break;
                      }
                      v351 = this[34];
                      v685 = this[35];
                      if (v351 != v685)
                      {
                        while (2)
                        {
                          v691 = v351;
                          v697 = (void *)*v351;
                          uint64_t v352 = *(void *)(*v351 + 384);
                          v353 = *(uint64_t ***)(v352 + 776);
                          v704 = *(uint64_t ***)(v352 + 784);
                          if (v353 != v704)
                          {
                            int v354 = (*(unsigned char *)(v352 + 169) + *((unsigned char *)this[46] + 288));
                            do
                            {
                              uint64_t v355 = **v353;
                              v356 = (std::__shared_weak_count *)(*v353)[1];
                              v715 = (uint64_t *)v355;
                              v716 = (uint64_t *)v356;
                              if (v356)
                              {
                                atomic_fetch_add_explicit(&v356->__shared_owners_, 1uLL, memory_order_relaxed);
                                v727.n128_u64[1] = (unint64_t)v356;
                                atomic_fetch_add_explicit(&v356->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              else
                              {
                                v727.n128_u64[1] = 0;
                              }
                              v727.n128_u64[0] = v355;
                              v728 = 0;
                              v729 = 0;
                              LOBYTE(v730) = 0;
                              if (v355) {
                                LODWORD(v355) = (*(uint64_t (**)(uint64_t, void **))(*(void *)v355 + 48))(v355, &v728);
                              }
                              LOBYTE(v730) = v355;
                              if (v356)
                              {
                                if (!atomic_fetch_add(&v356->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                                  std::__shared_weak_count::__release_weak(v356);
                                }
                                LODWORD(v355) = v730;
                              }
                              if (!v355) {
                                goto LABEL_562;
                              }
                              uint64_t v357 = *(void *)(v727.n128_u64[0] + 24);
                              v358 = *(float **)v357;
                              if (*(void *)v357)
                              {
                                float v359 = *v358;
                                LODWORD(v358) = *v358 == 1.0;
                                unsigned int v360 = v711;
                                if (*(unsigned char *)(v357 + 10))
                                {
                                  if (v359 != 0.0 && v359 != 1.0) {
                                    goto LABEL_505;
                                  }
                                }
                              }
                              else
                              {
                                unsigned int v360 = v711;
                              }
                              unsigned int v362 = *(unsigned __int8 *)(v357 + v358 + 11);
                              float v359 = 0.0;
                              if (v362 != 2)
                              {
                                float v364 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 0x8Eu, v360, v362, 0);
                                goto LABEL_507;
                              }
LABEL_505:
                              LOBYTE(v715) = 1;
                              LOBYTE(v721) = 1;
                              float v363 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v357, 0x8Eu, v360, 0, &v715);
                              float v364 = v363
                                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v357, 0x8Eu, v360, 1u, &v721)- v363)* v359);
LABEL_507:
                              uint64_t v365 = *(void *)(v727.n128_u64[0] + 24);
                              v366 = *(float **)v365;
                              if (*(void *)v365
                                && (float v367 = *v366, LODWORD(v366) = *v366 == 1.0, *(unsigned char *)(v365 + 10))
                                && (v367 != 0.0 ? (BOOL v368 = v367 == 1.0) : (BOOL v368 = 1), !v368)
                                || (v369 = *(unsigned __int8 *)(v365 + v366 + 11), float v367 = 0.0, v369 == 2))
                              {
                                LOBYTE(v715) = 1;
                                LOBYTE(v721) = 1;
                                float v370 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v365, 0, v360, 0, &v715);
                                float v371 = v370
                                     + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v365, 0, v360, 1u, &v721)- v370)* v367);
                                if (v364 > 0.0) {
                                  goto LABEL_518;
                                }
                              }
                              else
                              {
                                float v371 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 0, v360, v369, 0);
                                if (v364 > 0.0)
                                {
LABEL_518:
                                  if (v371 <= 0.0) {
                                    goto LABEL_562;
                                  }
                                  uint64_t v372 = ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>::pop(*this[46]);
                                  v373 = *(void **)(v372 + 64);
                                  v373[1] = 0;
                                  uint64_t v374 = v697[27];
                                  void *v373 = v374;
                                  v375 = *(void **)(v372 + 160);
                                  uint64_t v376 = v697[28];
                                  if (v376) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v376 + 8), 1uLL, memory_order_relaxed);
                                  }
                                  v377 = (std::__shared_weak_count *)v375[1];
                                  void *v375 = v374;
                                  v375[1] = v376;
                                  if (v377 && !atomic_fetch_add(&v377->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                                    std::__shared_weak_count::__release_weak(v377);
                                  }
                                  uint64_t v378 = *(void *)(v372 + 64);
                                  *(void *)(v378 + 24) = 0;
                                  uint64_t v379 = v697[29];
                                  *(void *)(v378 + 16) = v379;
                                  uint64_t v380 = *(void *)(v372 + 160);
                                  uint64_t v381 = v697[30];
                                  if (v381) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v381 + 8), 1uLL, memory_order_relaxed);
                                  }
                                  v382 = *(std::__shared_weak_count **)(v380 + 24);
                                  *(void *)(v380 + 16) = v379;
                                  *(void *)(v380 + 24) = v381;
                                  if (v382 && !atomic_fetch_add(&v382->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                                    std::__shared_weak_count::__release_weak(v382);
                                  }
                                  v383 = *(void **)(*(void *)(v372 + 64) + 32);
                                  unint64_t v384 = v383[1];
                                  v385 = (float *)v383[9];
                                  float *v385 = -v364;
                                  v385[1] = v371;
                                  if (v383[8] > v384) {
                                    unint64_t v384 = v383[8];
                                  }
                                  v383[7] = 0;
                                  v383[8] = v384;
                                  v386 = (void *)(*v353)[3];
                                  v387 = (void *)*v386;
                                  if (*(void *)(**(void **)(*(void *)*v386 + 64) + 48) == *(void *)(**(void **)(*(void *)*v386 + 64) + 40)) {
                                    goto LABEL_562;
                                  }
                                  v388 = (void *)v386[1];
                                  while (2)
                                  {
                                    if (v387 == v388) {
                                      goto LABEL_562;
                                    }
                                    uint64_t v390 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                                    uint64_t v391 = v390;
                                    *(void *)(v390 + 24) = this[46][11];
                                    *(void *)(v390 + 32) = v372;
                                    *(void *)(v390 + 64) = *v387;
                                    *(_DWORD *)(v390 + 40) = v354;
                                    v392 = *(uint64_t **)(v14 + 80);
                                    unint64_t v393 = *(void *)(v14 + 88);
                                    if ((unint64_t)v392 < v393)
                                    {
                                      if (v392) {
                                        uint64_t *v392 = v390;
                                      }
                                      v389 = v392 + 1;
LABEL_534:
                                      *(void *)(v14 + 80) = v389;
                                      ++v387;
                                      continue;
                                    }
                                    break;
                                  }
                                  uint64_t v394 = *(void *)(v14 + 72);
                                  uint64_t v395 = ((uint64_t)v392 - v394) >> 3;
                                  unint64_t v396 = v395 + 1;
                                  if ((unint64_t)(v395 + 1) >> 61) {
                                    abort();
                                  }
                                  uint64_t v397 = v393 - v394;
                                  if (v397 >> 2 > v396) {
                                    unint64_t v396 = v397 >> 2;
                                  }
                                  if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFF8) {
                                    uint64_t v398 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    uint64_t v398 = v396;
                                  }
                                  if (v398)
                                  {
                                    uint64_t v399 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96)
                                                                                               + 16))(*(void *)(v14 + 96), 8 * v398, 8);
                                    v400 = (uint64_t *)(v399 + 8 * v395);
                                    uint64_t v401 = v399 + 8 * v398;
                                    if (v399) {
                                      uint64_t *v400 = v391;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v401 = 0;
                                    v400 = (uint64_t *)(8 * v395);
                                  }
                                  uint64_t v403 = *(void *)(v14 + 72);
                                  uint64_t v402 = *(void *)(v14 + 80);
                                  uint64_t v404 = v402 - v403;
                                  if (v402 != v403)
                                  {
                                    unint64_t v405 = v404 - 8;
                                    if ((unint64_t)(v404 - 8) < 0x38)
                                    {
                                      v406 = v400;
                                    }
                                    else
                                    {
                                      v406 = v400;
                                      if ((unint64_t)(v402 - (void)v400) >= 0x20)
                                      {
                                        uint64_t v407 = (v405 >> 3) + 1;
                                        v408 = v400 - 2;
                                        v409 = (long long *)(v402 - 16);
                                        uint64_t v410 = v407 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          long long v411 = *v409;
                                          *((_OWORD *)v408 - 1) = *(v409 - 1);
                                          *(_OWORD *)v408 = v411;
                                          v408 -= 4;
                                          v409 -= 2;
                                          v410 -= 4;
                                        }
                                        while (v410);
                                        v406 = &v400[-(v407 & 0x3FFFFFFFFFFFFFFCLL)];
                                        v402 -= 8 * (v407 & 0x3FFFFFFFFFFFFFFCLL);
                                        if (v407 == (v407 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_559:
                                          uint64_t v402 = *(void *)(v14 + 72);
LABEL_560:
                                          v389 = v400 + 1;
                                          *(void *)(v14 + 72) = v406;
                                          *(void *)(v14 + 80) = v400 + 1;
                                          uint64_t v413 = *(void *)(v14 + 88);
                                          *(void *)(v14 + 88) = v401;
                                          if (v402) {
                                            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96)
                                          }
                                                                                             + 40))(*(void *)(v14 + 96), v402, v413 - v402);
                                          goto LABEL_534;
                                        }
                                      }
                                    }
                                    do
                                    {
                                      uint64_t v412 = *(void *)(v402 - 8);
                                      v402 -= 8;
                                      *--v406 = v412;
                                    }
                                    while (v402 != v403);
                                    goto LABEL_559;
                                  }
                                  v406 = v400;
                                  goto LABEL_560;
                                }
                              }
LABEL_562:
                              if ((_BYTE)v730) {
                                (*(void (**)(unint64_t))(*(void *)v727.n128_u64[0] + 56))(v727.n128_u64[0]);
                              }
                              v414 = v729;
                              if (v729 && !atomic_fetch_add(&v729->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                                std::__shared_weak_count::__release_weak(v414);
                              }
                              v415 = (std::__shared_weak_count *)v727.n128_u64[1];
                              if (v727.n128_u64[1]
                                && !atomic_fetch_add((atomic_ullong *volatile)(v727.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                                std::__shared_weak_count::__release_weak(v415);
                              }
                              ++v353;
                            }
                            while (v353 != v704);
                          }
                          v351 = v691 + 1;
                          if (v691 + 1 != v685) {
                            continue;
                          }
                          break;
                        }
                        v416 = this[34];
                        v678 = this[35];
                        if (v416 != v678)
                        {
                          __n128 v417 = (__n128)vdupq_n_s32(0x37800080u);
                          float32x4_t v686 = (float32x4_t)v417;
                          while (2)
                          {
                            uint64_t v418 = *v416;
                            uint64_t v419 = *(void *)(*v416 + 384);
                            v420 = *(std::__shared_weak_count **)(*v416 + 224);
                            v721 = *(std::__shared_weak_count **)(*v416 + 216);
                            v722 = v420;
                            if (v420) {
                              atomic_fetch_add_explicit(&v420->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v421 = *(std::__shared_weak_count **)(v418 + 240);
                            uint16x4_t v725 = *(uint16x4_t *)(v418 + 232);
                            v726 = v421;
                            if (v421) {
                              atomic_fetch_add_explicit(&v421->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v422 = *(uint64_t ***)(v419 + 776);
                            v705 = *(uint64_t ***)(v419 + 784);
                            if (v422 == v705) {
                              goto LABEL_674;
                            }
                            v682 = v416;
                            int v423 = (*(unsigned char *)(v419 + 169) + *((unsigned char *)this[46] + 288));
LABEL_580:
                            uint64_t v424 = **v422;
                            v425 = (std::__shared_weak_count *)(*v422)[1];
                            v727.n128_u64[0] = v424;
                            v727.n128_u64[1] = (unint64_t)v425;
                            if (v425)
                            {
                              atomic_fetch_add_explicit(&v425->__shared_owners_, 1uLL, memory_order_relaxed);
                              v716 = (uint64_t *)v425;
                              atomic_fetch_add_explicit(&v425->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            else
                            {
                              v716 = 0;
                            }
                            v715 = (uint64_t *)v424;
                            uint64_t v717 = 0;
                            v718 = 0;
                            unsigned __int8 v719 = 0;
                            if (v424) {
                              LODWORD(v424) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v424 + 48))(v424, &v717);
                            }
                            unsigned __int8 v719 = v424;
                            if (v425)
                            {
                              if (!atomic_fetch_add(&v425->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
                                std::__shared_weak_count::__release_weak(v425);
                              }
                              LODWORD(v424) = v719;
                            }
                            if (!v424) {
                              goto LABEL_665;
                            }
                            uint64_t v426 = v715[3];
                            v427 = *(float **)v426;
                            if (*(void *)v426)
                            {
                              float v428 = *v427;
                              LODWORD(v427) = *v427 == 1.0;
                              unsigned int v429 = v711;
                              if (*(unsigned char *)(v426 + 10))
                              {
                                if (v428 != 0.0 && v428 != 1.0)
                                {
LABEL_600:
                                  v727.n128_u8[0] = 1;
                                  LOBYTE(v713) = 1;
                                  float v432 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v426, 0x8Eu, v429, 0, &v727);
                                  float v433 = v432
                                       + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v426, 0x8Eu, v429, 1u, &v713)- v432)* v428);
                                  goto LABEL_602;
                                }
                              }
                            }
                            else
                            {
                              unsigned int v429 = v711;
                            }
                            unsigned int v431 = *(unsigned __int8 *)(v426 + v427 + 11);
                            float v428 = 0.0;
                            if (v431 == 2) {
                              goto LABEL_600;
                            }
                            float v433 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v715[3], 0x8Eu, v429, v431, 0);
LABEL_602:
                            if ((uint64_t v434 = v715[3], (v435 = *(float **)v434) != 0)
                              && (float v436 = *v435, LODWORD(v435) = *v435 == 1.0, *(unsigned char *)(v434 + 10))
                              && (v436 != 0.0 ? (BOOL v437 = v436 == 1.0) : (BOOL v437 = 1), !v437)
                              || (v438 = *(unsigned __int8 *)(v434 + v435 + 11), float v436 = 0.0, v438 == 2))
                            {
                              v727.n128_u8[0] = 1;
                              LOBYTE(v713) = 1;
                              float v439 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v434, 0, v429, 0, &v727);
                              v417.n128_f32[0] = v439
                                               + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v434, 0, v429, 1u, &v713)- v439)* v436);
                              if (v433 <= 0.0) {
                                goto LABEL_665;
                              }
                            }
                            else
                            {
                              v417.n128_u32[0] = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v715[3], 0, v429, v438, 0);
                              if (v433 <= 0.0) {
                                goto LABEL_665;
                              }
                            }
                            if (v417.n128_f32[0] <= 0.0) {
                              goto LABEL_665;
                            }
                            uint64_t v440 = ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>::pop(this[46][1]);
                            v441 = *(std::__shared_weak_count ***)(v440 + 64);
                            v442 = v721;
                            *v441 = v721;
                            v441[1] = 0;
                            v443 = *(std::__shared_weak_count ***)(v440 + 160);
                            v444 = v722;
                            if (v722) {
                              atomic_fetch_add_explicit(&v722->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v445 = v443[1];
                            *v443 = v442;
                            v443[1] = v444;
                            if (v445 && !atomic_fetch_add(&v445->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                              std::__shared_weak_count::__release_weak(v445);
                            }
                            v446 = *(uint16x4_t **)(v440 + 64);
                            uint16x4_t v447 = v725;
                            v448 = v726;
                            v446[2] = v725;
                            v446[3] = 0;
                            uint64_t v449 = *(void *)(v440 + 160);
                            if (v448) {
                              atomic_fetch_add_explicit(&v448->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v450 = *(std::__shared_weak_count **)(v449 + 24);
                            *(uint16x4_t *)(v449 + 16) = v447;
                            *(void *)(v449 + 24) = v448;
                            if (v450 && !atomic_fetch_add(&v450->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                              std::__shared_weak_count::__release_weak(v450);
                            }
                            unint64_t v451 = *(void *)(*(void *)(v440 + 64) + 32);
                            __n128 v727 = 0uLL;
                            v452 = *(std::__shared_weak_count **)(v451 + 8);
                            if (v452) {
                              v453 = *(__n128 **)(v451 + 72);
                            }
                            else {
                              v453 = 0;
                            }
                            v454.n128_u64[0] = 0;
                            v454.n128_u64[1] = v451;
                            __n128 v692 = v454;
                            __n128 v727 = v454;
                            v728 = 0;
                            v729 = v452;
                            v731 = (float32x4_t *)v453;
                            __int16 v730 = 1;
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v713, v715[3], 0x90u, v711, 2u, 0);
                            __n128 v417 = (__n128)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v713)), v686);
                            __n128 *v453 = v417;
                            v417.n128_f32[0] = -v433;
                            v453[1].n128_f32[0] = -v433;
                            if (v452)
                            {
                              __n128 v417 = v692;
                              if (v692.n128_u64[0] && *(unsigned char *)(v692.n128_u64[1] + 17) != 2) {
                                (*(void (**)(void))(*(void *)v692.n128_u64[0] + 64))();
                              }
                              v455 = *(std::__shared_weak_count **)(v692.n128_u64[1] + 64);
                              if (v455 <= v452) {
                                v455 = v452;
                              }
                              *(void *)(v692.n128_u64[1] + 56) = 0;
                              *(void *)(v692.n128_u64[1] + 64) = v455;
                            }
                            v456 = (void *)(*v422)[3];
                            v457 = (void *)*v456;
                            if (*(void *)(**(void **)(*(void *)*v456 + 64) + 48) == *(void *)(**(void **)(*(void *)*v456 + 64) + 40))
                            {
LABEL_665:
                              if (v719) {
                                (*(void (**)(uint64_t *, __n128))(*v715 + 56))(v715, v417);
                              }
                              v483 = (std::__shared_weak_count *)v718;
                              if (v718 && !atomic_fetch_add(v718 + 1, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *, __n128))v483->__on_zero_shared)(v483, v417);
                                std::__shared_weak_count::__release_weak(v483);
                              }
                              v484 = (std::__shared_weak_count *)v716;
                              if (v716 && !atomic_fetch_add(v716 + 1, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *, __n128))v484->__on_zero_shared)(v484, v417);
                                std::__shared_weak_count::__release_weak(v484);
                              }
                              if (++v422 == v705)
                              {
                                v421 = v726;
                                v416 = v682;
LABEL_674:
                                if (v421 && !atomic_fetch_add(&v421->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *, __n128))v421->__on_zero_shared)(v421, v417);
                                  std::__shared_weak_count::__release_weak(v421);
                                }
                                v485 = v722;
                                if (v722 && !atomic_fetch_add(&v722->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *, __n128))v485->__on_zero_shared)(v485, v417);
                                  std::__shared_weak_count::__release_weak(v485);
                                }
                                if (++v416 == v678) {
                                  goto LABEL_680;
                                }
                                continue;
                              }
                              goto LABEL_580;
                            }
                            break;
                          }
                          v458 = (void *)v456[1];
                          while (2)
                          {
                            if (v457 == v458) {
                              goto LABEL_665;
                            }
                            uint64_t v460 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                            uint64_t v461 = v460;
                            *(void *)(v460 + 24) = this[46][12];
                            *(void *)(v460 + 32) = v440;
                            *(void *)(v460 + 64) = *v457;
                            *(_DWORD *)(v460 + 40) = v423;
                            v462 = *(uint64_t **)(v14 + 80);
                            unint64_t v463 = *(void *)(v14 + 88);
                            if ((unint64_t)v462 < v463)
                            {
                              if (v462) {
                                uint64_t *v462 = v460;
                              }
                              v459 = v462 + 1;
LABEL_637:
                              *(void *)(v14 + 80) = v459;
                              ++v457;
                              continue;
                            }
                            break;
                          }
                          uint64_t v464 = *(void *)(v14 + 72);
                          uint64_t v465 = ((uint64_t)v462 - v464) >> 3;
                          unint64_t v466 = v465 + 1;
                          if ((unint64_t)(v465 + 1) >> 61) {
                            abort();
                          }
                          uint64_t v467 = v463 - v464;
                          if (v467 >> 2 > v466) {
                            unint64_t v466 = v467 >> 2;
                          }
                          if ((unint64_t)v467 >= 0x7FFFFFFFFFFFFFF8) {
                            uint64_t v468 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v468 = v466;
                          }
                          if (v468)
                          {
                            uint64_t v469 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 16))(*(void *)(v14 + 96), 8 * v468, 8);
                            v470 = (uint64_t *)(v469 + 8 * v465);
                            uint64_t v471 = v469 + 8 * v468;
                            if (v469) {
                              uint64_t *v470 = v461;
                            }
                          }
                          else
                          {
                            uint64_t v471 = 0;
                            v470 = (uint64_t *)(8 * v465);
                          }
                          uint64_t v473 = *(void *)(v14 + 72);
                          uint64_t v472 = *(void *)(v14 + 80);
                          uint64_t v474 = v472 - v473;
                          if (v472 != v473)
                          {
                            unint64_t v475 = v474 - 8;
                            if ((unint64_t)(v474 - 8) < 0x38)
                            {
                              v476 = v470;
                            }
                            else
                            {
                              v476 = v470;
                              if ((unint64_t)(v472 - (void)v470) >= 0x20)
                              {
                                uint64_t v477 = (v475 >> 3) + 1;
                                v478 = (__n128 *)(v470 - 2);
                                v479 = (__n128 *)(v472 - 16);
                                uint64_t v480 = v477 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  __n128 v417 = *v479;
                                  v478[-1] = v479[-1];
                                  __n128 *v478 = v417;
                                  v478 -= 2;
                                  v479 -= 2;
                                  v480 -= 4;
                                }
                                while (v480);
                                v476 = &v470[-(v477 & 0x3FFFFFFFFFFFFFFCLL)];
                                v472 -= 8 * (v477 & 0x3FFFFFFFFFFFFFFCLL);
                                if (v477 == (v477 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_662:
                                  uint64_t v472 = *(void *)(v14 + 72);
LABEL_663:
                                  v459 = v470 + 1;
                                  *(void *)(v14 + 72) = v476;
                                  *(void *)(v14 + 80) = v470 + 1;
                                  uint64_t v482 = *(void *)(v14 + 88);
                                  *(void *)(v14 + 88) = v471;
                                  if (v472) {
                                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 40))(*(void *)(v14 + 96), v472, v482 - v472);
                                  }
                                  goto LABEL_637;
                                }
                              }
                            }
                            do
                            {
                              uint64_t v481 = *(void *)(v472 - 8);
                              v472 -= 8;
                              *--v476 = v481;
                            }
                            while (v472 != v473);
                            goto LABEL_662;
                          }
                          v476 = v470;
                          goto LABEL_663;
                        }
                      }
                    }
LABEL_680:
                    uint64_t v486 = v670 + 144;
                    uint64_t v487 = 128;
                    if (*(unsigned __int8 *)(v670 + 320) - 1 >= 3) {
                      uint64_t v486 = v670 + 128;
                    }
                    else {
                      uint64_t v487 = 144;
                    }
                    v488 = *(std::__shared_weak_count **)(v670 + v487);
                    v489 = *(std::__shared_weak_count **)(v486 + 8);
                    v721 = v488;
                    v722 = v489;
                    if (v489) {
                      atomic_fetch_add_explicit(&v489->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if ((v675 & 1) == 0) {
                      goto LABEL_913;
                    }
                    if (*(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1 >= 3)
                    {
                      float64x2_t v493 = *v669;
                      float64x2_t v498 = v669[1];
                      float64x2_t v492 = v669[2];
                      float64x2_t v499 = v669[3];
                      float64x2_t v500 = v669[4];
                      float64x2_t v491 = v669[5];
                      _Q2 = v669[6];
                      float64x2_t v490 = v669[7];
                    }
                    else
                    {
                      float64x2_t v490 = (float64x2_t)xmmword_1A28FCCC0;
                      float64x2_t v491 = (float64x2_t)xmmword_1A28FCBD0;
                      float64x2_t v492 = (float64x2_t)xmmword_1A28FCDE0;
                      float64x2_t v493 = (float64x2_t)xmmword_1A28FCDF0;
                      __asm { FMOV            V2.2D, #-1.0 }
                      float64x2_t v498 = 0uLL;
                      float64x2_t v499 = 0uLL;
                      float64x2_t v500 = 0uLL;
                    }
                    unint64_t v501 = **(void **)(this[46][15] + 64);
                    uint64_t v720 = 0;
                    v715 = 0;
                    v716 = 0;
                    v502 = *(std::__shared_weak_count **)(v501 + 8);
                    v727.n128_u64[0] = 0;
                    v727.n128_u64[1] = v501;
                    v728 = 0;
                    v729 = v502;
                    __int16 v730 = 1;
                    float32x4_t v698 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v492), v499);
                    float32x4_t v706 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v493), v498);
                    float32x4_t v687 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q2), v490);
                    float32x4_t v693 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v500), v491);
                    v503 = v502 ? *(float32x4_t **)(v501 + 72) : 0;
                    v731 = v503;
                    ggl::BufferMemory::operator=((uint64_t *)&v715, (uint64_t)&v727);
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v727);
                    v504 = (_OWORD *)v720;
                    *(float32x4_t *)uint64_t v720 = v706;
                    v504[1] = v698;
                    v504[2] = v693;
                    v504[3] = v687;
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v715);
                    ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(*(void *)(this[46][15] + 64), *(void *)(this[46][15] + 160), this[46][30], this[46][31]);
                    unint64_t v505 = *(void *)(*(void *)(this[46][15] + 64) + 32);
                    uint64_t v720 = 0;
                    v715 = 0;
                    v716 = 0;
                    v506 = *(std::__shared_weak_count **)(v505 + 8);
                    v727.n128_u64[0] = 0;
                    v727.n128_u64[1] = v505;
                    v728 = 0;
                    v729 = v506;
                    __int16 v730 = 1;
                    v507 = v506 ? *(float32x4_t **)(v505 + 72) : 0;
                    v731 = v507;
                    ggl::BufferMemory::operator=((uint64_t *)&v715, (uint64_t)&v727);
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v727);
                    uint64_t v508 = v720;
                    *(void *)(v720 + 64) = 0;
                    *(void *)(v508 + 72) = 0;
                    *(_OWORD *)(v508 + 88) = xmmword_1A28FCDA0;
                    *(_DWORD *)(v508 + 80) = 1065353216;
                    *(_DWORD *)uint64_t v508 = 1065353216;
                    *(void *)(v508 + 12) = 0;
                    *(void *)(v508 + 4) = 0;
                    *(_DWORD *)(v508 + 20) = 1065353216;
                    *(void *)(v508 + 24) = 0;
                    *(void *)(v508 + 32) = 0;
                    *(_DWORD *)(v508 + 40) = 1065353216;
                    *(void *)(v508 + 52) = 0;
                    *(void *)(v508 + 44) = 0;
                    *(_DWORD *)(v508 + 60) = 1065353216;
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v715);
                    *(void *)(this[46][26] + 24) = this[46][5];
                    *(void *)(this[46][26] + 32) = this[46][15];
                    *(void *)(this[46][26] + 64) = v488;
                    ggl::CommandBuffer::pushRenderItem(v14, this[46][26]);
                    v509 = this[34];
                    v694 = this[35];
                    if (v509 == v694)
                    {
LABEL_913:
                      *(void *)(this[46][27] + 24) = this[46][6];
                      *(void *)(this[46][27] + 32) = this[46][15];
                      *(void *)(this[46][27] + 64) = v721;
                      ggl::CommandBuffer::pushRenderItem(v14, this[46][27]);
                      v667 = v722;
                      if (v722 && !atomic_fetch_add(&v722->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
                        std::__shared_weak_count::__release_weak(v667);
                      }
LABEL_916:

                      goto LABEL_917;
                    }
                    while (2)
                    {
                      uint64_t v510 = *v509;
                      uint64_t v511 = *(void *)(*v509 + 384);
                      v512 = *(uint64_t **)(*v509 + 224);
                      v715 = *(uint64_t **)(*v509 + 216);
                      v716 = v512;
                      if (v512) {
                        atomic_fetch_add_explicit(v512 + 1, 1uLL, memory_order_relaxed);
                      }
                      v513 = *(std::__shared_weak_count **)(v510 + 240);
                      uint16x4_t v725 = *(uint16x4_t *)(v510 + 232);
                      v726 = v513;
                      if (v513) {
                        atomic_fetch_add_explicit(&v513->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v514 = *(uint64_t ***)(v511 + 776);
                      v707 = *(uint64_t ***)(v511 + 784);
                      if (v514 == v707)
                      {
LABEL_794:
                        if (v513 && !atomic_fetch_add(&v513->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                          std::__shared_weak_count::__release_weak(v513);
                        }
                        v586 = (std::__shared_weak_count *)v716;
                        if (v716 && !atomic_fetch_add(v716 + 1, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                          std::__shared_weak_count::__release_weak(v586);
                        }
                        if (++v509 != v694) {
                          continue;
                        }
                        v587 = (uint16x4_t **)this[34];
                        v683 = (uint16x4_t **)this[35];
                        if (v587 != v683)
                        {
                          float32x4_t v695 = (float32x4_t)vdupq_n_s32(0x37800080u);
LABEL_803:
                          v588 = *v587;
                          uint16x4_t v589 = (*v587)[48];
                          v590 = (std::__shared_weak_count *)(*v587)[28];
                          uint16x4_t v725 = (*v587)[27];
                          v726 = v590;
                          if (v590) {
                            atomic_fetch_add_explicit(&v590->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          v591 = (std::__shared_weak_count *)v588[30];
                          uint64_t v713 = (uint64_t)v588[29];
                          v714 = v591;
                          if (v591) {
                            atomic_fetch_add_explicit(&v591->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          v592 = *(uint64_t ***)(*(void *)&v589 + 776);
                          v708 = *(uint64_t ***)(*(void *)&v589 + 784);
                          if (v592 == v708) {
                            goto LABEL_907;
                          }
                          v688 = v587;
                          int v593 = (*(unsigned char *)(*(void *)&v589 + 169) + *((unsigned char *)this[46] + 288));
                          while (1)
                          {
                            uint64_t v594 = **v592;
                            v595 = (std::__shared_weak_count *)(*v592)[1];
                            v727.n128_u64[0] = v594;
                            v727.n128_u64[1] = (unint64_t)v595;
                            if (v595) {
                              atomic_fetch_add_explicit(&v595->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v715, v594, (uint64_t)v595);
                            if (v595 && !atomic_fetch_add(&v595->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                              std::__shared_weak_count::__release_weak(v595);
                            }
                            if (v719) {
                              break;
                            }
LABEL_809:
                            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v715);
                            if (++v592 == v708)
                            {
                              v591 = v714;
                              v587 = v688;
LABEL_907:
                              if (v591 && !atomic_fetch_add(&v591->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v591->__on_zero_shared)(v591);
                                std::__shared_weak_count::__release_weak(v591);
                              }
                              v666 = v726;
                              if (v726 && !atomic_fetch_add(&v726->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
                                std::__shared_weak_count::__release_weak(v666);
                              }
                              if (++v587 == v683) {
                                goto LABEL_913;
                              }
                              goto LABEL_803;
                            }
                          }
                          uint64_t v596 = v715[3];
                          v597 = *(float **)v596;
                          if (*(void *)v596)
                          {
                            float v598 = *v597;
                            LODWORD(v597) = *v597 == 1.0;
                            unsigned int v599 = v711;
                            if (*(unsigned char *)(v596 + 10))
                            {
                              if (v598 != 0.0 && v598 != 1.0) {
                                goto LABEL_826;
                              }
                            }
                          }
                          else
                          {
                            unsigned int v599 = v711;
                          }
                          int v601 = *(unsigned __int8 *)(v596 + v597 + 11);
                          float v598 = 0.0;
                          if (v601 != 2)
                          {
                            char v606 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v715[3], 0x5Bu, v599, v601, 0);
                            goto LABEL_830;
                          }
LABEL_826:
                          v727.n128_u8[0] = 1;
                          v732.i8[0] = 1;
                          v602 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v596, 0x5Bu, v599, 0, &v727);
                          unsigned int v603 = v599;
                          char v604 = *(unsigned char *)v602;
                          char v605 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v596, 0x5Bu, v603, 1, &v732);
                          if (v598 >= 1.0) {
                            char v606 = v605;
                          }
                          else {
                            char v606 = v604;
                          }
LABEL_830:
                          uint64_t v607 = v715[3];
                          v608 = *(float **)v607;
                          if (*(void *)v607
                            && (float v609 = *v608, LODWORD(v608) = *v608 == 1.0, *(unsigned char *)(v607 + 10))
                            && (v609 != 0.0 ? (BOOL v610 = v609 == 1.0) : (BOOL v610 = 1), !v610)
                            || (v611 = *(unsigned __int8 *)(v607 + v608 + 11), float v609 = 0.0, v611 == 2))
                          {
                            v727.n128_u8[0] = 1;
                            v732.i8[0] = 1;
                            float v612 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v607, 0x8Fu, v711, 0, &v727);
                            float v613 = v612
                                 + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v607, 0x8Fu, v711, 1u, &v732)- v612)* v609);
                          }
                          else
                          {
                            float v613 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v715[3], 0x8Fu, v711, v611, 0);
                          }
                          uint64_t v614 = v715[3];
                          v615 = *(float **)v614;
                          if (*(void *)v614
                            && (float v616 = *v615, LODWORD(v615) = *v615 == 1.0, *(unsigned char *)(v614 + 10))
                            && (v616 != 0.0 ? (BOOL v617 = v616 == 1.0) : (BOOL v617 = 1), !v617)
                            || (v618 = *(unsigned __int8 *)(v614 + v615 + 11), float v616 = 0.0, v618 == 2))
                          {
                            v727.n128_u8[0] = 1;
                            v732.i8[0] = 1;
                            float v619 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v614, 1u, v711, 0, &v727);
                            float v620 = v619
                                 + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v614, 1u, v711, 1u, &v732)- v619)* v616);
                            if (v613 <= 0.0) {
                              goto LABEL_809;
                            }
                          }
                          else
                          {
                            float v620 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v715[3], 1u, v711, v618, 0);
                            if (v613 <= 0.0) {
                              goto LABEL_809;
                            }
                          }
                          if (v620 > 0.0 && v606 != 0)
                          {
                            uint64_t v622 = ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>::pop(this[46][1]);
                            v623 = *(uint16x4_t **)(v622 + 64);
                            uint16x4_t v624 = v725;
                            uint16x4_t *v623 = v725;
                            v623[1] = 0;
                            v625 = *(uint16x4_t **)(v622 + 160);
                            v626 = v726;
                            if (v726) {
                              atomic_fetch_add_explicit(&v726->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v627 = (std::__shared_weak_count *)v625[1];
                            uint16x4_t *v625 = v624;
                            v625[1] = (uint16x4_t)v626;
                            if (v627 && !atomic_fetch_add(&v627->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
                              std::__shared_weak_count::__release_weak(v627);
                            }
                            v628 = *(uint16x4_t **)(v622 + 64);
                            uint16x4_t v629 = (uint16x4_t)v713;
                            v630 = v714;
                            v628[2] = (uint16x4_t)v713;
                            v628[3] = 0;
                            uint64_t v631 = *(void *)(v622 + 160);
                            if (v630) {
                              atomic_fetch_add_explicit(&v630->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v632 = *(std::__shared_weak_count **)(v631 + 24);
                            *(uint16x4_t *)(v631 + 16) = v629;
                            *(void *)(v631 + 24) = v630;
                            if (v632 && !atomic_fetch_add(&v632->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
                              std::__shared_weak_count::__release_weak(v632);
                            }
                            unint64_t v633 = *(void *)(*(void *)(v622 + 64) + 32);
                            __n128 v727 = 0uLL;
                            v634 = *(std::__shared_weak_count **)(v633 + 8);
                            if (v634) {
                              v635 = *(float32x4_t **)(v633 + 72);
                            }
                            else {
                              v635 = 0;
                            }
                            v636.n128_u64[0] = 0;
                            v636.n128_u64[1] = v633;
                            __n128 v700 = v636;
                            __n128 v727 = v636;
                            v728 = 0;
                            v729 = v634;
                            v731 = v635;
                            __int16 v730 = 1;
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v732, v715[3], 0x91u, v711, 2u, 0);
                            float32x4_t *v635 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v732)), v695);
                            v635[1].f32[0] = v613;
                            if (v634)
                            {
                              if (v700.n128_u64[0] && *(unsigned char *)(v700.n128_u64[1] + 17) != 2) {
                                (*(void (**)(void))(*(void *)v700.n128_u64[0] + 64))();
                              }
                              v637 = *(std::__shared_weak_count **)(v700.n128_u64[1] + 64);
                              if (v637 <= v634) {
                                v637 = v634;
                              }
                              *(void *)(v700.n128_u64[1] + 56) = 0;
                              *(void *)(v700.n128_u64[1] + 64) = v637;
                            }
                            v638 = (void *)(*v592)[3];
                            v639 = (void *)*v638;
                            if (*(void *)(**(void **)(*(void *)*v638 + 64) + 48) != *(void *)(**(void **)(*(void *)*v638 + 64) + 40))
                            {
                              v640 = (void *)v638[1];
                              while (1)
                              {
                                if (v639 == v640) {
                                  goto LABEL_809;
                                }
                                uint64_t v642 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                                uint64_t v643 = v642;
                                *(void *)(v642 + 24) = this[46][10];
                                *(void *)(v642 + 32) = v622;
                                *(void *)(v642 + 64) = *v639;
                                *(_DWORD *)(v642 + 40) = v593;
                                v644 = *(uint64_t **)(v14 + 80);
                                unint64_t v645 = *(void *)(v14 + 88);
                                if ((unint64_t)v644 < v645)
                                {
                                  if (v644) {
                                    uint64_t *v644 = v642;
                                  }
                                  v641 = v644 + 1;
                                  goto LABEL_878;
                                }
                                uint64_t v646 = *(void *)(v14 + 72);
                                uint64_t v647 = ((uint64_t)v644 - v646) >> 3;
                                unint64_t v648 = v647 + 1;
                                if ((unint64_t)(v647 + 1) >> 61) {
                                  abort();
                                }
                                uint64_t v649 = v645 - v646;
                                if (v649 >> 2 > v648) {
                                  unint64_t v648 = v649 >> 2;
                                }
                                if ((unint64_t)v649 >= 0x7FFFFFFFFFFFFFF8) {
                                  uint64_t v650 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  uint64_t v650 = v648;
                                }
                                if (v650)
                                {
                                  uint64_t v651 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96)
                                                                                             + 16))(*(void *)(v14 + 96), 8 * v650, 8);
                                  v652 = (uint64_t *)(v651 + 8 * v647);
                                  uint64_t v653 = v651 + 8 * v650;
                                  if (v651) {
                                    uint64_t *v652 = v643;
                                  }
                                }
                                else
                                {
                                  uint64_t v653 = 0;
                                  v652 = (uint64_t *)(8 * v647);
                                }
                                uint64_t v655 = *(void *)(v14 + 72);
                                uint64_t v654 = *(void *)(v14 + 80);
                                uint64_t v656 = v654 - v655;
                                if (v654 == v655)
                                {
                                  v658 = v652;
                                  goto LABEL_904;
                                }
                                unint64_t v657 = v656 - 8;
                                if ((unint64_t)(v656 - 8) < 0x38)
                                {
                                  v658 = v652;
                                }
                                else
                                {
                                  v658 = v652;
                                  if ((unint64_t)(v654 - (void)v652) >= 0x20)
                                  {
                                    uint64_t v659 = (v657 >> 3) + 1;
                                    v660 = v652 - 2;
                                    v661 = (long long *)(v654 - 16);
                                    uint64_t v662 = v659 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      long long v663 = *v661;
                                      *((_OWORD *)v660 - 1) = *(v661 - 1);
                                      *(_OWORD *)v660 = v663;
                                      v660 -= 4;
                                      v661 -= 2;
                                      v662 -= 4;
                                    }
                                    while (v662);
                                    v658 = &v652[-(v659 & 0x3FFFFFFFFFFFFFFCLL)];
                                    v654 -= 8 * (v659 & 0x3FFFFFFFFFFFFFFCLL);
                                    if (v659 == (v659 & 0x3FFFFFFFFFFFFFFCLL)) {
                                      goto LABEL_903;
                                    }
                                  }
                                }
                                do
                                {
                                  uint64_t v664 = *(void *)(v654 - 8);
                                  v654 -= 8;
                                  *--v658 = v664;
                                }
                                while (v654 != v655);
LABEL_903:
                                uint64_t v654 = *(void *)(v14 + 72);
LABEL_904:
                                v641 = v652 + 1;
                                *(void *)(v14 + 72) = v658;
                                *(void *)(v14 + 80) = v652 + 1;
                                uint64_t v665 = *(void *)(v14 + 88);
                                *(void *)(v14 + 88) = v653;
                                if (v654) {
                                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 40))(*(void *)(v14 + 96), v654, v665 - v654);
                                }
LABEL_878:
                                *(void *)(v14 + 80) = v641;
                                ++v639;
                              }
                            }
                          }
                          goto LABEL_809;
                        }
                        goto LABEL_913;
                      }
                      break;
                    }
                    v699 = v509;
                    int v515 = (*(unsigned char *)(v511 + 169) + *((unsigned char *)this[46] + 288));
                    while (2)
                    {
                      uint64_t v516 = **v514;
                      v517 = (std::__shared_weak_count *)(*v514)[1];
                      uint64_t v713 = v516;
                      v714 = v517;
                      if (v517) {
                        atomic_fetch_add_explicit(&v517->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v727, v516, (uint64_t)v517);
                      if (v517 && !atomic_fetch_add(&v517->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                        std::__shared_weak_count::__release_weak(v517);
                      }
                      if (!(_BYTE)v730) {
                        goto LABEL_704;
                      }
                      uint64_t v518 = *(void *)(v727.n128_u64[0] + 24);
                      v519 = *(float **)v518;
                      if (*(void *)v518)
                      {
                        float v520 = *v519;
                        LODWORD(v519) = *v519 == 1.0;
                        unsigned int v521 = v711;
                        if (*(unsigned char *)(v518 + 10))
                        {
                          if (v520 != 0.0 && v520 != 1.0)
                          {
LABEL_721:
                            LOBYTE(v713) = 1;
                            v732.i8[0] = 1;
                            v524 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v518, 0x5Bu, v521, 0, &v713);
                            unsigned int v525 = v521;
                            char v526 = *(unsigned char *)v524;
                            char v527 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v518, 0x5Bu, v525, 1, &v732);
                            if (v520 >= 1.0) {
                              char v528 = v527;
                            }
                            else {
                              char v528 = v526;
                            }
                            goto LABEL_725;
                          }
                        }
                      }
                      else
                      {
                        unsigned int v521 = v711;
                      }
                      int v523 = *(unsigned __int8 *)(v518 + v519 + 11);
                      float v520 = 0.0;
                      if (v523 == 2) {
                        goto LABEL_721;
                      }
                      char v528 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v727.n128_u64[0] + 24), 0x5Bu, v521, v523, 0);
LABEL_725:
                      if ((uint64_t v529 = *(void *)(v727.n128_u64[0] + 24), (v530 = *(float **)v529) != 0)
                        && (float v531 = *v530, LODWORD(v530) = *v530 == 1.0, *(unsigned char *)(v529 + 10))
                        && (v531 != 0.0 ? (BOOL v532 = v531 == 1.0) : (BOOL v532 = 1), !v532)
                        || (v533 = *(unsigned __int8 *)(v529 + v530 + 11), float v531 = 0.0, v533 == 2))
                      {
                        LOBYTE(v713) = 1;
                        v732.i8[0] = 1;
                        float v534 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v529, 0x8Fu, v711, 0, &v713);
                        float v535 = v534
                             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v529, 0x8Fu, v711, 1u, &v732)- v534)* v531);
                      }
                      else
                      {
                        float v535 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 0x8Fu, v711, v533, 0);
                      }
                      if ((uint64_t v536 = *(void *)(v727.n128_u64[0] + 24), (v537 = *(float **)v536) != 0)
                        && (float v538 = *v537, LODWORD(v537) = *v537 == 1.0, *(unsigned char *)(v536 + 10))
                        && (v538 != 0.0 ? (BOOL v539 = v538 == 1.0) : (BOOL v539 = 1), !v539)
                        || (v540 = *(unsigned __int8 *)(v536 + v537 + 11), float v538 = 0.0, v540 == 2))
                      {
                        LOBYTE(v713) = 1;
                        v732.i8[0] = 1;
                        float v541 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v536, 1u, v711, 0, &v713);
                        float v542 = v541
                             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v536, 1u, v711, 1u, &v732)- v541)* v538);
                        if (v535 <= 0.0) {
                          goto LABEL_704;
                        }
                      }
                      else
                      {
                        float v542 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 1u, v711, v540, 0);
                        if (v535 <= 0.0) {
                          goto LABEL_704;
                        }
                      }
                      if (v542 <= 0.0 || v528 == 0) {
                        goto LABEL_704;
                      }
                      uint64_t v544 = ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>::pop(*this[46]);
                      v545 = *(uint64_t ***)(v544 + 64);
                      v546 = v715;
                      *v545 = v715;
                      v545[1] = 0;
                      v547 = *(uint64_t ***)(v544 + 160);
                      v548 = v716;
                      if (v716) {
                        atomic_fetch_add_explicit(v716 + 1, 1uLL, memory_order_relaxed);
                      }
                      v549 = (std::__shared_weak_count *)v547[1];
                      *v547 = v546;
                      v547[1] = v548;
                      if (v549 && !atomic_fetch_add(&v549->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                        std::__shared_weak_count::__release_weak(v549);
                      }
                      v550 = *(uint16x4_t **)(v544 + 64);
                      uint16x4_t v551 = v725;
                      v552 = v726;
                      v550[2] = v725;
                      v550[3] = 0;
                      uint64_t v553 = *(void *)(v544 + 160);
                      if (v552) {
                        atomic_fetch_add_explicit(&v552->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v554 = *(std::__shared_weak_count **)(v553 + 24);
                      *(uint16x4_t *)(v553 + 16) = v551;
                      *(void *)(v553 + 24) = v552;
                      if (v554 && !atomic_fetch_add(&v554->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
                        std::__shared_weak_count::__release_weak(v554);
                      }
                      v555 = *(void **)(*(void *)(v544 + 64) + 32);
                      unint64_t v556 = v555[1];
                      v557 = (float *)v555[9];
                      float *v557 = v535;
                      v557[1] = v542;
                      if (v555[8] > v556) {
                        unint64_t v556 = v555[8];
                      }
                      v555[7] = 0;
                      v555[8] = v556;
                      v558 = (void *)(*v514)[3];
                      v559 = (void *)*v558;
                      if (*(void *)(**(void **)(*(void *)*v558 + 64) + 48) == *(void *)(**(void **)(*(void *)*v558 + 64) + 40))
                      {
LABEL_704:
                        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v727);
                        if (++v514 == v707)
                        {
                          v513 = v726;
                          v509 = v699;
                          goto LABEL_794;
                        }
                        continue;
                      }
                      break;
                    }
                    v560 = (void *)v558[1];
                    while (2)
                    {
                      if (v559 == v560) {
                        goto LABEL_704;
                      }
                      uint64_t v562 = ggl::FragmentedPool<ggl::RenderItem>::pop(this[46][14]);
                      uint64_t v563 = v562;
                      *(void *)(v562 + 24) = this[46][9];
                      *(void *)(v562 + 32) = v544;
                      *(void *)(v562 + 64) = *v559;
                      *(_DWORD *)(v562 + 40) = v515;
                      v564 = *(uint64_t **)(v14 + 80);
                      unint64_t v565 = *(void *)(v14 + 88);
                      if ((unint64_t)v564 < v565)
                      {
                        if (v564) {
                          uint64_t *v564 = v562;
                        }
                        v561 = v564 + 1;
LABEL_765:
                        *(void *)(v14 + 80) = v561;
                        ++v559;
                        continue;
                      }
                      break;
                    }
                    uint64_t v566 = *(void *)(v14 + 72);
                    uint64_t v567 = ((uint64_t)v564 - v566) >> 3;
                    unint64_t v568 = v567 + 1;
                    if ((unint64_t)(v567 + 1) >> 61) {
                      abort();
                    }
                    uint64_t v569 = v565 - v566;
                    if (v569 >> 2 > v568) {
                      unint64_t v568 = v569 >> 2;
                    }
                    if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8) {
                      uint64_t v570 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v570 = v568;
                    }
                    if (v570)
                    {
                      uint64_t v571 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 16))(*(void *)(v14 + 96), 8 * v570, 8);
                      v572 = (uint64_t *)(v571 + 8 * v567);
                      uint64_t v573 = v571 + 8 * v570;
                      if (v571) {
                        uint64_t *v572 = v563;
                      }
                    }
                    else
                    {
                      uint64_t v573 = 0;
                      v572 = (uint64_t *)(8 * v567);
                    }
                    uint64_t v575 = *(void *)(v14 + 72);
                    uint64_t v574 = *(void *)(v14 + 80);
                    uint64_t v576 = v574 - v575;
                    if (v574 != v575)
                    {
                      unint64_t v577 = v576 - 8;
                      if ((unint64_t)(v576 - 8) < 0x38)
                      {
                        v578 = v572;
                      }
                      else
                      {
                        v578 = v572;
                        if ((unint64_t)(v574 - (void)v572) >= 0x20)
                        {
                          uint64_t v579 = (v577 >> 3) + 1;
                          v580 = v572 - 2;
                          v581 = (long long *)(v574 - 16);
                          uint64_t v582 = v579 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v583 = *v581;
                            *((_OWORD *)v580 - 1) = *(v581 - 1);
                            *(_OWORD *)v580 = v583;
                            v580 -= 4;
                            v581 -= 2;
                            v582 -= 4;
                          }
                          while (v582);
                          v578 = &v572[-(v579 & 0x3FFFFFFFFFFFFFFCLL)];
                          v574 -= 8 * (v579 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v579 == (v579 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_790:
                            uint64_t v574 = *(void *)(v14 + 72);
LABEL_791:
                            v561 = v572 + 1;
                            *(void *)(v14 + 72) = v578;
                            *(void *)(v14 + 80) = v572 + 1;
                            uint64_t v585 = *(void *)(v14 + 88);
                            *(void *)(v14 + 88) = v573;
                            if (v574) {
                              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v14 + 96) + 40))(*(void *)(v14 + 96), v574, v585 - v574);
                            }
                            goto LABEL_765;
                          }
                        }
                      }
                      do
                      {
                        uint64_t v584 = *(void *)(v574 - 8);
                        v574 -= 8;
                        *--v578 = v584;
                      }
                      while (v574 != v575);
                      goto LABEL_790;
                    }
                    v578 = v572;
                    goto LABEL_791;
                  }
                }
                else
                {
                  uint64_t isSuperset = (uint64_t)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v727.n128_u64[0] + 24), 0, v255, v273, 0);
                  float v275 = *(float *)isSuperset;
                  if ((_BYTE)v730) {
                    goto LABEL_373;
                  }
                }
                break;
              }
              float v282 = 0.0;
              goto LABEL_398;
            }
          }
        }
      }
    }
  }
LABEL_917:
  if (!v738)
  {
LABEL_930:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x1A1E78390);
  }
  (*(void (**)(void *))(*v738 + 48))(v738);
  uint64_t result = v738;
  if (v738 == v737) {
    return (void *)(*(uint64_t (**)(void *))(v737[0] + 32))(v737);
  }
  if (v738) {
    return (void *)(*(uint64_t (**)(void))(*v738 + 40))();
  }
  return result;
}

void sub_1A1E783B8(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unsigned __int8 v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CoastlineLayout", "", v5, 2u);
  }
}

uint64_t ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v17);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        int8x8_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)int8x8_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--uint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v7);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = v12 - 2;
        uint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)uint64_t v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--uint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  uint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

uint64_t ggl::FragmentedPool<ggl::GlowAlpha::MeshPipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v17);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        int8x8_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)int8x8_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--uint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v7);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = v12 - 2;
        uint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)uint64_t v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--uint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  uint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

uint64_t ggl::FragmentedPool<ggl::Glow::MeshPipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v17);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        int8x8_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)int8x8_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--uint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v7);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = v12 - 2;
        uint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)uint64_t v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--uint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  uint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CoastlineLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575090;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575090;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575048;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575048;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::CoastlineRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::CoastlineRenderLayer::~CoastlineRenderLayer(md::CoastlineRenderLayer *this)
{
  *(void *)this = &unk_1EF53D3B0;
  uint64_t v2 = (md::CoastLineRenderResources *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v2)
  {
    md::CoastLineRenderResources::~CoastLineRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  md::CoastLineRenderResources *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53D3B0;
  uint64_t v2 = (md::CoastLineRenderResources *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v2)
  {
    md::CoastLineRenderResources::~CoastLineRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(this);
}

float32x4_t *_setupRenderItems(float32x4_t *result, __int32 *a2, float32x4_t *a3, __int32 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, float a10, float32_t a11, float32_t a12, float32_t a13, float32_t a14, uint64_t a15, char a16)
{
  __asm { FMOV            V6.4S, #1.0 }
  if (a5)
  {
    uint64_t v21 = *(void **)(*(void *)(a5 + 64) + 32);
    unint64_t v23 = v21[8];
    uint64_t v22 = (float32x4_t *)v21[9];
    v22[5].f32[0] = a11;
    v22->f32[0] = a9;
    v22[4] = vsubq_f32(_Q6, *result);
    v22[3].i32[0] = *a2;
    v22[3].i32[1] = a2[1];
    v22[3].i32[2] = a2[2];
    v22[3].i32[3] = a2[3];
    v22[2].f32[0] = a12;
    v22[5].f32[3] = a14;
    v22[6].f32[0] = a13;
    unint64_t v24 = v21[1];
    if (v23 > v24) {
      unint64_t v24 = v23;
    }
    v21[7] = 0;
    v21[8] = v24;
  }
  if (a6)
  {
    uint64_t v25 = *(void **)(*(void *)(a6 + 64) + 32);
    unint64_t v27 = v25[8];
    uint64_t v26 = (float32x4_t *)v25[9];
    v26[5].f32[0] = a11;
    v26->f32[0] = a9;
    v26[4] = vsubq_f32(_Q6, *result);
    v26[3].i32[0] = *a2;
    v26[3].i32[1] = a2[1];
    v26[3].i32[2] = a2[2];
    v26[3].i32[3] = a2[3];
    v26[2].f32[0] = a12;
    v26[5].f32[3] = a14;
    v26[6].f32[0] = a13;
    unint64_t v28 = v25[1];
    if (v27 > v28) {
      unint64_t v28 = v27;
    }
    v25[7] = 0;
    v25[8] = v28;
  }
  if (a7)
  {
    long long v29 = *(void **)(*(void *)(a7 + 64) + 32);
    unint64_t v31 = v29[8];
    uint64_t v30 = (float32x4_t *)v29[9];
    v30[5].f32[0] = a11;
    v30->f32[0] = a9;
    v30[4] = vsubq_f32(_Q6, *result);
    v30[3].i32[0] = *a2;
    v30[3].i32[1] = a2[1];
    v30[3].i32[2] = a2[2];
    unint64_t v32 = v29[1];
    v30[3].i32[3] = a2[3];
    v30[2].f32[0] = a12;
    v30[5].f32[3] = a14;
    v30[6].f32[0] = a13;
    if (v31 <= v32) {
      unint64_t v33 = v32;
    }
    else {
      unint64_t v33 = v31;
    }
    v29[7] = 0;
    v29[8] = v33;
  }
  if ((a16 & 1) == 0)
  {
    float v34 = result->f32[3] * 0.9;
    if (a5)
    {
      uint64_t v35 = *(void **)(*(void *)(a5 + 64) + 32);
      unint64_t v36 = v35[1];
      unint64_t v38 = v35[8];
      uint64_t v37 = v35[9];
      *(float *)(v37 + 84) = v34;
      *(_DWORD *)(v37 + 88) = 1065353216;
      if (v38 > v36) {
        unint64_t v36 = v38;
      }
      v35[7] = 0;
      v35[8] = v36;
    }
    if (a6)
    {
      uint64_t v39 = *(void **)(*(void *)(a6 + 64) + 32);
      unint64_t v40 = v39[1];
      unint64_t v42 = v39[8];
      uint64_t v41 = v39[9];
      *(float *)(v41 + 84) = v34;
      *(_DWORD *)(v41 + 88) = 1065353216;
      if (v42 > v40) {
        unint64_t v40 = v42;
      }
      v39[7] = 0;
      v39[8] = v40;
    }
    if (a7)
    {
      uint64_t v43 = *(void **)(*(void *)(a7 + 64) + 32);
      unint64_t v44 = v43[1];
      unint64_t v46 = v43[8];
      uint64_t v45 = v43[9];
      *(float *)(v45 + 84) = v34;
      *(_DWORD *)(v45 + 88) = -1082130432;
      if (v46 > v44) {
        unint64_t v44 = v46;
      }
      v43[7] = 0;
      v43[8] = v44;
    }
  }
  if (a10 > 0.0 && a6 && a15)
  {
    uint64_t v47 = *(void **)(*(void *)(a6 + 64) + 32);
    unint64_t v48 = v47[1];
    unint64_t v50 = v47[8];
    uint64_t v49 = (float32x4_t *)v47[9];
    v49[4] = vsubq_f32(_Q6, *a3);
    v49[3].i32[0] = *a4;
    v49[3].i32[1] = a4[1];
    v49[3].i32[2] = a4[2];
    v49[3].i32[3] = a4[3];
    v49->f32[0] = a10 + a9;
    if (v50 <= v48) {
      unint64_t v51 = v48;
    }
    else {
      unint64_t v51 = v50;
    }
    v47[7] = 0;
    v47[8] = v51;
    *(unsigned char *)(a15 + 120) = 1;
    *(void *)(a15 + 32) = a6;
    if (v51 <= v48) {
      unint64_t v52 = v48;
    }
    else {
      unint64_t v52 = v51;
    }
    v47[8] = v52;
    *(void *)(a8 + 32) = a5;
  }
  else
  {
    if (a15) {
      *(unsigned char *)(a15 + 120) = 0;
    }
    *(void *)(a8 + 32) = a5;
  }
  return result;
}

void md::RouteLineBatch::layoutTwoPasses(md::RouteLayoutContext const&,md::RouteStyleContext const&)::$_0::operator()(uint64_t a1, uint64_t a2, float32x4_t *a3, _DWORD *a4)
{
  unint64_t v8 = *(void **)(a2 + 64);
  uint64_t v9 = (void *)v8[4];
  unint64_t v10 = v9[1];
  if (v10) {
    uint64_t v11 = v9[9];
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *v8;
  uint64_t v14 = *(void *)(*v8 + 8);
  if ((*(unsigned char *)(*v8 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    unint64_t v31 = &v29;
    uint64_t v30 = &v31;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v14) {
    uint64_t v15 = *(void *)(v13 + 72);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(float **)a1;
  *(float *)uint64_t v11 = **(float **)a1 * 0.5;
  *(_DWORD *)(v11 + 16) = a3->i32[0];
  *(_DWORD *)(v11 + 20) = a3->i32[1];
  *(_DWORD *)(v11 + 24) = a3->i32[2];
  *(_DWORD *)(v11 + 28) = a3->i32[3];
  float v17 = *(float *)(*(void *)(v12 + 2592) + 48);
  float v18 = 0.0;
  if (v17 != 0.0)
  {
    float v19 = logf(v17 * (float)(*(float *)(*(void *)(a1 + 16) + 128) * *(float *)(v15 + 64)));
    float v18 = expf(floorf(v19 * 4.0) * -0.25);
  }
  *(float *)(v11 + 32) = v18;
  if (v10)
  {
    unint64_t v20 = v9[8];
    if (v20 <= v10) {
      unint64_t v20 = v10;
    }
    v9[7] = 0;
    v9[8] = v20;
  }
  uint64_t v21 = *(void **)(*(void *)(a2 + 64) + 48);
  unint64_t v22 = v21[1];
  uint64_t v23 = v21[9];
  *(_DWORD *)(v23 + 80) = *(_DWORD *)(*(void *)(a1 + 16) + 124);
  *(float *)uint64_t v23 = *v16 * 0.5;
  __asm { FMOV            V1.4S, #1.0 }
  *(float32x4_t *)(v23 + 64) = vsubq_f32(_Q1, *a3);
  *(_DWORD *)(v23 + 48) = *a4;
  *(_DWORD *)(v23 + 52) = a4[1];
  *(_DWORD *)(v23 + 56) = a4[2];
  *(_DWORD *)(v23 + 60) = a4[3];
  *(_DWORD *)(v23 + 32) = **(_DWORD **)(a1 + 24);
  *(int32x2_t *)(v23 + 92) = vrev64_s32(*(int32x2_t *)(*(void *)(a1 + 32) + 248));
  if (v21[8] > v22) {
    unint64_t v22 = v21[8];
  }
  v21[7] = 0;
  v21[8] = v22;
}

uint64_t setupTrafficRenderItem(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a4 + 32) + 64) + 32);
  long long v69 = 0uLL;
  unint64_t v16 = *(void *)(v15 + 8);
  *(void *)&long long v17 = 0;
  *((void *)&v17 + 1) = v15;
  if (v16) {
    float v18 = *(_OWORD **)(v15 + 72);
  }
  else {
    float v18 = 0;
  }
  long long v69 = v17;
  unint64_t v70 = 0;
  unint64_t v71 = v16;
  uint64_t v73 = v18;
  __int16 v72 = 1;
  uint64_t v19 = *a2;
  unint64_t v20 = (std::__shared_weak_count *)a2[1];
  *(void *)&long long v66 = *a2;
  *((void *)&v66 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v67, v19, (uint64_t)v20);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v68) {
      goto LABEL_9;
    }
LABEL_16:
    if (GEOGetVectorKitRouteLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
    }
    uint64_t v57 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      LOWORD(v66) = 0;
      _os_log_impl(&dword_1A1780000, v57, OS_LOG_TYPE_INFO, "***RouteLine failed to setupTrafficRenderItem", (uint8_t *)&v66, 2u);
    }

    goto LABEL_21;
  }
  if (!v68) {
    goto LABEL_16;
  }
LABEL_9:
  *(unsigned char *)(a4 + 120) = 1;
  v21.i8[0] = *(unsigned char *)(a1 + 12);
  md::trafficWidthForSpeedAtZ((unint64_t)v67, 3, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v21)).i32[0]);
  unint64_t v22 = v73;
  *(float *)uint64_t v73 = v23 * a5;
  *(float *)v24.i32 = v23 * a6;
  *((_DWORD *)v22 + 45) = v24.i32[0];
  *((float *)v22 + 46) = a7;
  *((float *)v22 + 44) = a8;
  v24.i8[0] = *(unsigned char *)(a1 + 12);
  md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 0, 1, v25, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v24)).i32[0]);
  unsigned int v27 = DWORD1(v66);
  v26.i32[0] = v66;
  *((_DWORD *)v22 + 4) = v66;
  *((_DWORD *)v22 + 5) = v27;
  uint64_t v28 = *((void *)&v66 + 1);
  *((void *)v22 + 3) = *((void *)&v66 + 1);
  *((void *)v22 + 12) = __PAIR64__(v27, v26.u32[0]);
  *((void *)v22 + 13) = v28;
  v26.i8[0] = *(unsigned char *)(a1 + 12);
  md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 1, 1, v29, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v26)).i32[0]);
  unsigned int v31 = DWORD1(v66);
  v30.i32[0] = v66;
  *((_DWORD *)v22 + 8) = v66;
  *((_DWORD *)v22 + 9) = v31;
  uint64_t v32 = *((void *)&v66 + 1);
  *((void *)v22 + 5) = *((void *)&v66 + 1);
  *((void *)v22 + 14) = __PAIR64__(v31, v30.u32[0]);
  *((void *)v22 + 15) = v32;
  v30.i8[0] = *(unsigned char *)(a1 + 12);
  md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 2, 1, v33, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v30)).i32[0]);
  unsigned int v35 = DWORD1(v66);
  v34.i32[0] = v66;
  *((_DWORD *)v22 + 12) = v66;
  *((_DWORD *)v22 + 13) = v35;
  uint64_t v36 = *((void *)&v66 + 1);
  *((void *)v22 + 7) = *((void *)&v66 + 1);
  *((void *)v22 + 16) = __PAIR64__(v35, v34.u32[0]);
  *((void *)v22 + 17) = v36;
  v34.i8[0] = *(unsigned char *)(a1 + 12);
  md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 3, 1, v37, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v34)).i32[0]);
  unsigned int v39 = DWORD1(v66);
  v38.i32[0] = v66;
  *((_DWORD *)v22 + 16) = v66;
  *((_DWORD *)v22 + 17) = v39;
  uint64_t v40 = *((void *)&v66 + 1);
  *((void *)v22 + 9) = *((void *)&v66 + 1);
  *((void *)v22 + 18) = __PAIR64__(v39, v38.u32[0]);
  *((void *)v22 + 19) = v40;
  v38.i8[0] = *(unsigned char *)(a1 + 12);
  md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 4, 1, v41, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v38)).i32[0]);
  uint64_t v42 = v66;
  *((void *)v22 + 10) = v66;
  uint64_t v43 = *((void *)&v66 + 1);
  *((void *)v22 + 11) = *((void *)&v66 + 1);
  *((void *)v22 + 20) = v42;
  *((void *)v22 + 21) = v43;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v67);
  uint64_t v44 = *a3;
  uint64_t v45 = (std::__shared_weak_count *)a3[1];
  *(void *)&long long v66 = v44;
  *((void *)&v66 + 1) = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v67, v44, (uint64_t)v45);
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    char v47 = v68;
    if (!v68) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  char v47 = v68;
  if (v68)
  {
LABEL_14:
    v46.i8[0] = *(unsigned char *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 0, 1, v47, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v46)).i32[0]);
    unint64_t v48 = v73;
    int8x8_t v49 = (int8x8_t)v66;
    v73[6] = v66;
    v49.i8[0] = *(unsigned char *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 1, 1, v50, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v49)).i32[0]);
    int8x8_t v51 = (int8x8_t)v66;
    v48[7] = v66;
    v51.i8[0] = *(unsigned char *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 2, 1, v52, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v51)).i32[0]);
    int8x8_t v53 = (int8x8_t)v66;
    v48[8] = v66;
    v53.i8[0] = *(unsigned char *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 3, 1, v54, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v53)).i32[0]);
    int8x8_t v55 = (int8x8_t)v66;
    v48[9] = v66;
    v55.i8[0] = *(unsigned char *)(a1 + 12);
    md::trafficColorForSpeed((uint64_t)&v66, (uint64_t)v67, 4, 1, v56, (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v55)).i32[0]);
    v48[10] = v66;
  }
LABEL_21:
  uint64_t result = gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v67);
  if (v73)
  {
    unint64_t v60 = v70;
    unint64_t v59 = v71;
    if (v71 != v70)
    {
      uint64_t v61 = (void *)*((void *)&v69 + 1);
      uint64_t result = v69;
      int v62 = v72;
      int v63 = HIBYTE(v72);
      if ((void)v69 && *(unsigned char *)(*((void *)&v69 + 1) + 17) != 2) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v69 + 64))();
      }
      if (v62 && !v63)
      {
        unint64_t v65 = v61[7];
        unint64_t v64 = v61[8];
        if (v64 == v65) {
          unint64_t v65 = v61[10] - v61[9];
        }
        if (v60 < v65) {
          unint64_t v65 = v60;
        }
        if (v64 <= v59) {
          unint64_t v64 = v59;
        }
        if (v64 == v65) {
          unint64_t v64 = v65 + v61[10] - v61[9];
        }
        v61[7] = v65;
        v61[8] = v64;
      }
    }
  }
  return result;
}

void sub_1A1E79B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

unint64_t md::trafficWidthForSpeedAtZ(unint64_t result, int a2, float a3)
{
  switch(a2)
  {
    case 0:
      unint64_t v4 = *(void *)(*(void *)result + 24);
      if ((int)a3 >= 0x17) {
        unsigned int v5 = 23;
      }
      else {
        unsigned int v5 = (int)a3;
      }
      uint64_t v6 = *(float **)v4;
      if (*(void *)v4)
      {
        float v7 = *v6;
        BOOL v8 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v7 != 0.0 && v7 != 1.0) {
            goto LABEL_48;
          }
        }
      }
      else
      {
        BOOL v8 = 0;
      }
      unsigned int v22 = *(unsigned __int8 *)(v4 + v8 + 11);
      if (v22 != 2) {
        goto LABEL_50;
      }
LABEL_48:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)result + 24), 0x30u, v5, 0))goto LABEL_51; {
      unsigned int v22 = 1;
      }
LABEL_50:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x30u, v5, v22)) {
        goto LABEL_98;
      }
LABEL_51:
      float v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        float v24 = *v6;
        BOOL v25 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v24 != 0.0 && v24 != 1.0) {
            goto LABEL_112;
          }
        }
      }
      else
      {
        BOOL v25 = 0;
      }
      unsigned int v42 = *(unsigned __int8 *)(v4 + v25 + 11);
      if (v42 == 2)
      {
LABEL_112:
        char v48 = 1;
        char v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x30u, 0, (BOOL *)&v48, v23);
        unint64_t v43 = v4;
        unsigned int v44 = 48;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      unint64_t v45 = v4;
      unsigned int v46 = 48;
      goto LABEL_127;
    case 1:
      unint64_t v4 = *(void *)(*(void *)result + 24);
      if ((int)a3 >= 0x17) {
        unsigned int v10 = 23;
      }
      else {
        unsigned int v10 = (int)a3;
      }
      uint64_t v6 = *(float **)v4;
      if (*(void *)v4)
      {
        float v11 = *v6;
        BOOL v12 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v11 != 0.0 && v11 != 1.0) {
            goto LABEL_61;
          }
        }
      }
      else
      {
        BOOL v12 = 0;
      }
      unsigned int v27 = *(unsigned __int8 *)(v4 + v12 + 11);
      if (v27 != 2) {
        goto LABEL_63;
      }
LABEL_61:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)result + 24), 0x3Bu, v10, 0))goto LABEL_64; {
      unsigned int v27 = 1;
      }
LABEL_63:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x3Bu, v10, v27)) {
        goto LABEL_98;
      }
LABEL_64:
      float v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        float v28 = *v6;
        BOOL v29 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v28 != 0.0 && v28 != 1.0) {
            goto LABEL_115;
          }
        }
      }
      else
      {
        BOOL v29 = 0;
      }
      unsigned int v42 = *(unsigned __int8 *)(v4 + v29 + 11);
      if (v42 == 2)
      {
LABEL_115:
        char v48 = 1;
        char v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x3Bu, 0, (BOOL *)&v48, v23);
        unint64_t v43 = v4;
        unsigned int v44 = 59;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      unint64_t v45 = v4;
      unsigned int v46 = 59;
      goto LABEL_127;
    case 2:
      unint64_t v4 = *(void *)(*(void *)result + 24);
      if ((int)a3 >= 0x17) {
        unsigned int v14 = 23;
      }
      else {
        unsigned int v14 = (int)a3;
      }
      uint64_t v6 = *(float **)v4;
      if (*(void *)v4)
      {
        float v15 = *v6;
        BOOL v16 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v15 != 0.0 && v15 != 1.0) {
            goto LABEL_74;
          }
        }
      }
      else
      {
        BOOL v16 = 0;
      }
      unsigned int v31 = *(unsigned __int8 *)(v4 + v16 + 11);
      if (v31 != 2) {
        goto LABEL_76;
      }
LABEL_74:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)result + 24), 0x46u, v14, 0))goto LABEL_77; {
      unsigned int v31 = 1;
      }
LABEL_76:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x46u, v14, v31)) {
        goto LABEL_98;
      }
LABEL_77:
      float v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        float v32 = *v6;
        BOOL v33 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v32 != 0.0 && v32 != 1.0) {
            goto LABEL_118;
          }
        }
      }
      else
      {
        BOOL v33 = 0;
      }
      unsigned int v42 = *(unsigned __int8 *)(v4 + v33 + 11);
      if (v42 == 2)
      {
LABEL_118:
        char v48 = 1;
        char v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x46u, 0, (BOOL *)&v48, v23);
        unint64_t v43 = v4;
        unsigned int v44 = 70;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      unint64_t v45 = v4;
      unsigned int v46 = 70;
      goto LABEL_127;
    case 3:
      unint64_t v4 = *(void *)(*(void *)result + 24);
      if ((int)a3 >= 0x17) {
        unsigned int v18 = 23;
      }
      else {
        unsigned int v18 = (int)a3;
      }
      uint64_t v6 = *(float **)v4;
      if (*(void *)v4)
      {
        float v19 = *v6;
        BOOL v20 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v19 != 0.0 && v19 != 1.0) {
            goto LABEL_87;
          }
        }
      }
      else
      {
        BOOL v20 = 0;
      }
      unsigned int v35 = *(unsigned __int8 *)(v4 + v20 + 11);
      if (v35 != 2) {
        goto LABEL_89;
      }
LABEL_87:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)result + 24), 0x51u, v18, 0))goto LABEL_90; {
      unsigned int v35 = 1;
      }
LABEL_89:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x51u, v18, v35))
      {
LABEL_98:
        float v23 = fminf(fmaxf(a3, 0.0), 23.0);
        if (v6)
        {
          float v39 = *v6;
          BOOL v40 = *v6 == 1.0;
          if (*(unsigned char *)(v4 + 10))
          {
            if (v39 != 0.0 && v39 != 1.0)
            {
LABEL_108:
              char v48 = 1;
              char v47 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0xA4u, 0, (BOOL *)&v48, v23);
              unint64_t v43 = v4;
              unsigned int v44 = 164;
              return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
            }
          }
        }
        else
        {
          BOOL v40 = 0;
        }
        unsigned int v42 = *(unsigned __int8 *)(v4 + v40 + 11);
        if (v42 != 2)
        {
          unint64_t v45 = v4;
          unsigned int v46 = 164;
          goto LABEL_127;
        }
        goto LABEL_108;
      }
LABEL_90:
      float v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        float v36 = *v6;
        BOOL v37 = *v6 == 1.0;
        if (*(unsigned char *)(v4 + 10))
        {
          if (v36 != 0.0 && v36 != 1.0) {
            goto LABEL_121;
          }
        }
      }
      else
      {
        BOOL v37 = 0;
      }
      unsigned int v42 = *(unsigned __int8 *)(v4 + v37 + 11);
      if (v42 == 2)
      {
LABEL_121:
        char v48 = 1;
        char v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x51u, 0, (BOOL *)&v48, v23);
        unint64_t v43 = v4;
        unsigned int v44 = 81;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      unint64_t v45 = v4;
      unsigned int v46 = 81;
LABEL_127:
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    default:
      return result;
  }
}

void ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverManeuver::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t altitude::ManeuverDrawRegion::cull(altitude::ManeuverDrawRegion *this, altitude::View *a2, karo::graphics::Viewport *a3, ResourceAccessor *a4)
{
  v58[52] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (md::realistic::RouteRenderLayer *)*((void *)this + 1);
  md::realistic::RouteRenderLayer::loadStylesheet(v5);
  uint64_t v6 = *((void *)v5 + 29);
  float v7 = (std::__shared_weak_count *)*((void *)v5 + 30);
  v58[0] = v6;
  v58[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v55, v6, (uint64_t)v7);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v56) {
      return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v55);
    }
  }
  else if (!v56)
  {
    return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v55);
  }
  uint64_t v8 = *(void *)(v55[0] + 24);
  uint64_t v9 = *(float **)v8;
  if (*(void *)v8
    && (float v10 = *v9, LODWORD(v9) = *v9 == 1.0, *(unsigned char *)(v8 + 10))
    && (v10 != 0.0 ? (BOOL v11 = v10 == 1.0) : (BOOL v11 = 1), !v11)
    || (v12 = *(unsigned __int8 *)(v8 + v9 + 11), float v10 = 0.0, v12 == 2))
  {
    LOBYTE(v58[0]) = 1;
    LOBYTE(v57) = 1;
    uint64_t v13 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v8, 0x106u, 0, v58);
    float v14 = *v13
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v8, 0x106u, 1u, &v57)
                        - *v13)
                * v10);
  }
  else
  {
    float v14 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v55[0] + 24), 0x106u, v12, 0);
  }
  float v15 = *((float *)a2 + 338);
  if (v15 >= v14)
  {
    BOOL v23 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(v55[0] + 24);
    long long v17 = *(float **)v16;
    if (*(void *)v16
      && (float v18 = *v17, LODWORD(v17) = *v17 == 1.0, *(unsigned char *)(v16 + 10))
      && (v18 != 0.0 ? (BOOL v19 = v18 == 1.0) : (BOOL v19 = 1), !v19)
      || (v20 = *(unsigned __int8 *)(v16 + v17 + 11), float v18 = 0.0, v20 == 2))
    {
      LOBYTE(v58[0]) = 1;
      LOBYTE(v57) = 1;
      int8x8_t v21 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v16, 0x107u, 0, v58);
      float v22 = *v21
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v16, 0x107u, 1u, &v57)
                          - *v21)
                  * v18);
    }
    else
    {
      float v22 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v55[0] + 24), 0x107u, v20, 0);
    }
    BOOL v23 = v15 > v22;
  }
  int v24 = v15 >= v14 || v23;
  float v25 = *((float *)this + 13);
  if (v24 == 1)
  {
    if (v25 < 1.0 && !*((unsigned char *)this + 48)) {
      goto LABEL_40;
    }
  }
  else if (v25 > 0.0 && !*((unsigned char *)this + 48))
  {
LABEL_40:
    *((unsigned char *)this + 48) = 1;
    operator new();
  }
  if (([*(id *)(*(void *)(*(void *)this + 40) + 40) maneuverDisplayEnabled] & 1) == 0)
  {
    uint64_t v26 = *((void *)this + 2);
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    *((void *)this + 2) = 0;
  }
  uint64_t v27 = *(void *)(*(void *)this + 40);
  if (*(unsigned char *)(v27 + 64))
  {
    float v28 = *((float *)a2 + 338);
    if ([*(id *)(v27 + 40) maneuverDisplayEnabled])
    {
      if ((v24 & 1) != 0 || *((unsigned char *)this + 48))
      {
        uint64_t v29 = *((void *)this + 2);
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        *((void *)this + 2) = 0;
        uint64_t v30 = *(void *)(v55[0] + 24);
        if ((int)v28 >= 0x17) {
          unsigned int v31 = 23;
        }
        else {
          unsigned int v31 = (int)v28;
        }
        float v32 = *(float **)v30;
        if (*(void *)v30
          && (float v33 = *v32, LODWORD(v32) = *v32 == 1.0, *(unsigned char *)(v30 + 10))
          && (v33 != 0.0 ? (BOOL v34 = v33 == 1.0) : (BOOL v34 = 1), !v34)
          || (unsigned int v35 = *(unsigned __int8 *)(v30 + v32 + 11), v35 == 2))
        {
          LOBYTE(v58[0]) = 1;
          LOBYTE(v57) = 1;
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v30, 0x5Eu, v31, 0, v58);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v30, 0x5Eu, v31, 1u, &v57);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v55[0] + 24), 0x5Eu, v31, v35, 0);
        }
        uint64_t v36 = *(void *)(v55[0] + 24);
        BOOL v37 = *(float **)v36;
        if (*(void *)v36
          && (float v38 = *v37, LODWORD(v37) = *v37 == 1.0, *(unsigned char *)(v36 + 10))
          && (v38 != 0.0 ? (BOOL v39 = v38 == 1.0) : (BOOL v39 = 1), !v39)
          || (unsigned int v40 = *(unsigned __int8 *)(v36 + v37 + 11), v40 == 2))
        {
          LOBYTE(v58[0]) = 1;
          LOBYTE(v57) = 1;
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v36, 0xF3u, 0, v58);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v36, 0xF3u, 1u, &v57);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v55[0] + 24), 0xF3u, v40, 0);
        }
        uint64_t v41 = *(void *)(v55[0] + 24);
        unsigned int v42 = *(float **)v41;
        if (*(void *)v41
          && (float v43 = *v42, LODWORD(v42) = *v42 == 1.0, *(unsigned char *)(v41 + 10))
          && v43 != 0.0
          && v43 != 1.0
          || (unsigned int v44 = *(unsigned __int8 *)(v41 + v42 + 11), v44 == 2))
        {
          LOBYTE(v58[0]) = 1;
          LOBYTE(v57) = 1;
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v41, 0xF4u, 0, v58);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v41, 0xF4u, 1u, &v57);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v55[0] + 24), 0xF4u, v44, 0);
        }
        uint64_t v45 = *(void *)(v55[0] + 24);
        unsigned int v46 = *(float **)v45;
        if (*(void *)v45
          && (float v47 = *v46, LODWORD(v46) = *v46 == 1.0, *(unsigned char *)(v45 + 10))
          && v47 != 0.0
          && v47 != 1.0
          || (unsigned int v48 = *(unsigned __int8 *)(v45 + v46 + 11), v48 == 2))
        {
          LOBYTE(v58[0]) = 1;
          LOBYTE(v57) = 1;
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v45, 0xF5u, 0, v58);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v45, 0xF5u, 1u, &v57);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v55[0] + 24), 0xF5u, v48, 0);
        }
        uint64_t v49 = *(void *)(v55[0] + 24);
        char v50 = *(float **)v49;
        if (*(void *)v49
          && (float v51 = *v50, LODWORD(v50) = *v50 == 1.0, *(unsigned char *)(v49 + 10))
          && v51 != 0.0
          && v51 != 1.0
          || (unsigned int v52 = *(unsigned __int8 *)(v49 + v50 + 11), v52 == 2))
        {
          LOBYTE(v58[0]) = 1;
          LOBYTE(v57) = 1;
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x5Eu, v31, 0, v58);
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x5Eu, v31, 1u, &v57);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v55[0] + 24), 0x5Eu, v31, v52, 0);
        }
        operator new();
      }
    }
  }
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v55);
}

void altitude::ManeuverDrawRegion::assemble(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  BOOL v11 = (double *)a1[3];
  unsigned int v12 = (double *)a1[4];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 - v11);
  double v14 = altitude::ManeuverDrawRegion::simplified(*(altitude::ManeuverDrawRegion **)(*a1 + 56), *(PolylineCoordinate **)(*a1 + 80), *a3, *((float *)a3 + 1));
  double v17 = v14;
  uint64_t v18 = v15;
  uint64_t v19 = v16;
  unint64_t v20 = a1[5];
  if ((unint64_t)v12 >= v20)
  {
    unint64_t v22 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_113;
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v11) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x555555555555555) {
      unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_114;
      }
      float v25 = (char *)operator new(24 * v24);
    }
    else
    {
      float v25 = 0;
    }
    uint64_t v26 = (double *)&v25[8 * (v12 - v11)];
    uint64_t v27 = &v25[24 * v24];
    double *v26 = v17;
    *((void *)v26 + 1) = v18;
    *((void *)v26 + 2) = v19;
    int8x8_t v21 = v26 + 3;
    if (v12 != v11)
    {
      do
      {
        long long v28 = *(_OWORD *)(v12 - 3);
        *(v26 - 1) = *(v12 - 1);
        *(_OWORD *)(v26 - 3) = v28;
        v26 -= 3;
        v12 -= 3;
      }
      while (v12 != v11);
      unsigned int v12 = (double *)a1[3];
    }
    a1[3] = v26;
    a1[4] = v21;
    a1[5] = v27;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *unsigned int v12 = v14;
    *((void *)v12 + 1) = v15;
    int8x8_t v21 = v12 + 3;
    *((void *)v12 + 2) = v16;
  }
  uint64_t v100 = a2;
  unint64_t v101 = v13;
  uint64_t v102 = a5;
  a1[4] = v21;
  uint64_t v29 = *(void *)(v10 + 56);
  uint64_t v30 = v29 + 48 * *a3;
  unsigned int v31 = *(_DWORD *)(v30 + 40);
  unsigned int v32 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 >= v31 && *(_DWORD *)(v30 + 36) != v31)
  {
    while (1)
    {
      uint64_t v47 = *(void *)(v10 + 80) + 24 * (int)v31;
      float64x2_t v48 = vsubq_f64(*(float64x2_t *)(v21 - 2), *(float64x2_t *)(v47 + 8));
      float64x2_t v49 = vmulq_f64(v48, v48);
      if (v49.f64[0] + (*(v21 - 3) - *(double *)v47) * (*(v21 - 3) - *(double *)v47) + v49.f64[1] <= 0.0) {
        goto LABEL_28;
      }
      unint64_t v50 = a1[5];
      if ((unint64_t)v21 >= v50) {
        break;
      }
      long long v43 = *(_OWORD *)v47;
      void v21[2] = *(double *)(v47 + 16);
      *(_OWORD *)int8x8_t v21 = v43;
      unsigned int v44 = v21 + 3;
LABEL_27:
      a1[4] = v44;
      unsigned int v32 = *(_DWORD *)a4;
      int8x8_t v21 = v44;
      uint64_t v29 = *(void *)(v10 + 56);
LABEL_28:
      uint64_t v45 = v29 + 48 * (int)v31;
      unsigned int v31 = *(_DWORD *)(v45 + 40);
      if (v32 < v31 || *(_DWORD *)(v45 + 36) == v31) {
        goto LABEL_23;
      }
    }
    uint64_t v51 = a4;
    unsigned int v52 = (double *)a1[3];
    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (v21 - v52) + 1;
    if (v53 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_113;
    }
    unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v52) >> 3);
    if (2 * v54 > v53) {
      unint64_t v53 = 2 * v54;
    }
    if (v54 >= 0x555555555555555) {
      unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55)
    {
      if (v55 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_114;
      }
      char v56 = (char *)operator new(24 * v55);
    }
    else
    {
      char v56 = 0;
    }
    long long v57 = &v56[8 * (v21 - v52)];
    long long v58 = *(_OWORD *)v47;
    unint64_t v59 = &v56[24 * v55];
    *((void *)v57 + 2) = *(void *)(v47 + 16);
    *(_OWORD *)long long v57 = v58;
    unsigned int v44 = (double *)(v57 + 24);
    if (v21 == v52)
    {
      a1[3] = v57;
      a1[4] = v44;
      a1[5] = v59;
    }
    else
    {
      do
      {
        long long v60 = *(_OWORD *)(v21 - 3);
        *((double *)v57 - 1) = *(v21 - 1);
        *(_OWORD *)(v57 - 24) = v60;
        v57 -= 24;
        v21 -= 3;
      }
      while (v21 != v52);
      int8x8_t v21 = (double *)a1[3];
      a1[3] = v57;
      a1[4] = v44;
      a1[5] = v59;
      if (!v21) {
        goto LABEL_50;
      }
    }
    operator delete(v21);
LABEL_50:
    a4 = v51;
    goto LABEL_27;
  }
LABEL_23:
  double v36 = altitude::ManeuverDrawRegion::simplified(*(altitude::ManeuverDrawRegion **)(*a1 + 56), *(PolylineCoordinate **)(*a1 + 80), v32, *(float *)(a4 + 4));
  double v37 = v34;
  double v38 = v35;
  if ((*(v21 - 3) - v36) * (*(v21 - 3) - v36)
     + (*(v21 - 2) - v34) * (*(v21 - 2) - v34)
     + (*(v21 - 1) - v35) * (*(v21 - 1) - v35) <= 0.0)
  {
    unint64_t v40 = v101;
    uint64_t v41 = v102;
    goto LABEL_69;
  }
  unint64_t v39 = a1[5];
  unint64_t v40 = v101;
  uint64_t v41 = v102;
  if ((unint64_t)v21 < v39)
  {
    double *v21 = v36;
    v21[1] = v34;
    unsigned int v42 = v21 + 3;
    void v21[2] = v35;
    goto LABEL_68;
  }
  uint64_t v61 = (double *)a1[3];
  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (v21 - v61) + 1;
  if (v62 > 0xAAAAAAAAAAAAAAALL) {
LABEL_113:
  }
    abort();
  unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)v61) >> 3);
  if (2 * v63 > v62) {
    unint64_t v62 = 2 * v63;
  }
  if (v63 >= 0x555555555555555) {
    unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v64 = v62;
  }
  if (!v64)
  {
    unint64_t v65 = 0;
    goto LABEL_62;
  }
  if (v64 > 0xAAAAAAAAAAAAAAALL) {
LABEL_114:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unint64_t v65 = (char *)operator new(24 * v64);
LABEL_62:
  long long v66 = (double *)&v65[8 * (v21 - v61)];
  uint64_t v67 = &v65[24 * v64];
  *long long v66 = v36;
  v66[1] = v37;
  v66[2] = v38;
  unsigned int v42 = v66 + 3;
  if (v21 == v61)
  {
    a1[3] = v66;
    a1[4] = v42;
    a1[5] = v67;
  }
  else
  {
    do
    {
      long long v68 = *(_OWORD *)(v21 - 3);
      *(v66 - 1) = *(v21 - 1);
      *(_OWORD *)(v66 - 3) = v68;
      v66 -= 3;
      v21 -= 3;
    }
    while (v21 != v61);
    int8x8_t v21 = (double *)a1[3];
    a1[3] = v66;
    a1[4] = v42;
    a1[5] = v67;
    if (!v21) {
      goto LABEL_68;
    }
  }
  operator delete(v21);
LABEL_68:
  a1[4] = v42;
  int8x8_t v21 = v42;
LABEL_69:
  unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - a1[3]) >> 3);
  unint64_t v70 = v69 - v40;
  if (v69 - v40 <= 1)
  {
    if (v69 - v40 == 1) {
      a1[4] = v21 - 3;
    }
    return;
  }
  uint64_t v71 = *(unsigned int *)(v100 + 16);
  {
    operator new();
  }
  uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 80, 8);
  uint64_t v73 = v72;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)uint64_t v72 = 0u;
  *(_OWORD *)(v72 + 16) = 0u;
  uint64_t v103 = v72;
  *(void *)(v72 + 64) = 0;
  *(void *)(v72 + 72) = v71;
  *(void *)(v72 + 48) = v70;
  *(void *)(v72 + 56) = v40;
  unint64_t v74 = *(uint64_t **)(v41 + 8);
  unint64_t v75 = *(void *)(v41 + 16);
  if ((unint64_t)v74 >= v75)
  {
    uint64_t v77 = ((uint64_t)v74 - *(void *)v41) >> 3;
    unint64_t v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 61) {
      abort();
    }
    uint64_t v79 = v75 - *(void *)v41;
    if (v79 >> 2 > v78) {
      unint64_t v78 = v79 >> 2;
    }
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v80 = v78;
    }
    if (v80)
    {
      uint64_t v81 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v41 + 24) + 16))(*(void *)(v41 + 24), 8 * v80, 8);
      uint64_t v82 = (uint64_t *)(v81 + 8 * v77);
      uint64_t v83 = v81 + 8 * v80;
      if (v81)
      {
        uint64_t v103 = 0;
        *uint64_t v82 = v73;
      }
    }
    else
    {
      uint64_t v83 = 0;
      uint64_t v82 = (uint64_t *)(8 * v77);
    }
    uint64_t v76 = v82 + 1;
    uint64_t v84 = *(char **)v41;
    unint64_t v85 = *(char **)(v41 + 8);
    if (v85 == *(char **)v41)
    {
      *(void *)uint64_t v41 = v82;
      *(void *)(v41 + 8) = v76;
      uint64_t v91 = *(void *)(v41 + 16);
      *(void *)(v41 + 16) = v83;
LABEL_102:
      if (v85) {
        (*(void (**)(void, char *, uint64_t))(**(void **)(v41 + 24) + 40))(*(void *)(v41 + 24), v85, v91 - (void)v85);
      }
      uint64_t v73 = v103;
      goto LABEL_105;
    }
    unint64_t v86 = (unint64_t)&v85[-*(void *)v41 - 8];
    if (v86 > 0x57
      && ((unint64_t v87 = (v84 - v85 + 7) & 0xFFFFFFFFFFFFFFF8, &v85[v87] >= (char *)v82) || (char *)v82 + v87 >= v85))
    {
      uint64_t v94 = (v86 >> 3) + 1;
      float32x4_t v88 = &v85[-8 * (v94 & 0x3FFFFFFFFFFFFFFCLL)];
      int v95 = v82 - 2;
      int8x16_t v96 = v85 - 32;
      uint64_t v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v99 = *(_OWORD *)v96;
        long long v98 = *((_OWORD *)v96 + 1);
        *(_OWORD *)int8x16_t v96 = 0uLL;
        *((_OWORD *)v96 + 1) = 0uLL;
        v96 -= 32;
        *((_OWORD *)v95 - 1) = v99;
        *(_OWORD *)int v95 = v98;
        v95 -= 4;
        v97 -= 4;
      }
      while (v97);
      v82 -= v94 & 0x3FFFFFFFFFFFFFFCLL;
      if (v94 == (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        unint64_t v85 = *(char **)v41;
        uint64_t v90 = *(char **)(v41 + 8);
        *(void *)uint64_t v41 = v82;
        *(void *)(v41 + 8) = v76;
        uint64_t v91 = *(void *)(v41 + 16);
        *(void *)(v41 + 16) = v83;
        while (v90 != v85)
        {
          uint64_t v93 = *((void *)v90 - 1);
          v90 -= 8;
          uint64_t v92 = v93;
          *(void *)uint64_t v90 = 0;
          if (v93)
          {
            {
              operator new();
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v92, 80);
          }
        }
        goto LABEL_102;
      }
    }
    else
    {
      float32x4_t v88 = *(char **)(v41 + 8);
    }
    do
    {
      uint64_t v89 = *((void *)v88 - 1);
      v88 -= 8;
      *(void *)float32x4_t v88 = 0;
      *--uint64_t v82 = v89;
    }
    while (v88 != v84);
    goto LABEL_93;
  }
  if (v74)
  {
    *unint64_t v74 = v72;
    uint64_t v73 = 0;
  }
  uint64_t v76 = v74 + 1;
LABEL_105:
  *(void *)(v41 + 8) = v76;
  if (v73)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v73, 80);
  }
}

void sub_1A1E7DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<md::FlyoverManeuver,mdm::TypeDeleter<md::FlyoverManeuver>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

double altitude::ManeuverDrawRegion::simplified(altitude::ManeuverDrawRegion *this, PolylineCoordinate *a2, unsigned int a3, float a4)
{
  unint64_t v4 = (float *)((char *)this + 48 * a3);
  unsigned int v5 = (float *)((char *)this + 48 * (unint64_t)(float)(ceilf(a4) + (float)a3));
  return (*(double *)&a2[3 * *((int *)v4 + 9)] * (float)(1.0 - v4[11]) + *(double *)&a2[3 * *((int *)v4 + 10)] * v4[11])
       * (1.0 - a4)
       + (*(double *)&a2[3 * *((int *)v5 + 9)] * (float)(1.0 - v5[11]) + *(double *)&a2[3 * *((int *)v5 + 10)] * v5[11])
       * a4;
}

uint64_t *std::unique_ptr<md::FlyoverManeuver,mdm::TypeDeleter<md::FlyoverManeuver>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v5) {
        operator new();
      }
    }
    (*(void (**)(void))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91));
  }
  return a1;
}

void *std::function<void ()(double)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void CompletionAnimation::~CompletionAnimation(CompletionAnimation *this)
{
  CompletionAnimation::~CompletionAnimation(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  uint64_t v3;
  char *v4;

  *(void *)this = &unk_1EF52FB80;
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
    unint64_t v4 = (char *)*((void *)this + 4);
    if (v4 == v2)
    {
      (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    }
    else if (v4)
    {
      (*(void (**)(char *))(*(void *)v4 + 40))(v4);
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1E7DF2C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    _Unwind_Resume(exception_object);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CompletionAnimation::isDead(CompletionAnimation *this)
{
  return 1;
}

uint64_t std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 48) = 0;
  return result;
}

uint64_t std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D3F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57D3F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::~__func()
{
}

uint64_t altitude::ManeuverDrawRegion::setAlpha(uint64_t this, float a2)
{
  *(float *)(this + 52) = a2;
  return this;
}

uint64_t std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(void *a1, double *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, float))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, float))(*v4 + v3);
  }
  float v5 = *a2;
  return v3(v4, v5);
}

__n128 std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56B968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56B968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::~__func()
{
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(a1 + 8), *a3);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578E70;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578E70;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::~__func()
{
}

void md::FlyoverRenderable::~FlyoverRenderable(md::FlyoverRenderable *this)
{
  *(void *)this = &unk_1EF513508;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513508;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513AC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    float v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5) {
      return;
    }
  }
  else
  {
    float v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  uint64_t vars8;

  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

void md::MapTileDataRenderable<md::MapTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513508;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513508;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t altitude::RouteDrawRegion::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    operator new();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 80, 8);
  uint64_t v7 = result;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  uint64_t v34 = result;
  *(void *)(result + 48) = a2 - a1;
  *(void *)(result + 56) = a1;
  uint64_t v8 = *(uint64_t **)(a3 + 8);
  unint64_t v9 = *(void *)(a3 + 16);
  if ((unint64_t)v8 < v9)
  {
    if (v8)
    {
      *uint64_t v8 = result;
      uint64_t v7 = 0;
    }
    uint64_t v10 = v8 + 1;
    goto LABEL_34;
  }
  uint64_t v11 = ((uint64_t)v8 - *(void *)a3) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    abort();
  }
  uint64_t v13 = v9 - *(void *)a3;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 24) + 16))(*(void *)(a3 + 24), 8 * v14, 8);
    uint64_t v15 = (uint64_t *)(result + 8 * v11);
    uint64_t v16 = result + 8 * v14;
    if (result)
    {
      uint64_t v34 = 0;
      uint64_t *v15 = v7;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = (uint64_t *)(8 * v11);
  }
  uint64_t v10 = v15 + 1;
  double v17 = *(char **)a3;
  uint64_t v18 = *(char **)(a3 + 8);
  if (v18 != *(char **)a3)
  {
    unint64_t v19 = (unint64_t)&v18[-*(void *)a3 - 8];
    if (v19 > 0x57
      && ((unint64_t v20 = (v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8, &v18[v20] >= (char *)v15) || (char *)v15 + v20 >= v18))
    {
      uint64_t v28 = (v19 >> 3) + 1;
      int8x8_t v21 = &v18[-8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v29 = v15 - 2;
      uint64_t v30 = v18 - 32;
      uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *(_OWORD *)v30;
        long long v32 = *((_OWORD *)v30 + 1);
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v30 + 1) = 0uLL;
        v30 -= 32;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 4;
        v31 -= 4;
      }
      while (v31);
      v15 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
      if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        uint64_t v18 = *(char **)a3;
        unint64_t v23 = *(char **)(a3 + 8);
        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v10;
        uint64_t v24 = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v16;
        while (v23 != v18)
        {
          uint64_t v26 = *((void *)v23 - 1);
          v23 -= 8;
          uint64_t v25 = v26;
          *(void *)unint64_t v23 = 0;
          if (v26)
          {
            {
              operator new();
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v25, 80);
          }
        }
        goto LABEL_31;
      }
    }
    else
    {
      int8x8_t v21 = *(char **)(a3 + 8);
    }
    do
    {
      uint64_t v22 = *((void *)v21 - 1);
      v21 -= 8;
      *(void *)int8x8_t v21 = 0;
      *--uint64_t v15 = v22;
    }
    while (v21 != v17);
    goto LABEL_22;
  }
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v10;
  uint64_t v24 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v16;
LABEL_31:
  if (v18) {
    uint64_t result = (*(uint64_t (**)(void, char *, uint64_t))(**(void **)(a3 + 24) + 40))(*(void *)(a3 + 24), v18, v24 - (void)v18);
  }
  uint64_t v7 = v34;
LABEL_34:
  *(void *)(a3 + 8) = v10;
  if (v7)
  {
    {
      operator new();
    }
    uint64_t v27 = *(uint64_t (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
    return v27();
  }
  return result;
}

void sub_1A1E7EE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<md::FlyoverManeuver,mdm::TypeDeleter<md::FlyoverManeuver>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void altitude::RouteDrawRegion::update(altitude::RouteDrawRegion *this, ResourceAccessor *a2)
{
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t, ResourceAccessor *))(*(void *)v3 + 8))(v3, a2);
  }
  *((void *)this + 3) = *((void *)this + 2);
  *((void *)this + 6) = *((void *)this + 5);
  operator new();
}

void sub_1A1E816B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(a1 + 8), *a3);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578E28;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578E28;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::~__func()
{
}

void md::LineLabelFeature::removeTile(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 192);
  {
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  uint64_t v5 = v4;
  *(_DWORD *)uint64_t v4 = 10;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t v6 = a2[1];
  *(void *)(v4 + 24) = *a2;
  *(void *)(v4 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v4 + 88) = 0;
  long long v7 = 0uLL;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  {
    long long v7 = 0uLL;
    if (v11) {
      operator new();
    }
  }
  *(void *)(v5 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v5 + 104) = v7;
  *(_OWORD *)(v5 + 120) = v7;
  *(void *)(v5 + 136) = 0;
  *(_WORD *)(v5 + 144) = 255;
  *(_DWORD *)(v5 + 148) = 0;
  *(_DWORD *)(v5 + 152) = 0;
  *(void *)(v5 + 168) = 0;
  *(void *)(v5 + 176) = 0;
  *(int64x2_t *)(v5 + 184) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v5 + 200) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(unsigned char *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 220) = 0;
  *(_WORD *)(v5 + 224) = 256;
  *(unsigned char *)(v5 + 226) = 0;
  *(void *)(v5 + 232) = 0;
  *(void *)(v5 + 240) = 0;
  uint64_t v12 = v5;
  std::mutex::lock((std::mutex *)(v3 + 16));
  uint64_t v8 = *(uint64_t **)(v3 + 96);
  if ((unint64_t)v8 >= *(void *)(v3 + 104))
  {
    unint64_t v9 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(v3 + 88, &v12);
    uint64_t v5 = v12;
  }
  else
  {
    if (v8)
    {
      uint64_t v12 = 0;
      *uint64_t v8 = v5;
      uint64_t v5 = 0;
    }
    unint64_t v9 = v8 + 1;
  }
  *(void *)(v3 + 96) = v9;
  atomic_store(1u, (unsigned __int8 *)(v3 + 80));
  std::mutex::unlock((std::mutex *)(v3 + 16));
  uint64_t v12 = 0;
  if (v5)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit((md::LabelLineStore::WorkUnit *)v5);
    {
      operator new();
    }
    uint64_t v10 = *(void (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
    v10();
  }
}

{
  md::LabelLineStore::removeRoadFeaturesInTile<geo::codec::VectorTile>(*(void *)(a1 + 192), a2);
}

void sub_1A1E81A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::isPickedStateStylable(md::LabelFeature *this)
{
  return 1;
}

uint64_t md::LabelFeature::styleForElementIndex(md::LabelFeature *this)
{
  return 0;
}

uint64_t *std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), *(void *)v2, *(void *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    }
    MEMORY[0x1A6239270](v2, 0x1032C402ED93987);
  }
  return a1;
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::LabelFeature::setFlexZone(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::setViewProximity(uint64_t result, char a2)
{
  *(unsigned char *)(result + 146) = a2;
  return result;
}

uint64_t md::LabelFeature::viewProximity(md::LabelFeature *this)
{
  return *((unsigned __int8 *)this + 146);
}

uint64_t md::LineLabelFeature::publicShieldName(md::LineLabelFeature *this)
{
  if (*((void *)this + 44) == *((void *)this + 45)) {
    return 0;
  }
  else {
    return *((void *)this + 44);
  }
}

uint64_t md::LabelFeature::containsPoint()
{
  return 0;
}

uint64_t md::LabelFeature::venueComponentType(md::LabelFeature *this)
{
  return 0;
}

void md::LabelFeature::venueLookInsideFloorOrdinal(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::LabelFeature::venueFloorOrdinal(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueComponentID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueLevelID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueBuildingID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::isSummaryPOI(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::isMuninLandmark(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::routeCoordinate()
{
  return 0;
}

uint64_t md::LabelFeature::labelFeatureTrait(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::labelFeatureType(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::positionMask(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::customFeatureAnnotation(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::trafficCamera(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::hasValidCustomFeatureAnnotation(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::arWalkingFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::incident(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::animationID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::businessID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::clientFeatureID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::featureID(md::LabelFeature *this)
{
  return 0;
}

__n128 md::LineLabelFeature::secondaryLabelPoint@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 232);
  uint64_t v4 = a1 + 232;
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  unsigned int v7 = *a2;
  uint64_t v8 = v4;
  do
  {
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v5;
    }
    else {
      int v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == v4 || v7 < *(_DWORD *)(v8 + 32))
  {
LABEL_12:
    uint64_t v12 = 0;
    uint64_t v16 = 0;
    double v17 = 0;
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v8 + 40);
  uint64_t v12 = *(std::__shared_weak_count **)(v8 + 48);
  uint64_t v16 = v14;
  double v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v14)
  {
LABEL_13:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
    if (!v12) {
      return result;
    }
    goto LABEL_14;
  }
  __n128 v15 = 0uLL;
  (*(void (**)(uint64_t, __n128 *))(*(void *)v14 + 64))(v14, &v15);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  __n128 result = v15;
  *(__n128 *)(a3 + 24) = v15;
  *(_DWORD *)(a3 + 40) = 2139095039;
  *(_WORD *)(a3 + 44) = 256;
  *(unsigned char *)(a3 + 46) = 1;
  *(unsigned char *)(a3 + 48) = 1;
  if (!v12) {
    return result;
  }
LABEL_14:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return result;
}

void sub_1A1E81DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::newPoint()
{
  return 0;
}

void md::LineLabelFeature::populateFeatureInfo(md::LineLabelFeature *this, md::LabelFeatureInfo *a2)
{
  uint64_t v4 = (char *)a2 + 16;
  if (!*((void *)a2 + 2))
  {
    std::mutex::lock((std::mutex *)((char *)this + 8));
    uint64_t v5 = *((void *)this + 19);
    if (v5) {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v4);
    }
    std::mutex::unlock((std::mutex *)((char *)this + 8));
  }
  *((_DWORD *)a2 + 16) = -1431655765 * ((*((void *)this + 45) - *((void *)this + 44)) >> 4);
}

void sub_1A1E81E54(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::externalLineFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::externalPointFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::externalFeature(md::LabelFeature *this)
{
  return 0;
}

BOOL md::LabelFeature::isFeatureFromTileSource(md::LabelFeature *this)
{
  return (*(uint64_t (**)(md::LabelFeature *))(*(void *)this + 64))(this) == 0;
}

void md::LineLabelFeature::~LineLabelFeature(md::LineLabelFeature *this)
{
  *(void *)this = &unk_1EF536478;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 53);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *((void *)this + 48);
    if (!v3) {
      goto LABEL_14;
    }
LABEL_4:
    uint64_t v4 = *((void *)this + 49);
    uint64_t v5 = v3;
    if (v4 == v3)
    {
LABEL_13:
      *((void *)this + 49) = v3;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 51) + 40))(*((void *)this + 51), v5, *((void *)this + 50) - v5);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v4 - 9) < 0)
      {
        (*(void (**)(void, void, uint64_t))(**(void **)(v4 - 8) + 40))(*(void *)(v4 - 8), *(void *)(v4 - 32), *(void *)(v4 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v4 - 41) < 0) {
LABEL_11:
        }
          (*(void (**)(void, void, uint64_t))(**(void **)(v4 - 40) + 40))(*(void *)(v4 - 40), *(void *)(v4 - 64), *(void *)(v4 - 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v4 - 41) < 0)
      {
        goto LABEL_11;
      }
      v4 -= 64;
      if (v4 == v3)
      {
        uint64_t v5 = *((void *)this + 48);
        goto LABEL_13;
      }
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *((void *)this + 48);
  if (v3) {
    goto LABEL_4;
  }
LABEL_14:
  uint64_t v6 = *((void *)this + 44);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 45);
    uint64_t v8 = *((void *)this + 44);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          (*(void (**)(void, void, uint64_t))(**(void **)(v7 - 24) + 40))(*(void *)(v7 - 24), *(void *)(v7 - 48), *(void *)(v7 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        }
        v7 -= 48;
      }
      while (v7 != v6);
      uint64_t v8 = *((void *)this + 44);
    }
    *((void *)this + 45) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 47) + 40))(*((void *)this + 47), v8, *((void *)this + 46) - v8);
  }
  std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  unsigned int v9 = (md::SharedDeviceResources *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v9)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v9);
    MEMORY[0x1A6239270]();
  }
  uint64_t v10 = *((void *)this + 34);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 35);
    uint64_t v12 = *((void *)this + 34);
    if (v11 != v10)
    {
      do
        md::SharedDeviceResources::~SharedDeviceResources((md::SharedDeviceResources *)(v11 - 80));
      while (v11 != v10);
      uint64_t v12 = *((void *)this + 34);
    }
    *((void *)this + 35) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 37) + 40))(*((void *)this + 37), v12, *((void *)this + 36) - v12);
  }
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy((uint64_t)this + 224, *((void **)this + 29));
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  md::LabelFeature::~LabelFeature(this);
}

void *std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__construct_one_at_end[abi:nn180100]<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (v3)
  {
    *(void *)(v3 + 24) = *((void *)a2 + 3);
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v3, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v5 = *a2;
      *(void *)(v3 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v3 = v5;
    }
    __n128 result = (void *)(v3 + 32);
    *(void *)(v3 + 56) = *((void *)a2 + 7);
    if (*((char *)a2 + 55) < 0)
    {
      __n128 result = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)result, *((void **)a2 + 4), *((void *)a2 + 5));
    }
    else
    {
      long long v6 = a2[2];
      *(void *)(v3 + 48) = *((void *)a2 + 6);
      *(_OWORD *)__n128 result = v6;
    }
  }
  v2[1] = v3 + 64;
  return result;
}

void sub_1A1E82274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), *(void *)v2, *(void *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), *(void *)(i - 32), *(void *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(i - 40) + 40))(*(void *)(i - 40), *(void *)(i - 64), *(void *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF525BE0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void md::RingIconLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "RingIcon");
}

uint64_t md::CompositeLabelPart::publicName(md::CompositeLabelPart *this)
{
  uint64_t v1 = (void *)*((void *)this + 72);
  uint64_t v2 = (void *)*((void *)this + 73);
  if (v1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v1 + 832))(*v1);
    if (result) {
      break;
    }
    if (++v1 == v2) {
      return 0;
    }
  }
  return result;
}

uint64_t md::RingIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = (unsigned __int8 *)(a1 + 632);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

float md::CompositeLabelPart::calloutAnchorRect(md::CompositeLabelPart *this, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 72);
  uint64_t v3 = (uint64_t *)*((void *)this + 73);
  if (v2 == v3) {
    return 3.4028e38;
  }
  float v5 = 3.4028e38;
  float v6 = -3.4028e38;
  float v7 = -3.4028e38;
  float v8 = 3.4028e38;
  do
  {
    uint64_t v9 = *v2++;
    float v8 = fminf((*(float (**)(uint64_t, uint64_t))(*(void *)v9 + 664))(v9, a2), v8);
    float v7 = fmaxf(v7, v10);
    float v5 = fminf(v11, v5);
    float v6 = fmaxf(v6, v12);
  }
  while (v2 != v3);
  return v8;
}

uint64_t md::RingIconLabelPart::partType(md::RingIconLabelPart *this)
{
  return 8;
}

uint64_t md::RingIconLabelPart::pushToRenderModel(uint64_t a1, uint64_t a2, float a3)
{
  if (*(unsigned char *)(a1 + 608)) {
    a3 = *(float *)(a1 + 612);
  }
  (*(void (**)(void, uint64_t, float))(***(void ***)(a1 + 576) + 128))(**(void **)(a1 + 576), a2, a3);
  float v5 = *(uint64_t (**)(__n128))(**(void **)(*(void *)(a1 + 576) + 8) + 128);
  v6.n128_f32[0] = a3;
  return v5(v6);
}

void md::RingIconLabelPart::~RingIconLabelPart(md::RingIconLabelPart *this)
{
  *(void *)this = &unk_1EF537878;
  if (*((char *)this + 655) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 82) + 40))(*((void *)this + 82), *((void *)this + 79), *((void *)this + 81) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
  uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v4) {
      operator new();
    }
  }
  uint64_t v3 = *(void (**)(void))(**((void **)v2 + 91) + 40);
  v3();
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF537878;
  if (*((char *)this + 655) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 82) + 40))(*((void *)this + 82), *((void *)this + 79), *((void *)this + 81) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

double md::Ribbons::PolylineSegment::calculate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6 = (_OWORD *)(a1 + 264);
  if (a3)
  {
    long long v7 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)a1 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 16) = v7;
    long long v8 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 48) = v8;
    long long v9 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = *v6;
    *(void *)(a1 + 112) = *(void *)(a1 + 280);
    long long v10 = *(_OWORD *)(a1 + 288);
    long long v11 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 136) = v11;
    *(_OWORD *)(a1 + 120) = v10;
  }
  else
  {
    md::Ribbons::PolylinePoint::calculate(a1, *(void *)(a2 + 48), *(double **)(a2 + 56), 0);
  }
  md::Ribbons::PolylinePoint::calculate(a1 + 168, *(void *)(a2 + 48), *(double **)(a2 + 56), a3 + 1);
  *(double *)_Q1.i64 = *(double *)(a1 + 224) - *(double *)(a1 + 56);
  float64x2_t v13 = *(float64x2_t *)(a1 + 232);
  float64x2_t v14 = *(float64x2_t *)(a1 + 64);
  *(void *)&_Q5.f64[0] = *(_OWORD *)&vsubq_f64(v13, v14);
  float64x2_t v16 = vaddq_f64(v13, v14);
  _Q5.f64[1] = v16.f64[1];
  v16.f64[0] = *(double *)(a1 + 216) - *(double *)(a1 + 48);
  _Q3 = vaddq_f64(*(float64x2_t *)(a1 + 248), *(float64x2_t *)(a1 + 80));
  float64x2_t v18 = (float64x2_t)vzip1q_s64(_Q1, (int64x2_t)_Q3);
  v19.f64[0] = _Q5.f64[0];
  v19.f64[1] = _Q3.f64[1];
  float64x2_t v20 = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16, v16), v18, v18), v19, v19));
  __asm { FMOV            V4.2D, #1.0 }
  float64x2_t v26 = vdivq_f64(_Q4, v20);
  double v27 = (*(double *)(a1 + 216) - *(double *)(a1 + 48)) * v26.f64[0];
  *(double *)_Q1.i64 = *(double *)_Q1.i64 * v26.f64[0];
  *(double *)(a1 + 344) = v27;
  *(void *)(a1 + 352) = _Q1.i64[0];
  _Q4 = vmulq_f64(v26, _Q5);
  _Q2 = vmulq_laneq_f64(_Q3, v26, 1);
  v6[6] = _Q4;
  v6[7] = _Q2;
  __asm
  {
    FMLA            D5, D1, V2.D[1]
    FMLA            D3, D4, V4.D[1]
  }
  v19.f64[0] = vmlad_n_f64(-(_Q4.f64[1] * *(double *)_Q1.i64), v27, _Q2.f64[0]);
  _Q2.f64[0] = 1.0 / sqrt(_Q5.f64[0] * _Q5.f64[0] + _Q3.f64[0] * _Q3.f64[0] + v19.f64[0] * v19.f64[0]);
  _Q5.f64[0] = _Q2.f64[0] * _Q5.f64[0];
  _Q3.f64[0] = _Q2.f64[0] * _Q3.f64[0];
  *(float64_t *)(a1 + 392) = _Q5.f64[0];
  *(float64_t *)(a1 + 400) = _Q3.f64[0];
  _Q2.f64[0] = _Q2.f64[0] * v19.f64[0];
  *(float64_t *)(a1 + 408) = _Q2.f64[0];
  v19.f64[0] = *(float64_t *)(a1 + 96);
  double v30 = *(double *)(a1 + 104);
  double v31 = *(double *)(a1 + 112);
  double v32 = _Q5.f64[0] * v19.f64[0] + v30 * _Q3.f64[0] + v31 * _Q2.f64[0];
  double v33 = *(double *)(a1 + 264);
  double v34 = *(double *)(a1 + 272);
  _Q3.f64[0] = v33 * _Q5.f64[0] + v34 * _Q3.f64[0];
  _Q5.f64[0] = *(float64_t *)(a1 + 280);
  _Q2.f64[0] = _Q3.f64[0] + _Q5.f64[0] * _Q2.f64[0];
  _Q3.f64[0] = vmlad_n_f64(v19.f64[0] * v27 + v30 * *(double *)_Q1.i64, v31, _Q4.f64[0]);
  double result = vmlad_n_f64(v33 * v27 + v34 * *(double *)_Q1.i64, _Q5.f64[0], _Q4.f64[0]);
  *(double *)_Q1.i64 = 1.0 / fabs(v32);
  *(void *)(a1 + 120) = _Q1.i64[0];
  *(double *)(a1 + 128) = v32;
  _Q4.f64[0] = 1.0 / fabs(_Q2.f64[0]);
  *(float64_t *)(a1 + 288) = _Q4.f64[0];
  *(float64_t *)(a1 + 296) = _Q2.f64[0];
  *(float64_t *)(a1 + 136) = _Q3.f64[0];
  *(double *)(a1 + 144) = *(double *)_Q1.i64 * _Q3.f64[0];
  *(double *)(a1 + 304) = result;
  *(double *)(a1 + 312) = _Q4.f64[0] * result;
  return result;
}

double md::Ribbons::PolylinePoint::calculate(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  int v4 = &a3[3 * a4];
  double v5 = v4[1];
  double v6 = v4[2];
  double v7 = 1.0 / sqrt(*v4 * *v4 + v5 * v5 + v6 * v6);
  double v8 = v7 * *v4;
  double v9 = v7 * v5;
  double v10 = v7 * v6;
  *(double *)(a1 + 72) = v8;
  *(double *)(a1 + 80) = v9;
  *(double *)(a1 + 88) = v10;
  if (a4)
  {
    if (a2 - 1 != a4)
    {
      double v32 = &a3[3 * a4];
      double v33 = v4[1];
      double v34 = *v4 - *(v32 - 3);
      double v35 = v33 - *(v32 - 2);
      double v36 = v4[2];
      double v37 = v36 - *(v32 - 1);
      double v38 = sqrt(v34 * v34 + v35 * v35 + v37 * v37);
      double v29 = v34 * (1.0 / v38);
      double v30 = v35 * (1.0 / v38);
      double v31 = v37 * (1.0 / v38);
      double v39 = v32[3] - *v4;
      double v40 = v32[4] - v33;
      double v41 = v32[5] - v36;
      double v42 = 1.0 / sqrt(v39 * v39 + v40 * v40 + v41 * v41);
      double v19 = v42 * v39;
      double v20 = v42 * v40;
      double v28 = v42 * v41;
      *(void *)(a1 + 160) = a4;
      *(double *)(a1 + 152) = *(double *)(a1 + 152) + v38;
      *(double *)(a1 + 48) = *v4;
      *(double *)(a1 + 56) = v4[1];
      *(double *)(a1 + 64) = v4[2];
      *(double *)(a1 + 24) = -v29;
      *(double *)(a1 + 32) = -v30;
      *(double *)(a1 + 40) = -v31;
      double v16 = -(v42 * v39);
      double v17 = -(v42 * v40);
      double v18 = -(v42 * v41);
      goto LABEL_7;
    }
    long long v11 = &a3[3 * a4];
    double v12 = *v4 - *(v11 - 3);
    double v13 = v4[1] - *(v11 - 2);
    double v14 = v4[2] - *(v11 - 1);
    double v15 = sqrt(v12 * v12 + v13 * v13 + v14 * v14);
    double v16 = v12 * (1.0 / v15);
    double v17 = v13 * (1.0 / v15);
    double v18 = v14 * (1.0 / v15);
    *(double *)(a1 + 152) = v15 + *(double *)(a1 + 152);
    *(double *)(a1 + 48) = *v4;
    *(double *)(a1 + 56) = v4[1];
    *(double *)(a1 + 64) = v4[2];
    double v19 = v16;
    double v20 = v17;
    *(double *)(a1 + 24) = -v16;
    *(double *)(a1 + 32) = -v17;
    *(double *)(a1 + 40) = -v18;
  }
  else
  {
    double v21 = a3[3] - *v4;
    double v22 = a3[4] - v4[1];
    double v23 = a3[5] - v4[2];
    double v24 = 1.0 / sqrt(v21 * v21 + v22 * v22 + v23 * v23);
    double v16 = v24 * v21;
    double v17 = v24 * v22;
    double v18 = v24 * v23;
    *(double *)(a1 + 48) = *v4;
    *(double *)(a1 + 56) = v4[1];
    *(double *)(a1 + 64) = v4[2];
    double v25 = -(v24 * v21);
    double v26 = -(v24 * v22);
    double v27 = -(v24 * v23);
    double v19 = v16;
    double v20 = v17;
    *(double *)(a1 + 24) = v25;
    *(double *)(a1 + 32) = v26;
    *(double *)(a1 + 40) = v27;
  }
  double v28 = v18;
  double v29 = v16;
  double v30 = v17;
  double v31 = v18;
LABEL_7:
  *(double *)a1 = v16;
  *(double *)(a1 + 8) = v17;
  *(double *)(a1 + 16) = v18;
  double v43 = -(v31 * v9 - v30 * v10);
  double v44 = -(v29 * v10 - v31 * v8);
  double v45 = -(v30 * v8 - v29 * v9);
  double v46 = -(v28 * v9 - v20 * v10);
  double v47 = -(v19 * v10 - v28 * v8);
  double v48 = -(v20 * v8 - v19 * v9);
  double v49 = v43 + v46;
  double v50 = v44 + v47;
  double v51 = v45 + v48;
  double v52 = 1.0 / sqrt(v51 * v51 + v49 * v49 + v50 * v50);
  double result = v52 * v51;
  *(double *)(a1 + 96) = v52 * v49;
  *(double *)(a1 + 104) = v52 * v50;
  *(double *)(a1 + 112) = result;
  return result;
}

uint64_t md::AnimatedTextureLabelPart::publicName(md::AnimatedTextureLabelPart *this)
{
  return 0;
}

void md::AnimatedTextureLabelPart::debugString(unsigned char *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

BOOL md::AnimatedTextureLabelPart::isAnimating(md::AnimatedTextureLabelPart *this)
{
  return *((unsigned char *)this + 768) == 0;
}

void md::AnimatedTextureLabelPart::animate(md::AnimatedTextureLabelPart *this, __n128 a2)
{
  if (!*((unsigned char *)this + 768))
  {
    if (*((unsigned char *)this + 770))
    {
      if (a2.n128_f32[0] < 100.0 && *(unsigned char *)(*(void *)(*((void *)this + 86) + 1192) + 52) != 2) {
        return;
      }
      *((unsigned char *)this + 770) = 0;
    }
    *((float *)this + 175) = *((float *)this + 175) + a2.n128_f32[0];
    uint64_t v3 = (md::LabelAnimationTrack **)*((void *)this + 92);
    int v4 = (md::LabelAnimationTrack **)*((void *)this + 93);
    if (v3 == v4) {
      goto LABEL_10;
    }
    char v5 = 0;
    do
    {
      a2.n128_u32[0] = *((_DWORD *)this + 175);
      md::LabelAnimationTrack::runAnimation(*v3, a2);
      double v6 = *v3++;
      v5 |= *((unsigned char *)v6 + 40) == 0;
    }
    while (v3 != v4);
    if ((v5 & 1) == 0) {
LABEL_10:
    }
      *((unsigned char *)this + 768) = 1;
  }
}

uint64_t md::AnimatedTextureLabelPart::checkResourcesReady(md::AnimatedTextureLabelPart *this, LabelManager *a2)
{
  if (*((void *)this + 72)) {
    return 37;
  }
  else {
    return 16;
  }
}

uint64_t md::AnimatedTextureLabelPart::modelMatrix(md::AnimatedTextureLabelPart *this)
{
  return *((void *)this + 82);
}

uint64_t md::AnimatedTextureLabelPart::stagingModelMatrix(md::AnimatedTextureLabelPart *this)
{
  return *((void *)this + 83);
}

uint64_t md::AnimatedTextureLabelPart::pushToRenderModel(uint64_t this, gdc::Registry **a2, float a3)
{
  if (*(unsigned char *)(this + 676)) {
    a3 = *(float *)(this + 672);
  }
  float v3 = *(float *)(this + 784) * a3;
  if (v3 >= 0.0039062)
  {
    *(_WORD *)(this + 590) = *(_WORD *)(this + 558);
    uint64_t v4 = *(void *)(this + 32);
    if (*(unsigned char *)(v4 + 78)) {
      int v5 = *(_DWORD *)(v4 + 72);
    }
    else {
      int v5 = 0;
    }
    *(_DWORD *)(this + 608) = v5;
    *(unsigned char *)(this + 586) = *(unsigned char *)(this + 556);
    *(unsigned char *)(this + 585) = 0;
    *(unsigned char *)(this + 592) = *(unsigned char *)(v4 + 77) ^ 1;
    gdc::Registry::create(*a2);
  }
  *(float *)(this + 552) = fmaxf(fminf(v3, 1.0), 0.0);
  return this;
}

void sub_1A1E83050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::IconMeshDescriptor::~IconMeshDescriptor(md::IconMeshDescriptor *this)
{
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

uint64_t std::__split_buffer<md::IconMeshDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 40;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::remove(void *a1, unint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  double v14 = (_DWORD *)(a1[10] + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *double v14 = *(_DWORD *)(v15 - 40);
  double v16 = v14 + 2;
  uint64_t v17 = *(void *)(v15 - 8);
  if (v17)
  {
    uint64_t v18 = v15 - 32;
    if (v17 == v18)
    {
      double v27 = v26;
      (*(void (**)(uint64_t, void *))(*(void *)v18 + 24))(v18, v26);
    }
    else
    {
      double v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
    }
  }
  else
  {
    double v27 = 0;
  }
  std::__function::__value_func<void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::swap[abi:nn180100](v26, v16);
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  uint64_t v19 = a1[11];
  uint64_t v20 = *(void *)(v19 - 8);
  if (v20 == v19 - 32)
  {
    (*(void (**)(uint64_t))(*(void *)(v19 - 32) + 32))(v19 - 32);
  }
  else if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 40))(v20);
  }
  a1[11] = v19 - 40;
  double v21 = (void *)a1[28];
  if (v21)
  {
    uint64_t v22 = a1[31];
    do
    {
      v26[0] = &v24;
      v26[1] = 1;
      uint64_t v25 = v22;
      uint64_t v23 = v21[6];
      if (!v23) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v23 + 48))(v23, &v25, v26);
      double v21 = (void *)*v21;
    }
    while (v21);
  }
  return 1;
}

uint64_t gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

double std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a3 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 144))(v4);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v4 + 552);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a3 + 52) = _D0;
  if (*(unsigned char *)(v4 + 640))
  {
    int v10 = *(_DWORD *)(v4 + 636);
    int v11 = *(_DWORD *)(v4 + 624);
    *(void *)&long long v12 = *(void *)(v4 + 628);
  }
  else
  {
    *(void *)&long long v12 = 0xFF7FFFFF7F7FFFFFLL;
    int v10 = -8388609;
    int v11 = 2139095039;
  }
  *((void *)&v12 + 1) = v12;
  *(_DWORD *)a3 = v11;
  *(_OWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a3 + 20) = v10;
  *(_DWORD *)(a3 + 24) = v11;
  *(_DWORD *)(a3 + 28) = v10;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = xmmword_1A28FCDA0;
  return result;
}

uint64_t std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576950;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576950;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::~ComponentStorageWrapper();
}

uint64_t md::AnimatedTextureLabelPart::layoutForDisplay(float32x2_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5)
{
  float v8 = *(float *)(a2 + 904);
  a1[67].f32[0] = v8;
  float v9 = *(float *)(a2 + 908);
  a1[67].f32[1] = v9;
  float v10 = a1[66].f32[0];
  float v11 = v10 * v9;
  float v12 = a1[66].f32[1];
  float v13 = -(float)((float)(v12 * v9) - (float)(v10 * v8));
  float v14 = v11 + (float)(v12 * v8);
  a1[41].f32[0] = v13;
  a1[41].f32[1] = v14;
  double v15 = fabsf(v13 + -1.0);
  a1[63].i8[4] = v15 > 0.000001;
  float v16 = a5->f32[0];
  a1[68].i32[0] = a5->i32[0];
  float v17 = a5->f32[1];
  a1[68].f32[1] = v17;
  float32x2_t v18 = a1[89];
  float32x2_t v19 = a1[88];
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)&v18 - *(void *)&v19) >> 4) <= a1[70].u8[3])
  {
    if (*(void *)&v19 == *(void *)&v18 || !a1[96].i8[1]) {
      goto LABEL_15;
    }
  }
  else
  {
    *(void *)&v19 += 144 * a1[70].u8[3];
  }
  if (v19)
  {
    uint64_t v20 = *(void *)(*(void *)&v19 + 72);
    if (v20)
    {
      a1[84].f32[0] = fmaxf(fminf(*(float *)(*(void *)&v19 + 80)+ (float)(*(float *)(*(void *)v20 + 32 * *(unsigned int *)(v20 + 32) + 8)* (float)(*(float *)(*(void *)&v19 + 84) - *(float *)(*(void *)&v19 + 80))), 1.0), 0.0);
      a1[84].i8[4] = 1;
    }
    uint64_t v21 = *(void *)(*(void *)&v19 + 88);
    if (v21)
    {
      float v22 = (float)(*(float *)(*(void *)v21 + 32 * *(unsigned int *)(v21 + 32) + 8) + -0.5) * a1[80].f32[1];
      float v23 = v14 * v22;
      BOOL v24 = v15 <= 0.000001;
      if (v15 <= 0.000001) {
        float v13 = 1.0;
      }
      double v15 = 0.0;
      if (v24) {
        float v23 = 0.0;
      }
      a1[68].f32[0] = v16 + (float)(v22 * v13);
      a1[68].f32[1] = v17 + v23;
    }
  }
LABEL_15:
  uint64_t v25 = (_OWORD *)a1[82];
  double v26 = (double *)a1[6];
  memset(&v42[40], 0, 40);
  memset(&v43[8], 0, 32);
  memset(&v42[8], 0, 32);
  *(void *)double v42 = 0x3FF0000000000000;
  *(void *)&v42[40] = 0x3FF0000000000000;
  *(void *)double v43 = 0x3FF0000000000000;
  *(void *)&v43[40] = 0x3FF0000000000000;
  *(void *)&long long v34 = 0;
  if (a1[68])
  {
    memset(&v42[8], 0, 32);
    *(void *)double v42 = 0x3FF0000000000000;
    *(void *)&v42[40] = 0x3FF0000000000000;
    memset(&v42[48], 0, 32);
    float64x2_t v27 = vcvtq_f64_f32(a1[68]);
    *(_OWORD *)double v43 = xmmword_1A28FCBD0;
    *(float64x2_t *)&v43[16] = v27;
    *(_OWORD *)&v43[32] = xmmword_1A28FCCC0;
  }
  if (v26)
  {
    gm::operator*<double,4,4,4>((double *)&v34, v26, (double *)v42);
  }
  else
  {
    long long v38 = *(_OWORD *)&v42[64];
    long long v39 = *(_OWORD *)v43;
    long long v40 = *(_OWORD *)&v43[16];
    long long v41 = *(_OWORD *)&v43[32];
    long long v34 = *(_OWORD *)v42;
    long long v35 = *(_OWORD *)&v42[16];
    long long v36 = *(_OWORD *)&v42[32];
    long long v37 = *(_OWORD *)&v42[48];
  }
  long long v28 = v35;
  _OWORD *v25 = v34;
  v25[1] = v28;
  long long v29 = v37;
  v25[2] = v36;
  v25[3] = v29;
  long long v30 = v39;
  v25[4] = v38;
  v25[5] = v30;
  long long v31 = v41;
  v25[6] = v40;
  v25[7] = v31;
  a1[53] = (float32x2_t)v25;
  *(float32x2_t *)&long long v31 = *a5;
  double v32 = COERCE_DOUBLE(vadd_f32(*a5, *a4));
  *(double *)&a1[65] = v32;
  *(double *)&a1[43] = v32;
  md::CollisionObject::setupShapeData((uint64_t)&a1[39], v32, *(double *)&v31, v15);
  a1[51].i32[0] = a1[97].i32[1];
  return 37;
}

void md::AnimatedTextureLabelPart::updateForDisplay(int8x16_t *this)
{
  this[40].i32[1] = this[40].i32[2];
  uint64_t v2 = &this[19].i8[8];
  md::CollisionObject::resetWithRects((void **)&this[19].i64[1], 1u);
  if (this[40].i8[0])
  {
    uint64_t v3 = this[30].u32[2];
    uint64_t v4 = (_DWORD *)(this[29].i64[1] + 16 * v3);
    _DWORD *v4 = this[39].i32[0];
    v4[1] = this[39].i32[1];
    unsigned char v4[2] = this[39].i32[2];
    v4[3] = this[39].i32[3];
    int8x16_t v5 = *(int8x16_t *)v2;
    int8x16_t v6 = this[39];
    v7.i64[0] = this[39].i64[0];
    v7.i64[1] = *((void *)v2 + 1);
    v8.i64[0] = *(void *)v2;
    v8.i64[1] = this[39].i64[1];
    this[30].i32[2] = v3 + 1;
    *(int8x16_t *)uint64_t v2 = vbslq_s8((int8x16_t)vcgtq_f32(v8, v7), v6, v5);
    this[48].i32[3] = this[48].i32[2];
  }
  else
  {
    uint64_t v9 = std::__throw_bad_optional_access[abi:nn180100]();
    md::AnimatedTextureLabelPart::layoutForStaging(v9);
  }
}

uint64_t md::AnimatedTextureLabelPart::layoutForStaging(float32x2_t *a1, uint64_t a2, __int32 *a3, __int32 *a4)
{
  uint64_t result = (*(uint64_t (**)(float32x2_t *))(*(void *)a1 + 344))(a1);
  if (result == 37)
  {
    if (a1[80].i8[0])
    {
      float v10 = *(float *)(*(void *)&a1[4] + 20);
      a1[22].f32[0] = v10;
      a1[14].i32[0] = *a3;
      a1[14].i32[1] = a3[1];
      a1[33].i8[6] = fabsf(v10 + -1.0) > 0.000001;
      uint64_t v11 = *(void *)(a2 + 432);
      float v12 = *(float *)(v11 + 464);
      a1[37].f32[0] = v12;
      LODWORD(v9) = *(_DWORD *)(v11 + 468);
      a1[37].i32[1] = LODWORD(v9);
      float v13 = a1[36].f32[0];
      float v14 = v13 * *(float *)&v9;
      float v15 = a1[36].f32[1];
      *(float *)&double v9 = -(float)((float)(v15 * *(float *)&v9) - (float)(v13 * v12));
      a1[11].i32[0] = LODWORD(v9);
      a1[11].f32[1] = v14 + (float)(v15 * v12);
      double v16 = fabsf(*(float *)&v9 + -1.0);
      a1[33].i8[4] = v16 > 0.000001;
      a1[38].i32[0] = *a4;
      a1[38].i32[1] = a4[1];
      a1[35].i32[0] = *a3;
      a1[35].i32[1] = a3[1];
      a1[13].i32[0] = *a3;
      LODWORD(v16) = a3[1];
      a1[13].i32[1] = LODWORD(v16);
      md::CollisionObject::setupShapeData((uint64_t)&a1[9], v16, 0.000001, v9);
      a1[21].i32[0] = a1[97].i32[0];
      if (a1[70].i8[6])
      {
        float v17 = (_OWORD *)a1[83];
        if (!v17) {
          operator new();
        }
        float32x2_t v18 = (double *)a1[5];
        memset(&v32[40], 0, 40);
        memset(&v33[8], 0, 32);
        memset(&v32[8], 0, 32);
        *(void *)double v32 = 0x3FF0000000000000;
        *(void *)&v32[40] = 0x3FF0000000000000;
        *(void *)double v33 = 0x3FF0000000000000;
        *(void *)&v33[40] = 0x3FF0000000000000;
        *(void *)&long long v24 = 0;
        if (a1[38])
        {
          memset(&v32[8], 0, 32);
          *(void *)double v32 = 0x3FF0000000000000;
          *(void *)&v32[40] = 0x3FF0000000000000;
          memset(&v32[48], 0, 32);
          float64x2_t v19 = vcvtq_f64_f32(a1[38]);
          *(_OWORD *)double v33 = xmmword_1A28FCBD0;
          *(float64x2_t *)&v33[16] = v19;
          *(_OWORD *)&unsigned char v33[32] = xmmword_1A28FCCC0;
        }
        if (v18)
        {
          gm::operator*<double,4,4,4>((double *)&v24, v18, (double *)v32);
        }
        else
        {
          long long v28 = *(_OWORD *)&v32[64];
          long long v29 = *(_OWORD *)v33;
          long long v30 = *(_OWORD *)&v33[16];
          long long v31 = *(_OWORD *)&v33[32];
          long long v24 = *(_OWORD *)v32;
          long long v25 = *(_OWORD *)&v32[16];
          long long v26 = *(_OWORD *)&v32[32];
          long long v27 = *(_OWORD *)&v32[48];
        }
        long long v20 = v25;
        *float v17 = v24;
        v17[1] = v20;
        long long v21 = v27;
        v17[2] = v26;
        v17[3] = v21;
        long long v22 = v29;
        v17[4] = v28;
        v17[5] = v22;
        long long v23 = v31;
        v17[6] = v30;
        v17[7] = v23;
        a1[23] = (float32x2_t)v17;
      }
      return 37;
    }
    else
    {
      return 13;
    }
  }
  return result;
}

float md::AnimatedTextureLabelPart::updateWithStyle(md::AnimatedTextureLabelPart *this, LabelManager *a2)
{
  float result = *(float *)(**((void **)this + 4) + 172);
  *((float *)this + 194) = result;
  return result;
}

void md::AnimatedTextureLabelPart::~AnimatedTextureLabelPart(md::AnimatedTextureLabelPart *this)
{
  md::AnimatedTextureLabelPart::~AnimatedTextureLabelPart(this);
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF5449E0;
  md::LabelAnimator::~LabelAnimator((md::AnimatedTextureLabelPart *)((char *)this + 680));
  uint64_t v2 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  int v3 = *((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40AE2C30F4);
  }
  *(void *)this = &unk_1EF5540C8;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

void md::AnimatedTextureLabelPart::AnimatedTextureLabelPart(uint64_t a1, md::LabelManager *a2, md::Label *a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1A28FC750;
  *(void *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(a1 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(a1 + 312) = xmmword_1A28FC750;
  *(void *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(void *)a1 = &unk_1EF5449E0;
  *(void *)(a1 + 576) = a4;
  *(_DWORD *)(a1 + 584) = 1;
  *(unsigned char *)(a1 + 588) = 10;
  *(_DWORD *)(a1 + 590) = 16842752;
  *(unsigned char *)(a1 + 594) = 0;
  *(void *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_WORD *)(a1 + 612) = 258;
  *(unsigned char *)(a1 + 640) = 0;
  *(void *)(a1 + 644) = 0;
  *(unsigned char *)(a1 + 676) = 0;
  *(_DWORD *)(a1 + 621) = 0;
  *(void *)(a1 + 614) = 0;
  *(unsigned char *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  md::LabelAnimator::LabelAnimator(a1 + 680, a2, a3);
  *(_DWORD *)(a1 + 784) = 1065353216;
  *(void *)(a1 + 776) = 0;
  *(unsigned char *)(a1 + 588) = 7;
  *(_WORD *)(a1 + 616) = 1;
  *(unsigned char *)(a1 + 584) = 2;
  *(unsigned char *)(a1 + 593) = 0;
  *(void *)(a1 + 600) = *(void *)(a1 + 576);
  operator new();
}

void sub_1A1E84110(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  md::LabelAnimator::~LabelAnimator(v4);
  uint64_t v6 = *(void *)(v1 + 664);
  *(void *)(v1 + 664) = 0;
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x1000C40AE2C30F4);
  }
  uint64_t v7 = *v3;
  *int v3 = 0;
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C40AE2C30F4);
  }
  *(void *)uint64_t v1 = &unk_1EF5540C8;
  free(*(void **)(v1 + 472));
  free(*(void **)(v1 + 480));
  free(*(void **)(v1 + 496));
  free(*(void **)(v1 + 232));
  free(*(void **)(v1 + 240));
  free(*(void **)(v1 + 256));
  _Unwind_Resume(a1);
}

void md::AnimatedTextureLabelPart::setMeshRectForStaging(uint64_t a1, uint64_t a2)
{
  int v3 = (_OWORD *)(a1 + 624);
  if (!*(unsigned char *)(a1 + 640))
  {
    *int v3 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 640) = 1;
LABEL_6:
    md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
    if (*(unsigned char *)(a1 + 640))
    {
      uint64_t v4 = *(void *)(a1 + 232);
      uint64_t v5 = *(unsigned int *)(a1 + 248);
      *(_DWORD *)(a1 + 248) = v5 + 1;
      uint64_t v6 = (_DWORD *)(v4 + 16 * v5);
      *uint64_t v6 = *(_DWORD *)(a1 + 624);
      v6[1] = *(_DWORD *)(a1 + 628);
      v6[2] = *(_DWORD *)(a1 + 632);
      v6[3] = *(_DWORD *)(a1 + 636);
      v7.i64[0] = *(void *)(a1 + 624);
      v7.i64[1] = *(void *)(a1 + 80);
      v8.i64[0] = *(void *)(a1 + 72);
      v8.i64[1] = *(void *)(a1 + 632);
      *(int8x16_t *)(a1 + 72) = vbslq_s8((int8x16_t)vcgtq_f32(v8, v7), *(int8x16_t *)(a1 + 624), *(int8x16_t *)(a1 + 72));
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:nn180100]();
      std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(v9);
    }
    return;
  }
  if (*(void *)v3 != *(void *)a2 || *(void *)(a1 + 632) != *(void *)(a2 + 8))
  {
    *(_DWORD *)(a1 + 624) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 628) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 636) = *(_DWORD *)(a2 + 12);
    goto LABEL_6;
  }
}

uint64_t *std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = result + 1;
    while (1)
    {
      float32x4_t v7 = (uint64_t *)v5[1];
      float32x4_t v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        uint64_t v9 = (uint64_t *)v5[1];
        float v10 = v6;
        if (v7)
        {
          do
          {
            float32x4_t v8 = v9;
            uint64_t v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            float32x4_t v8 = (uint64_t *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            float v10 = v8;
          }
          while (v11);
        }
        unint64_t v12 = v4[4];
        if (v8[4] >= v12) {
          break;
        }
      }
      float v13 = (uint64_t **)v6;
      float v14 = (uint64_t **)v6;
      if (!v7) {
        goto LABEL_19;
      }
      float v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        float v14 = (uint64_t **)v8;
LABEL_19:
        double v16 = (uint64_t *)operator new(0x30uLL);
        float v17 = v16;
        uint64_t v18 = v4[5];
        v16[4] = v4[4];
        v16[5] = v18;
        if (v18) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
        }
        *double v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *float v13 = v16;
        uint64_t v19 = *(void *)*v5;
        if (v19)
        {
          *uint64_t v5 = v19;
          float v17 = *v13;
        }
        float result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v17);
        ++v5[2];
      }
LABEL_24:
      long long v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          long long v21 = v20;
          long long v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          long long v21 = (void *)v4[2];
          BOOL v11 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v11);
      }
      uint64_t v4 = v21;
      if (v21 == a3) {
        return result;
      }
    }
    float v13 = (uint64_t **)v6;
    float v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          float v14 = (uint64_t **)v7;
          unint64_t v15 = v7[4];
          if (v12 >= v15) {
            break;
          }
          float32x4_t v7 = *v14;
          float v13 = v14;
          if (!*v14) {
            goto LABEL_19;
          }
        }
        if (v15 >= v12) {
          goto LABEL_24;
        }
        float v13 = v14 + 1;
        float32x4_t v7 = v14[1];
        if (!v7) {
          goto LABEL_19;
        }
      }
    }
    goto LABEL_19;
  }
  return result;
}

int8x8_t *md::mun::MuninNavigationGraph::MuninNavigationGraph(uint64_t *a1, void **a2)
{
  int v3 = a2;
  uint64_t v4 = (int8x8_t *)a1;
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v5 = a2 + 1;
  std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(a1, *a2, a2 + 1);
  *(_OWORD *)v4[3].i8 = 0u;
  *(_OWORD *)v4[5].i8 = 0u;
  unint64_t v86 = v4 + 3;
  v4[7].i32[0] = 1065353216;
  uint64_t v6 = (void *)*v3;
  if ((void *)*v3 == v5)
  {
    float v12 = 0.0;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      float32x4_t v8 = (void *)v6[1];
      uint64_t v9 = v6;
      if (v8)
      {
        do
        {
          float v10 = v8;
          float32x4_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          float v10 = (void *)v9[2];
          BOOL v11 = *v10 == (void)v9;
          uint64_t v9 = v10;
        }
        while (!v11);
      }
      v7 += 0x63FB9AEB1FDCD759 * ((uint64_t)(*(void *)(v6[4] + 176) - *(void *)(v6[4] + 168)) >> 3);
      uint64_t v6 = v10;
    }
    while (v10 != v5);
    float v12 = (float)v7;
  }
  size_t prime = vcvtps_u32_f32(v12);
  uint64_t v84 = v4;
  if (prime == 1)
  {
    unint64_t v85 = (unint64_t *)&v4[4];
    size_t prime = 2;
LABEL_30:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v86, prime);
    goto LABEL_31;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    float v14 = v4;
    int8x8_t v15 = v4[4];
  }
  else
  {
    float v14 = v4;
    int8x8_t v15 = 0;
  }
  unint64_t v85 = (unint64_t *)&v14[4];
  if (prime > *(void *)&v15)
  {
    uint64_t v4 = v84;
    goto LABEL_30;
  }
  if (prime < *(void *)&v15)
  {
    unint64_t v16 = vcvtps_u32_f32((float)(unint64_t)v84[6] / *(float *)v84[7].i32);
    if (*(void *)&v15 < 3uLL || (uint8x8_t v17 = (uint8x8_t)vcnt_s8(v15), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      unint64_t v16 = std::__next_prime(v16);
    }
    else
    {
      uint64_t v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2) {
        unint64_t v16 = v18;
      }
    }
    if (prime <= v16) {
      size_t prime = v16;
    }
    BOOL v19 = prime >= *(void *)&v15;
    uint64_t v4 = v84;
    if (v19) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v4 = v84;
LABEL_31:
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  long long v20 = (void *)*v3;
  if ((void *)*v3 == v5) {
    return v4;
  }
  long long v21 = 0;
  uint64_t v80 = v4 + 5;
  unint64_t v78 = v3;
  do
  {
    uint64_t v77 = v20;
    uint64_t v22 = v20[4];
    unint64_t v23 = *(void *)(v22 + 168);
    uint64_t v24 = *(void *)(v22 + 176);
    if (v23 != v24)
    {
      if ((void *)*v3 != v5)
      {
        uint64_t v79 = *(void *)(v22 + 176);
        while (1)
        {
          uint64_t v90 = v21;
          long long v87 = *(_OWORD *)(v23 + 8);
          uint64_t v88 = *(void *)(v23 + 24);
          long long v25 = (void *)*v3;
          if ((void *)*v3 != v5)
          {
            do
            {
              md::mun::MuninMetadata::neighborsWithinRadius(v25[4], (double *)&v87, (uint64_t)&v89, 0, 25.0);
              long long v26 = (void *)v25[1];
              if (v26)
              {
                do
                {
                  long long v27 = v26;
                  long long v26 = (void *)*v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  long long v27 = (void *)v25[2];
                  BOOL v11 = *v27 == (void)v25;
                  long long v25 = v27;
                }
                while (!v11);
              }
              long long v25 = v27;
            }
            while (v27 != v5);
            long long v21 = v89;
            long long v28 = v90;
            if (v89 != v90) {
              break;
            }
          }
LABEL_38:
          v23 += 1864;
          if (v23 == v24) {
            goto LABEL_135;
          }
        }
        unint64_t v29 = 0x9DDFEA08EB382D69 * (((8 * v23) + 8) ^ HIDWORD(v23));
        unint64_t v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v23) ^ (v29 >> 47) ^ v29);
        unint64_t v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
        uint64_t v81 = v89;
        double v32 = v89;
        while (1)
        {
          uint64_t v34 = *v32;
          if (*v32 == v23
            || *(void *)v34 == *(void *)v23
            || vabdd_f64(*(double *)(v34 + 72), *(double *)(v23 + 72)) > 4.0)
          {
            goto LABEL_52;
          }
          unint64_t v35 = *v85;
          if (*v85)
          {
            uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              unint64_t v2 = v31;
              if (v31 >= v35) {
                unint64_t v2 = v31 % v35;
              }
            }
            else
            {
              unint64_t v2 = v31 & (v35 - 1);
            }
            long long v37 = *(void ***)(*(void *)v86 + 8 * v2);
            if (v37)
            {
              long long v38 = (char *)*v37;
              if (*v37)
              {
                if (v36.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v40 = *((void *)v38 + 1);
                    if (v40 == v31)
                    {
                      if (*((void *)v38 + 2) == v23) {
                        goto LABEL_114;
                      }
                    }
                    else if ((v40 & (v35 - 1)) != v2)
                    {
                      goto LABEL_76;
                    }
                    long long v38 = *(char **)v38;
                    if (!v38) {
                      goto LABEL_76;
                    }
                  }
                }
                do
                {
                  unint64_t v39 = *((void *)v38 + 1);
                  if (v39 == v31)
                  {
                    if (*((void *)v38 + 2) == v23) {
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    if (v39 >= v35) {
                      v39 %= v35;
                    }
                    if (v39 != v2) {
                      break;
                    }
                  }
                  long long v38 = *(char **)v38;
                }
                while (v38);
              }
            }
          }
LABEL_76:
          long long v38 = (char *)operator new(0x68uLL);
          *(void *)long long v38 = 0;
          *((void *)v38 + 1) = v31;
          *((void *)v38 + 2) = v23;
          *((void *)v38 + 3) = v38 + 56;
          *((void *)v38 + 4) = v38 + 56;
          *((void *)v38 + 5) = v38 + 56;
          *((void *)v38 + 6) = 6;
          float v41 = (float)(unint64_t)(*(void *)&v84[6] + 1);
          float v42 = *(float *)v84[7].i32;
          if (!v35 || (float)(v42 * (float)v35) < v41)
          {
            BOOL v43 = (v35 & (v35 - 1)) != 0;
            if (v35 < 3) {
              BOOL v43 = 1;
            }
            unint64_t v44 = v43 | (2 * v35);
            unint64_t v45 = vcvtps_u32_f32(v41 / v42);
            if (v44 <= v45) {
              size_t v46 = v45;
            }
            else {
              size_t v46 = v44;
            }
            if (v46 == 1)
            {
              size_t v46 = 2;
            }
            else if ((v46 & (v46 - 1)) != 0)
            {
              size_t v46 = std::__next_prime(v46);
              unint64_t v35 = *v85;
            }
            if (v46 > v35) {
              goto LABEL_98;
            }
            if (v46 < v35)
            {
              unint64_t v47 = vcvtps_u32_f32((float)(unint64_t)v84[6] / *(float *)v84[7].i32);
              if (v35 < 3 || (uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
              {
                unint64_t v47 = std::__next_prime(v47);
              }
              else
              {
                uint64_t v49 = 1 << -(char)__clz(v47 - 1);
                if (v47 >= 2) {
                  unint64_t v47 = v49;
                }
              }
              if (v46 <= v47) {
                size_t v46 = v47;
              }
              if (v46 < v35) {
LABEL_98:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v86, v46);
            }
            unint64_t v35 = *v85;
            uint64_t v50 = *v85 - 1;
            if ((*v85 & v50) != 0)
            {
              if (v31 >= v35) {
                unint64_t v2 = v31 % v35;
              }
              else {
                unint64_t v2 = v31;
              }
            }
            else
            {
              unint64_t v2 = v50 & v31;
            }
          }
          int8x8_t v51 = *v86;
          double v52 = *(void **)(*(void *)v86 + 8 * v2);
          if (v52) {
            break;
          }
          *(int8x8_t *)long long v38 = *v80;
          *uint64_t v80 = (int8x8_t)v38;
          *(void *)(*(void *)&v51 + 8 * v2) = v80;
          if (*(void *)v38)
          {
            unint64_t v53 = *(void *)(*(void *)v38 + 8);
            if ((v35 & (v35 - 1)) != 0)
            {
              if (v53 >= v35) {
                v53 %= v35;
              }
            }
            else
            {
              v53 &= v35 - 1;
            }
            double v52 = (void *)(*(void *)v86 + 8 * v53);
            goto LABEL_112;
          }
LABEL_113:
          ++*(void *)&v84[6];
LABEL_114:
          uint64_t v54 = *((void *)v38 + 3);
          double v33 = (void *)*((void *)v38 + 4);
          uint64_t v55 = ((uint64_t)v33 - v54) >> 3;
          unint64_t v56 = *((void *)v38 + 6);
          if (v56 >= v55 + 1) {
            goto LABEL_51;
          }
          uint64_t v82 = *((void *)v38 + 5);
          unint64_t v57 = (1 << -(char)__clz(v56 + 1));
          if (v56 >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v57 = 1;
          }
          if (v57 <= v55 + 1) {
            unint64_t v57 = v55 + 1;
          }
          unint64_t v83 = v57;
          long long v58 = (char *)malloc_type_malloc(8 * v57, 0x6004044C4A2DFuLL);
          unint64_t v2 = (unint64_t)v58;
          unint64_t v59 = (uint64_t *)*((void *)v38 + 3);
          long long v60 = (char *)*((void *)v38 + 4);
          if (v59 != (uint64_t *)v60)
          {
            unint64_t v61 = v60 - (char *)v59 - 8;
            if (v61 < 0x18)
            {
              unint64_t v62 = v58;
            }
            else
            {
              unint64_t v62 = v58;
              if ((unint64_t)(v58 - (char *)v59) >= 0x20)
              {
                uint64_t v63 = (v61 >> 3) + 1;
                uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v62 = &v58[v64];
                unint64_t v65 = (long long *)(v59 + 2);
                long long v66 = v58 + 16;
                uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v68 = *v65;
                  *(v66 - 1) = *(v65 - 1);
                  *long long v66 = v68;
                  v65 += 2;
                  v66 += 2;
                  v67 -= 4;
                }
                while (v67);
                if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_128;
                }
                unint64_t v59 = (uint64_t *)((char *)v59 + v64);
              }
            }
            do
            {
              uint64_t v69 = *v59++;
              *(void *)unint64_t v62 = v69;
              v62 += 8;
            }
            while (v59 != (uint64_t *)v60);
          }
LABEL_128:
          if (v54 != v82) {
            free(*((void **)v38 + 3));
          }
          double v33 = (void *)(v2 + 8 * v55);
          *((void *)v38 + 3) = v2;
          *((void *)v38 + 4) = v33;
          *((void *)v38 + 6) = v83;
LABEL_51:
          *double v33 = v34;
          *((void *)v38 + 4) += 8;
LABEL_52:
          if (++v32 == v28)
          {
            int v3 = v78;
            uint64_t v24 = v79;
            long long v21 = v81;
            goto LABEL_38;
          }
        }
        *(void *)long long v38 = *v52;
LABEL_112:
        *double v52 = v38;
        goto LABEL_113;
      }
      uint64_t v90 = v21;
      unint64_t v70 = v24 - v23 - 1864;
      if (v70 < 0x748) {
        goto LABEL_146;
      }
      unint64_t v71 = v70 / 0x748 + 1;
      v23 += 1864 * (v71 & 0x7FFFFFFFFFFFFELL);
      uint64_t v72 = v71 & 0x7FFFFFFFFFFFFELL;
      do
        v72 -= 2;
      while (v72);
      if (v71 != (v71 & 0x7FFFFFFFFFFFFELL))
      {
LABEL_146:
        do
          v23 += 1864;
        while (v23 != v24);
      }
    }
LABEL_135:
    uint64_t v73 = v77;
    unint64_t v74 = (void *)v77[1];
    if (v74)
    {
      do
      {
        unint64_t v75 = v74;
        unint64_t v74 = (void *)*v74;
      }
      while (v74);
    }
    else
    {
      do
      {
        unint64_t v75 = (void *)v73[2];
        BOOL v11 = *v75 == (void)v73;
        uint64_t v73 = v75;
      }
      while (!v11);
    }
    long long v20 = v75;
    uint64_t v4 = v84;
  }
  while (v75 != v5);
  if (v21) {
    operator delete(v21);
  }
  return v4;
}

void anonymous namespace'::PriorityQueueWrapper<anonymous namespace'::PointPathTrace,double>::emplace(double **a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    BOOL v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - *a1);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v16 = 24 * v15;
    uint8x8_t v17 = (char *)operator new(24 * v15);
    uint64_t v18 = &v17[24 * v12];
    *(double *)uint64_t v18 = a4;
    BOOL v19 = (double *)&v17[v16];
    *((void *)v18 + 1) = a2;
    *((void *)v18 + 2) = a3;
    float v10 = (double *)(v18 + 24);
    if (v9 != v11)
    {
      do
      {
        long long v20 = *(_OWORD *)(v9 - 3);
        *((double *)v18 - 1) = *(v9 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 24;
        v9 -= 3;
      }
      while (v9 != v11);
      uint64_t v9 = v11;
    }
    *a1 = (double *)v18;
    a1[1] = v10;
    a1[2] = v19;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v9 = a4;
    float v10 = v9 + 3;
    *((void *)v9 + 1) = a2;
    *((void *)v9 + 2) = a3;
  }
  a1[1] = v10;
  long long v21 = *a1;
  uint64_t v22 = (char *)v10 - (char *)*a1;
  if (v22 >= 25)
  {
    unint64_t v23 = (v22 / 0x18uLL - 2) >> 1;
    uint64_t v24 = &v21[3 * v23];
    long long v25 = v10 - 3;
    double v26 = *(v10 - 3);
    double v27 = *v24;
    uint64_t v28 = *((void *)v10 - 2);
    int v29 = *v24 <= v26 ? -1 : 1;
    if (v29 >= 1)
    {
      uint64_t v30 = *((void *)v10 - 1);
      do
      {
        unint64_t v31 = v25;
        long long v25 = v24;
        *unint64_t v31 = v27;
        *(_OWORD *)(v31 + 1) = *(_OWORD *)(v24 + 1);
        if (!v23) {
          break;
        }
        unint64_t v23 = (v23 - 1) >> 1;
        uint64_t v24 = &v21[3 * v23];
        double v27 = *v24;
        int v32 = *v24 <= v26 ? -1 : 1;
      }
      while (v32 > 0);
      double *v25 = v26;
      *((void *)v25 + 1) = v28;
      *((void *)v25 + 2) = v30;
    }
  }
}

uint64_t ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::BuildingFlat::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::BuildingFacadeDepth::BuildingPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::BuildingTopDepth::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::BuildingPointyRoofDepth::BuildingPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DiffuseBuilding::BuildingPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::FoggedDiffuseBuilding::BuildingPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::RenderItem *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::RenderItem * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::BuildingShadow::MeshPipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>::~FragmentedPool(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::RenderItemPool::~RenderItemPool(md::RenderItemPool *this)
{
  unint64_t v2 = *(void **)this;
  do
  {
    if (v2[1])
    {
      unint64_t v3 = 0;
      uint64_t v4 = v2 + 2;
      uint64_t v5 = v2 + 2;
      uint64_t v6 = (void (***)(void))(v2 + 2);
      do
      {
        uint64_t v7 = (void (**)(void *))*v6;
        v6 += 15;
        (*v7)(v5);
        ++v3;
        v4 += 15;
        uint64_t v5 = v6;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    unint64_t v2 = (void *)*v2;
  }
  while (v2);
  uint64_t v8 = *(void ***)this;
  *((void *)this + 1) = *(void *)this;
  uint64_t v9 = *v8;
  *uint64_t v8 = 0;
  if (v9)
  {
    do
    {
      float v10 = (void *)*v9;
      free(v9);
      uint64_t v9 = v10;
    }
    while (v10);
    uint64_t v8 = *(void ***)this;
  }
  free(v8);
}

void ggl::Batcher::~Batcher(ggl::Batcher *this)
{
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *((void *)this + 3);
    if (v4 != v3)
    {
      uint64_t v6 = *((void *)this + 4);
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *((void *)this + 3);
    }
    *((void *)this + 4) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v5, *((void *)this + 5) - v5);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v9;
    operator delete(v9);
  }
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15PrefilteredLine28PrefilteredLinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF57B040;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15PrefilteredLine28PrefilteredLinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E88C00(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(v2, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ggl::ConstantDataTyped<ggl::Fog::Skyfog>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Fog::Skyfog>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Fog::Skyfog>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Fog::Skyfog>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Fog::Skyfog>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5763F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::~__func()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF5763B0;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18BuildingFlatStroke31BuildingFlatStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF57B790;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18BuildingFlatStroke31BuildingFlatStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576368;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::~__func()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF576320;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14BuildingShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF57AE48;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14BuildingShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5762D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10RenderItemEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF57AC08;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10RenderItemEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF576290;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::RenderState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RenderState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RenderState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25DiffuseBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BCA0;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25DiffuseBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  float result = operator new(0x10uLL);
  void *result = &unk_1EF57BCA0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25DiffuseBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8A3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_ullong *a11, atomic_ullong *a12)
{
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void ggl::ConstantDataTyped<ggl::Building::Gradient>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Gradient>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Gradient>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Gradient>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Gradient>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Building::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5876E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5876E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Building::Scale>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Scale>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Scale>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Scale>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5876B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Scale>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5876B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576248;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576248;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~__func()
{
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24FoggedDiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BC58;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24FoggedDiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57BC58;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24FoggedDiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8B204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, atomic_ullong *a14)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18DiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B7D8;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18DiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57B7D8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18DiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8B9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, atomic_ullong *a14)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5761B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5761B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26SpecularBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57BD78;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26SpecularBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8C07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_ullong *a11, atomic_ullong *a12)
{
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25FoggedSpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57BCE8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25FoggedSpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8C7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, atomic_ullong *a14)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576128;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19SpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57B8B0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19SpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8CF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, atomic_ullong *a14)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5760E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57B8F8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8D6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, atomic_ullong *a14)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57AFB0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A1E8DE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, atomic_ullong *a14)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23BuildingPointyRoofDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57BB80;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23BuildingPointyRoofDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576008;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16BuildingTopDepth27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57B0D0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16BuildingTopDepth27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575FC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19BuildingFacadeDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57B820;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19BuildingFacadeDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575F78;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12BuildingFlat27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57ACE0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12BuildingFlat27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::BuildingFlat::Building>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::BuildingFlat::Building>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlat::Building>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlat::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlat::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575F30;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::PrefilteredLine::PrefilteredLinePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PrefilteredLine::PrefilteredLinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PrefilteredLine::PrefilteredLinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingShadow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583C10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularBuildingPointyRoof::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5889B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5889B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedSpecularBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5888D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5888D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedDiffuseBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5884B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5884B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingPointyRoofDepth::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingPointyRoofDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5887C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingPointyRoofDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5887C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingTopDepth::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingTopDepth::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingTopDepth::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFacadeDepth::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingFacadeDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5881D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingFacadeDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5881D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFlat::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingFlat::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingFlat::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5880F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5880F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::BuildingRenderResources::~BuildingRenderResources(md::BuildingRenderResources *this)
{
  uint64_t v2 = (void *)*((void *)this + 108);
  do
  {
    if (v2[1])
    {
      unint64_t v3 = 0;
      uint64_t v4 = v2 + 2;
      uint64_t v5 = v2 + 2;
      uint64_t v6 = (void (***)(void))(v2 + 2);
      do
      {
        uint64_t v7 = (void (**)(void *))*v6;
        v6 += 15;
        (*v7)(v5);
        ++v3;
        v4 += 15;
        uint64_t v5 = v6;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    uint64_t v2 = (void *)*v2;
  }
  while (v2);
  uint64_t v8 = (void **)*((void *)this + 108);
  *((void *)this + 109) = v8;
  uint64_t v9 = *v8;
  *uint64_t v8 = 0;
  if (v9)
  {
    do
    {
      float v10 = (void *)*v9;
      free(v9);
      uint64_t v9 = v10;
    }
    while (v10);
    uint64_t v8 = (void **)*((void *)this + 108);
  }
  free(v8);
  BOOL v11 = (void *)*((void *)this + 105);
  if (v11)
  {
    *((void *)this + 106) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *((void *)this + 101);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 102);
    uint64_t v14 = *((void *)this + 101);
    if (v13 != v12)
    {
      uint64_t v15 = *((void *)this + 102);
      do
      {
        uint8x8_t v17 = *(void **)(v15 - 24);
        v15 -= 24;
        uint64_t v16 = v17;
        if (v17)
        {
          *(void *)(v13 - 16) = v16;
          operator delete(v16);
        }
        uint64_t v13 = v15;
      }
      while (v15 != v12);
      uint64_t v14 = *((void *)this + 101);
    }
    *((void *)this + 102) = v12;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 104) + 40))(*((void *)this + 104), v14, *((void *)this + 103) - v14);
  }
  uint64_t v18 = (void *)*((void *)this + 98);
  if (v18)
  {
    *((void *)this + 99) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v19)
  {
    uint64_t v20 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v19);
    MEMORY[0x1A6239270](v20, 0x10A0C40D234DDC7);
  }
  uint64_t v21 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v21)
  {
    uint64_t v22 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v21);
    MEMORY[0x1A6239270](v22, 0x10A0C40D234DDC7);
  }
  uint64_t v23 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v23)
  {
    uint64_t v24 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v23);
    MEMORY[0x1A6239270](v24, 0x10A0C40D234DDC7);
  }
  long long v25 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    double v26 = (std::__shared_weak_count *)*((void *)this + 89);
    if (!v26) {
      goto LABEL_34;
    }
  }
  else
  {
    double v26 = (std::__shared_weak_count *)*((void *)this + 89);
    if (!v26) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_34:
  double v27 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 85);
    if (!v28) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 85);
    if (!v28) {
      goto LABEL_40;
    }
  }
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_40:
  int v29 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 81);
    if (!v30) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 81);
    if (!v30) {
      goto LABEL_46;
    }
  }
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_46:
  unint64_t v31 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    int v32 = (std::__shared_weak_count *)*((void *)this + 77);
    if (!v32) {
      goto LABEL_52;
    }
  }
  else
  {
    int v32 = (std::__shared_weak_count *)*((void *)this + 77);
    if (!v32) {
      goto LABEL_52;
    }
  }
  if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_52:
  uint64_t v33 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v33)
  {
    uint64_t v34 = ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>::~FragmentedPool(v33);
    MEMORY[0x1A6239270](v34, 0x10A0C40D234DDC7);
  }
  uint64_t v35 = *((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v35)
  {
    uint64_t v36 = ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>::~FragmentedPool(v35);
    MEMORY[0x1A6239270](v36, 0x10A0C40D234DDC7);
  }
  uint64_t v37 = *((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v37)
  {
    uint64_t v38 = ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>::~FragmentedPool(v37);
    MEMORY[0x1A6239270](v38, 0x10A0C40D234DDC7);
  }
  uint64_t v39 = *((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v39)
  {
    uint64_t v40 = ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v39);
    MEMORY[0x1A6239270](v40, 0x10A0C40D234DDC7);
  }
  uint64_t v41 = *((void *)this + 71);
  *((void *)this + 71) = 0;
  if (v41)
  {
    uint64_t v42 = ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>::~FragmentedPool(v41);
    MEMORY[0x1A6239270](v42, 0x10A0C40D234DDC7);
  }
  uint64_t v43 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v43)
  {
    uint64_t v44 = ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v43);
    MEMORY[0x1A6239270](v44, 0x10A0C40D234DDC7);
  }
  uint64_t v45 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v45)
  {
    uint64_t v46 = ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>::~FragmentedPool(v45);
    MEMORY[0x1A6239270](v46, 0x10A0C40D234DDC7);
  }
  uint64_t v47 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v47)
  {
    uint64_t v48 = ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>::~FragmentedPool(v47);
    MEMORY[0x1A6239270](v48, 0x10A0C40D234DDC7);
  }
  uint64_t v49 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v49)
  {
    uint64_t v50 = ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v49);
    MEMORY[0x1A6239270](v50, 0x10A0C40D234DDC7);
  }
  uint64_t v51 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v51)
  {
    uint64_t v52 = ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>::~FragmentedPool(v51);
    MEMORY[0x1A6239270](v52, 0x10A0C40D234DDC7);
  }
  uint64_t v53 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v53)
  {
    uint64_t v54 = ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>::~FragmentedPool(v53);
    MEMORY[0x1A6239270](v54, 0x10A0C40D234DDC7);
  }
  uint64_t v55 = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v55)
  {
    uint64_t v56 = ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>::~FragmentedPool(v55);
    MEMORY[0x1A6239270](v56, 0x10A0C40D234DDC7);
  }
  uint64_t v57 = *((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v57)
  {
    uint64_t v58 = ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>::~FragmentedPool(v57);
    MEMORY[0x1A6239270](v58, 0x10A0C40D234DDC7);
  }
  uint64_t v59 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v59)
  {
    uint64_t v60 = ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>::~FragmentedPool(v59);
    MEMORY[0x1A6239270](v60, 0x10A0C40D234DDC7);
  }
  uint64_t v61 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v61)
  {
    uint64_t v62 = ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>::~FragmentedPool(v61);
    MEMORY[0x1A6239270](v62, 0x10A0C40D234DDC7);
  }
  uint64_t v63 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v63)
  {
    uint64_t v64 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v63);
    MEMORY[0x1A6239270](v64, 0x10A0C40D234DDC7);
  }
  uint64_t v65 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v65)
  {
    uint64_t v66 = ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>::~FragmentedPool(v65);
    MEMORY[0x1A6239270](v66, 0x10A0C40D234DDC7);
  }
  uint64_t v67 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    long long v68 = (std::__shared_weak_count *)*((void *)this + 56);
    if (!v68) {
      goto LABEL_92;
    }
  }
  else
  {
    long long v68 = (std::__shared_weak_count *)*((void *)this + 56);
    if (!v68) {
      goto LABEL_92;
    }
  }
  if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_92:
  uint64_t v69 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    unint64_t v70 = (std::__shared_weak_count *)*((void *)this + 52);
    if (!v70) {
      goto LABEL_98;
    }
  }
  else
  {
    unint64_t v70 = (std::__shared_weak_count *)*((void *)this + 52);
    if (!v70) {
      goto LABEL_98;
    }
  }
  if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
LABEL_98:
  unint64_t v71 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    uint64_t v72 = (std::__shared_weak_count *)*((void *)this + 48);
    if (!v72) {
      goto LABEL_104;
    }
  }
  else
  {
    uint64_t v72 = (std::__shared_weak_count *)*((void *)this + 48);
    if (!v72) {
      goto LABEL_104;
    }
  }
  if (!atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
LABEL_104:
  uint64_t v73 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    unint64_t v74 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v74) {
      goto LABEL_110;
    }
  }
  else
  {
    unint64_t v74 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v74) {
      goto LABEL_110;
    }
  }
  if (!atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
LABEL_110:
  unint64_t v75 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    uint64_t v76 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v76) {
      goto LABEL_116;
    }
  }
  else
  {
    uint64_t v76 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v76) {
      goto LABEL_116;
    }
  }
  if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_116:
  uint64_t v77 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    unint64_t v78 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v78) {
      goto LABEL_122;
    }
  }
  else
  {
    unint64_t v78 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v78) {
      goto LABEL_122;
    }
  }
  if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
LABEL_122:
  uint64_t v79 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
    uint64_t v80 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v80) {
      goto LABEL_128;
    }
  }
  else
  {
    uint64_t v80 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v80) {
      goto LABEL_128;
    }
  }
  if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
LABEL_128:
  uint64_t v81 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
    uint64_t v82 = (std::__shared_weak_count *)*((void *)this + 28);
    if (!v82) {
      goto LABEL_134;
    }
  }
  else
  {
    uint64_t v82 = (std::__shared_weak_count *)*((void *)this + 28);
    if (!v82) {
      goto LABEL_134;
    }
  }
  if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
  }
LABEL_134:
  unint64_t v83 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    uint64_t v84 = (std::__shared_weak_count *)*((void *)this + 24);
    if (!v84) {
      goto LABEL_140;
    }
  }
  else
  {
    uint64_t v84 = (std::__shared_weak_count *)*((void *)this + 24);
    if (!v84) {
      goto LABEL_140;
    }
  }
  if (!atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
LABEL_140:
  unint64_t v85 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    unint64_t v86 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v86) {
      goto LABEL_146;
    }
  }
  else
  {
    unint64_t v86 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v86) {
      goto LABEL_146;
    }
  }
  if (!atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
LABEL_146:
  long long v87 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    uint64_t v88 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v88) {
      goto LABEL_152;
    }
  }
  else
  {
    uint64_t v88 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v88) {
      goto LABEL_152;
    }
  }
  if (!atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
LABEL_152:
  uint64_t v89 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    uint64_t v90 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v90) {
      goto LABEL_158;
    }
  }
  else
  {
    uint64_t v90 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v90) {
      goto LABEL_158;
    }
  }
  if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
LABEL_158:
  uint64_t v91 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    uint64_t v92 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v92) {
      goto LABEL_164;
    }
  }
  else
  {
    uint64_t v92 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v92) {
      goto LABEL_164;
    }
  }
  if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
LABEL_164:
  uint64_t v93 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    uint64_t v94 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v94) {
      goto LABEL_170;
    }
  }
  else
  {
    uint64_t v94 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v94) {
      goto LABEL_170;
    }
  }
  if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
LABEL_170:
}

void ggl::OcclusionLine::OcclusionLinePipelineState::~OcclusionLinePipelineState(ggl::OcclusionLine::OcclusionLinePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::OcclusionLine::OcclusionLinePipelineSetup::textureIsEnabled(ggl::OcclusionLine::OcclusionLinePipelineSetup *this)
{
  return 0;
}

BOOL ggl::OcclusionLine::OcclusionLinePipelineSetup::constantDataIsEnabled(ggl::OcclusionLine::OcclusionLinePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::OcclusionLine::OcclusionLinePipelineSetup::~OcclusionLinePipelineSetup(ggl::OcclusionLine::OcclusionLinePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *std::function<BOOL ()(gdc::LogicExecutionNode const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

_WORD *std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1EF57D6C8;
  result[4] = *(_WORD *)(a1 + 8);
  *((unsigned char *)result + 10) = *(unsigned char *)(a1 + 10);
  return result;
}

void std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::~__func()
{
}

void std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(uint64_t *a1, unsigned __int16 a2)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = a2;
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (v2 <= a2) {
        unint64_t v5 = a2 % v2;
      }
    }
    else
    {
      unint64_t v5 = (v2 - 1) & a2;
    }
    uint64_t v6 = *a1;
    uint64_t v7 = *(unsigned __int16 ***)(*a1 + 8 * v5);
    if (v7)
    {
      uint64_t v8 = *v7;
      if (v8)
      {
        unint64_t v9 = v2 - 1;
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v10 = *((void *)v8 + 1);
            if (v10 == a2)
            {
              if (v8[8] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v10 & v9) != v5)
            {
              return;
            }
            uint64_t v8 = *(unsigned __int16 **)v8;
            if (!v8) {
              return;
            }
          }
        }
        do
        {
          unint64_t v11 = *((void *)v8 + 1);
          if (v11 == a2)
          {
            if (v8[8] == a2)
            {
LABEL_22:
              if (v4.u32[0] > 1uLL)
              {
                if (v2 <= a2) {
                  unint64_t v3 = a2 % v2;
                }
              }
              else
              {
                unint64_t v3 = v9 & a2;
              }
              uint64_t v12 = *(unsigned __int16 **)(v6 + 8 * v3);
              do
              {
                uint64_t v13 = (uint64_t *)v12;
                uint64_t v12 = *(unsigned __int16 **)v12;
              }
              while (v12 != v8);
              if (v13 == a1 + 2) {
                goto LABEL_39;
              }
              unint64_t v14 = v13[1];
              if (v4.u32[0] > 1uLL)
              {
                if (v14 >= v2) {
                  v14 %= v2;
                }
              }
              else
              {
                v14 &= v9;
              }
              if (v14 != v3)
              {
LABEL_39:
                if (!*(void *)v8) {
                  goto LABEL_40;
                }
                unint64_t v15 = *(void *)(*(void *)v8 + 8);
                if (v4.u32[0] > 1uLL)
                {
                  if (v15 >= v2) {
                    v15 %= v2;
                  }
                }
                else
                {
                  v15 &= v9;
                }
                if (v15 != v3) {
LABEL_40:
                }
                  *(void *)(v6 + 8 * v3) = 0;
              }
              uint64_t v16 = *(unsigned __int16 **)v8;
              if (*(void *)v8)
              {
                unint64_t v17 = *((void *)v16 + 1);
                if (v4.u32[0] > 1uLL)
                {
                  if (v17 >= v2) {
                    v17 %= v2;
                  }
                }
                else
                {
                  v17 &= v9;
                }
                if (v17 != v3)
                {
                  *(void *)(*a1 + 8 * v17) = v13;
                  uint64_t v16 = *(unsigned __int16 **)v8;
                }
              }
              *uint64_t v13 = (uint64_t)v16;
              *(void *)uint64_t v8 = 0;
              --a1[3];
              operator delete(v8);
              return;
            }
          }
          else
          {
            if (v11 >= v2) {
              v11 %= v2;
            }
            if (v11 != v5) {
              return;
            }
          }
          uint64_t v8 = *(unsigned __int16 **)v8;
        }
        while (v8);
      }
    }
  }
}

void *std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF56FC78;
  return result;
}

void std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::~__func()
{
}

void ecs2::ModuleBucketDescriptor::~ModuleBucketDescriptor(void **this)
{
  ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor(this + 10);
  unint64_t v11 = this + 7;
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100](&v11);
  unint64_t v2 = (char *)this[4];
  if (v2)
  {
    unint64_t v3 = (char *)this[5];
    uint8x8_t v4 = this[4];
    if (v3 != v2)
    {
      unint64_t v5 = (char *)this[5];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      uint8x8_t v4 = this[4];
    }
    this[5] = v2;
    operator delete(v4);
  }
  uint64_t v8 = this[1];
  if (v8)
  {
    uint64_t v9 = (uint64_t)this[2];
    uint64_t v10 = this[1];
    if ((void *)v9 != v8)
    {
      do
      {
        v9 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v9);
      }
      while ((void *)v9 != v8);
      uint64_t v10 = this[1];
    }
    this[2] = v8;
    operator delete(v10);
  }
}

void ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  unint64_t v2 = (ecs2::ExecutionTaskDescriptor *)this[12];
  if (v2 == (ecs2::ExecutionTaskDescriptor *)(this + 9))
  {
    (*((void (**)(char *))this[9] + 4))((char *)this + 72);
  }
  else if (v2)
  {
    (*(void (**)(ecs2::ExecutionTaskDescriptor *))(*(void *)v2 + 40))(v2);
  }
  unint64_t v3 = (char *)(this + 1);
  uint8x8_t v4 = (ecs2::ExecutionTaskDescriptor *)this[8];
  if (v4 == (ecs2::ExecutionTaskDescriptor *)(this + 5))
  {
    (*((void (**)(char *))this[5] + 4))((char *)this + 40);
  }
  else if (v4)
  {
    (*(void (**)(ecs2::ExecutionTaskDescriptor *))(*(void *)v4 + 40))(v4);
  }
  unint64_t v5 = (char *)this[4];
  if (v5 == v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 32))((char *)this + 8);
  }
  else if (v5)
  {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }
}

uint64_t std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(void *)(a1 + 96);
  if (v2 == a1 + 72)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 72) + 32))(a1 + 72);
  }
  else if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 == a1 + 40)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 32))(a1 + 40);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result == v3)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 32);
    return v7(a1 + 8);
  }
  else if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void **std::vector<ecs2::UtlityTaskDescriptor>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 7;
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        uint64_t v6 = (void **)*(v3 - 4);
        if (v3 - 7 == v6)
        {
          (*((void (**)(void **))*(v3 - 7) + 4))(v3 - 7);
        }
        else if (v6)
        {
          (*((void (**)(void **))*v6 + 5))(v6);
        }
        v3 -= 8;
        v5 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<ecs2::ExecutionTaskDescriptor>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ecs2::ExecutionTaskFunction::~ExecutionTaskFunction(ecs2::ExecutionTaskFunction *this)
{
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (ecs2::ExecutionTaskFunction *)*((void *)this + 7);
  if (v4 == (ecs2::ExecutionTaskFunction *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(ecs2::ExecutionTaskFunction *))(*(void *)v4 + 40))(v4);
  }
  unint64_t v5 = (ecs2::ExecutionTaskFunction *)*((void *)this + 3);
  if (v5 == this)
  {
    (*(void (**)(ecs2::ExecutionTaskFunction *))(*(void *)this + 32))(this);
  }
  else if (v5)
  {
    (*(void (**)(ecs2::ExecutionTaskFunction *))(*(void *)v5 + 40))(v5);
  }
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5270B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5270F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A288;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5272F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527338;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A3A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::function<std::vector<gdc::TypeInfo> ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ecs2::Runtime &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528FA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528FE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B200;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528460;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5284A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    uint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    uint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v9 = ***(uint64_t ****)(a1 + 8);
  if (v9 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v9 != 0x22D45F5AAD4BF408)
  {
    uint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    uint64_t v9 = v10 - 5;
  }
  uint64_t v12 = (uint64_t (***)(void))v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  unint64_t v14 = (md::LayoutContext *)(**v12)(v12);
  if (!*(unsigned char *)(md::LayoutContext::frameState(v14) + 117))
  {
    unint64_t v15 = (void *)MEMORY[0x1A6239C40]();
    (*(void (**)(uint64_t, md::LayoutContext *))(*(void *)v8 + 72))(v8, v14);
  }
  *(void *)(a1 + 8) = 0;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AC60;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::~__func()
{
}

uint64_t VKAnimationCurveLinear_block_invoke(double a1)
{
  int v1 = LODWORD(a1);
  if (_ZZUb_E9onceToken[0] != -1) {
    dispatch_once(_ZZUb_E9onceToken, &__block_literal_global_10);
  }
  uint64_t v2 = (void *)_ZZUb_E14timingFunction;
  LODWORD(a1) = v1;
  return [v2 _solveForInput:a1];
}

void VKAnimationCurveLinear_block_invoke_2()
{
  uint64_t v0 = [MEMORY[0x1E4F39C10] functionWithName:*MEMORY[0x1E4F3A4A0]];
  int v1 = (void *)_ZZUb_E14timingFunction;
  _ZZUb_E14timingFunction = v0;
}

uint64_t VKAnimationCurveEaseIn_block_invoke_3(double a1)
{
  int v1 = LODWORD(a1);
  if (_ZZUb1_E9onceToken != -1) {
    dispatch_once(&_ZZUb1_E9onceToken, &__block_literal_global_14);
  }
  uint64_t v2 = (void *)_ZZUb1_E14timingFunction;
  LODWORD(a1) = v1;
  return [v2 _solveForInput:a1];
}

void VKAnimationCurveEaseIn_block_invoke_4()
{
  uint64_t v0 = [MEMORY[0x1E4F39C10] functionWithName:*MEMORY[0x1E4F3A488]];
  int v1 = (void *)_ZZUb1_E14timingFunction;
  _ZZUb1_E14timingFunction = v0;
}

float VKAnimationCurveCubicEaseOut_block_invoke_9(float a1)
{
  return 1.0 - (float)((float)(1.0 - a1) * (float)((float)(1.0 - a1) * (float)(1.0 - a1)));
}

void VKAnimationCurveElasticEaseOut_block_invoke_10(float a1)
{
  if (a1 != 0.0 && a1 != 1.0)
  {
    exp2f(a1 * -10.0);
    sinf((float)(a1 * 20.944) + -1.5708);
  }
}

float VKAnimationCurveExponentialEaseIn_block_invoke_11(float a1)
{
  return (float)(expf(a1 * 9.2104) * 0.0001) + -0.0001;
}

float VKAnimationCurveExponentialEaseInOut_block_invoke_12(float a1)
{
  if ((float)(a1 + a1) >= 1.0)
  {
    float v1 = expf(18.421 - (float)(a1 * 18.421));
    float v2 = 1.0;
    float v3 = -0.00005;
  }
  else
  {
    float v1 = expf(a1 * 18.421);
    float v2 = -0.00005;
    float v3 = 0.00005;
  }
  return v2 + (float)(v1 * v3);
}

float VKAnimationCurveExponentialEaseOut_block_invoke_13(float a1)
{
  return (float)(expf(9.2104 - (float)(a1 * 9.2104)) * -0.0001) + 1.0001;
}

uint64_t VKAnimationCurveDefaultSpring_block_invoke_14(__n128 a1)
{
  unsigned __int32 v1 = a1.n128_u32[0];
  if (_ZZUb12_E9onceToken != -1) {
    dispatch_once(&_ZZUb12_E9onceToken, &__block_literal_global_36);
  }
  float v2 = *(uint64_t (**)(__n128))(_ZZUb12_E14timingFunction + 16);
  a1.n128_u32[0] = v1;
  return v2(a1);
}

void VKAnimationCurveDefaultSpring_block_invoke_15()
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __VKAnimationCurveSpring_block_invoke;
  v2[3] = &__block_descriptor_52_e8_f12__0f8l;
  long long v3 = xmmword_1A28FCF10;
  int v4 = 1058262331;
  uint64_t v0 = [v2 copy];
  unsigned __int32 v1 = (void *)_ZZUb12_E14timingFunction;
  _ZZUb12_E14timingFunction = v0;
}

float __VKAnimationCurveSpring_block_invoke(float *a1, float a2)
{
  float v3 = a1[8] * a2;
  float v4 = expf((float)-(float)(a2 * a1[9]) * a1[10]);
  float v5 = a1[11];
  __float2 v6 = __sincosf_stret(v3);
  return -(float)((float)((float)((float)(v5 * v6.__cosval) + (float)(a1[12] * v6.__sinval)) * v4) + -1.0);
}

uint64_t VKAnimationCurveDefaultCameraSpring_block_invoke_16(__n128 a1)
{
  unsigned __int32 v1 = a1.n128_u32[0];
  if (_ZZUb14_E9onceToken != -1) {
    dispatch_once(&_ZZUb14_E9onceToken, &__block_literal_global_40);
  }
  float v2 = *(uint64_t (**)(__n128))(_ZZUb14_E14timingFunction + 16);
  a1.n128_u32[0] = v1;
  return v2(a1);
}

void VKAnimationCurveDefaultCameraSpring_block_invoke_17()
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __VKAnimationCurveSpring_block_invoke_2;
  v2[3] = &__block_descriptor_44_e8_f12__0f8l;
  int v3 = 1094972813;
  void v2[4] = 0x4143F58D3F800000;
  uint64_t v0 = [v2 copy];
  unsigned __int32 v1 = (void *)_ZZUb14_E14timingFunction;
  _ZZUb14_E14timingFunction = v0;
}

float __VKAnimationCurveSpring_block_invoke_2(float *a1, float a2)
{
  float v2 = a1[8] + (float)(a1[9] * a2);
  return -(float)((float)(expf(-(float)(a2 * a1[10])) * v2) + -1.0);
}

void sub_1A1E92090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1E92158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E921FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E92334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E923BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VKAnimationCurveSpring(float a1, float a2, float a3, float a4)
{
  float v4 = sqrtf(a2 / a1);
  float v5 = sqrtf(a2 * a1);
  float v6 = a3 / (float)(v5 + v5);
  if (v6 >= 1.0)
  {
    uint64_t v7 = v10;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __VKAnimationCurveSpring_block_invoke_2;
    v10[3] = &__block_descriptor_44_e8_f12__0f8l;
    int v11 = 1065353216;
    float v12 = v4 - a4;
    float v13 = v4;
  }
  else
  {
    uint64_t v7 = v14;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __VKAnimationCurveSpring_block_invoke;
    v14[3] = &__block_descriptor_52_e8_f12__0f8l;
    float v15 = sqrtf(-(float)((float)(v6 * v6) + -1.0)) * v4;
    float v16 = v6;
    float v17 = v4;
    int v18 = 1065353216;
    float v19 = (float)-(float)(a4 - (float)(v6 * v4)) / v15;
  }
  uint64_t v8 = (void *)[v7 copy];
  return v8;
}

id VKAnimationCurveForCAMediaTimingFunction(void *a1)
{
  id v1 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __VKAnimationCurveForCAMediaTimingFunction_block_invoke;
  v5[3] = &unk_1E5A8C510;
  id v6 = v1;
  id v2 = v1;
  int v3 = (void *)[v5 copy];

  return v3;
}

void sub_1A1E92AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t __VKAnimationCurveForCAMediaTimingFunction_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_solveForInput:");
}

double md::ARWalkingManeuverLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1A28FCF30;
  strcpy(v3, "ARWalkingManeuverLabelPart");
  return *(double *)"aneuverLabelPart";
}

uint64_t md::StackLabelPart::partType(md::StackLabelPart *this)
{
  return 2;
}

uint64_t md::ARWalkingManeuverLabelPart::modelMatrix(md::ARWalkingManeuverLabelPart *this)
{
  return (uint64_t)this + 960;
}

uint64_t md::ARWalkingManeuverLabelPart::stagingModelMatrix(md::ARWalkingManeuverLabelPart *this)
{
  return (uint64_t)this + 696;
}

uint64_t md::ARWalkingManeuverLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 960;
  md::ARWalkingManeuverLabelPart::updateLocalState(a1, (_OWORD *)(a1 + 960), a2 + 440, (double *)(*(void *)(a1 + 16) + 408), *(float *)(*(void *)(a1 + 32) + 72), *(float *)(*(void *)(a1 + 32) + 68));
  float v9 = *(float *)(*(void *)(a1 + 32) + 68);
  *(float *)(a1 + 416) = v9;
  *(_DWORD *)(a1 + 352) = *(_DWORD *)a4;
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a4 + 4);
  *(unsigned char *)(a1 + 510) = fabsf(v9 + -1.0) > 0.000001;
  float v10 = *(float *)(a2 + 904);
  *(float *)(a1 + 536) = v10;
  float v11 = *(float *)(a2 + 908);
  *(float *)(a1 + 540) = v11;
  float v12 = *(float *)(a1 + 528);
  float v13 = v12 * v11;
  float v14 = *(float *)(a1 + 532);
  float v15 = -(float)((float)(v14 * v11) - (float)(v12 * v10));
  *(float *)(a1 + 328) = v15;
  *(float *)(a1 + 332) = v13 + (float)(v14 * v10);
  *(unsigned char *)(a1 + 508) = fabsf(v15 + -1.0) > 0.000001;
  *(void *)(a1 + 424) = v8;
  return md::StackLabelPart::layoutForDisplay((float32x2_t *)a1, a2, a3, (float *)a4, (float *)(a1 + 1216));
}

void md::ARWalkingManeuverLabelPart::updateLocalState(uint64_t a1, _OWORD *a2, uint64_t a3, double *a4, double a5, double a6)
{
  float v12 = +[VKDebugSettings sharedSettings];
  [v12 arDebugStylingBaseScalingFactor];
  int v13 = *(unsigned __int8 *)(a1 + 1225);
  double v15 = v14;
  if ([v12 arForceLabelsViewOriented]) {
    int v13 = 4;
  }
  generateRotationMatrixMeshPositioningMode((double *)&v61, *(void *)(a1 + 16) + 152, a3, a4, 8, 0, v13);
  double v16 = v15 * (a5 * a6);
  double v17 = v16 * *(double *)(a3 + 320);
  long long v49 = v61;
  long long v52 = v63;
  long long v55 = v65;
  uint64_t v50 = v62;
  uint64_t v53 = v64;
  uint64_t v56 = v66;
  uint64_t v51 = 0;
  uint64_t v54 = 0;
  uint64_t v57 = 0;
  long long v58 = *(_OWORD *)a4;
  uint64_t v59 = *((void *)a4 + 2);
  uint64_t v60 = 0x3FF0000000000000;
  long long v42 = 0u;
  uint64_t v44 = 0;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  uint64_t v48 = 0x3FF0000000000000;
  double v39 = v17;
  *(double *)&long long v42 = v17;
  double v45 = v17;
  gm::operator*<double,4,4,4>((double *)&v31, (double *)&v49, &v39);
  long long v18 = v31;
  a2[8] = v31;
  long long v19 = v32;
  a2[9] = v32;
  long long v20 = v33;
  a2[10] = v33;
  long long v21 = v34;
  a2[11] = v34;
  long long v22 = v35;
  a2[12] = v35;
  long long v23 = v36;
  a2[13] = v36;
  long long v24 = v37;
  a2[14] = v37;
  long long v25 = v38;
  a2[15] = v38;
  if (*(unsigned char *)(a1 + 1224))
  {
    generateRotationMatrixMeshPositioningMode((double *)&v61, *(void *)(a1 + 16) + 152, a3, a4, 8, 1, v13);
    double v26 = v16 * *(double *)(a3 + 320);
    long long v49 = v61;
    long long v52 = v63;
    long long v55 = v65;
    uint64_t v50 = v62;
    uint64_t v53 = v64;
    uint64_t v56 = v66;
    uint64_t v51 = 0;
    uint64_t v54 = 0;
    uint64_t v57 = 0;
    long long v58 = *(_OWORD *)a4;
    uint64_t v59 = *((void *)a4 + 2);
    uint64_t v60 = 0x3FF0000000000000;
    long long v42 = 0u;
    uint64_t v44 = 0;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    uint64_t v48 = 0x3FF0000000000000;
    double v39 = v26;
    *(double *)&long long v42 = v26;
    double v45 = v26;
    gm::operator*<double,4,4,4>((double *)&v31, (double *)&v49, &v39);
    long long v27 = v32;
    *a2 = v31;
    a2[1] = v27;
    long long v28 = v34;
    a2[2] = v33;
    a2[3] = v28;
    long long v29 = v36;
    a2[4] = v35;
    a2[5] = v29;
    long long v30 = v38;
    a2[6] = v37;
    a2[7] = v30;
  }
  else
  {
    *a2 = v18;
    a2[1] = v19;
    a2[2] = v20;
    a2[3] = v21;
    a2[4] = v22;
    a2[5] = v23;
    a2[6] = v24;
    a2[7] = v25;
  }
}

void sub_1A1E92F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double md::ARWalkingManeuverLabelPart::prepareForDisplay(md::ARWalkingManeuverLabelPart *this, LabelManager *a2)
{
  int v3 = (uint64_t *)*((void *)this + 72);
  float v4 = (uint64_t *)*((void *)this + 73);
  while (v3 != v4)
  {
    uint64_t v6 = *v3++;
    (*(void (**)(uint64_t, LabelManager *))(*(void *)v6 + 104))(v6, a2);
  }
  double result = *((double *)this + 119);
  *((double *)this + 152) = result;
  return result;
}

uint64_t md::ARWalkingManeuverLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t v6 = *(void **)(*(void *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 1224));
  uint64_t v20 = 0;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, float32x2_t *, uint64_t *))(*v6 + 80))(v6, a2, a3, &v20);
  if (result == 37)
  {
    float v11 = (float *)v6[3];
    if (v11[20] >= v11[18] && v11[21] >= v11[19])
    {
      float v12 = *(float *)(*(void *)(a1 + 32) + 20);
      *(float *)(a1 + 176) = v12;
      *(_DWORD *)(a1 + 112) = a3->i32[0];
      *(_DWORD *)(a1 + 116) = a3->i32[1];
      *(unsigned char *)(a1 + 270) = fabsf(v12 + -1.0) > 0.000001;
      uint64_t v13 = *(void *)(a2 + 432);
      float v14 = *(float *)(v13 + 464);
      *(float *)(a1 + 296) = v14;
      float v15 = *(float *)(v13 + 468);
      *(float *)(a1 + 300) = v15;
      float v16 = *(float *)(a1 + 288);
      float v17 = v16 * v15;
      float v18 = *(float *)(a1 + 292);
      *(float *)&double v10 = -(float)((float)(v18 * v15) - (float)(v16 * v14));
      *(_DWORD *)(a1 + 88) = LODWORD(v10);
      *(float *)(a1 + 92) = v17 + (float)(v18 * v14);
      v8.n128_f64[0] = fabsf(*(float *)&v10 + -1.0);
      v9.n128_u64[0] = 0x3EB0C6F7A0B5ED8DLL;
      *(unsigned char *)(a1 + 268) = v8.n128_f64[0] > 0.000001;
      if (!*(unsigned char *)(a1 + 1224))
      {
        uint64_t v19 = *(void *)(**(void **)(**(void **)(a1 + 576) + 576) + 24);
        v9.n128_u32[0] = 1034594987;
        v8.n128_f32[0] = (float)(*(float *)(v19 + 84) - *(float *)(v19 + 76)) * 0.083333;
        *(_DWORD *)(a1 + 956) = v8.n128_u32[0];
      }
      uint64_t result = md::StackLabelPart::layoutForStaging(a1, a2, a3, (float32x2_t *)(a1 + 952), v8, v9, v10);
      if (result == 37)
      {
        if (*(unsigned char *)(a1 + 566))
        {
          md::ARWalkingManeuverLabelPart::updateLocalState(a1, (_OWORD *)(a1 + 696), *(void *)(a2 + 432), (double *)(*(void *)(a1 + 16) + 592), *(float *)(*(void *)(a1 + 32) + 24), *(float *)(*(void *)(a1 + 32) + 20));
          *(void *)(a1 + 184) = a1 + 696;
        }
        return 37;
      }
    }
    else
    {
      return 14;
    }
  }
  return result;
}

void md::ARWalkingManeuverLabelPart::~ARWalkingManeuverLabelPart(md::ARWalkingManeuverLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  id v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    id v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  id v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

uint64_t md::MapEngineConfiguration::shouldRebuildCurrentMode(md::MapEngineConfiguration *this, md::MapEngine *a2)
{
  return 0;
}

void md::MuninMapEngineConfiguration::didBecomeActive(uint64_t a1, uint64_t a2)
{
  id v2 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v3 = v2[2];
  if (!*(void *)&v3) {
    goto LABEL_45;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x2FED70A4459DFCA1;
    if (*(void *)&v3 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v7 = 0x2FED70A4459DFCA1uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  __n128 v8 = *(void **)(*(void *)&v2[1] + 8 * v7);
  if (v8)
  {
    __n128 v9 = (void *)*v8;
    if (v9)
    {
      if (v5.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v11 = v9[1];
          if (v11 == 0x2FED70A4459DFCA1)
          {
            if (v9[2] == 0x2FED70A4459DFCA1) {
              goto LABEL_22;
            }
          }
          else if ((v11 & (*(void *)&v3 - 1)) != v7)
          {
            goto LABEL_24;
          }
          __n128 v9 = (void *)*v9;
          if (!v9) {
            goto LABEL_24;
          }
        }
      }
      while (1)
      {
        unint64_t v10 = v9[1];
        if (v10 == 0x2FED70A4459DFCA1)
        {
          if (v9[2] == 0x2FED70A4459DFCA1)
          {
LABEL_22:
            uint64_t v12 = v9[5];
            if (v12)
            {
              md::StyleLogic::setMapMode(v12, 5, 0.0);
              id v2 = *(int8x8_t **)(a2 + 1120);
              int8x8_t v3 = v2[2];
            }
LABEL_24:
            if (v3)
            {
              uint8x8_t v13 = (uint8x8_t)vcnt_s8(v3);
              v13.i16[0] = vaddlv_u8(v13);
              unint64_t v6 = v13.u32[0];
              break;
            }
LABEL_45:
            uint64_t v20 = 0;
            goto LABEL_46;
          }
        }
        else
        {
          if (v10 >= *(void *)&v3) {
            v10 %= *(void *)&v3;
          }
          if (v10 != v7) {
            goto LABEL_24;
          }
        }
        __n128 v9 = (void *)*v9;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
  }
  if (v6 > 1)
  {
    uint64_t v14 = 0x20A1ED17D78F322BLL;
    if (*(void *)&v3 <= 0x20A1ED17D78F322BuLL) {
      uint64_t v14 = 0x20A1ED17D78F322BuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v14 = (*(void *)&v3 - 1) & 0x20A1ED17D78F322BLL;
  }
  float v15 = *(void **)(*(void *)&v2[1] + 8 * v14);
  if (!v15) {
    goto LABEL_45;
  }
  float v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_45;
  }
  if (v6 < 2)
  {
    uint64_t v17 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v19 = v16[1];
      if (v19 == 0x20A1ED17D78F322BLL)
      {
        if (v16[2] == 0x20A1ED17D78F322BLL) {
          goto LABEL_49;
        }
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_45;
      }
      float v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_45;
      }
    }
  }
  while (1)
  {
    unint64_t v18 = v16[1];
    if (v18 == 0x20A1ED17D78F322BLL) {
      break;
    }
    if (v18 >= *(void *)&v3) {
      v18 %= *(void *)&v3;
    }
    if (v18 != v14) {
      goto LABEL_45;
    }
LABEL_35:
    float v16 = (void *)*v16;
    if (!v16) {
      goto LABEL_45;
    }
  }
  if (v16[2] != 0x20A1ED17D78F322BLL) {
    goto LABEL_35;
  }
LABEL_49:
  uint64_t v20 = v16[5];
LABEL_46:
  md::LabelsLogic::setWorldType(v20, 2u);
}

void md::MuninMapEngineConfiguration::createRenderLayers(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  float v4 = operator new(0x28uLL);
  a2[1] = (char *)v4 + 40;
  a2[2] = (char *)v4 + 40;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  *((void *)v4 + 4) = 0;
  *a2 = v4;
  uint64_t v5 = *(void *)(a1 + 1120);
  unint64_t v6 = *(void *)(v5 + 16);
  if ((v6 & (v6 - 1)) != 0)
  {
    unint64_t v8 = 0x3F812BA5755E8568;
    if (v6 <= 0x3F812BA5755E8568) {
      unint64_t v8 = 0x3F812BA5755E8568 % v6;
    }
    uint64_t v7 = *(void **)(*(void *)(v5 + 8) + 8 * v8);
    do
    {
      do
        uint64_t v7 = (void *)*v7;
      while (v7[1] != 0x3F812BA5755E8568);
    }
    while (v7[2] != 0x3F812BA5755E8568);
  }
  else
  {
    uint64_t v7 = *(void **)(*(void *)(v5 + 8) + 8 * ((v6 - 1) & 0x3F812BA5755E8568));
    do
    {
      do
        uint64_t v7 = (void *)*v7;
      while (v7[1] != 0x3F812BA5755E8568);
    }
    while (v7[2] != 0x3F812BA5755E8568);
  }
  *(id *)(v7[5] + 128);
  int8x8_t v9 = *(int8x8_t *)(v5 + 16);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      uint64_t v11 = 0x20A1ED17D78F322BLL;
      if (*(void *)&v9 <= 0x20A1ED17D78F322BuLL) {
        uint64_t v11 = 0x20A1ED17D78F322BuLL % *(void *)&v9;
      }
    }
    else
    {
      uint64_t v11 = (*(void *)&v9 - 1) & 0x20A1ED17D78F322BLL;
    }
    uint64_t v12 = *(void **)(*(void *)(v5 + 8) + 8 * v11);
    if (v12)
    {
      uint8x8_t v13 = (void *)*v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          uint64_t v14 = *(void *)&v9 - 1;
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == 0x20A1ED17D78F322BLL)
            {
              if (v13[2] == 0x20A1ED17D78F322BLL) {
                goto LABEL_31;
              }
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_31;
            }
            uint8x8_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v13[1];
          if (v15 == 0x20A1ED17D78F322BLL)
          {
            if (v13[2] == 0x20A1ED17D78F322BLL) {
              break;
            }
          }
          else
          {
            if (v15 >= *(void *)&v9) {
              v15 %= *(void *)&v9;
            }
            if (v15 != v11) {
              break;
            }
          }
          uint8x8_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  operator new();
}

void sub_1A1E958A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v25 = *(void *)(v23 - 168);
  if (v25 == v22)
  {
    (*(void (**)(uint64_t))(*(void *)(v23 - 192) + 32))(v23 - 192);
  }
  else if (v25)
  {
    (*(void (**)(uint64_t))(*(void *)v25 + 40))(v25);
  }

  double v26 = (uint64_t *)v20[8];
  v20[8] = 0;
  if (v26) {
    std::default_delete<md::MuninLabelTileCache>::operator()[abi:nn180100](v26);
  }
  long long v27 = (std::__shared_weak_count *)v20[7];
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  void *v20 = v21;
  long long v28 = (void *)v20[1];
  if (v28)
  {
    void v20[2] = v28;
    operator delete(v28);
  }
  MEMORY[0x1A6239270](v20, 0x10A1C40E41433FALL);

  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](a11);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](void *a1)
{
  id v2 = (void *)*a1;
  if (*a1)
  {
    int8x8_t v3 = (void *)a1[1];
    float v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *int8x8_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      float v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::MuninMapEngineConfiguration::createPassList(md::MuninMapEngineConfiguration *this, md::FrameGraphResourceRegistry *a2)
{
}

void sub_1A1E96AC0(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10E1C4051B6CCAFLL);
  _Unwind_Resume(a1);
}

void md::MuninMapEngineConfiguration::~MuninMapEngineConfiguration(md::MuninMapEngineConfiguration *this)
{
  *(void *)this = &unk_1EF5416A8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF5416A8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::createFeatureAttributeSet(md *this, const GEOStyleAttributes *a2)
{
  double v26 = this;
  long long v27 = a2;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v2 = gss::Allocator::instance(v27);
  uint64_t v31 = v2;
  if (v27)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    for (unint64_t i = 0; ; ++i)
    {
      if (i >= [(GEOStyleAttributes *)v27 attributesCount]) {
        goto LABEL_34;
      }
      uint64_t v7 = [(GEOStyleAttributes *)v27 attributeAtIndex:i];
      int v8 = [v7 key];
      __int16 v9 = [v7 value];
      __int16 v10 = v9;
      if (v5 < v4)
      {
        if (v5)
        {
          *(_DWORD *)unint64_t v5 = v8;
          *(_WORD *)(v5 + 4) = v9;
        }
        v5 += 8;
        goto LABEL_4;
      }
      uint64_t v11 = (uint64_t)(v5 - v3) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      if ((uint64_t)(v4 - v3) >> 2 > v12) {
        unint64_t v12 = (uint64_t)(v4 - v3) >> 2;
      }
      if (v4 - v3 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v13 = v12;
      }
      if (v13)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 8 * v13, 4);
        uint64_t v15 = v14 + 8 * v11;
        uint64_t v13 = v14 + 8 * v13;
        if (v14)
        {
          *(_DWORD *)uint64_t v15 = v8;
          *(_WORD *)(v15 + 4) = v10;
        }
        unint64_t v16 = v5 - v3;
        if (v5 == v3)
        {
LABEL_26:
          uint64_t v24 = v15;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v15 = 8 * v11;
        unint64_t v16 = v5 - v3;
        if (v5 == v3) {
          goto LABEL_26;
        }
      }
      unint64_t v17 = v16 - 8;
      if (v17 < 0x38 || v5 - v15 < 0x20)
      {
        unint64_t v19 = v5;
        uint64_t v24 = v15;
        do
        {
LABEL_28:
          uint64_t v25 = *(void *)(v19 - 8);
          v19 -= 8;
          *(void *)(v24 - 8) = v25;
          v24 -= 8;
        }
        while (v19 != v3);
        unint64_t v4 = v30;
        goto LABEL_30;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      unint64_t v19 = v5 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v20 = (_OWORD *)(v15 - 16);
      uint64_t v21 = (long long *)(v5 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      uint64_t v24 = v15 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_28;
      }
LABEL_30:
      unint64_t v5 = v15 + 8;
      uint64_t v28 = v24;
      uint64_t v30 = v13;
      if (v3) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 40))(v2, v3, v4 - v3);
      }
      uint64_t v3 = v24;
      unint64_t v4 = v13;
LABEL_4:
      unint64_t v29 = v5;
    }
  }
  unint64_t v4 = 0;
LABEL_34:
  gss::FeatureAttributeSet::FeatureAttributeSet(v26, (uint64_t)&v28);
  if (v28) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 40))(v31, v28, v4 - v28);
  }
}

void sub_1A1E96ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, a11, v14 - a11);
  }

  _Unwind_Resume(a1);
}

uint64_t md::ARMeshRenderLayer::layoutWithoutStyles(md::ARMeshRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ARMeshRenderLayer *, const md::LayoutContext *))(*(void *)this + 16))(this, a2);
}

void *md::ARMeshRenderLayer::prune(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)result[54];
  unint64_t v4 = (void **)*v2;
  uint64_t v3 = (void **)v2[1];
  if ((void **)*v2 != v3)
  {
    do
    {
      uint64_t result = *v4;
      if (*v4)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        uint64_t v3 = (void **)v2[1];
      }
      ++v4;
    }
    while (v4 != v3);
    unint64_t v4 = (void **)*v2;
  }
  v2[1] = v4;
  unint64_t v5 = (void *)v1[9];
  uint64_t v7 = (void **)*v5;
  uint64_t v6 = (void **)v5[1];
  if ((void **)*v5 != v6)
  {
    do
    {
      uint64_t result = *v7;
      if (*v7)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        uint64_t v6 = (void **)v5[1];
      }
      ++v7;
    }
    while (v7 != v6);
    uint64_t v7 = (void **)*v5;
  }
  v5[1] = v7;
  int v8 = (void *)v1[10];
  __int16 v10 = (void **)*v8;
  __int16 v9 = (void **)v8[1];
  if ((void **)*v8 != v9)
  {
    do
    {
      uint64_t result = *v10;
      if (*v10)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        __int16 v9 = (void **)v8[1];
      }
      ++v10;
    }
    while (v10 != v9);
    __int16 v10 = (void **)*v8;
  }
  v8[1] = v10;
  uint64_t v11 = (void *)v1[8];
  uint64_t v13 = (void **)*v11;
  unint64_t v12 = (void **)v11[1];
  if ((void **)*v11 != v12)
  {
    do
    {
      uint64_t result = *v13;
      if (*v13)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        unint64_t v12 = (void **)v11[1];
      }
      ++v13;
    }
    while (v13 != v12);
    uint64_t v13 = (void **)*v11;
  }
  v11[1] = v13;
  return result;
}

unint64_t md::ARMeshRenderLayer::clearScene(md::ARMeshRenderLayer *this, uint64_t a2, uint64_t a3, ggl::TextureCube *a4)
{
  return detachEnvironmentTexture(*((int8x8_t **)this + 55), *((int8x8_t **)this + 55), *((gdc::Registry **)this + 58), a4);
}

unint64_t detachEnvironmentTexture(int8x8_t *a1, int8x8_t *a2, gdc::Registry *a3, ggl::TextureCube *a4)
{
  uint64_t v7 = (void *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(a1);
  uint64_t v8 = v7[7];
  uint64_t v9 = v7[8];
  if (v8 != v9)
  {
    __int16 v10 = (uint64_t *)(v7[10] + 8);
    do
    {
      uint64_t v11 = *v10;
      if (*v10 && *(void *)(v11 + 24))
      {
        unint64_t v12 = *(std::__shared_weak_count **)(v11 + 16);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        ++*(_DWORD *)(v11 + 32);
      }
      v8 += 8;
      v10 += 3;
    }
    while (v8 != v9);
  }
  uint64_t v13 = (void *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(a1);
  uint64_t v14 = v13;
  if (!v13[29] || (uint64_t v15 = (void *)v13[28]) == 0)
  {
LABEL_15:
    v14[8] = v14[7];
    uint64_t v20 = v14[10];
    for (uint64_t i = v14[11]; i != v20; i -= 24)
    {
      uint64_t v22 = *(std::__shared_weak_count **)(i - 8);
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v14[11] = v20;
    long long v23 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(a2);
    uint64_t v24 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(a2);
    unint64_t result = gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(a2);
    double v26 = (void *)result;
    unint64_t v27 = result + 32;
    unint64_t v29 = (unint64_t *)v23[7];
    uint64_t v28 = (uint64_t *)v23[8];
    if (v24[8] - v24[7] >= (unint64_t)((char *)v28 - (char *)v29)) {
      uint64_t v30 = v23 + 4;
    }
    else {
      uint64_t v30 = v24 + 4;
    }
    if (*(void *)(result + 64) - *(void *)(result + 56) >= v30[4] - v30[3]) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = (void *)(result + 32);
    }
    if (v23 + 4 != v31 || v29 == (unint64_t *)v28)
    {
LABEL_32:
      if (v24 + 4 == v31)
      {
        long long v33 = (unint64_t *)v24[7];
        long long v34 = (uint64_t *)v24[8];
        if (v33 != (unint64_t *)v34)
        {
          uint64_t v35 = v24[10];
          do
          {
            unint64_t v71 = *((unsigned int *)v33 + 1);
            unint64_t v72 = v71 >> 7;
            uint64_t v73 = v23[4];
            if (v71 >> 7 < (v23[5] - v73) >> 3)
            {
              uint64_t v74 = *(void *)(v73 + 8 * v72);
              if (v74)
              {
                unint64_t v75 = *(unsigned __int16 *)(v74 + 2 * (v71 & 0x7F));
                uint64_t v77 = v23[7];
                uint64_t v76 = v23[8];
                if (v75 < (v76 - v77) >> 3)
                {
                  uint64_t v78 = v77 + 8 * v75;
                  if (v78 != v76 && *(_DWORD *)(v78 + 4) == v71)
                  {
                    uint64_t v80 = v26[4];
                    unint64_t v81 = (v26[5] - v80) >> 3;
                    if (v72 < v81)
                    {
                      uint64_t v82 = *(void *)(v80 + 8 * v72);
                      if (v82)
                      {
                        unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (v71 & 0x7F));
                        uint64_t v85 = v26[7];
                        uint64_t v84 = v26[8];
                        unint64_t v86 = (v84 - v85) >> 3;
                        if (v86 > v83)
                        {
                          uint64_t v87 = v85 + 8 * v83;
                          if (v87 != v84 && *(_DWORD *)(v87 + 4) == v71)
                          {
                            unint64_t v89 = *v33;
                            unint64_t v90 = *v33 >> 39;
                            if (v90 < v81
                              && (uint64_t v91 = *(void *)(v80 + 8 * v90)) != 0
                              && (unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * (HIDWORD(v89) & 0x7F)), v86 > v92)
                              && ((unint64_t v93 = HIDWORD(v89), v94 = v85 + 8 * v92, v94 != v84)
                                ? (BOOL v95 = *(_DWORD *)(v94 + 4) == v93)
                                : (BOOL v95 = 0),
                                  v95))
                            {
                              unint64_t v70 = (void *)(v26[10] + 8 * v92);
                            }
                            else
                            {
                              unint64_t v70 = (void *)v26[11];
                            }
                            unint64_t result = (**(uint64_t (***)(void, uint64_t, gdc::Registry *))*v70)(*v70, v35, a3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v35 += 8;
            ++v33;
          }
          while (v33 != (unint64_t *)v34);
        }
      }
      if ((void *)v27 == v31)
      {
        long long v36 = (unint64_t *)v26[7];
        long long v37 = (uint64_t *)v26[8];
        if (v36 != (unint64_t *)v37)
        {
          long long v38 = (void *)v26[10];
          do
          {
            unint64_t v97 = *((unsigned int *)v36 + 1);
            unint64_t v98 = v97 >> 7;
            uint64_t v99 = v23[4];
            if (v97 >> 7 < (v23[5] - v99) >> 3)
            {
              uint64_t v100 = *(void *)(v99 + 8 * v98);
              if (v100)
              {
                unint64_t v101 = *(unsigned __int16 *)(v100 + 2 * (v97 & 0x7F));
                uint64_t v103 = v23[7];
                uint64_t v102 = v23[8];
                if (v101 < (v102 - v103) >> 3)
                {
                  uint64_t v104 = v103 + 8 * v101;
                  if (v104 != v102 && *(_DWORD *)(v104 + 4) == v97)
                  {
                    uint64_t v106 = v24[4];
                    unint64_t v107 = (v24[5] - v106) >> 3;
                    if (v98 < v107)
                    {
                      uint64_t v108 = *(void *)(v106 + 8 * v98);
                      if (v108)
                      {
                        unint64_t v109 = *(unsigned __int16 *)(v108 + 2 * (v97 & 0x7F));
                        uint64_t v111 = v24[7];
                        uint64_t v110 = v24[8];
                        unint64_t v112 = (v110 - v111) >> 3;
                        if (v112 > v109)
                        {
                          uint64_t v113 = v111 + 8 * v109;
                          if (v113 != v110 && *(_DWORD *)(v113 + 4) == v97)
                          {
                            unint64_t v115 = *v36;
                            unint64_t v116 = *v36 >> 39;
                            if (v116 < v107
                              && (uint64_t v117 = *(void *)(v106 + 8 * v116)) != 0
                              && (unint64_t v118 = *(unsigned __int16 *)(v117 + 2 * (HIDWORD(v115) & 0x7F)), v112 > v118)
                              && ((unint64_t v119 = HIDWORD(v115), v120 = v111 + 8 * v118, v120 != v110)
                                ? (BOOL v121 = *(_DWORD *)(v120 + 4) == v119)
                                : (BOOL v121 = 0),
                                  v121))
                            {
                              uint64_t v96 = v24[10] + 8 * v118;
                            }
                            else
                            {
                              uint64_t v96 = v24[11];
                            }
                            unint64_t result = (**(uint64_t (***)(void, uint64_t, gdc::Registry *))*v38)(*v38, v96, a3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v38;
            ++v36;
          }
          while (v36 != (unint64_t *)v37);
        }
      }
      return result;
    }
    while (1)
    {
      unint64_t v40 = *((unsigned int *)v29 + 1);
      unint64_t v41 = v40 >> 7;
      uint64_t v42 = v24[4];
      unint64_t v43 = (v24[5] - v42) >> 3;
      if (v40 >> 7 >= v43) {
        goto LABEL_41;
      }
      uint64_t v44 = *(void *)(v42 + 8 * v41);
      if (!v44) {
        goto LABEL_41;
      }
      unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v40 & 0x7F));
      uint64_t v47 = v24[7];
      uint64_t v46 = v24[8];
      unint64_t result = (v46 - v47) >> 3;
      if (result <= v45) {
        goto LABEL_41;
      }
      uint64_t v48 = v47 + 8 * v45;
      if (v48 == v46 || *(_DWORD *)(v48 + 4) != v40) {
        goto LABEL_41;
      }
      uint64_t v50 = v26[4];
      unint64_t v51 = (v26[5] - v50) >> 3;
      if (v41 >= v51) {
        goto LABEL_41;
      }
      uint64_t v52 = *(void *)(v50 + 8 * v41);
      if (!v52) {
        goto LABEL_41;
      }
      unint64_t v53 = *(unsigned __int16 *)(v52 + 2 * (v40 & 0x7F));
      uint64_t v55 = v26[7];
      uint64_t v54 = v26[8];
      unint64_t v56 = (v54 - v55) >> 3;
      if (v56 <= v53) {
        goto LABEL_41;
      }
      uint64_t v57 = v55 + 8 * v53;
      if (v57 == v54 || *(_DWORD *)(v57 + 4) != v40) {
        goto LABEL_41;
      }
      unint64_t v59 = *v29;
      unint64_t v60 = HIDWORD(*v29);
      unint64_t v61 = *v29 >> 39;
      if (v61 < v43
        && (uint64_t v62 = *(void *)(v42 + 8 * v61)) != 0
        && (unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * (HIDWORD(v59) & 0x7F)), result > v63)
        && ((uint64_t v64 = v47 + 8 * v63, v64 != v46) ? (v65 = *(_DWORD *)(v64 + 4) == v60) : (v65 = 0), v65))
      {
        if (v61 >= v51) {
          goto LABEL_39;
        }
      }
      else if (v61 >= v51)
      {
        goto LABEL_39;
      }
      uint64_t v66 = *(void *)(v50 + 8 * v61);
      if (v66)
      {
        unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(v59) & 0x7F));
        if (v56 > v67)
        {
          uint64_t v68 = v55 + 8 * v67;
          if (v68 != v54 && *(_DWORD *)(v68 + 4) == v60)
          {
            double v39 = (uint64_t (****)(void))(v26[10] + 8 * v67);
            goto LABEL_40;
          }
        }
      }
LABEL_39:
      double v39 = (uint64_t (****)(void))v26[11];
LABEL_40:
      unint64_t result = (***v39)();
LABEL_41:
      if (++v29 == (unint64_t *)v28) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v16 = v13[31];
  uint64_t v17 = v13[7];
  uint64_t v18 = (v13[8] - v17) >> 3;
  while (1)
  {
    v124[0] = v17;
    v124[1] = v18;
    uint64_t v123 = v16;
    uint64_t v19 = v15[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v123, v124);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_15;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v122);
}

uint64_t gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(int8x8_t *a1)
{
  unint64_t v10 = 0xB98AEFC198486853;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB98AEFC198486853;
    if (*(void *)&v1 <= 0xB98AEFC198486853) {
      unint64_t v3 = 0xB98AEFC198486853 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB98AEFC198486853;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB98AEFC198486853)
      {
        if (v5[2] == 0xB98AEFC198486853) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB98AEFC198486853) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB98AEFC198486853) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E97974(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ContextEntity>(int8x8_t *a1)
{
  uint64_t v10 = 0x1D46EE08B2FE26F2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1D46EE08B2FE26F2;
    if (*(void *)&v1 <= 0x1D46EE08B2FE26F2uLL) {
      uint64_t v3 = 0x1D46EE08B2FE26F2uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1D46EE08B2FE26F2;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1D46EE08B2FE26F2)
      {
        if (v5[2] == 0x1D46EE08B2FE26F2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1D46EE08B2FE26F2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1D46EE08B2FE26F2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E97BE4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::PipelineInstanceToUse>(int8x8_t *a1)
{
  unint64_t v10 = 0x9E3ED38A72A73EF5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9E3ED38A72A73EF5;
    if (*(void *)&v1 <= 0x9E3ED38A72A73EF5) {
      unint64_t v3 = 0x9E3ED38A72A73EF5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9E3ED38A72A73EF5;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9E3ED38A72A73EF5)
      {
        if (v5[2] == 0x9E3ED38A72A73EF5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9E3ED38A72A73EF5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9E3ED38A72A73EF5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E97E54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(int8x8_t *a1)
{
  uint64_t v10 = 0x3B6041BC66626A0FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3B6041BC66626A0FLL;
    if (*(void *)&v1 <= 0x3B6041BC66626A0FuLL) {
      uint64_t v3 = 0x3B6041BC66626A0FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3B6041BC66626A0FLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3B6041BC66626A0FLL)
      {
        if (v5[2] == 0x3B6041BC66626A0FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3B6041BC66626A0FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3B6041BC66626A0FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E980C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ContextEntity>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::ContextEntity>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ContextEntity>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::ContextEntity>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  objc_storeStrong((id *)(v14 + 24 * v7), *(id *)(v15 - 24));
  uint64_t v17 = *(void *)(v15 - 16);
  uint64_t v16 = *(void *)(v15 - 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v14 + 24 * v7 + 8) = v17;
  uint64_t v18 = v14 + 24 * v7;
  uint64_t v19 = *(std::__shared_weak_count **)(v18 + 16);
  *(void *)(v18 + 16) = v16;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = a1[11];
  uint64_t v21 = *(std::__shared_weak_count **)(v20 - 8);
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  a1[11] = v20 - 24;
  uint64_t v22 = (void *)a1[28];
  if (!v22) {
    return 1;
  }
  uint64_t v23 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    uint64_t v26 = v23;
    uint64_t v24 = v22[6];
    if (!v24) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v24 + 48))(v24, &v26, v27);
    uint64_t v22 = (void *)*v22;
    if (!v22) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AREnvironmentProbeTexture>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,arComponents::AREnvironmentProbeTexture>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }

        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void md::ARMeshRenderLayer::layout(uint64_t **this, const md::LayoutContext *a2)
{
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[54]);
  v2817 = (md::ARMeshRenderLayer *)this;
  uint64_t v3 = this[9];
  uint64_t v4 = (uint64_t *)v3[4];
  uint64_t v5 = (uint64_t *)v3[5];
  if (v4 == v5) {
    goto LABEL_33;
  }
  uint64_t v6 = (void *)v3[1];
  do
  {
    uint64_t v7 = *v4;
    unint64_t v8 = v3[2];
    if ((unint64_t)v6 < v8)
    {
      if (v6) {
        *uint64_t v6 = v7;
      }
      ++v6;
      goto LABEL_4;
    }
    uint64_t v9 = ((uint64_t)v6 - *v3) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
LABEL_2927:
    }
      abort();
    uint64_t v10 = v8 - *v3;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[3] + 16))(v3[3], 8 * v12, 8);
      uint64_t v15 = (void *)(v14 + 8 * v9);
      uint64_t v12 = v14 + v13;
      if (v14) {
        void *v15 = v7;
      }
    }
    else
    {
      uint64_t v15 = (void *)(8 * v9);
    }
    uint64_t v17 = *v3;
    uint64_t v16 = v3[1];
    uint64_t v18 = v16 - *v3;
    if (v16 == *v3)
    {
      uint64_t v20 = v15;
      goto LABEL_29;
    }
    unint64_t v19 = v18 - 8;
    if ((unint64_t)(v18 - 8) < 0x38)
    {
      uint64_t v20 = v15;
    }
    else
    {
      uint64_t v20 = v15;
      if ((unint64_t)(v16 - (void)v15) >= 0x20)
      {
        uint64_t v21 = (v19 >> 3) + 1;
        uint64_t v22 = v15 - 2;
        uint64_t v23 = (long long *)(v16 - 16);
        uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          _OWORD *v22 = v25;
          v22 -= 2;
          v23 -= 2;
          v24 -= 4;
        }
        while (v24);
        uint64_t v20 = &v15[-(v21 & 0x3FFFFFFFFFFFFFFCLL)];
        v16 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    do
    {
      uint64_t v26 = *(void *)(v16 - 8);
      v16 -= 8;
      *--uint64_t v20 = v26;
    }
    while (v16 != v17);
LABEL_28:
    uint64_t v16 = *v3;
LABEL_29:
    uint64_t v6 = v15 + 1;
    *uint64_t v3 = (uint64_t)v20;
    v3[1] = (uint64_t)(v15 + 1);
    uint64_t v27 = v3[2];
    unsigned char v3[2] = v12;
    if (v16) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[3] + 40))(v3[3], v16, v27 - v16);
    }
LABEL_4:
    v3[1] = (uint64_t)v6;
    ++v4;
  }
  while (v4 != v5);
  uint64_t v28 = v3[4];
  if (v28 != v3[5]) {
    v3[5] = v28;
  }
LABEL_33:
  unint64_t v29 = (uint64_t *)*((void *)v2817 + 10);
  uint64_t v30 = (uint64_t *)v29[4];
  uint64_t v31 = (uint64_t *)v29[5];
  if (v30 == v31) {
    goto LABEL_65;
  }
  long long v32 = (void *)v29[1];
  while (2)
  {
    uint64_t v33 = *v30;
    unint64_t v34 = v29[2];
    if ((unint64_t)v32 < v34)
    {
      if (v32) {
        *long long v32 = v33;
      }
      ++v32;
      goto LABEL_36;
    }
    uint64_t v35 = ((uint64_t)v32 - *v29) >> 3;
    if ((unint64_t)(v35 + 1) >> 61) {
      goto LABEL_2927;
    }
    uint64_t v36 = v34 - *v29;
    uint64_t v37 = v36 >> 2;
    if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
      uint64_t v37 = v35 + 1;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v38 = v37;
    }
    if (v38)
    {
      uint64_t v39 = 8 * v38;
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29[3] + 16))(v29[3], 8 * v38, 8);
      unint64_t v41 = (void *)(v40 + 8 * v35);
      uint64_t v38 = v40 + v39;
      if (v40) {
        *unint64_t v41 = v33;
      }
    }
    else
    {
      unint64_t v41 = (void *)(8 * v35);
    }
    uint64_t v43 = *v29;
    uint64_t v42 = v29[1];
    uint64_t v44 = v42 - *v29;
    if (v42 == *v29)
    {
      uint64_t v46 = v41;
      goto LABEL_61;
    }
    unint64_t v45 = v44 - 8;
    if ((unint64_t)(v44 - 8) < 0x38)
    {
      uint64_t v46 = v41;
      do
      {
LABEL_59:
        uint64_t v52 = *(void *)(v42 - 8);
        v42 -= 8;
        *--uint64_t v46 = v52;
      }
      while (v42 != v43);
      goto LABEL_60;
    }
    uint64_t v46 = v41;
    if ((unint64_t)(v42 - (void)v41) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v47 = (v45 >> 3) + 1;
    uint64_t v48 = v41 - 2;
    long long v49 = (long long *)(v42 - 16);
    uint64_t v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v51 = *v49;
      *(v48 - 1) = *(v49 - 1);
      _OWORD *v48 = v51;
      v48 -= 2;
      v49 -= 2;
      v50 -= 4;
    }
    while (v50);
    uint64_t v46 = &v41[-(v47 & 0x3FFFFFFFFFFFFFFCLL)];
    v42 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v42 = *v29;
LABEL_61:
    long long v32 = v41 + 1;
    *unint64_t v29 = (uint64_t)v46;
    v29[1] = (uint64_t)(v41 + 1);
    uint64_t v53 = v29[2];
    v29[2] = v38;
    if (v42) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29[3] + 40))(v29[3], v42, v53 - v42);
    }
LABEL_36:
    v29[1] = (uint64_t)v32;
    if (++v30 != v31) {
      continue;
    }
    break;
  }
  uint64_t v54 = v29[4];
  if (v54 != v29[5]) {
    v29[5] = v54;
  }
LABEL_65:
  uint64_t v55 = (uint64_t *)*((void *)v2817 + 8);
  unint64_t v56 = (uint64_t *)v55[4];
  uint64_t v57 = (uint64_t *)v55[5];
  if (v56 != v57)
  {
    long long v58 = (void *)v55[1];
    while (1)
    {
      uint64_t v59 = *v56;
      unint64_t v60 = v55[2];
      if ((unint64_t)v58 >= v60) {
        break;
      }
      if (v58) {
        void *v58 = v59;
      }
      ++v58;
LABEL_68:
      v55[1] = (uint64_t)v58;
      if (++v56 == v57)
      {
        uint64_t v80 = v55[4];
        if (v80 != v55[5]) {
          v55[5] = v80;
        }
        goto LABEL_97;
      }
    }
    uint64_t v61 = ((uint64_t)v58 - *v55) >> 3;
    if ((unint64_t)(v61 + 1) >> 61) {
      goto LABEL_2927;
    }
    uint64_t v62 = v60 - *v55;
    uint64_t v63 = v62 >> 2;
    if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
      uint64_t v63 = v61 + 1;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v64 = v63;
    }
    if (v64)
    {
      uint64_t v65 = 8 * v64;
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55[3] + 16))(v55[3], 8 * v64, 8);
      unint64_t v67 = (void *)(v66 + 8 * v61);
      uint64_t v64 = v66 + v65;
      if (v66) {
        void *v67 = v59;
      }
    }
    else
    {
      unint64_t v67 = (void *)(8 * v61);
    }
    uint64_t v69 = *v55;
    uint64_t v68 = v55[1];
    uint64_t v70 = v68 - *v55;
    if (v68 != *v55)
    {
      unint64_t v71 = v70 - 8;
      if ((unint64_t)(v70 - 8) < 0x38)
      {
        unint64_t v72 = v67;
      }
      else
      {
        unint64_t v72 = v67;
        if ((unint64_t)(v68 - (void)v67) >= 0x20)
        {
          uint64_t v73 = (v71 >> 3) + 1;
          uint64_t v74 = v67 - 2;
          unint64_t v75 = (long long *)(v68 - 16);
          uint64_t v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v77 = *v75;
            *(v74 - 1) = *(v75 - 1);
            *uint64_t v74 = v77;
            v74 -= 2;
            v75 -= 2;
            v76 -= 4;
          }
          while (v76);
          unint64_t v72 = &v67[-(v73 & 0x3FFFFFFFFFFFFFFCLL)];
          v68 -= 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
          if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_92:
            uint64_t v68 = *v55;
LABEL_93:
            long long v58 = v67 + 1;
            *uint64_t v55 = (uint64_t)v72;
            v55[1] = (uint64_t)(v67 + 1);
            uint64_t v79 = v55[2];
            v55[2] = v64;
            if (v68) {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55[3] + 40))(v55[3], v68, v79 - v68);
            }
            goto LABEL_68;
          }
        }
      }
      do
      {
        uint64_t v78 = *(void *)(v68 - 8);
        v68 -= 8;
        *--unint64_t v72 = v78;
      }
      while (v68 != v69);
      goto LABEL_92;
    }
    unint64_t v72 = v67;
    goto LABEL_93;
  }
LABEL_97:
  float64_t v2812 = *(double *)(*((void *)v2817 + 5) + 24);
  unint64_t v81 = *(void **)(*(void *)&v2812 + 8);
  uint64_t v82 = v81[3];
  uint64_t v83 = v81[4];
  uint64_t v84 = v83 - v82;
  if (v83 == v82) {
    goto LABEL_104;
  }
  uint64_t v85 = 0;
  unint64_t v86 = v84 >> 3;
  while (1)
  {
    uint64_t v87 = *(void *)(v82 + 8 * v85);
    if (!*(unsigned char *)v87)
    {
      unint64_t v88 = *(void *)(v87 + 8);
      uint64_t v89 = v81[15];
      if (v88 < (v81[16] - v89) >> 3) {
        break;
      }
    }
    if (++v85 >= v86) {
      goto LABEL_104;
    }
  }
  uint64_t v90 = *(void *)(v89 + 8 * v88);
  if (!v90) {
LABEL_104:
  }
    uint64_t v2800 = 0;
  else {
    uint64_t v2800 = *(void *)(*(void *)(v90 + 24) + 56);
  }
  v2818 = (unint64_t *)v2821;
  v2819 = (unint64_t *)v2821;
  unint64_t v2820 = 4;
  uint64_t v91 = gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*((int8x8_t **)v2817 + 55));
  unint64_t v92 = *(unint64_t **)(v91 + 56);
  unint64_t v93 = *(unint64_t **)(v91 + 64);
  uint64_t v94 = (unint64_t *)v2821;
  if (v92 != v93)
  {
    while (2)
    {
      unint64_t v95 = *v92;
      uint64_t v96 = v94 - v2818;
      if (v2820 < v96 + 1)
      {
        unint64_t v97 = (1 << -(char)__clz(v2820 + 1));
        if (v2820 >= 0xFFFFFFFFFFFFFFFELL) {
          unint64_t v98 = 1;
        }
        else {
          unint64_t v98 = v97;
        }
        if (v98 <= v96 + 1) {
          uint64_t v99 = v96 + 1;
        }
        else {
          uint64_t v99 = v98;
        }
        uint64_t v100 = (char *)malloc_type_malloc(8 * v99, 0x100004000313F17uLL);
        unint64_t v101 = (unint64_t *)v100;
        uint64_t v102 = v2818;
        if (v2818 != v2819)
        {
          unint64_t v103 = (char *)v2819 - (char *)v2818 - 8;
          if (v103 < 0x18)
          {
            uint64_t v104 = v100;
            goto LABEL_124;
          }
          uint64_t v104 = v100;
          if ((unint64_t)(v100 - (char *)v2818) < 0x20)
          {
            do
            {
LABEL_124:
              uint64_t v111 = *v102++;
              *(void *)uint64_t v104 = v111;
              v104 += 8;
            }
            while (v102 != v2819);
          }
          else
          {
            uint64_t v105 = (v103 >> 3) + 1;
            uint64_t v106 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v104 = &v100[v106 * 8];
            unint64_t v107 = (long long *)(v2818 + 2);
            uint64_t v108 = v100 + 16;
            uint64_t v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v110 = *v107;
              *(v108 - 1) = *(v107 - 1);
              *uint64_t v108 = v110;
              v107 += 2;
              v108 += 2;
              v109 -= 4;
            }
            while (v109);
            if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
            {
              uint64_t v102 = &v2818[v106];
              goto LABEL_124;
            }
          }
        }
        if (v2818 != (unint64_t *)v2821) {
          free(v2818);
        }
        uint64_t v94 = &v101[v96];
        v2818 = v101;
        v2819 = v94;
        unint64_t v2820 = v99;
      }
      *uint64_t v94 = v95;
      uint64_t v94 = ++v2819;
      if (++v92 == v93) {
        break;
      }
      continue;
    }
  }
  unint64_t v112 = v2818;
  uint64_t v113 = (int8x8_t *)*((void *)v2817 + 55);
  if (v2818 != v94)
  {
    do
    {
      unint64_t v114 = *v112++;
      gdc::Registry::destroy((uint64_t)v113, v114);
    }
    while (v112 != v94);
    uint64_t v113 = (int8x8_t *)*((void *)v2817 + 55);
  }
  unint64_t v115 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v113);
  unint64_t v116 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v113);
  uint64_t v117 = (void *)gdc::Registry::storage<arComponents::Boundary>(v113);
  unint64_t v118 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v113);
  unint64_t v119 = (void *)gdc::Registry::storage<arComponents::StandardPipeline>(v113);
  uint64_t v120 = v119;
  uint64_t v122 = v115[7];
  uint64_t v121 = v115[8];
  if (v116[8] - v116[7] >= (unint64_t)(v121 - v122)) {
    uint64_t v123 = v115 + 4;
  }
  else {
    uint64_t v123 = v116 + 4;
  }
  if (v117[8] - v117[7] < v123[4] - v123[3]) {
    uint64_t v123 = v117 + 4;
  }
  v2803 = v119 + 4;
  if (v118[8] - v118[7] < v123[4] - v123[3]) {
    uint64_t v123 = v118 + 4;
  }
  if (v119[8] - v119[7] >= v123[4] - v123[3]) {
    uint64_t v124 = v123;
  }
  else {
    uint64_t v124 = v119 + 4;
  }
  if (v115 + 4 == v124 && v122 != v121)
  {
    do
    {
      unint64_t v2323 = *(unsigned int *)(v122 + 4);
      unint64_t v2324 = v2323 >> 7;
      uint64_t v2325 = v116[4];
      unint64_t v2326 = (v116[5] - v2325) >> 3;
      if (v2323 >> 7 < v2326)
      {
        uint64_t v2327 = *(void *)(v2325 + 8 * v2324);
        if (v2327)
        {
          uint64_t v2328 = v2323 & 0x7F;
          unint64_t v2329 = *(unsigned __int16 *)(v2327 + 2 * v2328);
          uint64_t v2331 = v116[7];
          uint64_t v2330 = v116[8];
          if ((v2330 - v2331) >> 3 > v2329)
          {
            uint64_t v2332 = v2331 + 8 * v2329;
            if (v2332 != v2330 && *(_DWORD *)(v2332 + 4) == v2323)
            {
              uint64_t v2334 = v117[4];
              unint64_t v2335 = (v117[5] - v2334) >> 3;
              if (v2324 < v2335)
              {
                uint64_t v2336 = *(void *)(v2334 + 8 * v2324);
                if (v2336)
                {
                  unint64_t v2337 = *(unsigned __int16 *)(v2336 + 2 * v2328);
                  uint64_t v2339 = v117[7];
                  uint64_t v2338 = v117[8];
                  if ((v2338 - v2339) >> 3 > v2337)
                  {
                    uint64_t v2340 = v2339 + 8 * v2337;
                    if (v2340 != v2338 && *(_DWORD *)(v2340 + 4) == v2323)
                    {
                      uint64_t v2342 = v118[4];
                      if (v2324 < (v118[5] - v2342) >> 3)
                      {
                        uint64_t v2343 = *(void *)(v2342 + 8 * v2324);
                        if (v2343)
                        {
                          unint64_t v2344 = *(unsigned __int16 *)(v2343 + 2 * v2328);
                          uint64_t v2346 = v118[7];
                          uint64_t v2345 = v118[8];
                          if (v2344 < (v2345 - v2346) >> 3)
                          {
                            uint64_t v2347 = v2346 + 8 * v2344;
                            if (v2347 != v2345 && *(_DWORD *)(v2347 + 4) == v2323)
                            {
                              uint64_t v2349 = v119[4];
                              if (v2324 < (v119[5] - v2349) >> 3)
                              {
                                uint64_t v2350 = *(void *)(v2349 + 8 * v2324);
                                if (v2350)
                                {
                                  unint64_t v2351 = *(unsigned __int16 *)(v2350 + 2 * v2328);
                                  uint64_t v2353 = v119[7];
                                  uint64_t v2352 = v119[8];
                                  if (v2351 < (v2352 - v2353) >> 3)
                                  {
                                    uint64_t v2354 = v2353 + 8 * v2351;
                                    if (v2354 != v2352 && *(_DWORD *)(v2354 + 4) == v2323) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v122 += 8;
    }
    while (v122 != v121);
  }
  if (v116 + 4 == v124)
  {
    uint64_t v262 = v116[7];
    uint64_t v263 = v116[8];
    if (v262 != v263)
    {
      uint64_t v264 = v116[10];
      do
      {
        unint64_t v2419 = *(unsigned int *)(v262 + 4);
        unint64_t v2420 = v2419 >> 7;
        uint64_t v2421 = v115[4];
        if (v2419 >> 7 < (v115[5] - v2421) >> 3)
        {
          uint64_t v2422 = *(void *)(v2421 + 8 * v2420);
          if (v2422)
          {
            uint64_t v2423 = v2419 & 0x7F;
            unint64_t v2424 = *(unsigned __int16 *)(v2422 + 2 * v2423);
            uint64_t v2426 = v115[7];
            uint64_t v2425 = v115[8];
            if (v2424 < (v2425 - v2426) >> 3)
            {
              uint64_t v2427 = v2426 + 8 * v2424;
              if (v2427 != v2425 && *(_DWORD *)(v2427 + 4) == v2419)
              {
                uint64_t v2429 = v117[4];
                unint64_t v2430 = (v117[5] - v2429) >> 3;
                if (v2420 < v2430)
                {
                  uint64_t v2431 = *(void *)(v2429 + 8 * v2420);
                  if (v2431)
                  {
                    unint64_t v2432 = *(unsigned __int16 *)(v2431 + 2 * v2423);
                    uint64_t v2434 = v117[7];
                    uint64_t v2433 = v117[8];
                    if ((v2433 - v2434) >> 3 > v2432)
                    {
                      uint64_t v2435 = v2434 + 8 * v2432;
                      if (v2435 != v2433 && *(_DWORD *)(v2435 + 4) == v2419)
                      {
                        uint64_t v2437 = v118[4];
                        if (v2420 < (v118[5] - v2437) >> 3)
                        {
                          uint64_t v2438 = *(void *)(v2437 + 8 * v2420);
                          if (v2438)
                          {
                            unint64_t v2439 = *(unsigned __int16 *)(v2438 + 2 * v2423);
                            uint64_t v2440 = v118[7];
                            uint64_t v2441 = v118[8];
                            if (v2439 < (v2441 - v2440) >> 3)
                            {
                              uint64_t v2442 = v2440 + 8 * v2439;
                              if (v2442 != v2441 && *(_DWORD *)(v2442 + 4) == v2419)
                              {
                                uint64_t v2444 = v120[4];
                                if (v2420 < (v120[5] - v2444) >> 3)
                                {
                                  uint64_t v2445 = *(void *)(v2444 + 8 * v2420);
                                  if (v2445)
                                  {
                                    unint64_t v2446 = *(unsigned __int16 *)(v2445 + 2 * v2423);
                                    uint64_t v2448 = v120[7];
                                    uint64_t v2447 = v120[8];
                                    if (v2446 < (v2447 - v2448) >> 3)
                                    {
                                      uint64_t v2449 = v2448 + 8 * v2446;
                                      if (v2449 != v2447 && *(_DWORD *)(v2449 + 4) == v2419) {
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v264 += 16;
        v262 += 8;
      }
      while (v262 != v263);
    }
  }
  if (v117 + 4 == v124)
  {
    uint64_t v265 = v117[7];
    uint64_t v266 = v117[8];
    if (v265 != v266)
    {
      uint64_t v267 = v117[10];
      do
      {
        unint64_t v2450 = *(unsigned int *)(v265 + 4);
        unint64_t v2451 = v2450 >> 7;
        uint64_t v2452 = v115[4];
        if (v2450 >> 7 < (v115[5] - v2452) >> 3)
        {
          uint64_t v2453 = *(void *)(v2452 + 8 * v2451);
          if (v2453)
          {
            uint64_t v2454 = v2450 & 0x7F;
            unint64_t v2455 = *(unsigned __int16 *)(v2453 + 2 * v2454);
            uint64_t v2457 = v115[7];
            uint64_t v2456 = v115[8];
            if (v2455 < (v2456 - v2457) >> 3)
            {
              uint64_t v2458 = v2457 + 8 * v2455;
              if (v2458 != v2456 && *(_DWORD *)(v2458 + 4) == v2450)
              {
                uint64_t v2460 = v116[4];
                unint64_t v2461 = (v116[5] - v2460) >> 3;
                if (v2451 < v2461)
                {
                  uint64_t v2462 = *(void *)(v2460 + 8 * v2451);
                  if (v2462)
                  {
                    unint64_t v2463 = *(unsigned __int16 *)(v2462 + 2 * v2454);
                    uint64_t v2465 = v116[7];
                    uint64_t v2464 = v116[8];
                    if ((v2464 - v2465) >> 3 > v2463)
                    {
                      uint64_t v2466 = v2465 + 8 * v2463;
                      if (v2466 != v2464 && *(_DWORD *)(v2466 + 4) == v2450)
                      {
                        uint64_t v2468 = v118[4];
                        if (v2451 < (v118[5] - v2468) >> 3)
                        {
                          uint64_t v2469 = *(void *)(v2468 + 8 * v2451);
                          if (v2469)
                          {
                            unint64_t v2470 = *(unsigned __int16 *)(v2469 + 2 * v2454);
                            uint64_t v2471 = v118[7];
                            uint64_t v2472 = v118[8];
                            if (v2470 < (v2472 - v2471) >> 3)
                            {
                              uint64_t v2473 = v2471 + 8 * v2470;
                              if (v2473 != v2472 && *(_DWORD *)(v2473 + 4) == v2450)
                              {
                                uint64_t v2475 = v120[4];
                                if (v2451 < (v120[5] - v2475) >> 3)
                                {
                                  uint64_t v2476 = *(void *)(v2475 + 8 * v2451);
                                  if (v2476)
                                  {
                                    unint64_t v2477 = *(unsigned __int16 *)(v2476 + 2 * v2454);
                                    uint64_t v2479 = v120[7];
                                    uint64_t v2478 = v120[8];
                                    if (v2477 < (v2478 - v2479) >> 3)
                                    {
                                      uint64_t v2480 = v2479 + 8 * v2477;
                                      if (v2480 != v2478 && *(_DWORD *)(v2480 + 4) == v2450) {
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v267 += 24;
        v265 += 8;
      }
      while (v265 != v266);
    }
  }
  if (v118 + 4 == v124)
  {
    uint64_t v268 = v118[7];
    for (uint64_t i = v118[8]; v268 != i; v268 += 8)
    {
      unint64_t v2481 = *(unsigned int *)(v268 + 4);
      unint64_t v2482 = v2481 >> 7;
      uint64_t v2483 = v115[4];
      if (v2481 >> 7 < (v115[5] - v2483) >> 3)
      {
        uint64_t v2484 = *(void *)(v2483 + 8 * v2482);
        if (v2484)
        {
          uint64_t v2485 = v2481 & 0x7F;
          unint64_t v2486 = *(unsigned __int16 *)(v2484 + 2 * v2485);
          uint64_t v2488 = v115[7];
          uint64_t v2487 = v115[8];
          if (v2486 < (v2487 - v2488) >> 3)
          {
            uint64_t v2489 = v2488 + 8 * v2486;
            if (v2489 != v2487 && *(_DWORD *)(v2489 + 4) == v2481)
            {
              uint64_t v2491 = v116[4];
              unint64_t v2492 = (v116[5] - v2491) >> 3;
              if (v2482 < v2492)
              {
                uint64_t v2493 = *(void *)(v2491 + 8 * v2482);
                if (v2493)
                {
                  unint64_t v2494 = *(unsigned __int16 *)(v2493 + 2 * v2485);
                  uint64_t v2496 = v116[7];
                  uint64_t v2495 = v116[8];
                  if ((v2495 - v2496) >> 3 > v2494)
                  {
                    uint64_t v2497 = v2496 + 8 * v2494;
                    if (v2497 != v2495 && *(_DWORD *)(v2497 + 4) == v2481)
                    {
                      uint64_t v2499 = v117[4];
                      unint64_t v2500 = (v117[5] - v2499) >> 3;
                      if (v2482 < v2500)
                      {
                        uint64_t v2501 = *(void *)(v2499 + 8 * v2482);
                        if (v2501)
                        {
                          unint64_t v2502 = *(unsigned __int16 *)(v2501 + 2 * v2485);
                          uint64_t v2504 = v117[7];
                          uint64_t v2503 = v117[8];
                          if ((v2503 - v2504) >> 3 > v2502)
                          {
                            uint64_t v2505 = v2504 + 8 * v2502;
                            if (v2505 != v2503 && *(_DWORD *)(v2505 + 4) == v2481)
                            {
                              uint64_t v2507 = v120[4];
                              if (v2482 < (v120[5] - v2507) >> 3)
                              {
                                uint64_t v2508 = *(void *)(v2507 + 8 * v2482);
                                if (v2508)
                                {
                                  unint64_t v2509 = *(unsigned __int16 *)(v2508 + 2 * v2485);
                                  uint64_t v2511 = v120[7];
                                  uint64_t v2510 = v120[8];
                                  if (v2509 < (v2510 - v2511) >> 3)
                                  {
                                    uint64_t v2512 = v2511 + 8 * v2509;
                                    if (v2512 != v2510 && *(_DWORD *)(v2512 + 4) == v2481) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2803 == v124)
  {
    uint64_t v270 = v120[7];
    for (uint64_t j = v120[8]; v270 != j; v270 += 8)
    {
      unint64_t v2513 = *(unsigned int *)(v270 + 4);
      unint64_t v2514 = v2513 >> 7;
      uint64_t v2515 = v115[4];
      if (v2513 >> 7 < (v115[5] - v2515) >> 3)
      {
        uint64_t v2516 = *(void *)(v2515 + 8 * v2514);
        if (v2516)
        {
          uint64_t v2517 = v2513 & 0x7F;
          unint64_t v2518 = *(unsigned __int16 *)(v2516 + 2 * v2517);
          uint64_t v2520 = v115[7];
          uint64_t v2519 = v115[8];
          if (v2518 < (v2519 - v2520) >> 3)
          {
            uint64_t v2521 = v2520 + 8 * v2518;
            if (v2521 != v2519 && *(_DWORD *)(v2521 + 4) == v2513)
            {
              uint64_t v2523 = v116[4];
              unint64_t v2524 = (v116[5] - v2523) >> 3;
              if (v2514 < v2524)
              {
                uint64_t v2525 = *(void *)(v2523 + 8 * v2514);
                if (v2525)
                {
                  unint64_t v2526 = *(unsigned __int16 *)(v2525 + 2 * v2517);
                  uint64_t v2528 = v116[7];
                  uint64_t v2527 = v116[8];
                  if ((v2527 - v2528) >> 3 > v2526)
                  {
                    uint64_t v2529 = v2528 + 8 * v2526;
                    if (v2529 != v2527 && *(_DWORD *)(v2529 + 4) == v2513)
                    {
                      uint64_t v2531 = v117[4];
                      unint64_t v2532 = (v117[5] - v2531) >> 3;
                      if (v2514 < v2532)
                      {
                        uint64_t v2533 = *(void *)(v2531 + 8 * v2514);
                        if (v2533)
                        {
                          unint64_t v2534 = *(unsigned __int16 *)(v2533 + 2 * v2517);
                          uint64_t v2536 = v117[7];
                          uint64_t v2535 = v117[8];
                          if ((v2535 - v2536) >> 3 > v2534)
                          {
                            uint64_t v2537 = v2536 + 8 * v2534;
                            if (v2537 != v2535 && *(_DWORD *)(v2537 + 4) == v2513)
                            {
                              uint64_t v2539 = v118[4];
                              if (v2514 < (v118[5] - v2539) >> 3)
                              {
                                uint64_t v2540 = *(void *)(v2539 + 8 * v2514);
                                if (v2540)
                                {
                                  unint64_t v2541 = *(unsigned __int16 *)(v2540 + 2 * v2517);
                                  uint64_t v2543 = v118[7];
                                  uint64_t v2542 = v118[8];
                                  if (v2541 < (v2542 - v2543) >> 3)
                                  {
                                    uint64_t v2544 = v2543 + 8 * v2541;
                                    if (v2544 != v2542 && *(_DWORD *)(v2544 + 4) == v2513) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  unint64_t v126 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v127 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v126);
  int v128 = (void *)gdc::Registry::storage<arComponents::MeshDataComponent>(v126);
  uint64_t v129 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v126);
  uint64_t v130 = gdc::Registry::storage<arComponents::StandardPipeline>(v126);
  uint64_t v131 = (void *)v130;
  uint64_t v132 = v130 + 32;
  uint64_t v134 = v127[7];
  uint64_t v133 = v127[8];
  if (v128[8] - v128[7] >= (unint64_t)(v133 - v134)) {
    unsigned int v135 = v127 + 4;
  }
  else {
    unsigned int v135 = v128 + 4;
  }
  if (v129[8] - v129[7] < v135[4] - v135[3]) {
    unsigned int v135 = v129 + 4;
  }
  if (*(void *)(v130 + 64) - *(void *)(v130 + 56) >= v135[4] - v135[3]) {
    float v136 = v135;
  }
  else {
    float v136 = (void *)(v130 + 32);
  }
  if (v127 + 4 == v136 && v134 != v133)
  {
    do
    {
      unint64_t v1470 = *(unsigned int *)(v134 + 4);
      unint64_t v1471 = v1470 >> 7;
      uint64_t v1472 = v128[4];
      unint64_t v1473 = (v128[5] - v1472) >> 3;
      if (v1470 >> 7 < v1473)
      {
        uint64_t v1474 = *(void *)(v1472 + 8 * v1471);
        if (v1474)
        {
          uint64_t v1475 = v1470 & 0x7F;
          unint64_t v1476 = *(unsigned __int16 *)(v1474 + 2 * v1475);
          uint64_t v1478 = v128[7];
          uint64_t v1477 = v128[8];
          unint64_t v1479 = (v1477 - v1478) >> 3;
          if (v1479 > v1476)
          {
            uint64_t v1480 = v1478 + 8 * v1476;
            if (v1480 != v1477 && *(_DWORD *)(v1480 + 4) == v1470)
            {
              uint64_t v1482 = v129[4];
              if (v1471 < (v129[5] - v1482) >> 3)
              {
                uint64_t v1483 = *(void *)(v1482 + 8 * v1471);
                if (v1483)
                {
                  unint64_t v1484 = *(unsigned __int16 *)(v1483 + 2 * v1475);
                  uint64_t v1485 = v129[7];
                  uint64_t v1486 = v129[8];
                  if (v1484 < (v1486 - v1485) >> 3)
                  {
                    uint64_t v1487 = v1485 + 8 * v1484;
                    if (v1487 != v1486 && *(_DWORD *)(v1487 + 4) == v1470)
                    {
                      uint64_t v1489 = v131[4];
                      if (v1471 < (v131[5] - v1489) >> 3)
                      {
                        uint64_t v1490 = *(void *)(v1489 + 8 * v1471);
                        if (v1490)
                        {
                          unint64_t v1491 = *(unsigned __int16 *)(v1490 + 2 * v1475);
                          uint64_t v1493 = v131[7];
                          uint64_t v1492 = v131[8];
                          if (v1491 < (v1492 - v1493) >> 3)
                          {
                            uint64_t v1494 = v1493 + 8 * v1491;
                            if (v1494 != v1492 && *(_DWORD *)(v1494 + 4) == v1470)
                            {
                              unint64_t v1496 = *(void *)v134;
                              unint64_t v1497 = *(void *)v134 >> 39;
                              if (v1497 < v1473
                                && (uint64_t v1498 = *(void *)(v1472 + 8 * v1497)) != 0
                                && (unint64_t v1499 = *(unsigned __int16 *)(v1498 + 2 * (HIDWORD(v1496) & 0x7F)), v1479 > v1499)
                                && (uint64_t v1500 = v1478 + 8 * v1499, v1500 != v1477)
                                && *(_DWORD *)(v1500 + 4) == HIDWORD(v1496))
                              {
                                v1469 = (uint64_t *)(v128[10] + 8 * v1499);
                              }
                              else
                              {
                                v1469 = (uint64_t *)v128[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1496, *v1469);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v134 += 8;
    }
    while (v134 != v133);
  }
  if (v128 + 4 == v136)
  {
    uint64_t v272 = v128[7];
    uint64_t v273 = v128[8];
    if (v272 != v273)
    {
      float v274 = (uint64_t *)v128[10];
      do
      {
        unint64_t v275 = *(unsigned int *)(v272 + 4);
        unint64_t v276 = v275 >> 7;
        uint64_t v277 = v127[4];
        if (v275 >> 7 < (v127[5] - v277) >> 3)
        {
          uint64_t v278 = *(void *)(v277 + 8 * v276);
          if (v278)
          {
            uint64_t v279 = v275 & 0x7F;
            unint64_t v280 = *(unsigned __int16 *)(v278 + 2 * v279);
            uint64_t v282 = v127[7];
            uint64_t v281 = v127[8];
            if (v280 < (v281 - v282) >> 3)
            {
              uint64_t v283 = v282 + 8 * v280;
              if (v283 != v281 && *(_DWORD *)(v283 + 4) == v275)
              {
                uint64_t v285 = v129[4];
                if (v276 < (v129[5] - v285) >> 3)
                {
                  uint64_t v286 = *(void *)(v285 + 8 * v276);
                  if (v286)
                  {
                    unint64_t v287 = *(unsigned __int16 *)(v286 + 2 * v279);
                    uint64_t v289 = v129[7];
                    uint64_t v288 = v129[8];
                    if (v287 < (v288 - v289) >> 3)
                    {
                      uint64_t v290 = v289 + 8 * v287;
                      if (v290 != v288 && *(_DWORD *)(v290 + 4) == v275)
                      {
                        uint64_t v292 = v131[4];
                        if (v276 < (v131[5] - v292) >> 3)
                        {
                          uint64_t v293 = *(void *)(v292 + 8 * v276);
                          if (v293)
                          {
                            unint64_t v294 = *(unsigned __int16 *)(v293 + 2 * v279);
                            uint64_t v296 = v131[7];
                            uint64_t v295 = v131[8];
                            if (v294 < (v295 - v296) >> 3)
                            {
                              uint64_t v297 = v296 + 8 * v294;
                              if (v297 != v295 && *(_DWORD *)(v297 + 4) == v275) {
                                md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, *(void *)v272, *v274);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v274;
        v272 += 8;
      }
      while (v272 != v273);
    }
  }
  if (v129 + 4 == v136)
  {
    uint64_t v299 = v129[7];
    uint64_t v300 = v129[8];
    while (v299 != v300)
    {
      unint64_t v1668 = *(unsigned int *)(v299 + 4);
      unint64_t v1669 = v1668 >> 7;
      uint64_t v1670 = v127[4];
      if (v1668 >> 7 < (v127[5] - v1670) >> 3)
      {
        uint64_t v1671 = *(void *)(v1670 + 8 * v1669);
        if (v1671)
        {
          uint64_t v1672 = v1668 & 0x7F;
          unint64_t v1673 = *(unsigned __int16 *)(v1671 + 2 * v1672);
          uint64_t v1675 = v127[7];
          uint64_t v1674 = v127[8];
          if (v1673 < (v1674 - v1675) >> 3)
          {
            uint64_t v1676 = v1675 + 8 * v1673;
            if (v1676 != v1674 && *(_DWORD *)(v1676 + 4) == v1668)
            {
              uint64_t v1678 = v128[4];
              unint64_t v1679 = (v128[5] - v1678) >> 3;
              if (v1669 < v1679)
              {
                uint64_t v1680 = *(void *)(v1678 + 8 * v1669);
                if (v1680)
                {
                  unint64_t v1681 = *(unsigned __int16 *)(v1680 + 2 * v1672);
                  uint64_t v1683 = v128[7];
                  uint64_t v1682 = v128[8];
                  unint64_t v1684 = (v1682 - v1683) >> 3;
                  if (v1684 > v1681)
                  {
                    uint64_t v1685 = v1683 + 8 * v1681;
                    if (v1685 != v1682 && *(_DWORD *)(v1685 + 4) == v1668)
                    {
                      uint64_t v1687 = v131[4];
                      if (v1669 < (v131[5] - v1687) >> 3)
                      {
                        uint64_t v1688 = *(void *)(v1687 + 8 * v1669);
                        if (v1688)
                        {
                          unint64_t v1689 = *(unsigned __int16 *)(v1688 + 2 * v1672);
                          uint64_t v1691 = v131[7];
                          uint64_t v1690 = v131[8];
                          if (v1689 < (v1690 - v1691) >> 3)
                          {
                            uint64_t v1692 = v1691 + 8 * v1689;
                            if (v1692 != v1690 && *(_DWORD *)(v1692 + 4) == v1668)
                            {
                              unint64_t v1694 = *(void *)v299;
                              unint64_t v1695 = *(void *)v299 >> 39;
                              if (v1695 < v1679
                                && (uint64_t v1696 = *(void *)(v1678 + 8 * v1695)) != 0
                                && (unint64_t v1697 = *(unsigned __int16 *)(v1696 + 2 * (HIDWORD(v1694) & 0x7F)), v1684 > v1697)
                                && (uint64_t v1698 = v1683 + 8 * v1697, v1698 != v1682)
                                && *(_DWORD *)(v1698 + 4) == HIDWORD(v1694))
                              {
                                v1667 = (uint64_t *)(v128[10] + 8 * v1697);
                              }
                              else
                              {
                                v1667 = (uint64_t *)v128[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1694, *v1667);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v299 += 8;
    }
  }
  if ((void *)v132 == v136)
  {
    uint64_t v301 = v131[7];
    uint64_t v302 = v131[8];
    while (v301 != v302)
    {
      unint64_t v1700 = *(unsigned int *)(v301 + 4);
      unint64_t v1701 = v1700 >> 7;
      uint64_t v1702 = v127[4];
      if (v1700 >> 7 < (v127[5] - v1702) >> 3)
      {
        uint64_t v1703 = *(void *)(v1702 + 8 * v1701);
        if (v1703)
        {
          uint64_t v1704 = v1700 & 0x7F;
          unint64_t v1705 = *(unsigned __int16 *)(v1703 + 2 * v1704);
          uint64_t v1707 = v127[7];
          uint64_t v1706 = v127[8];
          if (v1705 < (v1706 - v1707) >> 3)
          {
            uint64_t v1708 = v1707 + 8 * v1705;
            if (v1708 != v1706 && *(_DWORD *)(v1708 + 4) == v1700)
            {
              uint64_t v1710 = v128[4];
              unint64_t v1711 = (v128[5] - v1710) >> 3;
              if (v1701 < v1711)
              {
                uint64_t v1712 = *(void *)(v1710 + 8 * v1701);
                if (v1712)
                {
                  unint64_t v1713 = *(unsigned __int16 *)(v1712 + 2 * v1704);
                  uint64_t v1715 = v128[7];
                  uint64_t v1714 = v128[8];
                  unint64_t v1716 = (v1714 - v1715) >> 3;
                  if (v1716 > v1713)
                  {
                    uint64_t v1717 = v1715 + 8 * v1713;
                    if (v1717 != v1714 && *(_DWORD *)(v1717 + 4) == v1700)
                    {
                      uint64_t v1719 = v129[4];
                      if (v1701 < (v129[5] - v1719) >> 3)
                      {
                        uint64_t v1720 = *(void *)(v1719 + 8 * v1701);
                        if (v1720)
                        {
                          unint64_t v1721 = *(unsigned __int16 *)(v1720 + 2 * v1704);
                          uint64_t v1723 = v129[7];
                          uint64_t v1722 = v129[8];
                          if (v1721 < (v1722 - v1723) >> 3)
                          {
                            uint64_t v1724 = v1723 + 8 * v1721;
                            if (v1724 != v1722 && *(_DWORD *)(v1724 + 4) == v1700)
                            {
                              unint64_t v1726 = *(void *)v301;
                              unint64_t v1727 = *(void *)v301 >> 39;
                              if (v1727 < v1711
                                && (uint64_t v1728 = *(void *)(v1710 + 8 * v1727)) != 0
                                && (unint64_t v1729 = *(unsigned __int16 *)(v1728 + 2 * (HIDWORD(v1726) & 0x7F)), v1716 > v1729)
                                && (uint64_t v1730 = v1715 + 8 * v1729, v1730 != v1714)
                                && *(_DWORD *)(v1730 + 4) == HIDWORD(v1726))
                              {
                                v1699 = (uint64_t *)(v128[10] + 8 * v1729);
                              }
                              else
                              {
                                v1699 = (uint64_t *)v128[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1726, *v1699);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v301 += 8;
    }
  }
  float v138 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v139 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v138);
  uint64_t v140 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v138);
  uint64_t v141 = (void *)gdc::Registry::storage<arComponents::Boundary>(v138);
  uint64_t v142 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v138);
  unint64_t v143 = (void *)gdc::Registry::storage<arComponents::OcclusionPipeline>(v138);
  uint64_t v144 = v143;
  uint64_t v146 = v139[7];
  uint64_t v145 = v139[8];
  if (v140[8] - v140[7] >= (unint64_t)(v145 - v146)) {
    uint64_t v147 = v139 + 4;
  }
  else {
    uint64_t v147 = v140 + 4;
  }
  if (v141[8] - v141[7] < v147[4] - v147[3]) {
    uint64_t v147 = v141 + 4;
  }
  v2804 = v143 + 4;
  if (v142[8] - v142[7] < v147[4] - v147[3]) {
    uint64_t v147 = v142 + 4;
  }
  if (v143[8] - v143[7] >= v147[4] - v147[3]) {
    unint64_t v148 = v147;
  }
  else {
    unint64_t v148 = v143 + 4;
  }
  if (v139 + 4 == v148 && v146 != v145)
  {
    do
    {
      unint64_t v2355 = *(unsigned int *)(v146 + 4);
      unint64_t v2356 = v2355 >> 7;
      uint64_t v2357 = v140[4];
      unint64_t v2358 = (v140[5] - v2357) >> 3;
      if (v2355 >> 7 < v2358)
      {
        uint64_t v2359 = *(void *)(v2357 + 8 * v2356);
        if (v2359)
        {
          uint64_t v2360 = v2355 & 0x7F;
          unint64_t v2361 = *(unsigned __int16 *)(v2359 + 2 * v2360);
          uint64_t v2363 = v140[7];
          uint64_t v2362 = v140[8];
          if ((v2362 - v2363) >> 3 > v2361)
          {
            uint64_t v2364 = v2363 + 8 * v2361;
            if (v2364 != v2362 && *(_DWORD *)(v2364 + 4) == v2355)
            {
              uint64_t v2366 = v141[4];
              unint64_t v2367 = (v141[5] - v2366) >> 3;
              if (v2356 < v2367)
              {
                uint64_t v2368 = *(void *)(v2366 + 8 * v2356);
                if (v2368)
                {
                  unint64_t v2369 = *(unsigned __int16 *)(v2368 + 2 * v2360);
                  uint64_t v2371 = v141[7];
                  uint64_t v2370 = v141[8];
                  if ((v2370 - v2371) >> 3 > v2369)
                  {
                    uint64_t v2372 = v2371 + 8 * v2369;
                    if (v2372 != v2370 && *(_DWORD *)(v2372 + 4) == v2355)
                    {
                      uint64_t v2374 = v142[4];
                      if (v2356 < (v142[5] - v2374) >> 3)
                      {
                        uint64_t v2375 = *(void *)(v2374 + 8 * v2356);
                        if (v2375)
                        {
                          unint64_t v2376 = *(unsigned __int16 *)(v2375 + 2 * v2360);
                          uint64_t v2378 = v142[7];
                          uint64_t v2377 = v142[8];
                          if (v2376 < (v2377 - v2378) >> 3)
                          {
                            uint64_t v2379 = v2378 + 8 * v2376;
                            if (v2379 != v2377 && *(_DWORD *)(v2379 + 4) == v2355)
                            {
                              uint64_t v2381 = v143[4];
                              if (v2356 < (v143[5] - v2381) >> 3)
                              {
                                uint64_t v2382 = *(void *)(v2381 + 8 * v2356);
                                if (v2382)
                                {
                                  unint64_t v2383 = *(unsigned __int16 *)(v2382 + 2 * v2360);
                                  uint64_t v2385 = v143[7];
                                  uint64_t v2384 = v143[8];
                                  if (v2383 < (v2384 - v2385) >> 3)
                                  {
                                    uint64_t v2386 = v2385 + 8 * v2383;
                                    if (v2386 != v2384 && *(_DWORD *)(v2386 + 4) == v2355) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v146 += 8;
    }
    while (v146 != v145);
  }
  if (v140 + 4 == v148)
  {
    uint64_t v303 = v140[7];
    uint64_t v304 = v140[8];
    if (v303 != v304)
    {
      uint64_t v305 = v140[10];
      do
      {
        unint64_t v2545 = *(unsigned int *)(v303 + 4);
        unint64_t v2546 = v2545 >> 7;
        uint64_t v2547 = v139[4];
        if (v2545 >> 7 < (v139[5] - v2547) >> 3)
        {
          uint64_t v2548 = *(void *)(v2547 + 8 * v2546);
          if (v2548)
          {
            uint64_t v2549 = v2545 & 0x7F;
            unint64_t v2550 = *(unsigned __int16 *)(v2548 + 2 * v2549);
            uint64_t v2552 = v139[7];
            uint64_t v2551 = v139[8];
            if (v2550 < (v2551 - v2552) >> 3)
            {
              uint64_t v2553 = v2552 + 8 * v2550;
              if (v2553 != v2551 && *(_DWORD *)(v2553 + 4) == v2545)
              {
                uint64_t v2555 = v141[4];
                unint64_t v2556 = (v141[5] - v2555) >> 3;
                if (v2546 < v2556)
                {
                  uint64_t v2557 = *(void *)(v2555 + 8 * v2546);
                  if (v2557)
                  {
                    unint64_t v2558 = *(unsigned __int16 *)(v2557 + 2 * v2549);
                    uint64_t v2560 = v141[7];
                    uint64_t v2559 = v141[8];
                    if ((v2559 - v2560) >> 3 > v2558)
                    {
                      uint64_t v2561 = v2560 + 8 * v2558;
                      if (v2561 != v2559 && *(_DWORD *)(v2561 + 4) == v2545)
                      {
                        uint64_t v2563 = v142[4];
                        if (v2546 < (v142[5] - v2563) >> 3)
                        {
                          uint64_t v2564 = *(void *)(v2563 + 8 * v2546);
                          if (v2564)
                          {
                            unint64_t v2565 = *(unsigned __int16 *)(v2564 + 2 * v2549);
                            uint64_t v2566 = v142[7];
                            uint64_t v2567 = v142[8];
                            if (v2565 < (v2567 - v2566) >> 3)
                            {
                              uint64_t v2568 = v2566 + 8 * v2565;
                              if (v2568 != v2567 && *(_DWORD *)(v2568 + 4) == v2545)
                              {
                                uint64_t v2570 = v144[4];
                                if (v2546 < (v144[5] - v2570) >> 3)
                                {
                                  uint64_t v2571 = *(void *)(v2570 + 8 * v2546);
                                  if (v2571)
                                  {
                                    unint64_t v2572 = *(unsigned __int16 *)(v2571 + 2 * v2549);
                                    uint64_t v2574 = v144[7];
                                    uint64_t v2573 = v144[8];
                                    if (v2572 < (v2573 - v2574) >> 3)
                                    {
                                      uint64_t v2575 = v2574 + 8 * v2572;
                                      if (v2575 != v2573 && *(_DWORD *)(v2575 + 4) == v2545) {
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v305 += 16;
        v303 += 8;
      }
      while (v303 != v304);
    }
  }
  if (v141 + 4 == v148)
  {
    uint64_t v306 = v141[7];
    uint64_t v307 = v141[8];
    if (v306 != v307)
    {
      uint64_t v308 = v141[10];
      do
      {
        unint64_t v2576 = *(unsigned int *)(v306 + 4);
        unint64_t v2577 = v2576 >> 7;
        uint64_t v2578 = v139[4];
        if (v2576 >> 7 < (v139[5] - v2578) >> 3)
        {
          uint64_t v2579 = *(void *)(v2578 + 8 * v2577);
          if (v2579)
          {
            uint64_t v2580 = v2576 & 0x7F;
            unint64_t v2581 = *(unsigned __int16 *)(v2579 + 2 * v2580);
            uint64_t v2583 = v139[7];
            uint64_t v2582 = v139[8];
            if (v2581 < (v2582 - v2583) >> 3)
            {
              uint64_t v2584 = v2583 + 8 * v2581;
              if (v2584 != v2582 && *(_DWORD *)(v2584 + 4) == v2576)
              {
                uint64_t v2586 = v140[4];
                unint64_t v2587 = (v140[5] - v2586) >> 3;
                if (v2577 < v2587)
                {
                  uint64_t v2588 = *(void *)(v2586 + 8 * v2577);
                  if (v2588)
                  {
                    unint64_t v2589 = *(unsigned __int16 *)(v2588 + 2 * v2580);
                    uint64_t v2591 = v140[7];
                    uint64_t v2590 = v140[8];
                    if ((v2590 - v2591) >> 3 > v2589)
                    {
                      uint64_t v2592 = v2591 + 8 * v2589;
                      if (v2592 != v2590 && *(_DWORD *)(v2592 + 4) == v2576)
                      {
                        uint64_t v2594 = v142[4];
                        if (v2577 < (v142[5] - v2594) >> 3)
                        {
                          uint64_t v2595 = *(void *)(v2594 + 8 * v2577);
                          if (v2595)
                          {
                            unint64_t v2596 = *(unsigned __int16 *)(v2595 + 2 * v2580);
                            uint64_t v2597 = v142[7];
                            uint64_t v2598 = v142[8];
                            if (v2596 < (v2598 - v2597) >> 3)
                            {
                              uint64_t v2599 = v2597 + 8 * v2596;
                              if (v2599 != v2598 && *(_DWORD *)(v2599 + 4) == v2576)
                              {
                                uint64_t v2601 = v144[4];
                                if (v2577 < (v144[5] - v2601) >> 3)
                                {
                                  uint64_t v2602 = *(void *)(v2601 + 8 * v2577);
                                  if (v2602)
                                  {
                                    unint64_t v2603 = *(unsigned __int16 *)(v2602 + 2 * v2580);
                                    uint64_t v2605 = v144[7];
                                    uint64_t v2604 = v144[8];
                                    if (v2603 < (v2604 - v2605) >> 3)
                                    {
                                      uint64_t v2606 = v2605 + 8 * v2603;
                                      if (v2606 != v2604 && *(_DWORD *)(v2606 + 4) == v2576) {
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v308 += 24;
        v306 += 8;
      }
      while (v306 != v307);
    }
  }
  if (v142 + 4 == v148)
  {
    uint64_t v309 = v142[7];
    for (uint64_t k = v142[8]; v309 != k; v309 += 8)
    {
      unint64_t v2607 = *(unsigned int *)(v309 + 4);
      unint64_t v2608 = v2607 >> 7;
      uint64_t v2609 = v139[4];
      if (v2607 >> 7 < (v139[5] - v2609) >> 3)
      {
        uint64_t v2610 = *(void *)(v2609 + 8 * v2608);
        if (v2610)
        {
          uint64_t v2611 = v2607 & 0x7F;
          unint64_t v2612 = *(unsigned __int16 *)(v2610 + 2 * v2611);
          uint64_t v2614 = v139[7];
          uint64_t v2613 = v139[8];
          if (v2612 < (v2613 - v2614) >> 3)
          {
            uint64_t v2615 = v2614 + 8 * v2612;
            if (v2615 != v2613 && *(_DWORD *)(v2615 + 4) == v2607)
            {
              uint64_t v2617 = v140[4];
              unint64_t v2618 = (v140[5] - v2617) >> 3;
              if (v2608 < v2618)
              {
                uint64_t v2619 = *(void *)(v2617 + 8 * v2608);
                if (v2619)
                {
                  unint64_t v2620 = *(unsigned __int16 *)(v2619 + 2 * v2611);
                  uint64_t v2622 = v140[7];
                  uint64_t v2621 = v140[8];
                  if ((v2621 - v2622) >> 3 > v2620)
                  {
                    uint64_t v2623 = v2622 + 8 * v2620;
                    if (v2623 != v2621 && *(_DWORD *)(v2623 + 4) == v2607)
                    {
                      uint64_t v2625 = v141[4];
                      unint64_t v2626 = (v141[5] - v2625) >> 3;
                      if (v2608 < v2626)
                      {
                        uint64_t v2627 = *(void *)(v2625 + 8 * v2608);
                        if (v2627)
                        {
                          unint64_t v2628 = *(unsigned __int16 *)(v2627 + 2 * v2611);
                          uint64_t v2630 = v141[7];
                          uint64_t v2629 = v141[8];
                          if ((v2629 - v2630) >> 3 > v2628)
                          {
                            uint64_t v2631 = v2630 + 8 * v2628;
                            if (v2631 != v2629 && *(_DWORD *)(v2631 + 4) == v2607)
                            {
                              uint64_t v2633 = v144[4];
                              if (v2608 < (v144[5] - v2633) >> 3)
                              {
                                uint64_t v2634 = *(void *)(v2633 + 8 * v2608);
                                if (v2634)
                                {
                                  unint64_t v2635 = *(unsigned __int16 *)(v2634 + 2 * v2611);
                                  uint64_t v2637 = v144[7];
                                  uint64_t v2636 = v144[8];
                                  if (v2635 < (v2636 - v2637) >> 3)
                                  {
                                    uint64_t v2638 = v2637 + 8 * v2635;
                                    if (v2638 != v2636 && *(_DWORD *)(v2638 + 4) == v2607) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2804 == v148)
  {
    uint64_t v311 = v144[7];
    for (uint64_t m = v144[8]; v311 != m; v311 += 8)
    {
      unint64_t v2639 = *(unsigned int *)(v311 + 4);
      unint64_t v2640 = v2639 >> 7;
      uint64_t v2641 = v139[4];
      if (v2639 >> 7 < (v139[5] - v2641) >> 3)
      {
        uint64_t v2642 = *(void *)(v2641 + 8 * v2640);
        if (v2642)
        {
          uint64_t v2643 = v2639 & 0x7F;
          unint64_t v2644 = *(unsigned __int16 *)(v2642 + 2 * v2643);
          uint64_t v2646 = v139[7];
          uint64_t v2645 = v139[8];
          if (v2644 < (v2645 - v2646) >> 3)
          {
            uint64_t v2647 = v2646 + 8 * v2644;
            if (v2647 != v2645 && *(_DWORD *)(v2647 + 4) == v2639)
            {
              uint64_t v2649 = v140[4];
              unint64_t v2650 = (v140[5] - v2649) >> 3;
              if (v2640 < v2650)
              {
                uint64_t v2651 = *(void *)(v2649 + 8 * v2640);
                if (v2651)
                {
                  unint64_t v2652 = *(unsigned __int16 *)(v2651 + 2 * v2643);
                  uint64_t v2654 = v140[7];
                  uint64_t v2653 = v140[8];
                  if ((v2653 - v2654) >> 3 > v2652)
                  {
                    uint64_t v2655 = v2654 + 8 * v2652;
                    if (v2655 != v2653 && *(_DWORD *)(v2655 + 4) == v2639)
                    {
                      uint64_t v2657 = v141[4];
                      unint64_t v2658 = (v141[5] - v2657) >> 3;
                      if (v2640 < v2658)
                      {
                        uint64_t v2659 = *(void *)(v2657 + 8 * v2640);
                        if (v2659)
                        {
                          unint64_t v2660 = *(unsigned __int16 *)(v2659 + 2 * v2643);
                          uint64_t v2662 = v141[7];
                          uint64_t v2661 = v141[8];
                          if ((v2661 - v2662) >> 3 > v2660)
                          {
                            uint64_t v2663 = v2662 + 8 * v2660;
                            if (v2663 != v2661 && *(_DWORD *)(v2663 + 4) == v2639)
                            {
                              uint64_t v2665 = v142[4];
                              if (v2640 < (v142[5] - v2665) >> 3)
                              {
                                uint64_t v2666 = *(void *)(v2665 + 8 * v2640);
                                if (v2666)
                                {
                                  unint64_t v2667 = *(unsigned __int16 *)(v2666 + 2 * v2643);
                                  uint64_t v2669 = v142[7];
                                  uint64_t v2668 = v142[8];
                                  if (v2667 < (v2668 - v2669) >> 3)
                                  {
                                    uint64_t v2670 = v2669 + 8 * v2667;
                                    if (v2670 != v2668 && *(_DWORD *)(v2670 + 4) == v2639) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v150 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v151 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v150);
  unint64_t v152 = (void *)gdc::Registry::storage<arComponents::MeshDataComponent>(v150);
  uint64_t v153 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v150);
  uint64_t v154 = gdc::Registry::storage<arComponents::OcclusionPipeline>(v150);
  uint64_t v155 = (void *)v154;
  uint64_t v156 = v154 + 32;
  uint64_t v158 = v151[7];
  uint64_t v157 = v151[8];
  if (v152[8] - v152[7] >= (unint64_t)(v157 - v158)) {
    uint64_t v159 = v151 + 4;
  }
  else {
    uint64_t v159 = v152 + 4;
  }
  if (v153[8] - v153[7] < v159[4] - v159[3]) {
    uint64_t v159 = v153 + 4;
  }
  if (*(void *)(v154 + 64) - *(void *)(v154 + 56) >= v159[4] - v159[3]) {
    unint64_t v160 = v159;
  }
  else {
    unint64_t v160 = (void *)(v154 + 32);
  }
  if (v151 + 4 == v160 && v158 != v157)
  {
    do
    {
      unint64_t v1502 = *(unsigned int *)(v158 + 4);
      unint64_t v1503 = v1502 >> 7;
      uint64_t v1504 = v152[4];
      unint64_t v1505 = (v152[5] - v1504) >> 3;
      if (v1502 >> 7 < v1505)
      {
        uint64_t v1506 = *(void *)(v1504 + 8 * v1503);
        if (v1506)
        {
          uint64_t v1507 = v1502 & 0x7F;
          unint64_t v1508 = *(unsigned __int16 *)(v1506 + 2 * v1507);
          uint64_t v1510 = v152[7];
          uint64_t v1509 = v152[8];
          unint64_t v1511 = (v1509 - v1510) >> 3;
          if (v1511 > v1508)
          {
            uint64_t v1512 = v1510 + 8 * v1508;
            if (v1512 != v1509 && *(_DWORD *)(v1512 + 4) == v1502)
            {
              uint64_t v1514 = v153[4];
              if (v1503 < (v153[5] - v1514) >> 3)
              {
                uint64_t v1515 = *(void *)(v1514 + 8 * v1503);
                if (v1515)
                {
                  unint64_t v1516 = *(unsigned __int16 *)(v1515 + 2 * v1507);
                  uint64_t v1517 = v153[7];
                  uint64_t v1518 = v153[8];
                  if (v1516 < (v1518 - v1517) >> 3)
                  {
                    uint64_t v1519 = v1517 + 8 * v1516;
                    if (v1519 != v1518 && *(_DWORD *)(v1519 + 4) == v1502)
                    {
                      uint64_t v1521 = v155[4];
                      if (v1503 < (v155[5] - v1521) >> 3)
                      {
                        uint64_t v1522 = *(void *)(v1521 + 8 * v1503);
                        if (v1522)
                        {
                          unint64_t v1523 = *(unsigned __int16 *)(v1522 + 2 * v1507);
                          uint64_t v1525 = v155[7];
                          uint64_t v1524 = v155[8];
                          if (v1523 < (v1524 - v1525) >> 3)
                          {
                            uint64_t v1526 = v1525 + 8 * v1523;
                            if (v1526 != v1524 && *(_DWORD *)(v1526 + 4) == v1502)
                            {
                              unint64_t v1528 = *(void *)v158;
                              unint64_t v1529 = *(void *)v158 >> 39;
                              if (v1529 < v1505
                                && (uint64_t v1530 = *(void *)(v1504 + 8 * v1529)) != 0
                                && (unint64_t v1531 = *(unsigned __int16 *)(v1530 + 2 * (HIDWORD(v1528) & 0x7F)), v1511 > v1531)
                                && (uint64_t v1532 = v1510 + 8 * v1531, v1532 != v1509)
                                && *(_DWORD *)(v1532 + 4) == HIDWORD(v1528))
                              {
                                v1501 = (uint64_t *)(v152[10] + 8 * v1531);
                              }
                              else
                              {
                                v1501 = (uint64_t *)v152[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1528, *v1501);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v158 += 8;
    }
    while (v158 != v157);
  }
  if (v152 + 4 == v160)
  {
    uint64_t v313 = v152[7];
    uint64_t v314 = v152[8];
    if (v313 != v314)
    {
      unint64_t v315 = (uint64_t *)v152[10];
      do
      {
        unint64_t v316 = *(unsigned int *)(v313 + 4);
        unint64_t v317 = v316 >> 7;
        uint64_t v318 = v151[4];
        if (v316 >> 7 < (v151[5] - v318) >> 3)
        {
          uint64_t v319 = *(void *)(v318 + 8 * v317);
          if (v319)
          {
            uint64_t v320 = v316 & 0x7F;
            unint64_t v321 = *(unsigned __int16 *)(v319 + 2 * v320);
            uint64_t v323 = v151[7];
            uint64_t v322 = v151[8];
            if (v321 < (v322 - v323) >> 3)
            {
              uint64_t v324 = v323 + 8 * v321;
              if (v324 != v322 && *(_DWORD *)(v324 + 4) == v316)
              {
                uint64_t v326 = v153[4];
                if (v317 < (v153[5] - v326) >> 3)
                {
                  uint64_t v327 = *(void *)(v326 + 8 * v317);
                  if (v327)
                  {
                    unint64_t v328 = *(unsigned __int16 *)(v327 + 2 * v320);
                    uint64_t v330 = v153[7];
                    uint64_t v329 = v153[8];
                    if (v328 < (v329 - v330) >> 3)
                    {
                      uint64_t v331 = v330 + 8 * v328;
                      if (v331 != v329 && *(_DWORD *)(v331 + 4) == v316)
                      {
                        uint64_t v333 = v155[4];
                        if (v317 < (v155[5] - v333) >> 3)
                        {
                          uint64_t v334 = *(void *)(v333 + 8 * v317);
                          if (v334)
                          {
                            unint64_t v335 = *(unsigned __int16 *)(v334 + 2 * v320);
                            uint64_t v337 = v155[7];
                            uint64_t v336 = v155[8];
                            if (v335 < (v336 - v337) >> 3)
                            {
                              uint64_t v338 = v337 + 8 * v335;
                              if (v338 != v336 && *(_DWORD *)(v338 + 4) == v316) {
                                md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, *(void *)v313, *v315);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v315;
        v313 += 8;
      }
      while (v313 != v314);
    }
  }
  if (v153 + 4 == v160)
  {
    uint64_t v340 = v153[7];
    uint64_t v341 = v153[8];
    while (v340 != v341)
    {
      unint64_t v1732 = *(unsigned int *)(v340 + 4);
      unint64_t v1733 = v1732 >> 7;
      uint64_t v1734 = v151[4];
      if (v1732 >> 7 < (v151[5] - v1734) >> 3)
      {
        uint64_t v1735 = *(void *)(v1734 + 8 * v1733);
        if (v1735)
        {
          uint64_t v1736 = v1732 & 0x7F;
          unint64_t v1737 = *(unsigned __int16 *)(v1735 + 2 * v1736);
          uint64_t v1739 = v151[7];
          uint64_t v1738 = v151[8];
          if (v1737 < (v1738 - v1739) >> 3)
          {
            uint64_t v1740 = v1739 + 8 * v1737;
            if (v1740 != v1738 && *(_DWORD *)(v1740 + 4) == v1732)
            {
              uint64_t v1742 = v152[4];
              unint64_t v1743 = (v152[5] - v1742) >> 3;
              if (v1733 < v1743)
              {
                uint64_t v1744 = *(void *)(v1742 + 8 * v1733);
                if (v1744)
                {
                  unint64_t v1745 = *(unsigned __int16 *)(v1744 + 2 * v1736);
                  uint64_t v1747 = v152[7];
                  uint64_t v1746 = v152[8];
                  unint64_t v1748 = (v1746 - v1747) >> 3;
                  if (v1748 > v1745)
                  {
                    uint64_t v1749 = v1747 + 8 * v1745;
                    if (v1749 != v1746 && *(_DWORD *)(v1749 + 4) == v1732)
                    {
                      uint64_t v1751 = v155[4];
                      if (v1733 < (v155[5] - v1751) >> 3)
                      {
                        uint64_t v1752 = *(void *)(v1751 + 8 * v1733);
                        if (v1752)
                        {
                          unint64_t v1753 = *(unsigned __int16 *)(v1752 + 2 * v1736);
                          uint64_t v1755 = v155[7];
                          uint64_t v1754 = v155[8];
                          if (v1753 < (v1754 - v1755) >> 3)
                          {
                            uint64_t v1756 = v1755 + 8 * v1753;
                            if (v1756 != v1754 && *(_DWORD *)(v1756 + 4) == v1732)
                            {
                              unint64_t v1758 = *(void *)v340;
                              unint64_t v1759 = *(void *)v340 >> 39;
                              if (v1759 < v1743
                                && (uint64_t v1760 = *(void *)(v1742 + 8 * v1759)) != 0
                                && (unint64_t v1761 = *(unsigned __int16 *)(v1760 + 2 * (HIDWORD(v1758) & 0x7F)), v1748 > v1761)
                                && (uint64_t v1762 = v1747 + 8 * v1761, v1762 != v1746)
                                && *(_DWORD *)(v1762 + 4) == HIDWORD(v1758))
                              {
                                v1731 = (uint64_t *)(v152[10] + 8 * v1761);
                              }
                              else
                              {
                                v1731 = (uint64_t *)v152[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1758, *v1731);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v340 += 8;
    }
  }
  if ((void *)v156 == v160)
  {
    uint64_t v342 = v155[7];
    uint64_t v343 = v155[8];
    while (v342 != v343)
    {
      unint64_t v1764 = *(unsigned int *)(v342 + 4);
      unint64_t v1765 = v1764 >> 7;
      uint64_t v1766 = v151[4];
      if (v1764 >> 7 < (v151[5] - v1766) >> 3)
      {
        uint64_t v1767 = *(void *)(v1766 + 8 * v1765);
        if (v1767)
        {
          uint64_t v1768 = v1764 & 0x7F;
          unint64_t v1769 = *(unsigned __int16 *)(v1767 + 2 * v1768);
          uint64_t v1771 = v151[7];
          uint64_t v1770 = v151[8];
          if (v1769 < (v1770 - v1771) >> 3)
          {
            uint64_t v1772 = v1771 + 8 * v1769;
            if (v1772 != v1770 && *(_DWORD *)(v1772 + 4) == v1764)
            {
              uint64_t v1774 = v152[4];
              unint64_t v1775 = (v152[5] - v1774) >> 3;
              if (v1765 < v1775)
              {
                uint64_t v1776 = *(void *)(v1774 + 8 * v1765);
                if (v1776)
                {
                  unint64_t v1777 = *(unsigned __int16 *)(v1776 + 2 * v1768);
                  uint64_t v1779 = v152[7];
                  uint64_t v1778 = v152[8];
                  unint64_t v1780 = (v1778 - v1779) >> 3;
                  if (v1780 > v1777)
                  {
                    uint64_t v1781 = v1779 + 8 * v1777;
                    if (v1781 != v1778 && *(_DWORD *)(v1781 + 4) == v1764)
                    {
                      uint64_t v1783 = v153[4];
                      if (v1765 < (v153[5] - v1783) >> 3)
                      {
                        uint64_t v1784 = *(void *)(v1783 + 8 * v1765);
                        if (v1784)
                        {
                          unint64_t v1785 = *(unsigned __int16 *)(v1784 + 2 * v1768);
                          uint64_t v1787 = v153[7];
                          uint64_t v1786 = v153[8];
                          if (v1785 < (v1786 - v1787) >> 3)
                          {
                            uint64_t v1788 = v1787 + 8 * v1785;
                            if (v1788 != v1786 && *(_DWORD *)(v1788 + 4) == v1764)
                            {
                              unint64_t v1790 = *(void *)v342;
                              unint64_t v1791 = *(void *)v342 >> 39;
                              if (v1791 < v1775
                                && (uint64_t v1792 = *(void *)(v1774 + 8 * v1791)) != 0
                                && (unint64_t v1793 = *(unsigned __int16 *)(v1792 + 2 * (HIDWORD(v1790) & 0x7F)), v1780 > v1793)
                                && (uint64_t v1794 = v1779 + 8 * v1793, v1794 != v1778)
                                && *(_DWORD *)(v1794 + 4) == HIDWORD(v1790))
                              {
                                v1763 = (uint64_t *)(v152[10] + 8 * v1793);
                              }
                              else
                              {
                                v1763 = (uint64_t *)v152[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1790, *v1763);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v342 += 8;
    }
  }
  uint64_t v162 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v163 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v162);
  uint64_t v164 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v162);
  uint64_t v165 = (void *)gdc::Registry::storage<arComponents::Boundary>(v162);
  uint64_t v166 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v162);
  unint64_t v167 = (void *)gdc::Registry::storage<arComponents::ShadowPipeline>(v162);
  BOOL v168 = v167;
  uint64_t v170 = v163[7];
  uint64_t v169 = v163[8];
  if (v164[8] - v164[7] >= (unint64_t)(v169 - v170)) {
    uint64_t v171 = v163 + 4;
  }
  else {
    uint64_t v171 = v164 + 4;
  }
  if (v165[8] - v165[7] < v171[4] - v171[3]) {
    uint64_t v171 = v165 + 4;
  }
  v2805 = v167 + 4;
  if (v166[8] - v166[7] < v171[4] - v171[3]) {
    uint64_t v171 = v166 + 4;
  }
  if (v167[8] - v167[7] >= v171[4] - v171[3]) {
    uint64_t v172 = v171;
  }
  else {
    uint64_t v172 = v167 + 4;
  }
  if (v163 + 4 == v172 && v170 != v169)
  {
    do
    {
      unint64_t v2387 = *(unsigned int *)(v170 + 4);
      unint64_t v2388 = v2387 >> 7;
      uint64_t v2389 = v164[4];
      unint64_t v2390 = (v164[5] - v2389) >> 3;
      if (v2387 >> 7 < v2390)
      {
        uint64_t v2391 = *(void *)(v2389 + 8 * v2388);
        if (v2391)
        {
          uint64_t v2392 = v2387 & 0x7F;
          unint64_t v2393 = *(unsigned __int16 *)(v2391 + 2 * v2392);
          uint64_t v2395 = v164[7];
          uint64_t v2394 = v164[8];
          if ((v2394 - v2395) >> 3 > v2393)
          {
            uint64_t v2396 = v2395 + 8 * v2393;
            if (v2396 != v2394 && *(_DWORD *)(v2396 + 4) == v2387)
            {
              uint64_t v2398 = v165[4];
              unint64_t v2399 = (v165[5] - v2398) >> 3;
              if (v2388 < v2399)
              {
                uint64_t v2400 = *(void *)(v2398 + 8 * v2388);
                if (v2400)
                {
                  unint64_t v2401 = *(unsigned __int16 *)(v2400 + 2 * v2392);
                  uint64_t v2403 = v165[7];
                  uint64_t v2402 = v165[8];
                  if ((v2402 - v2403) >> 3 > v2401)
                  {
                    uint64_t v2404 = v2403 + 8 * v2401;
                    if (v2404 != v2402 && *(_DWORD *)(v2404 + 4) == v2387)
                    {
                      uint64_t v2406 = v166[4];
                      if (v2388 < (v166[5] - v2406) >> 3)
                      {
                        uint64_t v2407 = *(void *)(v2406 + 8 * v2388);
                        if (v2407)
                        {
                          unint64_t v2408 = *(unsigned __int16 *)(v2407 + 2 * v2392);
                          uint64_t v2410 = v166[7];
                          uint64_t v2409 = v166[8];
                          if (v2408 < (v2409 - v2410) >> 3)
                          {
                            uint64_t v2411 = v2410 + 8 * v2408;
                            if (v2411 != v2409 && *(_DWORD *)(v2411 + 4) == v2387)
                            {
                              uint64_t v2413 = v167[4];
                              if (v2388 < (v167[5] - v2413) >> 3)
                              {
                                uint64_t v2414 = *(void *)(v2413 + 8 * v2388);
                                if (v2414)
                                {
                                  unint64_t v2415 = *(unsigned __int16 *)(v2414 + 2 * v2392);
                                  uint64_t v2417 = v167[7];
                                  uint64_t v2416 = v167[8];
                                  if (v2415 < (v2416 - v2417) >> 3)
                                  {
                                    uint64_t v2418 = v2417 + 8 * v2415;
                                    if (v2418 != v2416 && *(_DWORD *)(v2418 + 4) == v2387) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v170 += 8;
    }
    while (v170 != v169);
  }
  if (v164 + 4 == v172)
  {
    uint64_t v344 = v164[7];
    uint64_t v345 = v164[8];
    if (v344 != v345)
    {
      uint64_t v346 = v164[10];
      do
      {
        unint64_t v2671 = *(unsigned int *)(v344 + 4);
        unint64_t v2672 = v2671 >> 7;
        uint64_t v2673 = v163[4];
        if (v2671 >> 7 < (v163[5] - v2673) >> 3)
        {
          uint64_t v2674 = *(void *)(v2673 + 8 * v2672);
          if (v2674)
          {
            uint64_t v2675 = v2671 & 0x7F;
            unint64_t v2676 = *(unsigned __int16 *)(v2674 + 2 * v2675);
            uint64_t v2678 = v163[7];
            uint64_t v2677 = v163[8];
            if (v2676 < (v2677 - v2678) >> 3)
            {
              uint64_t v2679 = v2678 + 8 * v2676;
              if (v2679 != v2677 && *(_DWORD *)(v2679 + 4) == v2671)
              {
                uint64_t v2681 = v165[4];
                unint64_t v2682 = (v165[5] - v2681) >> 3;
                if (v2672 < v2682)
                {
                  uint64_t v2683 = *(void *)(v2681 + 8 * v2672);
                  if (v2683)
                  {
                    unint64_t v2684 = *(unsigned __int16 *)(v2683 + 2 * v2675);
                    uint64_t v2686 = v165[7];
                    uint64_t v2685 = v165[8];
                    if ((v2685 - v2686) >> 3 > v2684)
                    {
                      uint64_t v2687 = v2686 + 8 * v2684;
                      if (v2687 != v2685 && *(_DWORD *)(v2687 + 4) == v2671)
                      {
                        uint64_t v2689 = v166[4];
                        if (v2672 < (v166[5] - v2689) >> 3)
                        {
                          uint64_t v2690 = *(void *)(v2689 + 8 * v2672);
                          if (v2690)
                          {
                            unint64_t v2691 = *(unsigned __int16 *)(v2690 + 2 * v2675);
                            uint64_t v2692 = v166[7];
                            uint64_t v2693 = v166[8];
                            if (v2691 < (v2693 - v2692) >> 3)
                            {
                              uint64_t v2694 = v2692 + 8 * v2691;
                              if (v2694 != v2693 && *(_DWORD *)(v2694 + 4) == v2671)
                              {
                                uint64_t v2696 = v168[4];
                                if (v2672 < (v168[5] - v2696) >> 3)
                                {
                                  uint64_t v2697 = *(void *)(v2696 + 8 * v2672);
                                  if (v2697)
                                  {
                                    unint64_t v2698 = *(unsigned __int16 *)(v2697 + 2 * v2675);
                                    uint64_t v2700 = v168[7];
                                    uint64_t v2699 = v168[8];
                                    if (v2698 < (v2699 - v2700) >> 3)
                                    {
                                      uint64_t v2701 = v2700 + 8 * v2698;
                                      if (v2701 != v2699 && *(_DWORD *)(v2701 + 4) == v2671) {
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v346 += 16;
        v344 += 8;
      }
      while (v344 != v345);
    }
  }
  if (v165 + 4 == v172)
  {
    uint64_t v347 = v165[7];
    uint64_t v348 = v165[8];
    if (v347 != v348)
    {
      uint64_t v349 = v165[10];
      do
      {
        unint64_t v2702 = *(unsigned int *)(v347 + 4);
        unint64_t v2703 = v2702 >> 7;
        uint64_t v2704 = v163[4];
        if (v2702 >> 7 < (v163[5] - v2704) >> 3)
        {
          uint64_t v2705 = *(void *)(v2704 + 8 * v2703);
          if (v2705)
          {
            uint64_t v2706 = v2702 & 0x7F;
            unint64_t v2707 = *(unsigned __int16 *)(v2705 + 2 * v2706);
            uint64_t v2709 = v163[7];
            uint64_t v2708 = v163[8];
            if (v2707 < (v2708 - v2709) >> 3)
            {
              uint64_t v2710 = v2709 + 8 * v2707;
              if (v2710 != v2708 && *(_DWORD *)(v2710 + 4) == v2702)
              {
                uint64_t v2712 = v164[4];
                unint64_t v2713 = (v164[5] - v2712) >> 3;
                if (v2703 < v2713)
                {
                  uint64_t v2714 = *(void *)(v2712 + 8 * v2703);
                  if (v2714)
                  {
                    unint64_t v2715 = *(unsigned __int16 *)(v2714 + 2 * v2706);
                    uint64_t v2717 = v164[7];
                    uint64_t v2716 = v164[8];
                    if ((v2716 - v2717) >> 3 > v2715)
                    {
                      uint64_t v2718 = v2717 + 8 * v2715;
                      if (v2718 != v2716 && *(_DWORD *)(v2718 + 4) == v2702)
                      {
                        uint64_t v2720 = v166[4];
                        if (v2703 < (v166[5] - v2720) >> 3)
                        {
                          uint64_t v2721 = *(void *)(v2720 + 8 * v2703);
                          if (v2721)
                          {
                            unint64_t v2722 = *(unsigned __int16 *)(v2721 + 2 * v2706);
                            uint64_t v2723 = v166[7];
                            uint64_t v2724 = v166[8];
                            if (v2722 < (v2724 - v2723) >> 3)
                            {
                              uint64_t v2725 = v2723 + 8 * v2722;
                              if (v2725 != v2724 && *(_DWORD *)(v2725 + 4) == v2702)
                              {
                                uint64_t v2727 = v168[4];
                                if (v2703 < (v168[5] - v2727) >> 3)
                                {
                                  uint64_t v2728 = *(void *)(v2727 + 8 * v2703);
                                  if (v2728)
                                  {
                                    unint64_t v2729 = *(unsigned __int16 *)(v2728 + 2 * v2706);
                                    uint64_t v2731 = v168[7];
                                    uint64_t v2730 = v168[8];
                                    if (v2729 < (v2730 - v2731) >> 3)
                                    {
                                      uint64_t v2732 = v2731 + 8 * v2729;
                                      if (v2732 != v2730 && *(_DWORD *)(v2732 + 4) == v2702) {
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v349 += 24;
        v347 += 8;
      }
      while (v347 != v348);
    }
  }
  if (v166 + 4 == v172)
  {
    uint64_t v350 = v166[7];
    for (uint64_t n = v166[8]; v350 != n; v350 += 8)
    {
      unint64_t v2733 = *(unsigned int *)(v350 + 4);
      unint64_t v2734 = v2733 >> 7;
      uint64_t v2735 = v163[4];
      if (v2733 >> 7 < (v163[5] - v2735) >> 3)
      {
        uint64_t v2736 = *(void *)(v2735 + 8 * v2734);
        if (v2736)
        {
          uint64_t v2737 = v2733 & 0x7F;
          unint64_t v2738 = *(unsigned __int16 *)(v2736 + 2 * v2737);
          uint64_t v2740 = v163[7];
          uint64_t v2739 = v163[8];
          if (v2738 < (v2739 - v2740) >> 3)
          {
            uint64_t v2741 = v2740 + 8 * v2738;
            if (v2741 != v2739 && *(_DWORD *)(v2741 + 4) == v2733)
            {
              uint64_t v2743 = v164[4];
              unint64_t v2744 = (v164[5] - v2743) >> 3;
              if (v2734 < v2744)
              {
                uint64_t v2745 = *(void *)(v2743 + 8 * v2734);
                if (v2745)
                {
                  unint64_t v2746 = *(unsigned __int16 *)(v2745 + 2 * v2737);
                  uint64_t v2748 = v164[7];
                  uint64_t v2747 = v164[8];
                  if ((v2747 - v2748) >> 3 > v2746)
                  {
                    uint64_t v2749 = v2748 + 8 * v2746;
                    if (v2749 != v2747 && *(_DWORD *)(v2749 + 4) == v2733)
                    {
                      uint64_t v2751 = v165[4];
                      unint64_t v2752 = (v165[5] - v2751) >> 3;
                      if (v2734 < v2752)
                      {
                        uint64_t v2753 = *(void *)(v2751 + 8 * v2734);
                        if (v2753)
                        {
                          unint64_t v2754 = *(unsigned __int16 *)(v2753 + 2 * v2737);
                          uint64_t v2756 = v165[7];
                          uint64_t v2755 = v165[8];
                          if ((v2755 - v2756) >> 3 > v2754)
                          {
                            uint64_t v2757 = v2756 + 8 * v2754;
                            if (v2757 != v2755 && *(_DWORD *)(v2757 + 4) == v2733)
                            {
                              uint64_t v2759 = v168[4];
                              if (v2734 < (v168[5] - v2759) >> 3)
                              {
                                uint64_t v2760 = *(void *)(v2759 + 8 * v2734);
                                if (v2760)
                                {
                                  unint64_t v2761 = *(unsigned __int16 *)(v2760 + 2 * v2737);
                                  uint64_t v2763 = v168[7];
                                  uint64_t v2762 = v168[8];
                                  if (v2761 < (v2762 - v2763) >> 3)
                                  {
                                    uint64_t v2764 = v2763 + 8 * v2761;
                                    if (v2764 != v2762 && *(_DWORD *)(v2764 + 4) == v2733) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2805 == v172)
  {
    uint64_t v352 = v168[7];
    for (iuint64_t i = v168[8]; v352 != ii; v352 += 8)
    {
      unint64_t v2765 = *(unsigned int *)(v352 + 4);
      unint64_t v2766 = v2765 >> 7;
      uint64_t v2767 = v163[4];
      if (v2765 >> 7 < (v163[5] - v2767) >> 3)
      {
        uint64_t v2768 = *(void *)(v2767 + 8 * v2766);
        if (v2768)
        {
          uint64_t v2769 = v2765 & 0x7F;
          unint64_t v2770 = *(unsigned __int16 *)(v2768 + 2 * v2769);
          uint64_t v2772 = v163[7];
          uint64_t v2771 = v163[8];
          if (v2770 < (v2771 - v2772) >> 3)
          {
            uint64_t v2773 = v2772 + 8 * v2770;
            if (v2773 != v2771 && *(_DWORD *)(v2773 + 4) == v2765)
            {
              uint64_t v2775 = v164[4];
              unint64_t v2776 = (v164[5] - v2775) >> 3;
              if (v2766 < v2776)
              {
                uint64_t v2777 = *(void *)(v2775 + 8 * v2766);
                if (v2777)
                {
                  unint64_t v2778 = *(unsigned __int16 *)(v2777 + 2 * v2769);
                  uint64_t v2780 = v164[7];
                  uint64_t v2779 = v164[8];
                  if ((v2779 - v2780) >> 3 > v2778)
                  {
                    uint64_t v2781 = v2780 + 8 * v2778;
                    if (v2781 != v2779 && *(_DWORD *)(v2781 + 4) == v2765)
                    {
                      uint64_t v2783 = v165[4];
                      unint64_t v2784 = (v165[5] - v2783) >> 3;
                      if (v2766 < v2784)
                      {
                        uint64_t v2785 = *(void *)(v2783 + 8 * v2766);
                        if (v2785)
                        {
                          unint64_t v2786 = *(unsigned __int16 *)(v2785 + 2 * v2769);
                          uint64_t v2788 = v165[7];
                          uint64_t v2787 = v165[8];
                          if ((v2787 - v2788) >> 3 > v2786)
                          {
                            uint64_t v2789 = v2788 + 8 * v2786;
                            if (v2789 != v2787 && *(_DWORD *)(v2789 + 4) == v2765)
                            {
                              uint64_t v2791 = v166[4];
                              if (v2766 < (v166[5] - v2791) >> 3)
                              {
                                uint64_t v2792 = *(void *)(v2791 + 8 * v2766);
                                if (v2792)
                                {
                                  unint64_t v2793 = *(unsigned __int16 *)(v2792 + 2 * v2769);
                                  uint64_t v2795 = v166[7];
                                  uint64_t v2794 = v166[8];
                                  if (v2793 < (v2794 - v2795) >> 3)
                                  {
                                    uint64_t v2796 = v2795 + 8 * v2793;
                                    if (v2796 != v2794 && *(_DWORD *)(v2796 + 4) == v2765) {
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v174 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v175 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v174);
  unint64_t v176 = (void *)gdc::Registry::storage<arComponents::MeshDataComponent>(v174);
  uint64_t v177 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v174);
  uint64_t v178 = gdc::Registry::storage<arComponents::ShadowPipeline>(v174);
  long long v179 = (void *)v178;
  uint64_t v180 = v178 + 32;
  uint64_t v182 = v175[7];
  uint64_t v181 = v175[8];
  if (v176[8] - v176[7] >= (unint64_t)(v181 - v182)) {
    uint64_t v183 = v175 + 4;
  }
  else {
    uint64_t v183 = v176 + 4;
  }
  if (v177[8] - v177[7] < v183[4] - v183[3]) {
    uint64_t v183 = v177 + 4;
  }
  if (*(void *)(v178 + 64) - *(void *)(v178 + 56) >= v183[4] - v183[3]) {
    uint64_t v184 = v183;
  }
  else {
    uint64_t v184 = (void *)(v178 + 32);
  }
  if (v175 + 4 == v184 && v182 != v181)
  {
    do
    {
      unint64_t v1534 = *(unsigned int *)(v182 + 4);
      unint64_t v1535 = v1534 >> 7;
      uint64_t v1536 = v176[4];
      unint64_t v1537 = (v176[5] - v1536) >> 3;
      if (v1534 >> 7 < v1537)
      {
        uint64_t v1538 = *(void *)(v1536 + 8 * v1535);
        if (v1538)
        {
          uint64_t v1539 = v1534 & 0x7F;
          unint64_t v1540 = *(unsigned __int16 *)(v1538 + 2 * v1539);
          uint64_t v1542 = v176[7];
          uint64_t v1541 = v176[8];
          unint64_t v1543 = (v1541 - v1542) >> 3;
          if (v1543 > v1540)
          {
            uint64_t v1544 = v1542 + 8 * v1540;
            if (v1544 != v1541 && *(_DWORD *)(v1544 + 4) == v1534)
            {
              uint64_t v1546 = v177[4];
              if (v1535 < (v177[5] - v1546) >> 3)
              {
                uint64_t v1547 = *(void *)(v1546 + 8 * v1535);
                if (v1547)
                {
                  unint64_t v1548 = *(unsigned __int16 *)(v1547 + 2 * v1539);
                  uint64_t v1549 = v177[7];
                  uint64_t v1550 = v177[8];
                  if (v1548 < (v1550 - v1549) >> 3)
                  {
                    uint64_t v1551 = v1549 + 8 * v1548;
                    if (v1551 != v1550 && *(_DWORD *)(v1551 + 4) == v1534)
                    {
                      uint64_t v1553 = v179[4];
                      if (v1535 < (v179[5] - v1553) >> 3)
                      {
                        uint64_t v1554 = *(void *)(v1553 + 8 * v1535);
                        if (v1554)
                        {
                          unint64_t v1555 = *(unsigned __int16 *)(v1554 + 2 * v1539);
                          uint64_t v1557 = v179[7];
                          uint64_t v1556 = v179[8];
                          if (v1555 < (v1556 - v1557) >> 3)
                          {
                            uint64_t v1558 = v1557 + 8 * v1555;
                            if (v1558 != v1556 && *(_DWORD *)(v1558 + 4) == v1534)
                            {
                              unint64_t v1560 = *(void *)v182;
                              unint64_t v1561 = *(void *)v182 >> 39;
                              if (v1561 < v1537
                                && (uint64_t v1562 = *(void *)(v1536 + 8 * v1561)) != 0
                                && (unint64_t v1563 = *(unsigned __int16 *)(v1562 + 2 * (HIDWORD(v1560) & 0x7F)), v1543 > v1563)
                                && (uint64_t v1564 = v1542 + 8 * v1563, v1564 != v1541)
                                && *(_DWORD *)(v1564 + 4) == HIDWORD(v1560))
                              {
                                v1533 = (uint64_t *)(v176[10] + 8 * v1563);
                              }
                              else
                              {
                                v1533 = (uint64_t *)v176[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1560, *v1533);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v182 += 8;
    }
    while (v182 != v181);
  }
  if (v176 + 4 == v184)
  {
    uint64_t v354 = v176[7];
    uint64_t v355 = v176[8];
    if (v354 != v355)
    {
      v356 = (uint64_t *)v176[10];
      do
      {
        unint64_t v357 = *(unsigned int *)(v354 + 4);
        unint64_t v358 = v357 >> 7;
        uint64_t v359 = v175[4];
        if (v357 >> 7 < (v175[5] - v359) >> 3)
        {
          uint64_t v360 = *(void *)(v359 + 8 * v358);
          if (v360)
          {
            uint64_t v361 = v357 & 0x7F;
            unint64_t v362 = *(unsigned __int16 *)(v360 + 2 * v361);
            uint64_t v364 = v175[7];
            uint64_t v363 = v175[8];
            if (v362 < (v363 - v364) >> 3)
            {
              uint64_t v365 = v364 + 8 * v362;
              if (v365 != v363 && *(_DWORD *)(v365 + 4) == v357)
              {
                uint64_t v367 = v177[4];
                if (v358 < (v177[5] - v367) >> 3)
                {
                  uint64_t v368 = *(void *)(v367 + 8 * v358);
                  if (v368)
                  {
                    unint64_t v369 = *(unsigned __int16 *)(v368 + 2 * v361);
                    uint64_t v371 = v177[7];
                    uint64_t v370 = v177[8];
                    if (v369 < (v370 - v371) >> 3)
                    {
                      uint64_t v372 = v371 + 8 * v369;
                      if (v372 != v370 && *(_DWORD *)(v372 + 4) == v357)
                      {
                        uint64_t v374 = v179[4];
                        if (v358 < (v179[5] - v374) >> 3)
                        {
                          uint64_t v375 = *(void *)(v374 + 8 * v358);
                          if (v375)
                          {
                            unint64_t v376 = *(unsigned __int16 *)(v375 + 2 * v361);
                            uint64_t v378 = v179[7];
                            uint64_t v377 = v179[8];
                            if (v376 < (v377 - v378) >> 3)
                            {
                              uint64_t v379 = v378 + 8 * v376;
                              if (v379 != v377 && *(_DWORD *)(v379 + 4) == v357) {
                                md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, *(void *)v354, *v356);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v356;
        v354 += 8;
      }
      while (v354 != v355);
    }
  }
  if (v177 + 4 == v184)
  {
    uint64_t v381 = v177[7];
    uint64_t v382 = v177[8];
    while (v381 != v382)
    {
      unint64_t v1796 = *(unsigned int *)(v381 + 4);
      unint64_t v1797 = v1796 >> 7;
      uint64_t v1798 = v175[4];
      if (v1796 >> 7 < (v175[5] - v1798) >> 3)
      {
        uint64_t v1799 = *(void *)(v1798 + 8 * v1797);
        if (v1799)
        {
          uint64_t v1800 = v1796 & 0x7F;
          unint64_t v1801 = *(unsigned __int16 *)(v1799 + 2 * v1800);
          uint64_t v1803 = v175[7];
          uint64_t v1802 = v175[8];
          if (v1801 < (v1802 - v1803) >> 3)
          {
            uint64_t v1804 = v1803 + 8 * v1801;
            if (v1804 != v1802 && *(_DWORD *)(v1804 + 4) == v1796)
            {
              uint64_t v1806 = v176[4];
              unint64_t v1807 = (v176[5] - v1806) >> 3;
              if (v1797 < v1807)
              {
                uint64_t v1808 = *(void *)(v1806 + 8 * v1797);
                if (v1808)
                {
                  unint64_t v1809 = *(unsigned __int16 *)(v1808 + 2 * v1800);
                  uint64_t v1811 = v176[7];
                  uint64_t v1810 = v176[8];
                  unint64_t v1812 = (v1810 - v1811) >> 3;
                  if (v1812 > v1809)
                  {
                    uint64_t v1813 = v1811 + 8 * v1809;
                    if (v1813 != v1810 && *(_DWORD *)(v1813 + 4) == v1796)
                    {
                      uint64_t v1815 = v179[4];
                      if (v1797 < (v179[5] - v1815) >> 3)
                      {
                        uint64_t v1816 = *(void *)(v1815 + 8 * v1797);
                        if (v1816)
                        {
                          unint64_t v1817 = *(unsigned __int16 *)(v1816 + 2 * v1800);
                          uint64_t v1819 = v179[7];
                          uint64_t v1818 = v179[8];
                          if (v1817 < (v1818 - v1819) >> 3)
                          {
                            uint64_t v1820 = v1819 + 8 * v1817;
                            if (v1820 != v1818 && *(_DWORD *)(v1820 + 4) == v1796)
                            {
                              unint64_t v1822 = *(void *)v381;
                              unint64_t v1823 = *(void *)v381 >> 39;
                              if (v1823 < v1807
                                && (uint64_t v1824 = *(void *)(v1806 + 8 * v1823)) != 0
                                && (unint64_t v1825 = *(unsigned __int16 *)(v1824 + 2 * (HIDWORD(v1822) & 0x7F)), v1812 > v1825)
                                && (uint64_t v1826 = v1811 + 8 * v1825, v1826 != v1810)
                                && *(_DWORD *)(v1826 + 4) == HIDWORD(v1822))
                              {
                                v1795 = (uint64_t *)(v176[10] + 8 * v1825);
                              }
                              else
                              {
                                v1795 = (uint64_t *)v176[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1822, *v1795);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v381 += 8;
    }
  }
  if ((void *)v180 == v184)
  {
    uint64_t v383 = v179[7];
    uint64_t v384 = v179[8];
    while (v383 != v384)
    {
      unint64_t v1828 = *(unsigned int *)(v383 + 4);
      unint64_t v1829 = v1828 >> 7;
      uint64_t v1830 = v175[4];
      if (v1828 >> 7 < (v175[5] - v1830) >> 3)
      {
        uint64_t v1831 = *(void *)(v1830 + 8 * v1829);
        if (v1831)
        {
          uint64_t v1832 = v1828 & 0x7F;
          unint64_t v1833 = *(unsigned __int16 *)(v1831 + 2 * v1832);
          uint64_t v1835 = v175[7];
          uint64_t v1834 = v175[8];
          if (v1833 < (v1834 - v1835) >> 3)
          {
            uint64_t v1836 = v1835 + 8 * v1833;
            if (v1836 != v1834 && *(_DWORD *)(v1836 + 4) == v1828)
            {
              uint64_t v1838 = v176[4];
              unint64_t v1839 = (v176[5] - v1838) >> 3;
              if (v1829 < v1839)
              {
                uint64_t v1840 = *(void *)(v1838 + 8 * v1829);
                if (v1840)
                {
                  unint64_t v1841 = *(unsigned __int16 *)(v1840 + 2 * v1832);
                  uint64_t v1843 = v176[7];
                  uint64_t v1842 = v176[8];
                  unint64_t v1844 = (v1842 - v1843) >> 3;
                  if (v1844 > v1841)
                  {
                    uint64_t v1845 = v1843 + 8 * v1841;
                    if (v1845 != v1842 && *(_DWORD *)(v1845 + 4) == v1828)
                    {
                      uint64_t v1847 = v177[4];
                      if (v1829 < (v177[5] - v1847) >> 3)
                      {
                        uint64_t v1848 = *(void *)(v1847 + 8 * v1829);
                        if (v1848)
                        {
                          unint64_t v1849 = *(unsigned __int16 *)(v1848 + 2 * v1832);
                          uint64_t v1851 = v177[7];
                          uint64_t v1850 = v177[8];
                          if (v1849 < (v1850 - v1851) >> 3)
                          {
                            uint64_t v1852 = v1851 + 8 * v1849;
                            if (v1852 != v1850 && *(_DWORD *)(v1852 + 4) == v1828)
                            {
                              unint64_t v1854 = *(void *)v383;
                              unint64_t v1855 = *(void *)v383 >> 39;
                              if (v1855 < v1839
                                && (uint64_t v1856 = *(void *)(v1838 + 8 * v1855)) != 0
                                && (unint64_t v1857 = *(unsigned __int16 *)(v1856 + 2 * (HIDWORD(v1854) & 0x7F)), v1844 > v1857)
                                && (uint64_t v1858 = v1843 + 8 * v1857, v1858 != v1842)
                                && *(_DWORD *)(v1858 + 4) == HIDWORD(v1854))
                              {
                                v1827 = (uint64_t *)(v176[10] + 8 * v1857);
                              }
                              else
                              {
                                v1827 = (uint64_t *)v176[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()((uint64_t)v2817, v1854, *v1827);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v383 += 8;
    }
  }
  unint64_t v186 = (void *)gdc::Registry::storage<arComponents::PipelineIdentifier>(*((int8x8_t **)v2817 + 55));
  uint64_t v187 = (float64_t *)v186[7];
  uint64_t v188 = (float64_t *)v186[8];
  unint64_t v189 = v2817;
  if (v187 == v188) {
    goto LABEL_323;
  }
  unint64_t v190 = *((void *)v2817 + 45);
  if (!v190) {
    goto LABEL_323;
  }
  unint64_t v191 = (uint64_t *)((char *)v2817 + 352);
  uint16x4_t v192 = (unint64_t *)v186[10];
  uint64_t v193 = (void *)((char *)v2817 + 368);
  while (2)
  {
    v2833.f64[0] = *v187;
    if (!v190) {
      goto LABEL_321;
    }
    unint64_t v194 = *v192;
    uint8x8_t v195 = (uint8x8_t)vcnt_s8((int8x8_t)v190);
    v195.i16[0] = vaddlv_u8(v195);
    unint64_t v196 = v195.u32[0];
    if (v195.u32[0] > 1uLL)
    {
      unint64_t v197 = *v192;
      if (v194 >= v190) {
        unint64_t v197 = v194 % v190;
      }
    }
    else
    {
      unint64_t v197 = v194 & (v190 - 1);
    }
    float v198 = *(void **)(*v191 + 8 * v197);
    if (!v198) {
      goto LABEL_321;
    }
    BOOL v199 = (void *)*v198;
    if (!*v198) {
      goto LABEL_321;
    }
    unint64_t v200 = v190 - 1;
    if (v195.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v201 = v199[1];
        if (v201 == v194)
        {
          if (v199[2] == v194) {
            goto LABEL_259;
          }
        }
        else if ((v201 & v200) != v197)
        {
          goto LABEL_321;
        }
        BOOL v199 = (void *)*v199;
        if (!v199) {
          goto LABEL_321;
        }
      }
    }
    while (2)
    {
      unint64_t v202 = v199[1];
      if (v202 != v194)
      {
        if (v202 >= v190) {
          v202 %= v190;
        }
        if (v202 != v197) {
          goto LABEL_321;
        }
        goto LABEL_253;
      }
      if (v199[2] != v194)
      {
LABEL_253:
        BOOL v199 = (void *)*v199;
        if (!v199) {
          goto LABEL_321;
        }
        continue;
      }
      break;
    }
LABEL_259:
    if (v195.u32[0] > 1uLL)
    {
      unint64_t v203 = *v192;
      if (v194 >= v190) {
        unint64_t v203 = v194 % v190;
      }
    }
    else
    {
      unint64_t v203 = v200 & v194;
    }
    double v204 = *(void ***)(*v191 + 8 * v203);
    if (v204)
    {
      double v205 = *v204;
      if (*v204)
      {
        if (v195.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v206 = v205[1];
            if (v206 == v194)
            {
              if (v205[2] == v194) {
                goto LABEL_271;
              }
            }
            else if ((v206 & v200) != v203)
            {
              goto LABEL_279;
            }
            double v205 = (void *)*v205;
            if (!v205) {
              goto LABEL_279;
            }
          }
        }
        do
        {
          unint64_t v208 = v205[1];
          if (v208 == v194)
          {
            if (v205[2] == v194)
            {
LABEL_271:
              double v207 = v2817;
              goto LABEL_320;
            }
          }
          else
          {
            if (v208 >= v190) {
              v208 %= v190;
            }
            if (v208 != v203) {
              break;
            }
          }
          double v205 = (void *)*v205;
        }
        while (v205);
      }
    }
LABEL_279:
    double v205 = operator new(0x30uLL);
    *double v205 = 0;
    v205[1] = v194;
    unint64_t v209 = v192[2];
    *((_OWORD *)v205 + 1) = *(_OWORD *)v192;
    float v210 = (float)(unint64_t)(*((void *)v2817 + 47) + 1);
    v205[4] = v209;
    v205[5] = 0;
    float v211 = *((float *)v2817 + 96);
    if ((float)(v211 * (float)v190) < v210)
    {
      BOOL v213 = v190 < 3 || v196 > 1;
      unint64_t v214 = v213 | (2 * v190);
      unint64_t v215 = vcvtps_u32_f32(v210 / v211);
      if (v214 <= v215) {
        size_t prime = v215;
      }
      else {
        size_t prime = v214;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v190 = *((void *)v2817 + 45);
      }
      if (prime > v190) {
        goto LABEL_294;
      }
      if (prime < v190)
      {
        unint64_t v217 = vcvtps_u32_f32((float)*((unint64_t *)v2817 + 47) / *((float *)v2817 + 96));
        if (v190 < 3 || (uint8x8_t v218 = (uint8x8_t)vcnt_s8((int8x8_t)v190), v218.i16[0] = vaddlv_u8(v218), v218.u32[0] > 1uLL))
        {
          unint64_t v217 = std::__next_prime(v217);
        }
        else
        {
          uint64_t v219 = 1 << -(char)__clz(v217 - 1);
          if (v217 >= 2) {
            unint64_t v217 = v219;
          }
        }
        if (prime <= v217) {
          size_t prime = v217;
        }
        if (prime < v190) {
LABEL_294:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v191, prime);
      }
      unint64_t v190 = *((void *)v2817 + 45);
      if ((v190 & (v190 - 1)) != 0)
      {
        if (v194 >= v190) {
          unint64_t v203 = v194 % v190;
        }
        else {
          unint64_t v203 = v194;
        }
      }
      else
      {
        unint64_t v203 = (v190 - 1) & v194;
      }
    }
    uint64_t v220 = *v191;
    float v221 = *(void **)(*v191 + 8 * v203);
    if (v221)
    {
      *double v205 = *v221;
      goto LABEL_318;
    }
    *double v205 = *v193;
    *uint64_t v193 = v205;
    *(void *)(v220 + 8 * v203) = v193;
    if (*v205)
    {
      unint64_t v222 = *(void *)(*v205 + 8);
      if ((v190 & (v190 - 1)) != 0)
      {
        if (v222 >= v190) {
          v222 %= v190;
        }
      }
      else
      {
        v222 &= v190 - 1;
      }
      float v221 = (void *)(*v191 + 8 * v222);
LABEL_318:
      *float v221 = v205;
    }
    double v207 = v2817;
    ++*((void *)v2817 + 47);
LABEL_320:
    (**(void (***)(void, void, float64x2_t *))v205[5])(v205[5], *((void *)v207 + 55), &v2833);
LABEL_321:
    ++v187;
    unint64_t v189 = v2817;
    if (v187 != v188)
    {
      v192 += 3;
      unint64_t v190 = *((void *)v2817 + 45);
      continue;
    }
    break;
  }
LABEL_323:
  uint64_t v223 = (int8x8_t *)*((void *)v189 + 55);
  uint64_t v224 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v223);
  int v225 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v223);
  uint64_t v226 = gdc::Registry::storage<md::pipelineECS::HasUVMapping>(v223);
  uint64_t v227 = (void *)v226;
  uint64_t v228 = v226 + 32;
  uint64_t v230 = (unint64_t *)v224[7];
  unint64_t v229 = (uint64_t *)v224[8];
  if (v225[8] - v225[7] >= (unint64_t)((char *)v229 - (char *)v230)) {
    uint64_t v231 = v224 + 4;
  }
  else {
    uint64_t v231 = v225 + 4;
  }
  if (*(void *)(v226 + 64) - *(void *)(v226 + 56) >= v231[4] - v231[3]) {
    uint64_t v232 = v231;
  }
  else {
    uint64_t v232 = (void *)(v226 + 32);
  }
  if (v224 + 4 == v232 && v230 != (unint64_t *)v229)
  {
    while (2)
    {
      unint64_t v510 = *((unsigned int *)v230 + 1);
      unint64_t v511 = v510 >> 7;
      uint64_t v512 = v225[4];
      unint64_t v513 = (v225[5] - v512) >> 3;
      if (v510 >> 7 >= v513) {
        goto LABEL_601;
      }
      uint64_t v514 = *(void *)(v512 + 8 * v511);
      if (!v514) {
        goto LABEL_601;
      }
      unint64_t v515 = *(unsigned __int16 *)(v514 + 2 * (v510 & 0x7F));
      uint64_t v517 = v225[7];
      uint64_t v516 = v225[8];
      unint64_t v518 = (v516 - v517) >> 3;
      if (v518 <= v515) {
        goto LABEL_601;
      }
      uint64_t v519 = v517 + 8 * v515;
      if (v519 == v516 || *(_DWORD *)(v519 + 4) != v510) {
        goto LABEL_601;
      }
      uint64_t v521 = v227[4];
      unint64_t v522 = (v227[5] - v521) >> 3;
      if (v511 >= v522) {
        goto LABEL_601;
      }
      uint64_t v523 = *(void *)(v521 + 8 * v511);
      if (!v523) {
        goto LABEL_601;
      }
      unint64_t v524 = *(unsigned __int16 *)(v523 + 2 * (v510 & 0x7F));
      uint64_t v526 = v227[7];
      uint64_t v525 = v227[8];
      unint64_t v527 = (v525 - v526) >> 3;
      if (v527 <= v524) {
        goto LABEL_601;
      }
      uint64_t v528 = v526 + 8 * v524;
      if (v528 == v525 || *(_DWORD *)(v528 + 4) != v510)
      {
LABEL_601:
        if (++v230 == (unint64_t *)v229) {
          goto LABEL_334;
        }
        continue;
      }
      break;
    }
    unint64_t v530 = *v230;
    unint64_t v531 = HIDWORD(*v230);
    unint64_t v532 = *v230 >> 39;
    if (v532 >= v513
      || (uint64_t v533 = *(void *)(v512 + 8 * v532)) == 0
      || (unint64_t v534 = *(unsigned __int16 *)(v533 + 2 * (HIDWORD(v530) & 0x7F)), v518 <= v534)
      || ((uint64_t v535 = v517 + 8 * v534, v535 != v516) ? (v536 = *(_DWORD *)(v535 + 4) == v531) : (v536 = 0), !v536))
    {
      if (v532 < v522) {
        goto LABEL_626;
      }
      goto LABEL_599;
    }
    if (v532 >= v522) {
      goto LABEL_599;
    }
LABEL_626:
    uint64_t v537 = *(void *)(v521 + 8 * v532);
    if (v537
      && (unint64_t v538 = *(unsigned __int16 *)(v537 + 2 * (HIDWORD(v530) & 0x7F)), v527 > v538)
      && ((uint64_t v539 = v526 + 8 * v538, v539 != v525) ? (v540 = *(_DWORD *)(v539 + 4) == v531) : (v540 = 0), v540))
    {
      uint64_t v509 = v227[10] + 8 * v538;
    }
    else
    {
LABEL_599:
      uint64_t v509 = v227[11];
    }
    (*(void (**)(void))(**(void **)v509 + 8))();
    goto LABEL_601;
  }
LABEL_334:
  if (v225 + 4 == v232)
  {
    v385 = (unint64_t *)v225[7];
    v386 = (uint64_t *)v225[8];
    if (v385 != (unint64_t *)v386)
    {
      uint64_t v387 = v225[10];
      do
      {
        unint64_t v1182 = *((unsigned int *)v385 + 1);
        unint64_t v1183 = v1182 >> 7;
        uint64_t v1184 = v224[4];
        if (v1182 >> 7 < (v224[5] - v1184) >> 3)
        {
          uint64_t v1185 = *(void *)(v1184 + 8 * v1183);
          if (v1185)
          {
            unint64_t v1186 = *(unsigned __int16 *)(v1185 + 2 * (v1182 & 0x7F));
            uint64_t v1188 = v224[7];
            uint64_t v1187 = v224[8];
            if (v1186 < (v1187 - v1188) >> 3)
            {
              uint64_t v1189 = v1188 + 8 * v1186;
              if (v1189 != v1187 && *(_DWORD *)(v1189 + 4) == v1182)
              {
                uint64_t v1191 = v227[4];
                unint64_t v1192 = (v227[5] - v1191) >> 3;
                if (v1183 < v1192)
                {
                  uint64_t v1193 = *(void *)(v1191 + 8 * v1183);
                  if (v1193)
                  {
                    unint64_t v1194 = *(unsigned __int16 *)(v1193 + 2 * (v1182 & 0x7F));
                    uint64_t v1196 = v227[7];
                    uint64_t v1195 = v227[8];
                    unint64_t v1197 = (v1195 - v1196) >> 3;
                    if (v1197 > v1194)
                    {
                      uint64_t v1198 = v1196 + 8 * v1194;
                      if (v1198 != v1195 && *(_DWORD *)(v1198 + 4) == v1182)
                      {
                        unint64_t v1200 = *v385;
                        unint64_t v1201 = *v385 >> 39;
                        if (v1201 < v1192
                          && (uint64_t v1202 = *(void *)(v1191 + 8 * v1201)) != 0
                          && (unint64_t v1203 = *(unsigned __int16 *)(v1202 + 2 * (HIDWORD(v1200) & 0x7F)), v1197 > v1203)
                          && ((unint64_t v1204 = HIDWORD(v1200), v1205 = v1196 + 8 * v1203, v1205 != v1195)
                            ? (BOOL v1206 = *(_DWORD *)(v1205 + 4) == v1204)
                            : (BOOL v1206 = 0),
                              v1206))
                        {
                          v1181 = (void *)(v227[10] + 8 * v1203);
                        }
                        else
                        {
                          v1181 = (void *)v227[11];
                        }
                        (*(void (**)(void, uint64_t))(*(void *)*v1181 + 8))(*v1181, v387);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v387 += 8;
        ++v385;
      }
      while (v385 != (unint64_t *)v386);
    }
  }
  if ((void *)v228 == v232)
  {
    v388 = (unint64_t *)v227[7];
    v389 = (uint64_t *)v227[8];
    if (v388 != (unint64_t *)v389)
    {
      uint64_t v390 = (void *)v227[10];
      do
      {
        unint64_t v1208 = *((unsigned int *)v388 + 1);
        unint64_t v1209 = v1208 >> 7;
        uint64_t v1210 = v224[4];
        if (v1208 >> 7 < (v224[5] - v1210) >> 3)
        {
          uint64_t v1211 = *(void *)(v1210 + 8 * v1209);
          if (v1211)
          {
            unint64_t v1212 = *(unsigned __int16 *)(v1211 + 2 * (v1208 & 0x7F));
            uint64_t v1214 = v224[7];
            uint64_t v1213 = v224[8];
            if (v1212 < (v1213 - v1214) >> 3)
            {
              uint64_t v1215 = v1214 + 8 * v1212;
              if (v1215 != v1213 && *(_DWORD *)(v1215 + 4) == v1208)
              {
                uint64_t v1217 = v225[4];
                unint64_t v1218 = (v225[5] - v1217) >> 3;
                if (v1209 < v1218)
                {
                  uint64_t v1219 = *(void *)(v1217 + 8 * v1209);
                  if (v1219)
                  {
                    unint64_t v1220 = *(unsigned __int16 *)(v1219 + 2 * (v1208 & 0x7F));
                    uint64_t v1222 = v225[7];
                    uint64_t v1221 = v225[8];
                    unint64_t v1223 = (v1221 - v1222) >> 3;
                    if (v1223 > v1220)
                    {
                      uint64_t v1224 = v1222 + 8 * v1220;
                      if (v1224 != v1221 && *(_DWORD *)(v1224 + 4) == v1208)
                      {
                        unint64_t v1226 = *v388;
                        unint64_t v1227 = *v388 >> 39;
                        if (v1227 < v1218
                          && (uint64_t v1228 = *(void *)(v1217 + 8 * v1227)) != 0
                          && (unint64_t v1229 = *(unsigned __int16 *)(v1228 + 2 * (HIDWORD(v1226) & 0x7F)), v1223 > v1229)
                          && ((unint64_t v1230 = HIDWORD(v1226), v1231 = v1222 + 8 * v1229, v1231 != v1221)
                            ? (BOOL v1232 = *(_DWORD *)(v1231 + 4) == v1230)
                            : (BOOL v1232 = 0),
                              v1232))
                        {
                          uint64_t v1207 = v225[10] + 8 * v1229;
                        }
                        else
                        {
                          uint64_t v1207 = v225[11];
                        }
                        (*(void (**)(void, uint64_t))(*(void *)*v390 + 8))(*v390, v1207);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v390;
        ++v388;
      }
      while (v388 != (unint64_t *)v389);
    }
  }
  uint64_t v234 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v235 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v234);
  uint64_t v236 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v234);
  uint64_t v237 = gdc::Registry::storage<md::pipelineECS::HasUVScale>(v234);
  unint64_t v238 = (void *)v237;
  uint64_t v239 = v237 + 32;
  long long v241 = (unint64_t *)v235[7];
  uint64_t v240 = (uint64_t *)v235[8];
  if (v236[8] - v236[7] >= (unint64_t)((char *)v240 - (char *)v241)) {
    long long v242 = v235 + 4;
  }
  else {
    long long v242 = v236 + 4;
  }
  if (*(void *)(v237 + 64) - *(void *)(v237 + 56) >= v242[4] - v242[3]) {
    uint64_t v243 = v242;
  }
  else {
    uint64_t v243 = (void *)(v237 + 32);
  }
  if (v235 + 4 == v243 && v241 != (unint64_t *)v240)
  {
    while (2)
    {
      unint64_t v542 = *((unsigned int *)v241 + 1);
      unint64_t v543 = v542 >> 7;
      uint64_t v544 = v236[4];
      unint64_t v545 = (v236[5] - v544) >> 3;
      if (v542 >> 7 >= v545) {
        goto LABEL_638;
      }
      uint64_t v546 = *(void *)(v544 + 8 * v543);
      if (!v546) {
        goto LABEL_638;
      }
      unint64_t v547 = *(unsigned __int16 *)(v546 + 2 * (v542 & 0x7F));
      uint64_t v549 = v236[7];
      uint64_t v548 = v236[8];
      unint64_t v550 = (v548 - v549) >> 3;
      if (v550 <= v547) {
        goto LABEL_638;
      }
      uint64_t v551 = v549 + 8 * v547;
      if (v551 == v548 || *(_DWORD *)(v551 + 4) != v542) {
        goto LABEL_638;
      }
      uint64_t v553 = v238[4];
      unint64_t v554 = (v238[5] - v553) >> 3;
      if (v543 >= v554) {
        goto LABEL_638;
      }
      uint64_t v555 = *(void *)(v553 + 8 * v543);
      if (!v555) {
        goto LABEL_638;
      }
      unint64_t v556 = *(unsigned __int16 *)(v555 + 2 * (v542 & 0x7F));
      uint64_t v558 = v238[7];
      uint64_t v557 = v238[8];
      unint64_t v559 = (v557 - v558) >> 3;
      if (v559 <= v556) {
        goto LABEL_638;
      }
      uint64_t v560 = v558 + 8 * v556;
      if (v560 == v557 || *(_DWORD *)(v560 + 4) != v542)
      {
LABEL_638:
        if (++v241 == (unint64_t *)v240) {
          goto LABEL_347;
        }
        continue;
      }
      break;
    }
    unint64_t v562 = *v241;
    unint64_t v563 = HIDWORD(*v241);
    unint64_t v564 = *v241 >> 39;
    if (v564 >= v545
      || (uint64_t v565 = *(void *)(v544 + 8 * v564)) == 0
      || (unint64_t v566 = *(unsigned __int16 *)(v565 + 2 * (HIDWORD(v562) & 0x7F)), v550 <= v566)
      || ((uint64_t v567 = v549 + 8 * v566, v567 != v548) ? (v568 = *(_DWORD *)(v567 + 4) == v563) : (v568 = 0), !v568))
    {
      if (v564 < v554) {
        goto LABEL_663;
      }
      goto LABEL_636;
    }
    if (v564 >= v554) {
      goto LABEL_636;
    }
LABEL_663:
    uint64_t v569 = *(void *)(v553 + 8 * v564);
    if (v569
      && (unint64_t v570 = *(unsigned __int16 *)(v569 + 2 * (HIDWORD(v562) & 0x7F)), v559 > v570)
      && ((uint64_t v571 = v558 + 8 * v570, v571 != v557) ? (v572 = *(_DWORD *)(v571 + 4) == v563) : (v572 = 0), v572))
    {
      uint64_t v541 = v238[10] + 8 * v570;
    }
    else
    {
LABEL_636:
      uint64_t v541 = v238[11];
    }
    (*(void (**)(void))(**(void **)v541 + 8))();
    goto LABEL_638;
  }
LABEL_347:
  if (v236 + 4 == v243)
  {
    uint64_t v391 = (unint64_t *)v236[7];
    v392 = (uint64_t *)v236[8];
    if (v391 != (unint64_t *)v392)
    {
      uint64_t v393 = v236[10];
      do
      {
        unint64_t v1234 = *((unsigned int *)v391 + 1);
        unint64_t v1235 = v1234 >> 7;
        uint64_t v1236 = v235[4];
        if (v1234 >> 7 < (v235[5] - v1236) >> 3)
        {
          uint64_t v1237 = *(void *)(v1236 + 8 * v1235);
          if (v1237)
          {
            unint64_t v1238 = *(unsigned __int16 *)(v1237 + 2 * (v1234 & 0x7F));
            uint64_t v1240 = v235[7];
            uint64_t v1239 = v235[8];
            if (v1238 < (v1239 - v1240) >> 3)
            {
              uint64_t v1241 = v1240 + 8 * v1238;
              if (v1241 != v1239 && *(_DWORD *)(v1241 + 4) == v1234)
              {
                uint64_t v1243 = v238[4];
                unint64_t v1244 = (v238[5] - v1243) >> 3;
                if (v1235 < v1244)
                {
                  uint64_t v1245 = *(void *)(v1243 + 8 * v1235);
                  if (v1245)
                  {
                    unint64_t v1246 = *(unsigned __int16 *)(v1245 + 2 * (v1234 & 0x7F));
                    uint64_t v1248 = v238[7];
                    uint64_t v1247 = v238[8];
                    unint64_t v1249 = (v1247 - v1248) >> 3;
                    if (v1249 > v1246)
                    {
                      uint64_t v1250 = v1248 + 8 * v1246;
                      if (v1250 != v1247 && *(_DWORD *)(v1250 + 4) == v1234)
                      {
                        unint64_t v1252 = *v391;
                        unint64_t v1253 = *v391 >> 39;
                        if (v1253 < v1244
                          && (uint64_t v1254 = *(void *)(v1243 + 8 * v1253)) != 0
                          && (unint64_t v1255 = *(unsigned __int16 *)(v1254 + 2 * (HIDWORD(v1252) & 0x7F)), v1249 > v1255)
                          && ((unint64_t v1256 = HIDWORD(v1252), v1257 = v1248 + 8 * v1255, v1257 != v1247)
                            ? (BOOL v1258 = *(_DWORD *)(v1257 + 4) == v1256)
                            : (BOOL v1258 = 0),
                              v1258))
                        {
                          v1233 = (void *)(v238[10] + 8 * v1255);
                        }
                        else
                        {
                          v1233 = (void *)v238[11];
                        }
                        (*(void (**)(void, uint64_t))(*(void *)*v1233 + 8))(*v1233, v393);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v393 += 8;
        ++v391;
      }
      while (v391 != (unint64_t *)v392);
    }
  }
  if ((void *)v239 == v243)
  {
    uint64_t v394 = (unint64_t *)v238[7];
    uint64_t v395 = (uint64_t *)v238[8];
    if (v394 != (unint64_t *)v395)
    {
      unint64_t v396 = (void *)v238[10];
      do
      {
        unint64_t v1260 = *((unsigned int *)v394 + 1);
        unint64_t v1261 = v1260 >> 7;
        uint64_t v1262 = v235[4];
        if (v1260 >> 7 < (v235[5] - v1262) >> 3)
        {
          uint64_t v1263 = *(void *)(v1262 + 8 * v1261);
          if (v1263)
          {
            unint64_t v1264 = *(unsigned __int16 *)(v1263 + 2 * (v1260 & 0x7F));
            uint64_t v1266 = v235[7];
            uint64_t v1265 = v235[8];
            if (v1264 < (v1265 - v1266) >> 3)
            {
              uint64_t v1267 = v1266 + 8 * v1264;
              if (v1267 != v1265 && *(_DWORD *)(v1267 + 4) == v1260)
              {
                uint64_t v1269 = v236[4];
                unint64_t v1270 = (v236[5] - v1269) >> 3;
                if (v1261 < v1270)
                {
                  uint64_t v1271 = *(void *)(v1269 + 8 * v1261);
                  if (v1271)
                  {
                    unint64_t v1272 = *(unsigned __int16 *)(v1271 + 2 * (v1260 & 0x7F));
                    uint64_t v1274 = v236[7];
                    uint64_t v1273 = v236[8];
                    unint64_t v1275 = (v1273 - v1274) >> 3;
                    if (v1275 > v1272)
                    {
                      uint64_t v1276 = v1274 + 8 * v1272;
                      if (v1276 != v1273 && *(_DWORD *)(v1276 + 4) == v1260)
                      {
                        unint64_t v1278 = *v394;
                        unint64_t v1279 = *v394 >> 39;
                        if (v1279 < v1270
                          && (uint64_t v1280 = *(void *)(v1269 + 8 * v1279)) != 0
                          && (unint64_t v1281 = *(unsigned __int16 *)(v1280 + 2 * (HIDWORD(v1278) & 0x7F)), v1275 > v1281)
                          && ((unint64_t v1282 = HIDWORD(v1278), v1283 = v1274 + 8 * v1281, v1283 != v1273)
                            ? (BOOL v1284 = *(_DWORD *)(v1283 + 4) == v1282)
                            : (BOOL v1284 = 0),
                              v1284))
                        {
                          uint64_t v1259 = v236[10] + 8 * v1281;
                        }
                        else
                        {
                          uint64_t v1259 = v236[11];
                        }
                        (*(void (**)(void, uint64_t))(*(void *)*v396 + 8))(*v396, v1259);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v396;
        ++v394;
      }
      while (v394 != (unint64_t *)v395);
    }
  }
  uint64_t v245 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v246 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v245);
  long long v247 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v245);
  uint64_t HasARLighting = gdc::Registry::storage<md::pipelineECS::HasARLightingSetup>(v245);
  uint64_t v249 = (void *)HasARLighting;
  uint64_t v250 = HasARLighting + 32;
  int v251 = (unint64_t *)v246[7];
  unint64_t v252 = (uint64_t *)v246[8];
  if (v247[8] - v247[7] >= (unint64_t)((char *)v252 - (char *)v251)) {
    v253 = v246 + 4;
  }
  else {
    v253 = v247 + 4;
  }
  if (*(void *)(HasARLighting + 64) - *(void *)(HasARLighting + 56) >= v253[4] - v253[3]) {
    char v254 = v253;
  }
  else {
    char v254 = (void *)(HasARLighting + 32);
  }
  if (v246 + 4 == v254 && v251 != (unint64_t *)v252)
  {
    float v261 = &off_1E5A8B000;
    do
    {
      unint64_t v471 = *((unsigned int *)v251 + 1);
      unint64_t v472 = v471 >> 7;
      uint64_t v473 = v247[4];
      unint64_t v474 = (v247[5] - v473) >> 3;
      if (v471 >> 7 < v474)
      {
        uint64_t v475 = *(void *)(v473 + 8 * v472);
        if (v475)
        {
          unint64_t v476 = *(unsigned __int16 *)(v475 + 2 * (v471 & 0x7F));
          uint64_t v478 = v247[7];
          uint64_t v477 = v247[8];
          unint64_t v479 = (v477 - v478) >> 3;
          if (v479 > v476)
          {
            uint64_t v480 = v478 + 8 * v476;
            if (v480 != v477 && *(_DWORD *)(v480 + 4) == v471)
            {
              uint64_t v482 = v249[4];
              unint64_t v483 = (v249[5] - v482) >> 3;
              if (v472 < v483)
              {
                uint64_t v484 = *(void *)(v482 + 8 * v472);
                if (v484)
                {
                  unint64_t v485 = *(unsigned __int16 *)(v484 + 2 * (v471 & 0x7F));
                  uint64_t v487 = v249[7];
                  uint64_t v486 = v249[8];
                  unint64_t v488 = (v486 - v487) >> 3;
                  if (v488 > v485)
                  {
                    uint64_t v489 = v487 + 8 * v485;
                    if (v489 != v486 && *(_DWORD *)(v489 + 4) == v471)
                    {
                      unint64_t v491 = *v251;
                      unint64_t v492 = HIDWORD(*v251);
                      unint64_t v493 = *v251 >> 39;
                      if (v493 < v474
                        && (uint64_t v494 = *(void *)(v473 + 8 * v493)) != 0
                        && (unint64_t v495 = *(unsigned __int16 *)(v494 + 2 * (HIDWORD(v491) & 0x7F)), v479 > v495)
                        && ((uint64_t v496 = v478 + 8 * v495, v496 != v477)
                          ? (BOOL v497 = *(_DWORD *)(v496 + 4) == v492)
                          : (BOOL v497 = 0),
                            v497))
                      {
                        uint64_t v498 = v247[10] + 8 * v495;
                      }
                      else
                      {
                        uint64_t v498 = v247[11];
                      }
                      uint64_t v2806 = v498;
                      if (v493 < v483
                        && (uint64_t v499 = *(void *)(v482 + 8 * v493)) != 0
                        && (unint64_t v500 = *(unsigned __int16 *)(v499 + 2 * (HIDWORD(v491) & 0x7F)), v488 > v500)
                        && ((uint64_t v501 = v487 + 8 * v500, v501 != v486)
                          ? (BOOL v502 = *(_DWORD *)(v501 + 4) == v492)
                          : (BOOL v502 = 0),
                            v502))
                      {
                        v503 = (uint64_t *)(v249[10] + 8 * v500);
                      }
                      else
                      {
                        v503 = (uint64_t *)v249[11];
                      }
                      v504 = [v261[32] sharedSettings];
                      uint64_t v505 = *v503;
                      [v504 arDebugStylingPOIEnvMapIntensity];
                      float v507 = v506;
                      [v504 arDebugStylingPOILightIntensity];
                      (*(void (**)(uint64_t, uint64_t, float, float))(*(void *)v505 + 8))(v505, v2806, v507, v508);

                      float v261 = &off_1E5A8B000;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v251;
    }
    while (v251 != (unint64_t *)v252);
  }
  if (v247 + 4 == v254)
  {
    uint64_t v397 = (unint64_t *)v247[7];
    uint64_t v398 = (uint64_t *)v247[8];
    if (v397 != (unint64_t *)v398)
    {
      uint64_t v399 = v247[10];
      v400 = &off_1E5A8B000;
      do
      {
        unint64_t v401 = *((unsigned int *)v397 + 1);
        unint64_t v402 = v401 >> 7;
        uint64_t v403 = v246[4];
        if (v401 >> 7 < (v246[5] - v403) >> 3)
        {
          uint64_t v404 = *(void *)(v403 + 8 * v402);
          if (v404)
          {
            unint64_t v405 = *(unsigned __int16 *)(v404 + 2 * (v401 & 0x7F));
            uint64_t v407 = v246[7];
            uint64_t v406 = v246[8];
            if (v405 < (v406 - v407) >> 3)
            {
              uint64_t v408 = v407 + 8 * v405;
              if (v408 != v406 && *(_DWORD *)(v408 + 4) == v401)
              {
                uint64_t v410 = v249[4];
                unint64_t v411 = (v249[5] - v410) >> 3;
                if (v402 < v411)
                {
                  uint64_t v412 = *(void *)(v410 + 8 * v402);
                  if (v412)
                  {
                    unint64_t v413 = *(unsigned __int16 *)(v412 + 2 * (v401 & 0x7F));
                    uint64_t v415 = v249[7];
                    uint64_t v414 = v249[8];
                    unint64_t v416 = (v414 - v415) >> 3;
                    if (v416 > v413)
                    {
                      uint64_t v417 = v415 + 8 * v413;
                      if (v417 != v414 && *(_DWORD *)(v417 + 4) == v401)
                      {
                        unint64_t v419 = *v397;
                        unint64_t v420 = *v397 >> 39;
                        if (v420 < v411
                          && (uint64_t v421 = *(void *)(v410 + 8 * v420)) != 0
                          && (unint64_t v422 = *(unsigned __int16 *)(v421 + 2 * (HIDWORD(v419) & 0x7F)), v416 > v422)
                          && ((unint64_t v423 = HIDWORD(v419), v424 = v415 + 8 * v422, v424 != v414)
                            ? (BOOL v425 = *(_DWORD *)(v424 + 4) == v423)
                            : (BOOL v425 = 0),
                              v425))
                        {
                          uint64_t v426 = (uint64_t *)(v249[10] + 8 * v422);
                        }
                        else
                        {
                          uint64_t v426 = (uint64_t *)v249[11];
                        }
                        v427 = [v400[32] sharedSettings];
                        uint64_t v428 = *v426;
                        [v427 arDebugStylingPOIEnvMapIntensity];
                        float v430 = v429;
                        [v427 arDebugStylingPOILightIntensity];
                        (*(void (**)(uint64_t, uint64_t, float, float))(*(void *)v428 + 8))(v428, v399, v430, v431);

                        v400 = &off_1E5A8B000;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v399 += 8;
        ++v397;
      }
      while (v397 != (unint64_t *)v398);
    }
  }
  if ((void *)v250 == v254)
  {
    float v432 = (unint64_t *)v249[7];
    float v433 = (uint64_t *)v249[8];
    if (v432 != (unint64_t *)v433)
    {
      uint64_t v434 = (uint64_t *)v249[10];
      do
      {
        unint64_t v435 = *((unsigned int *)v432 + 1);
        unint64_t v436 = v435 >> 7;
        uint64_t v437 = v246[4];
        if (v435 >> 7 < (v246[5] - v437) >> 3)
        {
          uint64_t v438 = *(void *)(v437 + 8 * v436);
          if (v438)
          {
            unint64_t v439 = *(unsigned __int16 *)(v438 + 2 * (v435 & 0x7F));
            uint64_t v441 = v246[7];
            uint64_t v440 = v246[8];
            if (v439 < (v440 - v441) >> 3)
            {
              uint64_t v442 = v441 + 8 * v439;
              if (v442 != v440 && *(_DWORD *)(v442 + 4) == v435)
              {
                uint64_t v444 = v247[4];
                unint64_t v445 = (v247[5] - v444) >> 3;
                if (v436 < v445)
                {
                  uint64_t v446 = *(void *)(v444 + 8 * v436);
                  if (v446)
                  {
                    unint64_t v447 = *(unsigned __int16 *)(v446 + 2 * (v435 & 0x7F));
                    uint64_t v449 = v247[7];
                    uint64_t v448 = v247[8];
                    unint64_t v450 = (v448 - v449) >> 3;
                    if (v450 > v447)
                    {
                      uint64_t v451 = v449 + 8 * v447;
                      if (v451 != v448 && *(_DWORD *)(v451 + 4) == v435)
                      {
                        unint64_t v453 = *v432;
                        unint64_t v454 = *v432 >> 39;
                        if (v454 < v445
                          && (uint64_t v455 = *(void *)(v444 + 8 * v454)) != 0
                          && (unint64_t v456 = *(unsigned __int16 *)(v455 + 2 * (HIDWORD(v453) & 0x7F)), v450 > v456)
                          && ((unint64_t v457 = HIDWORD(v453), v458 = v449 + 8 * v456, v458 != v448)
                            ? (BOOL v459 = *(_DWORD *)(v458 + 4) == v457)
                            : (BOOL v459 = 0),
                              v459))
                        {
                          uint64_t v460 = v247[10] + 8 * v456;
                        }
                        else
                        {
                          uint64_t v460 = v247[11];
                        }
                        uint64_t v461 = +[VKDebugSettings sharedSettings];
                        uint64_t v462 = *v434;
                        [v461 arDebugStylingPOIEnvMapIntensity];
                        float v464 = v463;
                        [v461 arDebugStylingPOILightIntensity];
                        (*(void (**)(uint64_t, uint64_t, float, float))(*(void *)v462 + 8))(v462, v460, v464, v465);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v434;
        ++v432;
      }
      while (v432 != (unint64_t *)v433);
    }
  }
  char v256 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v257 = (void *)*((void *)a2 + 1);
  int8x8_t v258 = (int8x8_t)v257[1];
  if (!*(void *)&v258) {
    goto LABEL_676;
  }
  uint8x8_t v259 = (uint8x8_t)vcnt_s8(v258);
  v259.i16[0] = vaddlv_u8(v259);
  if (v259.u32[0] > 1uLL)
  {
    uint64_t v260 = 0x1AF456233693CD46;
    if (*(void *)&v258 <= 0x1AF456233693CD46uLL) {
      uint64_t v260 = 0x1AF456233693CD46uLL % *(void *)&v258;
    }
  }
  else
  {
    uint64_t v260 = (*(void *)&v258 - 1) & 0x1AF456233693CD46;
  }
  unint64_t v466 = *(void **)(*v257 + 8 * v260);
  if (!v466) {
    goto LABEL_675;
  }
  uint64_t v467 = (void *)*v466;
  if (!v467) {
    goto LABEL_675;
  }
  if (v259.u32[0] < 2uLL)
  {
    uint64_t v468 = *(void *)&v258 - 1;
    while (1)
    {
      uint64_t v470 = v467[1];
      if (v470 == 0x1AF456233693CD46)
      {
        if (v467[2] == 0x1AF456233693CD46) {
          goto LABEL_673;
        }
      }
      else if ((v470 & v468) != v260)
      {
        goto LABEL_675;
      }
      uint64_t v467 = (void *)*v467;
      if (!v467) {
        goto LABEL_675;
      }
    }
  }
  while (2)
  {
    unint64_t v469 = v467[1];
    if (v469 != 0x1AF456233693CD46)
    {
      if (v469 >= *(void *)&v258) {
        v469 %= *(void *)&v258;
      }
      if (v469 != v260) {
        goto LABEL_675;
      }
      goto LABEL_552;
    }
    if (v467[2] != 0x1AF456233693CD46)
    {
LABEL_552:
      uint64_t v467 = (void *)*v467;
      if (!v467) {
        goto LABEL_675;
      }
      continue;
    }
    break;
  }
LABEL_673:
  uint64_t v573 = (int8x8_t *)v467[5];
  if (*(void *)&v573[1] == 0x1AF456233693CD46)
  {
    int8x8_t v258 = v573[4];
    goto LABEL_676;
  }
LABEL_675:
  int8x8_t v258 = 0;
LABEL_676:
  uint64_t v574 = (_OWORD *)(*(void *)&v258 + 808);
  long long v575 = v574[5];
  v2822[4] = v574[4];
  v2822[5] = v575;
  long long v576 = v574[7];
  v2822[6] = v574[6];
  v2822[7] = v576;
  long long v577 = v574[1];
  v2822[0] = *v574;
  v2822[1] = v577;
  long long v578 = v574[3];
  v2822[2] = v574[2];
  v2822[3] = v578;
  uint64_t v579 = gdc::Registry::storage<arComponents::WorldTransform>(v256);
  v580 = (void *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(v256);
  uint64_t v582 = v580[7];
  uint64_t v581 = v580[8];
  uint64_t v584 = *(unint64_t **)(v579 + 56);
  long long v583 = *(uint64_t **)(v579 + 64);
  v2798 = (void *)v579;
  if (v581 - v582 >= (unint64_t)((char *)v583 - (char *)v584)) {
    uint64_t v585 = (void *)(v579 + 32);
  }
  else {
    uint64_t v585 = v580 + 4;
  }
  v2801 = v585;
  v2807 = v580 + 4;
  if ((void *)(v579 + 32) == v585 && v584 != (unint64_t *)v583)
  {
    uint64_t v586 = v580[4];
    unint64_t v587 = (v580[5] - v586) >> 3;
    unint64_t v588 = (v581 - v582) >> 3;
    uint16x4_t v589 = (float32x4_t *)v580[11];
    uint64_t v2797 = v580[10];
    v2799 = v580;
    uint64_t v590 = v2798[10] + 40;
    do
    {
      unint64_t v607 = *((unsigned int *)v584 + 1);
      if (v607 >> 7 < v587)
      {
        uint64_t v608 = *(void *)(v586 + 8 * (v607 >> 7));
        if (v608)
        {
          unint64_t v609 = *(unsigned __int16 *)(v608 + 2 * (v607 & 0x7F));
          if (v588 > v609)
          {
            uint64_t v610 = v582 + 8 * v609;
            if (v610 != v581 && *(_DWORD *)(v610 + 4) == v607)
            {
              unint64_t v612 = *v584;
              unint64_t v613 = *v584 >> 39;
              uint64_t v614 = v589;
              if (v613 < v587)
              {
                uint64_t v615 = *(void *)(v586 + 8 * v613);
                uint64_t v614 = v589;
                if (v615)
                {
                  unint64_t v616 = *(unsigned __int16 *)(v615 + 2 * (HIDWORD(v612) & 0x7F));
                  uint64_t v614 = v589;
                  if (v588 > v616)
                  {
                    uint64_t v617 = v582 + 8 * v616;
                    if (*(_DWORD *)(v617 + 4) != HIDWORD(v612) || v617 == v581) {
                      uint64_t v614 = v589;
                    }
                    else {
                      uint64_t v614 = (float32x4_t *)(v2797 + (v616 << 6));
                    }
                  }
                }
              }
              double v591 = *(double *)(v590 - 16);
              double v592 = *(double *)(v590 - 8);
              double v593 = *(double *)v590;
              double v594 = *(double *)(v590 + 8);
              double v595 = v592 + v592;
              double v596 = (v592 + v592) * v592;
              double v597 = (v593 + v593) * v593;
              double v598 = v591 + v591;
              double v599 = (v591 + v591) * v592;
              double v600 = (v593 + v593) * v594;
              double v601 = *(double *)v590 * (v591 + v591);
              double v602 = v594 * v595;
              double v603 = v594 * v595 + v601;
              double v604 = 1.0 - (v591 + v591) * v591;
              double v605 = v595 * *(double *)v590;
              double v606 = v594 * v598;
              v2833.f64[0] = 1.0 - (v596 + v597);
              v2833.f64[1] = v600 + v599;
              v2835.f64[0] = v599 - v600;
              v2835.f64[1] = v604 - v597;
              v2837.f64[0] = v603;
              v2837.f64[1] = v605 - v606;
              v2834.f64[0] = v601 - v602;
              float64x2_t v2836 = (float64x2_t)COERCE_UNSIGNED_INT64(v606 + v605);
              v2838.f64[0] = v604 - v596;
              v2834.f64[1] = 0.0;
              v2838.f64[1] = 0.0;
              float64x2_t v2839 = *(float64x2_t *)(v590 - 40);
              v2840.f64[0] = *(float64_t *)(v590 - 24);
              v2840.f64[1] = 1.0;
              long long v2830 = 0u;
              long long v2831 = 0u;
              long long v2828 = 0u;
              long long v2829 = 0u;
              long long v2826 = 0u;
              long long v2827 = 0u;
              long long v2825 = 0u;
              uint64_t v2832 = 0x3FF0000000000000;
              uint64_t v2824 = *(void *)(v590 + 16);
              *(void *)&long long v2827 = *(void *)(v590 + 24);
              *((void *)&v2829 + 1) = *(void *)(v590 + 32);
              gm::operator*<double,4,4,4>(v2823, v2833.f64, (double *)&v2824);
              gm::operator*<double,4,4,4>(v2833.f64, (double *)v2822, v2823);
              *uint64_t v614 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2833), v2834);
              v614[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2835), v2836);
              v614[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2837), v2838);
              v614[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2839), v2840);
              v580 = v2799;
            }
          }
        }
      }
      ++v584;
      v590 += 80;
    }
    while (v584 != (unint64_t *)v583);
  }
  if (v2807 == v2801)
  {
    uint16x4_t v624 = (unint64_t *)v580[7];
    v625 = (uint64_t *)v580[8];
    if (v624 != (unint64_t *)v625)
    {
      uint64_t v626 = v2798[4];
      unint64_t v627 = (v2798[5] - v626) >> 3;
      uint64_t v629 = v2798[7];
      uint64_t v628 = v2798[8];
      unint64_t v630 = (v628 - v629) >> 3;
      uint64_t v631 = v2798[11];
      uint64_t v2808 = v2798[10];
      v632 = (float32x4_t *)(v580[10] + 32);
      do
      {
        unint64_t v650 = *((unsigned int *)v624 + 1);
        if (v650 >> 7 < v627)
        {
          uint64_t v651 = *(void *)(v626 + 8 * (v650 >> 7));
          if (v651)
          {
            unint64_t v652 = *(unsigned __int16 *)(v651 + 2 * (v650 & 0x7F));
            if (v630 > v652)
            {
              uint64_t v653 = v629 + 8 * v652;
              if (v653 != v628 && *(_DWORD *)(v653 + 4) == v650)
              {
                unint64_t v655 = *v624;
                unint64_t v656 = *v624 >> 39;
                uint64_t v657 = v631;
                if (v656 < v627)
                {
                  uint64_t v658 = *(void *)(v626 + 8 * v656);
                  uint64_t v657 = v631;
                  if (v658)
                  {
                    unint64_t v659 = *(unsigned __int16 *)(v658 + 2 * (HIDWORD(v655) & 0x7F));
                    uint64_t v657 = v631;
                    if (v630 > v659)
                    {
                      unint64_t v660 = HIDWORD(v655);
                      uint64_t v661 = v629 + 8 * v659;
                      BOOL v662 = *(_DWORD *)(v661 + 4) != v660 || v661 == v628;
                      uint64_t v657 = v2808 + 80 * v659;
                      if (v662) {
                        uint64_t v657 = v631;
                      }
                    }
                  }
                }
                double v633 = *(double *)(v657 + 24);
                double v634 = *(double *)(v657 + 32);
                double v635 = *(double *)(v657 + 40);
                double v636 = *(double *)(v657 + 48);
                double v637 = v634 + v634;
                double v638 = (v634 + v634) * v634;
                double v639 = (v635 + v635) * v635;
                double v640 = v633 + v633;
                double v641 = (v633 + v633) * v634;
                double v642 = (v635 + v635) * v636;
                double v643 = v635 * (v633 + v633);
                double v644 = v636 * v637;
                double v645 = v636 * v637 + v643;
                double v646 = 1.0 - (v633 + v633) * v633;
                double v647 = v637 * v635;
                double v648 = v636 * v640;
                v2833.f64[0] = 1.0 - (v638 + v639);
                v2833.f64[1] = v642 + v641;
                v2835.f64[0] = v641 - v642;
                v2835.f64[1] = v646 - v639;
                v2837.f64[0] = v645;
                v2837.f64[1] = v647 - v648;
                v2834.f64[0] = v643 - v644;
                float64x2_t v2836 = (float64x2_t)COERCE_UNSIGNED_INT64(v648 + v647);
                v2838.f64[0] = v646 - v638;
                v2834.f64[1] = 0.0;
                v2838.f64[1] = 0.0;
                float64x2_t v2839 = *(float64x2_t *)v657;
                v2840.f64[0] = *(float64_t *)(v657 + 16);
                v2840.f64[1] = 1.0;
                long long v2830 = 0u;
                long long v2831 = 0u;
                long long v2828 = 0u;
                long long v2829 = 0u;
                long long v2826 = 0u;
                long long v2827 = 0u;
                long long v2825 = 0u;
                uint64_t v2832 = 0x3FF0000000000000;
                uint64_t v649 = *(void *)(v657 + 64);
                uint64_t v2824 = *(void *)(v657 + 56);
                *(void *)&long long v2827 = v649;
                *((void *)&v2829 + 1) = *(void *)(v657 + 72);
                gm::operator*<double,4,4,4>(v2823, v2833.f64, (double *)&v2824);
                gm::operator*<double,4,4,4>(v2833.f64, (double *)v2822, v2823);
                v632[-2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2833), v2834);
                v632[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2835), v2836);
                float32x4_t *v632 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2837), v2838);
                v632[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2839), v2840);
              }
            }
          }
        }
        ++v624;
        v632 += 4;
      }
      while (v624 != (unint64_t *)v625);
    }
  }
  float v619 = (int8x8_t *)*((void *)v2817 + 55);
  float v620 = (void *)*((void *)a2 + 1);
  int8x8_t v621 = (int8x8_t)v620[1];
  if (v621)
  {
    uint8x8_t v622 = (uint8x8_t)vcnt_s8(v621);
    v622.i16[0] = vaddlv_u8(v622);
    if (v622.u32[0] > 1uLL)
    {
      uint64_t v623 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v621 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v623 = 0x3070CB6B3C7F21D3uLL % *(void *)&v621;
      }
    }
    else
    {
      uint64_t v623 = (*(void *)&v621 - 1) & 0x3070CB6B3C7F21D3;
    }
    long long v663 = *(void **)(*v620 + 8 * v623);
    if (v663)
    {
      uint64_t v664 = (void *)*v663;
      if (v664)
      {
        if (v622.u32[0] < 2uLL)
        {
          uint64_t v665 = *(void *)&v621 - 1;
          while (1)
          {
            uint64_t v667 = v664[1];
            if (v667 == 0x3070CB6B3C7F21D3)
            {
              if (v664[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_743;
              }
            }
            else if ((v667 & v665) != v623)
            {
              goto LABEL_743;
            }
            uint64_t v664 = (void *)*v664;
            if (!v664) {
              goto LABEL_743;
            }
          }
        }
        do
        {
          unint64_t v666 = v664[1];
          if (v666 == 0x3070CB6B3C7F21D3)
          {
            if (v664[2] == 0x3070CB6B3C7F21D3) {
              break;
            }
          }
          else
          {
            if (v666 >= *(void *)&v621) {
              v666 %= *(void *)&v621;
            }
            if (v666 != v623) {
              break;
            }
          }
          uint64_t v664 = (void *)*v664;
        }
        while (v664);
      }
    }
  }
LABEL_743:
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v2833);
  v668 = (void *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(v619);
  uint64_t v669 = gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(v619);
  uint64_t v670 = (void *)v669;
  uint64_t v671 = v669 + 32;
  uint64_t v673 = v668[7];
  uint64_t v672 = v668[8];
  if (*(void *)(v669 + 64) - *(void *)(v669 + 56) >= (unint64_t)(v672 - v673)) {
    char v674 = v668 + 4;
  }
  else {
    char v674 = (void *)(v669 + 32);
  }
  if (v668 + 4 == v674 && v673 != v672)
  {
    v701 = (std::__shared_weak_count **)(v668[10] + 8);
    do
    {
      unint64_t v702 = *(unsigned int *)(v673 + 4);
      uint64_t v703 = v670[4];
      if (v702 >> 7 < (v670[5] - v703) >> 3)
      {
        uint64_t v704 = *(void *)(v703 + 8 * (v702 >> 7));
        if (v704)
        {
          unint64_t v705 = *(unsigned __int16 *)(v704 + 2 * (v702 & 0x7F));
          uint64_t v707 = v670[7];
          uint64_t v706 = v670[8];
          if (v705 < (v706 - v707) >> 3)
          {
            uint64_t v708 = v707 + 8 * v705;
            if (v708 != v706 && *(_DWORD *)(v708 + 4) == v702)
            {
              float64x2_t v710 = v2833;
              if (*(void *)&v2833.f64[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v2833.f64[1] + 8), 1uLL, memory_order_relaxed);
              }
              unsigned int v711 = *v701;
              *(float64x2_t *)(v701 - 1) = v710;
              if (v711 && !atomic_fetch_add(&v711->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
                std::__shared_weak_count::__release_weak(v711);
              }
            }
          }
        }
      }
      v673 += 8;
      v701 += 2;
    }
    while (v673 != v672);
  }
  if ((void *)v671 == v674)
  {
    v722 = (unint64_t *)v670[7];
    uint64_t v723 = (uint64_t *)v670[8];
    if (v722 != (unint64_t *)v723)
    {
      while (2)
      {
        unint64_t v724 = *((unsigned int *)v722 + 1);
        uint64_t v725 = v668[4];
        unint64_t v726 = (v668[5] - v725) >> 3;
        if (v724 >> 7 >= v726) {
          goto LABEL_784;
        }
        uint64_t v727 = *(void *)(v725 + 8 * (v724 >> 7));
        if (!v727) {
          goto LABEL_784;
        }
        unint64_t v728 = *(unsigned __int16 *)(v727 + 2 * (v724 & 0x7F));
        uint64_t v730 = v668[7];
        uint64_t v729 = v668[8];
        unint64_t v731 = (v729 - v730) >> 3;
        if (v731 <= v728) {
          goto LABEL_784;
        }
        uint64_t v732 = v730 + 8 * v728;
        if (v732 == v729 || *(_DWORD *)(v732 + 4) != v724) {
          goto LABEL_784;
        }
        unint64_t v734 = *v722;
        unint64_t v735 = *v722 >> 39;
        if (v735 < v726
          && (uint64_t v736 = *(void *)(v725 + 8 * v735)) != 0
          && (unint64_t v737 = *(unsigned __int16 *)(v736 + 2 * (HIDWORD(v734) & 0x7F)), v731 > v737)
          && ((v738 = HIDWORD(v734), uint64_t v739 = v730 + 8 * v737, v739 != v729)
            ? (BOOL v740 = *(_DWORD *)(v739 + 4) == v738)
            : (BOOL v740 = 0),
              v740))
        {
          v741 = (float64_t *)(v668[10] + 16 * v737);
          float64_t v742 = v2833.f64[1];
          float64_t v743 = v2833.f64[0];
          if (*(void *)&v2833.f64[1]) {
LABEL_801:
          }
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v742 + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          v741 = (float64_t *)v668[11];
          float64_t v742 = v2833.f64[1];
          float64_t v743 = v2833.f64[0];
          if (*(void *)&v2833.f64[1]) {
            goto LABEL_801;
          }
        }
        v744 = (std::__shared_weak_count *)*((void *)v741 + 1);
        float64_t *v741 = v743;
        v741[1] = v742;
        if (v744 && !atomic_fetch_add(&v744->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v744->__on_zero_shared)(v744);
          std::__shared_weak_count::__release_weak(v744);
        }
LABEL_784:
        if (++v722 == (unint64_t *)v723) {
          break;
        }
        continue;
      }
    }
  }
  float64_t v676 = v2833.f64[1];
  if (*(void *)&v2833.f64[1]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v2833.f64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(float64_t))(**(void **)&v676 + 16))(COERCE_FLOAT64_T(*(void *)&v676));
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v676);
  }
  v677 = (int8x8_t *)*((void *)v2817 + 55);
  v678 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(v677);
  v679 = (void *)gdc::Registry::storage<arComponents::StyleColor>(v677);
  float32x4_t v680 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v677);
  v682 = (unint64_t *)v679[7];
  v681 = (uint64_t *)v679[8];
  v684 = (uint64_t *)v678[7];
  v683 = (uint64_t *)v678[8];
  if ((char *)v681 - (char *)v682 >= (unint64_t)((char *)v683 - (char *)v684)) {
    v685 = v678 + 4;
  }
  else {
    v685 = v679 + 4;
  }
  float32x4_t v687 = (unint64_t *)v680[7];
  float32x4_t v686 = (uint64_t *)v680[8];
  uint64_t v688 = (char *)v686 - (char *)v687;
  if ((unint64_t)((char *)v686 - (char *)v687) < v685[4] - v685[3]) {
    v685 = v680 + 4;
  }
  if (v678 + 4 == v685 && v684 != v683)
  {
    v712 = (uint64_t *)v678[10];
    uint64_t v713 = v679[4];
    unint64_t v714 = (v679[5] - v713) >> 3;
    unint64_t v715 = ((char *)v681 - (char *)v682) >> 3;
    uint64_t v716 = v680[4];
    unint64_t v717 = (v680[5] - v716) >> 3;
    unint64_t v718 = v688 >> 3;
    unsigned __int8 v719 = (float *)v679[11];
    uint64_t v2809 = v679[10];
    uint64_t v720 = (float *)v680[11];
    uint64_t v2802 = v680[10];
    v721 = (unint64_t *)v678[7];
    do
    {
      unint64_t v755 = *((unsigned int *)v721 + 1);
      unint64_t v756 = v755 >> 7;
      if (v755 >> 7 < v714)
      {
        uint64_t v757 = *(void *)(v713 + 8 * v756);
        if (v757)
        {
          unint64_t v758 = *(unsigned __int16 *)(v757 + 2 * (v755 & 0x7F));
          if (v715 > v758)
          {
            v759 = (uint64_t *)&v682[v758];
            BOOL v760 = v759 != v681 && *((_DWORD *)v759 + 1) == v755;
            if (v760 && v756 < v717)
            {
              uint64_t v762 = *(void *)(v716 + 8 * v756);
              if (v762)
              {
                unint64_t v763 = *(unsigned __int16 *)(v762 + 2 * (v755 & 0x7F));
                if (v718 > v763)
                {
                  v764 = (uint64_t *)&v687[v763];
                  if (v764 != v686 && *((_DWORD *)v764 + 1) == v755)
                  {
                    unint64_t v766 = *v721;
                    unint64_t v767 = HIDWORD(*v721);
                    unint64_t v768 = *v721 >> 39;
                    v769 = v719;
                    if (v768 < v714)
                    {
                      uint64_t v770 = *(void *)(v713 + 8 * v768);
                      v769 = v719;
                      if (v770)
                      {
                        unint64_t v771 = *(unsigned __int16 *)(v770 + 2 * (HIDWORD(v766) & 0x7F));
                        v769 = v719;
                        if (v715 > v771)
                        {
                          BOOL v772 = HIDWORD(v682[v771]) != v767 || &v682[v771] == (unint64_t *)v681;
                          v773 = (float *)(v2809 + 16 * v771);
                          if (v772) {
                            v769 = v719;
                          }
                          else {
                            v769 = v773;
                          }
                        }
                      }
                    }
                    v774 = v720;
                    if (v768 < v717)
                    {
                      uint64_t v775 = *(void *)(v716 + 8 * v768);
                      v774 = v720;
                      if (v775)
                      {
                        unint64_t v776 = *(unsigned __int16 *)(v775 + 2 * (HIDWORD(v766) & 0x7F));
                        v774 = v720;
                        if (v718 > v776)
                        {
                          v777 = (uint64_t *)&v687[v776];
                          BOOL v778 = *((_DWORD *)v777 + 1) != v767 || v777 == v686;
                          v779 = (float *)(v2802 + 4 * v776);
                          if (v778) {
                            v774 = v720;
                          }
                          else {
                            v774 = v779;
                          }
                        }
                      }
                    }
                    uint64_t v745 = *v712;
                    float v746 = *v774;
                    _S1 = *v769;
                    _S2 = *((_DWORD *)v769 + 1);
                    _S3 = *((_DWORD *)v769 + 2);
                    unint64_t v750 = *(void *)(*v712 + 8);
                    v751 = *(_WORD **)(*v712 + 72);
                    _S0 = v769[3] * v746;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            H3, S3
                      FCVT            H2, S2
                      FCVT            H1, S1
                    }
                    _WORD *v751 = LOWORD(_S1);
                    v751[1] = _S2;
                    v751[2] = _S3;
                    v751[3] = LOWORD(_S0);
                    if (*(void *)(v745 + 64) > v750) {
                      unint64_t v750 = *(void *)(v745 + 64);
                    }
                    *(void *)(v745 + 56) = 0;
                    *(void *)(v745 + 64) = v750;
                  }
                }
              }
            }
          }
        }
      }
      ++v712;
      ++v721;
    }
    while (v721 != (unint64_t *)v683);
  }
  if (v679 + 4 == v685 && v682 != (unint64_t *)v681)
  {
    uint64_t v690 = v678[4];
    unint64_t v691 = (v678[5] - v690) >> 3;
    unint64_t v692 = v683 - v684;
    uint64_t v693 = v680[4];
    unint64_t v694 = (v680[5] - v693) >> 3;
    unint64_t v695 = v688 >> 3;
    uint64_t v696 = v678[10];
    v697 = (uint64_t *)v678[11];
    uint64_t v698 = v680[10];
    v699 = (float *)v680[11];
    uint64_t v700 = v679[10] + 8;
    do
    {
      unint64_t v787 = *((unsigned int *)v682 + 1);
      unint64_t v788 = v787 >> 7;
      if (v787 >> 7 < v691)
      {
        uint64_t v789 = *(void *)(v690 + 8 * v788);
        if (v789)
        {
          unint64_t v790 = *(unsigned __int16 *)(v789 + 2 * (v787 & 0x7F));
          if (v692 > v790)
          {
            v791 = &v684[v790];
            BOOL v792 = v791 != v683 && *((_DWORD *)v791 + 1) == v787;
            if (v792 && v788 < v694)
            {
              uint64_t v794 = *(void *)(v693 + 8 * v788);
              if (v794)
              {
                unint64_t v795 = *(unsigned __int16 *)(v794 + 2 * (v787 & 0x7F));
                if (v695 > v795)
                {
                  v796 = (uint64_t *)&v687[v795];
                  if (v796 != v686 && *((_DWORD *)v796 + 1) == v787)
                  {
                    unint64_t v798 = *v682;
                    unint64_t v799 = HIDWORD(*v682);
                    unint64_t v800 = *v682 >> 39;
                    v801 = v697;
                    if (v800 < v691)
                    {
                      uint64_t v802 = *(void *)(v690 + 8 * v800);
                      v801 = v697;
                      if (v802)
                      {
                        unint64_t v803 = *(unsigned __int16 *)(v802 + 2 * (HIDWORD(v798) & 0x7F));
                        v801 = v697;
                        if (v692 > v803)
                        {
                          uint64_t v804 = 8 * v803;
                          v805 = &v684[v803];
                          BOOL v806 = *((_DWORD *)v805 + 1) != v799 || v805 == v683;
                          v801 = (uint64_t *)(v696 + v804);
                          if (v806) {
                            v801 = v697;
                          }
                        }
                      }
                    }
                    v807 = v699;
                    if (v800 < v694)
                    {
                      uint64_t v808 = *(void *)(v693 + 8 * v800);
                      v807 = v699;
                      if (v808)
                      {
                        unint64_t v809 = *(unsigned __int16 *)(v808 + 2 * (HIDWORD(v798) & 0x7F));
                        v807 = v699;
                        if (v695 > v809)
                        {
                          v810 = (uint64_t *)&v687[v809];
                          if (*((_DWORD *)v810 + 1) != v799 || v810 == v686) {
                            v807 = v699;
                          }
                          else {
                            v807 = (float *)(v698 + 4 * v809);
                          }
                        }
                      }
                    }
                    uint64_t v780 = *v801;
                    _S1 = *(_DWORD *)(v700 - 8);
                    _S2 = *(_DWORD *)(v700 - 4);
                    _S3 = *(_DWORD *)v700;
                    unint64_t v784 = *(void *)(*v801 + 8);
                    v785 = *(_WORD **)(*v801 + 72);
                    _S0 = *(float *)(v700 + 4) * *v807;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            H3, S3
                      FCVT            H2, S2
                      FCVT            H1, S1
                    }
                    _WORD *v785 = _S1;
                    v785[1] = _S2;
                    v785[2] = _S3;
                    v785[3] = LOWORD(_S0);
                    if (*(void *)(v780 + 64) > v784) {
                      unint64_t v784 = *(void *)(v780 + 64);
                    }
                    *(void *)(v780 + 56) = 0;
                    *(void *)(v780 + 64) = v784;
                  }
                }
              }
            }
          }
        }
      }
      ++v682;
      v700 += 16;
    }
    while (v682 != (unint64_t *)v681);
  }
  if (v680 + 4 == v685 && v687 != (unint64_t *)v686)
  {
    v812 = (float *)v680[10];
    uint64_t v813 = v678[4];
    unint64_t v814 = (v678[5] - v813) >> 3;
    uint64_t v816 = v678[7];
    uint64_t v815 = v678[8];
    unint64_t v817 = (v815 - v816) >> 3;
    uint64_t v818 = v679[4];
    unint64_t v819 = (v679[5] - v818) >> 3;
    uint64_t v821 = v679[7];
    uint64_t v820 = v679[8];
    unint64_t v822 = (v820 - v821) >> 3;
    uint64_t v823 = v678[10];
    v824 = (uint64_t *)v678[11];
    uint64_t v825 = v679[10];
    v826 = (float *)v679[11];
    do
    {
      unint64_t v834 = *((unsigned int *)v687 + 1);
      unint64_t v835 = v834 >> 7;
      if (v834 >> 7 < v814)
      {
        uint64_t v836 = *(void *)(v813 + 8 * v835);
        if (v836)
        {
          unint64_t v837 = *(unsigned __int16 *)(v836 + 2 * (v834 & 0x7F));
          if (v817 > v837)
          {
            uint64_t v838 = v816 + 8 * v837;
            BOOL v839 = v838 != v815 && *(_DWORD *)(v838 + 4) == v834;
            if (v839 && v835 < v819)
            {
              uint64_t v841 = *(void *)(v818 + 8 * v835);
              if (v841)
              {
                unint64_t v842 = *(unsigned __int16 *)(v841 + 2 * (v834 & 0x7F));
                if (v822 > v842)
                {
                  uint64_t v843 = v821 + 8 * v842;
                  if (v843 != v820 && *(_DWORD *)(v843 + 4) == v834)
                  {
                    unint64_t v845 = *v687;
                    unint64_t v846 = HIDWORD(*v687);
                    unint64_t v847 = *v687 >> 39;
                    v848 = v824;
                    if (v847 < v814)
                    {
                      uint64_t v849 = *(void *)(v813 + 8 * v847);
                      v848 = v824;
                      if (v849)
                      {
                        unint64_t v850 = *(unsigned __int16 *)(v849 + 2 * (HIDWORD(v845) & 0x7F));
                        v848 = v824;
                        if (v817 > v850)
                        {
                          uint64_t v851 = 8 * v850;
                          uint64_t v852 = v816 + 8 * v850;
                          BOOL v853 = *(_DWORD *)(v852 + 4) != v846 || v852 == v815;
                          v848 = (uint64_t *)(v823 + v851);
                          if (v853) {
                            v848 = v824;
                          }
                        }
                      }
                    }
                    v854 = v826;
                    if (v847 < v819)
                    {
                      uint64_t v855 = *(void *)(v818 + 8 * v847);
                      v854 = v826;
                      if (v855)
                      {
                        unint64_t v856 = *(unsigned __int16 *)(v855 + 2 * (HIDWORD(v845) & 0x7F));
                        v854 = v826;
                        if (v822 > v856)
                        {
                          uint64_t v857 = v821 + 8 * v856;
                          if (*(_DWORD *)(v857 + 4) != v846 || v857 == v820) {
                            v854 = v826;
                          }
                          else {
                            v854 = (float *)(v825 + 16 * v856);
                          }
                        }
                      }
                    }
                    uint64_t v827 = *v848;
                    _S1 = *v854;
                    _S2 = *((_DWORD *)v854 + 1);
                    _S3 = *((_DWORD *)v854 + 2);
                    unint64_t v831 = *(void *)(*v848 + 8);
                    v832 = *(_WORD **)(*v848 + 72);
                    _S0 = v854[3] * *v812;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            H3, S3
                      FCVT            H2, S2
                      FCVT            H1, S1
                    }
                    _WORD *v832 = LOWORD(_S1);
                    v832[1] = _S2;
                    v832[2] = _S3;
                    v832[3] = LOWORD(_S0);
                    if (*(void *)(v827 + 64) > v831) {
                      unint64_t v831 = *(void *)(v827 + 64);
                    }
                    *(void *)(v827 + 56) = 0;
                    *(void *)(v827 + 64) = v831;
                  }
                }
              }
            }
          }
        }
      }
      ++v812;
      ++v687;
    }
    while (v687 != (unint64_t *)v686);
  }
  v859 = (int8x8_t *)*((void *)v2817 + 55);
  v860 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(v859);
  uint64_t v861 = gdc::Registry::storage<arComponents::ViewConstantDataComponent>(v859);
  v862 = (void *)v861;
  uint64_t v863 = v861 + 32;
  v865 = (unint64_t *)v860[7];
  v864 = (uint64_t *)v860[8];
  if (*(void *)(v861 + 64) - *(void *)(v861 + 56) >= (unint64_t)((char *)v864 - (char *)v865)) {
    v866 = v860 + 4;
  }
  else {
    v866 = (void *)(v861 + 32);
  }
  if (v860 + 4 == v866 && v865 != (unint64_t *)v864)
  {
    v895 = (void **)v860[10];
    do
    {
      unint64_t v897 = *((unsigned int *)v865 + 1);
      uint64_t v898 = v862[4];
      unint64_t v899 = (v862[5] - v898) >> 3;
      if (v897 >> 7 < v899)
      {
        uint64_t v900 = *(void *)(v898 + 8 * (v897 >> 7));
        if (v900)
        {
          unint64_t v901 = *(unsigned __int16 *)(v900 + 2 * (v897 & 0x7F));
          uint64_t v903 = v862[7];
          uint64_t v902 = v862[8];
          unint64_t v904 = (v902 - v903) >> 3;
          if (v904 > v901)
          {
            uint64_t v905 = v903 + 8 * v901;
            if (v905 != v902 && *(_DWORD *)(v905 + 4) == v897)
            {
              unint64_t v907 = *v865;
              unint64_t v908 = *v865 >> 39;
              if (v908 < v899
                && (uint64_t v909 = *(void *)(v898 + 8 * v908)) != 0
                && (unint64_t v910 = *(unsigned __int16 *)(v909 + 2 * (HIDWORD(v907) & 0x7F)), v904 > v910)
                && ((unint64_t v911 = HIDWORD(v907), v912 = v903 + 8 * v910, v912 != v902)
                  ? (BOOL v913 = *(_DWORD *)(v912 + 4) == v911)
                  : (BOOL v913 = 0),
                    v913))
              {
                v896 = (_DWORD *)(v862[10] + (v910 << 6));
              }
              else
              {
                v896 = (_DWORD *)v862[11];
              }
              applyViewConstantData(gdc::Registry *)::$_0::operator()(*v895, v896);
            }
          }
        }
      }
      ++v895;
      ++v865;
    }
    while (v865 != (unint64_t *)v864);
  }
  if ((void *)v863 == v866)
  {
    v916 = (unint64_t *)v862[7];
    v917 = (uint64_t *)v862[8];
    if (v916 != (unint64_t *)v917)
    {
      v918 = (_DWORD *)v862[10];
      do
      {
        unint64_t v920 = *((unsigned int *)v916 + 1);
        uint64_t v921 = v860[4];
        unint64_t v922 = (v860[5] - v921) >> 3;
        if (v920 >> 7 < v922)
        {
          uint64_t v923 = *(void *)(v921 + 8 * (v920 >> 7));
          if (v923)
          {
            unint64_t v924 = *(unsigned __int16 *)(v923 + 2 * (v920 & 0x7F));
            uint64_t v926 = v860[7];
            uint64_t v925 = v860[8];
            unint64_t v927 = (v925 - v926) >> 3;
            if (v927 > v924)
            {
              uint64_t v928 = v926 + 8 * v924;
              if (v928 != v925 && *(_DWORD *)(v928 + 4) == v920)
              {
                unint64_t v930 = *v916;
                unint64_t v931 = *v916 >> 39;
                if (v931 < v922
                  && (uint64_t v932 = *(void *)(v921 + 8 * v931)) != 0
                  && (unint64_t v933 = *(unsigned __int16 *)(v932 + 2 * (HIDWORD(v930) & 0x7F)), v927 > v933)
                  && ((unint64_t v934 = HIDWORD(v930), v935 = v926 + 8 * v933, v935 != v925)
                    ? (BOOL v936 = *(_DWORD *)(v935 + 4) == v934)
                    : (BOOL v936 = 0),
                      v936))
                {
                  v919 = (void **)(v860[10] + 8 * v933);
                }
                else
                {
                  v919 = (void **)v860[11];
                }
                applyViewConstantData(gdc::Registry *)::$_0::operator()(*v919, v918);
              }
            }
          }
        }
        v918 += 16;
        ++v916;
      }
      while (v916 != (unint64_t *)v917);
    }
  }
  v868 = (int8x8_t *)*((void *)v2817 + 55);
  HasTransformInstanceDeviceData = (void *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(v868);
  v870 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v868);
  uint64_t v871 = gdc::Registry::storage<arComponents::MeshRenderableComponent>(v868);
  v872 = (void *)v871;
  uint64_t v873 = v871 + 32;
  uint64_t v875 = HasTransformInstanceDeviceData[7];
  uint64_t v874 = HasTransformInstanceDeviceData[8];
  if (v870[8] - v870[7] >= (unint64_t)(v874 - v875)) {
    v876 = HasTransformInstanceDeviceData + 4;
  }
  else {
    v876 = v870 + 4;
  }
  if (*(void *)(v871 + 64) - *(void *)(v871 + 56) >= v876[4] - v876[3]) {
    v877 = v876;
  }
  else {
    v877 = (void *)(v871 + 32);
  }
  if (HasTransformInstanceDeviceData + 4 == v877 && v875 != v874)
  {
    v914 = (void (****)(void))HasTransformInstanceDeviceData[10];
    do
    {
      unint64_t v954 = *(unsigned int *)(v875 + 4);
      unint64_t v955 = v954 >> 7;
      uint64_t v956 = v870[4];
      unint64_t v957 = (v870[5] - v956) >> 3;
      if (v954 >> 7 < v957)
      {
        uint64_t v958 = *(void *)(v956 + 8 * v955);
        if (v958)
        {
          unint64_t v959 = *(unsigned __int16 *)(v958 + 2 * (v954 & 0x7F));
          uint64_t v961 = v870[7];
          uint64_t v960 = v870[8];
          if ((v960 - v961) >> 3 > v959)
          {
            uint64_t v962 = v961 + 8 * v959;
            if (v962 != v960 && *(_DWORD *)(v962 + 4) == v954)
            {
              uint64_t v964 = v872[4];
              unint64_t v965 = (v872[5] - v964) >> 3;
              if (v955 < v965)
              {
                uint64_t v966 = *(void *)(v964 + 8 * v955);
                if (v966)
                {
                  unint64_t v967 = *(unsigned __int16 *)(v966 + 2 * (v954 & 0x7F));
                  uint64_t v969 = v872[7];
                  uint64_t v968 = v872[8];
                  if ((v968 - v969) >> 3 > v967)
                  {
                    uint64_t v970 = v969 + 8 * v967;
                    if (v970 != v968 && *(_DWORD *)(v970 + 4) == v954) {
                      (***v914)();
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v914;
      v875 += 8;
    }
    while (v875 != v874);
  }
  if (v870 + 4 == v877)
  {
    v937 = (unint64_t *)v870[7];
    v938 = (uint64_t *)v870[8];
    if (v937 != (unint64_t *)v938)
    {
      uint64_t v939 = v870[10];
      while (2)
      {
        unint64_t v1286 = *((unsigned int *)v937 + 1);
        unint64_t v1287 = v1286 >> 7;
        uint64_t v1288 = HasTransformInstanceDeviceData[4];
        unint64_t v1289 = (HasTransformInstanceDeviceData[5] - v1288) >> 3;
        if (v1286 >> 7 >= v1289) {
          goto LABEL_1391;
        }
        uint64_t v1290 = *(void *)(v1288 + 8 * v1287);
        if (!v1290) {
          goto LABEL_1391;
        }
        unint64_t v1291 = *(unsigned __int16 *)(v1290 + 2 * (v1286 & 0x7F));
        uint64_t v1293 = HasTransformInstanceDeviceData[7];
        uint64_t v1292 = HasTransformInstanceDeviceData[8];
        unint64_t v1294 = (v1292 - v1293) >> 3;
        if (v1294 <= v1291) {
          goto LABEL_1391;
        }
        uint64_t v1295 = v1293 + 8 * v1291;
        if (v1295 == v1292 || *(_DWORD *)(v1295 + 4) != v1286) {
          goto LABEL_1391;
        }
        uint64_t v1297 = v872[4];
        unint64_t v1298 = (v872[5] - v1297) >> 3;
        if (v1287 >= v1298) {
          goto LABEL_1391;
        }
        uint64_t v1299 = *(void *)(v1297 + 8 * v1287);
        if (!v1299) {
          goto LABEL_1391;
        }
        unint64_t v1300 = *(unsigned __int16 *)(v1299 + 2 * (v1286 & 0x7F));
        uint64_t v1302 = v872[7];
        uint64_t v1301 = v872[8];
        unint64_t v1303 = (v1301 - v1302) >> 3;
        if (v1303 <= v1300) {
          goto LABEL_1391;
        }
        uint64_t v1304 = v1302 + 8 * v1300;
        if (v1304 == v1301 || *(_DWORD *)(v1304 + 4) != v1286) {
          goto LABEL_1391;
        }
        unint64_t v1306 = *v937;
        unint64_t v1307 = HIDWORD(*v937);
        unint64_t v1308 = *v937 >> 39;
        if (v1308 >= v1289
          || (uint64_t v1309 = *(void *)(v1288 + 8 * v1308)) == 0
          || (unint64_t v1310 = *(unsigned __int16 *)(v1309 + 2 * (HIDWORD(v1306) & 0x7F)), v1294 <= v1310)
          || ((uint64_t v1311 = v1293 + 8 * v1310, v1311 != v1292)
            ? (BOOL v1312 = *(_DWORD *)(v1311 + 4) == v1307)
            : (BOOL v1312 = 0),
              !v1312))
        {
          v1313 = (void *)HasTransformInstanceDeviceData[11];
          if (v1308 < v1298) {
            goto LABEL_1416;
          }
          goto LABEL_1389;
        }
        v1313 = (void *)(HasTransformInstanceDeviceData[10] + 8 * v1310);
        if (v1308 >= v1298) {
          goto LABEL_1389;
        }
LABEL_1416:
        uint64_t v1314 = *(void *)(v1297 + 8 * v1308);
        if (v1314
          && (unint64_t v1315 = *(unsigned __int16 *)(v1314 + 2 * (HIDWORD(v1306) & 0x7F)), v1303 > v1315)
          && ((uint64_t v1316 = v1302 + 8 * v1315, v1316 != v1301)
            ? (BOOL v1317 = *(_DWORD *)(v1316 + 4) == v1307)
            : (BOOL v1317 = 0),
              v1317))
        {
          uint64_t v1285 = v872[10] + 224 * v1315;
        }
        else
        {
LABEL_1389:
          uint64_t v1285 = v872[11];
        }
        (**(void (***)(void, uint64_t, uint64_t))*v1313)(*v1313, v939, v1285);
LABEL_1391:
        v939 += 8;
        if (++v937 == (unint64_t *)v938) {
          break;
        }
        continue;
      }
    }
  }
  if ((void *)v873 == v877)
  {
    v940 = (unint64_t *)v872[7];
    v941 = (uint64_t *)v872[8];
    if (v940 != (unint64_t *)v941)
    {
      uint64_t v942 = v872[10];
      while (2)
      {
        unint64_t v1319 = *((unsigned int *)v940 + 1);
        unint64_t v1320 = v1319 >> 7;
        uint64_t v1321 = HasTransformInstanceDeviceData[4];
        unint64_t v1322 = (HasTransformInstanceDeviceData[5] - v1321) >> 3;
        if (v1319 >> 7 >= v1322) {
          goto LABEL_1428;
        }
        uint64_t v1323 = *(void *)(v1321 + 8 * v1320);
        if (!v1323) {
          goto LABEL_1428;
        }
        unint64_t v1324 = *(unsigned __int16 *)(v1323 + 2 * (v1319 & 0x7F));
        uint64_t v1326 = HasTransformInstanceDeviceData[7];
        uint64_t v1325 = HasTransformInstanceDeviceData[8];
        unint64_t v1327 = (v1325 - v1326) >> 3;
        if (v1327 <= v1324) {
          goto LABEL_1428;
        }
        uint64_t v1328 = v1326 + 8 * v1324;
        if (v1328 == v1325 || *(_DWORD *)(v1328 + 4) != v1319) {
          goto LABEL_1428;
        }
        uint64_t v1330 = v870[4];
        unint64_t v1331 = (v870[5] - v1330) >> 3;
        if (v1320 >= v1331) {
          goto LABEL_1428;
        }
        uint64_t v1332 = *(void *)(v1330 + 8 * v1320);
        if (!v1332) {
          goto LABEL_1428;
        }
        unint64_t v1333 = *(unsigned __int16 *)(v1332 + 2 * (v1319 & 0x7F));
        uint64_t v1335 = v870[7];
        uint64_t v1334 = v870[8];
        unint64_t v1336 = (v1334 - v1335) >> 3;
        if (v1336 <= v1333) {
          goto LABEL_1428;
        }
        uint64_t v1337 = v1335 + 8 * v1333;
        if (v1337 == v1334 || *(_DWORD *)(v1337 + 4) != v1319) {
          goto LABEL_1428;
        }
        unint64_t v1339 = *v940;
        unint64_t v1340 = HIDWORD(*v940);
        unint64_t v1341 = *v940 >> 39;
        if (v1341 >= v1322
          || (uint64_t v1342 = *(void *)(v1321 + 8 * v1341)) == 0
          || (unint64_t v1343 = *(unsigned __int16 *)(v1342 + 2 * (HIDWORD(v1339) & 0x7F)), v1327 <= v1343)
          || ((uint64_t v1344 = v1326 + 8 * v1343, v1344 != v1325)
            ? (BOOL v1345 = *(_DWORD *)(v1344 + 4) == v1340)
            : (BOOL v1345 = 0),
              !v1345))
        {
          v1346 = (void *)HasTransformInstanceDeviceData[11];
          if (v1341 < v1331) {
            goto LABEL_1453;
          }
          goto LABEL_1426;
        }
        v1346 = (void *)(HasTransformInstanceDeviceData[10] + 8 * v1343);
        if (v1341 >= v1331) {
          goto LABEL_1426;
        }
LABEL_1453:
        uint64_t v1347 = *(void *)(v1330 + 8 * v1341);
        if (v1347
          && (unint64_t v1348 = *(unsigned __int16 *)(v1347 + 2 * (HIDWORD(v1339) & 0x7F)), v1336 > v1348)
          && ((uint64_t v1349 = v1335 + 8 * v1348, v1349 != v1334)
            ? (BOOL v1350 = *(_DWORD *)(v1349 + 4) == v1340)
            : (BOOL v1350 = 0),
              v1350))
        {
          uint64_t v1318 = v870[10] + 8 * v1348;
        }
        else
        {
LABEL_1426:
          uint64_t v1318 = v870[11];
        }
        (**(void (***)(void, uint64_t, uint64_t))*v1346)(*v1346, v1318, v942);
LABEL_1428:
        v942 += 224;
        if (++v940 == (unint64_t *)v941) {
          break;
        }
        continue;
      }
    }
  }
  v879 = (int8x8_t *)*((void *)v2817 + 55);
  HasTransformConstant = (void *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(v879);
  v881 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v879);
  uint64_t v882 = gdc::Registry::storage<arComponents::TransformConstantDataComponent>(v879);
  v883 = (void *)v882;
  uint64_t v884 = v882 + 32;
  uint64_t v886 = HasTransformConstant[7];
  uint64_t v885 = HasTransformConstant[8];
  if (v881[8] - v881[7] >= (unint64_t)(v885 - v886)) {
    v887 = HasTransformConstant + 4;
  }
  else {
    v887 = v881 + 4;
  }
  if (*(void *)(v882 + 64) - *(void *)(v882 + 56) >= v887[4] - v887[3]) {
    v888 = v887;
  }
  else {
    v888 = (void *)(v882 + 32);
  }
  if (HasTransformConstant + 4 == v888 && v886 != v885)
  {
    v915 = (void (****)(void))HasTransformConstant[10];
    do
    {
      unint64_t v972 = *(unsigned int *)(v886 + 4);
      unint64_t v973 = v972 >> 7;
      uint64_t v974 = v881[4];
      unint64_t v975 = (v881[5] - v974) >> 3;
      if (v972 >> 7 < v975)
      {
        uint64_t v976 = *(void *)(v974 + 8 * v973);
        if (v976)
        {
          unint64_t v977 = *(unsigned __int16 *)(v976 + 2 * (v972 & 0x7F));
          uint64_t v979 = v881[7];
          uint64_t v978 = v881[8];
          if ((v978 - v979) >> 3 > v977)
          {
            uint64_t v980 = v979 + 8 * v977;
            if (v980 != v978 && *(_DWORD *)(v980 + 4) == v972)
            {
              uint64_t v982 = v883[4];
              unint64_t v983 = (v883[5] - v982) >> 3;
              if (v973 < v983)
              {
                uint64_t v984 = *(void *)(v982 + 8 * v973);
                if (v984)
                {
                  unint64_t v985 = *(unsigned __int16 *)(v984 + 2 * (v972 & 0x7F));
                  uint64_t v987 = v883[7];
                  uint64_t v986 = v883[8];
                  if ((v986 - v987) >> 3 > v985)
                  {
                    uint64_t v988 = v987 + 8 * v985;
                    if (v988 != v986 && *(_DWORD *)(v988 + 4) == v972) {
                      (***v915)();
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v915;
      v886 += 8;
    }
    while (v886 != v885);
  }
  if (v881 + 4 == v888)
  {
    v943 = (unint64_t *)v881[7];
    v944 = (uint64_t *)v881[8];
    if (v943 != (unint64_t *)v944)
    {
      uint64_t v945 = v881[10];
      while (2)
      {
        unint64_t v1352 = *((unsigned int *)v943 + 1);
        unint64_t v1353 = v1352 >> 7;
        uint64_t v1354 = HasTransformConstant[4];
        unint64_t v1355 = (HasTransformConstant[5] - v1354) >> 3;
        if (v1352 >> 7 >= v1355) {
          goto LABEL_1465;
        }
        uint64_t v1356 = *(void *)(v1354 + 8 * v1353);
        if (!v1356) {
          goto LABEL_1465;
        }
        unint64_t v1357 = *(unsigned __int16 *)(v1356 + 2 * (v1352 & 0x7F));
        uint64_t v1359 = HasTransformConstant[7];
        uint64_t v1358 = HasTransformConstant[8];
        unint64_t v1360 = (v1358 - v1359) >> 3;
        if (v1360 <= v1357) {
          goto LABEL_1465;
        }
        uint64_t v1361 = v1359 + 8 * v1357;
        if (v1361 == v1358 || *(_DWORD *)(v1361 + 4) != v1352) {
          goto LABEL_1465;
        }
        uint64_t v1363 = v883[4];
        unint64_t v1364 = (v883[5] - v1363) >> 3;
        if (v1353 >= v1364) {
          goto LABEL_1465;
        }
        uint64_t v1365 = *(void *)(v1363 + 8 * v1353);
        if (!v1365) {
          goto LABEL_1465;
        }
        unint64_t v1366 = *(unsigned __int16 *)(v1365 + 2 * (v1352 & 0x7F));
        uint64_t v1368 = v883[7];
        uint64_t v1367 = v883[8];
        unint64_t v1369 = (v1367 - v1368) >> 3;
        if (v1369 <= v1366) {
          goto LABEL_1465;
        }
        uint64_t v1370 = v1368 + 8 * v1366;
        if (v1370 == v1367 || *(_DWORD *)(v1370 + 4) != v1352) {
          goto LABEL_1465;
        }
        unint64_t v1372 = *v943;
        unint64_t v1373 = HIDWORD(*v943);
        unint64_t v1374 = *v943 >> 39;
        if (v1374 >= v1355
          || (uint64_t v1375 = *(void *)(v1354 + 8 * v1374)) == 0
          || (unint64_t v1376 = *(unsigned __int16 *)(v1375 + 2 * (HIDWORD(v1372) & 0x7F)), v1360 <= v1376)
          || ((uint64_t v1377 = v1359 + 8 * v1376, v1377 != v1358)
            ? (BOOL v1378 = *(_DWORD *)(v1377 + 4) == v1373)
            : (BOOL v1378 = 0),
              !v1378))
        {
          v1379 = (void *)HasTransformConstant[11];
          if (v1374 < v1364) {
            goto LABEL_1490;
          }
          goto LABEL_1463;
        }
        v1379 = (void *)(HasTransformConstant[10] + 8 * v1376);
        if (v1374 >= v1364) {
          goto LABEL_1463;
        }
LABEL_1490:
        uint64_t v1380 = *(void *)(v1363 + 8 * v1374);
        if (v1380
          && (unint64_t v1381 = *(unsigned __int16 *)(v1380 + 2 * (HIDWORD(v1372) & 0x7F)), v1369 > v1381)
          && ((uint64_t v1382 = v1368 + 8 * v1381, v1382 != v1367)
            ? (BOOL v1383 = *(_DWORD *)(v1382 + 4) == v1373)
            : (BOOL v1383 = 0),
              v1383))
        {
          uint64_t v1351 = v883[10] + 16 * v1381;
        }
        else
        {
LABEL_1463:
          uint64_t v1351 = v883[11];
        }
        (**(void (***)(void, uint64_t, uint64_t))*v1379)(*v1379, v945, v1351);
LABEL_1465:
        v945 += 8;
        if (++v943 == (unint64_t *)v944) {
          break;
        }
        continue;
      }
    }
  }
  if ((void *)v884 == v888)
  {
    v946 = (unint64_t *)v883[7];
    v947 = (uint64_t *)v883[8];
    if (v946 != (unint64_t *)v947)
    {
      uint64_t v948 = v883[10];
      while (2)
      {
        unint64_t v1385 = *((unsigned int *)v946 + 1);
        unint64_t v1386 = v1385 >> 7;
        uint64_t v1387 = HasTransformConstant[4];
        unint64_t v1388 = (HasTransformConstant[5] - v1387) >> 3;
        if (v1385 >> 7 >= v1388) {
          goto LABEL_1502;
        }
        uint64_t v1389 = *(void *)(v1387 + 8 * v1386);
        if (!v1389) {
          goto LABEL_1502;
        }
        unint64_t v1390 = *(unsigned __int16 *)(v1389 + 2 * (v1385 & 0x7F));
        uint64_t v1392 = HasTransformConstant[7];
        uint64_t v1391 = HasTransformConstant[8];
        unint64_t v1393 = (v1391 - v1392) >> 3;
        if (v1393 <= v1390) {
          goto LABEL_1502;
        }
        uint64_t v1394 = v1392 + 8 * v1390;
        if (v1394 == v1391 || *(_DWORD *)(v1394 + 4) != v1385) {
          goto LABEL_1502;
        }
        uint64_t v1396 = v881[4];
        unint64_t v1397 = (v881[5] - v1396) >> 3;
        if (v1386 >= v1397) {
          goto LABEL_1502;
        }
        uint64_t v1398 = *(void *)(v1396 + 8 * v1386);
        if (!v1398) {
          goto LABEL_1502;
        }
        unint64_t v1399 = *(unsigned __int16 *)(v1398 + 2 * (v1385 & 0x7F));
        uint64_t v1401 = v881[7];
        uint64_t v1400 = v881[8];
        unint64_t v1402 = (v1400 - v1401) >> 3;
        if (v1402 <= v1399) {
          goto LABEL_1502;
        }
        uint64_t v1403 = v1401 + 8 * v1399;
        if (v1403 == v1400 || *(_DWORD *)(v1403 + 4) != v1385) {
          goto LABEL_1502;
        }
        unint64_t v1405 = *v946;
        unint64_t v1406 = HIDWORD(*v946);
        unint64_t v1407 = *v946 >> 39;
        if (v1407 >= v1388
          || (uint64_t v1408 = *(void *)(v1387 + 8 * v1407)) == 0
          || (unint64_t v1409 = *(unsigned __int16 *)(v1408 + 2 * (HIDWORD(v1405) & 0x7F)), v1393 <= v1409)
          || ((uint64_t v1410 = v1392 + 8 * v1409, v1410 != v1391)
            ? (BOOL v1411 = *(_DWORD *)(v1410 + 4) == v1406)
            : (BOOL v1411 = 0),
              !v1411))
        {
          v1412 = (void *)HasTransformConstant[11];
          if (v1407 < v1397) {
            goto LABEL_1527;
          }
          goto LABEL_1500;
        }
        v1412 = (void *)(HasTransformConstant[10] + 8 * v1409);
        if (v1407 >= v1397) {
          goto LABEL_1500;
        }
LABEL_1527:
        uint64_t v1413 = *(void *)(v1396 + 8 * v1407);
        if (v1413
          && (unint64_t v1414 = *(unsigned __int16 *)(v1413 + 2 * (HIDWORD(v1405) & 0x7F)), v1402 > v1414)
          && ((uint64_t v1415 = v1401 + 8 * v1414, v1415 != v1400)
            ? (BOOL v1416 = *(_DWORD *)(v1415 + 4) == v1406)
            : (BOOL v1416 = 0),
              v1416))
        {
          uint64_t v1384 = v881[10] + 8 * v1414;
        }
        else
        {
LABEL_1500:
          uint64_t v1384 = v881[11];
        }
        (**(void (***)(void, uint64_t, uint64_t))*v1412)(*v1412, v1384, v948);
LABEL_1502:
        v948 += 16;
        if (++v946 == (unint64_t *)v947) {
          break;
        }
        continue;
      }
    }
  }
  v890 = (int8x8_t *)*((void *)v2817 + 55);
  v891 = (void *)*((void *)a2 + 1);
  int8x8_t v892 = (int8x8_t)v891[1];
  if (!*(void *)&v892) {
    goto LABEL_1069;
  }
  uint8x8_t v893 = (uint8x8_t)vcnt_s8(v892);
  v893.i16[0] = vaddlv_u8(v893);
  if (v893.u32[0] > 1uLL)
  {
    uint64_t v894 = 0x1AF456233693CD46;
    if (*(void *)&v892 <= 0x1AF456233693CD46uLL) {
      uint64_t v894 = 0x1AF456233693CD46uLL % *(void *)&v892;
    }
  }
  else
  {
    uint64_t v894 = (*(void *)&v892 - 1) & 0x1AF456233693CD46;
  }
  v949 = *(void **)(*v891 + 8 * v894);
  if (!v949) {
    goto LABEL_1069;
  }
  v950 = (void *)*v949;
  if (!v950) {
    goto LABEL_1069;
  }
  if (v893.u32[0] < 2uLL)
  {
    uint64_t v951 = *(void *)&v892 - 1;
    while (1)
    {
      uint64_t v953 = v950[1];
      if (v953 == 0x1AF456233693CD46)
      {
        if (v950[2] == 0x1AF456233693CD46) {
          goto LABEL_1067;
        }
      }
      else if ((v953 & v951) != v894)
      {
        goto LABEL_1069;
      }
      v950 = (void *)*v950;
      if (!v950) {
        goto LABEL_1069;
      }
    }
  }
  while (2)
  {
    unint64_t v952 = v950[1];
    if (v952 != 0x1AF456233693CD46)
    {
      if (v952 >= *(void *)&v892) {
        v952 %= *(void *)&v892;
      }
      if (v952 != v894) {
        goto LABEL_1069;
      }
      goto LABEL_1020;
    }
    if (v950[2] != 0x1AF456233693CD46)
    {
LABEL_1020:
      v950 = (void *)*v950;
      if (!v950) {
        goto LABEL_1069;
      }
      continue;
    }
    break;
  }
LABEL_1067:
  uint64_t v990 = v950[5];
  if (*(void *)(v990 + 8) == 0x1AF456233693CD46)
  {
    v991 = *(double **)(v990 + 32);
    goto LABEL_1070;
  }
LABEL_1069:
  v991 = 0;
LABEL_1070:
  v992 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(*((int8x8_t **)v2817 + 55));
  uint64_t v993 = gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>(v890);
  v994 = (void *)v993;
  uint64_t v995 = v993 + 32;
  v997 = (unint64_t *)v992[7];
  v996 = (uint64_t *)v992[8];
  if (*(void *)(v993 + 64) - *(void *)(v993 + 56) >= (unint64_t)((char *)v996 - (char *)v997)) {
    v998 = v992 + 4;
  }
  else {
    v998 = (void *)(v993 + 32);
  }
  if (v992 + 4 == v998 && v997 != (unint64_t *)v996)
  {
    uint64_t v1045 = v992[10];
    do
    {
      unint64_t v1047 = *((unsigned int *)v997 + 1);
      uint64_t v1048 = v994[4];
      unint64_t v1049 = (v994[5] - v1048) >> 3;
      if (v1047 >> 7 < v1049)
      {
        uint64_t v1050 = *(void *)(v1048 + 8 * (v1047 >> 7));
        if (v1050)
        {
          unint64_t v1051 = *(unsigned __int16 *)(v1050 + 2 * (v1047 & 0x7F));
          uint64_t v1053 = v994[7];
          uint64_t v1052 = v994[8];
          unint64_t v1054 = (v1052 - v1053) >> 3;
          if (v1054 > v1051)
          {
            uint64_t v1055 = v1053 + 8 * v1051;
            if (v1055 != v1052 && *(_DWORD *)(v1055 + 4) == v1047)
            {
              unint64_t v1057 = *v997;
              unint64_t v1058 = *v997 >> 39;
              if (v1058 < v1049
                && (uint64_t v1059 = *(void *)(v1048 + 8 * v1058)) != 0
                && (unint64_t v1060 = *(unsigned __int16 *)(v1059 + 2 * (HIDWORD(v1057) & 0x7F)), v1054 > v1060)
                && ((unint64_t v1061 = HIDWORD(v1057), v1062 = v1053 + 8 * v1060, v1062 != v1052)
                  ? (BOOL v1063 = *(_DWORD *)(v1062 + 4) == v1061)
                  : (BOOL v1063 = 0),
                    v1063))
              {
                v1046 = (void **)(v994[10] + 8 * v1060);
              }
              else
              {
                v1046 = (void **)v994[11];
              }
              applyCameraViewConstant(gdc::Registry *,md::LayoutContext const&)::$_0::operator()(v991, v1045, *v1046);
            }
          }
        }
      }
      v1045 += 80;
      ++v997;
    }
    while (v997 != (unint64_t *)v996);
  }
  if ((void *)v995 == v998)
  {
    v1064 = (unint64_t *)v994[7];
    v1065 = (uint64_t *)v994[8];
    if (v1064 != (unint64_t *)v1065)
    {
      v1066 = (void **)v994[10];
      do
      {
        unint64_t v1068 = *((unsigned int *)v1064 + 1);
        uint64_t v1069 = v992[4];
        unint64_t v1070 = (v992[5] - v1069) >> 3;
        if (v1068 >> 7 < v1070)
        {
          uint64_t v1071 = *(void *)(v1069 + 8 * (v1068 >> 7));
          if (v1071)
          {
            unint64_t v1072 = *(unsigned __int16 *)(v1071 + 2 * (v1068 & 0x7F));
            uint64_t v1074 = v992[7];
            uint64_t v1073 = v992[8];
            unint64_t v1075 = (v1073 - v1074) >> 3;
            if (v1075 > v1072)
            {
              uint64_t v1076 = v1074 + 8 * v1072;
              if (v1076 != v1073 && *(_DWORD *)(v1076 + 4) == v1068)
              {
                unint64_t v1078 = *v1064;
                unint64_t v1079 = *v1064 >> 39;
                if (v1079 < v1070
                  && (uint64_t v1080 = *(void *)(v1069 + 8 * v1079)) != 0
                  && (unint64_t v1081 = *(unsigned __int16 *)(v1080 + 2 * (HIDWORD(v1078) & 0x7F)), v1075 > v1081)
                  && ((unint64_t v1082 = HIDWORD(v1078), v1083 = v1074 + 8 * v1081, v1083 != v1073)
                    ? (BOOL v1084 = *(_DWORD *)(v1083 + 4) == v1082)
                    : (BOOL v1084 = 0),
                      v1084))
                {
                  uint64_t v1067 = v992[10] + 80 * v1081;
                }
                else
                {
                  uint64_t v1067 = v992[11];
                }
                applyCameraViewConstant(gdc::Registry *,md::LayoutContext const&)::$_0::operator()(v991, v1067, *v1066);
              }
            }
          }
        }
        ++v1066;
        ++v1064;
      }
      while (v1064 != (unint64_t *)v1065);
    }
  }
  v1000 = (int8x8_t *)*((void *)v2817 + 55);
  uint64_t v2814 = *((void *)v2817 + 56);
  v1001 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v1000);
  v1002 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1000);
  v1003 = (void *)gdc::Registry::storage<md::pipelineECS::HasAlbedo>(v1000);
  uint64_t v1004 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v1000);
  v1005 = (void *)v1004;
  uint64_t v1006 = v1004 + 32;
  uint64_t v1007 = v1001[7];
  uint64_t v1008 = v1001[8];
  if (v1002[8] - v1002[7] >= (unint64_t)(v1008 - v1007)) {
    v1009 = v1001 + 4;
  }
  else {
    v1009 = v1002 + 4;
  }
  if (v1003[8] - v1003[7] < v1009[4] - v1009[3]) {
    v1009 = v1003 + 4;
  }
  if (*(void *)(v1004 + 64) - *(void *)(v1004 + 56) >= v1009[4] - v1009[3]) {
    v1010 = v1009;
  }
  else {
    v1010 = (void *)(v1004 + 32);
  }
  if (v1001 + 4 == v1010 && v1007 != v1008)
  {
    do
    {
      unint64_t v1565 = *(unsigned int *)(v1007 + 4);
      unint64_t v1566 = v1565 >> 7;
      uint64_t v1567 = v1002[4];
      unint64_t v1568 = (v1002[5] - v1567) >> 3;
      if (v1565 >> 7 < v1568)
      {
        uint64_t v1569 = *(void *)(v1567 + 8 * v1566);
        if (v1569)
        {
          uint64_t v1570 = v1565 & 0x7F;
          unint64_t v1571 = *(unsigned __int16 *)(v1569 + 2 * v1570);
          uint64_t v1573 = v1002[7];
          uint64_t v1572 = v1002[8];
          if ((v1572 - v1573) >> 3 > v1571)
          {
            uint64_t v1574 = v1573 + 8 * v1571;
            if (v1574 != v1572 && *(_DWORD *)(v1574 + 4) == v1565)
            {
              uint64_t v1576 = v1003[4];
              unint64_t v1577 = (v1003[5] - v1576) >> 3;
              if (v1566 < v1577)
              {
                uint64_t v1578 = *(void *)(v1576 + 8 * v1566);
                if (v1578)
                {
                  unint64_t v1579 = *(unsigned __int16 *)(v1578 + 2 * v1570);
                  uint64_t v1581 = v1003[7];
                  uint64_t v1580 = v1003[8];
                  unint64_t v1582 = (v1580 - v1581) >> 3;
                  if (v1582 > v1579)
                  {
                    uint64_t v1583 = v1581 + 8 * v1579;
                    if (v1583 != v1580 && *(_DWORD *)(v1583 + 4) == v1565)
                    {
                      uint64_t v1585 = v1005[4];
                      unint64_t v1586 = (v1005[5] - v1585) >> 3;
                      if (v1566 < v1586)
                      {
                        uint64_t v1587 = *(void *)(v1585 + 8 * v1566);
                        if (v1587)
                        {
                          unint64_t v1588 = *(unsigned __int16 *)(v1587 + 2 * v1570);
                          uint64_t v1590 = v1005[7];
                          uint64_t v1589 = v1005[8];
                          unint64_t v1591 = (v1589 - v1590) >> 3;
                          if (v1591 > v1588)
                          {
                            uint64_t v1592 = v1590 + 8 * v1588;
                            if (v1592 != v1589 && *(_DWORD *)(v1592 + 4) == v1565)
                            {
                              unint64_t v1594 = *(void *)v1007 >> 39;
                              if (v1594 < v1577
                                && (uint64_t v1595 = *(void *)(v1576 + 8 * v1594)) != 0
                                && (unint64_t v1596 = *(unsigned __int16 *)(v1595 + 2 * (HIDWORD(*(void *)v1007) & 0x7FLL)),
                                    v1582 > v1596)
                                && (uint64_t v1597 = v1581 + 8 * v1596, v1597 != v1580)
                                && *(_DWORD *)(v1597 + 4) == HIDWORD(*(void *)v1007))
                              {
                                v1598 = (void *)(v1003[10] + 8 * v1596);
                              }
                              else
                              {
                                v1598 = (void *)v1003[11];
                              }
                              (**(void (***)(void))*v1598)(*v1598);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1007 += 8;
    }
    while (v1007 != v1008);
  }
  if (v1002 + 4 == v1010)
  {
    v1085 = (unint64_t *)v1002[7];
    v1086 = (uint64_t *)v1002[8];
    if (v1085 != (unint64_t *)v1086)
    {
      uint64_t v1087 = v1002[10];
      do
      {
        unint64_t v1862 = *((unsigned int *)v1085 + 1);
        unint64_t v1863 = v1862 >> 7;
        uint64_t v1864 = v1001[4];
        if (v1862 >> 7 < (v1001[5] - v1864) >> 3)
        {
          uint64_t v1865 = *(void *)(v1864 + 8 * v1863);
          if (v1865)
          {
            uint64_t v1866 = v1862 & 0x7F;
            unint64_t v1867 = *(unsigned __int16 *)(v1865 + 2 * v1866);
            uint64_t v1869 = v1001[7];
            uint64_t v1868 = v1001[8];
            if (v1867 < (v1868 - v1869) >> 3)
            {
              uint64_t v1870 = v1869 + 8 * v1867;
              if (v1870 != v1868 && *(_DWORD *)(v1870 + 4) == v1862)
              {
                uint64_t v1872 = v1003[4];
                unint64_t v1873 = (v1003[5] - v1872) >> 3;
                if (v1863 < v1873)
                {
                  uint64_t v1874 = *(void *)(v1872 + 8 * v1863);
                  if (v1874)
                  {
                    unint64_t v1875 = *(unsigned __int16 *)(v1874 + 2 * v1866);
                    uint64_t v1877 = v1003[7];
                    uint64_t v1876 = v1003[8];
                    unint64_t v1878 = (v1876 - v1877) >> 3;
                    if (v1878 > v1875)
                    {
                      uint64_t v1879 = v1877 + 8 * v1875;
                      if (v1879 != v1876 && *(_DWORD *)(v1879 + 4) == v1862)
                      {
                        uint64_t v1881 = v1005[4];
                        unint64_t v1882 = (v1005[5] - v1881) >> 3;
                        if (v1863 < v1882)
                        {
                          uint64_t v1883 = *(void *)(v1881 + 8 * v1863);
                          if (v1883)
                          {
                            unint64_t v1884 = *(unsigned __int16 *)(v1883 + 2 * v1866);
                            uint64_t v1886 = v1005[7];
                            uint64_t v1885 = v1005[8];
                            unint64_t v1887 = (v1885 - v1886) >> 3;
                            if (v1887 > v1884)
                            {
                              uint64_t v1888 = v1886 + 8 * v1884;
                              if (v1888 != v1885 && *(_DWORD *)(v1888 + 4) == v1862)
                              {
                                unint64_t v1890 = *v1085;
                                unint64_t v1891 = HIDWORD(*v1085);
                                unint64_t v1892 = *v1085 >> 39;
                                if (v1892 < v1873
                                  && (uint64_t v1893 = *(void *)(v1872 + 8 * v1892)) != 0
                                  && (unint64_t v1894 = *(unsigned __int16 *)(v1893 + 2 * (HIDWORD(v1890) & 0x7F)), v1878 > v1894)
                                  && (uint64_t v1895 = v1877 + 8 * v1894, v1895 != v1876)
                                  && *(_DWORD *)(v1895 + 4) == v1891)
                                {
                                  v1896 = (void *)(v1003[10] + 8 * v1894);
                                }
                                else
                                {
                                  v1896 = (void *)v1003[11];
                                }
                                if (v1892 < v1882
                                  && (uint64_t v1897 = *(void *)(v1881 + 8 * v1892)) != 0
                                  && (unint64_t v1898 = *(unsigned __int16 *)(v1897 + 2 * (HIDWORD(v1890) & 0x7F)), v1887 > v1898)
                                  && (uint64_t v1899 = v1886 + 8 * v1898, v1899 != v1885)
                                  && *(_DWORD *)(v1899 + 4) == v1891)
                                {
                                  v1859 = (uint64_t *)(v1005[10] + 48 * v1898);
                                }
                                else
                                {
                                  v1859 = (uint64_t *)v1005[11];
                                }
                                uint64_t v1860 = *v1859;
                                if (v1860) {
                                  uint64_t v1861 = v1860;
                                }
                                else {
                                  uint64_t v1861 = v2814;
                                }
                                (**(void (***)(void, uint64_t, uint64_t))*v1896)(*v1896, v1087, v1861);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1087 += 8;
        ++v1085;
      }
      while (v1085 != (unint64_t *)v1086);
    }
  }
  if (v1003 + 4 == v1010)
  {
    uint64_t v1088 = v1003[7];
    uint64_t v1089 = v1003[8];
    if (v1088 != v1089)
    {
      v1090 = (void *)v1003[10];
      do
      {
        unint64_t v1900 = *(unsigned int *)(v1088 + 4);
        unint64_t v1901 = v1900 >> 7;
        uint64_t v1902 = v1001[4];
        if (v1900 >> 7 < (v1001[5] - v1902) >> 3)
        {
          uint64_t v1903 = *(void *)(v1902 + 8 * v1901);
          if (v1903)
          {
            uint64_t v1904 = v1900 & 0x7F;
            unint64_t v1905 = *(unsigned __int16 *)(v1903 + 2 * v1904);
            uint64_t v1907 = v1001[7];
            uint64_t v1906 = v1001[8];
            if (v1905 < (v1906 - v1907) >> 3)
            {
              uint64_t v1908 = v1907 + 8 * v1905;
              if (v1908 != v1906 && *(_DWORD *)(v1908 + 4) == v1900)
              {
                uint64_t v1910 = v1002[4];
                unint64_t v1911 = (v1002[5] - v1910) >> 3;
                if (v1901 < v1911)
                {
                  uint64_t v1912 = *(void *)(v1910 + 8 * v1901);
                  if (v1912)
                  {
                    unint64_t v1913 = *(unsigned __int16 *)(v1912 + 2 * v1904);
                    uint64_t v1915 = v1002[7];
                    uint64_t v1914 = v1002[8];
                    unint64_t v1916 = (v1914 - v1915) >> 3;
                    if (v1916 > v1913)
                    {
                      uint64_t v1917 = v1915 + 8 * v1913;
                      if (v1917 != v1914 && *(_DWORD *)(v1917 + 4) == v1900)
                      {
                        uint64_t v1919 = v1005[4];
                        unint64_t v1920 = (v1005[5] - v1919) >> 3;
                        if (v1901 < v1920)
                        {
                          uint64_t v1921 = *(void *)(v1919 + 8 * v1901);
                          if (v1921)
                          {
                            unint64_t v1922 = *(unsigned __int16 *)(v1921 + 2 * v1904);
                            uint64_t v1924 = v1005[7];
                            uint64_t v1923 = v1005[8];
                            unint64_t v1925 = (v1923 - v1924) >> 3;
                            if (v1925 > v1922)
                            {
                              uint64_t v1926 = v1924 + 8 * v1922;
                              if (v1926 != v1923 && *(_DWORD *)(v1926 + 4) == v1900) {
                                (**(void (***)(void))*v1090)(*v1090);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1090;
        v1088 += 8;
      }
      while (v1088 != v1089);
    }
  }
  if ((void *)v1006 == v1010)
  {
    uint64_t v1091 = v1005[7];
    uint64_t v1092 = v1005[8];
    if (v1091 != v1092)
    {
      uint64_t v1093 = v1005[10];
      do
      {
        unint64_t v1929 = *(unsigned int *)(v1091 + 4);
        unint64_t v1930 = v1929 >> 7;
        uint64_t v1931 = v1001[4];
        if (v1929 >> 7 < (v1001[5] - v1931) >> 3)
        {
          uint64_t v1932 = *(void *)(v1931 + 8 * v1930);
          if (v1932)
          {
            uint64_t v1933 = v1929 & 0x7F;
            unint64_t v1934 = *(unsigned __int16 *)(v1932 + 2 * v1933);
            uint64_t v1936 = v1001[7];
            uint64_t v1935 = v1001[8];
            if (v1934 < (v1935 - v1936) >> 3)
            {
              uint64_t v1937 = v1936 + 8 * v1934;
              if (v1937 != v1935 && *(_DWORD *)(v1937 + 4) == v1929)
              {
                uint64_t v1939 = v1002[4];
                unint64_t v1940 = (v1002[5] - v1939) >> 3;
                if (v1930 < v1940)
                {
                  uint64_t v1941 = *(void *)(v1939 + 8 * v1930);
                  if (v1941)
                  {
                    unint64_t v1942 = *(unsigned __int16 *)(v1941 + 2 * v1933);
                    uint64_t v1944 = v1002[7];
                    uint64_t v1943 = v1002[8];
                    unint64_t v1945 = (v1943 - v1944) >> 3;
                    if (v1945 > v1942)
                    {
                      uint64_t v1946 = v1944 + 8 * v1942;
                      if (v1946 != v1943 && *(_DWORD *)(v1946 + 4) == v1929)
                      {
                        uint64_t v1948 = v1003[4];
                        unint64_t v1949 = (v1003[5] - v1948) >> 3;
                        if (v1930 < v1949)
                        {
                          uint64_t v1950 = *(void *)(v1948 + 8 * v1930);
                          if (v1950)
                          {
                            unint64_t v1951 = *(unsigned __int16 *)(v1950 + 2 * v1933);
                            uint64_t v1953 = v1003[7];
                            uint64_t v1952 = v1003[8];
                            unint64_t v1954 = (v1952 - v1953) >> 3;
                            if (v1954 > v1951)
                            {
                              uint64_t v1955 = v1953 + 8 * v1951;
                              if (v1955 != v1952 && *(_DWORD *)(v1955 + 4) == v1929)
                              {
                                unint64_t v1957 = *(void *)v1091 >> 39;
                                if (v1957 < v1949
                                  && (uint64_t v1958 = *(void *)(v1948 + 8 * v1957)) != 0
                                  && (unint64_t v1959 = *(unsigned __int16 *)(v1958 + 2 * (HIDWORD(*(void *)v1091) & 0x7FLL)),
                                      v1954 > v1959)
                                  && (uint64_t v1960 = v1953 + 8 * v1959, v1960 != v1952)
                                  && *(_DWORD *)(v1960 + 4) == HIDWORD(*(void *)v1091))
                                {
                                  v1928 = (void *)(v1003[10] + 8 * v1959);
                                }
                                else
                                {
                                  v1928 = (void *)v1003[11];
                                }
                                (**(void (***)(void))*v1928)(*v1928);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1093 += 48;
        v1091 += 8;
      }
      while (v1091 != v1092);
    }
  }
  v1012 = (int8x8_t *)*((void *)v2817 + 55);
  v1013 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v1012);
  v1014 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1012);
  v1015 = (void *)gdc::Registry::storage<md::pipelineECS::HasUVMapping>(v1012);
  uint64_t v1016 = gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v1012);
  v1017 = (void *)v1016;
  uint64_t v1018 = v1016 + 32;
  uint64_t v1020 = v1013[7];
  uint64_t v1019 = v1013[8];
  if (v1014[8] - v1014[7] >= (unint64_t)(v1019 - v1020)) {
    v1021 = v1013 + 4;
  }
  else {
    v1021 = v1014 + 4;
  }
  if (v1015[8] - v1015[7] < v1021[4] - v1021[3]) {
    v1021 = v1015 + 4;
  }
  if (*(void *)(v1016 + 64) - *(void *)(v1016 + 56) >= v1021[4] - v1021[3]) {
    v1022 = v1021;
  }
  else {
    v1022 = (void *)(v1016 + 32);
  }
  if (v1013 + 4 == v1022 && v1020 != v1019)
  {
    do
    {
      unint64_t v1599 = *(unsigned int *)(v1020 + 4);
      unint64_t v1600 = v1599 >> 7;
      uint64_t v1601 = v1014[4];
      unint64_t v1602 = (v1014[5] - v1601) >> 3;
      if (v1599 >> 7 < v1602)
      {
        uint64_t v1603 = *(void *)(v1601 + 8 * v1600);
        if (v1603)
        {
          uint64_t v1604 = v1599 & 0x7F;
          unint64_t v1605 = *(unsigned __int16 *)(v1603 + 2 * v1604);
          uint64_t v1607 = v1014[7];
          uint64_t v1606 = v1014[8];
          if ((v1606 - v1607) >> 3 > v1605)
          {
            uint64_t v1608 = v1607 + 8 * v1605;
            if (v1608 != v1606 && *(_DWORD *)(v1608 + 4) == v1599)
            {
              uint64_t v1610 = v1015[4];
              unint64_t v1611 = (v1015[5] - v1610) >> 3;
              if (v1600 < v1611)
              {
                uint64_t v1612 = *(void *)(v1610 + 8 * v1600);
                if (v1612)
                {
                  unint64_t v1613 = *(unsigned __int16 *)(v1612 + 2 * v1604);
                  uint64_t v1615 = v1015[7];
                  uint64_t v1614 = v1015[8];
                  unint64_t v1616 = (v1614 - v1615) >> 3;
                  if (v1616 > v1613)
                  {
                    uint64_t v1617 = v1615 + 8 * v1613;
                    if (v1617 != v1614 && *(_DWORD *)(v1617 + 4) == v1599)
                    {
                      uint64_t v1619 = v1017[4];
                      unint64_t v1620 = (v1017[5] - v1619) >> 3;
                      if (v1600 < v1620)
                      {
                        uint64_t v1621 = *(void *)(v1619 + 8 * v1600);
                        if (v1621)
                        {
                          unint64_t v1622 = *(unsigned __int16 *)(v1621 + 2 * v1604);
                          uint64_t v1624 = v1017[7];
                          uint64_t v1623 = v1017[8];
                          unint64_t v1625 = (v1623 - v1624) >> 3;
                          if (v1625 > v1622)
                          {
                            uint64_t v1626 = v1624 + 8 * v1622;
                            if (v1626 != v1623 && *(_DWORD *)(v1626 + 4) == v1599)
                            {
                              unint64_t v1628 = *(void *)v1020 >> 39;
                              if (v1628 < v1611
                                && (uint64_t v1629 = *(void *)(v1610 + 8 * v1628)) != 0
                                && (unint64_t v1630 = *(unsigned __int16 *)(v1629 + 2 * (HIDWORD(*(void *)v1020) & 0x7FLL)),
                                    v1616 > v1630)
                                && (uint64_t v1631 = v1615 + 8 * v1630, v1631 != v1614)
                                && *(_DWORD *)(v1631 + 4) == HIDWORD(*(void *)v1020))
                              {
                                v1632 = (void (****)(void))(v1015[10] + 8 * v1630);
                              }
                              else
                              {
                                v1632 = (void (****)(void))v1015[11];
                              }
                              (***v1632)();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1020 += 8;
    }
    while (v1020 != v1019);
  }
  if (v1014 + 4 == v1022)
  {
    v1094 = (unint64_t *)v1014[7];
    v1095 = (uint64_t *)v1014[8];
    if (v1094 != (unint64_t *)v1095)
    {
      uint64_t v1096 = v1014[10];
      do
      {
        unint64_t v1962 = *((unsigned int *)v1094 + 1);
        unint64_t v1963 = v1962 >> 7;
        uint64_t v1964 = v1013[4];
        if (v1962 >> 7 < (v1013[5] - v1964) >> 3)
        {
          uint64_t v1965 = *(void *)(v1964 + 8 * v1963);
          if (v1965)
          {
            uint64_t v1966 = v1962 & 0x7F;
            unint64_t v1967 = *(unsigned __int16 *)(v1965 + 2 * v1966);
            uint64_t v1969 = v1013[7];
            uint64_t v1968 = v1013[8];
            if (v1967 < (v1968 - v1969) >> 3)
            {
              uint64_t v1970 = v1969 + 8 * v1967;
              if (v1970 != v1968 && *(_DWORD *)(v1970 + 4) == v1962)
              {
                uint64_t v1972 = v1015[4];
                unint64_t v1973 = (v1015[5] - v1972) >> 3;
                if (v1963 < v1973)
                {
                  uint64_t v1974 = *(void *)(v1972 + 8 * v1963);
                  if (v1974)
                  {
                    unint64_t v1975 = *(unsigned __int16 *)(v1974 + 2 * v1966);
                    uint64_t v1977 = v1015[7];
                    uint64_t v1976 = v1015[8];
                    unint64_t v1978 = (v1976 - v1977) >> 3;
                    if (v1978 > v1975)
                    {
                      uint64_t v1979 = v1977 + 8 * v1975;
                      if (v1979 != v1976 && *(_DWORD *)(v1979 + 4) == v1962)
                      {
                        uint64_t v1981 = v1017[4];
                        unint64_t v1982 = (v1017[5] - v1981) >> 3;
                        if (v1963 < v1982)
                        {
                          uint64_t v1983 = *(void *)(v1981 + 8 * v1963);
                          if (v1983)
                          {
                            unint64_t v1984 = *(unsigned __int16 *)(v1983 + 2 * v1966);
                            uint64_t v1986 = v1017[7];
                            uint64_t v1985 = v1017[8];
                            unint64_t v1987 = (v1985 - v1986) >> 3;
                            if (v1987 > v1984)
                            {
                              uint64_t v1988 = v1986 + 8 * v1984;
                              if (v1988 != v1985 && *(_DWORD *)(v1988 + 4) == v1962)
                              {
                                unint64_t v1990 = *v1094;
                                unint64_t v1991 = HIDWORD(*v1094);
                                unint64_t v1992 = *v1094 >> 39;
                                if (v1992 < v1973
                                  && (uint64_t v1993 = *(void *)(v1972 + 8 * v1992)) != 0
                                  && (unint64_t v1994 = *(unsigned __int16 *)(v1993 + 2 * (HIDWORD(v1990) & 0x7F)), v1978 > v1994)
                                  && (uint64_t v1995 = v1977 + 8 * v1994, v1995 != v1976)
                                  && *(_DWORD *)(v1995 + 4) == v1991)
                                {
                                  v1996 = (void *)(v1015[10] + 8 * v1994);
                                }
                                else
                                {
                                  v1996 = (void *)v1015[11];
                                }
                                if (v1992 < v1982
                                  && (uint64_t v1997 = *(void *)(v1981 + 8 * v1992)) != 0
                                  && (unint64_t v1998 = *(unsigned __int16 *)(v1997 + 2 * (HIDWORD(v1990) & 0x7F)), v1987 > v1998)
                                  && (uint64_t v1999 = v1986 + 8 * v1998, v1999 != v1985)
                                  && *(_DWORD *)(v1999 + 4) == v1991)
                                {
                                  uint64_t v1961 = v1017[10] + 16 * v1998;
                                }
                                else
                                {
                                  uint64_t v1961 = v1017[11];
                                }
                                (**(void (***)(void, uint64_t, uint64_t))*v1996)(*v1996, v1096, v1961);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1096 += 8;
        ++v1094;
      }
      while (v1094 != (unint64_t *)v1095);
    }
  }
  if (v1015 + 4 == v1022)
  {
    uint64_t v1097 = v1015[7];
    uint64_t v1098 = v1015[8];
    if (v1097 != v1098)
    {
      v1099 = (void (****)(void))v1015[10];
      do
      {
        unint64_t v2000 = *(unsigned int *)(v1097 + 4);
        unint64_t v2001 = v2000 >> 7;
        uint64_t v2002 = v1013[4];
        if (v2000 >> 7 < (v1013[5] - v2002) >> 3)
        {
          uint64_t v2003 = *(void *)(v2002 + 8 * v2001);
          if (v2003)
          {
            uint64_t v2004 = v2000 & 0x7F;
            unint64_t v2005 = *(unsigned __int16 *)(v2003 + 2 * v2004);
            uint64_t v2007 = v1013[7];
            uint64_t v2006 = v1013[8];
            if (v2005 < (v2006 - v2007) >> 3)
            {
              uint64_t v2008 = v2007 + 8 * v2005;
              if (v2008 != v2006 && *(_DWORD *)(v2008 + 4) == v2000)
              {
                uint64_t v2010 = v1014[4];
                unint64_t v2011 = (v1014[5] - v2010) >> 3;
                if (v2001 < v2011)
                {
                  uint64_t v2012 = *(void *)(v2010 + 8 * v2001);
                  if (v2012)
                  {
                    unint64_t v2013 = *(unsigned __int16 *)(v2012 + 2 * v2004);
                    uint64_t v2015 = v1014[7];
                    uint64_t v2014 = v1014[8];
                    unint64_t v2016 = (v2014 - v2015) >> 3;
                    if (v2016 > v2013)
                    {
                      uint64_t v2017 = v2015 + 8 * v2013;
                      if (v2017 != v2014 && *(_DWORD *)(v2017 + 4) == v2000)
                      {
                        uint64_t v2019 = v1017[4];
                        unint64_t v2020 = (v1017[5] - v2019) >> 3;
                        if (v2001 < v2020)
                        {
                          uint64_t v2021 = *(void *)(v2019 + 8 * v2001);
                          if (v2021)
                          {
                            unint64_t v2022 = *(unsigned __int16 *)(v2021 + 2 * v2004);
                            uint64_t v2024 = v1017[7];
                            uint64_t v2023 = v1017[8];
                            unint64_t v2025 = (v2023 - v2024) >> 3;
                            if (v2025 > v2022)
                            {
                              uint64_t v2026 = v2024 + 8 * v2022;
                              if (v2026 != v2023 && *(_DWORD *)(v2026 + 4) == v2000) {
                                (***v1099)();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1099;
        v1097 += 8;
      }
      while (v1097 != v1098);
    }
  }
  if ((void *)v1018 == v1022)
  {
    uint64_t v1100 = v1017[7];
    uint64_t v1101 = v1017[8];
    if (v1100 != v1101)
    {
      uint64_t v1102 = v1017[10];
      do
      {
        unint64_t v2029 = *(unsigned int *)(v1100 + 4);
        unint64_t v2030 = v2029 >> 7;
        uint64_t v2031 = v1013[4];
        if (v2029 >> 7 < (v1013[5] - v2031) >> 3)
        {
          uint64_t v2032 = *(void *)(v2031 + 8 * v2030);
          if (v2032)
          {
            uint64_t v2033 = v2029 & 0x7F;
            unint64_t v2034 = *(unsigned __int16 *)(v2032 + 2 * v2033);
            uint64_t v2036 = v1013[7];
            uint64_t v2035 = v1013[8];
            if (v2034 < (v2035 - v2036) >> 3)
            {
              uint64_t v2037 = v2036 + 8 * v2034;
              if (v2037 != v2035 && *(_DWORD *)(v2037 + 4) == v2029)
              {
                uint64_t v2039 = v1014[4];
                unint64_t v2040 = (v1014[5] - v2039) >> 3;
                if (v2030 < v2040)
                {
                  uint64_t v2041 = *(void *)(v2039 + 8 * v2030);
                  if (v2041)
                  {
                    unint64_t v2042 = *(unsigned __int16 *)(v2041 + 2 * v2033);
                    uint64_t v2044 = v1014[7];
                    uint64_t v2043 = v1014[8];
                    unint64_t v2045 = (v2043 - v2044) >> 3;
                    if (v2045 > v2042)
                    {
                      uint64_t v2046 = v2044 + 8 * v2042;
                      if (v2046 != v2043 && *(_DWORD *)(v2046 + 4) == v2029)
                      {
                        uint64_t v2048 = v1015[4];
                        unint64_t v2049 = (v1015[5] - v2048) >> 3;
                        if (v2030 < v2049)
                        {
                          uint64_t v2050 = *(void *)(v2048 + 8 * v2030);
                          if (v2050)
                          {
                            unint64_t v2051 = *(unsigned __int16 *)(v2050 + 2 * v2033);
                            uint64_t v2053 = v1015[7];
                            uint64_t v2052 = v1015[8];
                            unint64_t v2054 = (v2052 - v2053) >> 3;
                            if (v2054 > v2051)
                            {
                              uint64_t v2055 = v2053 + 8 * v2051;
                              if (v2055 != v2052 && *(_DWORD *)(v2055 + 4) == v2029)
                              {
                                unint64_t v2057 = *(void *)v1100 >> 39;
                                if (v2057 < v2049
                                  && (uint64_t v2058 = *(void *)(v2048 + 8 * v2057)) != 0
                                  && (unint64_t v2059 = *(unsigned __int16 *)(v2058 + 2 * (HIDWORD(*(void *)v1100) & 0x7FLL)),
                                      v2054 > v2059)
                                  && (uint64_t v2060 = v2053 + 8 * v2059, v2060 != v2052)
                                  && *(_DWORD *)(v2060 + 4) == HIDWORD(*(void *)v1100))
                                {
                                  v2028 = (void (****)(void))(v1015[10] + 8 * v2059);
                                }
                                else
                                {
                                  v2028 = (void (****)(void))v1015[11];
                                }
                                (***v2028)();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1102 += 16;
        v1100 += 8;
      }
      while (v1100 != v1101);
    }
  }
  v1024 = (int8x8_t *)*((void *)v2817 + 55);
  v1025 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v1024);
  v1026 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1024);
  v1027 = (void *)gdc::Registry::storage<md::pipelineECS::HasUVScale>(v1024);
  uint64_t v1028 = gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v1024);
  v1029 = (void *)v1028;
  uint64_t v1030 = v1028 + 32;
  uint64_t v1032 = v1025[7];
  uint64_t v1031 = v1025[8];
  if (v1026[8] - v1026[7] >= (unint64_t)(v1031 - v1032)) {
    v1033 = v1025 + 4;
  }
  else {
    v1033 = v1026 + 4;
  }
  if (v1027[8] - v1027[7] < v1033[4] - v1033[3]) {
    v1033 = v1027 + 4;
  }
  if (*(void *)(v1028 + 64) - *(void *)(v1028 + 56) >= v1033[4] - v1033[3]) {
    v1034 = v1033;
  }
  else {
    v1034 = (void *)(v1028 + 32);
  }
  if (v1025 + 4 == v1034 && v1032 != v1031)
  {
    do
    {
      unint64_t v1633 = *(unsigned int *)(v1032 + 4);
      unint64_t v1634 = v1633 >> 7;
      uint64_t v1635 = v1026[4];
      unint64_t v1636 = (v1026[5] - v1635) >> 3;
      if (v1633 >> 7 < v1636)
      {
        uint64_t v1637 = *(void *)(v1635 + 8 * v1634);
        if (v1637)
        {
          uint64_t v1638 = v1633 & 0x7F;
          unint64_t v1639 = *(unsigned __int16 *)(v1637 + 2 * v1638);
          uint64_t v1641 = v1026[7];
          uint64_t v1640 = v1026[8];
          if ((v1640 - v1641) >> 3 > v1639)
          {
            uint64_t v1642 = v1641 + 8 * v1639;
            if (v1642 != v1640 && *(_DWORD *)(v1642 + 4) == v1633)
            {
              uint64_t v1644 = v1027[4];
              unint64_t v1645 = (v1027[5] - v1644) >> 3;
              if (v1634 < v1645)
              {
                uint64_t v1646 = *(void *)(v1644 + 8 * v1634);
                if (v1646)
                {
                  unint64_t v1647 = *(unsigned __int16 *)(v1646 + 2 * v1638);
                  uint64_t v1649 = v1027[7];
                  uint64_t v1648 = v1027[8];
                  unint64_t v1650 = (v1648 - v1649) >> 3;
                  if (v1650 > v1647)
                  {
                    uint64_t v1651 = v1649 + 8 * v1647;
                    if (v1651 != v1648 && *(_DWORD *)(v1651 + 4) == v1633)
                    {
                      uint64_t v1653 = v1029[4];
                      unint64_t v1654 = (v1029[5] - v1653) >> 3;
                      if (v1634 < v1654)
                      {
                        uint64_t v1655 = *(void *)(v1653 + 8 * v1634);
                        if (v1655)
                        {
                          unint64_t v1656 = *(unsigned __int16 *)(v1655 + 2 * v1638);
                          uint64_t v1658 = v1029[7];
                          uint64_t v1657 = v1029[8];
                          unint64_t v1659 = (v1657 - v1658) >> 3;
                          if (v1659 > v1656)
                          {
                            uint64_t v1660 = v1658 + 8 * v1656;
                            if (v1660 != v1657 && *(_DWORD *)(v1660 + 4) == v1633)
                            {
                              unint64_t v1662 = *(void *)v1032 >> 39;
                              if (v1662 < v1645
                                && (uint64_t v1663 = *(void *)(v1644 + 8 * v1662)) != 0
                                && (unint64_t v1664 = *(unsigned __int16 *)(v1663 + 2 * (HIDWORD(*(void *)v1032) & 0x7FLL)),
                                    v1650 > v1664)
                                && (uint64_t v1665 = v1649 + 8 * v1664, v1665 != v1648)
                                && *(_DWORD *)(v1665 + 4) == HIDWORD(*(void *)v1032))
                              {
                                v1666 = (void (****)(void))(v1027[10] + 8 * v1664);
                              }
                              else
                              {
                                v1666 = (void (****)(void))v1027[11];
                              }
                              (***v1666)();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1032 += 8;
    }
    while (v1032 != v1031);
  }
  if (v1026 + 4 == v1034)
  {
    v1103 = (unint64_t *)v1026[7];
    v1104 = (uint64_t *)v1026[8];
    if (v1103 != (unint64_t *)v1104)
    {
      uint64_t v1105 = v1026[10];
      do
      {
        unint64_t v2062 = *((unsigned int *)v1103 + 1);
        unint64_t v2063 = v2062 >> 7;
        uint64_t v2064 = v1025[4];
        if (v2062 >> 7 < (v1025[5] - v2064) >> 3)
        {
          uint64_t v2065 = *(void *)(v2064 + 8 * v2063);
          if (v2065)
          {
            uint64_t v2066 = v2062 & 0x7F;
            unint64_t v2067 = *(unsigned __int16 *)(v2065 + 2 * v2066);
            uint64_t v2069 = v1025[7];
            uint64_t v2068 = v1025[8];
            if (v2067 < (v2068 - v2069) >> 3)
            {
              uint64_t v2070 = v2069 + 8 * v2067;
              if (v2070 != v2068 && *(_DWORD *)(v2070 + 4) == v2062)
              {
                uint64_t v2072 = v1027[4];
                unint64_t v2073 = (v1027[5] - v2072) >> 3;
                if (v2063 < v2073)
                {
                  uint64_t v2074 = *(void *)(v2072 + 8 * v2063);
                  if (v2074)
                  {
                    unint64_t v2075 = *(unsigned __int16 *)(v2074 + 2 * v2066);
                    uint64_t v2077 = v1027[7];
                    uint64_t v2076 = v1027[8];
                    unint64_t v2078 = (v2076 - v2077) >> 3;
                    if (v2078 > v2075)
                    {
                      uint64_t v2079 = v2077 + 8 * v2075;
                      if (v2079 != v2076 && *(_DWORD *)(v2079 + 4) == v2062)
                      {
                        uint64_t v2081 = v1029[4];
                        unint64_t v2082 = (v1029[5] - v2081) >> 3;
                        if (v2063 < v2082)
                        {
                          uint64_t v2083 = *(void *)(v2081 + 8 * v2063);
                          if (v2083)
                          {
                            unint64_t v2084 = *(unsigned __int16 *)(v2083 + 2 * v2066);
                            uint64_t v2086 = v1029[7];
                            uint64_t v2085 = v1029[8];
                            unint64_t v2087 = (v2085 - v2086) >> 3;
                            if (v2087 > v2084)
                            {
                              uint64_t v2088 = v2086 + 8 * v2084;
                              if (v2088 != v2085 && *(_DWORD *)(v2088 + 4) == v2062)
                              {
                                unint64_t v2090 = *v1103;
                                unint64_t v2091 = HIDWORD(*v1103);
                                unint64_t v2092 = *v1103 >> 39;
                                if (v2092 < v2073
                                  && (uint64_t v2093 = *(void *)(v2072 + 8 * v2092)) != 0
                                  && (unint64_t v2094 = *(unsigned __int16 *)(v2093 + 2 * (HIDWORD(v2090) & 0x7F)), v2078 > v2094)
                                  && (uint64_t v2095 = v2077 + 8 * v2094, v2095 != v2076)
                                  && *(_DWORD *)(v2095 + 4) == v2091)
                                {
                                  v2096 = (void *)(v1027[10] + 8 * v2094);
                                }
                                else
                                {
                                  v2096 = (void *)v1027[11];
                                }
                                if (v2092 < v2082
                                  && (uint64_t v2097 = *(void *)(v2081 + 8 * v2092)) != 0
                                  && (unint64_t v2098 = *(unsigned __int16 *)(v2097 + 2 * (HIDWORD(v2090) & 0x7F)), v2087 > v2098)
                                  && (uint64_t v2099 = v2086 + 8 * v2098, v2099 != v2085)
                                  && *(_DWORD *)(v2099 + 4) == v2091)
                                {
                                  uint64_t v2061 = v1029[10] + 8 * v2098;
                                }
                                else
                                {
                                  uint64_t v2061 = v1029[11];
                                }
                                (**(void (***)(void, uint64_t, uint64_t))*v2096)(*v2096, v1105, v2061);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1105 += 8;
        ++v1103;
      }
      while (v1103 != (unint64_t *)v1104);
    }
  }
  if (v1027 + 4 == v1034)
  {
    uint64_t v1106 = v1027[7];
    uint64_t v1107 = v1027[8];
    if (v1106 != v1107)
    {
      v1108 = (void (****)(void))v1027[10];
      do
      {
        unint64_t v2100 = *(unsigned int *)(v1106 + 4);
        unint64_t v2101 = v2100 >> 7;
        uint64_t v2102 = v1025[4];
        if (v2100 >> 7 < (v1025[5] - v2102) >> 3)
        {
          uint64_t v2103 = *(void *)(v2102 + 8 * v2101);
          if (v2103)
          {
            uint64_t v2104 = v2100 & 0x7F;
            unint64_t v2105 = *(unsigned __int16 *)(v2103 + 2 * v2104);
            uint64_t v2107 = v1025[7];
            uint64_t v2106 = v1025[8];
            if (v2105 < (v2106 - v2107) >> 3)
            {
              uint64_t v2108 = v2107 + 8 * v2105;
              if (v2108 != v2106 && *(_DWORD *)(v2108 + 4) == v2100)
              {
                uint64_t v2110 = v1026[4];
                unint64_t v2111 = (v1026[5] - v2110) >> 3;
                if (v2101 < v2111)
                {
                  uint64_t v2112 = *(void *)(v2110 + 8 * v2101);
                  if (v2112)
                  {
                    unint64_t v2113 = *(unsigned __int16 *)(v2112 + 2 * v2104);
                    uint64_t v2115 = v1026[7];
                    uint64_t v2114 = v1026[8];
                    unint64_t v2116 = (v2114 - v2115) >> 3;
                    if (v2116 > v2113)
                    {
                      uint64_t v2117 = v2115 + 8 * v2113;
                      if (v2117 != v2114 && *(_DWORD *)(v2117 + 4) == v2100)
                      {
                        uint64_t v2119 = v1029[4];
                        unint64_t v2120 = (v1029[5] - v2119) >> 3;
                        if (v2101 < v2120)
                        {
                          uint64_t v2121 = *(void *)(v2119 + 8 * v2101);
                          if (v2121)
                          {
                            unint64_t v2122 = *(unsigned __int16 *)(v2121 + 2 * v2104);
                            uint64_t v2124 = v1029[7];
                            uint64_t v2123 = v1029[8];
                            unint64_t v2125 = (v2123 - v2124) >> 3;
                            if (v2125 > v2122)
                            {
                              uint64_t v2126 = v2124 + 8 * v2122;
                              if (v2126 != v2123 && *(_DWORD *)(v2126 + 4) == v2100) {
                                (***v1108)();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1108;
        v1106 += 8;
      }
      while (v1106 != v1107);
    }
  }
  if ((void *)v1030 == v1034)
  {
    uint64_t v1109 = v1029[7];
    uint64_t v1110 = v1029[8];
    if (v1109 != v1110)
    {
      uint64_t v1111 = v1029[10];
      do
      {
        unint64_t v2129 = *(unsigned int *)(v1109 + 4);
        unint64_t v2130 = v2129 >> 7;
        uint64_t v2131 = v1025[4];
        if (v2129 >> 7 < (v1025[5] - v2131) >> 3)
        {
          uint64_t v2132 = *(void *)(v2131 + 8 * v2130);
          if (v2132)
          {
            uint64_t v2133 = v2129 & 0x7F;
            unint64_t v2134 = *(unsigned __int16 *)(v2132 + 2 * v2133);
            uint64_t v2136 = v1025[7];
            uint64_t v2135 = v1025[8];
            if (v2134 < (v2135 - v2136) >> 3)
            {
              uint64_t v2137 = v2136 + 8 * v2134;
              if (v2137 != v2135 && *(_DWORD *)(v2137 + 4) == v2129)
              {
                uint64_t v2139 = v1026[4];
                unint64_t v2140 = (v1026[5] - v2139) >> 3;
                if (v2130 < v2140)
                {
                  uint64_t v2141 = *(void *)(v2139 + 8 * v2130);
                  if (v2141)
                  {
                    unint64_t v2142 = *(unsigned __int16 *)(v2141 + 2 * v2133);
                    uint64_t v2144 = v1026[7];
                    uint64_t v2143 = v1026[8];
                    unint64_t v2145 = (v2143 - v2144) >> 3;
                    if (v2145 > v2142)
                    {
                      uint64_t v2146 = v2144 + 8 * v2142;
                      if (v2146 != v2143 && *(_DWORD *)(v2146 + 4) == v2129)
                      {
                        uint64_t v2148 = v1027[4];
                        unint64_t v2149 = (v1027[5] - v2148) >> 3;
                        if (v2130 < v2149)
                        {
                          uint64_t v2150 = *(void *)(v2148 + 8 * v2130);
                          if (v2150)
                          {
                            unint64_t v2151 = *(unsigned __int16 *)(v2150 + 2 * v2133);
                            uint64_t v2153 = v1027[7];
                            uint64_t v2152 = v1027[8];
                            unint64_t v2154 = (v2152 - v2153) >> 3;
                            if (v2154 > v2151)
                            {
                              uint64_t v2155 = v2153 + 8 * v2151;
                              if (v2155 != v2152 && *(_DWORD *)(v2155 + 4) == v2129)
                              {
                                unint64_t v2157 = *(void *)v1109 >> 39;
                                if (v2157 < v2149
                                  && (uint64_t v2158 = *(void *)(v2148 + 8 * v2157)) != 0
                                  && (unint64_t v2159 = *(unsigned __int16 *)(v2158 + 2 * (HIDWORD(*(void *)v1109) & 0x7FLL)),
                                      v2154 > v2159)
                                  && (uint64_t v2160 = v2153 + 8 * v2159, v2160 != v2152)
                                  && *(_DWORD *)(v2160 + 4) == HIDWORD(*(void *)v1109))
                                {
                                  v2128 = (void (****)(void))(v1027[10] + 8 * v2159);
                                }
                                else
                                {
                                  v2128 = (void (****)(void))v1027[11];
                                }
                                (***v2128)();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1111 += 8;
        v1109 += 8;
      }
      while (v1109 != v1110);
    }
  }
  uint64_t v1036 = *((void *)v2817 + 63);
  v1037 = (int8x8_t *)*((void *)v2817 + 55);
  v2815 = (const Texture *)*((void *)v2817 + 58);
  v1038 = (void *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v1037);
  uint64_t v1039 = v1038[7];
  uint64_t v1040 = v1038[8];
  if (v1039 == v1040)
  {
    v1044 = 0;
    v1043 = 0;
  }
  else
  {
    v1041 = 0;
    v1042 = (const Texture **)(v1038[10] + 8);
    do
    {
      v1044 = *v1042;
      if (!*((void *)*v1042 + 3))
      {
        ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(v1036 + 80), *v1042, (void *)*(v1042 - 1));
        v1044 = *v1042;
      }
      v1043 = (id)*(v1042 - 1);

      v1039 += 8;
      v1042 += 3;
      v1041 = v1043;
    }
    while (v1039 != v1040);
  }
  v1112 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v1037);
  v1113 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1037);
  uint64_t v1114 = gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(v1037);
  v1115 = (void *)v1114;
  uint64_t v1116 = v1114 + 32;
  v1118 = (unint64_t *)v1112[7];
  v1117 = (uint64_t *)v1112[8];
  if (v1113[8] - v1113[7] >= (unint64_t)((char *)v1117 - (char *)v1118)) {
    v1119 = v1112 + 4;
  }
  else {
    v1119 = v1113 + 4;
  }
  if (*(void *)(v1114 + 64) - *(void *)(v1114 + 56) >= v1119[4] - v1119[3]) {
    v1120 = v1119;
  }
  else {
    v1120 = (void *)(v1114 + 32);
  }
  if (v1112 + 4 == v1120 && v1118 != (unint64_t *)v1117)
  {
    if (v1044) {
      v1132 = v1044;
    }
    else {
      v1132 = v2815;
    }
    while (2)
    {
      unint64_t v1150 = *((unsigned int *)v1118 + 1);
      unint64_t v1151 = v1150 >> 7;
      uint64_t v1152 = v1113[4];
      unint64_t v1153 = (v1113[5] - v1152) >> 3;
      if (v1150 >> 7 >= v1153) {
        goto LABEL_1242;
      }
      uint64_t v1154 = *(void *)(v1152 + 8 * v1151);
      if (!v1154) {
        goto LABEL_1242;
      }
      unint64_t v1155 = *(unsigned __int16 *)(v1154 + 2 * (v1150 & 0x7F));
      uint64_t v1157 = v1113[7];
      uint64_t v1156 = v1113[8];
      unint64_t v1158 = (v1156 - v1157) >> 3;
      if (v1158 <= v1155) {
        goto LABEL_1242;
      }
      uint64_t v1159 = v1157 + 8 * v1155;
      if (v1159 == v1156 || *(_DWORD *)(v1159 + 4) != v1150) {
        goto LABEL_1242;
      }
      uint64_t v1161 = v1115[4];
      unint64_t v1162 = (v1115[5] - v1161) >> 3;
      if (v1151 >= v1162) {
        goto LABEL_1242;
      }
      uint64_t v1163 = *(void *)(v1161 + 8 * v1151);
      if (!v1163) {
        goto LABEL_1242;
      }
      unint64_t v1164 = *(unsigned __int16 *)(v1163 + 2 * (v1150 & 0x7F));
      uint64_t v1166 = v1115[7];
      uint64_t v1165 = v1115[8];
      unint64_t v1167 = (v1165 - v1166) >> 3;
      if (v1167 <= v1164) {
        goto LABEL_1242;
      }
      uint64_t v1168 = v1166 + 8 * v1164;
      if (v1168 == v1165 || *(_DWORD *)(v1168 + 4) != v1150) {
        goto LABEL_1242;
      }
      unint64_t v1170 = *v1118;
      unint64_t v1171 = HIDWORD(*v1118);
      unint64_t v1172 = *v1118 >> 39;
      if (v1172 >= v1153
        || (uint64_t v1173 = *(void *)(v1152 + 8 * v1172)) == 0
        || (unint64_t v1174 = *(unsigned __int16 *)(v1173 + 2 * (HIDWORD(v1170) & 0x7F)), v1158 <= v1174)
        || ((uint64_t v1175 = v1157 + 8 * v1174, v1175 != v1156)
          ? (BOOL v1176 = *(_DWORD *)(v1175 + 4) == v1171)
          : (BOOL v1176 = 0),
            !v1176))
      {
        if (v1172 < v1162) {
          goto LABEL_1267;
        }
        goto LABEL_1240;
      }
      if (v1172 >= v1162) {
        goto LABEL_1240;
      }
LABEL_1267:
      uint64_t v1177 = *(void *)(v1161 + 8 * v1172);
      if (v1177
        && (unint64_t v1178 = *(unsigned __int16 *)(v1177 + 2 * (HIDWORD(v1170) & 0x7F)), v1167 > v1178)
        && ((uint64_t v1179 = v1166 + 8 * v1178, v1179 != v1165)
          ? (BOOL v1180 = *(_DWORD *)(v1179 + 4) == v1171)
          : (BOOL v1180 = 0),
            v1180))
      {
        v1149 = (void (****)(void))(v1115[10] + 8 * v1178);
      }
      else
      {
LABEL_1240:
        v1149 = (void (****)(void))v1115[11];
      }
      v2810 = v1132;
      (***v1149)();
      v1132 = v2810;
LABEL_1242:
      if (++v1118 == (unint64_t *)v1117) {
        break;
      }
      continue;
    }
  }
  if (v1113 + 4 == v1120)
  {
    v1133 = (unint64_t *)v1113[7];
    v1134 = (uint64_t *)v1113[8];
    if (v1133 != (unint64_t *)v1134)
    {
      uint64_t v1135 = v1113[10];
      if (v1044) {
        v1136 = v1044;
      }
      else {
        v1136 = v2815;
      }
      do
      {
        unint64_t v1418 = *((unsigned int *)v1133 + 1);
        unint64_t v1419 = v1418 >> 7;
        uint64_t v1420 = v1112[4];
        if (v1418 >> 7 < (v1112[5] - v1420) >> 3)
        {
          uint64_t v1421 = *(void *)(v1420 + 8 * v1419);
          if (v1421)
          {
            unint64_t v1422 = *(unsigned __int16 *)(v1421 + 2 * (v1418 & 0x7F));
            uint64_t v1424 = v1112[7];
            uint64_t v1423 = v1112[8];
            if (v1422 < (v1423 - v1424) >> 3)
            {
              uint64_t v1425 = v1424 + 8 * v1422;
              if (v1425 != v1423 && *(_DWORD *)(v1425 + 4) == v1418)
              {
                uint64_t v1427 = v1115[4];
                unint64_t v1428 = (v1115[5] - v1427) >> 3;
                if (v1419 < v1428)
                {
                  uint64_t v1429 = *(void *)(v1427 + 8 * v1419);
                  if (v1429)
                  {
                    unint64_t v1430 = *(unsigned __int16 *)(v1429 + 2 * (v1418 & 0x7F));
                    uint64_t v1432 = v1115[7];
                    uint64_t v1431 = v1115[8];
                    unint64_t v1433 = (v1431 - v1432) >> 3;
                    if (v1433 > v1430)
                    {
                      uint64_t v1434 = v1432 + 8 * v1430;
                      if (v1434 != v1431 && *(_DWORD *)(v1434 + 4) == v1418)
                      {
                        unint64_t v1436 = *v1133;
                        unint64_t v1437 = *v1133 >> 39;
                        if (v1437 < v1428
                          && (uint64_t v1438 = *(void *)(v1427 + 8 * v1437)) != 0
                          && (unint64_t v1439 = *(unsigned __int16 *)(v1438 + 2 * (HIDWORD(v1436) & 0x7F)), v1433 > v1439)
                          && ((unint64_t v1440 = HIDWORD(v1436), v1441 = v1432 + 8 * v1439, v1441 != v1431)
                            ? (BOOL v1442 = *(_DWORD *)(v1441 + 4) == v1440)
                            : (BOOL v1442 = 0),
                              v1442))
                        {
                          v1417 = (void *)(v1115[10] + 8 * v1439);
                        }
                        else
                        {
                          v1417 = (void *)v1115[11];
                        }
                        v2811 = v1136;
                        (**(void (***)(void, uint64_t))*v1417)(*v1417, v1135);
                        v1136 = v2811;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1135 += 8;
        ++v1133;
      }
      while (v1133 != (unint64_t *)v1134);
    }
  }
  if ((void *)v1116 == v1120)
  {
    v1137 = (unint64_t *)v1115[7];
    v1138 = (uint64_t *)v1115[8];
    if (v1137 != (unint64_t *)v1138)
    {
      v1139 = (void *)v1115[10];
      if (!v1044) {
        v1044 = v2815;
      }
      do
      {
        unint64_t v1444 = *((unsigned int *)v1137 + 1);
        unint64_t v1445 = v1444 >> 7;
        uint64_t v1446 = v1112[4];
        if (v1444 >> 7 < (v1112[5] - v1446) >> 3)
        {
          uint64_t v1447 = *(void *)(v1446 + 8 * v1445);
          if (v1447)
          {
            unint64_t v1448 = *(unsigned __int16 *)(v1447 + 2 * (v1444 & 0x7F));
            uint64_t v1450 = v1112[7];
            uint64_t v1449 = v1112[8];
            if (v1448 < (v1449 - v1450) >> 3)
            {
              uint64_t v1451 = v1450 + 8 * v1448;
              if (v1451 != v1449 && *(_DWORD *)(v1451 + 4) == v1444)
              {
                uint64_t v1453 = v1113[4];
                unint64_t v1454 = (v1113[5] - v1453) >> 3;
                if (v1445 < v1454)
                {
                  uint64_t v1455 = *(void *)(v1453 + 8 * v1445);
                  if (v1455)
                  {
                    unint64_t v1456 = *(unsigned __int16 *)(v1455 + 2 * (v1444 & 0x7F));
                    uint64_t v1458 = v1113[7];
                    uint64_t v1457 = v1113[8];
                    unint64_t v1459 = (v1457 - v1458) >> 3;
                    if (v1459 > v1456)
                    {
                      uint64_t v1460 = v1458 + 8 * v1456;
                      if (v1460 != v1457 && *(_DWORD *)(v1460 + 4) == v1444)
                      {
                        unint64_t v1462 = *v1137;
                        unint64_t v1463 = *v1137 >> 39;
                        if (v1463 < v1454
                          && (uint64_t v1464 = *(void *)(v1453 + 8 * v1463)) != 0
                          && (unint64_t v1465 = *(unsigned __int16 *)(v1464 + 2 * (HIDWORD(v1462) & 0x7F)), v1459 > v1465)
                          && ((unint64_t v1466 = HIDWORD(v1462), v1467 = v1458 + 8 * v1465, v1467 != v1457)
                            ? (BOOL v1468 = *(_DWORD *)(v1467 + 4) == v1466)
                            : (BOOL v1468 = 0),
                              v1468))
                        {
                          uint64_t v1443 = v1113[10] + 8 * v1465;
                        }
                        else
                        {
                          uint64_t v1443 = v1113[11];
                        }
                        (**(void (***)(void, uint64_t, const Texture *))*v1139)(*v1139, v1443, v1044);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1139;
        ++v1137;
      }
      while (v1137 != (unint64_t *)v1138);
    }
  }

  uint64_t v2824 = v2800;
  v1122 = (int8x8_t *)*((void *)v2817 + 55);
  v1123 = (void *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v1122);
  v1124 = (void *)gdc::Registry::storage<arComponents::RenderOrder>(v1122);
  v1125 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1122);
  uint64_t v1126 = gdc::Registry::storage<arComponents::IsVisible>(v1122);
  v1127 = (void *)v1126;
  uint64_t v1128 = v1123[7];
  uint64_t v1129 = v1123[8];
  if (v1124[8] - v1124[7] >= (unint64_t)(v1129 - v1128)) {
    v1130 = v1123 + 4;
  }
  else {
    v1130 = v1124 + 4;
  }
  if (v1125[8] - v1125[7] < v1130[4] - v1130[3]) {
    v1130 = v1125 + 4;
  }
  uint64_t v2816 = v1126 + 32;
  if (*(void *)(v1126 + 64) - *(void *)(v1126 + 56) >= v1130[4] - v1130[3]) {
    v1131 = v1130;
  }
  else {
    v1131 = (void *)(v1126 + 32);
  }
  if (v1123 + 4 == v1131)
  {
    *(void *)&v2833.f64[0] = &v2824;
    *(void *)&v2833.f64[1] = v2817;
    v2834.f64[0] = v2812;
    if (v1128 != v1129)
    {
      uint64_t v1140 = v1123[10];
      do
      {
        unint64_t v2162 = *(unsigned int *)(v1128 + 4);
        unint64_t v2163 = v2162 >> 7;
        uint64_t v2164 = v1124[4];
        unint64_t v2165 = (v1124[5] - v2164) >> 3;
        if (v2162 >> 7 < v2165)
        {
          uint64_t v2166 = *(void *)(v2164 + 8 * v2163);
          if (v2166)
          {
            uint64_t v2167 = v2162 & 0x7F;
            unint64_t v2168 = *(unsigned __int16 *)(v2166 + 2 * v2167);
            uint64_t v2170 = v1124[7];
            uint64_t v2169 = v1124[8];
            unint64_t v2171 = (v2169 - v2170) >> 3;
            if (v2171 > v2168)
            {
              uint64_t v2172 = v2170 + 8 * v2168;
              if (v2172 != v2169 && *(_DWORD *)(v2172 + 4) == v2162)
              {
                uint64_t v2174 = v1125[4];
                unint64_t v2175 = (v1125[5] - v2174) >> 3;
                if (v2163 < v2175)
                {
                  uint64_t v2176 = *(void *)(v2174 + 8 * v2163);
                  if (v2176)
                  {
                    unint64_t v2177 = *(unsigned __int16 *)(v2176 + 2 * v2167);
                    uint64_t v2179 = v1125[7];
                    uint64_t v2178 = v1125[8];
                    unint64_t v2180 = (v2178 - v2179) >> 3;
                    if (v2180 > v2177)
                    {
                      uint64_t v2181 = v2179 + 8 * v2177;
                      if (v2181 != v2178 && *(_DWORD *)(v2181 + 4) == v2162)
                      {
                        uint64_t v2183 = v1127[4];
                        if (v2163 < (v1127[5] - v2183) >> 3)
                        {
                          uint64_t v2184 = *(void *)(v2183 + 8 * v2163);
                          if (v2184)
                          {
                            unint64_t v2185 = *(unsigned __int16 *)(v2184 + 2 * v2167);
                            uint64_t v2187 = v1127[7];
                            uint64_t v2186 = v1127[8];
                            if (v2185 < (v2186 - v2187) >> 3)
                            {
                              uint64_t v2188 = v2187 + 8 * v2185;
                              if (v2188 != v2186 && *(_DWORD *)(v2188 + 4) == v2162)
                              {
                                unint64_t v2190 = *(void *)v1128;
                                uint64_t v2191 = HIDWORD(*(void *)v1128);
                                unint64_t v2192 = *(void *)v1128 >> 39;
                                if (v2192 < v2165
                                  && (uint64_t v2193 = *(void *)(v2164 + 8 * v2192)) != 0
                                  && (unint64_t v2194 = *(unsigned __int16 *)(v2193 + 2 * (HIDWORD(v2190) & 0x7F)), v2171 > v2194)
                                  && (uint64_t v2195 = v2170 + 8 * v2194, v2195 != v2169)
                                  && *(_DWORD *)(v2195 + 4) == v2191)
                                {
                                  v2196 = (void *)(v1124[10] + 8 * v2194);
                                }
                                else
                                {
                                  v2196 = (void *)v1124[11];
                                }
                                if (v2192 < v2175
                                  && (uint64_t v2197 = *(void *)(v2174 + 8 * v2192)) != 0
                                  && (unint64_t v2198 = *(unsigned __int16 *)(v2197 + 2 * (HIDWORD(v2190) & 0x7F)), v2180 > v2198)
                                  && (uint64_t v2199 = v2179 + 8 * v2198, v2199 != v2178)
                                  && *(_DWORD *)(v2199 + 4) == v2191)
                                {
                                  v2161 = (uint64_t *)(v1125[10] + 8 * v2198);
                                }
                                else
                                {
                                  v2161 = (uint64_t *)v1125[11];
                                }
                                md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v2833, v2190, v1140, v2196, v2161);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1140 += 224;
        v1128 += 8;
      }
      while (v1128 != v1129);
    }
  }
  if (v1124 + 4 == v1131)
  {
    *(void *)&v2833.f64[0] = &v2824;
    *(void *)&v2833.f64[1] = v2817;
    v2834.f64[0] = v2812;
    uint64_t v1141 = v1124[7];
    uint64_t v1142 = v1124[8];
    if (v1141 != v1142)
    {
      v1143 = (void *)v1124[10];
      do
      {
        unint64_t v2201 = *(unsigned int *)(v1141 + 4);
        unint64_t v2202 = v2201 >> 7;
        uint64_t v2203 = v1123[4];
        unint64_t v2204 = (v1123[5] - v2203) >> 3;
        if (v2201 >> 7 < v2204)
        {
          uint64_t v2205 = *(void *)(v2203 + 8 * v2202);
          if (v2205)
          {
            uint64_t v2206 = v2201 & 0x7F;
            unint64_t v2207 = *(unsigned __int16 *)(v2205 + 2 * v2206);
            uint64_t v2209 = v1123[7];
            uint64_t v2208 = v1123[8];
            unint64_t v2210 = (v2208 - v2209) >> 3;
            if (v2210 > v2207)
            {
              uint64_t v2211 = v2209 + 8 * v2207;
              if (v2211 != v2208 && *(_DWORD *)(v2211 + 4) == v2201)
              {
                uint64_t v2213 = v1125[4];
                unint64_t v2214 = (v1125[5] - v2213) >> 3;
                if (v2202 < v2214)
                {
                  uint64_t v2215 = *(void *)(v2213 + 8 * v2202);
                  if (v2215)
                  {
                    unint64_t v2216 = *(unsigned __int16 *)(v2215 + 2 * v2206);
                    uint64_t v2218 = v1125[7];
                    uint64_t v2217 = v1125[8];
                    unint64_t v2219 = (v2217 - v2218) >> 3;
                    if (v2219 > v2216)
                    {
                      uint64_t v2220 = v2218 + 8 * v2216;
                      if (v2220 != v2217 && *(_DWORD *)(v2220 + 4) == v2201)
                      {
                        uint64_t v2222 = v1127[4];
                        if (v2202 < (v1127[5] - v2222) >> 3)
                        {
                          uint64_t v2223 = *(void *)(v2222 + 8 * v2202);
                          if (v2223)
                          {
                            unint64_t v2224 = *(unsigned __int16 *)(v2223 + 2 * v2206);
                            uint64_t v2226 = v1127[7];
                            uint64_t v2225 = v1127[8];
                            if (v2224 < (v2225 - v2226) >> 3)
                            {
                              uint64_t v2227 = v2226 + 8 * v2224;
                              if (v2227 != v2225 && *(_DWORD *)(v2227 + 4) == v2201)
                              {
                                unint64_t v2229 = *(void *)v1141;
                                uint64_t v2230 = HIDWORD(*(void *)v1141);
                                unint64_t v2231 = *(void *)v1141 >> 39;
                                if (v2231 < v2204
                                  && (uint64_t v2232 = *(void *)(v2203 + 8 * v2231)) != 0
                                  && (unint64_t v2233 = *(unsigned __int16 *)(v2232 + 2 * (HIDWORD(v2229) & 0x7F)), v2210 > v2233)
                                  && (uint64_t v2234 = v2209 + 8 * v2233, v2234 != v2208)
                                  && *(_DWORD *)(v2234 + 4) == v2230)
                                {
                                  uint64_t v2235 = v1123[10] + 224 * v2233;
                                }
                                else
                                {
                                  uint64_t v2235 = v1123[11];
                                }
                                if (v2231 < v2214
                                  && (uint64_t v2236 = *(void *)(v2213 + 8 * v2231)) != 0
                                  && (unint64_t v2237 = *(unsigned __int16 *)(v2236 + 2 * (HIDWORD(v2229) & 0x7F)), v2219 > v2237)
                                  && (uint64_t v2238 = v2218 + 8 * v2237, v2238 != v2217)
                                  && *(_DWORD *)(v2238 + 4) == v2230)
                                {
                                  v2200 = (uint64_t *)(v1125[10] + 8 * v2237);
                                }
                                else
                                {
                                  v2200 = (uint64_t *)v1125[11];
                                }
                                md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v2833, v2229, v2235, v1143, v2200);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1143;
        v1141 += 8;
      }
      while (v1141 != v1142);
    }
  }
  if (v1125 + 4 == v1131)
  {
    *(void *)&v2833.f64[0] = &v2824;
    *(void *)&v2833.f64[1] = v2817;
    v2834.f64[0] = v2812;
    uint64_t v1144 = v1125[7];
    uint64_t v1145 = v1125[8];
    if (v1144 != v1145)
    {
      v1146 = (uint64_t *)v1125[10];
      do
      {
        unint64_t v2240 = *(unsigned int *)(v1144 + 4);
        unint64_t v2241 = v2240 >> 7;
        uint64_t v2242 = v1123[4];
        unint64_t v2243 = (v1123[5] - v2242) >> 3;
        if (v2240 >> 7 < v2243)
        {
          uint64_t v2244 = *(void *)(v2242 + 8 * v2241);
          if (v2244)
          {
            uint64_t v2245 = v2240 & 0x7F;
            unint64_t v2246 = *(unsigned __int16 *)(v2244 + 2 * v2245);
            uint64_t v2248 = v1123[7];
            uint64_t v2247 = v1123[8];
            unint64_t v2249 = (v2247 - v2248) >> 3;
            if (v2249 > v2246)
            {
              uint64_t v2250 = v2248 + 8 * v2246;
              if (v2250 != v2247 && *(_DWORD *)(v2250 + 4) == v2240)
              {
                uint64_t v2252 = v1124[4];
                unint64_t v2253 = (v1124[5] - v2252) >> 3;
                if (v2241 < v2253)
                {
                  uint64_t v2254 = *(void *)(v2252 + 8 * v2241);
                  if (v2254)
                  {
                    unint64_t v2255 = *(unsigned __int16 *)(v2254 + 2 * v2245);
                    uint64_t v2257 = v1124[7];
                    uint64_t v2256 = v1124[8];
                    unint64_t v2258 = (v2256 - v2257) >> 3;
                    if (v2258 > v2255)
                    {
                      uint64_t v2259 = v2257 + 8 * v2255;
                      if (v2259 != v2256 && *(_DWORD *)(v2259 + 4) == v2240)
                      {
                        uint64_t v2261 = v1127[4];
                        if (v2241 < (v1127[5] - v2261) >> 3)
                        {
                          uint64_t v2262 = *(void *)(v2261 + 8 * v2241);
                          if (v2262)
                          {
                            unint64_t v2263 = *(unsigned __int16 *)(v2262 + 2 * v2245);
                            uint64_t v2265 = v1127[7];
                            uint64_t v2264 = v1127[8];
                            if (v2263 < (v2264 - v2265) >> 3)
                            {
                              uint64_t v2266 = v2265 + 8 * v2263;
                              if (v2266 != v2264 && *(_DWORD *)(v2266 + 4) == v2240)
                              {
                                unint64_t v2268 = *(void *)v1144;
                                uint64_t v2269 = HIDWORD(*(void *)v1144);
                                unint64_t v2270 = *(void *)v1144 >> 39;
                                if (v2270 < v2243
                                  && (uint64_t v2271 = *(void *)(v2242 + 8 * v2270)) != 0
                                  && (unint64_t v2272 = *(unsigned __int16 *)(v2271 + 2 * (HIDWORD(v2268) & 0x7F)), v2249 > v2272)
                                  && (uint64_t v2273 = v2248 + 8 * v2272, v2273 != v2247)
                                  && *(_DWORD *)(v2273 + 4) == v2269)
                                {
                                  uint64_t v2274 = v1123[10] + 224 * v2272;
                                }
                                else
                                {
                                  uint64_t v2274 = v1123[11];
                                }
                                if (v2270 < v2253
                                  && (uint64_t v2275 = *(void *)(v2252 + 8 * v2270)) != 0
                                  && (unint64_t v2276 = *(unsigned __int16 *)(v2275 + 2 * (HIDWORD(v2268) & 0x7F)), v2258 > v2276)
                                  && (uint64_t v2277 = v2257 + 8 * v2276, v2277 != v2256)
                                  && *(_DWORD *)(v2277 + 4) == v2269)
                                {
                                  v2239 = (void *)(v1124[10] + 8 * v2276);
                                }
                                else
                                {
                                  v2239 = (void *)v1124[11];
                                }
                                md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v2833, v2268, v2274, v2239, v1146);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1146;
        v1144 += 8;
      }
      while (v1144 != v1145);
    }
  }
  if ((void *)v2816 == v1131)
  {
    *(void *)&v2833.f64[0] = &v2824;
    *(void *)&v2833.f64[1] = v2817;
    v2834.f64[0] = v2812;
    uint64_t v1147 = v1127[7];
    for (juint64_t j = v1127[8]; v1147 != jj; v1147 += 8)
    {
      unint64_t v2279 = *(unsigned int *)(v1147 + 4);
      unint64_t v2280 = v2279 >> 7;
      uint64_t v2281 = v1123[4];
      unint64_t v2282 = (v1123[5] - v2281) >> 3;
      if (v2279 >> 7 < v2282)
      {
        uint64_t v2283 = *(void *)(v2281 + 8 * v2280);
        if (v2283)
        {
          uint64_t v2284 = v2279 & 0x7F;
          unint64_t v2285 = *(unsigned __int16 *)(v2283 + 2 * v2284);
          uint64_t v2287 = v1123[7];
          uint64_t v2286 = v1123[8];
          unint64_t v2288 = (v2286 - v2287) >> 3;
          if (v2288 > v2285)
          {
            uint64_t v2289 = v2287 + 8 * v2285;
            if (v2289 != v2286 && *(_DWORD *)(v2289 + 4) == v2279)
            {
              uint64_t v2291 = v1124[4];
              unint64_t v2292 = (v1124[5] - v2291) >> 3;
              if (v2280 < v2292)
              {
                uint64_t v2293 = *(void *)(v2291 + 8 * v2280);
                if (v2293)
                {
                  unint64_t v2294 = *(unsigned __int16 *)(v2293 + 2 * v2284);
                  uint64_t v2296 = v1124[7];
                  uint64_t v2295 = v1124[8];
                  unint64_t v2297 = (v2295 - v2296) >> 3;
                  if (v2297 > v2294)
                  {
                    uint64_t v2298 = v2296 + 8 * v2294;
                    if (v2298 != v2295 && *(_DWORD *)(v2298 + 4) == v2279)
                    {
                      uint64_t v2300 = v1125[4];
                      unint64_t v2301 = (v1125[5] - v2300) >> 3;
                      if (v2280 < v2301)
                      {
                        uint64_t v2302 = *(void *)(v2300 + 8 * v2280);
                        if (v2302)
                        {
                          unint64_t v2303 = *(unsigned __int16 *)(v2302 + 2 * v2284);
                          uint64_t v2305 = v1125[7];
                          uint64_t v2304 = v1125[8];
                          unint64_t v2306 = (v2304 - v2305) >> 3;
                          if (v2306 > v2303)
                          {
                            uint64_t v2307 = v2305 + 8 * v2303;
                            if (v2307 != v2304 && *(_DWORD *)(v2307 + 4) == v2279)
                            {
                              unint64_t v2309 = *(void *)v1147;
                              uint64_t v2310 = HIDWORD(*(void *)v1147);
                              unint64_t v2311 = *(void *)v1147 >> 39;
                              if (v2311 < v2282
                                && (uint64_t v2312 = *(void *)(v2281 + 8 * v2311)) != 0
                                && (unint64_t v2313 = *(unsigned __int16 *)(v2312 + 2 * (HIDWORD(v2309) & 0x7F)), v2288 > v2313)
                                && (uint64_t v2314 = v2287 + 8 * v2313, v2314 != v2286)
                                && *(_DWORD *)(v2314 + 4) == v2310)
                              {
                                uint64_t v2315 = v1123[10] + 224 * v2313;
                              }
                              else
                              {
                                uint64_t v2315 = v1123[11];
                              }
                              if (v2311 < v2292
                                && (uint64_t v2316 = *(void *)(v2291 + 8 * v2311)) != 0
                                && (unint64_t v2317 = *(unsigned __int16 *)(v2316 + 2 * (HIDWORD(v2309) & 0x7F)), v2297 > v2317)
                                && (uint64_t v2318 = v2296 + 8 * v2317, v2318 != v2295)
                                && *(_DWORD *)(v2318 + 4) == v2310)
                              {
                                v2319 = (void *)(v1124[10] + 8 * v2317);
                              }
                              else
                              {
                                v2319 = (void *)v1124[11];
                              }
                              if (v2311 < v2301
                                && (uint64_t v2320 = *(void *)(v2300 + 8 * v2311)) != 0
                                && (unint64_t v2321 = *(unsigned __int16 *)(v2320 + 2 * (HIDWORD(v2309) & 0x7F)), v2306 > v2321)
                                && (uint64_t v2322 = v2305 + 8 * v2321, v2322 != v2304)
                                && *(_DWORD *)(v2322 + 4) == v2310)
                              {
                                v2278 = (uint64_t *)(v1125[10] + 8 * v2321);
                              }
                              else
                              {
                                v2278 = (uint64_t *)v1125[11];
                              }
                              md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v2833, v2309, v2315, v2319, v2278);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2818 != (unint64_t *)v2821) {
    free(v2818);
  }
}

void sub_1A1EA1454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  if (a19 != a21) {
    free(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(int8x8_t *a1)
{
  uint64_t v10 = 0x191A1E6102D25134;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x191A1E6102D25134;
    if (*(void *)&v1 <= 0x191A1E6102D25134uLL) {
      uint64_t v3 = 0x191A1E6102D25134uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x191A1E6102D25134;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x191A1E6102D25134)
      {
        if (v5[2] == 0x191A1E6102D25134) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x191A1E6102D25134) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x191A1E6102D25134) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA180C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MeshRenderableComponent>(int8x8_t *a1)
{
  uint64_t v10 = 0x675E87F739E21A6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x675E87F739E21A6;
    if (*(void *)&v1 <= 0x675E87F739E21A6uLL) {
      uint64_t v3 = 0x675E87F739E21A6uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x675E87F739E21A6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x675E87F739E21A6)
      {
        if (v5[2] == 0x675E87F739E21A6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x675E87F739E21A6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x675E87F739E21A6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA1A7C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RenderOrder>(int8x8_t *a1)
{
  uint64_t v10 = 0x72E34259225F8C3ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x72E34259225F8C3ELL;
    if (*(void *)&v1 <= 0x72E34259225F8C3EuLL) {
      uint64_t v3 = 0x72E34259225F8C3EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x72E34259225F8C3ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x72E34259225F8C3ELL)
      {
        if (v5[2] == 0x72E34259225F8C3ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x72E34259225F8C3ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x72E34259225F8C3ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA1CEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = **(void **)a1;
  uint64_t v12 = (void *)gdc::Registry::storage<arComponents::CommandBufferLocation>(*(int8x8_t **)(v10 + 440));
  uint64_t v13 = v12[4];
  if (a2 >> 39 < (v12[5] - v13) >> 3)
  {
    uint64_t v14 = *(void *)(v13 + 8 * (a2 >> 39));
    if (v14)
    {
      unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v17 = v12[7];
      uint64_t v16 = v12[8];
      if (v15 < (v16 - v17) >> 3)
      {
        uint64_t v18 = v17 + 8 * v15;
        if (v18 != v16 && *(_DWORD *)(v18 + 4) == HIDWORD(a2))
        {
          uint64_t v20 = v12[10];
          uint64_t v21 = (unsigned __int8 *)(v20 + 2 * v15);
          if (v21 != (unsigned __int8 *)v12[11] && v20 != 0)
          {
            uint64_t v23 = *(void **)(*(void *)(a1 + 16) + 8);
            uint64_t v24 = v23[3];
            uint64_t v25 = v23[4];
            uint64_t v26 = v25 - v24;
            if (v25 == v24) {
              goto LABEL_20;
            }
            uint64_t v27 = 0;
            unint64_t v28 = v26 >> 3;
            while (1)
            {
              unint64_t v29 = *(unsigned __int8 **)(v24 + 8 * v27);
              if (*v29 == *v21)
              {
                unint64_t v30 = *((void *)v29 + 1);
                uint64_t v31 = v23[15];
                if (v30 < (v23[16] - v31) >> 3) {
                  break;
                }
              }
              if (++v27 >= v28) {
                goto LABEL_20;
              }
            }
            uint64_t v32 = *(void *)(v31 + 8 * v30);
            if (!v32 || (uint64_t v11 = *(void *)(*(void *)(v32 + 24) + 8 * v21[1])) == 0) {
LABEL_20:
            }
              uint64_t v11 = **(void **)a1;
          }
        }
      }
    }
  }
  uint64_t v33 = (*(void *)(*(void *)(**(void **)(a3 + 216) + 96) + 48)
       - *(void *)(*(void *)(**(void **)(a3 + 216) + 96) + 40)) >> 1;
  unint64_t v34 = (void *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(void *)(v10 + 432));
  v34[6] = *a4;
  uint64_t v35 = *a5;
  uint64_t v36 = **(void **)(a3 + 216);
  v34[3] = v10 + 136;
  char v34[4] = v35;
  uint64_t v37 = *(unsigned int *)(*(void *)(a3 + 32) + 16);
  v34[8] = v36;
  v34[9] = 0;
  v34[10] = v33;
  v34[11] = 0;
  v34[12] = 1;
  v34[13] = v37;
  return ggl::CommandBuffer::pushRenderItem(v11, (uint64_t)v34);
}

uint64_t gdc::Registry::storage<arComponents::CommandBufferLocation>(int8x8_t *a1)
{
  uint64_t v10 = 0x4F42F084E69A322;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4F42F084E69A322;
    if (*(void *)&v1 <= 0x4F42F084E69A322uLL) {
      uint64_t v3 = 0x4F42F084E69A322uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4F42F084E69A322;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4F42F084E69A322)
      {
        if (v5[2] == 0x4F42F084E69A322) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4F42F084E69A322) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4F42F084E69A322) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA20F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(a1[11] - 2);
  a1[11] -= 2;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RenderOrder>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RenderOrder>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RenderOrder>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::RenderOrder>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v23 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 224 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  md::MeshRenderable::operator=(v14, a1[11] - 224);
  uint64_t v15 = a1[11];
  *(void *)(v15 - 224) = &unk_1EF534030;
  if (*(unsigned char *)(v15 - 48))
  {
    uint64_t v16 = *(std::__shared_weak_count **)(v15 - 64);
    if (v16)
    {
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 184);
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  a1[11] = v15 - 224;
  uint64_t v18 = (void *)a1[28];
  if (!v18) {
    return 1;
  }
  uint64_t v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    uint64_t v24 = v19;
    uint64_t v20 = v18[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v24, v25);
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return md::MeshRenderable::operator=(v21, v22);
}

uint64_t md::MeshRenderable::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 124) == *(unsigned __int8 *)(a2 + 124))
  {
    if (*(unsigned char *)(a1 + 124))
    {
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    }
  }
  else if (*(unsigned char *)(a1 + 124))
  {
    *(unsigned char *)(a1 + 124) = 0;
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 100);
    *(void *)(a1 + 116) = *(void *)(a2 + 116);
    *(_OWORD *)(a1 + 100) = v9;
    *(unsigned char *)(a1 + 124) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 140) == *(unsigned __int8 *)(a2 + 140))
  {
    if (*(unsigned char *)(a1 + 140))
    {
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    }
  }
  else if (*(unsigned char *)(a1 + 140))
  {
    *(unsigned char *)(a1 + 140) = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 128);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(void *)(a1 + 128) = v10;
    *(unsigned char *)(a1 + 140) = 1;
  }
  int v11 = *(_DWORD *)(a2 + 144);
  *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v11;
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(unsigned char *)(a1 + 176))
    {
      uint64_t v13 = *(void *)(a2 + 152);
      uint64_t v12 = *(void *)(a2 + 160);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 160);
      *(void *)(a1 + 152) = v13;
      *(void *)(a1 + 160) = v12;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    }
  }
  else if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 160);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    *(unsigned char *)(a1 + 176) = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = 1;
  }
  int v17 = *(_DWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v17;
  if (*(unsigned __int8 *)(a1 + 193) == *(unsigned __int8 *)(a2 + 193))
  {
    if (*(unsigned char *)(a1 + 193)) {
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    }
  }
  else if (*(unsigned char *)(a1 + 193))
  {
    *(unsigned char *)(a1 + 193) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(unsigned char *)(a1 + 193) = 1;
  }
  long long v18 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 196) = v18;
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = a1[11];
  long long v4 = (void *)a1[10];
  if (v3 == v2) {
    goto LABEL_14;
  }
  uint64_t v5 = v3 - 224;
  uint64_t v6 = a1[11];
  do
  {
    *(void *)(v6 - 224) = &unk_1EF534030;
    v6 -= 224;
    if (*(unsigned char *)(v6 + 176)
      && (unint64_t v7 = *(std::__shared_weak_count **)(v3 - 64)) != 0
      && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      long long v8 = *(std::__shared_weak_count **)(v3 - 184);
      if (!v8) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v8 = *(std::__shared_weak_count **)(v3 - 184);
      if (!v8) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
LABEL_4:
    v5 -= 224;
    uint64_t v3 = v6;
  }
  while (v6 != v2);
  long long v4 = (void *)a1[10];
LABEL_14:
  a1[11] = v2;
  operator delete(v4);
LABEL_15:
  long long v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[4];
  if (v10)
  {
    int v11 = (void *)a1[5];
    uint64_t v12 = (void *)a1[4];
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *--v11;
        uint64_t v13 = v14;
        *int v11 = 0;
        if (v14) {
          MEMORY[0x1A6239270](v13, 0x1000C40104B78CFLL);
        }
      }
      while (v11 != v10);
      uint64_t v12 = (void *)a1[4];
    }
    a1[5] = v10;
    operator delete(v12);
  }
  return a1;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasUVScale>(int8x8_t *a1)
{
  unint64_t v10 = 0xB41DC12BDB54AE20;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB41DC12BDB54AE20;
    if (*(void *)&v1 <= 0xB41DC12BDB54AE20) {
      unint64_t v3 = 0xB41DC12BDB54AE20 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB41DC12BDB54AE20;
  }
  long long v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB41DC12BDB54AE20)
      {
        if (v5[2] == 0xB41DC12BDB54AE20) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB41DC12BDB54AE20) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB41DC12BDB54AE20) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA2DC8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(int8x8_t *a1)
{
  unint64_t v10 = 0xC0EA819B6DB55095;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC0EA819B6DB55095;
    if (*(void *)&v1 <= 0xC0EA819B6DB55095) {
      unint64_t v3 = 0xC0EA819B6DB55095 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC0EA819B6DB55095;
  }
  long long v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC0EA819B6DB55095)
      {
        if (v5[2] == 0xC0EA819B6DB55095) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC0EA819B6DB55095) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC0EA819B6DB55095) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA3038(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 8);
  v15 -= 8;
  *uint64_t v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  a1[11] = v15;
  int v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    int v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasUVMapping>(int8x8_t *a1)
{
  uint64_t v10 = 0x643B34C49CDDA18CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x643B34C49CDDA18CLL;
    if (*(void *)&v1 <= 0x643B34C49CDDA18CuLL) {
      uint64_t v3 = 0x643B34C49CDDA18CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x643B34C49CDDA18CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x643B34C49CDDA18CLL)
      {
        if (v5[2] == 0x643B34C49CDDA18CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x643B34C49CDDA18CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x643B34C49CDDA18CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA35F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(int8x8_t *a1)
{
  unint64_t v10 = 0xDC92CCE45D2E7F01;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDC92CCE45D2E7F01;
    if (*(void *)&v1 <= 0xDC92CCE45D2E7F01) {
      unint64_t v3 = 0xDC92CCE45D2E7F01 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDC92CCE45D2E7F01;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDC92CCE45D2E7F01)
      {
        if (v5[2] == 0xDC92CCE45D2E7F01) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDC92CCE45D2E7F01) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDC92CCE45D2E7F01) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA3864(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 4);
  v15 -= 4;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasAlbedo>(int8x8_t *a1)
{
  unint64_t v10 = 0xC7C4F4CB9AB24850;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC7C4F4CB9AB24850;
    if (*(void *)&v1 <= 0xC7C4F4CB9AB24850) {
      unint64_t v3 = 0xC7C4F4CB9AB24850 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC7C4F4CB9AB24850;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC7C4F4CB9AB24850)
      {
        if (v5[2] == 0xC7C4F4CB9AB24850) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC7C4F4CB9AB24850) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC7C4F4CB9AB24850) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA3E30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AlbedoTextureComponent>(int8x8_t *a1)
{
  uint64_t v10 = 0x6CFD195DCBD616C9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6CFD195DCBD616C9;
    if (*(void *)&v1 <= 0x6CFD195DCBD616C9uLL) {
      uint64_t v3 = 0x6CFD195DCBD616C9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6CFD195DCBD616C9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6CFD195DCBD616C9)
      {
        if (v5[2] == 0x6CFD195DCBD616C9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6CFD195DCBD616C9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6CFD195DCBD616C9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA40A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v30 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void *)(v14 + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  void *v15 = *(void *)(v16 - 48);
  uint64_t v17 = v15 + 1;
  uint64_t v19 = *(void *)(v16 - 40);
  uint64_t v18 = *(void *)(v16 - 32);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *uint64_t v17 = v19;
  uint64_t v20 = v14 + 48 * v7;
  uint64_t v21 = *(std::__shared_weak_count **)(v20 + 16);
  *(void *)(v20 + 16) = v18;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  id v22 = *(id *)(v16 - 16);
  uint64_t v23 = v14 + 48 * v7;
  uint64_t v24 = *(void **)(v23 + 32);
  *(void *)(v23 + 32) = v22;

  uint64_t v25 = a1[11];
  *(void *)(v25 - 24) = &unk_1EF559EB8;

  uint64_t v26 = *(std::__shared_weak_count **)(v25 - 32);
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  a1[11] = v25 - 48;
  uint64_t v27 = (void *)a1[28];
  if (!v27) {
    return 1;
  }
  uint64_t v28 = a1[31];
  while (1)
  {
    v32[0] = &v30;
    v32[1] = 1;
    uint64_t v31 = v28;
    uint64_t v29 = v27[6];
    if (!v29) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v29 + 48))(v29, &v31, v32);
    uint64_t v27 = (void *)*v27;
    if (!v27) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr();
}

void geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559EB8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559EB8;

  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AlbedoTextureComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,arComponents::AlbedoTextureComponent>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 24;
      do
      {
        *(void *)(v3 - 24) = &unk_1EF559EB8;

        uint64_t v6 = *(std::__shared_weak_count **)(v3 - 32);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v3 -= 48;
        v5 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  unint64_t v7 = (void *)a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*a1;
  if (*a1)
  {
    uint64_t v9 = (void *)a1[1];
    unint64_t v10 = (void *)*a1;
    if (v9 != v8)
    {
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          MEMORY[0x1A6239270](v11, 0x1000C40104B78CFLL);
        }
      }
      while (v9 != v8);
      unint64_t v10 = (void *)*a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xDAF4167A62E7598BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDAF4167A62E7598BLL;
    if (*(void *)&v1 <= 0xDAF4167A62E7598BLL) {
      unint64_t v3 = 0xDAF4167A62E7598BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDAF4167A62E7598BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDAF4167A62E7598BLL)
      {
        if (v5[2] == 0xDAF4167A62E7598BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDAF4167A62E7598BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDAF4167A62E7598BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA49A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void applyCameraViewConstant(gdc::Registry *,md::LayoutContext const&)::$_0::operator()(double *a1, uint64_t a2, void *a3)
{
  double v5 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  double v7 = v5 + v5;
  double v8 = (v5 + v5) * v5;
  double v9 = (v6 + v6) * v6;
  double v11 = *(double *)(a2 + 16);
  double v10 = *(double *)(a2 + 24);
  double v12 = (v10 + v10) * v5;
  double v13 = *(double *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  double v15 = (v6 + v6) * v13;
  double v16 = v12 - v15;
  double v17 = v6 * (v10 + v10);
  v41.f64[0] = 1.0 - (v8 + v9);
  v41.f64[1] = v15 + v12;
  double v18 = 1.0 - (v10 + v10) * v10;
  v44.f64[0] = v16;
  v44.f64[1] = v18 - v9;
  double v19 = v13 * v7;
  double v20 = v13 * v7 + v17;
  double v21 = v7 * v6;
  double v22 = v13 * (v10 + v10);
  v47.f64[0] = v20;
  v47.f64[1] = v21 - v22;
  double v42 = v17 - v19;
  double v45 = v22 + v21;
  double v48 = v18 - v8;
  uint64_t v43 = 0;
  uint64_t v46 = 0;
  uint64_t v49 = 0;
  float64x2_t v50 = *(float64x2_t *)a2;
  double v51 = v11;
  uint64_t v52 = 0x3FF0000000000000;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v23 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  uint64_t v32 = v14;
  *(void *)&long long v35 = v23;
  *((void *)&v37 + 1) = v24;
  gm::operator*<double,4,4,4>(v31, v41.f64, (double *)&v32);
  gm::Matrix<double,4,4>::inverted<int,void>(v41.f64, v31);
  double v25 = a1[62];
  double v26 = a1[63];
  double v27 = a1[64];
  unint64_t v28 = a3[1];
  uint64_t v29 = (float32x2_t *)a3[9];
  float32_t v30 = v51 + v42 * v25 + v45 * v26 + v48 * v27;
  *uint64_t v29 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v50, v41, v25), v44, v26), v47, v27));
  v29[1].f32[0] = v30;
  if (a3[8] > v28) {
    unint64_t v28 = a3[8];
  }
  a3[7] = 0;
  a3[8] = v28;
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  double v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    double v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(int8x8_t *a1)
{
  unint64_t v10 = 0xCEC9FB27CDC26A5FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCEC9FB27CDC26A5FLL;
    if (*(void *)&v1 <= 0xCEC9FB27CDC26A5FLL) {
      unint64_t v3 = 0xCEC9FB27CDC26A5FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCEC9FB27CDC26A5FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCEC9FB27CDC26A5FLL)
      {
        if (v5[2] == 0xCEC9FB27CDC26A5FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCEC9FB27CDC26A5FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCEC9FB27CDC26A5FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA4F44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::TransformConstantDataComponent>(int8x8_t *a1)
{
  uint64_t v10 = 0x763E4B3D3FAB91E9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x763E4B3D3FAB91E9;
    if (*(void *)&v1 <= 0x763E4B3D3FAB91E9uLL) {
      uint64_t v3 = 0x763E4B3D3FAB91E9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x763E4B3D3FAB91E9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x763E4B3D3FAB91E9)
      {
        if (v5[2] == 0x763E4B3D3FAB91E9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x763E4B3D3FAB91E9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x763E4B3D3FAB91E9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA51B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v17 = *(void *)(v15 - 16);
  uint64_t v16 = *(void *)(v15 - 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = (std::__shared_weak_count *)v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = a1[11];
  double v20 = *(std::__shared_weak_count **)(v19 - 8);
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  a1[11] = v19 - 16;
  double v21 = (void *)a1[28];
  if (!v21) {
    return 1;
  }
  uint64_t v22 = a1[31];
  while (1)
  {
    v26[0] = &v24;
    v26[1] = 1;
    uint64_t v25 = v22;
    uint64_t v23 = v21[6];
    if (!v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v23 + 48))(v23, &v25, v26);
    double v21 = (void *)*v21;
    if (!v21) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(int8x8_t *a1)
{
  unint64_t v10 = 0xA87D3DFF83E23FACLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA87D3DFF83E23FACLL;
    if (*(void *)&v1 <= 0xA87D3DFF83E23FACLL) {
      unint64_t v3 = 0xA87D3DFF83E23FACLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA87D3DFF83E23FACLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA87D3DFF83E23FACLL)
      {
        if (v5[2] == 0xA87D3DFF83E23FACLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA87D3DFF83E23FACLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA87D3DFF83E23FACLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA585C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x8619CDD24E91309ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8619CDD24E91309ELL;
    if (*(void *)&v1 <= 0x8619CDD24E91309ELL) {
      unint64_t v3 = 0x8619CDD24E91309ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8619CDD24E91309ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8619CDD24E91309ELL)
      {
        if (v5[2] == 0x8619CDD24E91309ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8619CDD24E91309ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8619CDD24E91309ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA5C70(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ViewConstantDataComponent>(int8x8_t *a1)
{
  unint64_t v10 = 0xCB308D90549F69A2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCB308D90549F69A2;
    if (*(void *)&v1 <= 0xCB308D90549F69A2) {
      unint64_t v3 = 0xCB308D90549F69A2 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCB308D90549F69A2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCB308D90549F69A2)
      {
        if (v5[2] == 0xCB308D90549F69A2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCB308D90549F69A2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCB308D90549F69A2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA5EE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *applyViewConstantData(gdc::Registry *)::$_0::operator()(void *result, _DWORD *a2)
{
  unint64_t v3 = result[8];
  uint8x8_t v2 = (_DWORD *)result[9];
  _DWORD *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  void v2[4] = a2[4];
  void v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  v2[12] = a2[12];
  v2[13] = a2[13];
  v2[14] = a2[14];
  unint64_t v4 = result[1];
  v2[15] = a2[15];
  if (v3 <= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = v3;
  }
  result[7] = 0;
  result[8] = v5;
  return result;
}

BOOL gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + (v7 << 6));
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 16);
  v15 -= 16;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  void v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  v14[13] = v15[13];
  v14[14] = v15[14];
  v14[15] = v15[15];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x88C1B8F0562DF3D9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x88C1B8F0562DF3D9;
    if (*(void *)&v1 <= 0x88C1B8F0562DF3D9) {
      unint64_t v3 = 0x88C1B8F0562DF3D9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x88C1B8F0562DF3D9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x88C1B8F0562DF3D9)
      {
        if (v5[2] == 0x88C1B8F0562DF3D9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x88C1B8F0562DF3D9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x88C1B8F0562DF3D9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA65A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::StyleColor>(int8x8_t *a1)
{
  uint64_t v10 = 0x4213A85274C86D76;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4213A85274C86D76;
    if (*(void *)&v1 <= 0x4213A85274C86D76uLL) {
      uint64_t v3 = 0x4213A85274C86D76uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4213A85274C86D76;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4213A85274C86D76)
      {
        if (v5[2] == 0x4213A85274C86D76) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4213A85274C86D76) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4213A85274C86D76) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA6814(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::VisibilityAlpha>(int8x8_t *a1)
{
  unint64_t v10 = 0xBD9C607E106B8732;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBD9C607E106B8732;
    if (*(void *)&v1 <= 0xBD9C607E106B8732) {
      unint64_t v3 = 0xBD9C607E106B8732 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBD9C607E106B8732;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBD9C607E106B8732)
      {
        if (v5[2] == 0xBD9C607E106B8732) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBD9C607E106B8732) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBD9C607E106B8732) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA6A84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StyleColor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::StyleColor>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 4);
  v15 -= 4;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::StyleColor>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::StyleColor>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(int8x8_t *a1)
{
  unint64_t v10 = 0xCA5457B5B9B18C94;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCA5457B5B9B18C94;
    if (*(void *)&v1 <= 0xCA5457B5B9B18C94) {
      unint64_t v3 = 0xCA5457B5B9B18C94 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCA5457B5B9B18C94;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCA5457B5B9B18C94)
      {
        if (v5[2] == 0xCA5457B5B9B18C94) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCA5457B5B9B18C94) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCA5457B5B9B18C94) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA71EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasARLightingSetup>(int8x8_t *a1)
{
  uint64_t v10 = 0x27BFFACF4E4CE977;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x27BFFACF4E4CE977;
    if (*(void *)&v1 <= 0x27BFFACF4E4CE977uLL) {
      uint64_t v3 = 0x27BFFACF4E4CE977uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x27BFFACF4E4CE977;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x27BFFACF4E4CE977)
      {
        if (v5[2] == 0x27BFFACF4E4CE977) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x27BFFACF4E4CE977) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x27BFFACF4E4CE977) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA75F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::PipelineIdentifier>(int8x8_t *a1)
{
  uint64_t v10 = 0x10DAC80543D1165FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x10DAC80543D1165FLL;
    if (*(void *)&v1 <= 0x10DAC80543D1165FuLL) {
      uint64_t v3 = 0x10DAC80543D1165FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x10DAC80543D1165FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x10DAC80543D1165FLL)
      {
        if (v5[2] == 0x10DAC80543D1165FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x10DAC80543D1165FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x10DAC80543D1165FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA7A04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(int8x8_t *a1)
{
  uint64_t v10 = 0x1BF1779BE1E06867;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1BF1779BE1E06867;
    if (*(void *)&v1 <= 0x1BF1779BE1E06867uLL) {
      uint64_t v3 = 0x1BF1779BE1E06867uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1BF1779BE1E06867;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1BF1779BE1E06867)
      {
        if (v5[2] == 0x1BF1779BE1E06867) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1BF1779BE1E06867) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1BF1779BE1E06867) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA7E28(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  double v42 = &unk_1EF534030;
  v43[0] = 0;
  *(void *)&v43[8] = 0;
  *(void *)&v43[16] = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v44 = *(void *)(a1 + 48);
  double v45 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v46) = 0;
  v47[0] = 0;
  v47[8] = 1;
  *(_OWORD *)&v47[12] = xmmword_1A28FC710;
  *(void *)&v47[28] = 0x80000000800000;
  v47[36] = 0;
  BYTE12(v48) = 0;
  v49[0] = 0;
  v49[12] = 0;
  *(_DWORD *)&v49[16] = 65537;
  *(_WORD *)&v49[20] = 0;
  LOBYTE(v50) = 0;
  char v53 = 0;
  LOBYTE(v54) = 0;
  BYTE4(v54) = 0;
  __int16 v55 = 0;
  v56[0] = 0;
  v56[4] = 0;
  *(void *)&v56[12] = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
  *(void *)&v56[20] = a3;
  *(_OWORD *)&v43[8] = *(_OWORD *)(a3 + 16);
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v42);
  uint64_t v6 = *(int8x8_t **)(a1 + 440);
  unint64_t v24 = &unk_1EF534030;
  long long v25 = *(_OWORD *)v43;
  uint64_t v26 = *(void *)&v43[16];
  uint64_t v27 = v44;
  unint64_t v28 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v32 = *(_OWORD *)&v47[32];
  long long v33 = v48;
  *(_OWORD *)long long v34 = *(_OWORD *)v49;
  long long v29 = v46;
  long long v30 = *(_OWORD *)v47;
  *(void *)&v34[14] = *(void *)&v49[14];
  long long v31 = *(_OWORD *)&v47[16];
  LOBYTE(v35) = 0;
  char v38 = 0;
  if (v53)
  {
    uint64_t v35 = v50;
    long long v36 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v37 = v52;
    char v38 = 1;
  }
  uint64_t v39 = v54;
  __int16 v40 = 0;
  if (HIBYTE(v55))
  {
    LOBYTE(v40) = v55;
    HIBYTE(v40) = 1;
  }
  *(_OWORD *)float64x2_t v41 = *(_OWORD *)v56;
  *(_OWORD *)&v41[12] = *(_OWORD *)&v56[12];
  *(void *)&long long v22 = 0xA3C8162527B8C964;
  *((void *)&v22 + 1) = "arComponents::ShadowPipeline]";
  uint64_t v23 = 28;
  unint64_t v20 = a2;
  uint64_t v21 = 10;
  unint64_t v7 = (void *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v7, a2);
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v6);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v8, a2, (uint64_t)&v24);
  uint64_t v9 = (void *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v6);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v9, a2, &v22);
  uint64_t v10 = (void *)gdc::Registry::storage<arComponents::RenderOrder>(v6);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v10, a2, &v21);
  uint64_t v11 = (void *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, a2);
  double v12 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v6);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v12, a2, &v20);
  double v13 = (void *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v13, a2);
  uint64_t v14 = (void *)gdc::Registry::storage<arComponents::ShadowPipeline>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v14, a2);
  unint64_t v24 = &unk_1EF534030;
  if (v38)
  {
    uint64_t v15 = v36;
    if (v36)
    {
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  uint64_t v16 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)(a1 + 440));
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v17, a2);
  double v42 = &unk_1EF534030;
  if (v53)
  {
    uint64_t v18 = v51;
    if (v51)
    {
      if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  uint64_t v19 = v45;
  if (v45)
  {
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1A1EA825C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>();
}

uint64_t gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(int8x8_t *a1)
{
  uint64_t v10 = 0x58A2A58D4856FF1DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x58A2A58D4856FF1DLL;
    if (*(void *)&v1 <= 0x58A2A58D4856FF1DuLL) {
      uint64_t v3 = 0x58A2A58D4856FF1DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x58A2A58D4856FF1DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x58A2A58D4856FF1DLL)
      {
        if (v5[2] == 0x58A2A58D4856FF1DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x58A2A58D4856FF1DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x58A2A58D4856FF1DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA85B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v60);
  if (v6)
  {
    unint64_t v11 = a1[11];
    unint64_t v12 = a1[12];
    if (v11 >= v12)
    {
      uint64_t v23 = a1[10];
      uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v23) >> 5);
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x124924924924924) {
        goto LABEL_65;
      }
      unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - v23) >> 5);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x92492492492492) {
        unint64_t v27 = 0x124924924924924;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 > 0x124924924924924) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v28 = (char *)operator new(224 * v27);
      }
      else
      {
        unint64_t v28 = 0;
      }
      long long v29 = &v28[224 * v24];
      *(void *)long long v29 = &unk_1EF534030;
      *(_OWORD *)(v29 + 8) = *(_OWORD *)(a3 + 8);
      uint64_t v30 = *(void *)(a3 + 32);
      *((void *)v29 + 3) = *(void *)(a3 + 24);
      *((void *)v29 + 4) = v30;
      uint64_t v31 = *(void *)(a3 + 40);
      *((void *)v29 + 5) = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      long long v32 = *(_OWORD *)(a3 + 128);
      *((_OWORD *)v29 + 7) = *(_OWORD *)(a3 + 112);
      *((_OWORD *)v29 + 8) = v32;
      *(void *)(v29 + 142) = *(void *)(a3 + 142);
      long long v33 = *(_OWORD *)(a3 + 64);
      *((_OWORD *)v29 + 3) = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v29 + 4) = v33;
      long long v34 = *(_OWORD *)(a3 + 96);
      *((_OWORD *)v29 + 5) = *(_OWORD *)(a3 + 80);
      *((_OWORD *)v29 + 6) = v34;
      v29[152] = 0;
      v29[176] = 0;
      if (*(unsigned char *)(a3 + 176))
      {
        uint64_t v35 = *(void *)(a3 + 160);
        *((void *)v29 + 19) = *(void *)(a3 + 152);
        *((void *)v29 + 20) = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
        v29[168] = *(unsigned char *)(a3 + 168);
        v29[176] = 1;
      }
      *((void *)v29 + 23) = *(void *)(a3 + 184);
      *((_WORD *)v29 + 96) = 0;
      if (*(unsigned char *)(a3 + 193))
      {
        v29[192] = *(unsigned char *)(a3 + 192);
        v29[193] = 1;
      }
      long long v36 = &v28[224 * v27];
      *(_OWORD *)(v29 + 196) = *(_OWORD *)(a3 + 196);
      *((_OWORD *)v29 + 13) = *(_OWORD *)(a3 + 208);
      long long v22 = v29 + 224;
      char v37 = (char *)a1[10];
      char v38 = (char *)a1[11];
      if (v38 == v37)
      {
        a1[10] = v29;
        a1[11] = v22;
        a1[12] = v36;
      }
      else
      {
        uint64_t v39 = 0;
        do
        {
          float64x2_t v41 = &v29[v39];
          *((void *)v41 - 28) = &unk_1EF534030;
          double v42 = &v38[v39];
          long long v43 = *(_OWORD *)&v38[v39 - 216];
          *((void *)v41 - 25) = *(void *)&v38[v39 - 200];
          *(_OWORD *)(v41 - 216) = v43;
          *((void *)v41 - 24) = *(void *)&v38[v39 - 192];
          uint64_t v44 = *(void *)&v38[v39 - 184];
          *((void *)v41 - 23) = v44;
          if (v44) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
          }
          long long v45 = *((_OWORD *)v42 - 11);
          long long v46 = *((_OWORD *)v42 - 9);
          *((_OWORD *)v41 - 10) = *((_OWORD *)v42 - 10);
          *((_OWORD *)v41 - 9) = v46;
          *((_OWORD *)v41 - 11) = v45;
          long long v47 = *((_OWORD *)v42 - 8);
          long long v48 = *((_OWORD *)v42 - 7);
          long long v49 = *((_OWORD *)v42 - 6);
          *(void *)(v41 - 82) = *(void *)(v42 - 82);
          *((_OWORD *)v41 - 7) = v48;
          *((_OWORD *)v41 - 6) = v49;
          *((_OWORD *)v41 - 8) = v47;
          *(v41 - 72) = 0;
          *(v41 - 48) = 0;
          if (*(v42 - 48))
          {
            *((void *)v41 - 9) = *(void *)&v38[v39 - 72];
            uint64_t v50 = *(void *)&v38[v39 - 64];
            *(void *)&v29[v39 - 64] = v50;
            if (v50) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
            }
            v29[v39 - 56] = v38[v39 - 56];
            *(v41 - 48) = 1;
          }
          double v51 = &v29[v39];
          char v52 = &v38[v39];
          *((void *)v51 - 5) = *(void *)&v38[v39 - 40];
          *((_WORD *)v51 - 16) = 0;
          if (v38[v39 - 31])
          {
            *(v51 - 32) = *(v52 - 32);
            *(v51 - 31) = 1;
          }
          long long v40 = *(_OWORD *)(v52 - 28);
          *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
          *(_OWORD *)(v51 - 28) = v40;
          v39 -= 224;
        }
        while (&v38[v39] != v37);
        char v38 = (char *)a1[10];
        char v53 = (char *)a1[11];
        a1[10] = &v29[v39];
        a1[11] = v22;
        a1[12] = v36;
        if (v53 != v38)
        {
          uint64_t v54 = v53 - 224;
          __int16 v55 = v53;
          do
          {
            *((void *)v55 - 28) = &unk_1EF534030;
            v55 -= 224;
            if (v55[176])
            {
              unint64_t v56 = (std::__shared_weak_count *)*((void *)v53 - 8);
              if (v56)
              {
                if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
            }
            uint64_t v57 = (std::__shared_weak_count *)*((void *)v53 - 23);
            if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
            v54 -= 224;
            char v53 = v55;
          }
          while (v55 != v38);
        }
      }
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)unint64_t v11 = &unk_1EF534030;
      long long v13 = *(_OWORD *)(a3 + 8);
      *(void *)(v11 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v11 + 8) = v13;
      *(void *)(v11 + 32) = *(void *)(a3 + 32);
      uint64_t v14 = *(void *)(a3 + 40);
      *(void *)(v11 + 40) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a3 + 48);
      long long v16 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v11 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v11 + 80) = v16;
      *(_OWORD *)(v11 + 48) = v15;
      long long v17 = *(_OWORD *)(a3 + 96);
      long long v18 = *(_OWORD *)(a3 + 112);
      long long v19 = *(_OWORD *)(a3 + 128);
      *(void *)(v11 + 142) = *(void *)(a3 + 142);
      *(_OWORD *)(v11 + 112) = v18;
      *(_OWORD *)(v11 + 128) = v19;
      *(_OWORD *)(v11 + 96) = v17;
      *(unsigned char *)(v11 + 152) = 0;
      *(unsigned char *)(v11 + 176) = 0;
      if (*(unsigned char *)(a3 + 176))
      {
        *(void *)(v11 + 152) = *(void *)(a3 + 152);
        uint64_t v20 = *(void *)(a3 + 160);
        *(void *)(v11 + 160) = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)(v11 + 168) = *(unsigned char *)(a3 + 168);
        *(unsigned char *)(v11 + 176) = 1;
      }
      *(void *)(v11 + 184) = *(void *)(a3 + 184);
      *(_WORD *)(v11 + 192) = 0;
      if (*(unsigned char *)(a3 + 193))
      {
        *(unsigned char *)(v11 + 192) = *(unsigned char *)(a3 + 192);
        *(unsigned char *)(v11 + 193) = 1;
      }
      long long v21 = *(_OWORD *)(a3 + 196);
      *(_OWORD *)(v11 + 208) = *(_OWORD *)(a3 + 208);
      *(_OWORD *)(v11 + 196) = v21;
      long long v22 = (char *)(v11 + 224);
    }
    a1[11] = v22;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = md::MeshRenderable::operator=(a1[10] + 224 * (((uint64_t)v5 - a1[7]) >> 3), a3);
    uint64_t v8 = a1[31];
    if (v7 != a1[11])
    {
      uint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v62 = &v60;
          uint64_t v63 = 1;
          uint64_t v61 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v61, &v62);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_64:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_65:
        abort();
      }
      return;
    }
  }
  long long v58 = (void *)a1[22];
  if (v58)
  {
    while (1)
    {
      uint64_t v62 = &v60;
      uint64_t v63 = 1;
      uint64_t v61 = v8;
      uint64_t v59 = v58[6];
      if (!v59) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v59 + 48))(v59, &v61, &v62);
      long long v58 = (void *)*v58;
      if (!v58) {
        return;
      }
    }
    goto LABEL_64;
  }
}

void gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v25 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v25);
  if (v6)
  {
    long long v13 = (void *)a1[11];
    unint64_t v12 = a1[12];
    if ((unint64_t)v13 >= v12)
    {
      long long v16 = (void *)a1[10];
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v13 - v16) + 1;
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v16) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = (char *)operator new(24 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      long long v21 = &v20[8 * (v13 - v16)];
      *(_OWORD *)long long v21 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      long long v15 = v21 + 24;
      if (v13 != v16)
      {
        do
        {
          long long v22 = *(_OWORD *)(v13 - 3);
          *((void *)v21 - 1) = *(v13 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v13 -= 3;
        }
        while (v13 != v16);
        long long v13 = (void *)a1[10];
      }
      a1[10] = v21;
      a1[11] = v15;
      a1[12] = &v20[24 * v19];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      long long v14 = *a3;
      v13[2] = *((void *)a3 + 2);
      *(_OWORD *)long long v13 = v14;
      long long v15 = v13 + 3;
    }
    a1[11] = v15;
    uint64_t v9 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3);
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = a1[31];
    if (v7 != a1[11])
    {
      uint64_t v10 = (void *)a1[16];
      if (v10)
      {
        while (1)
        {
          unint64_t v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v26, &v27);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v23 = (void *)a1[22];
  if (v23)
  {
    while (1)
    {
      unint64_t v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v9;
      uint64_t v24 = v23[6];
      if (!v24) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 48))(v24, &v26, &v27);
      uint64_t v23 = (void *)*v23;
      if (!v23) {
        return;
      }
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(int8x8_t *a1)
{
  unint64_t v10 = 0xBADB2FF16CCDF7F4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBADB2FF16CCDF7F4;
    if (*(void *)&v1 <= 0xBADB2FF16CCDF7F4) {
      unint64_t v3 = 0xBADB2FF16CCDF7F4 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBADB2FF16CCDF7F4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBADB2FF16CCDF7F4)
      {
        if (v5[2] == 0xBADB2FF16CCDF7F4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBADB2FF16CCDF7F4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBADB2FF16CCDF7F4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA9040(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RebuildPipelineSetup>(int8x8_t *a1)
{
  unint64_t v10 = 0xAC35728C5B9C6C04;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xAC35728C5B9C6C04;
    if (*(void *)&v1 <= 0xAC35728C5B9C6C04) {
      unint64_t v3 = 0xAC35728C5B9C6C04 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xAC35728C5B9C6C04;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xAC35728C5B9C6C04)
      {
        if (v5[2] == 0xAC35728C5B9C6C04) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xAC35728C5B9C6C04) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xAC35728C5B9C6C04) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EA92B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  long long v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    long long v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  long long v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    long long v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  long long v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    long long v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()()
{
}

void sub_1A1EA9CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

void gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v38 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v38);
  if (v6)
  {
    uint64_t v15 = (char *)a1[11];
    unint64_t v14 = a1[12];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v20 = (char *)a1[10];
      uint64_t v21 = (v15 - v20) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        goto LABEL_54;
      }
      uint64_t v23 = v14 - (void)v20;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = (char *)operator new(16 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      uint64_t v26 = &v25[16 * v21];
      *(void *)uint64_t v26 = 0;
      *((void *)v26 + 1) = 0;
      uint64_t v27 = *a3;
      uint64_t v28 = a3[1];
      if (v28)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        *((void *)v26 + 1) = v28;
        uint64_t v20 = (char *)a1[10];
        uint64_t v15 = (char *)a1[11];
      }
      long long v29 = &v25[16 * v24];
      *(void *)uint64_t v26 = v27;
      unint64_t v19 = v26 + 16;
      if (v15 == v20)
      {
        a1[10] = v26;
        a1[11] = v19;
        a1[12] = v29;
      }
      else
      {
        do
        {
          uint64_t v30 = v26;
          *((void *)v26 - 2) = 0;
          *((void *)v26 - 1) = 0;
          v26 -= 16;
          uint64_t v31 = *((void *)v15 - 2);
          uint64_t v32 = *((void *)v15 - 1);
          v15 -= 16;
          if (v32)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
            long long v33 = (std::__shared_weak_count *)*((void *)v30 - 1);
            *((void *)v30 - 2) = v31;
            *((void *)v30 - 1) = v32;
            if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          else
          {
            *((void *)v30 - 2) = v31;
            *((void *)v30 - 1) = 0;
          }
        }
        while (v15 != v20);
        uint64_t v20 = (char *)a1[10];
        long long v34 = (char *)a1[11];
        a1[10] = v26;
        a1[11] = v19;
        for (a1[12] = v29; v34 != v20; v34 -= 16)
        {
          uint64_t v35 = (std::__shared_weak_count *)*((void *)v34 - 1);
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      uint64_t v16 = *a3;
      uint64_t v17 = a3[1];
      if (v17)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 + 1);
        *(void *)uint64_t v15 = v16;
        *((void *)v15 + 1) = v17;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        unint64_t v19 = v15 + 16;
      }
      else
      {
        *(void *)uint64_t v15 = v16;
        *((void *)v15 + 1) = 0;
        unint64_t v19 = v15 + 16;
      }
    }
    a1[11] = v19;
    uint64_t v11 = a1[31];
  }
  else
  {
    unint64_t v7 = (void *)(a1[10] + 2 * ((void)v5 - a1[7]));
    uint64_t v9 = *a3;
    uint64_t v8 = a3[1];
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = (std::__shared_weak_count *)v7[1];
    *unint64_t v7 = v9;
    v7[1] = v8;
    if (v10)
    {
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    uint64_t v11 = a1[31];
    if (v7 != (void *)a1[11])
    {
      unint64_t v12 = (void *)a1[16];
      if (v12)
      {
        while (1)
        {
          long long v40 = &v38;
          uint64_t v41 = 1;
          uint64_t v39 = v11;
          uint64_t v13 = v12[6];
          if (!v13) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v13 + 48))(v13, &v39, &v40);
          unint64_t v12 = (void *)*v12;
          if (!v12) {
            return;
          }
        }
LABEL_53:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_54:
        abort();
      }
      return;
    }
  }
  long long v36 = (void *)a1[22];
  if (v36)
  {
    while (1)
    {
      long long v40 = &v38;
      uint64_t v41 = 1;
      uint64_t v39 = v11;
      uint64_t v37 = v36[6];
      if (!v37) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v37 + 48))(v37, &v39, &v40);
      long long v36 = (void *)*v36;
      if (!v36) {
        return;
      }
    }
    goto LABEL_53;
  }
}

BOOL gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::OcclusionPipeline>(int8x8_t *a1)
{
  uint64_t v10 = 0x2E1ED5CD904AAD01;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2E1ED5CD904AAD01;
    if (*(void *)&v1 <= 0x2E1ED5CD904AAD01uLL) {
      uint64_t v3 = 0x2E1ED5CD904AAD01uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2E1ED5CD904AAD01;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2E1ED5CD904AAD01)
      {
        if (v5[2] == 0x2E1ED5CD904AAD01) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2E1ED5CD904AAD01) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2E1ED5CD904AAD01) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EAA3A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  double v42 = &unk_1EF534030;
  v43[0] = 0;
  *(void *)&v43[8] = 0;
  *(void *)&v43[16] = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v44 = *(void *)(a1 + 48);
  long long v45 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v46) = 0;
  v47[0] = 0;
  v47[8] = 1;
  *(_OWORD *)&v47[12] = xmmword_1A28FC710;
  *(void *)&v47[28] = 0x80000000800000;
  v47[36] = 0;
  BYTE12(v48) = 0;
  v49[0] = 0;
  v49[12] = 0;
  *(_DWORD *)&v49[16] = 65537;
  *(_WORD *)&v49[20] = 0;
  LOBYTE(v50) = 0;
  char v53 = 0;
  LOBYTE(v54) = 0;
  BYTE4(v54) = 0;
  __int16 v55 = 0;
  v56[0] = 0;
  v56[4] = 0;
  *(void *)&v56[12] = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
  *(void *)&v56[20] = a3;
  *(_OWORD *)&v43[8] = *(_OWORD *)(a3 + 16);
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v42);
  uint64_t v6 = *(int8x8_t **)(a1 + 440);
  unint64_t v24 = &unk_1EF534030;
  long long v25 = *(_OWORD *)v43;
  uint64_t v26 = *(void *)&v43[16];
  uint64_t v27 = v44;
  uint64_t v28 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v32 = *(_OWORD *)&v47[32];
  long long v33 = v48;
  *(_OWORD *)long long v34 = *(_OWORD *)v49;
  long long v29 = v46;
  long long v30 = *(_OWORD *)v47;
  *(void *)&v34[14] = *(void *)&v49[14];
  long long v31 = *(_OWORD *)&v47[16];
  LOBYTE(v35) = 0;
  char v38 = 0;
  if (v53)
  {
    uint64_t v35 = v50;
    long long v36 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v37 = v52;
    char v38 = 1;
  }
  uint64_t v39 = v54;
  __int16 v40 = 0;
  if (HIBYTE(v55))
  {
    LOBYTE(v40) = v55;
    HIBYTE(v40) = 1;
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v56;
  *(_OWORD *)&v41[12] = *(_OWORD *)&v56[12];
  *(void *)&long long v22 = 0x2E1ED5CD904AAD01;
  *((void *)&v22 + 1) = "arComponents::OcclusionPipeline]";
  uint64_t v23 = 31;
  unint64_t v20 = a2;
  uint64_t v21 = 10;
  unint64_t v7 = (void *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v7, a2);
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v6);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v8, a2, (uint64_t)&v24);
  uint64_t v9 = (void *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v6);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v9, a2, &v22);
  uint64_t v10 = (void *)gdc::Registry::storage<arComponents::RenderOrder>(v6);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v10, a2, &v21);
  uint64_t v11 = (void *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, a2);
  unint64_t v12 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v6);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v12, a2, &v20);
  uint64_t v13 = (void *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v13, a2);
  unint64_t v14 = (void *)gdc::Registry::storage<arComponents::OcclusionPipeline>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v14, a2);
  unint64_t v24 = &unk_1EF534030;
  if (v38)
  {
    uint64_t v15 = v36;
    if (v36)
    {
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  uint64_t v16 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)(a1 + 440));
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v17, a2);
  double v42 = &unk_1EF534030;
  if (v53)
  {
    uint64_t v18 = v51;
    if (v51)
    {
      if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  unint64_t v19 = v45;
  if (v45)
  {
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1A1EAA7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()()
{
}

void sub_1A1EAAD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

BOOL gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  double v42 = &unk_1EF534030;
  v43[0] = 0;
  *(void *)&v43[8] = 0;
  *(void *)&v43[16] = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v44 = *(void *)(a1 + 48);
  long long v45 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v46) = 0;
  v47[0] = 0;
  v47[8] = 1;
  *(_OWORD *)&v47[12] = xmmword_1A28FC710;
  *(void *)&v47[28] = 0x80000000800000;
  v47[36] = 0;
  BYTE12(v48) = 0;
  v49[0] = 0;
  v49[12] = 0;
  *(_DWORD *)&v49[16] = 65537;
  *(_WORD *)&v49[20] = 0;
  LOBYTE(v50) = 0;
  char v53 = 0;
  LOBYTE(v54) = 0;
  BYTE4(v54) = 0;
  __int16 v55 = 0;
  v56[0] = 0;
  v56[4] = 0;
  *(void *)&v56[12] = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
  *(void *)&v56[20] = a3;
  *(_OWORD *)&v43[8] = *(_OWORD *)(a3 + 16);
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v42);
  uint64_t v6 = *(int8x8_t **)(a1 + 440);
  unint64_t v24 = &unk_1EF534030;
  long long v25 = *(_OWORD *)v43;
  uint64_t v26 = *(void *)&v43[16];
  uint64_t v27 = v44;
  uint64_t v28 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v32 = *(_OWORD *)&v47[32];
  long long v33 = v48;
  *(_OWORD *)long long v34 = *(_OWORD *)v49;
  long long v29 = v46;
  long long v30 = *(_OWORD *)v47;
  *(void *)&v34[14] = *(void *)&v49[14];
  long long v31 = *(_OWORD *)&v47[16];
  LOBYTE(v35) = 0;
  char v38 = 0;
  if (v53)
  {
    uint64_t v35 = v50;
    long long v36 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v37 = v52;
    char v38 = 1;
  }
  uint64_t v39 = v54;
  __int16 v40 = 0;
  if (HIBYTE(v55))
  {
    LOBYTE(v40) = v55;
    HIBYTE(v40) = 1;
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v56;
  *(_OWORD *)&v41[12] = *(_OWORD *)&v56[12];
  *(void *)&long long v22 = 0x5BD3262791F15BBDLL;
  *((void *)&v22 + 1) = "arComponents::StandardPipeline]";
  uint64_t v23 = 30;
  unint64_t v20 = a2;
  uint64_t v21 = 10;
  unint64_t v7 = (void *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v7, a2);
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v6);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v8, a2, (uint64_t)&v24);
  uint64_t v9 = (void *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v6);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v9, a2, &v22);
  unint64_t v10 = (void *)gdc::Registry::storage<arComponents::RenderOrder>(v6);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v10, a2, &v21);
  uint64_t v11 = (void *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, a2);
  unint64_t v12 = (void *)gdc::Registry::storage<arComponents::ContextEntity>(v6);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v12, a2, &v20);
  uint64_t v13 = (void *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v13, a2);
  unint64_t v14 = (void *)gdc::Registry::storage<arComponents::StandardPipeline>(v6);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v14, a2);
  unint64_t v24 = &unk_1EF534030;
  if (v38)
  {
    uint64_t v15 = v36;
    if (v36)
    {
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  uint64_t v16 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  unint64_t v17 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)(a1 + 440));
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v17, a2);
  double v42 = &unk_1EF534030;
  if (v53)
  {
    uint64_t v18 = v51;
    if (v51)
    {
      if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  unint64_t v19 = v45;
  if (v45)
  {
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1A1EAB304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()()
{
}

void sub_1A1EAB874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

BOOL gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          uint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              uint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARMeshRenderLayer::~ARMeshRenderLayer(md::ARMeshRenderLayer *this)
{
  md::ARMeshRenderLayer::~ARMeshRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  void *v16;

  *(void *)this = &unk_1EF536B98;
  uint64_t v2 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 57);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 57);
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  unint64_t v7 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v7)
  {
    uint64_t v8 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v7);
    MEMORY[0x1A6239270](v8, 0x10A0C40D234DDC7);
  }
  uint64_t v9 = (void *)*((void *)this + 51);
  if (v9)
  {
    do
    {
      unint64_t v10 = (void *)*v9;
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = (void *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v11) {
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 46);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      unint64_t v12 = v13;
    }
    while (v13);
  }
  uint64_t v14 = (void *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v14) {
    operator delete(v14);
  }
  md::ARMeshRenderResources::~ARMeshRenderResources((md::ARMeshRenderLayer *)((char *)this + 64));
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v16 = (void *)*((void *)this + 1);
  if (v16)
  {
    *((void *)this + 2) = v16;
    operator delete(v16);
  }
}

void md::ARMeshRenderResources::~ARMeshRenderResources(md::ARMeshRenderResources *this)
{
  *((void *)this + 9) = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 12));
    *((void *)this + 12) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_15:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    uint64_t v8 = ggl::FragmentedPool<ggl::ARMesh::ARDepthMeshPipelineSetup>::~FragmentedPool(v7);
    MEMORY[0x1A6239270](v8, 0x10A0C40D234DDC7);
  }
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9)
  {
    uint64_t v10 = ggl::FragmentedPool<ggl::ARMesh::ARMeshPipelineSetup>::~FragmentedPool(v9);
    MEMORY[0x1A6239270](v10, 0x10A0C40D234DDC7);
  }
  uint64_t v11 = *(void *)this;
  *(void *)this = 0;
  if (v11)
  {
    uint64_t v12 = ggl::FragmentedPool<ggl::ARMesh::ARShadowPipelineSetup>::~FragmentedPool(v11);
    MEMORY[0x1A6239270](v12, 0x10A0C40D234DDC7);
  }
}

uint64_t ggl::FragmentedPool<ggl::ARMesh::ARDepthMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::ARMesh::ARMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::ARMesh::ARShadowPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void md::ARMeshRenderLayer::ARMeshRenderLayer(md::ARMeshRenderLayer *this, id *a2, VKSharedResources *a3, gdc::Registry *a4)
{
  long long v242 = a3;
  uint64_t v6 = operator new(4uLL);
  *uint64_t v6 = 83887872;
  *(void *)this = &unk_1EF530C60;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v7 = operator new(4uLL);
  *((void *)this + 1) = v7;
  *v7++ = *v6;
  *((void *)this + 2) = v7;
  *((void *)this + 3) = v7;
  *((_WORD *)this + 16) = 0;
  *((unsigned char *)this + 34) = 2;
  *(void *)this = &unk_1EF542AA0;
  *((void *)this + 5) = a2;
  operator delete(v6);
  *(void *)this = &unk_1EF536B98;
  md::InstanceData::identity((md::ARMeshRenderLayer *)((char *)this + 48));
  uint64_t v8 = (long long *)[a2[13] format];
  uint64_t v9 = v242;
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 17) = &unk_1EF55A890;
  *(void *)((char *)this + 172) = 1793;
  *((_DWORD *)this + 45) = 0;
  *((void *)this + 23) = 1;
  *((_WORD *)this + 96) = 0;
  *((unsigned char *)this + 194) = 3;
  *(void *)((char *)this + 203) = 0;
  *(void *)((char *)this + 195) = 0;
  *((unsigned char *)this + 211) = 0;
  *(void *)((char *)this + 268) = 0;
  *(void *)((char *)this + 260) = 0;
  *((_WORD *)this + 162) = 257;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 344) = 0;
  uint64_t v10 = [(VKSharedResources *)v9 shaderLibrary];
  uint64_t v11 = *(void *)(v10 + 80);
  uint64_t v13 = *(void *)(v11 + 32);
  uint64_t v12 = *(std::__shared_weak_count **)(v11 + 40);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (char *)operator new(0x198uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EF589240;
  long long v243 = *v8;
  long long v246 = v8[1];
  {
    if (v239)
    {
      {
        if (v239)
        {
          {
            {
              ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
            *(void *)algn_1EB31EAD0 = 1;
          }
          ggl::ARMesh::ARMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
          {
            ggl::ARMesh::pipelineDataARMeshPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          }
          qword_1E9591CA8 = (uint64_t)&ggl::ARMesh::pipelineDataARMeshPipelineDeviceStructs(void)::ref;
          unk_1E9591CB0 = 1;
          {
            ggl::ARMesh::pipelineDataARMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9592038 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9592040 = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
            unk_1E9592048 = ggl::ARMesh::UVMapping::reflection(void)::reflection;
            qword_1E9592050 = (uint64_t)ggl::ARMesh::UVScale::reflection(void)::reflection;
            unk_1E9592058 = ggl::ARMesh::ARLightingSetup::reflection(void)::reflection;
            qword_1E9592060 = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
          }
          qword_1E9591CB8 = (uint64_t)&ggl::ARMesh::pipelineDataARMeshPipelineConstantStructs(void)::ref;
          unk_1E9591CC0 = xmmword_1A28FCF60;
        }
      }
      ggl::ARMesh::ARMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARMesh::ARMeshPipelineSetup::typedReflection(void)::ref;
      ggl::ARMeshShader::typedReflection(v239);
      qword_1E9591C50 = (uint64_t)&ggl::ARMeshShader::typedReflection(void)::ref;
      {
        ggl::ARMesh::pipelineStateARMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9591E58 = 0;
        qword_1E9591E60 = (uint64_t)"";
        dword_1E9591E68 = 0;
        qword_1E9591E70 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9591E78 = 1;
      }
      qword_1E9591C58 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineAttributeStructBinding(void)::attr;
      unk_1E9591C60 = 1;
      qword_1E9591C68 = 0;
      unk_1E9591C70 = 2;
      {
        ggl::ARMesh::pipelineStateARMeshPipelineDeviceStructBinding(void)::ref = 0;
        unk_1E9591E90 = 0;
        qword_1E9591E98 = (uint64_t)"instanceTransform";
        dword_1E9591EA0 = 2;
        qword_1E9591EA8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1E9591EB0 = 0;
      }
      qword_1E9591C78 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineDeviceStructBinding(void)::ref;
      unk_1E9591C80 = 1;
      {
        ggl::ARMesh::pipelineStateARMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9591ED0 = 0;
        qword_1E9591ED8 = (uint64_t)"view";
        dword_1E9591EE0 = 3;
        qword_1E9591EE8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9591EF0 = xmmword_1A28FCEB0;
        qword_1E9591F00 = 1;
        unk_1E9591F08 = "transform";
        dword_1E9591F10 = 3;
        qword_1E9591F18 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E9591F20 = xmmword_1A28FCF70;
        qword_1E9591F30 = 2;
        unk_1E9591F38 = "cameraView";
        dword_1E9591F40 = 3;
        qword_1E9591F48 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantCameraViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9591F50 = xmmword_1A28FC950;
        qword_1E9591F60 = 3;
        unk_1E9591F68 = "uvMapping";
        dword_1E9591F70 = 3;
        qword_1E9591F78 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantUvMappingBinding(void)::reflection;
        unk_1E9591F80 = xmmword_1A28FC960;
        qword_1E9591F90 = 4;
        unk_1E9591F98 = "uvScale";
        dword_1E9591FA0 = 3;
        qword_1E9591FA8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantUvScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E9591FB0 = xmmword_1A28FCF80;
        qword_1E9591FC0 = 5;
        unk_1E9591FC8 = "arLightingSetup";
        dword_1E9591FD0 = 3;
        qword_1E9591FD8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantArLightingSetupBinding(void)::reflection;
        xmmword_1E9591FE0 = xmmword_1A28FCF90;
        qword_1E9591FF0 = 6;
        unk_1E9591FF8 = "styleColor";
        dword_1E9592000 = 3;
        qword_1E9592008 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantStyleColorBinding(void)::reflection;
        unk_1E9592010 = 1;
      }
      qword_1E9591C88 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantStructBinding(void)::ref;
      unk_1E9591C90 = 7;
    }
  }
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  *((_DWORD *)v14 + 14) = 0;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 3) = &unk_1EF55B208;
  *((void *)v14 + 8) = &ggl::ARMesh::ARMeshPipelineState::typedReflection(void)::ref;
  *((void *)v14 + 9) = v13;
  *((void *)v14 + 10) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v14[136] = 0;
  *(_OWORD *)(v14 + 140) = xmmword_1A28FC970;
  *(void *)(v14 + 156) = 0;
  *(void *)(v14 + 172) = 0;
  *(void *)(v14 + 164) = 0;
  v14[184] = 0;
  *(_OWORD *)(v14 + 188) = xmmword_1A28FC970;
  *(void *)(v14 + 204) = 0;
  *(void *)(v14 + 220) = 0;
  *(void *)(v14 + 212) = 0;
  v14[232] = 0;
  *(_OWORD *)(v14 + 236) = xmmword_1A28FC970;
  *(void *)(v14 + 252) = 0;
  *(void *)(v14 + 268) = 0;
  *(void *)(v14 + 260) = 0;
  *(_OWORD *)(v14 + 280) = v243;
  *(_OWORD *)(v14 + 296) = v246;
  v14[312] = 0;
  *((void *)v14 + 48) = 0;
  long long v15 = 0uLL;
  *((_OWORD *)v14 + 22) = 0u;
  *((_OWORD *)v14 + 23) = 0u;
  *((_OWORD *)v14 + 20) = 0u;
  *((_OWORD *)v14 + 21) = 0u;
  *((void *)v14 + 49) = 0x100000001;
  v14[400] = 0;
  v14[88] = 1;
  *(_WORD *)(v14 + 89) = v251;
  v14[91] = v252;
  *(_OWORD *)(v14 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v14 + 27) = 7;
  *((void *)v14 + 14) = 0;
  *((void *)v14 + 15) = 0;
  *((_DWORD *)v14 + 32) = 0;
  v14[132] = 15;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v15 = 0uLL;
  }
  *((void *)v14 + 45) = 0;
  *(_OWORD *)(v14 + 329) = v15;
  *(_OWORD *)(v14 + 345) = v15;
  int8x16_t v16 = vceqzq_s8(*(int8x16_t *)(v14 + 328));
  int16x8_t v17 = vmovl_high_s8(v16);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  int8x16_t v20 = v19;
  int16x8_t v21 = vmovl_s8(*(int8x8_t *)v16.i8);
  int32x4_t v22 = vmovl_s16(*(int16x4_t *)v21.i8);
  v19.i64[0] = v22.u32[0];
  v19.i64[1] = v22.u32[1];
  int8x16_t v23 = v19;
  int32x4_t v24 = vmovl_high_s16(v17);
  v19.i64[0] = v24.u32[0];
  v19.i64[1] = v24.u32[1];
  int8x16_t v25 = v19;
  int32x4_t v26 = vmovl_high_s16(v21);
  v19.i64[0] = v26.u32[0];
  v19.i64[1] = v26.u32[1];
  int8x16_t v27 = v19;
  v19.i64[0] = v18.u32[2];
  v19.i64[1] = v18.u32[3];
  int8x16_t v28 = v19;
  v19.i64[0] = v22.u32[2];
  v19.i64[1] = v22.u32[3];
  int8x16_t v29 = v19;
  v19.i64[0] = v24.u32[2];
  v19.i64[1] = v24.u32[3];
  int8x16_t v30 = v19;
  v19.i64[0] = v26.u32[2];
  v19.i64[1] = v26.u32[3];
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v19);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v30);
  int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v29);
  int8x16_t v34 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v25);
  int8x16_t v35 = vceqzq_s8(*(int8x16_t *)(v14 + 344));
  int16x8_t v36 = vmovl_high_s8(v35);
  int32x4_t v37 = vmovl_s16(*(int16x4_t *)v36.i8);
  v19.i64[0] = v37.u32[0];
  v19.i64[1] = v37.u32[1];
  int8x16_t v38 = v19;
  int16x8_t v39 = vmovl_s8(*(int8x8_t *)v35.i8);
  int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v19.i64[0] = v40.u32[0];
  v19.i64[1] = v40.u32[1];
  int8x16_t v41 = v19;
  int32x4_t v42 = vmovl_high_s16(v36);
  v19.i64[0] = v42.u32[0];
  v19.i64[1] = v42.u32[1];
  int8x16_t v43 = v19;
  int32x4_t v44 = vmovl_high_s16(v39);
  v19.i64[0] = v44.u32[0];
  v19.i64[1] = v44.u32[1];
  int8x16_t v45 = v19;
  v19.i64[0] = v37.u32[2];
  v19.i64[1] = v37.u32[3];
  int8x16_t v46 = v19;
  v19.i64[0] = v40.u32[2];
  v19.i64[1] = v40.u32[3];
  int8x16_t v47 = v19;
  v19.i64[0] = v42.u32[2];
  v19.i64[1] = v42.u32[3];
  int8x16_t v48 = v19;
  v19.i64[0] = v44.u32[2];
  v19.i64[1] = v44.u32[3];
  int8x16_t v49 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v48);
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v38), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v20));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v41), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v23));
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v43), v34);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v27));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v46), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v28));
  int8x16_t v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v47), v33);
  int8x16_t v56 = vorrq_s8(v49, v32);
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v19), v31);
  int8x16_t v58 = vceqzq_s8(*(int8x16_t *)(v14 + 360));
  int16x8_t v59 = vmovl_high_s8(v58);
  int32x4_t v60 = vmovl_s16(*(int16x4_t *)v59.i8);
  v19.i64[0] = v60.i32[0];
  v19.i64[1] = v60.i32[1];
  int8x16_t v61 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v19);
  int8x16_t v62 = vceqzq_s8(*(int8x16_t *)(v14 + 376));
  int16x8_t v63 = vmovl_high_s8(v62);
  int32x4_t v64 = vmovl_s16(*(int16x4_t *)v63.i8);
  v19.i64[0] = v64.i32[0];
  v19.i64[1] = v64.i32[1];
  int8x16_t v65 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v19), v61), v50);
  int16x8_t v66 = vmovl_s8(*(int8x8_t *)v58.i8);
  int32x4_t v67 = vmovl_s16(*(int16x4_t *)v66.i8);
  v19.i64[0] = v67.i32[0];
  v19.i64[1] = v67.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v19);
  int16x8_t v69 = vmovl_s8(*(int8x8_t *)v62.i8);
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v69.i8);
  v19.i64[0] = v70.i32[0];
  v19.i64[1] = v70.i32[1];
  int8x16_t v71 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v19), v68), v51);
  int32x4_t v72 = vmovl_high_s16(v59);
  v19.i64[0] = v72.i32[0];
  v19.i64[1] = v72.i32[1];
  int8x16_t v73 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v19);
  int32x4_t v74 = vmovl_high_s16(v63);
  v19.i64[0] = v74.i32[0];
  v19.i64[1] = v74.i32[1];
  int8x16_t v75 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v19), v73), v52);
  int32x4_t v76 = vmovl_high_s16(v66);
  v19.i64[0] = v76.i32[0];
  v19.i64[1] = v76.i32[1];
  int8x16_t v77 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v19);
  int32x4_t v78 = vmovl_high_s16(v69);
  v19.i64[0] = v78.i32[0];
  v19.i64[1] = v78.i32[1];
  int8x16_t v79 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v19), v77), v53);
  v19.i64[0] = v60.i32[2];
  v19.i64[1] = v60.i32[3];
  int8x16_t v80 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v19);
  v19.i64[0] = v64.i32[2];
  v19.i64[1] = v64.i32[3];
  int8x16_t v81 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v19), v80), v54);
  v19.i64[0] = v67.i32[2];
  v19.i64[1] = v67.i32[3];
  int8x16_t v82 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v19);
  v19.i64[0] = v70.i32[2];
  v19.i64[1] = v70.i32[3];
  int8x16_t v83 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v19), v82), v55);
  v19.i64[0] = v72.i32[2];
  v19.i64[1] = v72.i32[3];
  int8x16_t v84 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v19);
  v19.i64[0] = v74.i32[2];
  v19.i64[1] = v74.i32[3];
  int8x16_t v85 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v19), v84), v56);
  v19.i64[0] = v76.i32[2];
  v19.i64[1] = v76.i32[3];
  int8x16_t v86 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v19);
  v19.i64[0] = v78.i32[2];
  v19.i64[1] = v78.i32[3];
  *((void *)v14 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v71, v65), vorrq_s8(v79, v75)), (int64x2_t)vorrq_s8(vorrq_s8(v83, v81), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v19), v86), v57), v85))));
  *((void *)v14 + 3) = &unk_1EF560B20;
  v14[312] = 1;
  uint64_t v87 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = v14 + 24;
  *((void *)this + 12) = v14;
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v88 = *(void *)(v10 + 80);
  uint64_t v90 = *(void *)(v88 + 56);
  uint64_t v89 = *(std::__shared_weak_count **)(v88 + 64);
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v91 = (char *)operator new(0x198uLL);
  *((void *)v91 + 1) = 0;
  *((void *)v91 + 2) = 0;
  *(void *)uint64_t v91 = &unk_1EF5892B0;
  long long v244 = *v8;
  long long v247 = v8[1];
  {
    if (v240)
    {
      {
        if (v240)
        {
          {
            {
              ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
            *(void *)algn_1EB31EAD0 = 1;
          }
          ggl::ARMesh::ARDepthMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
          {
            ggl::ARMesh::pipelineDataARDepthMeshPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          }
          qword_1E9591D38 = (uint64_t)&ggl::ARMesh::pipelineDataARDepthMeshPipelineDeviceStructs(void)::ref;
          unk_1E9591D40 = 1;
          {
            ggl::ARMesh::pipelineDataARDepthMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9592198 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E95921A0 = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
          }
          qword_1E9591D48 = (uint64_t)&ggl::ARMesh::pipelineDataARDepthMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E9591D50 = xmmword_1A28FCD30;
        }
      }
      ggl::ARMesh::ARDepthMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARMesh::ARDepthMeshPipelineSetup::typedReflection(void)::ref;
      ggl::ARDepthMeshShader::typedReflection(v240);
      qword_1E9591CE0 = (uint64_t)&ggl::ARDepthMeshShader::typedReflection(void)::ref;
      {
        ggl::ARMesh::pipelineStateARDepthMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9592078 = 0;
        qword_1E9592080 = (uint64_t)"";
        dword_1E9592088 = 0;
        qword_1E9592090 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9592098 = 1;
      }
      qword_1E9591CE8 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineAttributeStructBinding(void)::attr;
      unk_1E9591CF0 = 1;
      qword_1E9591CF8 = 0;
      unk_1E9591D00 = 0;
      {
        ggl::ARMesh::pipelineStateARDepthMeshPipelineDeviceStructBinding(void)::ref = 0;
        unk_1E95920B0 = 0;
        qword_1E95920B8 = (uint64_t)"instanceTransform";
        dword_1E95920C0 = 2;
        qword_1E95920C8 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1E95920D0 = 0;
      }
      qword_1E9591D08 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineDeviceStructBinding(void)::ref;
      unk_1E9591D10 = 1;
      {
        ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E95920F0 = 0;
        qword_1E95920F8 = (uint64_t)"view";
        dword_1E9592100 = 3;
        qword_1E9592108 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9592110 = xmmword_1A28FCEB0;
        qword_1E9592120 = 1;
        unk_1E9592128 = "transform";
        dword_1E9592130 = 3;
        qword_1E9592138 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1E9592140 = xmmword_1A28FCF70;
        qword_1E9592150 = 2;
        unk_1E9592158 = "cameraView";
        dword_1E9592160 = 3;
        qword_1E9592168 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantCameraViewBinding(void)::reflection;
        unk_1E9592170 = 1;
      }
      qword_1E9591D18 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantStructBinding(void)::ref;
      unk_1E9591D20 = 3;
    }
  }
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v91 + 4) = 0;
  *((void *)v91 + 5) = 0;
  *((_DWORD *)v91 + 14) = 0;
  *((void *)v91 + 6) = 0;
  *((void *)v91 + 3) = &unk_1EF55B208;
  *((void *)v91 + 8) = &ggl::ARMesh::ARDepthMeshPipelineState::typedReflection(void)::ref;
  *((void *)v91 + 9) = v90;
  *((void *)v91 + 10) = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v91[136] = 0;
  *(_OWORD *)(v91 + 140) = xmmword_1A28FC970;
  *(void *)(v91 + 156) = 0;
  *(void *)(v91 + 172) = 0;
  *(void *)(v91 + 164) = 0;
  v91[184] = 0;
  *(_OWORD *)(v91 + 188) = xmmword_1A28FC970;
  *(void *)(v91 + 204) = 0;
  *(void *)(v91 + 220) = 0;
  *(void *)(v91 + 212) = 0;
  v91[232] = 0;
  *(_OWORD *)(v91 + 236) = xmmword_1A28FC970;
  *(void *)(v91 + 252) = 0;
  *(void *)(v91 + 268) = 0;
  *(void *)(v91 + 260) = 0;
  *(_OWORD *)(v91 + 280) = v244;
  *(_OWORD *)(v91 + 296) = v247;
  v91[312] = 0;
  *((void *)v91 + 48) = 0;
  long long v92 = 0uLL;
  *((_OWORD *)v91 + 22) = 0u;
  *((_OWORD *)v91 + 23) = 0u;
  *((_OWORD *)v91 + 20) = 0u;
  *((_OWORD *)v91 + 21) = 0u;
  *((void *)v91 + 49) = 0x100000001;
  v91[400] = 0;
  v91[88] = 0;
  *(_WORD *)(v91 + 89) = v249;
  v91[91] = v250;
  *(_OWORD *)(v91 + 92) = xmmword_1A28FC970;
  *(void *)(v91 + 108) = 0;
  *(void *)(v91 + 124) = 0;
  *(void *)(v91 + 116) = 0;
  v91[132] = 0;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    long long v92 = 0uLL;
  }
  *((void *)v91 + 45) = 0;
  *(_OWORD *)(v91 + 329) = v92;
  *(_OWORD *)(v91 + 345) = v92;
  int8x16_t v93 = vceqzq_s8(*(int8x16_t *)(v91 + 328));
  int16x8_t v94 = vmovl_high_s8(v93);
  int32x4_t v95 = vmovl_s16(*(int16x4_t *)v94.i8);
  v96.i64[0] = v95.u32[0];
  v96.i64[1] = v95.u32[1];
  int8x16_t v97 = v96;
  int16x8_t v98 = vmovl_s8(*(int8x8_t *)v93.i8);
  int32x4_t v99 = vmovl_s16(*(int16x4_t *)v98.i8);
  v96.i64[0] = v99.u32[0];
  v96.i64[1] = v99.u32[1];
  int8x16_t v100 = v96;
  int32x4_t v101 = vmovl_high_s16(v94);
  v96.i64[0] = v101.u32[0];
  v96.i64[1] = v101.u32[1];
  int8x16_t v102 = v96;
  int32x4_t v103 = vmovl_high_s16(v98);
  v96.i64[0] = v103.u32[0];
  v96.i64[1] = v103.u32[1];
  int8x16_t v104 = v96;
  v96.i64[0] = v95.u32[2];
  v96.i64[1] = v95.u32[3];
  int8x16_t v105 = v96;
  v96.i64[0] = v99.u32[2];
  v96.i64[1] = v99.u32[3];
  int8x16_t v106 = v96;
  v96.i64[0] = v101.u32[2];
  v96.i64[1] = v101.u32[3];
  int8x16_t v107 = v96;
  v96.i64[0] = v103.u32[2];
  v96.i64[1] = v103.u32[3];
  int8x16_t v108 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v96);
  int8x16_t v109 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v107);
  int8x16_t v110 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v106);
  int8x16_t v111 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v102);
  int8x16_t v112 = vceqzq_s8(*(int8x16_t *)(v91 + 344));
  int16x8_t v113 = vmovl_high_s8(v112);
  int32x4_t v114 = vmovl_s16(*(int16x4_t *)v113.i8);
  v96.i64[0] = v114.u32[0];
  v96.i64[1] = v114.u32[1];
  int8x16_t v115 = v96;
  int16x8_t v116 = vmovl_s8(*(int8x8_t *)v112.i8);
  int32x4_t v117 = vmovl_s16(*(int16x4_t *)v116.i8);
  v96.i64[0] = v117.u32[0];
  v96.i64[1] = v117.u32[1];
  int8x16_t v118 = v96;
  int32x4_t v119 = vmovl_high_s16(v113);
  v96.i64[0] = v119.u32[0];
  v96.i64[1] = v119.u32[1];
  int8x16_t v120 = v96;
  int32x4_t v121 = vmovl_high_s16(v116);
  v96.i64[0] = v121.u32[0];
  v96.i64[1] = v121.u32[1];
  int8x16_t v122 = v96;
  v96.i64[0] = v114.u32[2];
  v96.i64[1] = v114.u32[3];
  int8x16_t v123 = v96;
  v96.i64[0] = v117.u32[2];
  v96.i64[1] = v117.u32[3];
  int8x16_t v124 = v96;
  v96.i64[0] = v119.u32[2];
  v96.i64[1] = v119.u32[3];
  int8x16_t v125 = v96;
  v96.i64[0] = v121.u32[2];
  v96.i64[1] = v121.u32[3];
  int8x16_t v126 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v125);
  int8x16_t v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v97));
  int8x16_t v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v118), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v100));
  int8x16_t v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v120), v111);
  int8x16_t v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v122), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v104));
  int8x16_t v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v123), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v105));
  int8x16_t v132 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v124), v110);
  int8x16_t v133 = vorrq_s8(v126, v109);
  int8x16_t v134 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v96), v108);
  int8x16_t v135 = vceqzq_s8(*(int8x16_t *)(v91 + 360));
  int16x8_t v136 = vmovl_s8(*(int8x8_t *)v135.i8);
  int32x4_t v137 = vmovl_high_s16(v136);
  int16x8_t v138 = vmovl_high_s8(v135);
  int32x4_t v139 = vmovl_high_s16(v138);
  int32x4_t v140 = vmovl_s16(*(int16x4_t *)v136.i8);
  int32x4_t v141 = vmovl_s16(*(int16x4_t *)v138.i8);
  v96.i64[0] = v140.i32[0];
  v96.i64[1] = v140.i32[1];
  int8x16_t v142 = v96;
  v96.i64[0] = v141.i32[0];
  v96.i64[1] = v141.i32[1];
  int8x16_t v143 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v96);
  int8x16_t v144 = vceqzq_s8(*(int8x16_t *)(v91 + 376));
  int16x8_t v145 = vmovl_high_s8(v144);
  int32x4_t v146 = vmovl_s16(*(int16x4_t *)v145.i8);
  v96.i64[0] = v146.i32[0];
  v96.i64[1] = v146.i32[1];
  int16x8_t v147 = vmovl_s8(*(int8x8_t *)v144.i8);
  int32x4_t v148 = vmovl_s16(*(int16x4_t *)v147.i8);
  int8x16_t v149 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v96), v143), v127);
  v96.i64[0] = v148.i32[0];
  v96.i64[1] = v148.i32[1];
  int8x16_t v150 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v96), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v142));
  v96.i64[0] = v139.i32[0];
  v96.i64[1] = v139.i32[1];
  int8x16_t v151 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v96);
  int32x4_t v152 = vmovl_high_s16(v145);
  int8x16_t v153 = vorrq_s8(v150, v128);
  v96.i64[0] = v152.i32[0];
  v96.i64[1] = v152.i32[1];
  int8x16_t v154 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v96), v151);
  v96.i64[0] = v137.i32[0];
  v96.i64[1] = v137.i32[1];
  int8x16_t v155 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v96);
  int32x4_t v156 = vmovl_high_s16(v147);
  v96.i64[0] = v156.i32[0];
  v96.i64[1] = v156.i32[1];
  int8x16_t v157 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v96), v155), v130);
  v96.i64[0] = v141.i32[2];
  v96.i64[1] = v141.i32[3];
  int8x16_t v158 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v96);
  v96.i64[0] = v146.i32[2];
  v96.i64[1] = v146.i32[3];
  int8x16_t v159 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v96), v158), v131);
  v96.i64[0] = v140.i32[2];
  v96.i64[1] = v140.i32[3];
  int8x16_t v160 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v96);
  v96.i64[0] = v148.i32[2];
  v96.i64[1] = v148.i32[3];
  int8x16_t v161 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v96), v160), v132);
  v96.i64[0] = v139.i32[2];
  v96.i64[1] = v139.i32[3];
  int8x16_t v162 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v96);
  v96.i64[0] = v152.i32[2];
  v96.i64[1] = v152.i32[3];
  int8x16_t v163 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v96), v162), v133);
  v96.i64[0] = v137.i32[2];
  v96.i64[1] = v137.i32[3];
  int8x16_t v164 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v96);
  v96.i64[0] = v156.i32[2];
  v96.i64[1] = v156.i32[3];
  *((void *)v91 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v153, v149), vorrq_s8(v157, vorrq_s8(v154, v129))), (int64x2_t)vorrq_s8(vorrq_s8(v161, v159), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v96), v164), v134), v163))));
  *((void *)v91 + 3) = &unk_1EF560BC0;
  v91[312] = 1;
  uint64_t v165 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v91 + 24;
  *((void *)this + 14) = v91;
  if (v165 && !atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
  }
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  uint64_t v166 = *(void *)(v10 + 80);
  uint64_t v168 = *(void *)(v166 + 80);
  unint64_t v167 = *(std::__shared_weak_count **)(v166 + 88);
  if (v167) {
    atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v169 = (char *)operator new(0x198uLL);
  *((void *)v169 + 1) = 0;
  *((void *)v169 + 2) = 0;
  *(void *)uint64_t v169 = &unk_1EF589278;
  long long v245 = *v8;
  long long v248 = v8[1];
  {
    if (v241)
    {
      {
        if (v241)
        {
          {
            {
              ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
            *(void *)algn_1EB31EAD0 = 1;
          }
          ggl::ARMesh::ARShadowPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
          {
            ggl::ARMesh::pipelineDataARShadowPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          }
          qword_1E9591DC8 = (uint64_t)&ggl::ARMesh::pipelineDataARShadowPipelineDeviceStructs(void)::ref;
          unk_1E9591DD0 = 1;
          {
            ggl::ARMesh::pipelineDataARShadowPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9592308 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9592310 = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
            unk_1E9592318 = ggl::DaVinci::StyleColor::reflection(void)::reflection;
          }
          qword_1E9591DD8 = (uint64_t)&ggl::ARMesh::pipelineDataARShadowPipelineConstantStructs(void)::ref;
          unk_1E9591DE0 = xmmword_1A28FCFA0;
        }
      }
      ggl::ARMesh::ARShadowPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARMesh::ARShadowPipelineSetup::typedReflection(void)::ref;
      ggl::ARGroundShadowShader::typedReflection(v241);
      qword_1E9591D70 = (uint64_t)&ggl::ARGroundShadowShader::typedReflection(void)::ref;
      {
        ggl::ARMesh::pipelineStateARShadowPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E95921B8 = 0;
        qword_1E95921C0 = (uint64_t)"";
        dword_1E95921C8 = 0;
        qword_1E95921D0 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineAttributeBinding_0(void)::attr;
        unk_1E95921D8 = 1;
      }
      qword_1E9591D78 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineAttributeStructBinding(void)::attr;
      unk_1E9591D80 = 1;
      qword_1E9591D88 = 0;
      unk_1E9591D90 = 0;
      {
        ggl::ARMesh::pipelineStateARShadowPipelineDeviceStructBinding(void)::ref = 0;
        unk_1E95921F0 = 0;
        qword_1E95921F8 = (uint64_t)"instanceTransform";
        dword_1E9592200 = 2;
        qword_1E9592208 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1E9592210 = 0;
      }
      qword_1E9591D98 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineDeviceStructBinding(void)::ref;
      unk_1E9591DA0 = 1;
      {
        ggl::ARMesh::pipelineStateARShadowPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9592230 = 0;
        qword_1E9592238 = (uint64_t)"view";
        dword_1E9592240 = 3;
        qword_1E9592248 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9592250 = xmmword_1A28FCEB0;
        qword_1E9592260 = 1;
        unk_1E9592268 = "transform";
        dword_1E9592270 = 3;
        qword_1E9592278 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantTransformBinding(void)::reflection;
        unk_1E9592280 = xmmword_1A28FCF70;
        qword_1E9592290 = 2;
        unk_1E9592298 = "cameraView";
        dword_1E95922A0 = 3;
        qword_1E95922A8 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantCameraViewBinding(void)::reflection;
        *(_OWORD *)algn_1E95922B0 = xmmword_1A28FC950;
        qword_1E95922C0 = 3;
        unk_1E95922C8 = "styleColor";
        dword_1E95922D0 = 3;
        qword_1E95922D8 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantStyleColorBinding(void)::reflection;
        unk_1E95922E0 = 1;
      }
      qword_1E9591DA8 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantStructBinding(void)::ref;
      unk_1E9591DB0 = 4;
    }
  }
  if (v167) {
    atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v169 + 4) = 0;
  *((void *)v169 + 5) = 0;
  *((_DWORD *)v169 + 14) = 0;
  *((void *)v169 + 6) = 0;
  *((void *)v169 + 3) = &unk_1EF55B208;
  *((void *)v169 + 8) = &ggl::ARMesh::ARShadowPipelineState::typedReflection(void)::ref;
  *((void *)v169 + 9) = v168;
  *((void *)v169 + 10) = v167;
  if (v167) {
    atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v169[136] = 0;
  *(_OWORD *)(v169 + 140) = xmmword_1A28FC970;
  *(void *)(v169 + 156) = 0;
  *(void *)(v169 + 172) = 0;
  *(void *)(v169 + 164) = 0;
  v169[184] = 0;
  *(_OWORD *)(v169 + 188) = xmmword_1A28FC970;
  *(void *)(v169 + 204) = 0;
  *(void *)(v169 + 220) = 0;
  *(void *)(v169 + 212) = 0;
  v169[232] = 0;
  *(_OWORD *)(v169 + 236) = xmmword_1A28FC970;
  *(void *)(v169 + 252) = 0;
  *(void *)(v169 + 268) = 0;
  *(void *)(v169 + 260) = 0;
  *(_OWORD *)(v169 + 280) = v245;
  *(_OWORD *)(v169 + 296) = v248;
  v169[312] = 0;
  *((void *)v169 + 48) = 0;
  long long v170 = 0uLL;
  *((_OWORD *)v169 + 22) = 0u;
  *((_OWORD *)v169 + 23) = 0u;
  *((_OWORD *)v169 + 20) = 0u;
  *((_OWORD *)v169 + 21) = 0u;
  *((void *)v169 + 49) = 0x100000001;
  v169[400] = 0;
  v169[88] = 1;
  *(_WORD *)(v169 + 89) = 0;
  v169[91] = 0;
  *(_OWORD *)(v169 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v169 + 27) = 7;
  *((void *)v169 + 14) = 0;
  *((void *)v169 + 15) = 0;
  *((_DWORD *)v169 + 32) = 0;
  v169[132] = 15;
  if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
    long long v170 = 0uLL;
  }
  *((void *)v169 + 45) = 0;
  *(_OWORD *)(v169 + 329) = v170;
  *(_OWORD *)(v169 + 345) = v170;
  int8x16_t v171 = vceqzq_s8(*(int8x16_t *)(v169 + 328));
  int16x8_t v172 = vmovl_s8(*(int8x8_t *)v171.i8);
  int32x4_t v173 = vmovl_high_s16(v172);
  v174.i64[0] = v173.u32[2];
  v174.i64[1] = v173.u32[3];
  int8x16_t v175 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v174);
  int16x8_t v176 = vmovl_high_s8(v171);
  int32x4_t v177 = vmovl_high_s16(v176);
  v174.i64[0] = v177.u32[2];
  v174.i64[1] = v177.u32[3];
  int8x16_t v178 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v174);
  int32x4_t v179 = vmovl_s16(*(int16x4_t *)v172.i8);
  v174.i64[0] = v179.u32[2];
  v174.i64[1] = v179.u32[3];
  int8x16_t v180 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v174);
  int32x4_t v181 = vmovl_s16(*(int16x4_t *)v176.i8);
  v174.i64[0] = v181.u32[2];
  v174.i64[1] = v181.u32[3];
  int8x16_t v182 = vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v174);
  v174.i64[0] = v173.u32[0];
  v174.i64[1] = v173.u32[1];
  int8x16_t v183 = vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v174);
  v174.i64[0] = v177.u32[0];
  v174.i64[1] = v177.u32[1];
  int8x16_t v184 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v174);
  v174.i64[0] = v179.u32[0];
  v174.i64[1] = v179.u32[1];
  int8x16_t v185 = vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v174);
  v174.i64[0] = v181.u32[0];
  v174.i64[1] = v181.u32[1];
  int8x16_t v186 = vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v174);
  int8x16_t v187 = vceqzq_s8(*(int8x16_t *)(v169 + 344));
  int16x8_t v188 = vmovl_s8(*(int8x8_t *)v187.i8);
  int32x4_t v189 = vmovl_high_s16(v188);
  v174.i64[0] = v189.u32[2];
  v174.i64[1] = v189.u32[3];
  int8x16_t v190 = vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v174);
  int16x8_t v191 = vmovl_high_s8(v187);
  int32x4_t v192 = vmovl_high_s16(v191);
  v174.i64[0] = v192.u32[2];
  v174.i64[1] = v192.u32[3];
  int8x16_t v193 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v174);
  int32x4_t v194 = vmovl_s16(*(int16x4_t *)v188.i8);
  v174.i64[0] = v194.u32[2];
  v174.i64[1] = v194.u32[3];
  int8x16_t v195 = vbicq_s8((int8x16_t)xmmword_1A28FCA10, v174);
  int32x4_t v196 = vmovl_s16(*(int16x4_t *)v191.i8);
  v174.i64[0] = v196.u32[2];
  v174.i64[1] = v196.u32[3];
  int8x16_t v197 = vbicq_s8((int8x16_t)xmmword_1A28FCA20, v174);
  v174.i64[0] = v189.u32[0];
  v174.i64[1] = v189.u32[1];
  int8x16_t v198 = vbicq_s8((int8x16_t)xmmword_1A28FCA30, v174);
  v174.i64[0] = v192.u32[0];
  v174.i64[1] = v192.u32[1];
  int8x16_t v199 = vbicq_s8((int8x16_t)xmmword_1A28FCA40, v174);
  v174.i64[0] = v194.u32[0];
  v174.i64[1] = v194.u32[1];
  int8x16_t v200 = vbicq_s8((int8x16_t)xmmword_1A28FCA50, v174);
  v174.i64[0] = v196.u32[0];
  v174.i64[1] = v196.u32[1];
  int8x16_t v201 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v174), v186);
  int8x16_t v202 = vorrq_s8(v200, v185);
  int8x16_t v203 = vorrq_s8(v199, v184);
  int8x16_t v204 = vorrq_s8(v198, v183);
  int8x16_t v205 = vorrq_s8(v197, v182);
  int8x16_t v206 = vorrq_s8(v195, v180);
  int8x16_t v207 = vorrq_s8(v193, v178);
  int8x16_t v208 = vorrq_s8(v190, v175);
  int8x16_t v209 = vceqzq_s8(*(int8x16_t *)(v169 + 360));
  int16x8_t v210 = vmovl_s8(*(int8x8_t *)v209.i8);
  int32x4_t v211 = vmovl_high_s16(v210);
  int16x8_t v212 = vmovl_high_s8(v209);
  int32x4_t v213 = vmovl_high_s16(v212);
  int32x4_t v214 = vmovl_s16(*(int16x4_t *)v210.i8);
  int32x4_t v215 = vmovl_s16(*(int16x4_t *)v212.i8);
  v174.i64[0] = v215.i32[0];
  v174.i64[1] = v215.i32[1];
  int8x16_t v216 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v174);
  v174.i64[0] = v214.i32[0];
  v174.i64[1] = v214.i32[1];
  int8x16_t v217 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v174);
  v174.i64[0] = v213.i32[0];
  v174.i64[1] = v213.i32[1];
  int8x16_t v218 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v174);
  v174.i64[0] = v211.i32[0];
  v174.i64[1] = v211.i32[1];
  int8x16_t v219 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v174);
  v174.i64[0] = v211.i32[2];
  v174.i64[1] = v211.i32[3];
  int8x16_t v220 = v174;
  v174.i64[0] = v213.i32[2];
  v174.i64[1] = v213.i32[3];
  int8x16_t v221 = v174;
  v174.i64[0] = v214.i32[2];
  v174.i64[1] = v214.i32[3];
  int8x16_t v222 = v174;
  v174.i64[0] = v215.i32[2];
  v174.i64[1] = v215.i32[3];
  int8x16_t v223 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v174);
  int8x16_t v224 = vceqzq_s8(*(int8x16_t *)(v169 + 376));
  int16x8_t v225 = vmovl_high_s8(v224);
  int32x4_t v226 = vmovl_s16(*(int16x4_t *)v225.i8);
  int16x8_t v227 = vmovl_s8(*(int8x8_t *)v224.i8);
  int32x4_t v228 = vmovl_s16(*(int16x4_t *)v227.i8);
  int32x4_t v229 = vmovl_high_s16(v225);
  int32x4_t v230 = vmovl_high_s16(v227);
  v174.i64[0] = v230.i32[2];
  v174.i64[1] = v230.i32[3];
  int8x16_t v231 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v174);
  v174.i64[0] = v229.i32[2];
  v174.i64[1] = v229.i32[3];
  int8x16_t v232 = vbicq_s8((int8x16_t)xmmword_1A28FCB00, v174);
  v174.i64[0] = v228.i32[2];
  v174.i64[1] = v228.i32[3];
  int8x16_t v233 = vbicq_s8((int8x16_t)xmmword_1A28FCB10, v174);
  v174.i64[0] = v226.i32[2];
  v174.i64[1] = v226.i32[3];
  int8x16_t v234 = vbicq_s8((int8x16_t)xmmword_1A28FCB20, v174);
  v174.i64[0] = v230.i32[0];
  v174.i64[1] = v230.i32[1];
  int8x16_t v235 = vbicq_s8((int8x16_t)xmmword_1A28FCB30, v174);
  v174.i64[0] = v229.i32[0];
  v174.i64[1] = v229.i32[1];
  int8x16_t v236 = vbicq_s8((int8x16_t)xmmword_1A28FCB40, v174);
  v174.i64[0] = v228.i32[0];
  v174.i64[1] = v228.i32[1];
  int8x16_t v237 = vbicq_s8((int8x16_t)xmmword_1A28FCB50, v174);
  v174.i64[0] = v226.i32[0];
  v174.i64[1] = v226.i32[1];
  *((void *)v169 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v237, v217), v202), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v174), v216), v201)), vorrq_s8(vorrq_s8(vorrq_s8(v235, v219), v204), vorrq_s8(vorrq_s8(v236, v218), v203))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v233, vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v222)), v206), vorrq_s8(vorrq_s8(v234, v223), v205)), vorrq_s8(vorrq_s8(vorrq_s8(v231, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v220)),
                                                v208),
                                              vorrq_s8(vorrq_s8(v232, vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v221)), v207)))));
  *((void *)v169 + 3) = &unk_1EF560B70;
  v169[312] = 1;
  unint64_t v238 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = v169 + 24;
  *((void *)this + 16) = v169;
  if (v238 && !atomic_fetch_add(&v238->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
    std::__shared_weak_count::__release_weak(v238);
  }
  if (v167)
  {
    if (!atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  *((unsigned char *)this + 194) = 3;
  *((unsigned char *)this + 192) = 1;
  operator new();
}

void sub_1A1EAF9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v26 = v21[11];
  if (v26 == v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    uint64_t v27 = *v23;
    if (*v23)
    {
LABEL_17:
      v21[5] = v27;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[7] + 40))(v21[7], v27, v21[6] - v27);
      uint64_t v28 = *v21;
      if (!*v21)
      {
LABEL_8:
        unint64_t v29 = STACK[0x308];
        if ((unint64_t *)STACK[0x308] == &STACK[0x2F0])
        {
          (*(void (**)(unint64_t *))(STACK[0x2F0] + 32))(&STACK[0x2F0]);
        }
        else if (v29)
        {
          (*(void (**)(unint64_t))(*(void *)v29 + 40))(v29);
        }
        unint64_t v30 = STACK[0x328];
        if ((unint64_t *)STACK[0x328] == &STACK[0x310])
        {
          (*(void (**)(unint64_t *))(STACK[0x310] + 32))(&STACK[0x310]);
        }
        else if (v30)
        {
          (*(void (**)(unint64_t))(*(void *)v30 + 40))(v30);
        }
        MEMORY[0x1A6239270](v21, 0x10A0C40D234DDC7);
        *a11 = a10;
        if (*v24)
        {
          (*(void (**)(void, uint64_t))(*(void *)*v24 + 16))(*v24, v20[20]);
          v20[20] = 3735927469;
        }
        int8x16_t v31 = (std::__shared_weak_count *)v20[19];
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        int8x16_t v32 = (std::__shared_weak_count *)v20[16];
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        int8x16_t v33 = (std::__shared_weak_count *)v20[14];
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        int8x16_t v34 = (std::__shared_weak_count *)v20[12];
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        uint64_t v35 = v20[10];
        v20[10] = 0;
        if (v35)
        {
          uint64_t v36 = ggl::FragmentedPool<ggl::ARMesh::ARDepthMeshPipelineSetup>::~FragmentedPool(v35);
          MEMORY[0x1A6239270](v36, 0x10A0C40D234DDC7);
        }
        uint64_t v37 = v20[9];
        v20[9] = 0;
        if (v37)
        {
          uint64_t v38 = ggl::FragmentedPool<ggl::ARMesh::ARMeshPipelineSetup>::~FragmentedPool(v37);
          MEMORY[0x1A6239270](v38, 0x10A0C40D234DDC7);
        }
        uint64_t v39 = *(void *)STACK[0x278];
        *(void *)STACK[0x278] = 0;
        if (v39)
        {
          uint64_t v40 = ggl::FragmentedPool<ggl::ARMesh::ARShadowPipelineSetup>::~FragmentedPool(v39);
          MEMORY[0x1A6239270](v40, 0x10A0C40D234DDC7);
        }

        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
        uint64_t *v20 = a13;
        int8x16_t v41 = (void *)v20[1];
        if (v41)
        {
          void v20[2] = (uint64_t)v41;
          operator delete(v41);
        }

        _Unwind_Resume(a1);
      }
LABEL_7:
      v21[1] = v28;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[3] + 40))(v21[3], v28, v21[2] - v28);
      goto LABEL_8;
    }
  }
  else if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
    uint64_t v27 = *v23;
    if (*v23) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v27 = *v23;
    if (*v23) {
      goto LABEL_17;
    }
  }
  uint64_t v28 = *v21;
  if (!*v21) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void *std::__hash_table<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  void v10[4] = *(void *)(a3 + 16);
  v10[5] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v22 = *(void *)a1;
  int8x16_t v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *uint64_t v10 = *v23;
LABEL_58:
    *int8x16_t v23 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    int8x16_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A1EB06F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
}

void std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF572FF0;
}

void *std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF572FF0;
  return result;
}

void std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
}

void ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>::~DeviceDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>::~DeviceDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::InstanceData>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<md::InstanceData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::InstanceData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A1EB0EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1EB0F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t altitude::HeightFallbackRequest::getHeightElement@<X0>(altitude::HeightFallbackRequest *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(altitude::HeightFallbackRequest *))(*(void *)this + 40))(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 32);
    *a2 = *((void *)this + 31);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t altitude::HeightFallbackRequest::succeeded(altitude::HeightFallbackRequest *this)
{
  return *((unsigned __int8 *)this + 188);
}

void altitude::HeightFallbackRequest::jobStep(altitude::HeightFallbackRequest *this)
{
  *((double *)this + 34) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  int32x4_t v60 = 0;
  int8x16_t v61 = 0;
  unint64_t v62 = 0;
  unint64_t v2 = *((void *)this + 38);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      uint64_t v5 = *((void *)this + 55);
      uint64_t v6 = (char *)(v5 + 16 * v3);
      unint64_t v7 = (uint64_t *)((char *)this + 16 * v3 + 312);
      if (v2 <= 8) {
        uint64_t v6 = (char *)this + 16 * v3 + 312;
      }
      uint64_t v8 = *(void *)v6;
      uint64_t v9 = *(void *)(*(void *)v6 + 8);
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 16);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v9) {
          goto LABEL_3;
        }
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v2 = *((void *)this + 38);
        uint64_t v5 = *((void *)this + 55);
      }
      else if (!v9)
      {
        goto LABEL_5;
      }
      unint64_t v11 = (uint64_t *)(v5 + 16 * v3);
      if (v2 <= 8) {
        unint64_t v11 = v7;
      }
      uint64_t v12 = v61;
      if ((unint64_t)v61 < v62)
      {
        *int8x16_t v61 = 0;
        v12[1] = 0;
        uint64_t v14 = *v11;
        uint64_t v13 = v11[1];
        if (v13)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
          BOOL v15 = (std::__shared_weak_count *)v12[1];
          *uint64_t v12 = v14;
          v12[1] = v13;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        else
        {
          *uint64_t v12 = v14;
          v12[1] = 0;
        }
        int8x16_t v61 = v12 + 2;
        if (!v10) {
          goto LABEL_5;
        }
LABEL_23:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_3:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        goto LABEL_5;
      }
      int8x16_t v61 = (uint64_t *)std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)&v60, *v11, v11[1]);
      if (v10) {
        goto LABEL_23;
      }
LABEL_5:
      unint64_t v3 = v4;
      unint64_t v2 = *((void *)this + 38);
      ++v4;
    }
    while (v2 > v3);
  }
  unsigned int v16 = *((_DWORD *)this + 52);
  unsigned int v17 = v16 - *((_DWORD *)this + 56);
  if (v17 <= 1) {
    unsigned int v17 = 1;
  }
  unsigned int v18 = 0x14 / (v17 + 1);
  if (v18 <= 2) {
    int v19 = 2;
  }
  else {
    int v19 = v18;
  }
  if (v16 >= 0x1F) {
    char v20 = 31;
  }
  else {
    char v20 = *((_DWORD *)this + 52);
  }
  int v21 = ~(-1 << v20) - *((_DWORD *)this + 53);
  int v22 = *((_DWORD *)this + 54);
  v59._type = -1;
  v59._level = v16;
  v59._yIdx = v21;
  v59._xIdx = v22;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v23 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v23 & 2) == 0)
  {
    uint64_t v24 = *((void *)this + 36);
    int8x16_t v25 = (std::__shared_weak_count *)*((void *)this + 37);
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v45 = v24;
      int8x16_t v46 = v25;
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v45 = *((void *)this + 36);
      int8x16_t v46 = 0;
    }
    uint64_t v49 = 0;
    *(_OWORD *)int8x16_t v48 = 0u;
    long long v47 = 0u;
    int v50 = -1;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    uint64_t v54 = 0x3FF0000000000000;
    __int16 v55 = 255;
    int v56 = 0;
    int v57 = 0;
    char v58 = 0;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v45, &v59, v19 + 1, 0, 0.0);
    char v43 = 9;
    uint64_t v41 = 0;
    strcpy((char *)v42, "/fallback");
    uint64_t v26 = *((void *)this + 1);
    std::string __p = 0;
    uint64_t v40 = 0;
    altitude::HeightMeshBuilder::createGlobeElement(&v44, (uint64_t)&v45, v42, v26, &v60, (uint64_t **)&__p);
    long long v27 = v44;
    long long v44 = 0uLL;
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 32);
    *(_OWORD *)((char *)this + 248) = v27;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    unint64_t v29 = (std::__shared_weak_count *)*((void *)&v44 + 1);
    if (*((void *)&v44 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    unint64_t v30 = (char *)__p;
    if (__p)
    {
      int8x16_t v31 = v40;
      if (v40 != __p)
      {
        do
        {
          int8x16_t v32 = (std::__shared_weak_count *)*((void *)v31 - 1);
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          v31 -= 16;
        }
        while (v31 != v30);
        unint64_t v30 = (char *)__p;
      }
      operator delete(v30);
    }
    if (v43 < 0) {
      operator delete((void *)v42[0]);
    }
    *((double *)this + 35) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    BOOL v33 = (*((_DWORD *)this + 40) & 2) == 0;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    *((unsigned char *)this + 188) = v33;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    int8x16_t v34 = (std::__shared_weak_count *)*((void *)&v47 + 1);
    if (*((void *)&v47 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    uint64_t v35 = v46;
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  uint64_t v36 = v60;
  if (v60)
  {
    uint64_t v37 = v61;
    if (v61 != v60)
    {
      do
      {
        uint64_t v38 = (std::__shared_weak_count *)*(v37 - 1);
        if (v38)
        {
          if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v37 -= 2;
      }
      while (v37 != v36);
      uint64_t v36 = v60;
    }
    operator delete(v36);
  }
}

char *std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unsigned int v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v10 = a1[2] - v3;
  if (v10 >> 3 > v6) {
    unint64_t v6 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  if (v11)
  {
    if (v11 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v12 = (char *)operator new(16 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[16 * v5];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    *((void *)v13 + 1) = a3;
    unint64_t v3 = *a1;
    unsigned int v4 = a1[1];
  }
  uint64_t v14 = &v12[16 * v11];
  *(void *)uint64_t v13 = a2;
  BOOL v15 = v13 + 16;
  if (v4 == v3)
  {
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
  }
  else
  {
    do
    {
      unsigned int v16 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v13 -= 16;
      uint64_t v17 = *((void *)v4 - 2);
      uint64_t v18 = *((void *)v4 - 1);
      v4 -= 16;
      if (v18)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
        int v19 = (std::__shared_weak_count *)*((void *)v16 - 1);
        *((void *)v16 - 2) = v17;
        *((void *)v16 - 1) = v18;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      else
      {
        *((void *)v16 - 2) = v17;
        *((void *)v16 - 1) = 0;
      }
    }
    while (v4 != v3);
    unint64_t v3 = *a1;
    char v20 = a1[1];
    *a1 = v13;
    a1[1] = v15;
    for (a1[2] = v14; v20 != v3; v20 -= 16)
    {
      int v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v15;
}

void altitude::HeightFallbackRequest::~HeightFallbackRequest(altitude::HeightFallbackRequest *this)
{
  altitude::HeightFallbackRequest::~HeightFallbackRequest(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A900;
  unint64_t v2 = *((void *)this + 55);
  if (v2)
  {
    unint64_t v3 = *((void *)this + 56);
    unsigned int v4 = (void *)*((void *)this + 55);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 55);
    }
    *((void *)this + 56) = v2;
    operator delete(v4);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 52);
    if (!v7) {
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 52);
    if (!v7) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 48);
    if (!v9) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 48);
    if (!v9) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_22:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v11) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v11) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_28:
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_34:
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    BOOL v15 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v15) {
      goto LABEL_40;
    }
  }
  else
  {
    BOOL v15 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v15) {
      goto LABEL_40;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_40:
  karo::Job::~Job(this);
}

uint64_t md::WorldSpaceLabelPart::debugCompositeClassName@<X0>(unsigned char *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"WorldSpaceLabelPart", 19);
  if ((v18 & 0x10) != 0)
  {
    unint64_t v4 = v17;
    if (v17 < v14)
    {
      unint64_t v17 = v14;
      unint64_t v4 = v14;
    }
    uint64_t v5 = (const void **)&v13;
  }
  else
  {
    if ((v18 & 8) == 0)
    {
      size_t v3 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    uint64_t v5 = (const void **)v12;
    unint64_t v4 = v12[2];
  }
  unint64_t v6 = *v5;
  size_t v3 = v4 - (void)*v5;
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    *((void *)a1 + 1) = v3;
    *((void *)a1 + 2) = v8 | 0x8000000000000000;
    *(void *)a1 = v9;
    a1 = v9;
    goto LABEL_15;
  }
  a1[23] = v3;
  if (v3) {
LABEL_15:
  }
    memmove(a1, v6, v3);
LABEL_16:
  a1[v3] = 0;
  v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v19);
}

void sub_1A1EB1EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::WorldSpaceLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3
    && !*(unsigned char *)(a1 + 634)
    && *(unsigned __int8 *)(**(void **)(a1 + 32) + 253) != *(unsigned __int8 *)(a1 + 631))
  {
    return 1;
  }
  uint64_t v7 = *(void *)(a1 + 576);
  uint64_t v8 = *(void *)(a1 + 584);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v9 = v7 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v9 - 8) + 760))(*(void *)(v9 - 8), a2, a3, a4);
    if (result) {
      break;
    }
    BOOL v11 = v9 == v8;
    v9 += 8;
  }
  while (!v11);
  return result;
}

uint64_t md::CompositeLabelPart::partType(md::CompositeLabelPart *this)
{
  return 1;
}

uint64_t md::WorldSpaceLabelPart::modelMatrix(md::WorldSpaceLabelPart *this)
{
  return *((void *)this + 80);
}

uint64_t md::WorldSpaceLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4, _DWORD *a5, __n128 a6, int8x16_t a7, float32x4_t a8)
{
  if (*(unsigned char *)(a1 + 565))
  {
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 32);
    double v15 = *(float *)(v14 + 72);
    double v16 = *(float *)(v14 + 68);
    generateRotationMatrixMeshPositioningMode((double *)&v49, v13 + 152, a2 + 440, (double *)(v13 + 408), *(unsigned __int8 *)(a1 + 633), 1, *(unsigned __int8 *)(a1 + 632));
    double v17 = v16 * v15 * *(double *)(a2 + 760);
    long long v37 = v49;
    long long v40 = v51;
    long long v43 = v53;
    uint64_t v38 = v50;
    uint64_t v41 = v52;
    uint64_t v44 = v54;
    uint64_t v39 = 0;
    uint64_t v42 = 0;
    uint64_t v45 = 0;
    long long v46 = *(_OWORD *)(v13 + 408);
    uint64_t v47 = *(void *)(v13 + 424);
    uint64_t v48 = 0x3FF0000000000000;
    long long v30 = 0u;
    uint64_t v32 = 0;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    uint64_t v36 = 0x3FF0000000000000;
    double v27 = v17;
    *(double *)&long long v30 = v17;
    double v33 = v17;
    gm::operator*<double,4,4,4>((double *)v24, (double *)&v37, &v27);
    uint64_t v18 = *(void *)(a1 + 640);
    long long v19 = v24[1];
    *(_OWORD *)uint64_t v18 = v24[0];
    *(_OWORD *)(v18 + 16) = v19;
    long long v20 = v24[3];
    *(_OWORD *)(v18 + 32) = v24[2];
    *(_OWORD *)(v18 + 48) = v20;
    long long v21 = v24[5];
    *(_OWORD *)(v18 + 64) = v24[4];
    *(_OWORD *)(v18 + 80) = v21;
    a6 = v25;
    a7 = v26;
    *(__n128 *)(v18 + 96) = v25;
    *(int8x16_t *)(v18 + 112) = a7;
  }
  uint64_t result = md::CompositeLabelPart::layoutForDisplay((void *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (result == 37)
  {
    int v23 = *(_DWORD **)(**(void **)(a1 + 576) + 24);
    *(_DWORD *)(a1 + 392) = v23[98];
    *(_DWORD *)(a1 + 396) = v23[99];
    *(_DWORD *)(a1 + 400) = v23[100];
    *(_DWORD *)(a1 + 404) = v23[101];
  }
  return result;
}

uint64_t md::WorldSpaceLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v8 = *(void **)(a1 + 576);
  uint64_t v9 = *(void **)(a1 + 584);
  __n128 v10 = (__n128)xmmword_1A28FC750;
  if (v8 == v9)
  {
    uint64_t v15 = 37;
LABEL_11:
    int8x16_t v18 = (int8x16_t)v10;
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)*v8 + 80))(*v8, a2, a3, a4, a5, a6, a7, v10);
    if (v14 != 37) {
      break;
    }
    if (++v8 == v9)
    {
      uint64_t v15 = 37;
      goto LABEL_7;
    }
  }
  uint64_t v15 = v14;
LABEL_7:
  __n128 v10 = (__n128)xmmword_1A28FC750;
  double v16 = *(void ***)(a1 + 576);
  double v17 = *(void ***)(a1 + 584);
  if (v16 == v17) {
    goto LABEL_11;
  }
  __n128 v10 = (__n128)xmmword_1A28FC750;
  int8x16_t v18 = (int8x16_t)xmmword_1A28FC750;
  do
  {
    int8x16_t v28 = v18;
    int8x16_t v30 = (int8x16_t)v10;
    long long v19 = *v16++;
    long long v20 = (int8x16_t *)(*(uint64_t (**)(void *))(*v19 + 248))(v19);
    v21.i64[0] = v20->i64[0];
    v21.i64[1] = v28.i64[1];
    v22.i64[0] = v28.i64[0];
    v22.i64[1] = v20->i64[1];
    int8x16_t v18 = vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *v20, v28);
    uint64_t v23 = v19[3];
    v21.i64[0] = *(void *)(v23 + 72);
    v21.i64[1] = v30.i64[1];
    v22.i64[0] = v30.i64[0];
    v22.i64[1] = *(void *)(v23 + 80);
    __n128 v10 = (__n128)vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *(int8x16_t *)(v23 + 72), v30);
  }
  while (v16 != v17);
LABEL_12:
  uint64_t v24 = *(void **)(a1 + 232);
  int8x16_t v29 = v18;
  __n128 v31 = v10;
  if (v24)
  {
    free(v24);
    int8x16_t v18 = v29;
    __n128 v10 = v31;
    *(void *)(a1 + 232) = 0;
  }
  __n128 v25 = *(void **)(a1 + 240);
  if (v25)
  {
    free(v25);
    int8x16_t v18 = v29;
    __n128 v10 = v31;
    *(void *)(a1 + 240) = 0;
  }
  *(__n128 *)(a1 + 72) = v10;
  *(int8x16_t *)(a1 + 152) = v18;
  if (*(unsigned char *)(a1 + 565)) {
    *(void *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  }
  if (v15 == 37)
  {
    int8x16_t v26 = (_DWORD *)(*(uint64_t (**)(void))(***(void ***)(a1 + 576) + 248))(**(void **)(a1 + 576));
    *(_DWORD *)(a1 + 152) = *v26;
    *(_DWORD *)(a1 + 156) = v26[1];
    *(_DWORD *)(a1 + 160) = v26[2];
    *(_DWORD *)(a1 + 164) = v26[3];
  }
  return v15;
}

void md::WorldSpaceLabelPart::~WorldSpaceLabelPart(md::WorldSpaceLabelPart *this)
{
  *(void *)this = &unk_1EF53CCE0;
  uint64_t v2 = *((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
  size_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    size_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v5) {
      operator new();
    }
  }
  unint64_t v4 = *(void (**)(void))(**((void **)v3 + 91) + 40);
  v4();
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53CCE0;
  uint64_t v2 = *((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

md::CompositeLabelPart *md::WorldSpaceLabelPart::WorldSpaceLabelPart(md::CompositeLabelPart *this, md::LabelPart *a2, uint64_t a3, char a4, char a5)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_1A28FC750;
  *((void *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 136) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 152) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 168) = xmmword_1A28FCDA0;
  *((unsigned char *)this + 224) = 0;
  *((unsigned char *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_1A28FCE90;
  *(_OWORD *)((char *)this + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)((char *)this + 312) = xmmword_1A28FC750;
  *((void *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 376) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 392) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 408) = xmmword_1A28FCDA0;
  *((unsigned char *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((unsigned char *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_1A28FCE90;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((unsigned char *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  uint64_t v8 = (BOOL *)this + 565;
  *(_DWORD *)((char *)this + 565) = 0;
  *(void *)this = &unk_1EF538820;
  *((_OWORD *)this + 36) = 0u;
  *((void *)this + 74) = 0;
  uint64_t v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    char v13 = a4;
    char v14 = a5;
    uint64_t v9 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a4 = v13;
    a5 = v14;
    if (v12) {
      operator new();
    }
  }
  *((void *)this + 75) = *((void *)v9 + 91);
  *((unsigned char *)this + 608) = 0;
  *((unsigned char *)this + 616) = 0;
  *(void *)this = &unk_1EF53CCE0;
  *((_DWORD *)this + 157) = 1;
  *((unsigned char *)this + 632) = a4;
  *((unsigned char *)this + 633) = 9;
  *((unsigned char *)this + 634) = a5;
  *((void *)this + 80) = 0;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  int v10 = *((unsigned __int8 *)this + 632);
  if (v10 == 6)
  {
    if (*(unsigned char *)(a3 + 164))
    {
      *uint64_t v8 = 1;
      goto LABEL_6;
    }
    *((unsigned char *)this + 632) = 0;
    *((unsigned char *)this + 565) = 0;
  }
  else
  {
    *uint64_t v8 = v10 != 0;
    if (v10) {
LABEL_6:
    }
      operator new();
  }
  return this;
}

void sub_1A1EB27FC(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 80);
  *((void *)v1 + 80) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40AE2C30F4);
  }
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    int v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      int v5 = __p;
    }
    int v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void *md::ARPushDebugDrawItemsLogic::runBeforeLayout(uint64_t a1, int a2, int a3, md::DebugDrawContext *this)
{
  md::DebugDrawContext::clearDebugDrawContext(this);
  int v5 = *(int8x8_t **)(a1 + 120);
  unint64_t v6 = (void *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v5);
  char v7 = (void *)gdc::Registry::storage<arComponents::Boundary>(v5);
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v5);
  char v9 = *(int8x8_t **)(a1 + 120);
  int v10 = (void *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v9);
  BOOL v11 = (void *)gdc::Registry::storage<arComponents::LocalBounds>(v9);
  uint64_t v323 = a1;
  uint64_t v324 = (void *)gdc::Registry::storage<arComponents::MapTileDataComponent>(v9);
  int v12 = *(int8x8_t **)(a1 + 120);
  uint64_t v13 = (void *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v12);
  char v14 = (void *)gdc::Registry::storage<arComponents::WorldBounds>(v12);
  uint64_t v15 = v7 + 4;
  double v16 = v8 + 4;
  int8x16_t v18 = (unint64_t *)v6[7];
  double v17 = (uint64_t *)v6[8];
  if (v7[8] - v7[7] >= (unint64_t)((char *)v17 - (char *)v18)) {
    long long v19 = v6 + 4;
  }
  else {
    long long v19 = v7 + 4;
  }
  if (v8[8] - v8[7] >= v19[4] - v19[3]) {
    long long v20 = v19;
  }
  else {
    long long v20 = v8 + 4;
  }
  if (v6 + 4 == v20)
  {
    *(void *)uint64_t v326 = this;
    if (v18 != (unint64_t *)v17)
    {
      uint64_t v63 = v6[10];
      do
      {
        unint64_t v139 = *((unsigned int *)v18 + 1);
        unint64_t v140 = v139 >> 7;
        uint64_t v141 = v7[4];
        unint64_t v142 = (v7[5] - v141) >> 3;
        if (v139 >> 7 < v142)
        {
          uint64_t v143 = *(void *)(v141 + 8 * v140);
          if (v143)
          {
            unint64_t v144 = *(unsigned __int16 *)(v143 + 2 * (v139 & 0x7F));
            uint64_t v146 = v7[7];
            uint64_t v145 = v7[8];
            unint64_t v147 = (v145 - v146) >> 3;
            if (v147 > v144)
            {
              uint64_t v148 = v146 + 8 * v144;
              if (v148 != v145 && *(_DWORD *)(v148 + 4) == v139)
              {
                uint64_t v150 = v8[4];
                unint64_t v151 = (v8[5] - v150) >> 3;
                if (v140 < v151)
                {
                  uint64_t v152 = *(void *)(v150 + 8 * v140);
                  if (v152)
                  {
                    unint64_t v153 = *(unsigned __int16 *)(v152 + 2 * (v139 & 0x7F));
                    uint64_t v155 = v8[7];
                    uint64_t v154 = v8[8];
                    unint64_t v156 = (v154 - v155) >> 3;
                    if (v156 > v153)
                    {
                      uint64_t v157 = v155 + 8 * v153;
                      if (v157 != v154 && *(_DWORD *)(v157 + 4) == v139)
                      {
                        uint64_t v320 = v16;
                        unint64_t v159 = *v18;
                        unint64_t v160 = HIDWORD(*v18);
                        unint64_t v161 = *v18 >> 39;
                        if (v161 < v142
                          && (uint64_t v162 = *(void *)(v141 + 8 * v161)) != 0
                          && (unint64_t v163 = *(unsigned __int16 *)(v162 + 2 * (HIDWORD(v159) & 0x7F)), v147 > v163)
                          && ((uint64_t v164 = v146 + 8 * v163, v164 != v145)
                            ? (BOOL v165 = *(_DWORD *)(v164 + 4) == v160)
                            : (BOOL v165 = 0),
                              v165))
                        {
                          uint64_t v166 = (float32x2_t *)(v7[10] + 24 * v163);
                        }
                        else
                        {
                          uint64_t v166 = (float32x2_t *)v7[11];
                        }
                        uint64_t v314 = v15;
                        unint64_t v316 = v20;
                        if (v161 < v151
                          && (uint64_t v167 = *(void *)(v150 + 8 * v161)) != 0
                          && (unint64_t v168 = *(unsigned __int16 *)(v167 + 2 * (HIDWORD(v159) & 0x7F)), v156 > v168)
                          && ((uint64_t v169 = v155 + 8 * v168, v169 != v154)
                            ? (BOOL v170 = *(_DWORD *)(v169 + 4) == v160)
                            : (BOOL v170 = 0),
                              v170))
                        {
                          int16x8_t v138 = (double *)(v8[10] + 80 * v168);
                        }
                        else
                        {
                          int16x8_t v138 = (double *)v8[11];
                        }
                        _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE((void **)v326, v63, v166, v138);
                        long long v20 = v316;
                        double v16 = v320;
                        uint64_t v15 = v314;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v63 += 6;
        ++v18;
      }
      while (v18 != (unint64_t *)v17);
    }
  }
  if (v15 == v20)
  {
    *(void *)uint64_t v326 = this;
    int32x4_t v64 = (unint64_t *)v7[7];
    int8x16_t v65 = (uint64_t *)v7[8];
    if (v64 != (unint64_t *)v65)
    {
      int16x8_t v66 = (float32x2_t *)v7[10];
      do
      {
        unint64_t v172 = *((unsigned int *)v64 + 1);
        unint64_t v173 = v172 >> 7;
        uint64_t v174 = v6[4];
        unint64_t v175 = (v6[5] - v174) >> 3;
        if (v172 >> 7 < v175)
        {
          uint64_t v176 = *(void *)(v174 + 8 * v173);
          if (v176)
          {
            unint64_t v177 = *(unsigned __int16 *)(v176 + 2 * (v172 & 0x7F));
            uint64_t v179 = v6[7];
            uint64_t v178 = v6[8];
            unint64_t v180 = (v178 - v179) >> 3;
            if (v180 > v177)
            {
              uint64_t v181 = v179 + 8 * v177;
              if (v181 != v178 && *(_DWORD *)(v181 + 4) == v172)
              {
                uint64_t v183 = v8[4];
                unint64_t v184 = (v8[5] - v183) >> 3;
                if (v173 < v184)
                {
                  uint64_t v185 = *(void *)(v183 + 8 * v173);
                  if (v185)
                  {
                    unint64_t v186 = *(unsigned __int16 *)(v185 + 2 * (v172 & 0x7F));
                    uint64_t v188 = v8[7];
                    uint64_t v187 = v8[8];
                    unint64_t v189 = (v187 - v188) >> 3;
                    if (v189 > v186)
                    {
                      uint64_t v190 = v188 + 8 * v186;
                      if (v190 != v187 && *(_DWORD *)(v190 + 4) == v172)
                      {
                        unint64_t v321 = v16;
                        unint64_t v192 = *v64;
                        unint64_t v193 = HIDWORD(*v64);
                        unint64_t v194 = *v64 >> 39;
                        if (v194 < v175
                          && (uint64_t v195 = *(void *)(v174 + 8 * v194)) != 0
                          && (unint64_t v196 = *(unsigned __int16 *)(v195 + 2 * (HIDWORD(v192) & 0x7F)), v180 > v196)
                          && ((uint64_t v197 = v179 + 8 * v196, v197 != v178)
                            ? (BOOL v198 = *(_DWORD *)(v197 + 4) == v193)
                            : (BOOL v198 = 0),
                              v198))
                        {
                          uint64_t v199 = v6[10] + 6 * v196;
                        }
                        else
                        {
                          uint64_t v199 = v6[11];
                        }
                        unint64_t v317 = v20;
                        if (v194 < v184
                          && (uint64_t v200 = *(void *)(v183 + 8 * v194)) != 0
                          && (unint64_t v201 = *(unsigned __int16 *)(v200 + 2 * (HIDWORD(v192) & 0x7F)), v189 > v201)
                          && ((uint64_t v202 = v188 + 8 * v201, v202 != v187)
                            ? (BOOL v203 = *(_DWORD *)(v202 + 4) == v193)
                            : (BOOL v203 = 0),
                              v203))
                        {
                          int8x16_t v171 = (double *)(v8[10] + 80 * v201);
                        }
                        else
                        {
                          int8x16_t v171 = (double *)v8[11];
                        }
                        _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE((void **)v326, v199, v66, v171);
                        long long v20 = v317;
                        double v16 = v321;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v66 += 3;
        ++v64;
      }
      while (v64 != (unint64_t *)v65);
    }
  }
  if (v16 == v20)
  {
    *(void *)uint64_t v326 = this;
    int32x4_t v67 = (unint64_t *)v8[7];
    int8x16_t v68 = (uint64_t *)v8[8];
    if (v67 != (unint64_t *)v68)
    {
      int16x8_t v69 = (double *)v8[10];
      do
      {
        unint64_t v205 = *((unsigned int *)v67 + 1);
        unint64_t v206 = v205 >> 7;
        uint64_t v207 = v6[4];
        unint64_t v208 = (v6[5] - v207) >> 3;
        if (v205 >> 7 >= v208) {
          goto LABEL_206;
        }
        uint64_t v209 = *(void *)(v207 + 8 * v206);
        if (!v209) {
          goto LABEL_206;
        }
        unint64_t v210 = *(unsigned __int16 *)(v209 + 2 * (v205 & 0x7F));
        uint64_t v212 = v6[7];
        uint64_t v211 = v6[8];
        unint64_t v213 = (v211 - v212) >> 3;
        if (v213 <= v210) {
          goto LABEL_206;
        }
        uint64_t v214 = v212 + 8 * v210;
        if (v214 == v211 || *(_DWORD *)(v214 + 4) != v205) {
          goto LABEL_206;
        }
        uint64_t v216 = v7[4];
        unint64_t v217 = (v7[5] - v216) >> 3;
        if (v206 >= v217) {
          goto LABEL_206;
        }
        uint64_t v218 = *(void *)(v216 + 8 * v206);
        if (!v218) {
          goto LABEL_206;
        }
        unint64_t v219 = *(unsigned __int16 *)(v218 + 2 * (v205 & 0x7F));
        uint64_t v221 = v7[7];
        uint64_t v220 = v7[8];
        unint64_t v222 = (v220 - v221) >> 3;
        if (v222 <= v219) {
          goto LABEL_206;
        }
        uint64_t v223 = v221 + 8 * v219;
        if (v223 == v220 || *(_DWORD *)(v223 + 4) != v205) {
          goto LABEL_206;
        }
        unint64_t v225 = *v67;
        unint64_t v226 = HIDWORD(*v67);
        unint64_t v227 = *v67 >> 39;
        if (v227 < v208
          && (uint64_t v228 = *(void *)(v207 + 8 * v227)) != 0
          && (unint64_t v229 = *(unsigned __int16 *)(v228 + 2 * (HIDWORD(v225) & 0x7F)), v213 > v229)
          && ((v230 = v212 + 8 * v229, v230 != v211) ? (BOOL v231 = *(_DWORD *)(v230 + 4) == v226) : (BOOL v231 = 0), v231))
        {
          uint64_t v232 = v6[10] + 6 * v229;
          if (v227 >= v217) {
            goto LABEL_204;
          }
        }
        else
        {
          uint64_t v232 = v6[11];
          if (v227 >= v217) {
            goto LABEL_204;
          }
        }
        uint64_t v233 = *(void *)(v216 + 8 * v227);
        if (v233)
        {
          unint64_t v234 = *(unsigned __int16 *)(v233 + 2 * (HIDWORD(v225) & 0x7F));
          if (v222 > v234)
          {
            uint64_t v235 = v221 + 8 * v234;
            if (v235 != v220 && *(_DWORD *)(v235 + 4) == v226)
            {
              int8x16_t v204 = (float32x2_t *)(v7[10] + 24 * v234);
              goto LABEL_205;
            }
          }
        }
LABEL_204:
        int8x16_t v204 = (float32x2_t *)v7[11];
LABEL_205:
        _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE((void **)v326, v232, v204, v69);
LABEL_206:
        v69 += 10;
        ++v67;
      }
      while (v67 != (unint64_t *)v68);
    }
  }
  float32x4_t v21 = v324;
  float32x4_t v22 = (uint64_t (**)())(v324 + 4);
  uint64_t v23 = (unint64_t *)v10[7];
  uint64_t v24 = (uint64_t *)v10[8];
  if (v11[8] - v11[7] >= (unint64_t)((char *)v24 - (char *)v23)) {
    __n128 v25 = (uint64_t (**)())(v10 + 4);
  }
  else {
    __n128 v25 = (uint64_t (**)())(v11 + 4);
  }
  if (v324[8] - v324[7] >= (unint64_t)((char *)v25[4] - (char *)v25[3])) {
    int8x16_t v26 = v25;
  }
  else {
    int8x16_t v26 = (uint64_t (**)())(v324 + 4);
  }
  if (v10 + 4 == v26 && v23 != (unint64_t *)v24)
  {
    uint64_t v39 = (_DWORD *)(v10[10] + 2);
    while (1)
    {
      unint64_t v102 = *((unsigned int *)v23 + 1);
      unint64_t v103 = v102 >> 7;
      uint64_t v104 = v11[4];
      unint64_t v105 = (v11[5] - v104) >> 3;
      if (v102 >> 7 < v105)
      {
        uint64_t v106 = *(void *)(v104 + 8 * v103);
        if (v106)
        {
          unint64_t v107 = *(unsigned __int16 *)(v106 + 2 * (v102 & 0x7F));
          uint64_t v109 = v11[7];
          uint64_t v108 = v11[8];
          unint64_t v110 = (v108 - v109) >> 3;
          if (v110 > v107)
          {
            uint64_t v111 = v109 + 8 * v107;
            if (v111 != v108 && *(_DWORD *)(v111 + 4) == v102)
            {
              uint64_t v113 = v324[4];
              unint64_t v114 = (v324[5] - v113) >> 3;
              if (v103 < v114)
              {
                uint64_t v115 = *(void *)(v113 + 8 * v103);
                if (v115)
                {
                  unint64_t v116 = *(unsigned __int16 *)(v115 + 2 * (v102 & 0x7F));
                  uint64_t v118 = v324[7];
                  uint64_t v117 = v324[8];
                  unint64_t v119 = (v117 - v118) >> 3;
                  if (v119 > v116)
                  {
                    uint64_t v120 = v118 + 8 * v116;
                    if (v120 != v117 && *(_DWORD *)(v120 + 4) == v102) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_92:
      ++v23;
      uint64_t v39 = (_DWORD *)((char *)v39 + 6);
      if (v23 == (unint64_t *)v24) {
        goto LABEL_21;
      }
    }
    unint64_t v122 = *v23;
    unint64_t v123 = HIDWORD(*v23);
    unint64_t v124 = *v23 >> 39;
    if (v124 < v105
      && (uint64_t v125 = *(void *)(v104 + 8 * v124)) != 0
      && (unint64_t v126 = *(unsigned __int16 *)(v125 + 2 * (HIDWORD(v122) & 0x7F)), v110 > v126)
      && ((uint64_t v127 = v109 + 8 * v126, v127 != v108) ? (v128 = *(_DWORD *)(v127 + 4) == v123) : (v128 = 0), v128))
    {
      uint64_t v129 = v11[10] + 168 * v126;
      if (v124 >= v114) {
        goto LABEL_126;
      }
    }
    else
    {
      uint64_t v129 = v11[11];
      if (v124 >= v114) {
        goto LABEL_126;
      }
    }
    uint64_t v130 = *(void *)(v113 + 8 * v124);
    if (v130)
    {
      unint64_t v131 = *(unsigned __int16 *)(v130 + 2 * (HIDWORD(v122) & 0x7F));
      if (v119 > v131)
      {
        uint64_t v132 = v118 + 8 * v131;
        if (v132 != v117 && *(_DWORD *)(v132 + 4) == v123)
        {
          int8x16_t v134 = (uint64_t *)(v324[10] + 8 * v131);
LABEL_127:
          uint64_t v319 = v22;
          uint64_t v135 = *v134;
          if (*((unsigned char *)v39 - 2))
          {
            unint64_t v315 = v135 + 168;
            int32x4_t v101 = (long long **)arComponents::LocalBounds::debugEdges((arComponents::LocalBounds *)v129);
            *(_DWORD *)uint64_t v326 = *v39;
            v326[4] = 0;
            v326[8] = 0;
            v326[12] = 1;
            md::DebugDrawContext::addTileLocalLines((uint64_t *)this, v315, *v101, v101[1], (int *)v326);
          }
          else
          {
            int v136 = *(_DWORD *)(v129 + 20);
            *(_DWORD *)uint64_t v326 = *(_DWORD *)v129;
            *(int32x4_t *)&v326[4] = vuzp2q_s32(*(int32x4_t *)(v129 + 4), vrev64q_s32(*(int32x4_t *)(v129 + 4)));
            *(_DWORD *)&v326[20] = v136;
            int v328 = 0;
            char v137 = *((unsigned char *)v39 - 1);
            LODWORD(v330) = *v39;
            BYTE4(v330) = 0;
            char v331 = 0;
            char v332 = v137;
            md::DebugDrawContext::addTileLocalDebugShape((uint64_t)this, v135 + 168, (uint64_t)v326, (int *)&v330);
            if (v328 != -1) {
              ((void (*)(uint64_t *, unsigned char *))off_1EF58F518[v328])(&v330, v326);
            }
          }
          float32x4_t v22 = v319;
          goto LABEL_92;
        }
      }
    }
LABEL_126:
    int8x16_t v134 = (uint64_t *)v324[11];
    goto LABEL_127;
  }
LABEL_21:
  if (v11 + 4 == v26)
  {
    int8x16_t v71 = (unint64_t *)v11[7];
    int32x4_t v70 = (uint64_t *)v11[8];
    if (v71 != (unint64_t *)v70)
    {
      uint64_t v72 = v11[10];
      while (1)
      {
        unint64_t v238 = *((unsigned int *)v71 + 1);
        unint64_t v239 = v238 >> 7;
        uint64_t v240 = v10[4];
        unint64_t v241 = (v10[5] - v240) >> 3;
        if (v238 >> 7 < v241)
        {
          uint64_t v242 = *(void *)(v240 + 8 * v239);
          if (v242)
          {
            unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (v238 & 0x7F));
            uint64_t v245 = v10[7];
            uint64_t v244 = v10[8];
            unint64_t v246 = (v244 - v245) >> 3;
            if (v246 > v243)
            {
              uint64_t v247 = v245 + 8 * v243;
              if (v247 != v244 && *(_DWORD *)(v247 + 4) == v238)
              {
                uint64_t v249 = v21[4];
                unint64_t v250 = (v21[5] - v249) >> 3;
                if (v239 < v250)
                {
                  uint64_t v251 = *(void *)(v249 + 8 * v239);
                  if (v251)
                  {
                    unint64_t v252 = *(unsigned __int16 *)(v251 + 2 * (v238 & 0x7F));
                    uint64_t v254 = v21[7];
                    uint64_t v253 = v21[8];
                    unint64_t v255 = (v253 - v254) >> 3;
                    if (v255 > v252)
                    {
                      uint64_t v256 = v254 + 8 * v252;
                      if (v256 != v253 && *(_DWORD *)(v256 + 4) == v238) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_243:
        v72 += 168;
        if (++v71 == (unint64_t *)v70) {
          goto LABEL_22;
        }
      }
      unint64_t v258 = *v71;
      unint64_t v259 = HIDWORD(*v71);
      unint64_t v260 = *v71 >> 39;
      if (v260 < v241
        && (uint64_t v261 = *(void *)(v240 + 8 * v260)) != 0
        && (unint64_t v262 = *(unsigned __int16 *)(v261 + 2 * (HIDWORD(v258) & 0x7F)), v246 > v262)
        && ((uint64_t v263 = v245 + 8 * v262, v263 != v244) ? (v264 = *(_DWORD *)(v263 + 4) == v259) : (v264 = 0), v264))
      {
        uint64_t v265 = v10[10] + 6 * v262;
        if (v260 >= v250) {
          goto LABEL_277;
        }
      }
      else
      {
        uint64_t v265 = v10[11];
        if (v260 >= v250) {
          goto LABEL_277;
        }
      }
      uint64_t v266 = *(void *)(v249 + 8 * v260);
      if (v266)
      {
        unint64_t v267 = *(unsigned __int16 *)(v266 + 2 * (HIDWORD(v258) & 0x7F));
        if (v255 > v267)
        {
          uint64_t v268 = v254 + 8 * v267;
          if (v268 != v253 && *(_DWORD *)(v268 + 4) == v259)
          {
            uint64_t v270 = (uint64_t *)(v324[10] + 8 * v267);
LABEL_278:
            uint64_t v322 = v22;
            uint64_t v271 = *v270;
            if (*(unsigned char *)v265)
            {
              unint64_t v318 = v271 + 168;
              int8x16_t v237 = (long long **)arComponents::LocalBounds::debugEdges((arComponents::LocalBounds *)v72);
              *(_DWORD *)uint64_t v326 = *(_DWORD *)(v265 + 2);
              v326[4] = 0;
              v326[8] = 0;
              v326[12] = 1;
              md::DebugDrawContext::addTileLocalLines((uint64_t *)this, v318, *v237, v237[1], (int *)v326);
              float32x4_t v21 = v324;
            }
            else
            {
              int v272 = *(_DWORD *)(v72 + 20);
              *(_DWORD *)uint64_t v326 = *(_DWORD *)v72;
              *(int32x4_t *)&v326[4] = vuzp2q_s32(*(int32x4_t *)(v72 + 4), vrev64q_s32(*(int32x4_t *)(v72 + 4)));
              *(_DWORD *)&v326[20] = v272;
              int v328 = 0;
              char v273 = *(unsigned char *)(v265 + 1);
              LODWORD(v330) = *(_DWORD *)(v265 + 2);
              BYTE4(v330) = 0;
              char v331 = 0;
              char v332 = v273;
              md::DebugDrawContext::addTileLocalDebugShape((uint64_t)this, v271 + 168, (uint64_t)v326, (int *)&v330);
              float32x4_t v21 = v324;
              if (v328 != -1) {
                ((void (*)(uint64_t *, unsigned char *))off_1EF58F518[v328])(&v330, v326);
              }
            }
            float32x4_t v22 = v322;
            goto LABEL_243;
          }
        }
      }
LABEL_277:
      uint64_t v270 = (uint64_t *)v324[11];
      goto LABEL_278;
    }
  }
LABEL_22:
  if (v22 == v26)
  {
    int8x16_t v73 = (unint64_t *)v21[7];
    int32x4_t v74 = (uint64_t *)v21[8];
    if (v73 != (unint64_t *)v74)
    {
      int8x16_t v75 = (uint64_t *)v21[10];
      int8x16_t v26 = off_1EF58F518;
      while (1)
      {
        unint64_t v276 = *((unsigned int *)v73 + 1);
        unint64_t v277 = v276 >> 7;
        uint64_t v278 = v10[4];
        unint64_t v279 = (v10[5] - v278) >> 3;
        if (v276 >> 7 < v279)
        {
          uint64_t v280 = *(void *)(v278 + 8 * v277);
          if (v280)
          {
            unint64_t v281 = *(unsigned __int16 *)(v280 + 2 * (v276 & 0x7F));
            uint64_t v283 = v10[7];
            uint64_t v282 = v10[8];
            unint64_t v284 = (v282 - v283) >> 3;
            if (v284 > v281)
            {
              uint64_t v285 = v283 + 8 * v281;
              if (v285 != v282 && *(_DWORD *)(v285 + 4) == v276)
              {
                uint64_t v287 = v11[4];
                unint64_t v288 = (v11[5] - v287) >> 3;
                if (v277 < v288)
                {
                  uint64_t v289 = *(void *)(v287 + 8 * v277);
                  if (v289)
                  {
                    unint64_t v290 = *(unsigned __int16 *)(v289 + 2 * (v276 & 0x7F));
                    uint64_t v292 = v11[7];
                    uint64_t v291 = v11[8];
                    unint64_t v293 = (v291 - v292) >> 3;
                    if (v293 > v290)
                    {
                      uint64_t v294 = v292 + 8 * v290;
                      if (v294 != v291 && *(_DWORD *)(v294 + 4) == v276) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_282:
        ++v75;
        if (++v73 == (unint64_t *)v74) {
          goto LABEL_23;
        }
      }
      unint64_t v296 = *v73;
      unint64_t v297 = HIDWORD(*v73);
      unint64_t v298 = *v73 >> 39;
      if (v298 < v279
        && (uint64_t v299 = *(void *)(v278 + 8 * v298)) != 0
        && (unint64_t v300 = *(unsigned __int16 *)(v299 + 2 * (HIDWORD(v296) & 0x7F)), v284 > v300)
        && ((v301 = v283 + 8 * v300, v301 != v282) ? (BOOL v302 = *(_DWORD *)(v301 + 4) == v297) : (BOOL v302 = 0), v302))
      {
        uint64_t v303 = v10[10] + 6 * v300;
        if (v298 >= v288) {
          goto LABEL_316;
        }
      }
      else
      {
        uint64_t v303 = v10[11];
        if (v298 >= v288) {
          goto LABEL_316;
        }
      }
      uint64_t v304 = *(void *)(v287 + 8 * v298);
      if (v304)
      {
        unint64_t v305 = *(unsigned __int16 *)(v304 + 2 * (HIDWORD(v296) & 0x7F));
        if (v293 > v305)
        {
          uint64_t v306 = v292 + 8 * v305;
          if (v306 != v291 && *(_DWORD *)(v306 + 4) == v297)
          {
            uint64_t v308 = v11[10] + 168 * v305;
            goto LABEL_317;
          }
        }
      }
LABEL_316:
      uint64_t v308 = v11[11];
LABEL_317:
      uint64_t v309 = *v75;
      if (*(unsigned char *)v303)
      {
        unint64_t v274 = v309 + 168;
        unint64_t v275 = (long long **)arComponents::LocalBounds::debugEdges((arComponents::LocalBounds *)v308);
        *(_DWORD *)uint64_t v326 = *(_DWORD *)(v303 + 2);
        v326[4] = 0;
        v326[8] = 0;
        v326[12] = 1;
        md::DebugDrawContext::addTileLocalLines((uint64_t *)this, v274, *v275, v275[1], (int *)v326);
      }
      else
      {
        int v310 = *(_DWORD *)(v308 + 20);
        *(_DWORD *)uint64_t v326 = *(_DWORD *)v308;
        *(int32x4_t *)&v326[4] = vuzp2q_s32(*(int32x4_t *)(v308 + 4), vrev64q_s32(*(int32x4_t *)(v308 + 4)));
        *(_DWORD *)&v326[20] = v310;
        int v328 = 0;
        char v311 = *(unsigned char *)(v303 + 1);
        LODWORD(v330) = *(_DWORD *)(v303 + 2);
        BYTE4(v330) = 0;
        char v331 = 0;
        char v332 = v311;
        md::DebugDrawContext::addTileLocalDebugShape((uint64_t)this, v309 + 168, (uint64_t)v326, (int *)&v330);
        if (v328 != -1) {
          ((void (*)(uint64_t *, unsigned char *))off_1EF58F518[v328])(&v330, v326);
        }
      }
      goto LABEL_282;
    }
  }
LABEL_23:
  int8x16_t v29 = (unint64_t *)v13[7];
  int8x16_t v28 = (uint64_t *)v13[8];
  if (v14[8] - v14[7] >= (unint64_t)((char *)v28 - (char *)v29)) {
    int8x16_t v30 = v13 + 4;
  }
  else {
    int8x16_t v30 = v14 + 4;
  }
  if (v13 + 4 == v30 && v29 != (unint64_t *)v28)
  {
    long long v40 = (_DWORD *)(v13[10] + 2);
    do
    {
      unint64_t v41 = *((unsigned int *)v29 + 1);
      uint64_t v42 = v14[4];
      unint64_t v43 = (v14[5] - v42) >> 3;
      if (v41 >> 7 < v43)
      {
        uint64_t v44 = *(void *)(v42 + 8 * (v41 >> 7));
        if (v44)
        {
          unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v41 & 0x7F));
          uint64_t v47 = v14[7];
          uint64_t v46 = v14[8];
          unint64_t v48 = (v46 - v47) >> 3;
          if (v48 > v45)
          {
            uint64_t v49 = v47 + 8 * v45;
            if (v49 != v46 && *(_DWORD *)(v49 + 4) == v41)
            {
              if ((unint64_t v51 = *v29, v52 = *v29 >> 39, v52 < v43)
                && (uint64_t v53 = *(void *)(v42 + 8 * v52)) != 0
                && (unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(v51) & 0x7F)), v48 > v54)
                && ((v55 = HIDWORD(v51), uint64_t v56 = v47 + 8 * v54, v56 != v46)
                  ? (BOOL v57 = *(_DWORD *)(v56 + 4) == v55)
                  : (BOOL v57 = 0),
                    v57))
              {
                char v58 = (long long *)(v14[10] + 48 * v54);
              }
              else
              {
                char v58 = (long long *)v14[11];
              }
              char v59 = *((unsigned char *)v40 - 1);
              int v60 = *v40;
              long long v61 = *v58;
              long long v62 = v58[2];
              *(_OWORD *)&v326[16] = v58[1];
              long long v327 = v62;
              *(_OWORD *)uint64_t v326 = v61;
              int v329 = 0;
              LODWORD(v330) = v60;
              BYTE4(v330) = 0;
              char v331 = 0;
              char v332 = v59;
              md::DebugDrawContext::addWorldDebugShape(this, (uint64_t)v326, (int *)&v330);
              if (v329 != -1) {
                ((void (*)(uint64_t *, unsigned char *))off_1EF58F500[v329])(&v330, v326);
              }
            }
          }
        }
      }
      ++v29;
      long long v40 = (_DWORD *)((char *)v40 + 6);
    }
    while (v29 != (unint64_t *)v28);
  }
  if (v14 + 4 == v30)
  {
    int32x4_t v76 = (unint64_t *)v14[7];
    int8x16_t v77 = (uint64_t *)v14[8];
    if (v76 != (unint64_t *)v77)
    {
      int32x4_t v78 = (long long *)v14[10];
      do
      {
        unint64_t v79 = *((unsigned int *)v76 + 1);
        uint64_t v80 = v13[4];
        unint64_t v81 = (v13[5] - v80) >> 3;
        if (v79 >> 7 < v81)
        {
          uint64_t v82 = *(void *)(v80 + 8 * (v79 >> 7));
          if (v82)
          {
            unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (v79 & 0x7F));
            uint64_t v85 = v13[7];
            uint64_t v84 = v13[8];
            unint64_t v86 = (v84 - v85) >> 3;
            if (v86 > v83)
            {
              uint64_t v87 = v85 + 8 * v83;
              if (v87 != v84 && *(_DWORD *)(v87 + 4) == v79)
              {
                if ((unint64_t v89 = *v76, v90 = *v76 >> 39, v90 < v81)
                  && (uint64_t v91 = *(void *)(v80 + 8 * v90)) != 0
                  && (unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * (HIDWORD(v89) & 0x7F)), v86 > v92)
                  && ((unint64_t v93 = HIDWORD(v89), v94 = v85 + 8 * v92, v94 != v84)
                    ? (BOOL v95 = *(_DWORD *)(v94 + 4) == v93)
                    : (BOOL v95 = 0),
                      v95))
                {
                  uint64_t v96 = v13[10] + 6 * v92;
                }
                else
                {
                  uint64_t v96 = v13[11];
                }
                char v97 = *(unsigned char *)(v96 + 1);
                int v98 = *(_DWORD *)(v96 + 2);
                long long v99 = *v78;
                long long v100 = v78[2];
                *(_OWORD *)&v326[16] = v78[1];
                long long v327 = v100;
                *(_OWORD *)uint64_t v326 = v99;
                int v329 = 0;
                LODWORD(v330) = v98;
                BYTE4(v330) = 0;
                char v331 = 0;
                char v332 = v97;
                md::DebugDrawContext::addWorldDebugShape(this, (uint64_t)v326, (int *)&v330);
                if (v329 != -1) {
                  ((void (*)(uint64_t *, unsigned char *))off_1EF58F500[v329])(&v330, v326);
                }
              }
            }
          }
        }
        v78 += 3;
        ++v76;
      }
      while (v76 != (unint64_t *)v77);
    }
  }
  uint64_t result = (void *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(*(int8x8_t **)(v323 + 120));
  double v33 = result;
  if (result[29])
  {
    long long v34 = (void *)result[28];
    if (v34)
    {
      uint64_t v35 = result[31];
      uint64_t v36 = result[7];
      uint64_t v37 = (result[8] - v36) >> 3;
      do
      {
        *(void *)uint64_t v326 = v36;
        *(void *)&v326[8] = v37;
        uint64_t v330 = v35;
        uint64_t v38 = v34[6];
        if (!v38)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          uint64_t v313 = v312;
          if (v328 != -1) {
            ((void (*)(uint64_t *, unsigned char *))v26[v328])(&v330, v326);
          }
          _Unwind_Resume(v313);
        }
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v38 + 48))(v38, &v330, v326);
        long long v34 = (void *)*v34;
      }
      while (v34);
    }
  }
  v33[8] = v33[7];
  v33[11] = v33[10];
  return result;
}

uint64_t gdc::Registry::storage<arComponents::LocalBounds>(int8x8_t *a1)
{
  uint64_t v10 = 0x2805F57CABD6715CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2805F57CABD6715CLL;
    if (*(void *)&v1 <= 0x2805F57CABD6715CuLL) {
      uint64_t v3 = 0x2805F57CABD6715CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2805F57CABD6715CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2805F57CABD6715CLL)
      {
        if (v5[2] == 0x2805F57CABD6715CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2805F57CABD6715CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2805F57CABD6715CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EB3B58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MapTileDataComponent>(int8x8_t *a1)
{
  unint64_t v10 = 0x8D7BED96DFFA474FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8D7BED96DFFA474FLL;
    if (*(void *)&v1 <= 0x8D7BED96DFFA474FLL) {
      unint64_t v3 = 0x8D7BED96DFFA474FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8D7BED96DFFA474FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8D7BED96DFFA474FLL)
      {
        if (v5[2] == 0x8D7BED96DFFA474FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8D7BED96DFFA474FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8D7BED96DFFA474FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EB3DC8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::WorldBounds>(int8x8_t *a1)
{
  unint64_t v10 = 0xE50E89C80204E03FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE50E89C80204E03FLL;
    if (*(void *)&v1 <= 0xE50E89C80204E03FLL) {
      unint64_t v3 = 0xE50E89C80204E03FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE50E89C80204E03FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE50E89C80204E03FLL)
      {
        if (v5[2] == 0xE50E89C80204E03FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE50E89C80204E03FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE50E89C80204E03FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EB4038(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE(void **a1, uint64_t a2, float32x2_t *a3, double *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  float64x2_t v6 = vcvtq_f64_f32(a3[1]);
  v24[0] = vcvtq_f64_f32(*a3);
  v24[1] = v6;
  void v24[2] = vcvtq_f64_f32(a3[2]);
  double v7 = a4[4];
  v6.f64[0] = a4[5];
  double v8 = v7 + v7;
  double v9 = (v7 + v7) * v7;
  float64_t v10 = (v6.f64[0] + v6.f64[0]) * v6.f64[0];
  uint64_t v12 = *((void *)a4 + 2);
  double v11 = a4[3];
  double v13 = (v11 + v11) * v7;
  double v14 = a4[6];
  uint64_t v15 = *((void *)a4 + 7);
  float64_t v16 = (v6.f64[0] + v6.f64[0]) * v14;
  float64_t v17 = v6.f64[0] * (v11 + v11);
  double v18 = 1.0 - (v11 + v11) * v11;
  v6.f64[0] = v8 * v6.f64[0];
  *(double *)v37.i64 = 1.0 - (v9 + v10);
  *(double *)&v37.i64[1] = v16 + v13;
  *(double *)v39.i64 = v13 - v16;
  *(double *)&v39.i64[1] = v18 - v10;
  double v42 = v14 * v8 + v17;
  double v43 = v6.f64[0] - v14 * (v11 + v11);
  long long v38 = COERCE_UNSIGNED_INT64(v17 - v14 * v8);
  double v40 = v14 * (v11 + v11) + v6.f64[0];
  double v44 = v18 - v9;
  uint64_t v41 = 0;
  uint64_t v45 = 0;
  long long v46 = *(_OWORD *)a4;
  uint64_t v47 = v12;
  uint64_t v48 = 0x3FF0000000000000;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v19 = *((void *)a4 + 8);
  v6.f64[0] = a4[9];
  uint64_t v28 = v15;
  *(void *)&long long v31 = v19;
  *((void *)&v33 + 1) = *(void *)&v6.f64[0];
  gm::operator*<double,4,4,4>(v23, (double *)v37.i64, (double *)&v28);
  int64x2_t v25 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v26 = xmmword_1A28FC720;
  int64x2_t v27 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v37.i64[0] = (uint64_t)&unk_1EF57D5A8;
  v37.i64[1] = (uint64_t)&v25;
  *(void *)&long long v38 = v23;
  *((void *)&v38 + 1) = &v37;
  double v20 = gm::Box<double,3>::forEachCorner((uint64_t)v24, (uint64_t)&v37);
  if (*((int64x2_t **)&v38 + 1) == &v37)
  {
    (*(void (**)(int64x2_t *, double))(v37.i64[0] + 32))(&v37, v20);
  }
  else if (*((void *)&v38 + 1))
  {
    (*(void (**)(void, double))(**((void **)&v38 + 1) + 40))(*((void *)&v38 + 1), v20);
  }
  float32x4_t v21 = *a1;
  int64x2_t v37 = v25;
  long long v38 = v26;
  int64x2_t v39 = v27;
  DWORD2(v46) = 0;
  char v22 = *(unsigned char *)(a2 + 1);
  LODWORD(v28) = *(_DWORD *)(a2 + 2);
  BYTE4(v28) = 0;
  LOBYTE(v29) = 0;
  BYTE4(v29) = v22;
  md::DebugDrawContext::addWorldDebugShape(v21, (uint64_t)&v37, (int *)&v28);
  if (DWORD2(v46) != -1) {
    ((void (*)(uint64_t *, int64x2_t *))off_1EF58F500[DWORD2(v46)])(&v28, &v37);
  }
}

void sub_1A1EB42F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v39 = *(unsigned int *)(v37 - 88);
  if (v39 != -1) {
    ((void (*)(char *, uint64_t))off_1EF58F500[v39])(&a37, v37 - 192);
  }
  _Unwind_Resume(exception_object);
}

void **arComponents::LocalBounds::debugEdges(arComponents::LocalBounds *this)
{
  uint64_t v1 = (void **)((char *)this + 104);
  if (*((unsigned char *)this + 128)) {
    return v1;
  }
  unint64_t v3 = this;
  unint64_t v93 = (void **)((char *)this + 104);
  uint64_t v4 = 0;
  int v5 = 0;
  unint64_t v6 = 0;
  double v7 = (char *)this + 4;
  long long v8 = 0uLL;
  long long v9 = xmmword_1A28FCEA0;
  long long v10 = xmmword_1A28FCFB0;
  long long v11 = xmmword_1A28FCFC0;
  long long v12 = xmmword_1A28FCFD0;
  long long v13 = xmmword_1A28FCFE0;
  long long v14 = xmmword_1A28FCFF0;
  long long v15 = xmmword_1A28FD000;
  long long v16 = xmmword_1A28FD010;
  float64_t v17 = "N3geo11_retain_ptrIP9CGContextNS_10_retain_cfIS2_EENS_11_release_cfENS_8_hash_cfENS_9_equal_cfEEE" + 62;
  double v18 = "N3geo11_retain_ptrIP9CGContextNS_10_retain_cfIS2_EENS_11_release_cfENS_8_hash_cfENS_9_equal_cfEEE" + 62;
  uint64_t v96 = (char *)this + 4;
  do
  {
    unint64_t v19 = v6;
    double v20 = (__int32 *)((char *)v3 + 8 * v6);
    long long v101 = v9;
    long long v102 = v9;
    long long v103 = v10;
    long long v104 = v11;
    long long v105 = v12;
    long long v106 = v13;
    long long v107 = v14;
    long long v108 = v15;
    long long v109 = v16;
    uint64_t v110 = 0x3E8483EDBF7746EDLL;
    int v111 = 0;
    float32x4_t v21 = (char *)&v101 + 12 * v19;
    uint64_t v22 = *(void *)v21;
    v23.i32[0] = *v20;
    __int32 v24 = v20[1];
    int v117 = *((_DWORD *)v21 + 2);
    uint64_t v116 = v22;
    long long v101 = v9;
    long long v102 = v9;
    long long v103 = v10;
    long long v104 = v11;
    long long v105 = v12;
    long long v106 = v13;
    long long v107 = v14;
    long long v108 = v15;
    long long v109 = v16;
    uint64_t v110 = 0x3E8483EDBF7746EDLL;
    int v111 = 0;
    v23.i32[1] = *(_DWORD *)v21;
    v23.i64[1] = *(void *)(v21 + 4);
    float32x4_t v118 = vnegq_f32(v23);
    __int32 v119 = v24;
    unint64_t v25 = v19 + 1;
    unint64_t v94 = v19 + 1;
    if (v19 <= 0xB)
    {
      do
      {
        uint64_t v26 = 0;
        long long v101 = v9;
        long long v102 = v9;
        long long v103 = v10;
        long long v104 = v11;
        long long v105 = v12;
        long long v106 = v13;
        long long v107 = v14;
        long long v108 = v15;
        long long v109 = v16;
        uint64_t v110 = 0x3E8483EDBF7746EDLL;
        int64x2_t v27 = (char *)&v101 + 12 * v25;
        uint64_t v112 = *(void *)v27;
        uint64_t v28 = (__int32 *)((char *)v3 + 8 * v25);
        int v111 = 0;
        v29.i32[0] = *v28;
        __int32 v30 = v28[1];
        int v113 = *((_DWORD *)v27 + 2);
        long long v101 = v9;
        long long v102 = v9;
        long long v103 = v10;
        long long v104 = v11;
        long long v105 = v12;
        long long v106 = v13;
        long long v107 = v14;
        long long v108 = v15;
        long long v109 = v16;
        uint64_t v110 = 0x3E8483EDBF7746EDLL;
        int v111 = 0;
        v29.i32[1] = *(_DWORD *)v27;
        v29.i64[1] = *(void *)(v27 + 4);
        float32x4_t v114 = vnegq_f32(v29);
        __int32 v115 = v30;
        long long v31 = (float *)&v116;
        do
        {
          char v32 = 0;
          uint64_t v33 = 0;
          uint64_t v99 = v26;
          long long v34 = (float *)((unint64_t)(&v116 + 2 * v26) | 0xC);
          long long v100 = v34;
          do
          {
            char v36 = v32;
            uint64_t v37 = (float *)(&v112 + 2 * v33);
            float v38 = v37[1];
            float v39 = v37[2];
            float v41 = v31[1];
            float v40 = v31[2];
            float v42 = -(float)((float)(v38 * v40) - (float)(v39 * v41));
            float v43 = -(float)((float)(*v31 * v39) - (float)(*v37 * v40));
            float v44 = -(float)((float)(*v37 * v41) - (float)(*v31 * v38));
            float v45 = (float)((float)(v42 * v42) + (float)(v43 * v43)) + (float)(v44 * v44);
            if (v45 >= 0.00000011921)
            {
              uint64_t v46 = 0;
              uint64_t v47 = 0;
              float v48 = v37[3];
              float v49 = -(float)((float)(*v34 * *v37) - (float)(v48 * *v31));
              float v50 = -(float)((float)(*v34 * v38) - (float)(v48 * v41));
              float v51 = -(float)((float)(*v34 * v39) - (float)(v48 * v40));
              float v52 = v51 * v43;
              float v53 = -(float)((float)(v50 * v42) - (float)(v49 * v43));
              unint64_t v54 = v25;
              unint64_t v55 = (int *)v7;
              do
              {
                if (v4 != v46 && v54)
                {
                  long long v120 = v9;
                  long long v121 = v9;
                  long long v122 = v10;
                  long long v123 = v11;
                  long long v124 = v12;
                  long long v125 = v13;
                  long long v126 = v14;
                  long long v127 = v15;
                  long long v128 = v16;
                  uint64_t v129 = 0x3E8483EDBF7746EDLL;
                  int v130 = 0;
                  uint64_t v56 = &v101 + v47;
                  uint64_t v57 = *(void *)((char *)&v120 + v46);
                  v58.i32[0] = *(v55 - 1);
                  int v59 = *v55;
                  *((_DWORD *)v56 + 2) = *(_DWORD *)((char *)&v120 + v46 + 8);
                  *(void *)uint64_t v56 = v57;
                  long long v120 = v9;
                  long long v121 = v9;
                  long long v122 = v10;
                  long long v123 = v11;
                  long long v124 = v12;
                  long long v125 = v13;
                  long long v126 = v14;
                  long long v127 = v15;
                  long long v128 = v16;
                  uint64_t v129 = 0x3E8483EDBF7746EDLL;
                  int v130 = 0;
                  v58.i32[1] = *(_DWORD *)((char *)&v120 + v46);
                  v47 += 2;
                  v58.i64[1] = *(void *)((char *)&v120 + v46 + 4);
                  *(long long *)((char *)v56 + 12) = (__int128)vnegq_f32(v58);
                  *((_DWORD *)v56 + 7) = v59;
                }
                v46 += 12;
                v55 += 2;
                --v54;
              }
              while (v46 != 156);
              uint64_t v60 = 0;
              float v61 = 1.0 / v45;
              float v62 = (float)-(float)((float)(v49 * v44) - (float)(v51 * v42)) * v61;
              float v63 = (float)-(float)(v52 - (float)(v50 * v44)) * v61;
              float v64 = v53 * v61;
              float v65 = -3.4028e38;
              float v66 = 3.4028e38;
              while (1)
              {
                float v67 = *(float *)((char *)&v101 + v60);
                float v68 = *(float *)((char *)&v101 + v60 + 4);
                float v69 = *(float *)((char *)&v101 + v60 + 8);
                float v70 = (float)((float)(v67 * v42) + (float)(v68 * v43)) + (float)(v69 * v44);
                float v71 = (float)((float)(*(float *)((char *)&v101 + v60 + 12) + (float)(v67 * v63)) + (float)(v68 * v62))
                    + (float)(v69 * v64);
                BOOL v72 = v70 <= 0.0;
                if (v70 == 0.0)
                {
                  if (v71 < 0.0) {
                    break;
                  }
                }
                else
                {
                  float v73 = (float)-v71 / v70;
                  if (v72) {
                    float v66 = fminf(v73, v66);
                  }
                  else {
                    float v65 = fmaxf(v65, v73);
                  }
                }
                if (v65 > v66) {
                  break;
                }
                v60 += 16;
                if (v60 == 352)
                {
                  if (v65 != -3.4028e38 && v66 != 3.4028e38)
                  {
                    float v74 = v63 + (float)(v65 * v42);
                    float v75 = (float)(v65 * v44) + v64;
                    float v76 = v63 + (float)(v66 * v42);
                    float32x2_t v77 = *(float32x2_t *)(v17 + 1456);
                    float32x2_t v78 = *(float32x2_t *)(v18 + 64);
                    float32x2_t v79 = vmla_n_f32(vmul_n_f32(v77, v74), v78, v62 + (float)(v65 * v43));
                    float32x2_t v80 = vsub_f32(vmla_n_f32(vmul_n_f32(v77, v76), v78, v62 + (float)(v66 * v43)), v79);
                    float v81 = -(float)((float)(v65 * v44) - (float)(v66 * v44));
                    uint64_t v82 = (char *)*((void *)&v8 + 1);
                    if (*((void *)&v8 + 1) < (unint64_t)v5)
                    {
                      **((void **)&v8 + 1) = v79;
                      *(float *)(*((void *)&v8 + 1) + 8) = v75;
                      *(float32x2_t *)(*((void *)&v8 + 1) + 12) = v80;
                      uint64_t v35 = *((void *)&v8 + 1) + 24;
                      *(float *)(*((void *)&v8 + 1) + 20) = v81;
                    }
                    else
                    {
                      unint64_t v83 = (char *)v8;
                      unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v8 + 1) - v8) >> 3);
                      unint64_t v85 = v84 + 1;
                      if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        abort();
                      }
                      if (0x5555555555555556 * ((uint64_t)&v5[-v8] >> 3) > v85) {
                        unint64_t v85 = 0x5555555555555556 * ((uint64_t)&v5[-v8] >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v8] >> 3) >= 0x555555555555555) {
                        unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v86 = v85;
                      }
                      if (v86)
                      {
                        if (v86 > 0xAAAAAAAAAAAAAAALL) {
                          std::__throw_bad_array_new_length[abi:nn180100]();
                        }
                        uint64_t v87 = (char *)operator new(24 * v86);
                        long long v10 = xmmword_1A28FCFB0;
                        long long v9 = xmmword_1A28FCEA0;
                        long long v12 = xmmword_1A28FCFD0;
                        long long v11 = xmmword_1A28FCFC0;
                        long long v14 = xmmword_1A28FCFF0;
                        long long v13 = xmmword_1A28FCFE0;
                        long long v16 = xmmword_1A28FD010;
                        long long v15 = xmmword_1A28FD000;
                      }
                      else
                      {
                        uint64_t v87 = 0;
                      }
                      uint64_t v88 = &v87[24 * v84];
                      *(float32x2_t *)uint64_t v88 = v79;
                      *((float *)v88 + 2) = v75;
                      *(float32x2_t *)(v88 + 12) = v80;
                      *((float *)v88 + 5) = v81;
                      unint64_t v89 = v88;
                      if (v82 != v83)
                      {
                        do
                        {
                          long long v90 = *(_OWORD *)(v82 - 24);
                          *((void *)v89 - 1) = *((void *)v82 - 1);
                          *(_OWORD *)(v89 - 24) = v90;
                          v89 -= 24;
                          v82 -= 24;
                        }
                        while (v82 != v83);
                        uint64_t v82 = v83;
                      }
                      int v5 = &v87[24 * v86];
                      uint64_t v35 = (uint64_t)(v88 + 24);
                      *(void *)&long long v8 = v89;
                      if (v82)
                      {
                        char v97 = v89;
                        operator delete(v82);
                        *(void *)&long long v8 = v97;
                        long long v16 = xmmword_1A28FD010;
                        long long v15 = xmmword_1A28FD000;
                        long long v14 = xmmword_1A28FCFF0;
                        long long v13 = xmmword_1A28FCFE0;
                        long long v12 = xmmword_1A28FCFD0;
                        long long v11 = xmmword_1A28FCFC0;
                        long long v10 = xmmword_1A28FCFB0;
                        long long v9 = xmmword_1A28FCEA0;
                      }
                      double v7 = v96;
                      float64_t v17 = "se_cfENS_8_hash_cfENS_9_equal_cfEEE";
                      double v18 = "se_cfENS_8_hash_cfENS_9_equal_cfEEE";
                      long long v34 = v100;
                    }
                    *((void *)&v8 + 1) = v35;
                  }
                  break;
                }
              }
            }
            char v32 = 1;
            uint64_t v33 = 1;
          }
          while ((v36 & 1) == 0);
          long long v31 = (float *)(&v116 + 2 * v99 + 2);
          uint64_t v26 = 1;
        }
        while (v99 != 1);
        ++v25;
        unint64_t v3 = this;
      }
      while (v25 != 13);
    }
    v4 += 12;
    unint64_t v6 = v94;
  }
  while (v94 != 13);
  if (!*((unsigned char *)v3 + 128))
  {
LABEL_52:
    *(_OWORD *)((char *)v3 + 104) = v8;
    *((void *)v3 + 15) = v5;
    *((unsigned char *)v3 + 128) = 1;
    return v93;
  }
  uint64_t v1 = v93;
  uint64_t v91 = *v93;
  if (!*v93)
  {
    *(_OWORD *)((char *)v3 + 104) = v8;
    *((void *)v3 + 15) = v5;
    return v1;
  }
  *((void *)v3 + 14) = v91;
  long long v98 = v8;
  operator delete(v91);
  int v92 = *((unsigned __int8 *)v3 + 128);
  *(_OWORD *)((char *)v3 + 104) = v98;
  *((void *)v3 + 15) = v5;
  if (!v92)
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_52;
  }
  return v1;
}

void sub_1A1EB4974(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL gdc::ComponentStorageWrapper<arComponents::WorldBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::WorldBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  long long v14 = (void *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  long long v15 = (void *)a1[11];
  uint64_t v16 = *(v15 - 6);
  v15 -= 6;
  *long long v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  void v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  float64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    float64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::WorldBounds>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::WorldBounds>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  long long v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    long long v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LocalBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LocalBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v49 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v14 = a1[10];
          uint64_t v15 = v14 + 168 * v7;
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v16 = a1[11];
          long long v17 = *(_OWORD *)(v16 - 168);
          long long v18 = *(_OWORD *)(v16 - 136);
          *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 - 152);
          *(_OWORD *)(v15 + 32) = v18;
          *(_OWORD *)uint64_t v15 = v17;
          long long v19 = *(_OWORD *)(v16 - 120);
          long long v20 = *(_OWORD *)(v16 - 104);
          long long v21 = *(_OWORD *)(v16 - 88);
          *(void *)(v15 + 96) = *(void *)(v16 - 72);
          *(_OWORD *)(v15 + 64) = v20;
          *(_OWORD *)(v15 + 80) = v21;
          *(_OWORD *)(v15 + 48) = v19;
          uint64_t v22 = (void **)(v15 + 104);
          int v25 = *(unsigned __int8 *)(v15 + 128);
          __int32 v24 = (unsigned char *)(v15 + 128);
          int v23 = v25;
          if (v25 == *(unsigned __int8 *)(v16 - 40))
          {
            if (v22 != (void **)(v16 - 64) && v23 != 0) {
              std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>((uint64_t)v22, *(char **)(v16 - 64), *(char **)(v16 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 - 56) - *(void *)(v16 - 64)) >> 3));
            }
          }
          else if (v23)
          {
            int64x2_t v27 = *v22;
            if (*v22)
            {
              *(void *)(v14 + 168 * v7 + 112) = v27;
              operator delete(v27);
            }
            *__int32 v24 = 0;
          }
          else
          {
            char *v22 = 0;
            v22[1] = 0;
            void v22[2] = 0;
            float32x4_t v29 = *(unsigned char **)(v16 - 64);
            uint64_t v28 = *(unsigned char **)(v16 - 56);
            int64_t v30 = v28 - v29;
            if (v28 != v29)
            {
              if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
                goto LABEL_49;
              }
              uint64_t v31 = v14 + 168 * v7;
              char v32 = (void *)(v31 + 112);
              float v48 = (void *)(v31 + 120);
              uint64_t v33 = (char *)operator new(v30);
              char *v22 = v33;
              *char v32 = v33;
              void *v48 = &v33[8 * (v30 >> 3)];
              memcpy(v33, v29, 24 * ((v30 - 24) / 0x18uLL) + 24);
              *char v32 = &v33[24 * ((v30 - 24) / 0x18uLL) + 24];
            }
            *__int32 v24 = 1;
          }
          uint64_t v34 = v14 + 168 * v7;
          int v37 = *(unsigned __int8 *)(v34 + 160);
          char v36 = (unsigned char *)(v34 + 160);
          int v35 = v37;
          float v38 = (void **)(v36 - 24);
          float v39 = (void **)(v16 - 32);
          if (v37 == *(unsigned __int8 *)(v16 - 8))
          {
            if (v38 != v39 && v35 != 0) {
              std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v36 - 24), *(void *)(v16 - 32), *(char **)(v16 - 24), (uint64_t)(*(void *)(v16 - 24) - *(void *)(v16 - 32)) >> 4);
            }
          }
          else if (v35)
          {
            float v41 = *v38;
            if (*v38)
            {
              *(void *)(v14 + 168 * v7 + 144) = v41;
              operator delete(v41);
            }
            unsigned char *v36 = 0;
          }
          else
          {
            std::__shared_weak_count *v38 = 0;
            *((void *)v36 - 2) = 0;
            *((void *)v36 - 1) = 0;
            if (v38 != v39) {
              std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v36 - 24), *(void *)(v16 - 32), *(char **)(v16 - 24), (uint64_t)(*(void *)(v16 - 24) - *(void *)(v16 - 32)) >> 4);
            }
            unsigned char *v36 = 1;
          }
          uint64_t v42 = a1[11];
          if (*(unsigned char *)(v42 - 8))
          {
            float v43 = *(void **)(v42 - 32);
            if (v43)
            {
              *(void *)(v42 - 24) = v43;
              operator delete(v43);
            }
          }
          if (*(unsigned char *)(v42 - 40))
          {
            float v44 = *(void **)(v42 - 64);
            if (v44)
            {
              *(void *)(v42 - 56) = v44;
              operator delete(v44);
            }
          }
          a1[11] = v42 - 168;
          float v45 = (void *)a1[28];
          if (!v45) {
            return 1;
          }
          uint64_t v46 = a1[31];
          while (1)
          {
            v51[0] = &v49;
            v51[1] = 1;
            uint64_t v50 = v46;
            uint64_t v47 = v45[6];
            if (!v47) {
              break;
            }
            (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v47 + 48))(v47, &v50, v51);
            float v45 = (void *)*v45;
            if (!v45) {
              return 1;
            }
          }
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_49:
          abort();
        }
      }
    }
  }
  return 0;
}

void sub_1A1EB50A0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v1;
  if (*v1)
  {
    *(void *)(v3 + 168 * v2 + 144) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    long long v18 = *(char **)(a1 + 8);
    long long v17 = (void *)(a1 + 8);
    uint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      int v23 = result;
      if (a2 != a3)
      {
        do
        {
          *(_DWORD *)int v23 = *(_DWORD *)v6;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
          *((_DWORD *)v23 + 3) = *((_DWORD *)v6 + 3);
          *((_DWORD *)v23 + 4) = *((_DWORD *)v6 + 4);
          *((_DWORD *)v23 + 5) = *((_DWORD *)v6 + 5);
          v23 += 24;
          v6 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v23 - result;
      uint64_t v14 = result;
    }
    else
    {
      long long v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_DWORD *)uint64_t result = *(_DWORD *)v6;
          *((_DWORD *)result + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *((_DWORD *)result + 3) = *((_DWORD *)v6 + 3);
          *((_DWORD *)result + 4) = *((_DWORD *)v6 + 4);
          *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      for (uint64_t i = v14; v20 != a3; v20 += 24)
      {
        long long v22 = *(_OWORD *)v20;
        *((void *)i + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t i = v22;
        i += 24;
      }
      int64_t v16 = i - v14;
    }
  }
  else
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_24;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_24:
    }
      abort();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    uint64_t v14 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v13];
    uint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      uint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    long long v17 = (void *)(a1 + 8);
  }
  *long long v17 = &v14[v16];
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::LocalBounds>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::LocalBounds>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,arComponents::LocalBounds>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        if (*(unsigned char *)(v3 - 8))
        {
          uint64_t v5 = *(void **)(v3 - 32);
          if (v5)
          {
            *(void *)(v3 - 24) = v5;
            operator delete(v5);
          }
        }
        if (*(unsigned char *)(v3 - 40))
        {
          uint64_t v6 = *(void **)(v3 - 64);
          if (v6)
          {
            *(void *)(v3 - 56) = v6;
            operator delete(v6);
          }
        }
        v3 -= 168;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  unint64_t v7 = (void *)a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*a1;
  if (*a1)
  {
    uint64_t v9 = (void *)a1[1];
    unint64_t v10 = (void *)*a1;
    if (v9 != v8)
    {
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          MEMORY[0x1A6239270](v11, 0x1000C40104B78CFLL);
        }
      }
      while (v9 != v8);
      unint64_t v10 = (void *)*a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LocalBounds>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x61AAF6FADEFBCCACLL;
    if (*(void *)&v5 <= 0x61AAF6FADEFBCCACuLL) {
      uint64_t v7 = 0x61AAF6FADEFBCCACuLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x61AAF6FADEFBCCACLL)
      {
        if (v9[2] == 0x61AAF6FADEFBCCACLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x61AAF6FADEFBCCACLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x61AAF6FADEFBCCACLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x61AAF6FADEFBCCACLL;
    if (*(void *)&v4 <= 0x61AAF6FADEFBCCACuLL) {
      uint64_t v6 = 0x61AAF6FADEFBCCACuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x61AAF6FADEFBCCACLL;
    if (*(void *)&v4 <= 0x61AAF6FADEFBCCACuLL) {
      uint64_t v6 = 0x61AAF6FADEFBCCACuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x61AAF6FADEFBCCACLL;
    if (*(void *)&v4 <= 0x61AAF6FADEFBCCACuLL) {
      uint64_t v6 = 0x61AAF6FADEFBCCACuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x61AAF6FADEFBCCACLL;
    if (*(void *)&v4 <= 0x61AAF6FADEFBCCACuLL) {
      uint64_t v6 = 0x61AAF6FADEFBCCACuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1EB5DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARPushDebugDrawItemsContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARPushDebugDrawItemsContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555B40;
  uint64_t v1 = (md::DebugDrawContext *)a1[4];
  if (v1)
  {
    md::DebugDrawContext::~DebugDrawContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARPushDebugDrawItemsContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555B40;
  uint64_t v2 = (md::DebugDrawContext *)a1[4];
  if (v2)
  {
    md::DebugDrawContext::~DebugDrawContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::ARPushDebugDrawItemsLogic::~ARPushDebugDrawItemsLogic(md::ARPushDebugDrawItemsLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void ggl::SpecularLandmark::LandmarkPipelineState::~LandmarkPipelineState(ggl::SpecularLandmark::LandmarkPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::SpecularLandmark::LandmarkPipelineSetup::textureIsEnabled(ggl::SpecularLandmark::LandmarkPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::SpecularLandmark::LandmarkPipelineSetup::constantDataIsEnabled(ggl::SpecularLandmark::LandmarkPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::SpecularLandmark::LandmarkPipelineSetup::~LandmarkPipelineSetup(ggl::SpecularLandmark::LandmarkPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A1EB63A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1EB6500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1EB6854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A1EB6A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1A1EB6C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1A1EB6E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1EB6F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1EB7068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::getRequest(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = (void **)(a1 + 8);
  uint64_t v9 = (uint64_t **)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>((uint64_t)(a1 + 8), (unsigned int *)a2);
  unint64_t v10 = v9;
  if (a1 + 9 == v9)
  {
    (*(void (**)(uint64_t **__return_ptr, void *, uint64_t, uint64_t))(*a1 + 64))(&v26, a1, a2, a3);
    uint64_t v14 = v26;
    uint64_t v13 = v27;
    *a4 = v26;
    a4[1] = (uint64_t *)v13;
    uint64_t v15 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>((uint64_t)v8, &v26, (unsigned int *)a2);
    uint64_t v16 = *v15;
    if (!*v15)
    {
      long long v17 = v15;
      uint64_t v16 = (uint64_t)operator new(0x50uLL);
      long long v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v16 + 48) = v18;
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = 0;
      unint64_t v19 = v26;
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = v19;
      *long long v17 = v16;
      long long v20 = (void *)**v8;
      long long v21 = (uint64_t *)v16;
      if (v20)
      {
        *uint64_t v8 = v20;
        long long v21 = (uint64_t *)*v17;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v21);
      ++a1[10];
    }
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v22 = *(std::__shared_weak_count **)(v16 + 72);
    *(void *)(v16 + 64) = v14;
    *(void *)(v16 + 72) = v13;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    unint64_t v23 = a1[6];
    if (v23)
    {
      __int32 v24 = *a4;
      int v25 = (std::__shared_weak_count *)a4[1];
      uint64_t v26 = v24;
      int64x2_t v27 = v25;
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::JobManager::queueJob(v23, &v26);
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      else
      {
        karo::JobManager::queueJob(v23, &v26);
      }
    }
  }
  else
  {
    uint64_t v12 = v9[8];
    uint64_t v11 = v9[9];
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
    *a4 = v12;
    a4[1] = v11;
  }
}

void sub_1A1EB734C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(uint64_t a1, unsigned int *a2)
{
  int8x8_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (_DWORD *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v6 = a2[4];
  unsigned int v5 = a2[5];
  unsigned int v8 = a2[6];
  unsigned int v7 = a2[7];
  unsigned int v10 = *a2;
  unsigned int v9 = a2[1];
  uint64_t v11 = v2;
  unsigned int v12 = a2[2];
  do
  {
    while (1)
    {
      unsigned int v13 = *((_DWORD *)v3 + 12);
      if (v13 == v6 && *((_DWORD *)v3 + 13) == v5 && *((_DWORD *)v3 + 14) == v8 && v7 == *((_DWORD *)v3 + 15)) {
        break;
      }
      if (v13 < v6) {
        goto LABEL_3;
      }
      if (v13 > v6) {
        goto LABEL_21;
      }
      unsigned int v17 = *((_DWORD *)v3 + 13);
      if (v17 < v5) {
        goto LABEL_3;
      }
      if (v17 > v5) {
        goto LABEL_21;
      }
      unsigned int v18 = *((_DWORD *)v3 + 14);
      if (v18 < v8) {
        goto LABEL_3;
      }
      if (v18 > v8) {
        goto LABEL_21;
      }
      BOOL v15 = *((_DWORD *)v3 + 15) >= v7;
LABEL_19:
      if (v15) {
        goto LABEL_21;
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_22;
      }
    }
    unsigned int v14 = *((_DWORD *)v3 + 8);
    BOOL v15 = v14 >= v10;
    if (v14 != v10) {
      goto LABEL_19;
    }
    unsigned int v16 = *((_DWORD *)v3 + 9);
    BOOL v15 = v16 >= v9;
    if (v16 != v9) {
      goto LABEL_19;
    }
    if (*((_DWORD *)v3 + 10) < v12) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v11 = v3;
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_22:
  if (v11 == v2) {
    return v2;
  }
  unsigned int v19 = v11[12];
  if (v6 != v19 || v5 != v11[13] || v8 != v11[14] || v11[15] != v7)
  {
    if (v6 < v19) {
      return v2;
    }
    if (v6 > v19) {
      return v11;
    }
    unsigned int v23 = v11[13];
    if (v5 < v23) {
      return v2;
    }
    if (v5 > v23) {
      return v11;
    }
    unsigned int v24 = v11[14];
    if (v8 < v24) {
      return v2;
    }
    if (v8 > v24) {
      return v11;
    }
    BOOL v21 = v7 >= v11[15];
    goto LABEL_38;
  }
  unsigned int v20 = v11[8];
  BOOL v21 = v10 >= v20;
  if (v10 != v20 || (unsigned int v22 = v11[9], v21 = v9 >= v22, v9 != v22))
  {
LABEL_38:
    if (!v21) {
      return v2;
    }
    return v11;
  }
  if (v12 >= v11[10]) {
    return v11;
  }
  return v2;
}

uint64_t *std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  int8x8_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = a3[4];
    unsigned int v7 = a3[5];
    unsigned int v8 = a3[6];
    unsigned int v9 = a3[7];
    unsigned int v10 = *a3;
    unsigned int v11 = a3[1];
    unsigned int v12 = a3[2];
    while (1)
    {
      unsigned int v13 = v4;
      unsigned int v14 = *((_DWORD *)v4 + 12);
      if (v6 == v14 && v7 == *((_DWORD *)v13 + 13) && v8 == *((_DWORD *)v13 + 14) && *((_DWORD *)v13 + 15) == v9)
      {
        unsigned int v15 = *((_DWORD *)v13 + 8);
        BOOL v16 = v10 >= v15;
        if (v10 == v15 && (v17 = *((_DWORD *)v13 + 9), BOOL v16 = v11 >= v17, v11 == v17))
        {
          if (v12 >= *((_DWORD *)v13 + 10)) {
            goto LABEL_25;
          }
        }
        else if (v16)
        {
          goto LABEL_25;
        }
LABEL_3:
        int8x8_t v4 = (uint64_t *)*v13;
        double result = v13;
        if (!*v13) {
          goto LABEL_40;
        }
      }
      else
      {
        if (v6 < v14) {
          goto LABEL_3;
        }
        if (v6 <= v14)
        {
          unsigned int v18 = *((_DWORD *)v13 + 13);
          if (v7 < v18) {
            goto LABEL_3;
          }
          if (v7 <= v18)
          {
            unsigned int v19 = *((_DWORD *)v13 + 14);
            if (v8 < v19 || v8 <= v19 && v9 < *((_DWORD *)v13 + 15)) {
              goto LABEL_3;
            }
          }
        }
        if (v6 != v14 || *((_DWORD *)v13 + 13) != v7 || *((_DWORD *)v13 + 14) != v8)
        {
LABEL_32:
          if (v14 >= v6)
          {
            if (v14 > v6) {
              goto LABEL_40;
            }
            unsigned int v23 = *((_DWORD *)v13 + 13);
            if (v23 >= v7)
            {
              if (v23 > v7) {
                goto LABEL_40;
              }
              unsigned int v24 = *((_DWORD *)v13 + 14);
              if (v24 >= v8 && (v24 > v8 || *((_DWORD *)v13 + 15) >= v9)) {
                goto LABEL_40;
              }
            }
          }
          goto LABEL_39;
        }
LABEL_25:
        if (v9 != *((_DWORD *)v13 + 15)) {
          goto LABEL_32;
        }
        unsigned int v20 = *((_DWORD *)v13 + 8);
        BOOL v21 = v20 >= v10;
        if (v20 == v10)
        {
          unsigned int v22 = *((_DWORD *)v13 + 9);
          BOOL v21 = v22 >= v11;
          if (v22 == v11) {
            BOOL v21 = *((_DWORD *)v13 + 10) >= v12;
          }
        }
        if (v21)
        {
LABEL_40:
          *a2 = v13;
          return result;
        }
LABEL_39:
        double result = v13 + 1;
        int8x8_t v4 = (uint64_t *)v13[1];
        if (!v4) {
          goto LABEL_40;
        }
      }
    }
  }
  *a2 = result;
  return result;
}

uint64_t std::shared_ptr<karo::Job>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unsigned int v6 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    uint64_t v8 = *((void *)v6 + 8);
    unsigned int v7 = (std::__shared_weak_count *)*((void *)v6 + 9);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      uint64_t v9 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7) {
        return v9;
      }
    }
    else
    {
      uint64_t v9 = 0;
      if (!v7) {
        return v9;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v9;
}

void sub_1A1EB77B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t karo::Job::waitToFinish(karo::Job *this, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(*((pthread_mutex_t **)this + 17));
  if (a2)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    int v4 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v4 & 1) == 0)
    {
      v8.tv_sec = a2 / 0x3E8uLL;
      v8.tv_nsec = 1000000 * (a2 - 1000 * (a2 / 0x3E8));
      pthread_cond_timedwait_relative_np(*((pthread_cond_t **)this + 18), *((pthread_mutex_t **)this + 17), &v8);
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v5 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *((_DWORD *)this + 5);
      LODWORD(v8.tv_sec) = 67109120;
      HIDWORD(v8.tv_sec) = v6;
      _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_ERROR, "Should not wait indefinitely on job: %u", (uint8_t *)&v8, 8u);
    }
  }
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 17));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  BOOL v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  unsigned int v18 = v22;
  unsigned int v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  unsigned int v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A1EB7A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 32;
      (*(void (**)(unsigned int **__return_ptr, uint64_t))(*(void *)a1 + 96))(&v22, a1);
      unsigned int v11 = v22;
      int v12 = *(_DWORD *)(v10 + 32);
      unsigned int v13 = *(_DWORD *)(v10 + 36);
      char v14 = *(unsigned char *)(v10 + 40);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      BOOL v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        unsigned int v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        *BOOL v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        unsigned int v19 = v16 + 3;
        *(void *)(a3 + 8) = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      unsigned int v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 48;
    }
    while (v10 + 48 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A1EB7C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

void *std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = 24 * v6;
  uint64_t v10 = (char *)operator new(24 * v6);
  unsigned int v11 = &v10[24 * v3];
  *(void *)unsigned int v11 = off_1EF5677B0;
  *((void *)v11 + 1) = a2;
  *((void *)v11 + 2) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
  }
  int v12 = &v10[v9];
  unsigned int v13 = v11 + 24;
  char v14 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_24;
  }
  uint64_t v16 = (uint64_t)&v10[24 * v3 - 24];
  unsigned int v17 = &v10[24 * v3];
  do
  {
    *((void *)v17 - 3) = off_1EF5677B0;
    v17 -= 24;
    uint64_t v18 = *((void *)v15 - 2);
    uint64_t v19 = *((void *)v15 - 1);
    *((void *)v17 + 1) = v18;
    *((void *)v17 + 2) = v19;
    if (v19)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      uint64_t v18 = *((void *)v11 - 2);
    }
    if (v18) {
      atomic_fetch_add((atomic_uint *volatile)(v18 + 128), 1u);
    }
    v15 -= 24;
    v16 -= 24;
    unsigned int v11 = v17;
  }
  while (v15 != v14);
  unsigned int v15 = (char *)*a1;
  unsigned int v20 = (char *)a1[1];
  *a1 = v17;
  a1[1] = v13;
  a1[2] = v12;
  if (v20 != v15)
  {
    BOOL v21 = v20 - 24;
    unsigned int v22 = v20 - 24;
    unsigned int v23 = (void (***)(char *))(v20 - 24);
    do
    {
      unsigned int v24 = *v23;
      v23 -= 3;
      (*v24)(v22);
      v21 -= 24;
      BOOL v25 = v22 == v15;
      unsigned int v22 = (char *)v23;
    }
    while (!v25);
  }
  if (v15) {
LABEL_24:
  }
    operator delete(v15);
  return v13;
}

void altitude::C3mmRequestManager::createRequest(uint64_t a1@<X2>, void *a2@<X8>)
{
  if (a1) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1A1EB7FB0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::C3mmAreaLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::C3mmAreaLoadJob>,std::allocator<altitude::C3mmAreaLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::C3mmAreaLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::C3mmAreaLoadJob>,std::allocator<altitude::C3mmAreaLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

BOOL altitude::C3mmAreaLoadJob::succeeded(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  BOOL v2 = (this[20] & 2) == 0;
  pthread_mutex_unlock(this[19]);
  return v2;
}

void altitude::C3mmAreaLoadJob::jobStep(altitude::C3mmAreaLoadJob *this)
{
  BOOL v2 = (char *)this + 188;
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    int v3 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v3 & 2) != 0) {
      goto LABEL_300;
    }
    atomic_load((unsigned int *)this + 4);
    (*(void (**)(void *__return_ptr))(**((void **)this + 32) + 104))(&v143);
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v143) == 4) {
      break;
    }
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v143))
    {
      long long v128 = v145;
      v142[0] = v144;
      v142[1] = v145;
      if (v145)
      {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::Job::addBlockingSubJob((uint64_t *)this, v142, 1, 0);
        if (!atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v142, 1, 0);
      }
      uint64_t v143 = off_1EF5676C0;
      uint64_t v129 = v147;
      if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
      uint64_t v143 = off_1EF5677B0;
      if (v144) {
        atomic_fetch_add((atomic_uint *volatile)(v144 + 128), 0xFFFFFFFF);
      }
      int v130 = v145;
      if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
      return;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v7 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = *((_DWORD *)this + 52);
      int v8 = *((_DWORD *)this + 53);
      int v10 = *((_DWORD *)this + 51);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v8;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v10;
      _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_ERROR, "Failed to load file %u %u %u", buf, 0x14u);
    }

    (*(void (**)(altitude::C3mmAreaLoadJob *))(*(void *)this + 16))(this);
LABEL_36:
    uint64_t v143 = off_1EF5676C0;
    BOOL v25 = v147;
    if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v143 = off_1EF5677B0;
    if (v144) {
      atomic_fetch_add((atomic_uint *volatile)(v144 + 128), 0xFFFFFFFF);
    }
    uint64_t v26 = v145;
    if (v145)
    {
      if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  unint64_t v4 = v146;
  pthread_mutex_lock(v146[19]);
  int v5 = *((_DWORD *)v4 + 40);
  pthread_mutex_unlock(v4[19]);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(pthread_mutex_t **))&(*v146)->__opaque[48])(v146);
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v11 = (*(unsigned int (**)(pthread_mutex_t **))&(*v146)->__opaque[40])(v146);
  uint64_t v13 = *((void *)this + 28);
  uint64_t v14 = *((void *)this + 30);
  int v15 = *((_DWORD *)this + 62);
  uint64_t v148 = v14;
  int v149 = v15;
  if (v11 < 6 || *(unsigned char *)v6 != 67 || *(unsigned char *)(v6 + 1) != 51 || *(unsigned char *)(v6 + 2) != 77 || *(unsigned char *)(v6 + 3) != 77)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v17 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
LABEL_28:
    *(_WORD *)buf = 0;
    uint64_t v18 = v17;
    uint64_t v19 = "Invalid c3mm file!";
    uint32_t v20 = 2;
    goto LABEL_29;
  }
  int v16 = *(unsigned __int16 *)(v6 + 4);
  if (v16 == 2)
  {
    if (v11 <= 0xB)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      unsigned int v17 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v172 = 134218240;
        *(void *)&v172[4] = v11;
        *(_WORD *)&v172[12] = 1024;
        *(_DWORD *)&v172[14] = 12;
        _os_log_impl(&dword_1A1780000, v17, OS_LOG_TYPE_ERROR, "Invalid c3mm file, size (%zu) is less than header size (%d)", v172, 0x12u);
      }
      goto LABEL_30;
    }
    int v139 = *(_DWORD *)(v6 + 8);
    int v32 = *(unsigned __int16 *)(v6 + 6);
    std::mutex::lock((std::mutex *)(v13 + 208));
    *(_WORD *)uint64_t v13 = 2;
    *(_DWORD *)(v13 + 4) = v32;
    uint64_t v34 = *(_DWORD **)(v13 + 120);
    uint64_t v33 = *(_DWORD **)(v13 + 128);
    if (v34 != v33) {
      goto LABEL_58;
    }
    *(void *)buf = v6;
    *(void *)&buf[8] = v11;
    *(void *)&buf[16] = 12;
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v31 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unint64_t v172 = 0;
        _os_log_impl(&dword_1A1780000, v31, OS_LOG_TYPE_ERROR, "Meta levels are not defined", v172, 2u);
      }
      goto LABEL_138;
    }
    uint64_t v34 = *(_DWORD **)(v13 + 120);
    uint64_t v33 = *(_DWORD **)(v13 + 128);
    if (v34 == v33)
    {
LABEL_60:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      int v35 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unint64_t v172 = 0;
        _os_log_impl(&dword_1A1780000, v35, OS_LOG_TYPE_ERROR, "No meta level for file index", v172, 2u);
      }

      uint64_t v34 = 0;
    }
    else
    {
LABEL_58:
      while (*v34 != v14)
      {
        v34 += 3;
        if (v34 == v33) {
          goto LABEL_60;
        }
      }
    }
    char v36 = (std::__shared_weak_count *)operator new(0x50uLL);
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A9A8;
    *(_OWORD *)&v36[1].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v36[2].__shared_owners_ = 0u;
    v36[3].__vftable = 0;
    v36[1].std::__shared_count = 0u;
    uint64_t v166 = v36 + 1;
    uint64_t v167 = v36;
    if (v34)
    {
      if (v139)
      {
        int v135 = 0;
        unint64_t v41 = 12;
        int v136 = v139;
        while (1)
        {
          unint64_t v42 = v41;
          if (v41 < v11)
          {
            unint64_t v42 = v41 + 1;
            int v136 = *(unsigned __int8 *)(v6 + v41);
          }
          unint64_t v43 = v42 + 4;
          if (v42 + 4 <= v11)
          {
            LODWORD(v134) = *(_DWORD *)(v6 + v42);
            v42 += 4;
          }
          unint64_t v44 = v42 + 1;
          if (v42 + 1 <= v11) {
            int v135 = *(unsigned __int8 *)(v6 + v42++);
          }
          unint64_t v141 = v42 + 4;
          if (v42 + 4 > v11)
          {
LABEL_139:
            char v45 = 0;
            goto LABEL_233;
          }
          char v45 = 0;
          if (v41 >= v11 || v43 > v11 || v44 > v11) {
            goto LABEL_233;
          }
          unint64_t v46 = *(unsigned int *)(v6 + v42);
          std::string __p = (void *)(v6 + v141);
          memset(v172, 0, 24);
          if (v135 == 1)
          {
            unint64_t v47 = (v134 - 10);
            std::vector<unsigned char>::resize((uint64_t)v172, v46);
            BOOL v48 = lzma_decompress_bytes();
            unint64_t v49 = *(void **)v172;
            if (!v48)
            {
              int v51 = 1;
              unint64_t v41 = v141;
              goto LABEL_115;
            }
            std::string __p = *(void **)v172;
            if (*(void *)&v172[8] - *(void *)v172 != v46)
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              uint64_t v50 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v170) = 0;
                _os_log_impl(&dword_1A1780000, v50, OS_LOG_TYPE_ERROR, "Mismatching c3mm data size", (uint8_t *)&v170, 2u);
              }

              int v51 = 1;
              unint64_t v41 = v141;
              unint64_t v49 = __p;
              goto LABEL_115;
            }
          }
          else
          {
            unint64_t v47 = (v134 - 10);
            unint64_t v46 = v47;
          }
          *(void *)&long long v170 = __p;
          *((void *)&v170 + 1) = v46;
          int8x16_t v171 = 0;
          unint64_t v52 = v47;
          switch((char)v136)
          {
            case 0:
              long long v168 = v170;
              uint64_t v169 = v171;
              v165[0] = (char **)v166;
              v165[1] = (char **)v167;
              if (v167) {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v54 = (int ***)v165;
              goto LABEL_110;
            case 1:
              long long v163 = v170;
              uint64_t v164 = v171;
              v162[0] = (int **)v166;
              v162[1] = (int **)v167;
              if (v167) {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v54 = v162;
              goto LABEL_110;
            case 2:
              float v58 = *(float *)&v170;
              long long v160 = v170;
              unint64_t v161 = v171;
              uint64_t v59 = (uint64_t)v166;
              v159[0] = v166;
              v159[1] = v167;
              if (v167) {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v54 = (int ***)v159;
              goto LABEL_110;
            case 3:
                goto LABEL_111;
              goto LABEL_101;
            case 5:
              float v60 = *(float *)&v170;
              long long v157 = v170;
              int8x16_t v158 = v171;
              float v61 = (uint64_t *)v166;
              v156[0] = v166;
              v156[1] = v167;
              if (v167) {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v54 = (int ***)v156;
              goto LABEL_110;
            case 6:
              long long v154 = v170;
              uint64_t v155 = v171;
              unint64_t v55 = &v166->__vftable;
              v153[0] = v166;
              v153[1] = v167;
              if (v167) {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v54 = (int ***)v153;
LABEL_110:
              std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v54);
              if (RootBounds) {
                goto LABEL_111;
              }
              goto LABEL_101;
            case 7:
              long long v151 = v170;
              uint64_t v152 = v171;
              uint64_t v56 = (uint64_t)v166;
              v150[0] = v166;
              v150[1] = v167;
              if (v167) {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v150);
              if (v57) {
                goto LABEL_111;
              }
LABEL_101:
              int v51 = 1;
              unint64_t v41 = v141;
              break;
            default:
LABEL_111:
              int v51 = 0;
              if (v141 + v52 >= v11) {
                unint64_t v41 = v11;
              }
              else {
                unint64_t v41 = v141 + v52;
              }
              break;
          }
          unint64_t v49 = *(void **)v172;
LABEL_115:
          if (v49) {
            operator delete(v49);
          }
          if (v51) {
            goto LABEL_139;
          }
          if (!--v139)
          {
            LODWORD(v14) = v148;
            break;
          }
        }
      }
      if (!v14)
      {
        long long v125 = (char *)v166->__vftable;
        shared_owners = (char *)v166->__shared_owners_;
        if ((char *)v166->__vftable != shared_owners)
        {
          do
          {
            std::__tree<karo::media::C3mmRoot>::__emplace_unique_key_args<karo::media::C3mmRoot,karo::media::C3mmRoot const&>((uint64_t *)(v13 + 16), (unsigned int *)v125, (uint64_t)v125);
            v125 += 24;
          }
          while (v125 != shared_owners);
        }
      }
      karo::media::C3mmArea::insertFile(v13, &v148, (uint64_t *)&v166);
      char v45 = 1;
LABEL_233:
      char v36 = v167;
      if (!v167)
      {
LABEL_236:
        std::mutex::unlock((std::mutex *)(v13 + 208));
        if (v45) {
          goto LABEL_292;
        }
        goto LABEL_31;
      }
    }
    else
    {
      char v45 = 0;
    }
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    goto LABEL_236;
  }
  if (v16 != 1)
  {
LABEL_31:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    BOOL v21 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = *((_DWORD *)this + 52);
      int v22 = *((_DWORD *)this + 53);
      int v24 = *((_DWORD *)this + 51);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v22;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v24;
      _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "Error reading meta data loaded from %u %u %u", buf, 0x14u);
    }

    (*(void (**)(void, char *))(**((void **)this + 32) + 120))(*((void *)this + 32), v2);
    (*(void (**)(altitude::C3mmAreaLoadJob *))(*(void *)this + 16))(this);
    goto LABEL_36;
  }
  if (v11 <= 0x1A)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v17 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 27;
    uint64_t v18 = v17;
    uint64_t v19 = "Invalid c3mm file, size (%zu) is less than header size (%d)";
    uint32_t v20 = 18;
LABEL_29:
    _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
LABEL_30:

    goto LABEL_31;
  }
  v12.i32[0] = *(_DWORD *)v6;
  if (vmovn_s16((int16x8_t)vmovl_u8(v12)).u32[0] != 1296905027)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v17 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  int64x2_t v27 = (std::mutex *)(v13 + 208);
  std::mutex::lock((std::mutex *)(v13 + 208));
  int v29 = *(_DWORD *)(v6 + 6);
  unsigned int v30 = *(unsigned __int8 *)(v6 + 10);
  *(_WORD *)uint64_t v13 = *(_WORD *)(v6 + 4);
  *(_DWORD *)(v13 + 4) = v29;
  *(_DWORD *)(v13 + 44) = v30;
  if (v30 >= 2)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v31 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A1780000, v31, OS_LOG_TYPE_ERROR, "Invalid file type!", buf, 2u);
    }
LABEL_138:

    std::mutex::unlock((std::mutex *)(v13 + 208));
    goto LABEL_31;
  }
  uint64_t v62 = *(void *)(v6 + 11);
  int v63 = *(_DWORD *)(v6 + 19);
  unint64_t v64 = *(unsigned int *)(v6 + 23);
  memset(v172, 0, 24);
  uint64_t v65 = v6 + 27;
  unint64_t v66 = v11 - 27;
  if (v63 != v64)
  {
    unint64_t v67 = v64;
    std::vector<unsigned char>::resize((uint64_t)v172, v64);
    if (!lzma_decompress_bytes())
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v122, OS_LOG_TYPE_ERROR, "Failed to load c3mm lzma chunk!", buf, 2u);
      }
      goto LABEL_271;
    }
    uint64_t v65 = *(void *)v172;
    unint64_t v66 = v67;
  }
  *(void *)&long long v170 = v65;
  *((void *)&v170 + 1) = v66;
  int8x16_t v171 = 0;
  if (v14 || !v66)
  {
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      int64x2_t v27 = (std::mutex *)(v13 + 208);
      long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v122, OS_LOG_TYPE_ERROR, "Failed to load C3MM data section", buf, 2u);
      }
      goto LABEL_271;
    }
LABEL_142:
    uint64_t v69 = *(void *)(v13 + 72);
    int64x2_t v27 = (std::mutex *)(v13 + 208);
    if (v14 >= (unint64_t)((*(void *)(v13 + 80) - v69) >> 5))
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v122, OS_LOG_TYPE_ERROR, "C3MM file index is missing", buf, 2u);
      }
      goto LABEL_271;
    }
    *(void *)(v69 + 32 * v14) = v62;
    int v70 = 1;
    goto LABEL_272;
  }
  float v68 = 0;
  int8x16_t v134 = (uint64_t *)(v13 + 16);
  while (2)
  {
    BOOL v72 = v68 + 5;
    if ((unint64_t)(v68 + 5) > v66)
    {
      int v70 = 0;
      int64x2_t v27 = (std::mutex *)(v13 + 208);
      goto LABEL_272;
    }
    __pa = v68 + 5;
    unint64_t v140 = v66;
    int v73 = v68[v170];
    int8x16_t v171 = v68 + 5;
    float v74 = &v72[v170];
    float v75 = (std::mutex *)&v72[v170 - 4];
    unint64_t v71 = (LODWORD(v75->__m_.__sig) - 5);
    *(void *)&long long v168 = &v72[v170];
    *((void *)&v168 + 1) = v71;
    uint64_t v169 = 0;
    switch(v73)
    {
      case 0:
        if (!v71) {
          goto LABEL_145;
        }
        unint64_t v76 = 0;
        int8x16_t v133 = (std::mutex *)&v72[v170 - 4];
        while (2)
        {
          *(_DWORD *)&buf[12] = 0;
          unint64_t v77 = v76 + 4;
          if (v76 + 4 > v71)
          {
            unint64_t v78 = v76 + 4;
          }
          else
          {
            uint64_t v28 = *(unsigned int *)&v74[v76];
            unint64_t v78 = v76 + 8;
            v76 += 4;
          }
          unint64_t v79 = v78;
          if (v78 <= v71)
          {
            int v135 = *(_DWORD *)((char *)&v75->__m_.__sig + v78);
            unint64_t v79 = v78 + 4;
            unint64_t v76 = v78;
          }
          unint64_t v80 = v79;
          if (v79 <= v71)
          {
            int v136 = *(_DWORD *)((char *)&v75->__m_.__sig + v79);
            unint64_t v80 = v79 + 4;
            unint64_t v76 = v79;
          }
          if (v80 <= v71)
          {
            LODWORD(v141) = *(_DWORD *)((char *)&v75->__m_.__sig + v80);
            unint64_t v76 = v80;
          }
          unint64_t v81 = v76 + 1;
          if (v76 + 1 > v71)
          {
            uint64_t v169 = (char *)v76;
          }
          else
          {
            if (v77 <= v71 && v78 <= v71 && v79 <= v71 && v80 <= v71)
            {
              unsigned int v82 = v74[v76];
              *(_DWORD *)buf = v28;
              *(_DWORD *)&buf[4] = v135;
              *(_DWORD *)&buf[8] = v136;
              *(_DWORD *)&buf[16] = v141;
              *(_DWORD *)&buf[20] = v82;
              if (v82 < 2)
              {
                unsigned int v83 = *(_DWORD *)(v13 + 96);
                uint64_t v84 = v28;
                if (v28 < v83) {
                  unsigned int v83 = v28;
                }
                *(_DWORD *)(v13 + 96) = v83;
                std::__tree<karo::media::C3mmRoot>::__emplace_unique_key_args<karo::media::C3mmRoot,karo::media::C3mmRoot const&>(v134, (unsigned int *)buf, (uint64_t)buf);
                unint64_t v76 = v81;
                uint64_t v28 = v84;
                float v75 = v133;
                if (v81 >= v71) {
                  goto LABEL_145;
                }
                continue;
              }
              uint64_t v169 = (char *)(v76 + 1);
              int64x2_t v27 = (std::mutex *)(v13 + 208);
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              long long v127 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v163) = 0;
                _os_log_impl(&dword_1A1780000, v127, OS_LOG_TYPE_ERROR, "Unknown structure type in root!", (uint8_t *)&v163, 2u);
              }

LABEL_266:
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR)) {
                goto LABEL_271;
              }
              *(_WORD *)buf = 0;
              long long v123 = v122;
              long long v124 = "Failed to load C3MM root index";
LABEL_270:
              _os_log_impl(&dword_1A1780000, v123, OS_LOG_TYPE_ERROR, v124, buf, 2u);
              goto LABEL_271;
            }
            uint64_t v169 = (char *)(v76 + 1);
          }
          break;
        }
        int64x2_t v27 = (std::mutex *)(v13 + 208);
        goto LABEL_266;
      case 1:
        {
          unint64_t v71 = 0;
          __pa = v171;
          unint64_t v140 = *((void *)&v170 + 1);
LABEL_145:
          unint64_t v66 = v140;
          if ((unint64_t)&__pa[v71] >= v140) {
            float v68 = (char *)v140;
          }
          else {
            float v68 = &__pa[v71];
          }
          int8x16_t v171 = v68;
          if (v140 <= (unint64_t)&__pa[v71]) {
            goto LABEL_142;
          }
          continue;
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        int64x2_t v27 = (std::mutex *)(v13 + 208);
        long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          long long v123 = v122;
          long long v124 = "Failed to load C3MM data section";
          goto LABEL_270;
        }
LABEL_271:

        int v70 = 0;
LABEL_272:
        if (*(void *)v172) {
          operator delete(*(void **)v172);
        }
        std::mutex::unlock(v27);
        if (!v70) {
          goto LABEL_31;
        }
LABEL_292:
        uint64_t v143 = off_1EF5676C0;
        unint64_t v131 = v147;
        if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
        uint64_t v143 = off_1EF5677B0;
        if (v144) {
          atomic_fetch_add((atomic_uint *volatile)(v144 + 128), 0xFFFFFFFF);
        }
        uint64_t v132 = v145;
        if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
LABEL_300:
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        return;
      case 2:
        if (!v71) {
          goto LABEL_145;
        }
        unint64_t v85 = 0;
        unint64_t v86 = v71;
        unint64_t v141 = v71;
        while (2)
        {
          unint64_t v88 = (unint64_t)(v85 + 4);
          if (v88 > v86)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            int64x2_t v27 = (std::mutex *)(v13 + 208);
            long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR)) {
              goto LABEL_271;
            }
            *(_WORD *)buf = 0;
            long long v123 = v122;
            long long v124 = "Failed to load C3MM file index";
            goto LABEL_270;
          }
          uint64_t v169 = (char *)v88;
          int v89 = *(_DWORD *)(v168 + v88 - 4);
          uint64_t v91 = *(char **)(v13 + 56);
          unint64_t v90 = *(void *)(v13 + 64);
          if ((unint64_t)v91 < v90)
          {
            *(_DWORD *)uint64_t v91 = v89;
            int v92 = v91 + 4;
            goto LABEL_200;
          }
          unint64_t v93 = *(char **)(v13 + 48);
          int64_t v94 = v91 - v93;
          uint64_t v28 = (v91 - v93) >> 2;
          unint64_t v95 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            goto LABEL_302;
          }
          uint64_t v96 = v90 - (void)v93;
          if (v96 >> 1 > v95) {
            unint64_t v95 = v96 >> 1;
          }
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v97 = v95;
          }
          if (v97)
          {
            int v135 = v91 - v93;
            int v136 = v89;
            if (v97 >> 62) {
              goto LABEL_303;
            }
            unint64_t v98 = v97;
            uint64_t v99 = operator new(4 * v97);
            unint64_t v97 = v98;
            uint64_t v28 = (v91 - v93) >> 2;
            int v89 = v136;
            int64_t v94 = v91 - v93;
          }
          else
          {
            uint64_t v99 = 0;
          }
          long long v100 = (int *)&v99[4 * v28];
          *long long v100 = v89;
          int v92 = v100 + 1;
          if (v91 == v93)
          {
            unint64_t v71 = v141;
            goto LABEL_198;
          }
          unint64_t v101 = v91 - 4 - v93;
          if (v101 >= 0x2C)
          {
            unint64_t v71 = v141;
            if ((unint64_t)(v91 - &v99[v94]) >= 0x20)
            {
              uint64_t v102 = (v101 >> 2) + 1;
              uint64_t v28 = (uint64_t)&v99[4 * v28 - 16];
              long long v103 = v91 - 16;
              uint64_t v104 = v102 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v105 = *(_OWORD *)v103;
                *(_OWORD *)(v28 - 16) = *((_OWORD *)v103 - 1);
                *(_OWORD *)uint64_t v28 = v105;
                v28 -= 32;
                v103 -= 32;
                v104 -= 8;
              }
              while (v104);
              v100 -= v102 & 0x7FFFFFFFFFFFFFF8;
              v91 -= 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
              if (v102 == (v102 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_198:
                *(void *)(v13 + 48) = v100;
                *(void *)(v13 + 56) = v92;
                *(void *)(v13 + 64) = &v99[4 * v97];
                if (v93) {
                  operator delete(v93);
                }
LABEL_200:
                *(void *)(v13 + 56) = v92;
                long long v108 = *(char **)(v13 + 80);
                unint64_t v107 = *(void *)(v13 + 88);
                if ((unint64_t)v108 < v107)
                {
                  *(_OWORD *)long long v108 = 0u;
                  *((_OWORD *)v108 + 1) = 0u;
                  uint64_t v87 = v108 + 32;
                  goto LABEL_175;
                }
                long long v109 = *(char **)(v13 + 72);
                uint64_t v110 = (v108 - v109) >> 5;
                unint64_t v111 = v110 + 1;
                if (!((unint64_t)(v110 + 1) >> 59))
                {
                  uint64_t v112 = v107 - (void)v109;
                  if (v112 >> 4 > v111) {
                    unint64_t v111 = v112 >> 4;
                  }
                  if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v113 = v111;
                  }
                  if (!v113)
                  {
                    float32x4_t v114 = 0;
                    goto LABEL_211;
                  }
                  if (!(v113 >> 59))
                  {
                    float32x4_t v114 = (char *)operator new(32 * v113);
LABEL_211:
                    __int32 v115 = &v114[32 * v110];
                    uint64_t v116 = &v114[32 * v113];
                    *(_OWORD *)__int32 v115 = 0u;
                    *((_OWORD *)v115 + 1) = 0u;
                    uint64_t v87 = v115 + 32;
                    if (v108 == v109)
                    {
                      *(void *)(v13 + 72) = v115;
                      *(void *)(v13 + 80) = v87;
                      *(void *)(v13 + 88) = v116;
                    }
                    else
                    {
                      uint64_t v117 = 0;
                      do
                      {
                        float32x4_t v118 = &v115[v117];
                        __int32 v119 = &v108[v117];
                        *((void *)v118 - 4) = *(void *)&v108[v117 - 32];
                        *((void *)v118 - 2) = 0;
                        *((void *)v118 - 1) = 0;
                        *(_OWORD *)(v118 - 24) = *(_OWORD *)&v108[v117 - 24];
                        uint64_t v28 = *(void *)&v108[v117 - 8];
                        *((void *)v118 - 1) = v28;
                        *((void *)v119 - 3) = 0;
                        *((void *)v119 - 2) = 0;
                        *((void *)v119 - 1) = 0;
                        v117 -= 32;
                      }
                      while (&v108[v117] != v109);
                      long long v108 = *(char **)(v13 + 72);
                      long long v120 = *(char **)(v13 + 80);
                      *(void *)(v13 + 72) = &v115[v117];
                      *(void *)(v13 + 80) = v87;
                      *(void *)(v13 + 88) = v116;
                      while (v120 != v108)
                      {
                        long long v121 = (void *)*((void *)v120 - 3);
                        if (v121)
                        {
                          *((void *)v120 - 2) = v121;
                          operator delete(v121);
                        }
                        v120 -= 32;
                      }
                    }
                    unint64_t v71 = v141;
                    if (v108) {
                      operator delete(v108);
                    }
LABEL_175:
                    *(void *)(v13 + 80) = v87;
                    unint64_t v86 = *((void *)&v168 + 1);
                    unint64_t v85 = v169;
                    if ((unint64_t)v169 >= *((void *)&v168 + 1)) {
                      goto LABEL_145;
                    }
                    continue;
                  }
LABEL_303:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
LABEL_302:
                abort();
              }
            }
          }
          else
          {
            unint64_t v71 = v141;
          }
          break;
        }
        do
        {
          int v106 = *((_DWORD *)v91 - 1);
          v91 -= 4;
          *--long long v100 = v106;
        }
        while (v91 != v93);
        goto LABEL_198;
      case 3:
          goto LABEL_145;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        int64x2_t v27 = (std::mutex *)(v13 + 208);
        long long v122 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR)) {
          goto LABEL_271;
        }
        *(_WORD *)buf = 0;
        long long v123 = v122;
        long long v124 = "Failed to load C3MM object tree";
        goto LABEL_270;
      default:
        goto LABEL_145;
    }
  }
}

void sub_1A1EB9994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (STACK[0x200]) {
    operator delete((void *)STACK[0x200]);
  }
  std::mutex::unlock(a9);
  karo::AsyncFileLoader::FileObject::~FileObject((karo::AsyncFileLoader::FileObject *)&a24);
  _Unwind_Resume(a1);
}

void altitude::C3mmAreaLoadJob::~C3mmAreaLoadJob(altitude::C3mmAreaLoadJob *this)
{
  *(void *)this = &unk_1EF568FC0;
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF568FC0;
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::Job::~Job(this);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::clearRequest(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = (uint64_t **)(a1 + 64);
  uint64_t v5 = (uint64_t *)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    uint64_t v6 = v5;
    (*(void (**)(uint64_t))(*(void *)v5[8] + 16))(v5[8]);
    unsigned int v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        int v8 = v7;
        unsigned int v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      int v9 = v6;
      do
      {
        int v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        int v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6) {
      uint64_t *v4 = v8;
    }
    unint64_t v11 = *(uint64_t **)(a1 + 72);
    --*(void *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    uint8x8_t v12 = (std::__shared_weak_count *)v6[9];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v6);
  }
  uint64_t v13 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v13);
}

void sub_1A1EB9DB8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      uint64_t v6 = (uint64_t *)v5[1];
      if (v5[8] == a2) {
        break;
      }
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (uint64_t *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72)) {
        goto LABEL_23;
      }
    }
    if (v6)
    {
      do
      {
        int v9 = v6;
        uint64_t v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      BOOL v10 = v5;
      do
      {
        int v9 = (uint64_t *)v10[2];
        BOOL v8 = *v9 == (void)v10;
        BOOL v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5) {
      *(void *)(a1 + 64) = v9;
    }
    unint64_t v11 = *(uint64_t **)(a1 + 72);
    --*(void *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    uint8x8_t v12 = (std::__shared_weak_count *)v5[9];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v5);
  }
LABEL_23:
  uint64_t v13 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v13);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      uint64_t v5 = (uint64_t *)v4[1];
      uint64_t v6 = v4;
      if (v5)
      {
        do
        {
          unsigned int v7 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unsigned int v7 = (uint64_t *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          uint64_t v6 = v7;
        }
        while (!v8);
      }
      uint64_t v9 = v4[8];
      if (atomic_load((unsigned int *)(v9 + 128))) {
        *(_DWORD *)(v9 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 152));
      int v11 = *(_DWORD *)(v9 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 152));
      if ((v11 & 1) != 0 && *(unsigned char *)(v9 + 176) && *(_DWORD *)(v9 + 180) != a2
        || (a2 - *(_DWORD *)(v9 + 180)) > *(_DWORD *)(v9 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        uint8x8_t v12 = (uint64_t *)v4[1];
        uint64_t v13 = v4;
        if (v12)
        {
          do
          {
            uint64_t v14 = v12;
            uint8x8_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v14 = (uint64_t *)v13[2];
            BOOL v8 = *v14 == (void)v13;
            uint64_t v13 = v14;
          }
          while (!v8);
        }
        if (*(uint64_t **)(a1 + 64) == v4) {
          *(void *)(a1 + 64) = v14;
        }
        int v15 = *(uint64_t **)(a1 + 72);
        --*(void *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v4);
        int v16 = (std::__shared_weak_count *)v4[9];
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        operator delete(v4);
      }
      unint64_t v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  unsigned int v17 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v17);
}

void sub_1A1EBA0DC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void altitude::C3mmRequestManager::~C3mmRequestManager(altitude::C3mmRequestManager *this)
{
  altitude::C3mmRequestManager::~C3mmRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF569E40;
  BOOL v2 = (void *)((char *)this + 104);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((void **)this + 13));
  *((void *)this + 12) = v2;
  *((void *)this + 14) = 0;
  std::__shared_weak_count *v2 = 0;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 21));
  int v3 = *((void *)this + 21);
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40FA0F61DDLL);
  }
  *((void *)this + 21) = 0;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((void **)this + 13));
  *(void *)this = &unk_1EF567BF8;
  while (*((void *)this + 10))
    (*(void (**)(altitude::C3mmRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void sub_1A1EBA220(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    BOOL v2 = (std::__shared_weak_count *)a1[9];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

void altitude::C3mmRequestManager::requestC3mmArea(void *a1, void *a2, _DWORD *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2[17])
  {
    uint64_t v13 = a4;
    uint64_t v14 = a5;
    if (a5) {
      atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *a6;
    int v16 = *((_DWORD *)a6 + 2);
    (*(void (**)(void *, _DWORD *, void, uint64_t, uint64_t, void, uint64_t *))(*a2 + 80))(a2, a3, 0, 4294967294, 60, 0, &v13);
    BOOL v8 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v9 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = a3[5];
      int v10 = a3[6];
      int v12 = a3[4];
      LODWORD(v13) = 67109632;
      HIDWORD(v13) = v11;
      LOWORD(v14) = 1024;
      *(_DWORD *)((char *)&v14 + 2) = v10;
      HIWORD(v14) = 1024;
      LODWORD(v15) = v12;
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, "Missing loader! Unable to fetch request %u %u %u", (uint8_t *)&v13, 0x14u);
    }

    a1[1] = 0;
    a1[2] = 0;
    *a1 = off_1EF5677B0;
  }
}

void sub_1A1EBA4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL altitude::C3mmRequestManager::loadMetaData(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 168));
  if (a4)
  {
    long long v142 = 0u;
    memset(v141, 0, sizeof(v141));
    double v143 = 1.0;
    altitude::Tile::computeGeocentricBoundsFromTileIndex(a2, (uint64_t)v141, (uint64_t)&v144, 0.0, 10000.0);
    double v11 = *(double *)&v142;
    double v12 = v11 + v11;
    double v13 = (v11 + v11) * v11;
    double v14 = (*((double *)&v142 + 1) + *((double *)&v142 + 1)) * *((double *)&v142 + 1);
    double v15 = *((double *)&v141[1] + 1);
    double v16 = (v15 + v15) * *(double *)&v142;
    double v17 = (*((double *)&v142 + 1) + *((double *)&v142 + 1)) * v143;
    double v18 = *((double *)&v142 + 1) * (v15 + v15);
    double v19 = 1.0 - (v15 + v15) * v15;
    double v103 = 1.0 - (v13 + v14);
    double v104 = v17 + v16;
    *(double *)&long long v106 = v16 - v17;
    *((double *)&v106 + 1) = v19 - v14;
    double v20 = v143 * (v15 + v15);
    *(double *)&long long v108 = v143 * v12 + v18;
    *((double *)&v108 + 1) = v12 * *((double *)&v142 + 1) - v20;
    long long v105 = COERCE_UNSIGNED_INT64(v18 - v143 * v12);
    *(double *)&long long v107 = v20 + v12 * *((double *)&v142 + 1);
    double v109 = v19 - v13;
    *((void *)&v107 + 1) = 0;
    uint64_t v110 = 0;
    long long v111 = v141[0];
    *(void *)&long long v112 = *(void *)&v141[1];
    *((void *)&v112 + 1) = 0x3FF0000000000000;
    *(int64x2_t *)buf = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(_OWORD *)uint64_t v150 = xmmword_1A28FC720;
    *(int64x2_t *)&v150[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(void *)&v151.f64[0] = &unk_1EF57D5A8;
    *(void *)&v151.f64[1] = buf;
    double v152 = COERCE_DOUBLE(&v103);
    double v153 = COERCE_DOUBLE(&v151);
    double v21 = gm::Box<double,3>::forEachCorner((uint64_t)&v144, (uint64_t)&v151);
    if (*(float64x2_t **)&v153 == &v151)
    {
      (*(void (**)(float64x2_t *, double))(*(void *)&v151.f64[0] + 32))(&v151, v21);
    }
    else if (v153 != 0.0)
    {
      (*(void (**)(double, double))(**(void **)&v153 + 40))(COERCE_DOUBLE(*(void *)&v153), v21);
    }
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    double v103 = 0.0;
    double v104 = COERCE_DOUBLE(&unk_1EF568F68);
    double v109 = 0.0;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    int v121 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0xFFFFFFFFLL;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v122 = &unk_1EF568F68;
    uint64_t v127 = 0;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    uint64_t v135 = 0;
    uint64_t v136 = 0xFFFFFFFFLL;
    int v137 = 0;
    uint64_t v140 = 0;
    std::string __p = 0;
    int v139 = 0;
    float64x2_t v22 = vsubq_f64(*(float64x2_t *)&v150[8], *(float64x2_t *)buf);
    __asm { FMOV            V5.2D, #0.5 }
    float64x2_t v151 = vmlaq_f64(*(float64x2_t *)buf, _Q5, v22);
    double v152 = *(double *)v150 + (*(double *)&v150[24] - *(double *)v150) * 0.5;
    double v153 = sqrt(vaddvq_f64(vmulq_f64(v22, v22))+ (*(double *)&v150[24] - *(double *)v150) * (*(double *)&v150[24] - *(double *)v150))* 0.5;
    altitude::TriggerManager::cullTriggers(*(void *)(a1 + 120), (altitude::TriggerManager::Trigger **)&v103, &v151, *a2 + 1);
    char TriggerMetaData = altitude::C3mmRequestManager::loadTriggerMetaData(a1, (unint64_t *)&v103, a5);
    int v29 = (char *)__p;
    if (__p)
    {
      unsigned int v30 = __p;
      if (v139 != __p)
      {
        long long v100 = a2;
        uint64_t v31 = a5;
        uint64_t v32 = a3;
        uint64_t v33 = v139 - 240;
        uint64_t v34 = v139 - 240;
        int v35 = (void (***)(char *))(v139 - 240);
        do
        {
          char v36 = *v35;
          v35 -= 30;
          (*v36)(v34);
          v33 -= 240;
          _ZF = v34 == v29;
          uint64_t v34 = (char *)v35;
        }
        while (!_ZF);
        unsigned int v30 = __p;
        a3 = v32;
        a5 = v31;
        a2 = v100;
      }
      int v139 = v29;
      operator delete(v30);
    }
    altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)&v122);
    altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)&v104);
    if ((TriggerMetaData & 1) == 0)
    {
LABEL_87:
      BOOL v71 = 0;
      goto LABEL_99;
    }
  }
  if (*(void *)(a1 + 112) > (unint64_t)*(unsigned int *)(a1 + 164))
  {
    float v37 = *(unsigned int **)(a1 + 96);
    if (v37 != (unsigned int *)(a1 + 104))
    {
      while (1)
      {
        int v38 = *(_DWORD *)(a1 + 156);
        unsigned int v39 = atomic_load(v37 + 15);
        int v40 = v38 - v39;
        unsigned int v41 = v40 >= 0 ? v40 : -v40;
        unint64_t v42 = (unsigned int *)*((void *)v37 + 1);
        if (v41 >= 0x15) {
          break;
        }
        if (v42)
        {
          do
          {
            unint64_t v43 = v42;
            unint64_t v42 = *(unsigned int **)v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            unint64_t v43 = (unsigned int *)*((void *)v37 + 2);
            _ZF = *(void *)v43 == (void)v37;
            float v37 = v43;
          }
          while (!_ZF);
        }
        float v37 = v43;
        if (v43 == (unsigned int *)(a1 + 104)) {
          goto LABEL_40;
        }
      }
      if (v42)
      {
        do
        {
          unint64_t v44 = v42;
          unint64_t v42 = *(unsigned int **)v42;
        }
        while (v42);
      }
      else
      {
        char v45 = v37;
        do
        {
          unint64_t v44 = (unsigned int *)*((void *)v45 + 2);
          _ZF = *(void *)v44 == (void)v45;
          char v45 = v44;
        }
        while (!_ZF);
      }
      if (*(unsigned int **)(a1 + 96) == v37) {
        *(void *)(a1 + 96) = v44;
      }
      unint64_t v46 = *(uint64_t **)(a1 + 104);
      --*(void *)(a1 + 112);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v46, (uint64_t *)v37);
      unint64_t v47 = (std::__shared_weak_count *)*((void *)v37 + 6);
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      operator delete(v37);
    }
  }
LABEL_40:
  unsigned int v48 = *(_DWORD *)(a1 + 156) + 1;
  *(_DWORD *)(a1 + 156) = v48;
  uint64_t v49 = *(void *)(a1 + 144);
  unint64_t v52 = *(uint64_t **)(v49 + 56);
  uint64_t v50 = (uint64_t *)(v49 + 56);
  int v51 = v52;
  unsigned int v53 = *a2;
  if (!v52)
  {
    int v63 = 0;
    unsigned int v58 = a2[3];
    goto LABEL_60;
  }
  unsigned int v55 = a2[1];
  unsigned int v54 = a2[2];
  uint64_t v56 = v50;
  int v57 = v51;
  unsigned int v58 = a2[3];
  do
  {
    unsigned int v59 = *((_DWORD *)v57 + 8);
    if (v59 < v53)
    {
LABEL_42:
      ++v57;
      goto LABEL_43;
    }
    if (v59 > v53) {
      goto LABEL_46;
    }
    unsigned int v60 = *((_DWORD *)v57 + 9);
    if (v60 < v55) {
      goto LABEL_42;
    }
    if (v60 > v55) {
      goto LABEL_46;
    }
    unsigned int v61 = *((_DWORD *)v57 + 10);
    if (v61 < v54) {
      goto LABEL_42;
    }
    if (v61 > v54)
    {
LABEL_46:
      uint64_t v56 = v57;
    }
    else if (*((_DWORD *)v57 + 11) < v58)
    {
      ++v57;
    }
    else
    {
      uint64_t v56 = v57;
    }
LABEL_43:
    int v57 = (uint64_t *)*v57;
  }
  while (v57);
  if (v56 == v50
    || (unsigned int v62 = *((_DWORD *)v56 + 8), v53 < v62)
    || v53 <= v62
    && ((unsigned int v89 = *((_DWORD *)v56 + 9), v55 < v89)
     || v55 <= v89 && ((unsigned int v90 = *((_DWORD *)v56 + 10), v54 < v90) || v54 <= v90 && v58 < *((_DWORD *)v56 + 11))))
  {
    int v63 = 0;
  }
  else
  {
    int v63 = (uint64_t *)v56[6];
  }
LABEL_60:
  v10.n128_u64[0] = *(void *)(a2 + 1);
  while (2)
  {
    if (!v63)
    {
      if (!v53) {
        goto LABEL_87;
      }
      int v63 = 0;
      --v53;
      v10.n128_u64[0] = (unint64_t)vshr_n_u32((uint32x2_t)v10.n128_u64[0], 1uLL);
      v58 >>= 1;
      if (!v51) {
        continue;
      }
      unint64_t v64 = v50;
      int v63 = v51;
LABEL_68:
      unsigned int v65 = *((_DWORD *)v63 + 8);
      if (v65 >= v53)
      {
        if (v65 > v53) {
          goto LABEL_70;
        }
        unsigned int v66 = *((_DWORD *)v63 + 9);
        if (v66 >= v10.n128_u32[0])
        {
          if (v66 > v10.n128_u32[0]) {
            goto LABEL_70;
          }
          unsigned __int32 v67 = *((_DWORD *)v63 + 10);
          if (v67 >= v10.n128_u32[1])
          {
            if (v67 <= v10.n128_u32[1])
            {
              if (*((_DWORD *)v63 + 11) < v58) {
                ++v63;
              }
              else {
                unint64_t v64 = v63;
              }
LABEL_67:
              int v63 = (uint64_t *)*v63;
              if (!v63)
              {
                if (v64 != v50)
                {
                  int v63 = 0;
                  unsigned int v68 = *((_DWORD *)v64 + 8);
                  if (v53 >= v68)
                  {
                    if (v53 > v68
                      || (int v63 = 0, v69 = *((_DWORD *)v64 + 9), v10.n128_u32[0] >= v69)
                      && (v10.n128_u32[0] > v69
                       || (int v63 = 0, v70 = *((_DWORD *)v64 + 10), v10.n128_u32[1] >= v70)
                       && (v10.n128_u32[1] > v70 || (int v63 = 0, v58 >= *((_DWORD *)v64 + 11)))))
                    {
                      int v63 = (uint64_t *)v64[6];
                    }
                  }
                }
                continue;
              }
              goto LABEL_68;
            }
LABEL_70:
            unint64_t v64 = v63;
            goto LABEL_67;
          }
        }
      }
      ++v63;
      goto LABEL_67;
    }
    break;
  }
  uint64_t v72 = *(void *)(a1 + 104);
  if (!v72) {
    goto LABEL_98;
  }
  int v73 = *((_DWORD *)v63 + 42);
  uint64_t v74 = a1 + 104;
  do
  {
    int v75 = *(_DWORD *)(v72 + 32);
    BOOL v76 = v75 < v73;
    if (v75 >= v73) {
      unint64_t v77 = (uint64_t *)v72;
    }
    else {
      unint64_t v77 = (uint64_t *)(v72 + 8);
    }
    if (!v76) {
      uint64_t v74 = v72;
    }
    uint64_t v72 = *v77;
  }
  while (*v77);
  if (v74 == a1 + 104 || *(_DWORD *)(v74 + 32) > v73)
  {
LABEL_98:
    BOOL v71 = 1;
    goto LABEL_99;
  }
  atomic_store(v48, (unsigned int *)(v74 + 60));
  uint64_t v80 = *(void *)(v74 + 40);
  unint64_t v79 = *(std::__shared_weak_count **)(v74 + 48);
  uint64_t v102 = (unsigned __int16 *)v80;
  if (v79) {
    atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v80) {
    goto LABEL_124;
  }
  uint64_t v101 = a3;
  int v82 = *((_DWORD *)v63 + 42);
  int v81 = *((_DWORD *)v63 + 43);
  if (*(void *)(v80 + 120) == *(void *)(v80 + 128) && !*(unsigned char *)(v80 + 40)) {
    goto LABEL_122;
  }
  float64x2_t v151 = *(float64x2_t *)a2;
  v141[0] = 0uLL;
  LODWORD(v141[1]) = 1;
  WORD2(v141[1]) = 0;
  unint64_t Entry = karo::media::C3mmArea::getEntry((unsigned __int16 *)v80, &v151, (uint64_t)v141);
  unsigned int v85 = v84;
  unint64_t v147 = Entry;
  unsigned int v148 = v84;
  if (!Entry) {
    goto LABEL_123;
  }
  LODWORD(v104) = 0;
  long long v105 = 0uLL;
  HIDWORD(v103) = v82;
  unint64_t v86 = (std::mutex *)(v80 + 208);
  HIDWORD(v104) = v81;
  std::mutex::lock(v86);
  unsigned int v87 = *v102;
  std::mutex::unlock(v86);
  if (v87 < 2)
  {
    LODWORD(v104) = Entry;
    int v88 = 14;
  }
  else
  {
    *(void *)&long long v105 = Entry;
    *((void *)&v105 + 1) = v85;
    int v88 = 52;
  }
  LODWORD(v103) = v88;
  altitude::C3mmRequestManager::requestC3mmArea(&v144, (void *)a1, &v103, (uint64_t)v102, v79, (uint64_t *)&v147);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v144) == 4)
  {
    int v91 = karo::media::C3mmArea::getEntry(v102, &v151, (uint64_t)v141);
    uint64_t v144 = off_1EF5677B0;
    if (v145) {
      atomic_fetch_add((atomic_uint *volatile)(v145 + 128), 0xFFFFFFFF);
    }
    int v92 = v146;
    if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
    if (v91)
    {
LABEL_122:
      BOOL v71 = 0;
      goto LABEL_125;
    }
LABEL_123:
    __n128 v10 = (__n128)v141[0];
    *(_OWORD *)uint64_t v101 = v141[0];
    *(void *)(v101 + 14) = *(void *)((char *)v141 + 14);
LABEL_124:
    BOOL v71 = 1;
  }
  else
  {
    int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v144);
    BOOL v71 = Status == 0;
    if (Status)
    {
      if (a5)
      {
        uint64_t v94 = *(void *)(a5 + 8);
        if (v94) {
          atomic_fetch_add((atomic_uint *volatile)(v94 + 128), 0xFFFFFFFF);
        }
        uint64_t v95 = v145;
        uint64_t v96 = v146;
        if (v146) {
          atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v97 = *(std::__shared_weak_count **)(a5 + 16);
        *(void *)(a5 + 8) = v95;
        *(void *)(a5 + 16) = v96;
        if (v97)
        {
          if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
          uint64_t v95 = *(void *)(a5 + 8);
        }
        if (v95) {
          atomic_fetch_add((atomic_uint *volatile)(v95 + 128), 1u);
        }
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      unint64_t v98 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = DWORD1(v105);
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = DWORD2(v105);
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)uint64_t v150 = v105;
        _os_log_impl(&dword_1A1780000, v98, OS_LOG_TYPE_ERROR, "Failed to load %u %u %u", buf, 0x14u);
      }
    }
    uint64_t v144 = off_1EF5677B0;
    if (v145) {
      atomic_fetch_add((atomic_uint *volatile)(v145 + 128), 0xFFFFFFFF);
    }
    uint64_t v99 = v146;
    if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
LABEL_125:
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v79->__on_zero_shared)(v79, v10);
    std::__shared_weak_count::__release_weak(v79);
  }
LABEL_99:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 168));
  return v71;
}

void sub_1A1EBAFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)(v4 - 256));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 168));
  _Unwind_Resume(a1);
}

uint64_t altitude::C3mmRequestManager::loadTriggerMetaData(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 168));
  unint64_t v6 = *a2;
  if (*a2)
  {
    unint64_t v7 = 0;
    long long v108 = (unsigned int *)(v5 + 104);
    char v105 = 1;
    long long v106 = a2;
    uint64_t v110 = v5;
    uint64_t v104 = a3;
    while (1)
    {
      uint64_t v8 = v6 <= 2 ? (uint64_t)&a2[30 * v7 + 1] : a2[61] + 240 * v7;
      int v9 = *(_DWORD *)(v8 + 228);
      __n128 v10 = v108;
      uint64_t v11 = *(void *)v108;
      uint64_t v12 = *(void *)v108;
      uint64_t v109 = v8;
      if (*(void *)v108)
      {
        do
        {
          int v13 = *(_DWORD *)(v12 + 32);
          BOOL v14 = v13 < v9;
          if (v13 >= v9) {
            double v15 = (uint64_t *)v12;
          }
          else {
            double v15 = (uint64_t *)(v12 + 8);
          }
          if (!v14) {
            __n128 v10 = (unsigned int *)v12;
          }
          uint64_t v12 = *v15;
        }
        while (*v15);
        if (v10 != v108 && (int)v10[8] <= v9)
        {
          atomic_store(*(_DWORD *)(v5 + 156), v10 + 15);
          uint64_t v11 = *(void *)(v5 + 104);
          int v9 = *(_DWORD *)(v8 + 228);
        }
        if (v11)
        {
          double v16 = v108;
          do
          {
            int v17 = *(_DWORD *)(v11 + 32);
            BOOL v18 = v17 < v9;
            if (v17 >= v9) {
              double v19 = (uint64_t *)v11;
            }
            else {
              double v19 = (uint64_t *)(v11 + 8);
            }
            if (!v18) {
              double v16 = (unsigned int *)v11;
            }
            uint64_t v11 = *v19;
          }
          while (*v19);
          if (v16 != v108 && (int)v16[8] <= v9) {
            break;
          }
        }
      }
      long long v116 = 0;
      long long v117 = 0;
      if (v9) {
        goto LABEL_28;
      }
LABEL_3:
      ++v7;
      unint64_t v6 = *a2;
      if (v7 >= *a2) {
        goto LABEL_175;
      }
    }
    atomic_store(*(_DWORD *)(v5 + 156), v16 + 15);
    double v21 = (unsigned __int16 *)*((void *)v16 + 5);
    float64x2_t v22 = (std::__shared_weak_count *)*((void *)v16 + 6);
    long long v116 = v21;
    long long v117 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v23 = *(_DWORD *)(v8 + 228);
    if (!v23) {
      goto LABEL_171;
    }
    if (!v21)
    {
LABEL_28:
      double v20 = (char *)operator new(0x128uLL);
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      *(void *)double v20 = &unk_1EF58A970;
      *(_OWORD *)(v20 + 40) = 0u;
      *(_OWORD *)(v20 + 56) = 0u;
      *(_OWORD *)(v20 + 72) = 0u;
      *(_OWORD *)(v20 + 88) = 0u;
      *(_OWORD *)(v20 + 104) = 0u;
      *(_OWORD *)(v20 + 120) = 0u;
      *(_OWORD *)(v20 + 136) = 0u;
      *(_OWORD *)(v20 + 152) = 0u;
      *(_OWORD *)(v20 + 168) = 0u;
      *(_OWORD *)(v20 + 184) = 0u;
      *(_OWORD *)(v20 + 200) = 0u;
      *(_OWORD *)(v20 + 216) = 0u;
      *(_OWORD *)(v20 + 232) = 0u;
      *(_OWORD *)(v20 + 248) = 0u;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_OWORD *)(v20 + 264) = 0u;
      *(_OWORD *)(v20 + 280) = 0u;
      *((_DWORD *)v20 + 8) = 1140850688;
      *((void *)v20 + 7) = 0;
      *((void *)v20 + 6) = 0;
      *((void *)v20 + 5) = v20 + 48;
      *(_OWORD *)(v20 + 68) = 0u;
      *(_OWORD *)(v20 + 84) = 0u;
      *(_OWORD *)(v20 + 100) = 0u;
      *(void *)(v20 + 116) = 0x186A000000000;
      *((void *)v20 + 23) = 0;
      *((void *)v20 + 22) = 0;
      *((_OWORD *)v20 + 8) = 0u;
      *((_OWORD *)v20 + 9) = 0u;
      *((void *)v20 + 20) = 0;
      *((void *)v20 + 21) = v20 + 176;
      pthread_mutexattr_init(&v119);
      pthread_mutexattr_settype(&v119, 2);
      operator new();
    }
    if (*((unsigned char *)v21 + 40))
    {
LABEL_171:
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      goto LABEL_3;
    }
    unsigned int v115 = 0;
    uint64_t v114 = 0;
    int v24 = *(_DWORD *)(v8 + 232);
    pthread_mutexattr_t v119 = (pthread_mutexattr_t)0;
    long long v120 = 0u;
    HIDWORD(v119.__sig) = v23;
    *(_DWORD *)&v119.__opaque[4] = v24;
    BOOL v25 = (std::mutex *)(v21 + 104);
    std::mutex::lock((std::mutex *)(v21 + 104));
    unsigned int v26 = *v116;
    std::mutex::unlock(v25);
    unint64_t v107 = v7;
    if (v26 < 2)
    {
      *(_DWORD *)v119.__opaque = v114;
      int v27 = 14;
    }
    else
    {
      *(void *)&long long v120 = v114;
      *((void *)&v120 + 1) = v115;
      int v27 = 52;
    }
    LODWORD(v119.__sig) = v27;
    uint64_t v28 = v116;
    altitude::C3mmRequestManager::requestC3mmArea(&v111, (void *)v5, &v119, (uint64_t)v116, v117, &v114);
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v111) == 4)
    {
      uint64_t v29 = *(void *)(v8 + 72);
      *((_DWORD *)v28 + 2) = *(_DWORD *)(v29 + 20);
      uint64_t v30 = *(void *)(v5 + 144);
      if ((_DWORD *)(v30 + 176) == std::__tree<altitude::TileKey>::find<altitude::TileKey>(v30 + 168, (unsigned int *)&v119))
      {
        uint64_t v31 = *(void *)(v5 + 128);
        if (v31)
        {
          *((void *)v28 + 22) = *(void *)(v109 + 228);
          uint64_t v32 = (char *)(v28 + 88);
          uint64_t i = (std::mutex *)(v31 + 104);
          std::mutex::lock((std::mutex *)(v31 + 104));
          if (*((void *)v28 + 24) != *((void *)v28 + 23))
          {
            int v35 = (uint64_t **)(v31 + 88);
            uint64_t v34 = *(char **)(v31 + 88);
            int v36 = *(_DWORD *)v32;
            if (v34)
            {
              while (1)
              {
                while (1)
                {
                  float v37 = v34;
                  int v42 = *((_DWORD *)v34 + 8);
                  if (v36 >= v42) {
                    break;
                  }
                  uint64_t v34 = *(char **)v37;
                  int v35 = (uint64_t **)v37;
                  if (!*(void *)v37) {
                    goto LABEL_60;
                  }
                }
                if (v42 >= v36) {
                  break;
                }
                uint64_t v34 = (char *)*((void *)v37 + 1);
                if (!v34)
                {
                  int v35 = (uint64_t **)(v37 + 8);
                  goto LABEL_60;
                }
              }
            }
            else
            {
              float v37 = (char *)(v31 + 88);
LABEL_60:
              unint64_t v43 = v37;
              float v37 = (char *)operator new(0x48uLL);
              *((_DWORD *)v37 + 8) = v36;
              *((void *)v37 + 5) = -1;
              *((void *)v37 + 7) = 0;
              *((void *)v37 + 8) = 0;
              *((void *)v37 + 6) = 0;
              *(void *)float v37 = 0;
              *((void *)v37 + 1) = 0;
              *((void *)v37 + 2) = v43;
              *int v35 = (uint64_t *)v37;
              uint64_t v44 = **(void **)(v31 + 80);
              char v45 = (uint64_t *)v37;
              if (v44)
              {
                *(void *)(v31 + 80) = v44;
                char v45 = *v35;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v31 + 88), v45);
              ++*(void *)(v31 + 96);
            }
            *((void *)v37 + 5) = *(void *)v32;
            if (v37 + 40 != v32)
            {
              double v103 = (std::mutex *)(v31 + 104);
              unint64_t v46 = (void **)(v37 + 48);
              unint64_t v47 = (char *)*((void *)v37 + 6);
              unsigned int v48 = (char *)*((void *)v28 + 23);
              uint64_t v49 = (char *)*((void *)v28 + 24);
              unint64_t v50 = (v49 - v48) >> 4;
              uint64_t v51 = *((void *)v37 + 8);
              if (v50 <= (v51 - (uint64_t)v47) >> 4)
              {
                int v57 = (char *)*((void *)v37 + 7);
                unint64_t v58 = (v57 - v47) >> 4;
                if (v58 >= v50)
                {
                  if (v48 != v49)
                  {
                    do
                    {
                      uint64_t v64 = *(void *)v48;
                      uint64_t v63 = *((void *)v48 + 1);
                      if (v63) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
                      }
                      unsigned int v65 = (std::__shared_weak_count *)*((void *)v47 + 1);
                      *(void *)unint64_t v47 = v64;
                      *((void *)v47 + 1) = v63;
                      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                        std::__shared_weak_count::__release_weak(v65);
                      }
                      v47 += 16;
                      v48 += 16;
                    }
                    while (v48 != v49);
                    int v57 = (char *)*((void *)v37 + 7);
                  }
                  for (uint64_t i = v103; v57 != v47; v57 -= 16)
                  {
                    unint64_t v93 = (std::__shared_weak_count *)*((void *)v57 - 1);
                    if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  *((void *)v37 + 7) = v47;
                }
                else
                {
                  unsigned int v59 = &v48[16 * v58];
                  if (v57 != v47)
                  {
                    do
                    {
                      uint64_t v61 = *(void *)v48;
                      uint64_t v60 = *((void *)v48 + 1);
                      if (v60) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
                      }
                      unsigned int v62 = (std::__shared_weak_count *)*((void *)v47 + 1);
                      *(void *)unint64_t v47 = v61;
                      *((void *)v47 + 1) = v60;
                      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                      v48 += 16;
                      v47 += 16;
                    }
                    while (v48 != v59);
                    unint64_t v47 = (char *)*((void *)v37 + 7);
                  }
                  uint64_t v72 = v47;
                  uint64_t i = v103;
                  if (v59 != v49)
                  {
                    uint64_t v72 = v47;
                    do
                    {
                      *(void *)uint64_t v72 = *(void *)v59;
                      uint64_t v73 = *((void *)v59 + 1);
                      *((void *)v72 + 1) = v73;
                      if (v73) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
                      }
                      v72 += 16;
                      v59 += 16;
                    }
                    while (v59 != v49);
                  }
                  *((void *)v37 + 7) = v72;
                }
              }
              else
              {
                if (v47)
                {
                  unint64_t v52 = (char *)*((void *)v37 + 7);
                  unsigned int v53 = (void *)*((void *)v37 + 6);
                  if (v52 != v47)
                  {
                    do
                    {
                      unsigned int v54 = (std::__shared_weak_count *)*((void *)v52 - 1);
                      if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                      v52 -= 16;
                    }
                    while (v52 != v47);
                    unsigned int v53 = *v46;
                  }
                  *((void *)v37 + 7) = v47;
                  operator delete(v53);
                  uint64_t v51 = 0;
                  *unint64_t v46 = 0;
                  *((void *)v37 + 7) = 0;
                  *((void *)v37 + 8) = 0;
                }
                if (v49 - v48 < 0) {
                  goto LABEL_176;
                }
                uint64_t v66 = v51 >> 3;
                if (v51 >> 3 <= v50) {
                  uint64_t v66 = (v49 - v48) >> 4;
                }
                BOOL v67 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0;
                unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
                if (!v67) {
                  unint64_t v68 = v66;
                }
                if (v68 >> 60) {
LABEL_176:
                }
                  abort();
                uint64_t v69 = 2 * v68;
                unsigned __int32 v70 = operator new(16 * v68);
                *((void *)v37 + 6) = v70;
                *((void *)v37 + 7) = v70;
                *((void *)v37 + 8) = &v70[v69];
                while (v48 != v49)
                {
                  void *v70 = *(void *)v48;
                  uint64_t v71 = *((void *)v48 + 1);
                  v70[1] = v71;
                  if (v71) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
                  }
                  v70 += 2;
                  v48 += 16;
                }
                *((void *)v37 + 7) = v70;
                uint64_t i = (std::mutex *)(v31 + 104);
              }
            }
          }
          std::mutex::unlock(i);
          uint64_t v28 = v116;
        }
        uint64_t v74 = (unsigned __int16 *)*((void *)v28 + 2);
        if (v74 != v28 + 12)
        {
          do
          {
            uint64_t v75 = *(void *)(v74 + 14);
            unsigned int v76 = *((_DWORD *)v74 + 9);
            *(void *)&long long buf = v75;
            *((void *)&buf + 1) = v76;
            uint64_t v77 = *(void *)(v110 + 144);
            uint64_t v80 = *(uint64_t **)(v77 + 56);
            unint64_t v78 = (uint64_t *)(v77 + 56);
            unint64_t v79 = v80;
            if (!v80) {
              goto LABEL_149;
            }
            unsigned int v81 = HIDWORD(v75);
            unsigned int v82 = v75;
            unsigned int v83 = v78;
            do
            {
              while (1)
              {
                unsigned int v84 = *((_DWORD *)v79 + 8);
                if (v84 >= v82)
                {
                  if (v84 > v82) {
                    break;
                  }
                  unsigned int v85 = *((_DWORD *)v79 + 9);
                  if (v85 >= v81 && (v85 > v81 || *((_DWORD *)v79 + 10) >= v76)) {
                    break;
                  }
                }
                unint64_t v79 = (uint64_t *)v79[1];
                if (!v79) {
                  goto LABEL_137;
                }
              }
              unsigned int v83 = v79;
              unint64_t v79 = (uint64_t *)*v79;
            }
            while (v79);
LABEL_137:
            if (v83 == v78
              || (unsigned int v86 = *((_DWORD *)v83 + 8), v82 < v86)
              || v82 <= v86
              && ((unsigned int v87 = *((_DWORD *)v83 + 9), v81 < v87)
               || v81 <= v87 && ((unsigned int v90 = *((_DWORD *)v83 + 10), v76 < v90) || v76 <= v90 && *((_DWORD *)v83 + 11)))
              || (uint64_t v88 = v83[6]) == 0
              || *(_DWORD *)(v88 + 24) < *(_DWORD *)(v29 + 16))
            {
LABEL_149:
              operator new();
            }
            unsigned int v89 = (unsigned __int16 *)*((void *)v74 + 1);
            if (v89)
            {
              do
              {
                int v91 = v89;
                unsigned int v89 = *(unsigned __int16 **)v89;
              }
              while (v89);
            }
            else
            {
              do
              {
                int v91 = (unsigned __int16 *)*((void *)v74 + 2);
                BOOL v92 = *(void *)v91 == (void)v74;
                uint64_t v74 = v91;
              }
              while (!v92);
            }
            uint64_t v74 = v91;
          }
          while (v91 != v28 + 12);
        }
        uint64_t v5 = v110;
        uint64_t v94 = *(void *)(v110 + 144);
        uint64_t v95 = (void **)(v94 + 168);
        uint64_t v96 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(v94 + 168, &buf, (unsigned int *)&v119);
        a3 = v104;
        if (!*v96)
        {
          unint64_t v97 = v96;
          unint64_t v98 = (char *)operator new(0x40uLL);
          *(pthread_mutexattr_t *)(v98 + 28) = v119;
          *(_OWORD *)(v98 + 44) = v120;
          uint64_t v99 = buf;
          *(void *)unint64_t v98 = 0;
          *((void *)v98 + 1) = 0;
          *((void *)v98 + 2) = v99;
          uint64_t *v97 = (uint64_t)v98;
          long long v100 = (void *)**v95;
          if (v100)
          {
            *uint64_t v95 = v100;
            unint64_t v98 = (char *)*v97;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v94 + 176), (uint64_t *)v98);
          ++*(void *)(v94 + 184);
        }
        *((unsigned char *)v28 + 40) = 1;
      }
    }
    else
    {
      if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v111))
      {
        *((unsigned char *)v28 + 40) = 1;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        unsigned int v55 = (id)GEOGetVectorKitVKDefaultLog_log;
        a2 = v106;
        unint64_t v7 = v107;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = (void *)(v8 + 128);
          if (*(char *)(v8 + 151) < 0) {
            uint64_t v56 = (void *)*v56;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v56;
          _os_log_impl(&dword_1A1780000, v55, OS_LOG_TYPE_ERROR, "Failed to load file %s", (uint8_t *)&buf, 0xCu);
        }

        goto LABEL_165;
      }
      if (a3)
      {
        uint64_t v38 = *(void *)(a3 + 8);
        a2 = v106;
        unint64_t v7 = v107;
        if (v38) {
          atomic_fetch_add((atomic_uint *volatile)(v38 + 128), 0xFFFFFFFF);
        }
        uint64_t v39 = v112;
        int v40 = v113;
        if (v113) {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v41 = *(std::__shared_weak_count **)(a3 + 16);
        *(void *)(a3 + 8) = v39;
        *(void *)(a3 + 16) = v40;
        if (v41)
        {
          if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          uint64_t v39 = *(void *)(a3 + 8);
        }
        char v105 = 0;
        if (v39) {
          atomic_fetch_add((atomic_uint *volatile)(v39 + 128), 1u);
        }
        goto LABEL_165;
      }
      char v105 = 0;
    }
    a2 = v106;
    unint64_t v7 = v107;
LABEL_165:
    long long v111 = off_1EF5677B0;
    if (v112) {
      atomic_fetch_add((atomic_uint *volatile)(v112 + 128), 0xFFFFFFFF);
    }
    uint64_t v101 = v113;
    if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
    float64x2_t v22 = v117;
    goto LABEL_171;
  }
  char v105 = 1;
LABEL_175:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 168));
  return v105 & 1;
}

void sub_1A1EBC144(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)(v1 - 200));
  uint64_t v3 = *(void *)(v1 - 208);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 168));
  _Unwind_Resume(a1);
}

void *karo::SizedArray<altitude::TriggerManager::Trigger,2>::~SizedArray(void *a1)
{
  BOOL v2 = (void (***)(void))a1[61];
  if (v2)
  {
    uint64_t v3 = (void (***)(void))a1[62];
    uint64_t v4 = (void *)a1[61];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 30;
      unint64_t v6 = v3 - 30;
      unint64_t v7 = v3 - 30;
      do
      {
        uint64_t v8 = *v7;
        v7 -= 30;
        (*v8)(v6);
        v5 -= 30;
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = (void *)a1[61];
    }
    a1[62] = v2;
    operator delete(v4);
  }
  altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)(a1 + 31));
  altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)(a1 + 1));
  return a1;
}

void std::vector<karo::media::C3mmLevel>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(_DWORD **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x1555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v11 = (char *)operator new(12 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int v13 = &v11[12 * v7];
    BOOL v14 = &v11[12 * v10];
    size_t v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    double v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        uint64_t v17 = *(void *)(v5 - 3);
        v5 -= 3;
        int v18 = v5[2];
        *(void *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      uint64_t v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

_DWORD *std::__tree<altitude::TileKey>::find<altitude::TileKey>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  BOOL v2 = (_DWORD *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v6 = a2[4];
  unsigned int v5 = a2[5];
  unsigned int v8 = a2[6];
  unsigned int v7 = a2[7];
  unsigned int v10 = *a2;
  unsigned int v9 = a2[1];
  uint64_t v11 = v2;
  unsigned int v12 = a2[2];
  do
  {
    while (1)
    {
      unsigned int v13 = *((_DWORD *)v3 + 11);
      if (v13 == v6 && *((_DWORD *)v3 + 12) == v5 && *((_DWORD *)v3 + 13) == v8 && v7 == *((_DWORD *)v3 + 14)) {
        break;
      }
      if (v13 < v6) {
        goto LABEL_3;
      }
      if (v13 > v6) {
        goto LABEL_21;
      }
      unsigned int v17 = *((_DWORD *)v3 + 12);
      if (v17 < v5) {
        goto LABEL_3;
      }
      if (v17 > v5) {
        goto LABEL_21;
      }
      unsigned int v18 = *((_DWORD *)v3 + 13);
      if (v18 < v8) {
        goto LABEL_3;
      }
      if (v18 > v8) {
        goto LABEL_21;
      }
      BOOL v15 = *((_DWORD *)v3 + 14) >= v7;
LABEL_19:
      if (v15) {
        goto LABEL_21;
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_22;
      }
    }
    unsigned int v14 = *((_DWORD *)v3 + 7);
    BOOL v15 = v14 >= v10;
    if (v14 != v10) {
      goto LABEL_19;
    }
    unsigned int v16 = *((_DWORD *)v3 + 8);
    BOOL v15 = v16 >= v9;
    if (v16 != v9) {
      goto LABEL_19;
    }
    if (*((_DWORD *)v3 + 9) < v12) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v11 = v3;
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_22:
  if (v11 == v2) {
    return v2;
  }
  unsigned int v19 = v11[11];
  if (v6 != v19 || v5 != v11[12] || v8 != v11[13] || v11[14] != v7)
  {
    if (v6 < v19) {
      return v2;
    }
    if (v6 > v19) {
      return v11;
    }
    unsigned int v23 = v11[12];
    if (v5 < v23) {
      return v2;
    }
    if (v5 > v23) {
      return v11;
    }
    unsigned int v24 = v11[13];
    if (v8 < v24) {
      return v2;
    }
    if (v8 > v24) {
      return v11;
    }
    BOOL v21 = v7 >= v11[14];
    goto LABEL_38;
  }
  unsigned int v20 = v11[7];
  BOOL v21 = v10 >= v20;
  if (v10 != v20 || (unsigned int v22 = v11[8], v21 = v9 >= v22, v9 != v22))
  {
LABEL_38:
    if (!v21) {
      return v2;
    }
    return v11;
  }
  if (v12 >= v11[9]) {
    return v11;
  }
  return v2;
}

void std::__shared_ptr_emplace<karo::media::C3mmArea>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  uint64_t v2 = *(void *)(a1 + 208);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 216);
    uint64_t v4 = *(void **)(a1 + 208);
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 208);
    }
    *(void *)(a1 + 216) = v2;
    operator delete(v4);
  }
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 192));
  uint64_t v6 = *(void *)(a1 + 192);
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x1000C40FA0F61DDLL);
  }
  *(void *)(a1 + 192) = 0;
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*(void **)(a1 + 176));
  unsigned int v7 = *(void **)(a1 + 144);
  if (v7)
  {
    *(void *)(a1 + 152) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 104);
    unsigned int v10 = *(void **)(a1 + 96);
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(void *)(v9 - 16) = v11;
          operator delete(v11);
        }
        v9 -= 32;
      }
      while (v9 != v8);
      unsigned int v10 = *(void **)(a1 + 96);
    }
    *(void *)(a1 + 104) = v8;
    operator delete(v10);
  }
  unsigned int v12 = *(void **)(a1 + 72);
  if (v12)
  {
    *(void *)(a1 + 80) = v12;
    operator delete(v12);
  }
  unsigned int v13 = *(void **)(a1 + 48);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v13);
}

void std::__shared_ptr_emplace<karo::media::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<NSLocale * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559EF8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSLocale * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559EF8;

  return a1;
}

md::LabelValueFormatter *md::LabelValueFormatter::LabelValueFormatter(md::LabelValueFormatter *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = &unk_1EF559EF8;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  uint64_t v2 = [MEMORY[0x1E4F1CA20] currentLocale];
  *(unsigned char *)this = [v2 usesMetricSystem];

  return this;
}

void sub_1A1EBCB08(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void md::LabelValueFormatter::formatElevation(void *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6)
{
  v17[0] = a4;
  v17[1] = a5;
  id v10 = objc_alloc(MEMORY[0x1E4F28E28]);
  uint64_t v11 = [MEMORY[0x1E4F291E0] meters];
  unsigned int v16 = (void *)[v10 initWithDoubleValue:v11 unit:a6];

  int v12 = *a2;
  id v13 = v16;
  if (!v12)
  {
    unsigned int v14 = [MEMORY[0x1E4F291E0] feet];
    uint64_t v15 = [v13 measurementByConvertingToUnit:v14];

    id v13 = (id)v15;
  }
  md::LabelValueFormatter::FormatMeasurement(a1, (uint64_t)a2, v13, a3, 1, (int *)v17);
}

void sub_1A1EBCC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A1EBCC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LabelValueFormatter::FormatMeasurement(void *a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, int *a6)
{
  id v30 = a3;
  if (a4 == 1)
  {
    id v11 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
    int v12 = v11;
    if (*(void *)(a2 + 16)) {
      objc_msgSend(v11, "setLocale:");
    }
    if (*((unsigned char *)a6 + 4)) {
      [v12 setMinimumFractionDigits:*a6];
    }
    [v12 setMaximumFractionDigits:a6[2]];
    [v12 setNumberStyle:1];
    if (!*((unsigned char *)a6 + 12)) {
      [v12 setUsesGroupingSeparator:0];
    }
    id v13 = NSNumber;
    [v30 doubleValue];
    unsigned int v14 = objc_msgSend(v13, "numberWithDouble:");
    uint64_t v15 = [v12 stringFromNumber:v14];

    if (v15)
    {
LABEL_9:
      unsigned int v16 = (const char *)[v15 UTF8String];
      goto LABEL_21;
    }
  }
  else
  {
    id v17 = objc_alloc_init(MEMORY[0x1E4F28E30]);
    unsigned int v18 = v17;
    if (*(void *)(a2 + 16)) {
      objc_msgSend(v17, "setLocale:");
    }
    [v18 setUnitOptions:a5];
    if (a4 > 4) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = qword_1A29001A0[(char)a4];
    }
    [v18 setUnitStyle:v19];
    if (*((unsigned char *)a6 + 4))
    {
      uint64_t v20 = *a6;
      BOOL v21 = [v18 numberFormatter];
      [v21 setMinimumFractionDigits:v20];
    }
    uint64_t v22 = a6[2];
    unsigned int v23 = [v18 numberFormatter];
    [v23 setMaximumFractionDigits:v22];

    if (!*((unsigned char *)a6 + 12))
    {
      unsigned int v24 = [v18 numberFormatter];
      [v24 setUsesGroupingSeparator:0];
    }
    uint64_t v15 = [v18 stringFromMeasurement:v30];

    if (v15) {
      goto LABEL_9;
    }
  }
  unsigned int v16 = "";
LABEL_21:
  size_t v25 = strlen(v16);
  if (v25 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v26 = v25;
  if (v25 >= 0x17)
  {
    uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v27 = v25 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v29 = operator new(v27 + 1);
    a1[1] = v26;
    a1[2] = v28 | 0x8000000000000000;
    *a1 = v29;
    a1 = v29;
    goto LABEL_28;
  }
  *((unsigned char *)a1 + 23) = v25;
  if (v25) {
LABEL_28:
  }
    memmove(a1, v16, v26);
  *((unsigned char *)a1 + v26) = 0;
}

void sub_1A1EBCF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<NSMeasurement * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559538;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSMeasurement * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559538;

  return a1;
}

void md::LabelValueFormatter::formatDateTime(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, double a5)
{
  id v10 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  id v21 = v10;
  if (*(void *)(a2 + 16)) {
    objc_msgSend(v10, "setLocale:");
  }
  if (*(void *)(a2 + 32)) {
    objc_msgSend(v21, "setTimeZone:");
  }
  if (a3 > 4) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = qword_1A29001C8[a3];
  }
  [v21 setDateStyle:v11];
  if (a4 > 4) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = qword_1A29001C8[a4];
  }
  [v21 setTimeStyle:v12];
  id v13 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a5 * 60.0];
  unsigned int v14 = [v21 stringFromDate:v13];

  if (v14) {
    uint64_t v15 = (const char *)[v14 UTF8String];
  }
  else {
    uint64_t v15 = "";
  }
  size_t v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v20 = operator new(v18 + 1);
    a1[1] = v17;
    a1[2] = v19 | 0x8000000000000000;
    *a1 = v20;
    a1 = v20;
    goto LABEL_21;
  }
  *((unsigned char *)a1 + 23) = v16;
  if (v16) {
LABEL_21:
  }
    memmove(a1, v15, v17);
  *((unsigned char *)a1 + v17) = 0;
}

void sub_1A1EBD1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::layout2DBuildings(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v479 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(a4 + 8);
  int8x8_t v9 = (int8x8_t)v8[1];
  if (!*(void *)&v9) {
    goto LABEL_26;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x401D4CCE847AB1D1;
    if (*(void *)&v9 <= 0x401D4CCE847AB1D1uLL) {
      uint64_t v11 = 0x401D4CCE847AB1D1uLL % *(void *)&v9;
    }
  }
  else
  {
    uint64_t v11 = (*(void *)&v9 - 1) & 0x401D4CCE847AB1D1;
  }
  uint64_t v12 = *(void **)(*v8 + 8 * v11);
  if (!v12) {
    goto LABEL_26;
  }
  id v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_26;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x401D4CCE847AB1D1)
      {
        if (v13[2] == 0x401D4CCE847AB1D1) {
          goto LABEL_22;
        }
      }
      else if ((v15 & (*(void *)&v9 - 1)) != v11)
      {
        goto LABEL_26;
      }
      id v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == 0x401D4CCE847AB1D1) {
      break;
    }
    if (v14 >= *(void *)&v9) {
      v14 %= *(void *)&v9;
    }
    if (v14 != v11) {
      goto LABEL_26;
    }
LABEL_11:
    id v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_26;
    }
  }
  if (v13[2] != 0x401D4CCE847AB1D1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v16 = v13[5];
  if (*(void *)(v16 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v17 = *(void *)(v16 + 32);
    if (v17)
    {
      if (*(unsigned char *)(v17 + 16))
      {
        uint64_t v419 = *(void *)(v17 + 8);
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  uint64_t v419 = 0;
LABEL_27:
  if (a5 != 1 || v419)
  {
    uint64_t v19 = *a2;
    uint64_t v18 = a2[1];
    if (v18 != *a2)
    {
      if (!*(void *)&v9) {
        goto LABEL_53;
      }
      uint8x8_t v20 = (uint8x8_t)vcnt_s8(v9);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        uint64_t v21 = 0x1AF456233693CD46;
        if (*(void *)&v9 <= 0x1AF456233693CD46uLL) {
          uint64_t v21 = 0x1AF456233693CD46uLL % *(void *)&v9;
        }
      }
      else
      {
        uint64_t v21 = (*(void *)&v9 - 1) & 0x1AF456233693CD46;
      }
      uint64_t v22 = *(void **)(*v8 + 8 * v21);
      if (!v22) {
        goto LABEL_53;
      }
      unsigned int v23 = (void *)*v22;
      if (!v23) {
        goto LABEL_53;
      }
      if (v20.u32[0] < 2uLL)
      {
        uint64_t v24 = *(void *)&v9 - 1;
        while (1)
        {
          uint64_t v26 = v23[1];
          if (v26 == 0x1AF456233693CD46)
          {
            if (v23[2] == 0x1AF456233693CD46) {
              goto LABEL_51;
            }
          }
          else if ((v26 & v24) != v21)
          {
            goto LABEL_53;
          }
          unsigned int v23 = (void *)*v23;
          if (!v23) {
            goto LABEL_53;
          }
        }
      }
      while (1)
      {
        unint64_t v25 = v23[1];
        if (v25 == 0x1AF456233693CD46) {
          break;
        }
        if (v25 >= *(void *)&v9) {
          v25 %= *(void *)&v9;
        }
        if (v25 != v21) {
          goto LABEL_53;
        }
LABEL_40:
        unsigned int v23 = (void *)*v23;
        if (!v23) {
          goto LABEL_53;
        }
      }
      if (v23[2] != 0x1AF456233693CD46) {
        goto LABEL_40;
      }
LABEL_51:
      uint64_t v27 = v23[5];
      if (*(void *)(v27 + 8) != 0x1AF456233693CD46)
      {
LABEL_53:
        uint64_t v427 = 0;
        goto LABEL_54;
      }
      uint64_t v427 = *(void *)(v27 + 32);
LABEL_54:
      float v28 = 0.0;
      float v29 = 3.4028e38;
      do
      {
        uint64_t v30 = *(void *)(*v19 + 384);
        uint64_t v31 = *(uint64_t **)(v30 + 720);
        for (uint64_t i = *(uint64_t **)(v30 + 728); v31 != i; v31 += 3)
        {
          uint64_t v33 = *v31;
          uint64_t v34 = v31[1];
          if (*v31 != v34)
          {
            do
            {
              id v35 = *(id *)(v33 + 8);
              float v29 = fminf(*(float *)([v35 origin] + 8), v29);
              float v28 = fmaxf(v28, *(float *)([v35 maxPoint] + 8));

              v33 += 24;
            }
            while (v33 != v34);
          }
        }
        ++v19;
      }
      while (v19 != v18);
      int v36 = *(uint64_t **)(a4 + 8);
      int8x8_t v37 = (int8x8_t)v36[1];
      if (!*(void *)&v37)
      {
        uint64_t v414 = 0;
        unsigned int v41 = 0;
        uint64_t v39 = a1;
        goto LABEL_109;
      }
      uint8x8_t v38 = (uint8x8_t)vcnt_s8(v37);
      v38.i16[0] = vaddlv_u8(v38);
      uint64_t v39 = a1;
      if (v38.u32[0] > 1uLL)
      {
        uint64_t v40 = 0x4927EB92E562CC46;
        if (*(void *)&v37 <= 0x4927EB92E562CC46uLL) {
          uint64_t v40 = 0x4927EB92E562CC46uLL % *(void *)&v37;
        }
      }
      else
      {
        uint64_t v40 = (*(void *)&v37 - 1) & 0x4927EB92E562CC46;
      }
      uint64_t v42 = *v36;
      unint64_t v43 = *(void **)(v42 + 8 * v40);
      if (!v43) {
        goto LABEL_85;
      }
      uint64_t v44 = (void *)*v43;
      if (!v44) {
        goto LABEL_85;
      }
      if (v38.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v46 = v44[1];
          if (v46 == 0x4927EB92E562CC46)
          {
            if (v44[2] == 0x4927EB92E562CC46) {
              goto LABEL_83;
            }
          }
          else if ((v46 & (*(void *)&v37 - 1)) != v40)
          {
            goto LABEL_85;
          }
          uint64_t v44 = (void *)*v44;
          if (!v44) {
            goto LABEL_85;
          }
        }
      }
      while (2)
      {
        unint64_t v45 = v44[1];
        if (v45 != 0x4927EB92E562CC46)
        {
          if (v45 >= *(void *)&v37) {
            v45 %= *(void *)&v37;
          }
          if (v45 != v40) {
            goto LABEL_85;
          }
          goto LABEL_72;
        }
        if (v44[2] != 0x4927EB92E562CC46)
        {
LABEL_72:
          uint64_t v44 = (void *)*v44;
          if (!v44) {
            goto LABEL_85;
          }
          continue;
        }
        break;
      }
LABEL_83:
      uint64_t v47 = v44[5];
      if (*(void *)(v47 + 8) == 0x4927EB92E562CC46)
      {
        uint64_t v414 = *(void *)(v47 + 32);
        goto LABEL_86;
      }
LABEL_85:
      uint64_t v414 = 0;
LABEL_86:
      if (v38.u32[0] > 1uLL)
      {
        unint64_t v48 = 0xA60DDA5A69582425;
        if (*(void *)&v37 <= 0xA60DDA5A69582425) {
          unint64_t v48 = 0xA60DDA5A69582425 % *(void *)&v37;
        }
      }
      else
      {
        unint64_t v48 = (*(void *)&v37 - 1) & 0xA60DDA5A69582425;
      }
      uint64_t v49 = *(void **)(v42 + 8 * v48);
      if (!v49) {
        goto LABEL_108;
      }
      unint64_t v50 = (void *)*v49;
      if (!v50) {
        goto LABEL_108;
      }
      if (v38.u32[0] < 2uLL)
      {
        uint64_t v51 = *(void *)&v37 - 1;
        while (1)
        {
          uint64_t v53 = v50[1];
          if (v53 == 0xA60DDA5A69582425)
          {
            if (v50[2] == 0xA60DDA5A69582425) {
              goto LABEL_106;
            }
          }
          else if ((v53 & v51) != v48)
          {
            goto LABEL_108;
          }
          unint64_t v50 = (void *)*v50;
          if (!v50) {
            goto LABEL_108;
          }
        }
      }
      while (2)
      {
        unint64_t v52 = v50[1];
        if (v52 != 0xA60DDA5A69582425)
        {
          if (v52 >= *(void *)&v37) {
            v52 %= *(void *)&v37;
          }
          if (v52 != v48) {
            goto LABEL_108;
          }
          goto LABEL_95;
        }
        if (v50[2] != 0xA60DDA5A69582425)
        {
LABEL_95:
          unint64_t v50 = (void *)*v50;
          if (!v50) {
            goto LABEL_108;
          }
          continue;
        }
        break;
      }
LABEL_106:
      uint64_t v54 = v50[5];
      if (*(void *)(v54 + 8) == 0xA60DDA5A69582425)
      {
        unsigned int v41 = *(id **)(v54 + 32);
        goto LABEL_109;
      }
LABEL_108:
      unsigned int v41 = 0;
LABEL_109:
      unsigned int v55 = v39 + 52;
      if (v39[55])
      {
        uint64_t v56 = (void *)v39[54];
        if (v56)
        {
          do
          {
            int v57 = (void *)*v56;
            operator delete(v56);
            uint64_t v56 = v57;
          }
          while (v57);
        }
        v39[54] = 0;
        uint64_t v58 = v39[53];
        if (v58)
        {
          for (uint64_t j = 0; j != v58; ++j)
            *(void *)(*v55 + 8 * j) = 0;
        }
        v39[55] = 0;
      }
      id v60 = *v41;
      uint64_t v418 = [v60 alphaAtlas];

      uint64_t v61 = *a2;
      unint64_t v413 = a2[1];
      if (*a2 != v413)
      {
        unsigned int v62 = (char *)&v464 + 8;
        unsigned int v63 = (int)fmaxf(*(float *)(v427 + 3080) + *(float *)(v427 + 3076), 1.0);
        if (v63 >= 0x17) {
          unsigned int v63 = 23;
        }
        unsigned int v445 = v63;
        float v421 = 1.0 / (float)(v28 - v29);
        uint64_t v64 = v451;
        int64x2_t v420 = vdupq_n_s64(1uLL);
        uint64_t v426 = v39 + 52;
        while (1)
        {
          uint64_t v415 = v61;
          uint64_t v65 = *(void *)(*v61 + 384);
          uint64_t v425 = *(void *)(*v61 + 216);
          uint64_t v429 = *v61;
          uint64_t v66 = *(std::__shared_weak_count **)(*v61 + 224);
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v424 = v66;
          if ((*(unsigned char *)(v425 + 16) & 2) == 0
            && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
          {
            float v463 = (unsigned __int16 **)v477;
            unint64_t v450 = (void (**)(ggl::RenderItem *__hidden))&v463;
            std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v450, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
          }
          BOOL v67 = *(_OWORD **)(v425 + 72);
          long long v68 = v67[1];
          v461[0] = *v67;
          long long v69 = v67[2];
          long long v70 = v67[3];
          v461[1] = v68;
          v461[2] = v69;
          v461[3] = v70;
          unsigned int v446 = ggl::CullingGrid::intersectedCellsForView((float *)v461, 0.0);
          uint64_t v71 = *(unsigned __int8 *)(v65 + 169);
          md::featureIdPredicate((uint64_t)v477, a5, 0, *(unsigned char *)(v65 + 169), v419, v414, (uint64_t)v55);
          uint64_t v73 = *(void **)(v65 + 720);
          unint64_t v416 = *(void **)(v65 + 728);
          if (v73 != v416)
          {
            unsigned int v74 = *(unsigned int *)(v429 + 412);
            v72.i32[0] = 931135616;
            float v438 = *(float *)(v429 + 404);
            uint64_t v448 = v71 - 0x61C8864680B583EBLL;
            int32x4_t v75 = vdupq_lane_s32(v72, 0);
            *(float *)&v75.i32[3] = v438 * 0.000015259;
            float32x4_t v428 = (float32x4_t)v75;
            unsigned int v444 = v74;
            char v430 = v71;
            while (1)
            {
              uint64_t v417 = v73;
              uint64_t v76 = *v73;
              uint64_t v431 = v73[1];
              if (*v73 != v431) {
                break;
              }
LABEL_128:
              uint64_t v73 = v417 + 3;
              if (v417 + 3 == v416) {
                goto LABEL_538;
              }
            }
            while (2)
            {
              uint64_t v436 = v76;
              id v447 = *(id *)(v76 + 8);
              uint64_t v77 = [v447 origin];
              int v78 = *(_DWORD *)v77;
              int v79 = *(_DWORD *)(v77 + 4);
              float v80 = *(float *)(v77 + 8);
              [v447 size];
              int v82 = v81;
              int v84 = v83;
              float v86 = v85;
              uint64_t v442 = [v447 styleQueriesForPointyRoofs:0 selected:a5 == 1];
              v87.n128_u32[0] = 953267991;
              v88.n128_f32[0] = v438;
              if (v438 <= 0.0001)
              {
LABEL_532:
                for (uint64_t k = *(void **)([v447 featureIds] + 16); k; uint64_t k = (void *)*k)
                {
                  unint64_t v410 = k[2];
                  unint64_t v411 = operator new(0x20uLL);
                  v411[24] = v430;
                  *(void *)unint64_t v411 = 0;
                  *((void *)v411 + 1) = (v448 + (v410 << 6) + (v410 >> 2)) ^ v410;
                  *((void *)v411 + 2) = v410;
                  if ((std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique(v55, (uint64_t)v411) & 1) == 0)operator delete(v411); {
                }
                  }

                uint64_t v76 = v436 + 24;
                if (v436 + 24 == v431) {
                  goto LABEL_128;
                }
                continue;
              }
              break;
            }
            unsigned int v89 = *(unint64_t **)v442;
            unsigned int v90 = *(unint64_t **)(v442 + 8);
            if (*(unint64_t **)v442 != v90)
            {
              char v91 = 0;
              while (1)
              {
                unint64_t v93 = *v89;
                unint64_t v450 = (void (**)(ggl::RenderItem *__hidden))*v89;
                uint64_t v94 = (std::__shared_weak_count *)v89[1];
                v451[0] = v94;
                if (v94)
                {
                  atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                  *(void *)&long long v464 = v94;
                  atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                else
                {
                  *(void *)&long long v464 = 0;
                }
                float v463 = (unsigned __int16 **)v93;
                *(void *)unsigned int v62 = 0;
                *((void *)v62 + 1) = 0;
                v62[16] = 0;
                if (v93) {
                  LODWORD(v93) = (*(uint64_t (**)(unint64_t, char *, __n128, __n128))(*(void *)v93 + 48))(v93, v62, v87, v88);
                }
                BYTE8(v465) = v93;
                if (v94)
                {
                  if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, __n128, __n128))v94->__on_zero_shared)(v94, v87, v88);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                  LODWORD(v93) = BYTE8(v465);
                }
                if (v93)
                {
                  if ((uint64_t v95 = v463[3], (v96 = *(float **)v95) != 0)
                    && (float v97 = *v96, LODWORD(v96) = *v96 == 1.0, *((unsigned char *)v95 + 10))
                    && (v97 != 0.0 ? (BOOL v98 = v97 == 1.0) : (BOOL v98 = 1), !v98)
                    || (int v99 = *((unsigned __int8 *)v95 + v96 + 11), v97 = 0.0, v99 == 2))
                  {
                    LOBYTE(v450) = 1;
                    char v462 = 1;
                    char v100 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v95, 0x5Bu, v445, 0, &v450);
                    char v101 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v95, 0x5Bu, v445, 1, &v462);
                    v87.n128_u32[0] = 1.0;
                    if (v97 < 1.0) {
                      char v101 = v100;
                    }
                  }
                  else
                  {
                    char v101 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v463[3], 0x5Bu, v445, v99, 0);
                  }
                  unsigned int v74 = v444;
                  if (v101) {
                    break;
                  }
                }
                char v102 = 0;
                if (BYTE8(v465)) {
                  goto LABEL_163;
                }
LABEL_164:
                double v103 = (std::__shared_weak_count *)v465;
                if ((void)v465 && !atomic_fetch_add((atomic_ullong *volatile)(v465 + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                  uint64_t v104 = (std::__shared_weak_count *)v464;
                  if ((void)v464)
                  {
LABEL_167:
                    if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                }
                else
                {
                  uint64_t v104 = (std::__shared_weak_count *)v464;
                  if ((void)v464) {
                    goto LABEL_167;
                  }
                }
                v89 += 2;
                if (v89 == v90) {
                  char v92 = 1;
                }
                else {
                  char v92 = v102;
                }
                if (v92) {
                  goto LABEL_172;
                }
              }
              char v91 = 1;
              char v102 = 1;
              if (!BYTE8(v465)) {
                goto LABEL_164;
              }
LABEL_163:
              (*((void (**)(unsigned __int16 **))*v463 + 7))(v463);
              goto LABEL_164;
            }
            char v91 = 0;
LABEL_172:
            if (a5 == 1)
            {
              char v105 = a1;
              unsigned int v55 = v426;
              if ((v91 & 1) == 0 || ![v447 hasFeatureId:v419]) {
                goto LABEL_532;
              }
            }
            else
            {
              char v105 = a1;
              unsigned int v55 = v426;
              if ((v91 & 1) == 0) {
                goto LABEL_532;
              }
            }
            uint64_t v106 = *(void *)(v105[49] + 480);
            uint64_t v107 = *(void *)(v106 + 8);
            if (v107 != *(void *)v106)
            {
              long long v108 = *(unsigned __int16 ***)(v107 - 8);
              *(void *)(v106 + 8) = v107 - 8;
              uint64_t v109 = *(unsigned __int16 ****)(v106 + 40);
              unint64_t v110 = *(void *)(v106 + 48);
              if ((unint64_t)v109 >= v110)
              {
                uint64_t v111 = *(void *)(v106 + 32);
                uint64_t v112 = ((uint64_t)v109 - v111) >> 3;
                unint64_t v113 = v112 + 1;
                if ((unint64_t)(v112 + 1) >> 61) {
                  goto LABEL_552;
                }
                uint64_t v114 = v110 - v111;
                if (v114 >> 2 > v113) {
                  unint64_t v113 = v114 >> 2;
                }
                if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
                  uint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v115 = v113;
                }
                if (v115)
                {
                  uint64_t v116 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v106 + 56) + 16))(*(void *)(v106 + 56), 8 * v115, 8);
                  long long v117 = (unsigned __int16 ***)(v116 + 8 * v112);
                  uint64_t v118 = v116 + 8 * v115;
                  if (v116) {
                    *long long v117 = v108;
                  }
                }
                else
                {
                  uint64_t v118 = 0;
                  long long v117 = (unsigned __int16 ***)(8 * v112);
                }
                uint64_t v129 = *(void *)(v106 + 32);
                uint64_t v128 = *(void *)(v106 + 40);
                uint64_t v130 = v128 - v129;
                if (v128 != v129)
                {
                  unint64_t v131 = v130 - 8;
                  if ((unint64_t)(v130 - 8) < 0x38)
                  {
                    long long v132 = v117;
                  }
                  else
                  {
                    long long v132 = v117;
                    if ((unint64_t)(v128 - (void)v117) >= 0x20)
                    {
                      uint64_t v133 = (v131 >> 3) + 1;
                      long long v134 = v117 - 2;
                      uint64_t v135 = (long long *)(v128 - 16);
                      uint64_t v136 = v133 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v137 = *v135;
                        *((_OWORD *)v134 - 1) = *(v135 - 1);
                        *(_OWORD *)long long v134 = v137;
                        v134 -= 4;
                        v135 -= 2;
                        v136 -= 4;
                      }
                      while (v136);
                      long long v132 = &v117[-(v133 & 0x3FFFFFFFFFFFFFFCLL)];
                      v128 -= 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v133 == (v133 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_224;
                      }
                    }
                  }
                  do
                  {
                    uint64_t v146 = *(unsigned __int16 ***)(v128 - 8);
                    v128 -= 8;
                    *--long long v132 = v146;
                  }
                  while (v128 != v129);
                  goto LABEL_224;
                }
LABEL_218:
                long long v132 = v117;
LABEL_225:
                uint64_t v121 = v117 + 1;
                *(void *)(v106 + 32) = v132;
                *(void *)(v106 + 40) = v117 + 1;
                uint64_t v148 = *(void *)(v106 + 48);
                *(void *)(v106 + 48) = v118;
                if (v128) {
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v106 + 56) + 40))(*(void *)(v106 + 56), v128, v148 - v128);
                }
LABEL_227:
                *(void *)(v106 + 40) = v121;
                float v463 = v108;
                uint64_t v149 = *(void *)(v106 + 120);
                if (!v149) {
                  goto LABEL_550;
                }
                (*(void (**)(uint64_t, unsigned __int16 ***))(*(void *)v149 + 48))(v149, &v463);
                uint64_t v150 = v108[8];
                *(void *)uint64_t v150 = v425;
                *((void *)v150 + 1) = 0;
                float64x2_t v151 = v108[20];
                if (v424) {
                  atomic_fetch_add_explicit(&v424->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                double v152 = (std::__shared_weak_count *)*((void *)v151 + 1);
                *(void *)float64x2_t v151 = v425;
                *((void *)v151 + 1) = v424;
                if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
                double v153 = (void *)*((void *)v108[8] + 2);
                unint64_t v154 = v153[1];
                uint64_t v155 = a1;
                unsigned int v156 = v445;
                uint64_t v441 = v153;
                if (v154) {
                  uint64_t v157 = v153[9];
                }
                else {
                  uint64_t v157 = 0;
                }
                float v158 = (float)(v80 - v29) * v421;
                float v159 = v86 * v421;
                *(_DWORD *)(v157 + 128) = v78;
                *(_DWORD *)(v157 + 132) = v79;
                *(float *)(v157 + 136) = v158;
                *(_DWORD *)(v157 + 144) = v82;
                *(_DWORD *)(v157 + 148) = v84;
                *(float *)(v157 + 152) = v159;
                if (v157 && v154)
                {
                  if (v441[8] > v154) {
                    unint64_t v154 = v441[8];
                  }
                  v441[7] = 0;
                  v441[8] = v154;
                }
                uint64_t v160 = a1[49];
                if (!*(unsigned char *)(v160 + 768))
                {
                  uint64_t v423 = 0;
                  unint64_t v439 = 0;
                  goto LABEL_307;
                }
                uint64_t v161 = *(void *)(v160 + 472);
                uint64_t v162 = *(void *)(v161 + 8);
                if (v162 != *(void *)v161)
                {
                  uint64_t v163 = *(void *)(v162 - 8);
                  *(void *)(v161 + 8) = v162 - 8;
                  uint64_t v164 = *(uint64_t **)(v161 + 40);
                  unint64_t v165 = *(void *)(v161 + 48);
                  if ((unint64_t)v164 >= v165)
                  {
                    uint64_t v166 = *(void *)(v161 + 32);
                    uint64_t v167 = ((uint64_t)v164 - v166) >> 3;
                    unint64_t v168 = v167 + 1;
                    if ((unint64_t)(v167 + 1) >> 61) {
                      goto LABEL_553;
                    }
                    uint64_t v169 = v165 - v166;
                    if (v169 >> 2 > v168) {
                      unint64_t v168 = v169 >> 2;
                    }
                    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8) {
                      uint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v170 = v168;
                    }
                    if (v170)
                    {
                      uint64_t v171 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v161 + 56) + 16))(*(void *)(v161 + 56), 8 * v170, 8);
                      unint64_t v172 = (uint64_t *)(v171 + 8 * v167);
                      uint64_t v173 = v171 + 8 * v170;
                      if (v171) {
                        *unint64_t v172 = v163;
                      }
                    }
                    else
                    {
                      uint64_t v173 = 0;
                      unint64_t v172 = (uint64_t *)(8 * v167);
                    }
                    uint64_t v184 = *(void *)(v161 + 32);
                    uint64_t v183 = *(void *)(v161 + 40);
                    uint64_t v185 = v183 - v184;
                    if (v183 != v184)
                    {
                      unint64_t v186 = v185 - 8;
                      if ((unint64_t)(v185 - 8) < 0x38)
                      {
                        uint64_t v187 = v172;
                      }
                      else
                      {
                        uint64_t v187 = v172;
                        if ((unint64_t)(v183 - (void)v172) >= 0x20)
                        {
                          uint64_t v188 = (v186 >> 3) + 1;
                          unint64_t v189 = v172 - 2;
                          uint64_t v190 = (long long *)(v183 - 16);
                          uint64_t v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v192 = *v190;
                            *((_OWORD *)v189 - 1) = *(v190 - 1);
                            *(_OWORD *)unint64_t v189 = v192;
                            v189 -= 4;
                            v190 -= 2;
                            v191 -= 4;
                          }
                          while (v191);
                          uint64_t v187 = &v172[-(v188 & 0x3FFFFFFFFFFFFFFCLL)];
                          v183 -= 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL)) {
                            goto LABEL_290;
                          }
                        }
                      }
                      do
                      {
                        uint64_t v201 = *(void *)(v183 - 8);
                        v183 -= 8;
                        *--uint64_t v187 = v201;
                      }
                      while (v183 != v184);
                      goto LABEL_290;
                    }
LABEL_284:
                    uint64_t v187 = v172;
LABEL_291:
                    uint64_t v176 = v172 + 1;
                    *(void *)(v161 + 32) = v187;
                    *(void *)(v161 + 40) = v172 + 1;
                    uint64_t v203 = *(void *)(v161 + 48);
                    *(void *)(v161 + 48) = v173;
                    if (v183) {
                      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v161 + 56) + 40))(*(void *)(v161 + 56), v183, v203 - v183);
                    }
LABEL_293:
                    *(void *)(v161 + 40) = v176;
                    float v463 = (unsigned __int16 **)v163;
                    uint64_t v204 = *(void *)(v161 + 120);
                    if (!v204)
                    {
LABEL_550:
                      std::__throw_bad_function_call[abi:nn180100]();
                      __break(1u);
                    }
                    (*(void (**)(uint64_t, unsigned __int16 ***))(*(void *)v204 + 48))(v204, &v463);
                    unint64_t v205 = *(void **)(v163 + 64);
                    *unint64_t v205 = v425;
                    v205[1] = 0;
                    unint64_t v206 = *(void **)(v163 + 160);
                    if (v424) {
                      atomic_fetch_add_explicit(&v424->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    uint64_t v207 = (std::__shared_weak_count *)v206[1];
                    *unint64_t v206 = v425;
                    v206[1] = v424;
                    unsigned int v156 = v445;
                    if (v207 && !atomic_fetch_add(&v207->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                      std::__shared_weak_count::__release_weak(v207);
                    }
                    **(void **)(v163 + 96) = *(void *)(v418 + 24);
                    unint64_t v208 = *(void **)(*(void *)(v163 + 64) + 16);
                    unint64_t v209 = v208[1];
                    uint64_t v155 = a1;
                    if (v209) {
                      uint64_t v210 = v208[9];
                    }
                    else {
                      uint64_t v210 = 0;
                    }
                    *(_DWORD *)(v210 + 288) = 1084227584;
                    *(_DWORD *)(v210 + 304) = v78;
                    *(_DWORD *)(v210 + 308) = v79;
                    *(float *)(v210 + 312) = v158;
                    *(_DWORD *)(v210 + 320) = v82;
                    *(_DWORD *)(v210 + 324) = v84;
                    *(float *)(v210 + 328) = v159;
                    uint64_t v423 = v163;
                    unint64_t v439 = v208;
                    if (v210 && v209)
                    {
                      if (v208[8] > v209) {
                        unint64_t v209 = v208[8];
                      }
                      v208[7] = 0;
                      v208[8] = v209;
                    }
LABEL_307:
                    uint64_t v211 = *(unint64_t **)v442;
                    uint64_t v440 = *(unint64_t **)(v442 + 8);
                    if (*(unint64_t **)v442 == v440)
                    {
                      uint64_t v260 = v155[49];
LABEL_384:
                      BOOL v264 = (uint64_t *)(v260 + 40);
                      uint64_t v262 = *v264;
                      uint64_t v263 = (std::__shared_weak_count *)v264[1];
                      if (v263) {
                        goto LABEL_385;
                      }
                      goto LABEL_386;
                    }
                    unint64_t v422 = (ggl::PipelineSetup *)v108;
                    char v443 = 0;
                    unsigned __int8 v212 = 0;
                    while (2)
                    {
                      unint64_t v213 = *v211;
                      unint64_t v450 = (void (**)(ggl::RenderItem *__hidden))*v211;
                      uint64_t v214 = (std::__shared_weak_count *)v211[1];
                      v451[0] = v214;
                      if (v214)
                      {
                        atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
                        *(void *)&long long v464 = v214;
                        atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      else
                      {
                        *(void *)&long long v464 = 0;
                      }
                      float v463 = (unsigned __int16 **)v213;
                      *(void *)unsigned int v62 = 0;
                      *((void *)v62 + 1) = 0;
                      v62[16] = 0;
                      if (v213) {
                        LODWORD(v213) = (*(uint64_t (**)(unint64_t, char *))(*(void *)v213 + 48))(v213, v62);
                      }
                      BYTE8(v465) = v213;
                      if (v214)
                      {
                        if (!atomic_fetch_add(&v214->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                          std::__shared_weak_count::__release_weak(v214);
                        }
                        LODWORD(v213) = BYTE8(v465);
                      }
                      if (v213)
                      {
                        int32x4_t v215 = v463[3];
                        uint64_t v216 = *(float **)v215;
                        if (*(void *)v215
                          && (float v217 = *v216, LODWORD(v216) = *v216 == 1.0, *((unsigned char *)v215 + 10))
                          && (v217 != 0.0 ? (BOOL v218 = v217 == 1.0) : (BOOL v218 = 1), !v218)
                          || (v219 = *((unsigned __int8 *)v215 + v216 + 11), float v217 = 0.0, v219 == 2))
                        {
                          LOBYTE(v450) = 1;
                          char v462 = 1;
                          char v220 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v215, 0x5Bu, v156, 0, &v450);
                          char v221 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v215, 0x5Bu, v156, 1, &v462);
                          if (v217 < 1.0) {
                            char v221 = v220;
                          }
                          if (v221)
                          {
LABEL_331:
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v450, (uint64_t)v463[3], 0xA0u, v156, 2u, 0);
                            unint64_t v222 = v64;
                            uint64_t v223 = a3;
                            int8x16_t v224 = v62;
                            unsigned int v225 = (unsigned __int16)v450;
                            unsigned int v226 = WORD1(v450);
                            unsigned int v227 = WORD2(v450);
                            unsigned int v228 = HIWORD(v450);
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v450, (uint64_t)v463[3], 0xA3u, v156, 2u, 0);
                            float v229 = v29;
                            LOWORD(v29) = (_WORD)v450;
                            float v230 = *(float *)&v74;
                            LOWORD(v159) = WORD2(v450);
                            LOWORD(v74) = WORD1(v450);
                            LOWORD(v231) = HIWORD(v450);
                            float v232 = (float)((float)((float)v231 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v231 * 0.000015259)
                                                                 - (float)((float)v228 * 0.000015259))
                                                 * v230))
                                 * v438;
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v450, (uint64_t)v463[3], 0x5Du, v156, 2u, 0);
                            float v233 = (float)LODWORD(v159) * 0.000015259;
                            float v234 = (float)((float)LODWORD(v29) * 0.000015259)
                                 + (float)((float)-(float)((float)((float)LODWORD(v29) * 0.000015259)
                                                         - (float)((float)v225 * 0.000015259))
                                         * v230);
                            float v159 = (float)((float)v74 * 0.000015259)
                                 + (float)((float)-(float)((float)((float)v74 * 0.000015259)
                                                         - (float)((float)v226 * 0.000015259))
                                         * v230);
                            float v235 = v233 + (float)((float)-(float)(v233 - (float)((float)v227 * 0.000015259)) * v230);
                            uint16x4_t v437 = (uint16x4_t)v450;
                            unint64_t v236 = v441[1];
                            *(float *)&unsigned int v74 = v230;
                            if (v236)
                            {
                              uint64_t v237 = v441[9];
                              uint64_t v238 = v212;
                              unint64_t v239 = (float *)(v237 + 16 * v212);
                              float *v239 = v234;
                              v239[1] = v159;
                              v239[2] = v235;
                              v239[3] = v232;
                              uint64_t v155 = a1;
                              float v29 = v229;
                              unsigned int v156 = v445;
                              unsigned int v62 = v224;
                              if (v237)
                              {
                                a3 = v223;
                                if (v441[8] > v236) {
                                  unint64_t v236 = v441[8];
                                }
                                v441[7] = 0;
                                v441[8] = v236;
LABEL_349:
                                uint64_t v64 = v222;
                                v443 |= v232 < 0.9999;
                                if (!*(unsigned char *)(v155[49] + 768)) {
                                  goto LABEL_362;
                                }
                                double v247 = *(double *)(v427 + 3768);
                                uint64_t v248 = (uint64_t)v463[3];
                                uint64_t v249 = *(float **)v248;
                                double v434 = *(double *)(v429 + 72);
                                double v435 = *(double *)(v429 + 56);
                                double v433 = *(double *)(v427 + 1368);
                                if (*(void *)v248
                                  && (float v250 = *v249, LODWORD(v249) = *v249 == 1.0, *(unsigned char *)(v248 + 10))
                                  && v250 != 0.0
                                  && v250 != 1.0
                                  || (v251 = *(unsigned __int8 *)(v248 + v249 + 11), float v250 = 0.0, v251 == 2))
                                {
                                  LOBYTE(v450) = 1;
                                  char v462 = 1;
                                  float v252 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v248, 0x61u, v156, 0, &v450);
                                  float v253 = v252
                                       + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v248, 0x61u, v156, 1u, &v462)- v252)* v250);
                                }
                                else
                                {
                                  float v253 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v248, 0x61u, v156, v251, 0);
                                }
                                unint64_t v244 = v439[1];
                                float v29 = v229;
                                if (v244) {
                                  uint64_t v257 = v439[9];
                                }
                                else {
                                  uint64_t v257 = 0;
                                }
                                float v258 = v247 * 1.75 * v253 / (v433 * (v434 - v435));
                                *(float *)(v257 + 4 * v238 + 256) = v258;
                                unint64_t v259 = (float32x4_t *)(v257 + 16 * v238);
                                v259->f32[0] = v234;
                                v259->f32[1] = v159;
                                v259->f32[2] = v235;
                                v259->f32[3] = v232;
                                v259[8] = vmulq_f32(v428, vcvtq_f32_u32(vmovl_u16(v437)));
                                if (v257)
                                {
                                  unsigned int v74 = v444;
                                  if (!v244) {
                                    goto LABEL_362;
                                  }
LABEL_359:
                                  if (v439[8] > v244) {
                                    unint64_t v244 = v439[8];
                                  }
                                  v439[7] = 0;
                                  v439[8] = v244;
LABEL_362:
                                  if (BYTE8(v465)) {
                                    goto LABEL_363;
                                  }
                                }
                                else
                                {
                                  unsigned int v74 = v444;
                                  if (BYTE8(v465)) {
                                    goto LABEL_363;
                                  }
                                }
                                goto LABEL_364;
                              }
                            }
                            else
                            {
                              uint64_t v238 = v212;
                              unint64_t v246 = (float *)(16 * v212);
                              float *v246 = v234;
                              v246[1] = v159;
                              v246[2] = v235;
                              v246[3] = v232;
                              uint64_t v155 = a1;
                              float v29 = v229;
                              unsigned int v156 = v445;
                              unsigned int v62 = v224;
                            }
                            a3 = v223;
                            goto LABEL_349;
                          }
                        }
                        else if (*(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v463[3], 0x5Bu, v156, v219, 0))
                        {
                          goto LABEL_331;
                        }
                      }
                      unint64_t v240 = v441[1];
                      if (v240)
                      {
                        uint64_t v241 = v212;
                        uint64_t v242 = (void *)(v441[9] + 16 * v212);
                        *uint64_t v242 = 0;
                        v242[1] = 0;
                        if (v441[8] > v240) {
                          unint64_t v240 = v441[8];
                        }
                        v441[7] = 0;
                        v441[8] = v240;
                      }
                      else
                      {
                        uint64_t v241 = v212;
                        unint64_t v243 = (void *)(16 * v212);
                        *unint64_t v243 = 0;
                        v243[1] = 0;
                      }
                      if (*(unsigned char *)(v155[49] + 768))
                      {
                        unint64_t v244 = v439[1];
                        if (v244) {
                          uint64_t v245 = v439[9];
                        }
                        else {
                          uint64_t v245 = 0;
                        }
                        *(_DWORD *)(v245 + 4 * v241 + 256) = 0;
                        uint64_t v254 = (void *)(v245 + 16 * v241);
                        void *v254 = 0;
                        v254[1] = 0;
                        v254[16] = 0;
                        v254[17] = 0;
                        char v443 = 1;
                        if (v245 && v244) {
                          goto LABEL_359;
                        }
                        goto LABEL_362;
                      }
                      char v443 = 1;
                      if (BYTE8(v465)) {
LABEL_363:
                      }
                        (*((void (**)(unsigned __int16 **))*v463 + 7))(v463);
LABEL_364:
                      unint64_t v255 = (std::__shared_weak_count *)v465;
                      if ((void)v465 && !atomic_fetch_add((atomic_ullong *volatile)(v465 + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                        std::__shared_weak_count::__release_weak(v255);
                        uint64_t v256 = (std::__shared_weak_count *)v464;
                        if ((void)v464) {
                          goto LABEL_367;
                        }
                      }
                      else
                      {
                        uint64_t v256 = (std::__shared_weak_count *)v464;
                        if ((void)v464)
                        {
LABEL_367:
                          if (!atomic_fetch_add(&v256->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                            std::__shared_weak_count::__release_weak(v256);
                          }
                        }
                      }
                      v211 += 2;
                      ++v212;
                      if (v211 != v440) {
                        continue;
                      }
                      break;
                    }
                    uint64_t v260 = v155[49];
                    long long v108 = (unsigned __int16 **)v422;
                    if ((v443 & 1) == 0) {
                      goto LABEL_384;
                    }
                    uint64_t v261 = (uint64_t *)(v260 + 56);
                    uint64_t v262 = *v261;
                    uint64_t v263 = (std::__shared_weak_count *)v261[1];
                    if (!v263) {
                      goto LABEL_386;
                    }
LABEL_385:
                    atomic_fetch_add_explicit(&v263->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_386:
                    if (!v262 || **(unsigned __int16 ***)(v262 + 40) != v108[1])
                    {
                      uint64_t v265 = (std::__shared_weak_count *)v108[3];
                      v108[2] = 0;
                      v108[3] = 0;
                      if (!v265) {
                        goto LABEL_397;
                      }
LABEL_396:
                      if (atomic_fetch_add(&v265->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                        goto LABEL_397;
                      }
                      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                      std::__shared_weak_count::__release_weak(v265);
                      if (!v263) {
                        goto LABEL_401;
                      }
LABEL_398:
                      if (!atomic_fetch_add(&v263->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                        std::__shared_weak_count::__release_weak(v263);
                      }
                      goto LABEL_401;
                    }
                    uint64_t v266 = v108[2];
                    if (v266 && v266 != (unsigned __int16 *)v262) {
                      ggl::PipelineSetup::resetData((uint64_t)v108);
                    }
                    if (v263) {
                      atomic_fetch_add_explicit(&v263->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    uint64_t v265 = (std::__shared_weak_count *)v108[3];
                    v108[2] = (unsigned __int16 *)v262;
                    v108[3] = (unsigned __int16 *)v263;
                    if (v265) {
                      goto LABEL_396;
                    }
LABEL_397:
                    if (v263) {
                      goto LABEL_398;
                    }
LABEL_401:
                    unint64_t v450 = &off_1EF55A458;
                    int v456 = 1065353216;
                    long long v457 = 0u;
                    long long v458 = 0u;
                    int64x2_t v459 = v420;
                    uint64_t v460 = 0;
                    uint64_t v267 = v155[49];
                    uint64_t v268 = *(void *)(v267 + 624);
                    int v454 = *(_DWORD *)(v267 + 776);
                    v451[1] = "";
                    uint64_t v452 = v268;
                    unint64_t v453 = v108;
                    uint64_t v455 = 0;
                    uint64_t v269 = [v447 fillMeshes];
                    uint64_t v270 = *(uint64_t **)v269;
                    uint64_t v271 = *(uint64_t **)(v269 + 8);
                    if (*(uint64_t **)v269 != v271)
                    {
                      unsigned __int8 v272 = 0;
                      while (1)
                      {
                        uint64_t v274 = a1[49];
                        uint64_t v275 = (uint64_t)v478;
                        if (!v478) {
                          goto LABEL_408;
                        }
                        if (v478 != v477) {
                          break;
                        }
                        unint64_t v476 = v475;
                        (*(void (**)(void *, void *))(v477[0] + 24))(v477, v475);
LABEL_410:
                        unint64_t v276 = (uint64_t *)[v447 commitRangesToFillRenderItemBatcher:v274 + 784 forMeshAtIndex:v272 cullingMask:v446 featureIdPredicate:v475];
                        if (v476 == v475)
                        {
                          (*(void (**)(void *))(v475[0] + 32))(v475);
                        }
                        else if (v476)
                        {
                          (*(void (**)(void))(*v476 + 40))();
                        }
                        uint64_t v277 = a1[49];
                        uint64_t v278 = *v270;
                        float v463 = (unsigned __int16 **)&off_1EF55A458;
                        long long v279 = v64[1];
                        long long v464 = *v64;
                        long long v465 = v279;
                        long long v280 = v64[6];
                        long long v281 = v64[4];
                        long long v469 = v64[5];
                        long long v470 = v280;
                        long long v282 = v64[3];
                        long long v466 = v64[2];
                        long long v467 = v282;
                        long long v468 = v281;
                        uint64_t v283 = *(void **)(v277 + 872);
                        uint64_t v284 = v283[1];
                        if (v284 == *(void *)(v277 + 880))
                        {
                          uint64_t v283 = (void *)*v283;
                          if (!v283)
                          {
                            uint64_t v283 = malloc_type_malloc(120 * v284 + 16, 0xB644C221uLL);
                            void *v283 = 0;
                            v283[1] = 0;
                            **(void **)(v277 + 872) = v283;
                          }
                          *(void *)(v277 + 872) = v283;
                          uint64_t v284 = v283[1];
                        }
                        uint64_t v285 = &v283[15 * v284];
                        uint64_t v286 = v285 + 2;
                        v283[1] = v284 + 1;
                        v285[2] = &off_1EF55A458;
                        long long v287 = v469;
                        long long v288 = v470;
                        long long v289 = v468;
                        *(_OWORD *)(v285 + 9) = v467;
                        long long v290 = v464;
                        long long v291 = v465;
                        *(_OWORD *)(v285 + 7) = v466;
                        *(_OWORD *)(v285 + 5) = v291;
                        *(_OWORD *)(v285 + 3) = v290;
                        *(_OWORD *)(v285 + 15) = v288;
                        *(_OWORD *)(v285 + 13) = v287;
                        *(_OWORD *)(v285 + 11) = v289;
                        v285[10] = v278;
                        uint64_t v292 = *v276;
                        v285[13] = *v276;
                        v285[14] = (v276[1] - v292) >> 4;
                        unint64_t v293 = *(void **)(a3 + 80);
                        unint64_t v294 = *(void *)(a3 + 88);
                        if ((unint64_t)v293 >= v294)
                        {
                          uint64_t v295 = *(void *)(a3 + 72);
                          uint64_t v296 = ((uint64_t)v293 - v295) >> 3;
                          unint64_t v297 = v296 + 1;
                          if ((unint64_t)(v296 + 1) >> 61) {
                            abort();
                          }
                          uint64_t v298 = v294 - v295;
                          if (v298 >> 2 > v297) {
                            unint64_t v297 = v298 >> 2;
                          }
                          if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8) {
                            uint64_t v299 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v299 = v297;
                          }
                          if (v299)
                          {
                            uint64_t v300 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v299, 8);
                            uint64_t v301 = (void *)(v300 + 8 * v296);
                            uint64_t v302 = v300 + 8 * v299;
                            if (v300) {
                              void *v301 = v286;
                            }
                          }
                          else
                          {
                            uint64_t v302 = 0;
                            uint64_t v301 = (void *)(8 * v296);
                          }
                          uint64_t v304 = *(void *)(a3 + 72);
                          uint64_t v303 = *(void *)(a3 + 80);
                          uint64_t v305 = v303 - v304;
                          if (v303 != v304)
                          {
                            unint64_t v306 = v305 - 8;
                            if ((unint64_t)(v305 - 8) < 0x38)
                            {
                              uint64_t v307 = v301;
                            }
                            else
                            {
                              uint64_t v307 = v301;
                              if ((unint64_t)(v303 - (void)v301) >= 0x20)
                              {
                                uint64_t v308 = (v306 >> 3) + 1;
                                uint64_t v309 = v301 - 2;
                                int v310 = (long long *)(v303 - 16);
                                uint64_t v311 = v308 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  long long v312 = *v310;
                                  *(v309 - 1) = *(v310 - 1);
                                  _OWORD *v309 = v312;
                                  v309 -= 2;
                                  v310 -= 2;
                                  v311 -= 4;
                                }
                                while (v311);
                                uint64_t v307 = &v301[-(v308 & 0x3FFFFFFFFFFFFFFCLL)];
                                v303 -= 8 * (v308 & 0x3FFFFFFFFFFFFFFCLL);
                                if (v308 == (v308 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_441:
                                  uint64_t v303 = *(void *)(a3 + 72);
LABEL_442:
                                  char v273 = v301 + 1;
                                  *(void *)(a3 + 72) = v307;
                                  *(void *)(a3 + 80) = v301 + 1;
                                  uint64_t v314 = *(void *)(a3 + 88);
                                  *(void *)(a3 + 88) = v302;
                                  if (v303) {
                                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v303, v314 - v303);
                                  }
                                  goto LABEL_404;
                                }
                              }
                            }
                            do
                            {
                              uint64_t v313 = *(void *)(v303 - 8);
                              v303 -= 8;
                              *--uint64_t v307 = v313;
                            }
                            while (v303 != v304);
                            goto LABEL_441;
                          }
                          uint64_t v307 = v301;
                          goto LABEL_442;
                        }
                        if (v293) {
                          *unint64_t v293 = v286;
                        }
                        char v273 = v293 + 1;
LABEL_404:
                        *(void *)(a3 + 80) = v273;
                        ++v272;
                        v270 += 2;
                        if (v270 == v271) {
                          goto LABEL_444;
                        }
                      }
                      uint64_t v275 = (*(uint64_t (**)(void))(*v478 + 16))();
LABEL_408:
                      unint64_t v476 = (void *)v275;
                      goto LABEL_410;
                    }
LABEL_444:
                    uint64_t v315 = [v447 fillMeshesForPointyRoofs];
                    unint64_t v316 = *(uint64_t **)v315;
                    unint64_t v317 = *(uint64_t **)(v315 + 8);
                    if (*(uint64_t **)v315 != v317)
                    {
                      unsigned __int8 v318 = 0;
                      while (1)
                      {
                        uint64_t v320 = a1[49];
                        uint64_t v321 = (uint64_t)v478;
                        if (!v478) {
                          goto LABEL_451;
                        }
                        if (v478 != v477) {
                          break;
                        }
                        unint64_t v474 = v473;
                        (*(void (**)(void *, void *))(v477[0] + 24))(v477, v473);
LABEL_453:
                        uint64_t v322 = (uint64_t *)[v447 commitRangesToPointyRoofTopRenderItemBatcher:v320 + 784 forMeshAtIndex:v318 cullingMask:v446 featureIdPredicate:v473];
                        if (v474 == v473)
                        {
                          (*(void (**)(void *))(v473[0] + 32))(v473);
                        }
                        else if (v474)
                        {
                          (*(void (**)(void))(*v474 + 40))();
                        }
                        uint64_t v323 = a1[49];
                        uint64_t v324 = *v316;
                        float v463 = (unsigned __int16 **)&off_1EF55A458;
                        long long v325 = v64[1];
                        long long v464 = *v64;
                        long long v465 = v325;
                        long long v326 = v64[6];
                        long long v327 = v64[4];
                        long long v469 = v64[5];
                        long long v470 = v326;
                        long long v328 = v64[3];
                        long long v466 = v64[2];
                        long long v467 = v328;
                        long long v468 = v327;
                        int v329 = *(void **)(v323 + 872);
                        uint64_t v330 = v329[1];
                        if (v330 == *(void *)(v323 + 880))
                        {
                          int v329 = (void *)*v329;
                          if (!v329)
                          {
                            int v329 = malloc_type_malloc(120 * v330 + 16, 0xB644C221uLL);
                            *int v329 = 0;
                            v329[1] = 0;
                            **(void **)(v323 + 872) = v329;
                          }
                          *(void *)(v323 + 872) = v329;
                          uint64_t v330 = v329[1];
                        }
                        char v331 = &v329[15 * v330];
                        char v332 = v331 + 2;
                        v329[1] = v330 + 1;
                        v331[2] = &off_1EF55A458;
                        long long v333 = v469;
                        long long v334 = v470;
                        long long v335 = v468;
                        *(_OWORD *)(v331 + 9) = v467;
                        long long v336 = v464;
                        long long v337 = v465;
                        *(_OWORD *)(v331 + 7) = v466;
                        *(_OWORD *)(v331 + 5) = v337;
                        *(_OWORD *)(v331 + 3) = v336;
                        *(_OWORD *)(v331 + 15) = v334;
                        *(_OWORD *)(v331 + 13) = v333;
                        *(_OWORD *)(v331 + 11) = v335;
                        v331[10] = v324;
                        uint64_t v338 = *v322;
                        v331[13] = *v322;
                        v331[14] = (v322[1] - v338) >> 4;
                        uint64_t v339 = *(void **)(a3 + 80);
                        unint64_t v340 = *(void *)(a3 + 88);
                        if ((unint64_t)v339 >= v340)
                        {
                          uint64_t v341 = *(void *)(a3 + 72);
                          uint64_t v342 = ((uint64_t)v339 - v341) >> 3;
                          unint64_t v343 = v342 + 1;
                          if ((unint64_t)(v342 + 1) >> 61) {
                            abort();
                          }
                          uint64_t v344 = v340 - v341;
                          if (v344 >> 2 > v343) {
                            unint64_t v343 = v344 >> 2;
                          }
                          if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8) {
                            uint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v345 = v343;
                          }
                          if (v345)
                          {
                            uint64_t v346 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v345, 8);
                            uint64_t v347 = (void *)(v346 + 8 * v342);
                            uint64_t v348 = v346 + 8 * v345;
                            if (v346) {
                              *uint64_t v347 = v332;
                            }
                          }
                          else
                          {
                            uint64_t v348 = 0;
                            uint64_t v347 = (void *)(8 * v342);
                          }
                          uint64_t v350 = *(void *)(a3 + 72);
                          uint64_t v349 = *(void *)(a3 + 80);
                          uint64_t v351 = v349 - v350;
                          if (v349 != v350)
                          {
                            unint64_t v352 = v351 - 8;
                            if ((unint64_t)(v351 - 8) < 0x38)
                            {
                              v353 = v347;
                            }
                            else
                            {
                              v353 = v347;
                              if ((unint64_t)(v349 - (void)v347) >= 0x20)
                              {
                                uint64_t v354 = (v352 >> 3) + 1;
                                uint64_t v355 = v347 - 2;
                                v356 = (long long *)(v349 - 16);
                                uint64_t v357 = v354 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  long long v358 = *v356;
                                  *(v355 - 1) = *(v356 - 1);
                                  *uint64_t v355 = v358;
                                  v355 -= 2;
                                  v356 -= 2;
                                  v357 -= 4;
                                }
                                while (v357);
                                v353 = &v347[-(v354 & 0x3FFFFFFFFFFFFFFCLL)];
                                v349 -= 8 * (v354 & 0x3FFFFFFFFFFFFFFCLL);
                                if (v354 == (v354 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_484:
                                  uint64_t v349 = *(void *)(a3 + 72);
LABEL_485:
                                  uint64_t v319 = v347 + 1;
                                  *(void *)(a3 + 72) = v353;
                                  *(void *)(a3 + 80) = v347 + 1;
                                  uint64_t v360 = *(void *)(a3 + 88);
                                  *(void *)(a3 + 88) = v348;
                                  if (v349) {
                                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v349, v360 - v349);
                                  }
                                  goto LABEL_447;
                                }
                              }
                            }
                            do
                            {
                              uint64_t v359 = *(void *)(v349 - 8);
                              v349 -= 8;
                              *--v353 = v359;
                            }
                            while (v349 != v350);
                            goto LABEL_484;
                          }
                          v353 = v347;
                          goto LABEL_485;
                        }
                        if (v339) {
                          *uint64_t v339 = v332;
                        }
                        uint64_t v319 = v339 + 1;
LABEL_447:
                        *(void *)(a3 + 80) = v319;
                        ++v318;
                        v316 += 2;
                        if (v316 == v317) {
                          goto LABEL_487;
                        }
                      }
                      uint64_t v321 = (*(uint64_t (**)(void))(*v478 + 16))();
LABEL_451:
                      unint64_t v474 = (void *)v321;
                      goto LABEL_453;
                    }
LABEL_487:
                    uint64_t v361 = a1[49];
                    if (!*(unsigned char *)(v361 + 768)) {
                      goto LABEL_531;
                    }
                    uint64_t v362 = *(void *)(v361 + 608);
                    int v454 = *(_DWORD *)(v361 + 776);
                    uint64_t v452 = v362;
                    unint64_t v453 = (unsigned __int16 **)v423;
                    uint64_t v455 = 1;
                    uint64_t v363 = [v447 strokeMeshes];
                    uint64_t v364 = *(uint64_t **)v363;
                    uint64_t v365 = *(uint64_t **)(v363 + 8);
                    if (*(uint64_t **)v363 == v365)
                    {
LABEL_531:
                      unsigned int v55 = v426;
                      goto LABEL_532;
                    }
                    unsigned __int8 v366 = 0;
                    while (2)
                    {
                      uint64_t v368 = a1[49];
                      uint64_t v369 = (uint64_t)v478;
                      if (v478)
                      {
                        if (v478 != v477)
                        {
                          uint64_t v369 = (*(uint64_t (**)(void))(*v478 + 16))();
                          goto LABEL_495;
                        }
                        unint64_t v472 = v471;
                        (*(void (**)(void *, void *))(v477[0] + 24))(v477, v471);
                      }
                      else
                      {
LABEL_495:
                        unint64_t v472 = (void *)v369;
                      }
                      uint64_t v370 = (uint64_t *)[v447 commitRangesToStrokeRenderItemBatcher:v368 + 784 forMeshAtIndex:v366 cullingMask:v446 featureIdPredicate:v471];
                      if (v472 == v471)
                      {
                        (*(void (**)(void *))(v471[0] + 32))(v471);
                      }
                      else if (v472)
                      {
                        (*(void (**)(void))(*v472 + 40))();
                      }
                      uint64_t v371 = a1[49];
                      uint64_t v372 = *v364;
                      float v463 = (unsigned __int16 **)&off_1EF55A458;
                      long long v373 = v64[1];
                      long long v464 = *v64;
                      long long v465 = v373;
                      long long v374 = v64[6];
                      long long v375 = v64[4];
                      long long v469 = v64[5];
                      long long v470 = v374;
                      long long v376 = v64[3];
                      long long v466 = v64[2];
                      long long v467 = v376;
                      long long v468 = v375;
                      uint64_t v377 = *(void **)(v371 + 872);
                      uint64_t v378 = v377[1];
                      if (v378 == *(void *)(v371 + 880))
                      {
                        uint64_t v377 = (void *)*v377;
                        if (!v377)
                        {
                          uint64_t v377 = malloc_type_malloc(120 * v378 + 16, 0xB644C221uLL);
                          void *v377 = 0;
                          v377[1] = 0;
                          **(void **)(v371 + 872) = v377;
                        }
                        *(void *)(v371 + 872) = v377;
                        uint64_t v378 = v377[1];
                      }
                      uint64_t v379 = &v377[15 * v378];
                      uint64_t v380 = v379 + 2;
                      v377[1] = v378 + 1;
                      v379[2] = &off_1EF55A458;
                      long long v381 = v469;
                      long long v382 = v470;
                      long long v383 = v468;
                      *(_OWORD *)(v379 + 9) = v467;
                      long long v384 = v464;
                      long long v385 = v465;
                      *(_OWORD *)(v379 + 7) = v466;
                      *(_OWORD *)(v379 + 5) = v385;
                      *(_OWORD *)(v379 + 3) = v384;
                      *(_OWORD *)(v379 + 15) = v382;
                      *(_OWORD *)(v379 + 13) = v381;
                      *(_OWORD *)(v379 + 11) = v383;
                      v379[10] = v372;
                      uint64_t v386 = *v370;
                      v379[13] = *v370;
                      v379[14] = (v370[1] - v386) >> 4;
                      uint64_t v387 = *(void **)(a3 + 80);
                      unint64_t v388 = *(void *)(a3 + 88);
                      if ((unint64_t)v387 < v388)
                      {
                        if (v387) {
                          void *v387 = v380;
                        }
                        uint64_t v367 = v387 + 1;
                        goto LABEL_491;
                      }
                      uint64_t v389 = *(void *)(a3 + 72);
                      uint64_t v390 = ((uint64_t)v387 - v389) >> 3;
                      unint64_t v391 = v390 + 1;
                      if ((unint64_t)(v390 + 1) >> 61) {
                        abort();
                      }
                      uint64_t v392 = v388 - v389;
                      if (v392 >> 2 > v391) {
                        unint64_t v391 = v392 >> 2;
                      }
                      if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8) {
                        uint64_t v393 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v393 = v391;
                      }
                      if (v393)
                      {
                        uint64_t v394 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v393, 8);
                        uint64_t v395 = (void *)(v394 + 8 * v390);
                        uint64_t v396 = v394 + 8 * v393;
                        if (v394) {
                          *uint64_t v395 = v380;
                        }
                      }
                      else
                      {
                        uint64_t v396 = 0;
                        uint64_t v395 = (void *)(8 * v390);
                      }
                      uint64_t v398 = *(void *)(a3 + 72);
                      uint64_t v397 = *(void *)(a3 + 80);
                      uint64_t v399 = v397 - v398;
                      if (v397 != v398)
                      {
                        unint64_t v400 = v399 - 8;
                        if ((unint64_t)(v399 - 8) < 0x38)
                        {
                          unint64_t v401 = v395;
                        }
                        else
                        {
                          unint64_t v401 = v395;
                          if ((unint64_t)(v397 - (void)v395) >= 0x20)
                          {
                            uint64_t v402 = (v400 >> 3) + 1;
                            uint64_t v403 = v395 - 2;
                            uint64_t v404 = (long long *)(v397 - 16);
                            uint64_t v405 = v402 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v406 = *v404;
                              *(v403 - 1) = *(v404 - 1);
                              *uint64_t v403 = v406;
                              v403 -= 2;
                              v404 -= 2;
                              v405 -= 4;
                            }
                            while (v405);
                            unint64_t v401 = &v395[-(v402 & 0x3FFFFFFFFFFFFFFCLL)];
                            v397 -= 8 * (v402 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v402 == (v402 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_528:
                              uint64_t v397 = *(void *)(a3 + 72);
LABEL_529:
                              uint64_t v367 = v395 + 1;
                              *(void *)(a3 + 72) = v401;
                              *(void *)(a3 + 80) = v395 + 1;
                              uint64_t v408 = *(void *)(a3 + 88);
                              *(void *)(a3 + 88) = v396;
                              if (v397) {
                                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v397, v408 - v397);
                              }
LABEL_491:
                              *(void *)(a3 + 80) = v367;
                              ++v366;
                              v364 += 2;
                              if (v364 == v365) {
                                goto LABEL_531;
                              }
                              continue;
                            }
                          }
                        }
                        do
                        {
                          uint64_t v407 = *(void *)(v397 - 8);
                          v397 -= 8;
                          *--unint64_t v401 = v407;
                        }
                        while (v397 != v398);
                        goto LABEL_528;
                      }
                      break;
                    }
                    unint64_t v401 = v395;
                    goto LABEL_529;
                  }
LABEL_256:
                  if (v164) {
                    *uint64_t v164 = v163;
                  }
                  uint64_t v176 = v164 + 1;
                  goto LABEL_293;
                }
                uint64_t v174 = *(void *)(v161 + 88);
                if (!v174) {
                  goto LABEL_550;
                }
                uint64_t v163 = (*(uint64_t (**)(uint64_t))(*(void *)v174 + 48))(v174);
                uint64_t v164 = *(uint64_t **)(v161 + 40);
                unint64_t v175 = *(void *)(v161 + 48);
                if ((unint64_t)v164 < v175) {
                  goto LABEL_256;
                }
                uint64_t v177 = *(void *)(v161 + 32);
                uint64_t v178 = ((uint64_t)v164 - v177) >> 3;
                unint64_t v179 = v178 + 1;
                if ((unint64_t)(v178 + 1) >> 61) {
LABEL_553:
                }
                  abort();
                uint64_t v180 = v175 - v177;
                if (v180 >> 2 > v179) {
                  unint64_t v179 = v180 >> 2;
                }
                if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8) {
                  uint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v181 = v179;
                }
                if (v181)
                {
                  uint64_t v182 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v161 + 56) + 16))(*(void *)(v161 + 56), 8 * v181, 8);
                  unint64_t v172 = (uint64_t *)(v182 + 8 * v178);
                  uint64_t v173 = v182 + 8 * v181;
                  if (v182) {
                    *unint64_t v172 = v163;
                  }
                }
                else
                {
                  uint64_t v173 = 0;
                  unint64_t v172 = (uint64_t *)(8 * v178);
                }
                uint64_t v193 = *(void *)(v161 + 32);
                uint64_t v183 = *(void *)(v161 + 40);
                uint64_t v194 = v183 - v193;
                if (v183 == v193) {
                  goto LABEL_284;
                }
                unint64_t v195 = v194 - 8;
                if ((unint64_t)(v194 - 8) < 0x38)
                {
                  uint64_t v187 = v172;
                }
                else
                {
                  uint64_t v187 = v172;
                  if ((unint64_t)(v183 - (void)v172) >= 0x20)
                  {
                    uint64_t v196 = (v195 >> 3) + 1;
                    uint64_t v197 = v172 - 2;
                    BOOL v198 = (long long *)(v183 - 16);
                    uint64_t v199 = v196 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v200 = *v198;
                      *((_OWORD *)v197 - 1) = *(v198 - 1);
                      *(_OWORD *)uint64_t v197 = v200;
                      v197 -= 4;
                      v198 -= 2;
                      v199 -= 4;
                    }
                    while (v199);
                    uint64_t v187 = &v172[-(v196 & 0x3FFFFFFFFFFFFFFCLL)];
                    v183 -= 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v196 == (v196 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_290;
                    }
                  }
                }
                do
                {
                  uint64_t v202 = *(void *)(v183 - 8);
                  v183 -= 8;
                  *--uint64_t v187 = v202;
                }
                while (v183 != v193);
LABEL_290:
                uint64_t v183 = *(void *)(v161 + 32);
                goto LABEL_291;
              }
LABEL_190:
              if (v109) {
                char *v109 = v108;
              }
              uint64_t v121 = v109 + 1;
              goto LABEL_227;
            }
            uint64_t v119 = *(void *)(v106 + 88);
            if (!v119) {
              goto LABEL_550;
            }
            long long v108 = (unsigned __int16 **)(*(uint64_t (**)(uint64_t))(*(void *)v119 + 48))(v119);
            uint64_t v109 = *(unsigned __int16 ****)(v106 + 40);
            unint64_t v120 = *(void *)(v106 + 48);
            if ((unint64_t)v109 < v120) {
              goto LABEL_190;
            }
            uint64_t v122 = *(void *)(v106 + 32);
            uint64_t v123 = ((uint64_t)v109 - v122) >> 3;
            unint64_t v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) >> 61) {
LABEL_552:
            }
              abort();
            uint64_t v125 = v120 - v122;
            if (v125 >> 2 > v124) {
              unint64_t v124 = v125 >> 2;
            }
            if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
              uint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v126 = v124;
            }
            if (v126)
            {
              uint64_t v127 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v106 + 56) + 16))(*(void *)(v106 + 56), 8 * v126, 8);
              long long v117 = (unsigned __int16 ***)(v127 + 8 * v123);
              uint64_t v118 = v127 + 8 * v126;
              if (v127) {
                *long long v117 = v108;
              }
            }
            else
            {
              uint64_t v118 = 0;
              long long v117 = (unsigned __int16 ***)(8 * v123);
            }
            uint64_t v138 = *(void *)(v106 + 32);
            uint64_t v128 = *(void *)(v106 + 40);
            uint64_t v139 = v128 - v138;
            if (v128 == v138) {
              goto LABEL_218;
            }
            unint64_t v140 = v139 - 8;
            if ((unint64_t)(v139 - 8) < 0x38)
            {
              long long v132 = v117;
            }
            else
            {
              long long v132 = v117;
              if ((unint64_t)(v128 - (void)v117) >= 0x20)
              {
                uint64_t v141 = (v140 >> 3) + 1;
                long long v142 = v117 - 2;
                double v143 = (long long *)(v128 - 16);
                uint64_t v144 = v141 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v145 = *v143;
                  *((_OWORD *)v142 - 1) = *(v143 - 1);
                  *(_OWORD *)long long v142 = v145;
                  v142 -= 4;
                  v143 -= 2;
                  v144 -= 4;
                }
                while (v144);
                long long v132 = &v117[-(v141 & 0x3FFFFFFFFFFFFFFCLL)];
                v128 -= 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
                if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_224;
                }
              }
            }
            do
            {
              unint64_t v147 = *(unsigned __int16 ***)(v128 - 8);
              v128 -= 8;
              *--long long v132 = v147;
            }
            while (v128 != v138);
LABEL_224:
            uint64_t v128 = *(void *)(v106 + 32);
            goto LABEL_225;
          }
LABEL_538:
          if (v478 != v477) {
            break;
          }
          (*(void (**)(void *))(v477[0] + 32))(v477);
          uint64_t v412 = v424;
          if (v424) {
            goto LABEL_544;
          }
LABEL_120:
          uint64_t v61 = v415 + 1;
          if (v415 + 1 == v413) {
            return;
          }
        }
        if (v478) {
          (*(void (**)(void))(*v478 + 40))();
        }
        uint64_t v412 = v424;
        if (!v424) {
          goto LABEL_120;
        }
LABEL_544:
        if (!atomic_fetch_add(&v412->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
          std::__shared_weak_count::__release_weak(v412);
        }
        goto LABEL_120;
      }
    }
  }
}

void sub_1A1EBF9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1EBF9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23)
  {
    if (!atomic_fetch_add(&a23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void *md::featureIdPredicate(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t result = operator new(0x20uLL);
  if (a3) {
    uint64_t v15 = (uint64_t (**)(void))&unk_1EF577910;
  }
  else {
    uint64_t v15 = (uint64_t (**)(void))&unk_1EF577958;
  }
  void *result = v15;
  result[1] = a6;
  *((unsigned char *)result + 16) = a4;
  result[3] = a7;
  uint64_t v30 = result;
  if (!a5) {
    goto LABEL_13;
  }
  if ((a2 - 1) >= 2)
  {
    if (!a2)
    {
      uint64_t v26 = a5;
      uint8x8_t v20 = (void *)v15[2]();
      float v28 = v20;
      *(void *)(a1 + 24) = 0;
      uint64_t v21 = operator new(0x30uLL);
      uint64_t v18 = v21;
      void *v21 = &unk_1EF5743E8;
      v21[1] = a5;
      if (v20)
      {
        uint64_t v19 = v27;
        if (v20 != v27)
        {
          v21[5] = v20;
          float v28 = 0;
          goto LABEL_15;
        }
        v21[5] = v21 + 2;
        unk_1EF574400(v27);
        uint64_t v22 = v28;
        *(void *)(a1 + 24) = v18;
        if (v22 == v27)
        {
          uint64_t v23 = v27[0];
          goto LABEL_27;
        }
LABEL_24:
        if (v22) {
          (*(void (**)(void *))(*v22 + 40))(v22);
        }
        goto LABEL_16;
      }
LABEL_14:
      v18[5] = 0;
      goto LABEL_15;
    }
LABEL_13:
    *(void *)(a1 + 24) = result;
    return result;
  }
  uint64_t v16 = (void *)v15[2]();
  unint64_t v25 = v16;
  *(void *)(a1 + 24) = 0;
  uint64_t v17 = operator new(0x30uLL);
  uint64_t v18 = v17;
  *uint64_t v17 = &unk_1EF5743A0;
  v17[1] = a5;
  if (!v16) {
    goto LABEL_14;
  }
  uint64_t v19 = v24;
  if (v16 != v24)
  {
    v17[5] = v16;
    unint64_t v25 = 0;
LABEL_15:
    *(void *)(a1 + 24) = v18;
    goto LABEL_16;
  }
  v17[5] = v17 + 2;
  unk_1EF5743B8(v24);
  uint64_t v22 = v25;
  *(void *)(a1 + 24) = v18;
  if (v22 != v24) {
    goto LABEL_24;
  }
  uint64_t v23 = v24[0];
LABEL_27:
  (*(void (**)(void *))(v23 + 32))(v19);
LABEL_16:
  uint64_t result = v30;
  if (v30 == v29) {
    return (void *)(*(uint64_t (**)(void *))(v29[0] + 32))(v29);
  }
  if (v30) {
    return (void *)(*(uint64_t (**)(void))(*v30 + 40))();
  }
  return result;
}

void sub_1A1EBFF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}::~unordered_set((uint64_t)va);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(unsigned long long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 24);
  unint64_t v6 = (((void)v4 << 6) + ((unint64_t)v4 >> 2) + v5 - 0x61C8864680B583EBLL) ^ (unint64_t)v4;
  *(void *)(a2 + 8) = v6;
  if (std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique_prepare[abi:nn180100]((uint64_t)a1, v6, v4, v5))
  {
    return 0;
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  unint64_t v9 = *(void *)(a2 + 8);
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v8) {
      v9 %= *(void *)&v8;
    }
  }
  else
  {
    v9 &= *(void *)&v8 - 1;
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v9);
  if (v11)
  {
    *(void *)a2 = *v11;
LABEL_15:
    *uint64_t v11 = a2;
    goto LABEL_16;
  }
  *(void *)a2 = a1[2];
  a1[2] = a2;
  *(void *)(*a1 + 8 * v9) = a1 + 2;
  if (*(void *)a2)
  {
    unint64_t v12 = *(void *)(*(void *)a2 + 8);
    if (v10.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v8) {
        v12 %= *(void *)&v8;
      }
    }
    else
    {
      v12 &= *(void *)&v8 - 1;
    }
    uint64_t v11 = (void *)(*a1 + 8 * v12);
    goto LABEL_15;
  }
LABEL_16:
  ++a1[3];
  return 1;
}

uint64_t **std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique_prepare[abi:nn180100](uint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = a2 % v5;
      if (v5 > a2) {
        unint64_t v7 = a2;
      }
    }
    else
    {
      unint64_t v7 = (v5 - 1) & a2;
    }
    int8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v7);
    if (v8)
    {
      uint64_t result = *v8;
      if (*v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = result[1];
            if (v13 == (uint64_t *)a2)
            {
              if (result[2] == a3 && *((unsigned __int8 *)result + 24) == a4) {
                return result;
              }
            }
            else if (((unint64_t)v13 & (v5 - 1)) != v7)
            {
              goto LABEL_27;
            }
            uint64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)result[1];
          if (v11 == a2)
          {
            if (result[2] == a3 && *((unsigned __int8 *)result + 24) == a4) {
              return result;
            }
          }
          else
          {
            if (v11 >= v5) {
              v11 %= v5;
            }
            if (v11 != v7) {
              break;
            }
          }
          uint64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_27:
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v5 && (float)(v15 * (float)v5) >= v14) {
    return 0;
  }
  BOOL v16 = 1;
  if (v5 >= 3) {
    BOOL v16 = (v5 & (v5 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v5);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (prime > v5) {
    goto LABEL_85;
  }
  if (prime >= v5) {
    return 0;
  }
  unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v5 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    unint64_t v31 = std::__next_prime(v31);
  }
  else
  {
    uint64_t v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2) {
      unint64_t v31 = v33;
    }
  }
  if (prime <= v31) {
    size_t prime = v31;
  }
  if (prime >= v5) {
    return 0;
  }
  if (prime)
  {
LABEL_85:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint8x8_t v20 = operator new(8 * prime);
    uint64_t v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *(void *)(a1 + 8) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    uint64_t v24 = a1 + 16;
    uint64_t v23 = *(void **)(a1 + 16);
    if (!v23) {
      return 0;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          uint64_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          *uint64_t v23 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          uint64_t v23 = i;
          size_t v27 = v29;
        }
      }
      return 0;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    uint64_t v34 = (void *)*v23;
    if (!*v23) {
      return 0;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_66;
        }
        *uint64_t v23 = *v34;
        uint64_t v35 = 8 * v36;
        void *v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        uint64_t v34 = v23;
      }
      size_t v36 = v25;
LABEL_66:
      uint64_t v23 = v34;
      uint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        return 0;
      }
    }
  }
  int8x8_t v37 = *(void **)a1;
  *(void *)a1 = 0;
  if (v37) {
    operator delete(v37);
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}::~unordered_set(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  if (*a2) {
    BOOL v2 = *(void *)(a1 + 8) == *a2;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v6 = *a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v6);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::destroy_deallocate(v5);
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::destroy_deallocate(char *__p)
{
  BOOL v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t result = *(void *)(a1 + 40);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  *a2 = &unk_1EF5743A0;
  a2[1] = v3;
  uint64_t v4 = *(void *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      unint64_t v5 = *(uint64_t (**)(void))(**(void **)(result + 40) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 16))(*(void *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

void *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  BOOL v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1EF5743A0;
  v2[1] = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      void v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  void v2[5] = v4;
  return v2;
}

void sub_1A1EC0848(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1EF5743A0;
  uint64_t v1 = a1 + 2;
  BOOL v2 = (void *)a1[5];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1EF5743A0;
  BOOL v2 = a1 + 2;
  uint64_t v3 = (void *)a1[5];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 8) == *a2) {
    return 0;
  }
  uint64_t v5 = *a2;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(v4);
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(char *__p)
{
  BOOL v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t result = *(void *)(a1 + 40);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  *a2 = &unk_1EF5743E8;
  a2[1] = v3;
  uint64_t v4 = *(void *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(result + 40) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 16))(*(void *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

void *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  BOOL v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1EF5743E8;
  v2[1] = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      void v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  void v2[5] = v4;
  return v2;
}

void sub_1A1EC0CB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1EF5743E8;
  uint64_t v1 = a1 + 2;
  BOOL v2 = (void *)a1[5];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1EF5743E8;
  BOOL v2 = a1 + 2;
  uint64_t v3 = (void *)a1[5];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

BOOL std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(int8x8_t **)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  int8x8_t v5 = v3[11];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (*(void *)&v5 <= v2) {
      unint64_t v7 = v2 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v2;
  }
  int8x8_t v8 = *(void **)(*(void *)&v3[10] + 8 * v7);
  if (v8)
  {
    unint64_t v9 = (void *)*v8;
    if (*v8)
    {
      if (v6.u32[0] < 2uLL)
      {
        uint64_t v10 = *(void *)&v5 - 1;
        while (1)
        {
          uint64_t v12 = v9[1];
          if (v12 == v2)
          {
            if (v9[2] == v2) {
              return std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(*(void **)(a1 + 24), v2, *(unsigned char *)(a1 + 16)) == 0;
            }
          }
          else if ((v12 & v10) != v7)
          {
            return 0;
          }
          int8x8_t v8 = 0;
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return (BOOL)v8;
          }
        }
      }
      while (1)
      {
        unint64_t v11 = v9[1];
        if (v11 == v2)
        {
          if (v9[2] == v2) {
            return std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(*(void **)(a1 + 24), v2, *(unsigned char *)(a1 + 16)) == 0;
          }
        }
        else
        {
          if (v11 >= *(void *)&v5) {
            v11 %= *(void *)&v5;
          }
          if (v11 != v7) {
            return 0;
          }
        }
        int8x8_t v8 = 0;
        unint64_t v9 = (void *)*v9;
        if (!v9) {
          return (BOOL)v8;
        }
      }
    }
    return 0;
  }
  return (BOOL)v8;
}

uint64_t **std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(void *a1, unint64_t a2, unsigned __int8 a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = ((a2 << 6) + (a2 >> 2) + a3 - 0x61C8864680B583EBLL) ^ a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = ((a2 << 6) + (a2 >> 2) + a3 - 0x61C8864680B583EBLL) ^ a2;
    if (v4 >= *(void *)&v3) {
      uint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v6 = v4 & (*(void *)&v3 - 1);
  }
  unint64_t v7 = *(uint64_t ****)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      uint64_t v9 = *(void *)&v3 - 1;
      while (1)
      {
        uint64_t v13 = result[1];
        if ((uint64_t *)v4 == v13)
        {
          if (result[2] == (uint64_t *)a2 && *((unsigned __int8 *)result + 24) == a3) {
            return result;
          }
        }
        else if (((unint64_t)v13 & v9) != v6)
        {
          return 0;
        }
        uint64_t result = (uint64_t **)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = (unint64_t)result[1];
      if (v4 == v11)
      {
        if (result[2] == (uint64_t *)a2 && *((unsigned __int8 *)result + 24) == a3) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v3) {
          v11 %= *(void *)&v3;
        }
        if (v11 != v6) {
          return 0;
        }
      }
      uint64_t result = (uint64_t **)*result;
    }
    while (result);
  }
  return result;
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577910;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_1EF577910;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::~__func()
{
}

BOOL std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  int8x8_t v3 = *(int8x8_t **)(a1 + 8);
  if (v3)
  {
    if (!v2) {
      return 1;
    }
    int8x8_t v4 = v3[11];
    if (v4)
    {
      uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v6 = v2;
        if (*(void *)&v4 <= v2) {
          unint64_t v6 = v2 % *(void *)&v4;
        }
      }
      else
      {
        unint64_t v6 = (*(void *)&v4 - 1) & v2;
      }
      unint64_t v7 = *(void **)(*(void *)&v3[10] + 8 * v6);
      if (v7)
      {
        int8x8_t v8 = (void *)*v7;
        if (v8)
        {
          if (v5.u32[0] < 2uLL)
          {
            uint64_t v9 = *(void *)&v4 - 1;
            while (1)
            {
              uint64_t v11 = v8[1];
              if (v11 == v2)
              {
                if (v8[2] == v2) {
                  return 0;
                }
              }
              else if ((v11 & v9) != v6)
              {
                goto LABEL_24;
              }
              int8x8_t v8 = (void *)*v8;
              if (!v8) {
                goto LABEL_24;
              }
            }
          }
          while (1)
          {
            unint64_t v10 = v8[1];
            if (v10 == v2)
            {
              if (v8[2] == v2) {
                return 0;
              }
            }
            else
            {
              if (v10 >= *(void *)&v4) {
                v10 %= *(void *)&v4;
              }
              if (v10 != v6) {
                goto LABEL_24;
              }
            }
            int8x8_t v8 = (void *)*v8;
            if (!v8) {
              goto LABEL_24;
            }
          }
        }
      }
    }
  }
  else
  {
LABEL_24:
    if (!v2) {
      return 1;
    }
  }
  return !std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(*(void **)(a1 + 24), v2, *(unsigned char *)(a1 + 16));
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_1EF577958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func()
{
}

void non-virtual thunk to'altitude::CompleteGlobeTileSetLoader::onChildTileRemoved(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, altitude::Tile *a3)
{
}

void altitude::CompleteGlobeTileSetLoader::onChildTileRemoved(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint8x8_t v5 = (void *)((char *)this + 296);
  unint64_t v6 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 37, (unint64_t)a3);
  if (v6)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v5, v6);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 42, (unint64_t)a3);
  if (v7)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 42, v7);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  int8x8_t v8 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 32, (unint64_t)a3);
  if (v8)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 32, v8);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 47, (unint64_t)a3);
  if (v9)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)this + 47, v9);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  unint64_t v10 = (uint64_t *)*((void *)this + 68);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)((char *)this + 544);
    uint64_t v12 = (void *)*((void *)this + 68);
    do
    {
      unint64_t v13 = v12[4];
      BOOL v14 = v13 >= (unint64_t)a3;
      if (v13 >= (unint64_t)a3) {
        float v15 = v12;
      }
      else {
        float v15 = v12 + 1;
      }
      if (v14) {
        uint64_t v11 = v12;
      }
      uint64_t v12 = (void *)*v15;
    }
    while (*v15);
    if (v11 != (uint64_t *)((char *)this + 544) && v11[4] <= (unint64_t)a3)
    {
      BOOL v16 = (uint64_t *)v11[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        unint64_t v18 = v11;
        do
        {
          unint64_t v17 = (uint64_t *)v18[2];
          BOOL v19 = *v17 == (void)v18;
          unint64_t v18 = v17;
        }
        while (!v19);
      }
      if (*((uint64_t **)this + 67) == v11) {
        *((void *)this + 67) = v17;
      }
      --*((void *)this + 69);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v10, v11);
      operator delete(v11);
    }
  }
  uint8x8_t v20 = (void *)((char *)this + 496);
  uint64_t v21 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v20, (unint64_t)a3);
  if (v21)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v20, v21);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
}

void non-virtual thunk to'altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader(altitude::CompleteGlobeTileSetLoader *this)
{
  altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader((altitude::CompleteGlobeTileSetLoader *)((char *)this - 40));
  JUMPOUT(0x1A6239270);
}

{
  altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader((altitude::CompleteGlobeTileSetLoader *)((char *)this - 40));
}

void altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader(altitude::CompleteGlobeTileSetLoader *this)
{
  *(void *)this = &unk_1EF56AEC0;
  unint64_t v2 = (char *)this + 40;
  *((void *)this + 5) = &unk_1EF56AF48;
  uint64_t v3 = *((void *)this + 127);
  *((void *)this + 127) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    uint64_t v4 = *((void *)this + 127);
    *((void *)this + 127) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  uint8x8_t v5 = (altitude::CompleteGlobeTileSetLoader *)*((void *)this + 126);
  if (v5 == (altitude::CompleteGlobeTileSetLoader *)((char *)this + 984))
  {
    (*(void (**)(char *))(*((void *)this + 123) + 32))((char *)this + 984);
  }
  else if (v5)
  {
    (*(void (**)(altitude::CompleteGlobeTileSetLoader *))(*(void *)v5 + 40))(v5);
  }
  unint64_t v6 = (altitude::CompleteGlobeTileSetLoader *)*((void *)this + 122);
  if (v6 == (altitude::CompleteGlobeTileSetLoader *)((char *)this + 952))
  {
    (*(void (**)(char *))(*((void *)this + 119) + 32))((char *)this + 952);
  }
  else if (v6)
  {
    (*(void (**)(altitude::CompleteGlobeTileSetLoader *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 109) = &unk_1EF558F50;
  uint64_t v7 = *((void *)this + 118);
  *((void *)this + 118) = 0;
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C4000313F17);
  }
  if (*((unsigned char *)this + 928)) {
    *((unsigned char *)this + 928) = 0;
  }
  int8x8_t v8 = (void *)*((void *)this + 113);
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      int8x8_t v8 = v9;
    }
    while (v9);
  }
  unint64_t v10 = (void *)*((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v10) {
    operator delete(v10);
  }
  *((void *)this + 99) = &unk_1EF558F50;
  uint64_t v11 = *((void *)this + 108);
  *((void *)this + 108) = 0;
  if (v11) {
    MEMORY[0x1A6239270](v11, 0x1000C4000313F17);
  }
  if (*((unsigned char *)this + 848)) {
    *((unsigned char *)this + 848) = 0;
  }
  uint64_t v12 = (void *)*((void *)this + 103);
  if (v12)
  {
    do
    {
      unint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  BOOL v14 = (void *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v14) {
    operator delete(v14);
  }
  *((void *)this + 89) = &unk_1EF558F50;
  uint64_t v15 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v15) {
    MEMORY[0x1A6239270](v15, 0x1000C4000313F17);
  }
  if (*((unsigned char *)this + 768)) {
    *((unsigned char *)this + 768) = 0;
  }
  BOOL v16 = (void *)*((void *)this + 93);
  if (v16)
  {
    do
    {
      unint64_t v17 = (void *)*v16;
      operator delete(v16);
      BOOL v16 = v17;
    }
    while (v17);
  }
  unint64_t v18 = (void *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = *((void *)this + 85);
  if (v19)
  {
    uint64_t v20 = *((void *)this + 86);
    uint64_t v21 = (void *)*((void *)this + 85);
    if (v20 != v19)
    {
      do
      {
        uint64_t v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v20 -= 16;
      }
      while (v20 != v19);
      uint64_t v21 = (void *)*((void *)this + 85);
    }
    *((void *)this + 86) = v19;
    operator delete(v21);
  }
  uint64_t v23 = *((void *)this + 82);
  if (v23)
  {
    uint64_t v24 = *((void *)this + 83);
    size_t v25 = (void *)*((void *)this + 82);
    if (v24 != v23)
    {
      do
      {
        size_t v26 = *(std::__shared_weak_count **)(v24 - 8);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        v24 -= 16;
      }
      while (v24 != v23);
      size_t v25 = (void *)*((void *)this + 82);
    }
    *((void *)this + 83) = v23;
    operator delete(v25);
  }
  uint64_t v27 = *((void *)this + 79);
  if (v27)
  {
    uint64_t v28 = *((void *)this + 80);
    size_t v29 = (void *)*((void *)this + 79);
    if (v28 != v27)
    {
      do
      {
        uint64_t v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        v28 -= 24;
      }
      while (v28 != v27);
      size_t v29 = (void *)*((void *)this + 79);
    }
    *((void *)this + 80) = v27;
    operator delete(v29);
  }
  unint64_t v31 = (void *)*((void *)this + 73);
  if (v31)
  {
    *((void *)this + 74) = v31;
    operator delete(v31);
  }
  uint8x8_t v32 = (void *)*((void *)this + 70);
  if (v32)
  {
    *((void *)this + 71) = v32;
    operator delete(v32);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 68));
  uint64_t v33 = (void *)*((void *)this + 64);
  if (v33)
  {
    do
    {
      uint64_t v34 = (void *)*v33;
      operator delete(v33);
      uint64_t v33 = v34;
    }
    while (v34);
  }
  uint64_t v35 = (void *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v35) {
    operator delete(v35);
  }
  size_t v36 = (void *)*((void *)this + 59);
  if (v36)
  {
    do
    {
      int8x8_t v37 = (void *)*v36;
      operator delete(v36);
      size_t v36 = v37;
    }
    while (v37);
  }
  uint8x8_t v38 = (void *)*((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v38) {
    operator delete(v38);
  }
  uint64_t v39 = (void *)*((void *)this + 54);
  if (v39)
  {
    do
    {
      uint64_t v40 = (void *)*v39;
      operator delete(v39);
      uint64_t v39 = v40;
    }
    while (v40);
  }
  unsigned int v41 = (void *)*((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v41) {
    operator delete(v41);
  }
  uint64_t v42 = (void *)*((void *)this + 49);
  if (v42)
  {
    do
    {
      unint64_t v43 = (void *)*v42;
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
  uint64_t v44 = (void *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v44) {
    operator delete(v44);
  }
  unint64_t v45 = (void *)*((void *)this + 44);
  if (v45)
  {
    do
    {
      uint64_t v46 = (void *)*v45;
      operator delete(v45);
      unint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = (void *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v47) {
    operator delete(v47);
  }
  unint64_t v48 = (void *)*((void *)this + 39);
  if (v48)
  {
    do
    {
      uint64_t v49 = (void *)*v48;
      operator delete(v48);
      unint64_t v48 = v49;
    }
    while (v49);
  }
  unint64_t v50 = (void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v50) {
    operator delete(v50);
  }
  uint64_t v51 = (void *)*((void *)this + 34);
  if (v51)
  {
    do
    {
      unint64_t v52 = (void *)*v51;
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  uint64_t v53 = (void *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v53) {
    operator delete(v53);
  }
  uint64_t v54 = (std::__shared_weak_count *)*((void *)this + 30);
  if (!v54 || atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unsigned int v55 = (void *)*((void *)this + 15);
    if (!v55) {
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
  std::__shared_weak_count::__release_weak(v54);
  unsigned int v55 = (void *)*((void *)this + 15);
  if (v55)
  {
LABEL_98:
    *((void *)this + 16) = v55;
    operator delete(v55);
  }
LABEL_99:
  *(void *)this = &unk_1EF568530;
  *((void *)this + 5) = &unk_1EF5685A0;
  uint64_t v56 = *((void *)this + 6);
  if (v56) {
    altitude::TileManager::unregisterTileListener(v56, (uint64_t)v2);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 12));
  int v57 = (void *)*((void *)this + 7);
  if (v57)
  {
    *((void *)this + 8) = v57;
    operator delete(v57);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader(this);
  JUMPOUT(0x1A6239270);
}

void altitude::CompleteGlobeTileSetLoader::loadMesh(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, int a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (unsigned char *)*((void *)a2 + 41);
  if (!v6) {
    operator new();
  }
  if (!v6[282])
  {
    *((_DWORD *)a2 + 97) = *(_DWORD *)(*((void *)this + 4) + 88);
    *((unsigned char *)this + 620) = 1;
    char v7 = (*(uint64_t (**)(unsigned char *))(*(void *)v6 + 48))(v6);
    if (v7) {
      goto LABEL_132;
    }
    uint64_t v8 = *((void *)a2 + 41);
    if (v6[296])
    {
      if (!v8) {
        operator new();
      }
      uint64_t v9 = *((void *)a2 + 36);
      *(_OWORD *)uint64_t v96 = *(_OWORD *)((char *)a2 + 392);
      uint64_t v97 = v9;
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      __p.__r_.__value_.__s.__data_[2] = 0;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = 0;
      (*(void (**)(void *__return_ptr))(**((void **)this + 19) + 104))(&v90);
      int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v90);
      if (Status)
      {
        if (Status == 4)
        {
          *(void *)unint64_t v93 = 0;
          uint64_t v94 = 0;
          uint64_t v88 = 0;
          unsigned int v89 = 0;
          uint64_t v104 = 0;
          uint64_t v105 = 0;
          *(void *)long long buf = &v104;
          uint64_t v85 = 0;
          float v86 = 0;
          if (altitude::HeightRequestManager::getResult(*((void *)this + 19), (uint64_t)v96, (uint64_t)v93, (uint64_t)&v88, (uint64_t)buf, (uint64_t)&v85)&& *(void *)v93)
          {
            unint64_t v12 = *(void *)(v8 + 120);
            if (v12)
            {
              unint64_t v13 = (__n128 *)*((void *)this + 83);
              if ((unint64_t)v13 >= *((void *)this + 84))
              {
                uint64_t v15 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 656, *(__n128 *)(v8 + 120));
              }
              else
              {
                v13->n128_u64[0] = v12;
                unint64_t v14 = *(void *)(v8 + 128);
                v13->n128_u64[1] = v14;
                if (v14) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v15 = v13 + 1;
              }
              *((void *)this + 83) = v15;
            }
            altitude::GlobeTileComponent::setGeometryElement((altitude::GlobeTileComponent *)v8, (uint64_t *)v93);
            uint64_t v62 = v85;
            uint64_t v61 = v86;
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v63 = *(std::__shared_weak_count **)(v8 + 112);
            *(void *)(v8 + 104) = v62;
            *(void *)(v8 + 112) = v61;
            if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
            if ((uint8_t *)(v8 + 24) != buf) {
              std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v8 + 24), *(void **)buf, &v104);
            }
            goto LABEL_94;
          }
          *(unsigned char *)(v8 + 282) = 1;
          *(unsigned char *)(v8 + 280) = 1;
          double v44 = *(double *)(v8 + 288) + *(double *)(v8 + 288);
          *(double *)(v8 + 288) = v44;
          double Current = CFAbsoluteTimeGetCurrent();
          uint64_t v46 = *((void *)this + 127);
          std::mutex::lock((std::mutex *)(v46 + 16));
          if (*(unsigned char *)(v46 + 96))
          {
            double v47 = *(double *)(v46 + 88);
            std::mutex::unlock((std::mutex *)(v46 + 16));
            if (Current + v44 >= v47) {
              goto LABEL_81;
            }
          }
          else
          {
            std::mutex::unlock((std::mutex *)(v46 + 16));
          }
          (*(void (**)(void, void, double))(**((void **)this + 127) + 24))(*((void *)this + 127), 0, v44);
LABEL_81:
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          id v60 = GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)char v100 = 67109632;
            *(_DWORD *)&v100[4] = *(_DWORD *)&v96[4];
            LOWORD(v101) = 1024;
            *(_DWORD *)((char *)&v101 + 2) = *(_DWORD *)&v96[8];
            HIWORD(v101) = 1024;
            LODWORD(v102) = *(_DWORD *)v96;
            _os_log_impl(&dword_1A1780000, v60, OS_LOG_TYPE_ERROR, "Got no actor when loading height mesh for tile %u %u %u", v100, 0x14u);
          }
LABEL_94:
          uint64_t v64 = v86;
          if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v104);
          uint64_t v65 = v89;
          if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          uint64_t v66 = v94;
          if (!v94) {
            goto LABEL_127;
          }
          goto LABEL_125;
        }
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        unint64_t v31 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109632;
          *(_DWORD *)&buf[4] = *(_DWORD *)&v96[4];
          LOWORD(v104) = 1024;
          *(_DWORD *)((char *)&v104 + 2) = *(_DWORD *)&v96[8];
          HIWORD(v104) = 1024;
          LODWORD(v105) = *(_DWORD *)v96;
          _os_log_impl(&dword_1A1780000, v31, OS_LOG_TYPE_ERROR, "Failed to load height map for tile  %u %u %u", buf, 0x14u);
        }
        *(unsigned char *)(v8 + 282) = 1;
        *(unsigned char *)(v8 + 280) = 1;
        double v32 = *(double *)(v8 + 288) + *(double *)(v8 + 288);
        *(double *)(v8 + 288) = v32;
        double v33 = CFAbsoluteTimeGetCurrent();
        uint64_t v34 = *((void *)this + 127);
        std::mutex::lock((std::mutex *)(v34 + 16));
        if (*(unsigned char *)(v34 + 96))
        {
          double v35 = *(double *)(v34 + 88);
          std::mutex::unlock((std::mutex *)(v34 + 16));
          v11.n128_f64[0] = v33 + v32;
          if (v33 + v32 >= v35) {
            goto LABEL_127;
          }
        }
        else
        {
          std::mutex::unlock((std::mutex *)(v34 + 16));
        }
        (*(void (**)(void, void, double))(**((void **)this + 127) + 24))(*((void *)this + 127), 0, v32);
      }
LABEL_127:
      unsigned int v90 = off_1EF5677B0;
      if (v91) {
        atomic_fetch_add((atomic_uint *volatile)(v91 + 128), 0xFFFFFFFF);
      }
      uint64_t v76 = v92;
      if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v11);
        std::__shared_weak_count::__release_weak(v76);
      }
LABEL_132:
      uint64_t v77 = *((void *)a2 + 42);
      if (*(unsigned char *)(*((void *)this + 23) + 136))
      {
        if (!v77) {
          operator new();
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v77 + 48))(v77) & 1) == 0) {
          altitude::CompleteGlobeTileSetLoader::loadRoads(this, a2);
        }
        uint64_t v78 = *((void *)this + 25);
        if (v78 && *(unsigned char *)(v78 + 92))
        {
          uint64_t v79 = *((void *)a2 + 43);
          if (!v79) {
            operator new();
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v79 + 48))(v79) & 1) == 0
            && (*(unsigned int (**)(uint64_t))(*(void *)v77 + 48))(v77))
          {
            altitude::CompleteGlobeTileSetLoader::loadTraffic(this, a2);
          }
LABEL_148:
          uint64_t v81 = *((void *)a2 + 44);
          if (!v81) {
            operator new();
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v81 + 48))(v81) & 1) == 0) {
            altitude::CompleteGlobeTileSetLoader::loadLabelData(this, a2);
          }
          uint64_t v82 = *((void *)a2 + 45);
          if (*(unsigned char *)(*((void *)this + 27) + 104))
          {
            if (!v82) {
              operator new();
            }
            int v83 = *(md::realistic::OverlayRenderLayer **)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 40)
                                                        + 48);
            if (md::realistic::OverlayRenderLayer::tileNeedsRefresh(v83, a2))
            {
              md::realistic::OverlayRenderLayer::stageLoadOperation(v83, a2, a3);
              *((unsigned char *)this + 620) = 1;
            }
          }
          else if (v82)
          {
            (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
            *((void *)a2 + 45) = 0;
          }
          return;
        }
      }
      else if (v77)
      {
        (*(void (**)(void))(*(void *)v77 + 8))(*((void *)a2 + 42));
        *((void *)a2 + 42) = 0;
      }
      uint64_t v80 = *((void *)a2 + 43);
      if (v80)
      {
        (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
        *((void *)a2 + 43) = 0;
      }
      goto LABEL_148;
    }
    if (!v8) {
      operator new();
    }
    unsigned int v84 = a3;
    BOOL v16 = (void *)*((void *)this + 15);
    unint64_t v17 = (void *)*((void *)this + 16);
    if (v16 != v17)
    {
      unint64_t v18 = (unint64_t *)((char *)a2 + 160);
      int v19 = 1;
      while (1)
      {
        uint64_t v21 = (*(uint64_t (**)(void, altitude::CompleteGlobeTileSetLoader *, uint64_t))(*(void *)*v16 + 24))(*v16, this, 0xFFFFFFFFLL);
        if (!*(unsigned char *)(v21 + 1290)) {
          goto LABEL_24;
        }
        unsigned int v22 = *((_DWORD *)this + 152);
        unint64_t v23 = *v18;
        if (*v18)
        {
          if (v23 >= 3)
          {
            uint64_t v24 = 0;
            uint64_t v25 = *((void *)a2 + 33);
            size_t v26 = (void *)(v25 + 16);
            while (*v26 != v21)
            {
              ++v24;
              v26 += 6;
              if (v23 == v24) {
                goto LABEL_35;
              }
            }
            uint64_t v20 = (altitude::TileView *)(v25 + 48 * v24);
            goto LABEL_23;
          }
          if (*((void *)a2 + 23) == v21)
          {
            unsigned int v30 = 0;
            goto LABEL_40;
          }
          if (v23 != 1 && *((void *)a2 + 29) == v21) {
            break;
          }
        }
LABEL_35:
        *(void *)uint64_t v96 = &unk_1EF56B5B8;
        *(void *)&v96[8] = a2;
        uint64_t v97 = v21;
        __p.__r_.__value_.__r.__words[0] = 1065353216;
        __p.__r_.__value_.__s.__data_[8] = 1;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        __p.__r_.__value_.__s.__data_[16] = 0;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 0;
        karo::SizedArray<altitude::TileView,2>::push_back((char *)a2 + 160, (uint64_t)v96);
        unint64_t v27 = *((void *)a2 + 20);
        unint64_t v28 = v27 - 1;
        if (v27 < 3)
        {
          size_t v29 = (char *)a2 + 48 * v28;
          goto LABEL_41;
        }
        uint64_t v20 = (altitude::TileView *)(*((void *)a2 + 33) + 48 * v28);
LABEL_23:
        v19 &= altitude::TileView::isCulled(v20, v22);
LABEL_24:
        if (++v16 == v17) {
          goto LABEL_50;
        }
      }
      unsigned int v30 = 1;
LABEL_40:
      size_t v29 = (char *)a2 + 48 * v30;
LABEL_41:
      uint64_t v20 = (altitude::TileView *)(v29 + 168);
      goto LABEL_23;
    }
    LOBYTE(v19) = 1;
LABEL_50:
    unsigned __int8 v36 = v19 & 1;
    a3 = v84;
    altitude::C3bRequestManager::requestC3b((uint64_t)&v90, *((void *)this + 18), (long long *)((char *)a2 + 392), *((void *)a2 + 36), *(unsigned char *)(v8 + 297), v36, v84, 1u);
    int v37 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v90);
    if (v37)
    {
      if (v37 != 4) {
        goto LABEL_127;
      }
      uint64_t v88 = 0;
      unsigned int v89 = 0;
      *(void *)long long buf = 0;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      char v101 = 0;
      uint64_t v102 = 0;
      *(void *)char v100 = &v101;
      LOWORD(v85) = 0;
      __int16 v87 = 0;
      uint64_t v38 = *((void *)a2 + 36);
      int v39 = *(_DWORD *)(v38 + 168);
      *(_OWORD *)uint64_t v96 = *(_OWORD *)((char *)a2 + 392);
      LODWORD(v97) = v39;
      if (*(char *)(v38 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v38 + 40), *(void *)(v38 + 48));
      }
      else {
        std::string __p = *(std::string *)(v38 + 40);
      }
      char v99 = 0;
      if (altitude::C3bRequestManager::getResult(*((void *)this + 18), (uint64_t)v96, (uint64_t)&v88, (uint64_t)buf, (uint64_t)v100, &v85, &v87)&& v88)
      {
        unint64_t v48 = *(void *)(v8 + 120);
        if (v48)
        {
          uint64_t v49 = (__n128 *)*((void *)this + 83);
          if ((unint64_t)v49 >= *((void *)this + 84))
          {
            uint64_t v51 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 656, *(__n128 *)(v8 + 120));
          }
          else
          {
            v49->n128_u64[0] = v48;
            unint64_t v50 = *(void *)(v8 + 128);
            v49->n128_u64[1] = v50;
            if (v50) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v51 = v49 + 1;
          }
          *((void *)this + 83) = v51;
        }
        altitude::GlobeTileComponent::setGeometryElement((altitude::GlobeTileComponent *)v8, &v88);
        if ((uint8_t *)(v8 + 24) != v100) {
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v8 + 24), *(void **)v100, &v101);
        }
        __int16 v71 = v87;
        *(_WORD *)(v8 + 298) = v85;
        *(_WORD *)(v8 + 300) = v71;
        goto LABEL_113;
      }
      *(unsigned char *)(v8 + 282) = 1;
      *(unsigned char *)(v8 + 280) = 1;
      double v52 = *(double *)(v8 + 288) + *(double *)(v8 + 288);
      *(double *)(v8 + 288) = v52;
      double v53 = CFAbsoluteTimeGetCurrent();
      uint64_t v54 = *((void *)this + 127);
      std::mutex::lock((std::mutex *)(v54 + 16));
      if (*(unsigned char *)(v54 + 96))
      {
        double v55 = *(double *)(v54 + 88);
        std::mutex::unlock((std::mutex *)(v54 + 16));
        if (v53 + v52 >= v55) {
          goto LABEL_104;
        }
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v54 + 16));
      }
      (*(void (**)(void, void, double))(**((void **)this + 127) + 24))(*((void *)this + 127), 0, v52);
LABEL_104:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      BOOL v67 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        int v68 = *((_DWORD *)a2 + 99);
        int v69 = *((_DWORD *)a2 + 100);
        int v70 = *((_DWORD *)a2 + 98);
        *(_DWORD *)unint64_t v93 = 67109632;
        *(_DWORD *)&v93[4] = v68;
        LOWORD(v94) = 1024;
        *(_DWORD *)((char *)&v94 + 2) = v69;
        HIWORD(v94) = 1024;
        int v95 = v70;
        _os_log_impl(&dword_1A1780000, v67, OS_LOG_TYPE_ERROR, "Got no actor when loading c3m mesh for tile %u %u %u", v93, 0x14u);
      }
LABEL_113:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v101);
      int32x2_t v72 = *(void **)buf;
      if (*(void *)buf)
      {
        uint64_t v73 = v104;
        unsigned int v74 = *(void **)buf;
        if (v104 != *(void **)buf)
        {
          do
          {
            int32x4_t v75 = (std::__shared_weak_count *)*(v73 - 1);
            if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
            v73 -= 2;
          }
          while (v73 != v72);
          unsigned int v74 = *(void **)buf;
        }
        uint64_t v104 = v72;
        operator delete(v74);
      }
      uint64_t v66 = v89;
      if (!v89) {
        goto LABEL_127;
      }
LABEL_125:
      if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      goto LABEL_127;
    }
    *(unsigned char *)(v8 + 282) = 1;
    *(unsigned char *)(v8 + 280) = 1;
    double v40 = *(double *)(v8 + 288) + *(double *)(v8 + 288);
    *(double *)(v8 + 288) = v40;
    double v41 = CFAbsoluteTimeGetCurrent();
    uint64_t v42 = *((void *)this + 127);
    std::mutex::lock((std::mutex *)(v42 + 16));
    if (*(unsigned char *)(v42 + 96))
    {
      double v43 = *(double *)(v42 + 88);
      std::mutex::unlock((std::mutex *)(v42 + 16));
      if (v41 + v40 >= v43) {
        goto LABEL_75;
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(v42 + 16));
    }
    (*(void (**)(void, void, double))(**((void **)this + 127) + 24))(*((void *)this + 127), 0, v40);
LABEL_75:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v56 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      int v57 = *((_DWORD *)a2 + 99);
      int v58 = *((_DWORD *)a2 + 100);
      int v59 = *((_DWORD *)a2 + 98);
      *(_DWORD *)uint64_t v96 = 67109632;
      *(_DWORD *)&v96[4] = v57;
      *(_WORD *)&v96[8] = 1024;
      *(_DWORD *)&v96[10] = v58;
      *(_WORD *)&v96[14] = 1024;
      LODWORD(v97) = v59;
      _os_log_impl(&dword_1A1780000, v56, OS_LOG_TYPE_ERROR, "Inavlidating geometry for %u %u %u", v96, 0x14u);
    }
    goto LABEL_127;
  }
}

void altitude::CompleteGlobeTileSetLoader::loadRoads(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2)
{
  char v4 = 0;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 42);
  uint64_t v6 = *((void *)a2 + 49);
  int v7 = *((_DWORD *)a2 + 100);
  v24[0] = 20;
  v24[1] = 0;
  void v24[2] = v6;
  int v25 = v7;
  int v26 = 0;
  uint64_t v8 = *((void *)this + 23);
  LOBYTE(v7) = atomic_load((unsigned __int8 *)(*(void *)(v8 + 96) + 224));
  if (v7) {
    char v4 = (*(uint64_t (**)(void, void *))(**(void **)(v8 + 96) + 112))(*(void *)(v8 + 96), v24);
  }
  *(unsigned char *)(v5 + 120) = v4;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5) & 1) == 0)
  {
    (*(void (**)(void *__return_ptr))(**((void **)this + 23) + 80))(&v21);
    int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v21);
    if (Status)
    {
      if (Status == 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        *(void *)long long buf = &v28;
        altitude::RoadRequestManager::getRoadTile(*((pthread_mutex_t ***)this + 23), (uint64_t)v24, &v19, (uint64_t)buf);
        uint64_t v11 = v19;
        unint64_t v10 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(void *)(v5 + 88)) {
          (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 16) + 424) + 24))(*(void *)(*(void *)(v5 + 16) + 424), *(void *)(v5 + 16), v5);
        }
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v12 = *(std::__shared_weak_count **)(v5 + 96);
        *(void *)(v5 + 88) = v11;
        *(void *)(v5 + 96) = v10;
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          uint64_t v11 = *(void *)(v5 + 88);
        }
        if (v11) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(*(void *)(v5 + 16) + 424) + 16))(*(void *)(*(void *)(v5 + 16) + 424), *(void *)(v5 + 16), v5, v11);
        }
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        if ((uint8_t *)(v5 + 24) != buf) {
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v5 + 24), *(void **)buf, &v28);
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v28);
        unint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      unint64_t v14 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        int v15 = *((_DWORD *)a2 + 99);
        int v16 = *((_DWORD *)a2 + 100);
        int v17 = *((_DWORD *)a2 + 98);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&buf[4] = v15;
        LOWORD(v28) = 1024;
        *(_DWORD *)((char *)&v28 + 2) = v16;
        HIWORD(v28) = 1024;
        LODWORD(v29) = v17;
        _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "Failed to load road data for tile %u %u %u", buf, 0x14u);
      }
      *(unsigned char *)(v5 + 120) = 0;
    }
    uint64_t v21 = off_1EF5677B0;
    if (v22) {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 128), 0xFFFFFFFF);
    }
    unint64_t v18 = v23;
    if (v23)
    {
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void altitude::CompleteGlobeTileSetLoader::loadTraffic(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  char v4 = (uint64_t **)*((void *)a2 + 43);
  uint64_t v5 = (long long *)((char *)a2 + 392);
  if (*((_DWORD *)a2 + 101))
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 42);
    uint64_t v8 = *((void *)this + 25);
    int TileIdWithDataForTileId = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(void *)(*(void *)(v8 + 128) + 32), (long long *)((char *)a2 + 392), 22);
    uint64_t v10 = *(void *)(v8 + 136);
    *(void *)long long buf = 0;
    int v57 = 0;
    long long v58 = *v5;
    int v59 = 0;
    int v11 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v10 + 112))(v10, buf);
    BOOL v6 = 0;
    if (TileIdWithDataForTileId) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      BOOL v6 = *(void *)(v7 + 88) != 0;
    }
  }
  ((void (*)(uint64_t **, BOOL))(*v4)[16])(v4, v6);
  if (!((unsigned int (*)(uint64_t **))(*v4)[6])(v4)
    || ((unsigned int (*)(uint64_t **, void))(*v4)[17])(v4, *(unsigned int *)(*((void *)this + 25) + 160)))
  {
    (*(void (**)(void *__return_ptr))(**((void **)this + 25) + 104))(&v49);
    int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v49);
    if (!Status)
    {
      ((void (*)(uint64_t **, void))(*v4)[16])(v4, 0);
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v20 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        int v21 = *((_DWORD *)a2 + 99);
        int v22 = *((_DWORD *)a2 + 100);
        int v23 = *((_DWORD *)a2 + 98);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&buf[4] = v21;
        LOWORD(v57) = 1024;
        *(_DWORD *)((char *)&v57 + 2) = v22;
        HIWORD(v57) = 1024;
        LODWORD(v58) = v23;
        _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Failed to load traffic data for tile %u %u %u", buf, 0x14u);
      }
      goto LABEL_76;
    }
    if (Status != 4)
    {
LABEL_76:
      uint64_t v49 = off_1EF5677B0;
      if (v50) {
        atomic_fetch_add((atomic_uint *volatile)(v50 + 128), 0xFFFFFFFF);
      }
      uint64_t v42 = v51;
      if (v51)
      {
        if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      return;
    }
    double v47 = 0;
    uint64_t v48 = 0;
    uint64_t v46 = &v47;
    unint64_t v14 = (pthread_mutex_t **)*((void *)this + 25);
    pthread_mutex_lock(v14[5]);
    (*(void (**)(void **__return_ptr, pthread_mutex_t **, long long *, void))&(*v14)[1].__opaque[24])(&v54, v14, v5, 0);
    int v16 = v54;
    int v15 = v55;
    double v52 = v54;
    double v53 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(uint64_t (**)(void *))(*v16 + 40))(v16))
    {
      uint64_t v18 = v16[28];
      int v17 = (std::__shared_weak_count *)v16[29];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (void *)v16[36];
      int v57 = 0;
      *(void *)&long long v58 = 0;
      *(void *)long long buf = &v57;
      std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)buf, v19, v16 + 37);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v47);
      uint64_t v46 = *(void **)buf;
      double v47 = v57;
      uint64_t v48 = v58;
      if ((void)v58)
      {
        v57[2] = &v47;
        *(void *)long long buf = &v57;
        int v57 = 0;
        *(void *)&long long v58 = 0;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(0);
        if (!v15) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v46 = &v47;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v57);
        if (!v15) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      int v17 = 0;
      uint64_t v18 = 0;
      if (!v15) {
        goto LABEL_29;
      }
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_29:
    uint64_t v24 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    pthread_mutex_unlock(v14[5]);
    int v25 = v4[11];
    int v26 = (std::__shared_weak_count *)v4[12];
    if (v26
      && (atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (v25) {
        goto LABEL_35;
      }
    }
    else if (v25)
    {
LABEL_35:
      unint64_t v27 = (char *)*((void *)this + 80);
      unint64_t v28 = *((void *)this + 81);
      if ((unint64_t)v27 >= v28)
      {
        uint64_t v30 = (char *)*((void *)this + 79);
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v30) >> 3) + 1;
        if (v31 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v30) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v34 = 24 * v33;
        double v35 = (char *)operator new(24 * v33);
        unsigned __int8 v36 = &v35[8 * ((v27 - v30) >> 3)];
        *(void *)unsigned __int8 v36 = a2;
        *((void *)v36 + 1) = v18;
        *((void *)v36 + 2) = v17;
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v27 = (char *)*((void *)this + 80);
          uint64_t v30 = (char *)*((void *)this + 79);
        }
        int v37 = &v35[v34];
        uint64_t v29 = v36 + 24;
        if (v27 == v30)
        {
          *((void *)this + 79) = v36;
          *((void *)this + 80) = v29;
          *((void *)this + 81) = v37;
        }
        else
        {
          do
          {
            long long v38 = *(_OWORD *)(v27 - 24);
            v27 -= 24;
            *(_OWORD *)(v36 - 24) = v38;
            v36 -= 24;
            *((void *)v36 + 2) = *((void *)v27 + 2);
            *((void *)v27 + 1) = 0;
            *((void *)v27 + 2) = 0;
          }
          while (v27 != v30);
          uint64_t v30 = (char *)*((void *)this + 79);
          int v39 = (char *)*((void *)this + 80);
          *((void *)this + 79) = v36;
          *((void *)this + 80) = v29;
          for (*((void *)this + 81) = v37; v39 != v30; v39 -= 24)
          {
            double v40 = (std::__shared_weak_count *)*((void *)v39 - 1);
            if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
        }
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(void *)unint64_t v27 = a2;
        *((void *)v27 + 1) = v18;
        *((void *)v27 + 2) = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = v27 + 24;
      }
      *((void *)this + 80) = v29;
      goto LABEL_66;
    }
    v45[0] = v18;
    v45[1] = (uint64_t)v17;
    if (!v17)
    {
      altitude::TrafficTileComponent::setTrafficTile(v4, v45);
      uint64_t v41 = *((void *)a2 + 44);
      if (v41)
      {
        uint64_t v43 = v18;
        double v44 = 0;
LABEL_70:
        altitude::LabelDataTileComponent::setTrafficTile(v41, (uint64_t)&v43);
      }
LABEL_71:
      if (v4 + 3 != &v46) {
        std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(v4 + 3, v46, &v47);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v47);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      goto LABEL_76;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    altitude::TrafficTileComponent::setTrafficTile(v4, v45);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_66:
    uint64_t v41 = *((void *)a2 + 44);
    if (v41)
    {
      uint64_t v43 = v18;
      double v44 = v17;
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        altitude::LabelDataTileComponent::setTrafficTile(v41, (uint64_t)&v43);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    goto LABEL_71;
  }
}

void sub_1A1EC3A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 40));
  _Unwind_Resume(a1);
}

void altitude::CompleteGlobeTileSetLoader::loadLabelData(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 44);
  int v3 = *(_DWORD *)(*((void *)a2 + 36) + 168);
  int v35 = 0;
  *(_DWORD *)unsigned __int8 v36 = v3;
  *(void *)&v36[4] = 0;
  long long v37 = *(_OWORD *)((char *)a2 + 392);
  uint64_t v4 = *((void *)this + 26);
  char v5 = *(unsigned char *)(v4 + 136);
  if (HIDWORD(v37))
  {
    *(unsigned char *)(v2 + 80) = 0;
LABEL_14:
    *(unsigned char *)(v2 + 82) = v5;
    return;
  }
  *(void *)((char *)&buf + 4) = *(void *)v36;
  long long v43 = *(_OWORD *)((char *)a2 + 392);
  HIDWORD(buf) = *(_DWORD *)&v36[8];
  LODWORD(buf) = 13;
  int v8 = (*(uint64_t (**)(void, long long *))(**(void **)(v4 + 112) + 112))(*(void *)(v4 + 112), &buf);
  LODWORD(buf) = 68;
  int v9 = (*(uint64_t (**)(void, long long *))(**(void **)(v4 + 112) + 112))(*(void *)(v4 + 112), &buf);
  LODWORD(buf) = 1;
  int v10 = (*(uint64_t (**)(void, long long *))(**(void **)(v4 + 120) + 112))(*(void *)(v4 + 120), &buf);
  LODWORD(buf) = 20;
  int v11 = (*(uint64_t (**)(void, long long *))(**(void **)(v4 + 104) + 112))(*(void *)(v4 + 104), &buf);
  *(unsigned char *)(v2 + 80) = v8 | v9 | v10 | v11;
  if (((v8 | v9 | v10 | v11) & 1) == 0) {
    goto LABEL_14;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2) & 1) == 0)
  {
    (*(void (**)(void *__return_ptr))(**((void **)this + 26) + 80))(&v32);
    int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v32);
    if (Status)
    {
      if (Status == 4)
      {
        *((void *)&v30 + 1) = 0;
        uint64_t v31 = 0;
        *(void *)&long long v30 = (char *)&v30 + 8;
        uint64_t v13 = (pthread_mutex_t **)*((void *)this + 26);
        pthread_mutex_lock(v13[5]);
        (*(void (**)(void **__return_ptr, pthread_mutex_t **, int *, void))&(*v13)[1].__opaque[24])(&v40, v13, &v35, 0);
        uint64_t v15 = v40;
        unint64_t v14 = v41;
        long long v38 = v40;
        int v39 = v41;
        if (v41) {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(uint64_t (**)(void *))(*v15 + 40))(v15))
        {
          uint64_t v17 = v15[33];
          int v16 = (std::__shared_weak_count *)v15[34];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v18 = (void *)v15[37];
          *(void *)&long long v43 = 0;
          long long buf = (unint64_t)&buf + 8;
          std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)&buf, v18, v15 + 38);
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)&v30 + 1));
          uint64_t v19 = (void *)*((void *)&buf + 1);
          long long v30 = buf;
          uint64_t v31 = v43;
          if ((void)v43)
          {
            *(void *)(*((void *)&buf + 1) + 16) = (char *)&v30 + 8;
            *(void *)&long long buf = (char *)&buf + 8;
            *((void *)&buf + 1) = 0;
            *(void *)&long long v43 = 0;
            uint64_t v19 = 0;
          }
          else
          {
            *(void *)&long long v30 = (char *)&v30 + 8;
          }
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v19);
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = 0;
        }
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v24 = v41;
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        pthread_mutex_unlock(v13[5]);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(void *)(v2 + 88)) {
          (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v2 + 16) + 424) + 24))(*(void *)(*(void *)(v2 + 16) + 424), *(void *)(v2 + 16), v2);
        }
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v25 = *(std::__shared_weak_count **)(v2 + 96);
        *(void *)(v2 + 88) = v17;
        *(void *)(v2 + 96) = v16;
        if (v25)
        {
          if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          uint64_t v17 = *(void *)(v2 + 88);
        }
        if (v17) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(*(void *)(v2 + 16) + 424) + 16))(*(void *)(*(void *)(v2 + 16) + 424), *(void *)(v2 + 16), v2, v17);
        }
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        uint64_t v26 = *((void *)a2 + 43);
        if (v26)
        {
          unint64_t v27 = *(std::__shared_weak_count **)(v26 + 96);
          v29[0] = *(void *)(v26 + 88);
          v29[1] = v27;
          if (v27)
          {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            altitude::LabelDataTileComponent::setTrafficTile(v2, (uint64_t)v29);
            if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          else
          {
            altitude::LabelDataTileComponent::setTrafficTile(v2, (uint64_t)v29);
          }
        }
        if ((long long *)(v2 + 24) != &v30) {
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v2 + 24), (void *)v30, (void *)&v30 + 1);
        }
        *(unsigned char *)(v2 + 82) = v5;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)&v30 + 1));
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      *(unsigned char *)(v2 + 80) = 0;
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v20 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        int v21 = *((_DWORD *)a2 + 99);
        int v22 = *((_DWORD *)a2 + 100);
        int v23 = *((_DWORD *)a2 + 98);
        LODWORD(buf) = 67109632;
        DWORD1(buf) = v21;
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 10) = v22;
        HIWORD(buf) = 1024;
        LODWORD(v43) = v23;
        _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Failed to load label data for tile %u %u %u", (uint8_t *)&buf, 0x14u);
      }
      *(unsigned char *)(v2 + 82) = v5;
    }
    unint64_t v32 = off_1EF5677B0;
    if (v33) {
      atomic_fetch_add((atomic_uint *volatile)(v33 + 128), 0xFFFFFFFF);
    }
    unint64_t v28 = v34;
    if (v34)
    {
      if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1A1EC41D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 40));
  _Unwind_Resume(a1);
}

void std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (!a1[2]) {
    goto LABEL_62;
  }
  BOOL v6 = (uint64_t **)*a1;
  int v8 = a1 + 1;
  uint64_t v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  void v7[2] = 0;
  a1[2] = 0;
  a1[1] = 0;
  int v9 = v6[1] ? v6[1] : (uint64_t *)v6;
  if (!v9) {
    goto LABEL_62;
  }
  int v10 = (uint64_t *)v9[2];
  if (v10)
  {
    int v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *int v10 = 0;
      while (1)
      {
        long long v58 = (void *)v10[1];
        if (!v58) {
          break;
        }
        do
        {
          int v10 = v58;
          long long v58 = (void *)*v58;
        }
        while (v58);
      }
    }
    else
    {
      for (v10[1] = 0; v11; int v11 = (uint64_t *)v10[1])
      {
        do
        {
          int v10 = v11;
          int v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  if (a2 == a3) {
    goto LABEL_58;
  }
  BOOL v12 = a2;
  uint64_t v13 = v9;
  do
  {
    int v9 = v10;
    long long v14 = *(_OWORD *)((char *)v12 + 28);
    *(_OWORD *)((char *)v13 + 44) = *(_OWORD *)((char *)v12 + 44);
    *(_OWORD *)((char *)v13 + 28) = v14;
    uint64_t v15 = *v8;
    int v16 = (uint64_t *)(a1 + 1);
    uint64_t v17 = a1 + 1;
    if (!*v8) {
      goto LABEL_36;
    }
    unsigned int v18 = *((_DWORD *)v13 + 11);
    unsigned int v19 = *((_DWORD *)v13 + 12);
    unsigned int v20 = *((_DWORD *)v13 + 13);
    unsigned int v21 = *((_DWORD *)v13 + 14);
    unsigned int v22 = *((_DWORD *)v13 + 7);
    unsigned int v23 = *((_DWORD *)v13 + 8);
    do
    {
      while (1)
      {
        int v16 = v15;
        unsigned int v24 = *((_DWORD *)v15 + 11);
        if (v18 != v24 || v19 != *((_DWORD *)v16 + 12) || v20 != *((_DWORD *)v16 + 13) || *((_DWORD *)v16 + 14) != v21) {
          break;
        }
        unsigned int v25 = *((_DWORD *)v16 + 7);
        BOOL v26 = v22 >= v25;
        if (v22 == v25 && (unsigned int v27 = *((_DWORD *)v16 + 8), v26 = v23 >= v27, v23 == v27))
        {
          if (*((_DWORD *)v13 + 9) >= *((_DWORD *)v16 + 9)) {
            goto LABEL_26;
          }
        }
        else if (v26)
        {
          goto LABEL_26;
        }
LABEL_15:
        uint64_t v15 = (uint64_t *)*v16;
        uint64_t v17 = (uint64_t **)v16;
        if (!*v16) {
          goto LABEL_36;
        }
      }
      if (v18 < v24) {
        goto LABEL_15;
      }
      if (v18 <= v24)
      {
        unsigned int v28 = *((_DWORD *)v16 + 12);
        if (v19 < v28) {
          goto LABEL_15;
        }
        if (v19 <= v28)
        {
          unsigned int v29 = *((_DWORD *)v16 + 13);
          if (v20 < v29 || v20 <= v29 && v21 < *((_DWORD *)v16 + 14)) {
            goto LABEL_15;
          }
        }
      }
LABEL_26:
      uint64_t v15 = (uint64_t *)v16[1];
    }
    while (v15);
    uint64_t v17 = (uint64_t **)(v16 + 1);
LABEL_36:
    *uint64_t v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v16;
    *uint64_t v17 = v13;
    long long v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      uint64_t v13 = *v17;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    if (v10)
    {
      int v10 = (uint64_t *)v10[2];
      if (v10)
      {
        uint64_t v33 = (void *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *int v10 = 0;
          while (1)
          {
            uint64_t v34 = (void *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              int v10 = v34;
              uint64_t v34 = (void *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v33; uint64_t v33 = (void *)v10[1])
          {
            do
            {
              int v10 = v33;
              uint64_t v33 = (void *)*v33;
            }
            while (v33);
          }
        }
      }
    }
    else
    {
      int v10 = 0;
    }
    uint64_t v31 = (void *)v12[1];
    if (v31)
    {
      do
      {
        uint64_t v4 = v31;
        uint64_t v31 = (void *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v12[2];
        BOOL v32 = *v4 == (void)v12;
        BOOL v12 = v4;
      }
      while (!v32);
    }
    if (!v9) {
      break;
    }
    BOOL v12 = v4;
    uint64_t v13 = v9;
  }
  while (v4 != a3);
LABEL_58:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
  if (v10)
  {
    for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
      int v10 = i;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
  }
LABEL_62:
  if (v4 == a3) {
    return;
  }
  unsigned __int8 v36 = a1 + 1;
  while (2)
  {
    long long v37 = (char *)operator new(0x40uLL);
    long long v38 = (uint64_t *)v37;
    unsigned int v39 = *((_DWORD *)v4 + 7);
    unsigned int v40 = *((_DWORD *)v4 + 8);
    *((_DWORD *)v37 + 7) = v39;
    *((_DWORD *)v37 + 8) = v40;
    uint64_t v41 = *(void *)((char *)v4 + 36);
    *(void *)(v37 + 36) = v41;
    *(_OWORD *)(v37 + 44) = *(_OWORD *)((char *)v4 + 44);
    uint64_t v42 = *v36;
    long long v43 = (uint64_t *)(a1 + 1);
    uint64_t v44 = a1 + 1;
    if (!*v36) {
      goto LABEL_88;
    }
    unsigned int v45 = *((_DWORD *)v37 + 11);
    unsigned int v46 = *((_DWORD *)v37 + 12);
    unsigned int v47 = *((_DWORD *)v37 + 13);
    unsigned int v48 = *((_DWORD *)v37 + 14);
    while (2)
    {
      while (2)
      {
        long long v43 = v42;
        unsigned int v49 = *((_DWORD *)v42 + 11);
        if (v45 == v49 && v46 == *((_DWORD *)v43 + 12) && v47 == *((_DWORD *)v43 + 13) && *((_DWORD *)v43 + 14) == v48)
        {
          unsigned int v50 = *((_DWORD *)v43 + 7);
          BOOL v51 = v39 >= v50;
          if (v39 == v50 && (v52 = *((_DWORD *)v43 + 8), BOOL v51 = v40 >= v52, v40 == v52))
          {
            if (v41 >= *((_DWORD *)v43 + 9)) {
              break;
            }
          }
          else if (v51)
          {
            break;
          }
          goto LABEL_67;
        }
        if (v45 < v49
          || v45 <= v49
          && ((unsigned int v53 = *((_DWORD *)v43 + 12), v46 < v53)
           || v46 <= v53 && ((unsigned int v54 = *((_DWORD *)v43 + 13), v47 < v54) || v47 <= v54 && v48 < *((_DWORD *)v43 + 14))))
        {
LABEL_67:
          uint64_t v42 = (uint64_t *)*v43;
          uint64_t v44 = (uint64_t **)v43;
          if (!*v43) {
            goto LABEL_88;
          }
          continue;
        }
        break;
      }
      uint64_t v42 = (uint64_t *)v43[1];
      if (v42) {
        continue;
      }
      break;
    }
    uint64_t v44 = (uint64_t **)(v43 + 1);
LABEL_88:
    *(void *)long long v37 = 0;
    *((void *)v37 + 1) = 0;
    *((void *)v37 + 2) = v43;
    *uint64_t v44 = (uint64_t *)v37;
    double v55 = (uint64_t *)**a1;
    if (v55)
    {
      *a1 = v55;
      long long v38 = *v44;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v38);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v56 = (void *)v4[1];
    if (v56)
    {
      do
      {
        int v57 = v56;
        uint64_t v56 = (void *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        int v57 = (void *)v4[2];
        BOOL v32 = *v57 == (void)v4;
        uint64_t v4 = v57;
      }
      while (!v32);
    }
    uint64_t v4 = v57;
    if (v57 != a3) {
      continue;
    }
    break;
  }
}

void altitude::CompleteGlobeTileSetLoader::processTileSet(void *a1, altitude::TileSetNode *a2, unsigned int a3, unint64_t *a4, _DWORD *a5)
{
  uint64_t v9 = (uint64_t)a1;
  uint64_t v10 = a1[4];
  float v11 = *(float *)(v10 + 52);
  int v440 = *(unsigned __int8 *)(v10 + 69);
  if (a1[50])
  {
    BOOL v12 = (void *)a1[49];
    if (v12)
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        operator delete(v12);
        BOOL v12 = v13;
      }
      while (v13);
    }
    *(void *)(v9 + 392) = 0;
    uint64_t v14 = *(void *)(v9 + 384);
    if (v14)
    {
      for (uint64_t i = 0; i != v14; ++i)
        *(void *)(*(void *)(v9 + 376) + 8 * i) = 0;
    }
    *(void *)(v9 + 400) = 0;
  }
  if (*(void *)(v9 + 440))
  {
    int v16 = *(void **)(v9 + 432);
    if (v16)
    {
      do
      {
        uint64_t v17 = (void *)*v16;
        operator delete(v16);
        int v16 = v17;
      }
      while (v17);
    }
    *(void *)(v9 + 432) = 0;
    uint64_t v18 = *(void *)(v9 + 424);
    if (v18)
    {
      for (uint64_t j = 0; j != v18; ++j)
        *(void *)(*(void *)(v9 + 416) + 8 * j) = 0;
    }
    *(void *)(v9 + 440) = 0;
  }
  uint64_t v425 = (float *)(v9 + 456);
  if (*(void *)(v9 + 480))
  {
    unsigned int v20 = *(void **)(v9 + 472);
    if (v20)
    {
      do
      {
        unsigned int v21 = (void *)*v20;
        operator delete(v20);
        unsigned int v20 = v21;
      }
      while (v21);
    }
    *(void *)(v9 + 472) = 0;
    uint64_t v22 = *(void *)(v9 + 464);
    if (v22)
    {
      for (uint64_t k = 0; k != v22; ++k)
        *(void *)(*(void *)v425 + 8 * k) = 0;
    }
    *(void *)(v9 + 480) = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v9 + 544));
  uint64_t v424 = (uint64_t **)(v9 + 544);
  *(void *)(v9 + 536) = v9 + 544;
  *(void *)(v9 + 552) = 0;
  *(void *)(v9 + 544) = 0;
  if (*(void *)(v9 + 320))
  {
    unsigned int v24 = *(void **)(v9 + 312);
    if (v24)
    {
      do
      {
        unsigned int v25 = (void *)*v24;
        operator delete(v24);
        unsigned int v24 = v25;
      }
      while (v25);
    }
    *(void *)(v9 + 312) = 0;
    uint64_t v26 = *(void *)(v9 + 304);
    if (v26)
    {
      for (uint64_t m = 0; m != v26; ++m)
        *(void *)(*(void *)(v9 + 296) + 8 * m) = 0;
    }
    *(void *)(v9 + 320) = 0;
  }
  if (*(void *)(v9 + 360))
  {
    unsigned int v28 = *(void **)(v9 + 352);
    if (v28)
    {
      do
      {
        unsigned int v29 = (void *)*v28;
        operator delete(v28);
        unsigned int v28 = v29;
      }
      while (v29);
    }
    *(void *)(v9 + 352) = 0;
    uint64_t v30 = *(void *)(v9 + 344);
    if (v30)
    {
      for (uint64_t n = 0; n != v30; ++n)
        *(void *)(*(void *)(v9 + 336) + 8 * n) = 0;
    }
    *(void *)(v9 + 360) = 0;
  }
  if (*(void *)(v9 + 280))
  {
    BOOL v32 = *(void **)(v9 + 272);
    if (v32)
    {
      do
      {
        uint64_t v33 = (void *)*v32;
        operator delete(v32);
        BOOL v32 = v33;
      }
      while (v33);
    }
    *(void *)(v9 + 272) = 0;
    uint64_t v34 = *(void *)(v9 + 264);
    if (v34)
    {
      for (iuint64_t i = 0; ii != v34; ++ii)
        *(void *)(*(void *)(v9 + 256) + 8 * ii) = 0;
    }
    *(void *)(v9 + 280) = 0;
  }
  long long v37 = (uint64_t *)*((void *)a2 + 5);
  unsigned __int8 v36 = (uint64_t *)*((void *)a2 + 6);
  if (v37 == v36) {
    goto LABEL_921;
  }
  unint64_t v422 = (float *)(v9 + 496);
  uint64_t v423 = (float *)(v9 + 296);
  uint64_t v419 = v9 + 656;
  int64x2_t v420 = a4 + 1;
  float v421 = (float *)(v9 + 336);
  uint64_t v429 = a5;
  unint64_t v439 = (altitude::CompleteGlobeTileSetLoader *)v9;
  unsigned int v441 = a3;
  double v435 = a4;
  while (2)
  {
    uint64_t v38 = *v37;
    if (!*v37) {
      goto LABEL_46;
    }
    unsigned int v39 = *(_DWORD *)(v9 + 616);
    unint64_t v445 = 0;
    int64x2_t v459 = 0;
    uint64_t v460 = 0;
    std::string __p = 0;
    altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v9, a5, a4, v38, &v445, a3, 0);
    LODWORD(v461) = 0;
    unint64_t v40 = v445;
    if (v445)
    {
      if (v445 < 5)
      {
        char v41 = *(_DWORD *)(v448 + 1296) != 0 && v447[0] == 0;
        float v42 = v446;
        if (!v41) {
          float v42 = 0.0;
        }
        if (v445 != 1)
        {
          float v47 = v449;
          float v48 = fminf(v449, v42);
          if (*(_DWORD *)(v448 + 1296) != 0 && v447[0] == 0) {
            float v47 = v48;
          }
          if (*(_DWORD *)(v451 + 1296) != 0 && v450 == 0) {
            float v42 = v47;
          }
          v41 |= *(_DWORD *)(v451 + 1296) != 0 && v450 == 0;
          if (v445 != 2)
          {
            float v49 = v452;
            float v50 = fminf(v452, v42);
            if (v41) {
              float v49 = v50;
            }
            if (*(_DWORD *)(v454 + 1296) != 0 && v453 == 0) {
              float v42 = v49;
            }
            v41 |= *(_DWORD *)(v454 + 1296) != 0 && v453 == 0;
            if (v445 != 3 && *(_DWORD *)(v457 + 1296) && !v456)
            {
              float v42 = fminf(v455, v42);
              if ((v41 & 1) == 0) {
                float v42 = v455;
              }
              char v41 = 1;
            }
          }
        }
      }
      else
      {
        char v41 = 0;
        float v42 = 0.0;
        unsigned int v43 = 1;
        uint64_t v44 = (float *)__p;
        do
        {
          if (*(_DWORD *)(*((void *)v44 + 1) + 1296) && !*((unsigned char *)v44 + 4))
          {
            unsigned int v45 = v44;
            if (v41)
            {
              if (*v44 >= v42) {
                unsigned int v45 = (float *)&v461;
              }
              else {
                unsigned int v45 = v44;
              }
            }
            float v42 = *v45;
            *(float *)&long long v461 = *v45;
            char v41 = 1;
          }
          v44 += 4;
          BOOL v68 = v445 > v43++;
        }
        while (v68);
      }
      if (v41) {
        float v46 = v42;
      }
      else {
        float v46 = 1.0;
      }
    }
    else
    {
      float v46 = 1.0;
    }
    unsigned int v52 = (uint64_t *)*((void *)a2 + 9);
    unint64_t v51 = *((void *)a2 + 10);
    char v443 = (altitude::Tile *)v38;
    uint64_t v442 = v37;
    if ((unint64_t)v52 < v51)
    {
      *unsigned int v52 = v38;
      *((void *)a2 + 9) = v52 + 1;
      if (v40) {
        goto LABEL_84;
      }
LABEL_126:
      if (v440)
      {
        float v78 = 1.0;
LABEL_205:
        BOOL v95 = v78 < 40.0;
LABEL_206:
        BOOL v432 = v95;
        if (!*(unsigned char *)(v9 + 612) || *(unsigned char *)(v9 + 613)) {
          goto LABEL_208;
        }
        char v111 = 0;
        uint64_t v112 = 0;
        unint64_t v113 = 0;
        unsigned int v430 = *(_DWORD *)(v9 + 616);
        uint64_t v114 = *(void *)(v9 + 32);
        float v115 = *(float *)(v114 + 52);
        int v426 = *(unsigned __int8 *)(v114 + 69);
        uint64_t v116 = *((void *)v443 + 37);
        while (1)
        {
          if (!v116)
          {
LABEL_363:
            if (v432 && v113 != 0) {
              uint64_t v166 = v113;
            }
            else {
              uint64_t v166 = v112;
            }
            if (!v166) {
              goto LABEL_208;
            }
            v166[96] = a3;
            uint64_t v436 = *((void *)v166 + 41);
            if (!v436) {
              operator new();
            }
            uint64_t v167 = (*(uint64_t (**)(_DWORD *))(*(void *)v166 + 24))(v166);
            long long v461 = *(_OWORD *)v167;
            char v462 = *(altitude::Tile **)(v167 + 16);
            unint64_t v168 = *a4;
            if (*a4)
            {
              uint64_t v169 = 0;
              unint64_t v170 = 0;
              unsigned int v171 = 0;
              uint64_t v172 = 0xFFFFFFFFLL;
              do
              {
                uint64_t v173 = (uint64_t *)(a4[5] + v169 * 8);
                ++v169;
                if (v168 <= 4) {
                  uint64_t v174 = (uint64_t *)&a4[v169];
                }
                else {
                  uint64_t v174 = v173;
                }
                unsigned int v175 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v174, (double *)&v461)* 100000.0);
                if (v175 <= 1) {
                  unsigned int v175 = 1;
                }
                if (v175 > v171)
                {
                  uint64_t v172 = v170;
                  unsigned int v171 = v175;
                }
                ++v170;
                unint64_t v168 = *a4;
              }
              while (v170 < *a4);
              if (v172 == 0xFFFFFFFFLL)
              {
                unsigned int v176 = 0;
              }
              else
              {
                if (v168 <= 4) {
                  uint64_t v181 = (uint64_t)&a4[v172 + 1];
                }
                else {
                  uint64_t v181 = a4[5] + 8 * v172;
                }
                unsigned int v176 = *(_DWORD *)(*(void *)v181 + 1300) + v171;
              }
              uint64_t v9 = (uint64_t)v439;
              a3 = v441;
              if (v426)
              {
LABEL_405:
                if (*(void *)(v436 + 136) || v166[101]) {
                  goto LABEL_407;
                }
                unsigned int v248 = v176 + 700000;
                *(void *)&long long v461 = v166;
                uint64_t v249 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v425, (unint64_t)v166);
                if (v249)
                {
                  unsigned int v250 = *((_DWORD *)v249 + 6);
                  if (v250 <= v248) {
                    unsigned int v250 = v248;
                  }
                  *((_DWORD *)v249 + 6) = v250;
                }
                else
                {
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v425, (unint64_t)v166, &v461)+ 6) = v248;
                }
                goto LABEL_208;
              }
            }
            else
            {
              unsigned int v176 = 0;
              if (v426) {
                goto LABEL_405;
              }
            }
            if (!altitude::Tile::hasLoadedData((altitude::Tile *)v166)
              && altitude::Tile::needsFallbackData((altitude::Tile *)v166))
            {
              unint64_t v179 = v166;
              do
              {
                unint64_t v179 = (_DWORD *)*((void *)v179 + 37);
                if (!v179) {
                  goto LABEL_407;
                }
                uint64_t v180 = *((void *)v179 + 41);
                if (!v180) {
                  operator new();
                }
              }
              while (!*(void *)(v180 + 120));
              uint64_t v300 = (uint64_t *)(v176 + 600000);
              uint64_t v301 = v424;
              uint64_t v302 = *v424;
              uint64_t v303 = v424;
              if (*v424)
              {
                uint64_t v304 = v424;
                uint64_t v305 = *v424;
                do
                {
                  unint64_t v306 = v305[4];
                  BOOL v307 = v306 >= (unint64_t)v166;
                  if (v306 >= (unint64_t)v166) {
                    uint64_t v308 = (uint64_t **)v305;
                  }
                  else {
                    uint64_t v308 = (uint64_t **)(v305 + 1);
                  }
                  if (v307) {
                    uint64_t v304 = (uint64_t **)v305;
                  }
                  uint64_t v305 = *v308;
                }
                while (*v308);
                if (v304 != v424 && v304[4] <= (uint64_t *)v166)
                {
                  unsigned int v309 = *((_DWORD *)v304 + 10);
                  if (v309 <= v300) {
                    unsigned int v309 = v300;
                  }
                  *((_DWORD *)v304 + 10) = v309;
                  *((_DWORD *)v304 + 11) = 0;
                  goto LABEL_208;
                }
                do
                {
                  while (1)
                  {
                    uint64_t v301 = (uint64_t **)v302;
                    unint64_t v310 = v302[4];
                    if (v310 <= (unint64_t)v166) {
                      break;
                    }
                    uint64_t v302 = *v301;
                    uint64_t v303 = v301;
                    if (!*v301) {
                      goto LABEL_691;
                    }
                  }
                  if (v310 >= (unint64_t)v166) {
                    goto LABEL_694;
                  }
                  uint64_t v302 = v301[1];
                }
                while (v302);
                uint64_t v303 = v301 + 1;
              }
LABEL_691:
              uint64_t v311 = (uint64_t *)v301;
              uint64_t v301 = (uint64_t **)operator new(0x30uLL);
              v301[4] = (uint64_t *)v166;
              v301[5] = 0;
              void *v301 = 0;
              v301[1] = 0;
              v301[2] = v311;
              *uint64_t v303 = (uint64_t *)v301;
              uint64_t v312 = **(void **)(v9 + 536);
              uint64_t v313 = (uint64_t *)v301;
              if (v312)
              {
                *(void *)(v9 + 536) = v312;
                uint64_t v313 = *v303;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 544), v313);
              ++*(void *)(v9 + 552);
              a3 = v441;
LABEL_694:
              v301[5] = v300;
LABEL_208:
              int v104 = altitude::CompleteGlobeTileSetLoader::computePriority((uint64_t)&v445, (uint64_t)v443);
              uint64_t v105 = *((void *)v443 + 41);
              if (!v105) {
                operator new();
              }
              if (*(unsigned char *)(v9 + 613)) {
                goto LABEL_568;
              }
              int v106 = *((unsigned __int8 *)v443 + 432);
              if (*((unsigned char *)v443 + 432))
              {
                if (v440) {
                  goto LABEL_214;
                }
                goto LABEL_383;
              }
              altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v9, v443);
              if (*(unsigned char *)(v9 + 613)) {
                goto LABEL_568;
              }
              int v106 = *((unsigned __int8 *)v443 + 432);
              if (!v440) {
                goto LABEL_383;
              }
LABEL_214:
              if (v106)
              {
                if (!*(void *)(v105 + 136))
                {
                  unsigned int v107 = v104 + 700000;
                  long long v108 = v443;
                  *(void *)&long long v461 = v443;
                  uint64_t v109 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v425, (unint64_t)v443);
                  if (v109)
                  {
                    unsigned int v110 = *((_DWORD *)v109 + 6);
                    if (v110 <= v107) {
                      unsigned int v110 = v104 + 700000;
                    }
                    *((_DWORD *)v109 + 6) = v110;
                  }
                  else
                  {
                    *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v425, (unint64_t)v443, &v461)+ 6) = v107;
                  }
                  goto LABEL_567;
                }
LABEL_568:
                if (!v445) {
                  goto LABEL_670;
                }
                if (v445 < 5)
                {
                  if (*(_DWORD *)(v448 + 1296)) {
                    BOOL v272 = v447[0] == 0;
                  }
                  else {
                    BOOL v272 = 0;
                  }
                  if (!v272)
                  {
                    if (v445 == 1) {
                      goto LABEL_670;
                    }
                    BOOL v273 = *(_DWORD *)(v451 + 1296) && v450 == 0;
                    if (!v273
                      && (v445 == 2
                       || (!*(_DWORD *)(v454 + 1296) || v453) && (v445 == 3 || !*(_DWORD *)(v457 + 1296) || v456)))
                    {
                      goto LABEL_670;
                    }
                  }
                }
                else
                {
                  unint64_t v269 = 0;
                  unsigned int v270 = 1;
                  while (1)
                  {
                    uint64_t v271 = (char *)__p + 16 * v269;
                    if (*(_DWORD *)(*((void *)v271 + 1) + 1296))
                    {
                      if (!v271[4]) {
                        break;
                      }
                    }
                    unint64_t v269 = v270++;
                    if (v445 <= v269) {
                      goto LABEL_670;
                    }
                  }
                }
                if (!*((unsigned char *)v443 + 432))
                {
                  altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v9, v443);
                  goto LABEL_670;
                }
                if (!altitude::Tile::hasLoadedData(v443))
                {
                  altitude::CompleteGlobeTileSetLoader::queueLoadMesh((void *)v9, v443, v104 + 100000);
                  *((_DWORD *)v443 + 97) = a3;
                  goto LABEL_670;
                }
                if (!*(unsigned char *)(v9 + 613)
                  && !*(unsigned char *)(v105 + 297)
                  && *(_DWORD *)(*((void *)v443 + 36) + 176) <= *((_DWORD *)v443 + 98)
                  && *(unsigned char *)(*(void *)(v9 + 32) + 67))
                {
                  if (!v445) {
                    goto LABEL_622;
                  }
                  uint64_t v274 = 0;
                  uint64_t v275 = (char *)__p + 8;
                  unint64_t v276 = &v448;
                  while (1)
                  {
                    if (v445 <= 4) {
                      uint64_t v284 = v276;
                    }
                    else {
                      uint64_t v284 = (uint64_t *)v275;
                    }
                    if (*(unsigned char *)(*v284 + 1290))
                    {
                      if (v445 < 5)
                      {
                        if (*(_DWORD *)(*v276 + 1296) == 2)
                        {
                          long long v374 = &v445 + 2 * v274;
                          if (!*((unsigned char *)v374 + 12))
                          {
                            uint64_t v285 = (float *)(v374 + 1);
                            goto LABEL_800;
                          }
                          goto LABEL_804;
                        }
                      }
                      else if (*(_DWORD *)(*(void *)v275 + 1296) == 2)
                      {
                        uint64_t v285 = (float *)((char *)__p + 16 * v274);
                        if (!*((unsigned char *)v285 + 4))
                        {
LABEL_800:
                          if (*v285 < 1.0)
                          {
                            if (!*(unsigned char *)(v105 + 200))
                            {
                              if (*(void *)(v105 + 152) == *(void *)(v105 + 160))
                              {
                                *(void *)&long long v461 = 0;
                                long long v466 = 0;
                                uint64_t v467 = 0;
                                long long v465 = 0;
                                karo::SizedArray<altitude::View *,4>::push_back((uint64_t *)&v461, v284);
                                int v415 = altitude::CompleteGlobeTileSetLoader::computePriorityFromPosition((unint64_t *)&v461, (uint64_t)v443);
                                altitude::CompleteGlobeTileSetLoader::queueLoadHiresTexture((altitude::CompleteGlobeTileSetLoader *)v9, v443, v415 & ~(v415 >> 31));
                                *((_DWORD *)v443 + 97) = a3;
                                if (v465)
                                {
                                  long long v466 = v465;
                                  operator delete(v465);
                                }
                              }
                              else
                              {
                                altitude::GlobeTileComponent::applyHiresTextures((altitude::GlobeTileComponent *)v105);
                              }
                            }
                            goto LABEL_622;
                          }
                        }
LABEL_804:
                        altitude::GlobeTileComponent::resetTextures((altitude::GlobeTileComponent *)v105);
                        goto LABEL_622;
                      }
                    }
                    ++v274;
                    v276 += 2;
                    v275 += 16;
                    if (v445 == v274) {
                      goto LABEL_622;
                    }
                  }
                }
                uint64_t v277 = *(void *)(v105 + 120);
                if (v277)
                {
                  if (*(void *)(v105 + 152) != *(void *)(v105 + 160))
                  {
                    uint64_t v278 = *(void *)(v105 + 176);
                    if (v278 != *(void *)(v105 + 184))
                    {
                      uint64_t v279 = *(void *)(v277 + 48);
                      uint64_t v280 = *(void *)(v277 + 56);
                      if (v279 != v280)
                      {
                        do
                        {
                          uint64_t v281 = *(int *)(*(void *)v279 + 176);
                          if (v281 != -1)
                          {
                            altitude::RenderableGroup::dropOwnership(*(void *)(v105 + 120), *(void *)(*(void *)(v105 + 152) + 16 * v281));
                            int v282 = *(_DWORD *)(*(void *)v279 + 160);
                            if (v282 == 7 || v282 == 1) {
                              **(void **)(*(void *)v279 + 256) = *(void *)(*(void *)(v105 + 176) + 8 * v281);
                            }
                          }
                          v279 += 8;
                        }
                        while (v279 != v280);
                        uint64_t v278 = *(void *)(v105 + 176);
                      }
                      *(void *)(v105 + 184) = v278;
                      uint64_t v9 = (uint64_t)v439;
                      a3 = v441;
                    }
                  }
                }
LABEL_622:
                uint64_t v286 = *((void *)v443 + 42);
                if (*(unsigned char *)(*(void *)(v9 + 184) + 136))
                {
                  if (!v286) {
                    operator new();
                  }
                  if (((*(uint64_t (**)(uint64_t))(*(void *)v286 + 48))(v286) & 1) == 0)
                  {
                    unsigned int v287 = v104 + 100000;
                    *(void *)&long long v461 = v443;
                    long long v288 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v423, (unint64_t)v443);
                    if (v288)
                    {
                      unsigned int v289 = *((_DWORD *)v288 + 6);
                      if (v289 <= v287) {
                        unsigned int v289 = v104 + 100000;
                      }
                      *((_DWORD *)v288 + 6) = v289;
                    }
                    else
                    {
                      *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v423, (unint64_t)v443, &v461)+ 6) = v287;
                    }
                    *(unsigned char *)(v9 + 620) = 1;
                  }
                  uint64_t v291 = *((void *)v443 + 43);
                  if (*(unsigned char *)(*(void *)(v9 + 200) + 92))
                  {
                    if (!v291) {
                      operator new();
                    }
                    if ((!(*(unsigned int (**)(uint64_t))(*(void *)v291 + 48))(v291)
                       || (*(unsigned int (**)(uint64_t, void))(*(void *)v291 + 136))(v291, *(unsigned int *)(*(void *)(v9 + 200) + 160)))&& (*(unsigned int (**)(uint64_t))(*(void *)v286 + 48))(v286))
                    {
                      unsigned int v292 = v104 + 100000;
                      *(void *)&long long v461 = v443;
                      unint64_t v293 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v421, (unint64_t)v443);
                      if (v293)
                      {
                        unsigned int v294 = *((_DWORD *)v293 + 6);
                        if (v294 <= v292) {
                          unsigned int v294 = v104 + 100000;
                        }
                        *((_DWORD *)v293 + 6) = v294;
                      }
                      else
                      {
                        *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v421, (unint64_t)v443, &v461)+ 6) = v292;
                      }
LABEL_649:
                      *(unsigned char *)(v9 + 620) = 1;
                    }
LABEL_650:
                    uint64_t v295 = (unsigned char *)*((void *)v443 + 44);
                    if (!v295) {
                      operator new();
                    }
                    if ((*(unsigned char *)(*(void *)(v9 + 208) + 136) != 0) != (v295[82] != 0))
                    {
                      (*(void (**)(unsigned char *))(*(void *)v295 + 8))(v295);
                      *((void *)v443 + 44) = 0;
                      operator new();
                    }
                    uint64_t v296 = *((void *)v443 + 45);
                    if (*(unsigned char *)(*(void *)(v9 + 216) + 104))
                    {
                      if (!v296) {
                        operator new();
                      }
                      if (!md::realistic::OverlayRenderLayer::tileNeedsRefresh(*(md::realistic::OverlayRenderLayer **)(*(void *)(*(void *)(*(void *)(v9 + 32) + 8)+ 40)+ 48), v443))goto LABEL_670; {
                      unsigned int v297 = v104 + 100000;
                      }
                      *(void *)&long long v461 = v443;
                      uint64_t v298 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v422, (unint64_t)v443);
                      if (v298)
                      {
                        unsigned int v299 = *((_DWORD *)v298 + 6);
                        if (v299 <= v297) {
                          unsigned int v299 = v104 + 100000;
                        }
                        *((_DWORD *)v298 + 6) = v299;
                      }
                      else
                      {
                        *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v422, (unint64_t)v443, &v461)+ 6) = v297;
                      }
                    }
                    else
                    {
                      if (!v296) {
                        goto LABEL_670;
                      }
                      (*(void (**)(uint64_t))(*(void *)v296 + 8))(v296);
                      *((void *)v443 + 45) = 0;
                    }
                    *(unsigned char *)(v9 + 620) = 1;
                    goto LABEL_670;
                  }
                  if (!v291) {
                    goto LABEL_650;
                  }
                  (*(void (**)(void))(*(void *)v291 + 8))(*((void *)v443 + 43));
                }
                else
                {
                  if (v286)
                  {
                    (*(void (**)(void))(*(void *)v286 + 8))(*((void *)v443 + 42));
                    *((void *)v443 + 42) = 0;
                    *(unsigned char *)(v9 + 620) = 1;
                  }
                  uint64_t v290 = *((void *)v443 + 43);
                  if (!v290) {
                    goto LABEL_650;
                  }
                  (*(void (**)(uint64_t))(*(void *)v290 + 8))(v290);
                }
                *((void *)v443 + 43) = 0;
                goto LABEL_649;
              }
LABEL_383:
              if (v440
                || !*((unsigned char *)v443 + 432)
                || altitude::Tile::hasLoadedData(v443)
                || !altitude::Tile::needsFallbackData(v443))
              {
                goto LABEL_568;
              }
              uint64_t v177 = v443;
              do
              {
                uint64_t v177 = (altitude::Tile *)*((void *)v177 + 37);
                if (!v177) {
                  goto LABEL_568;
                }
                uint64_t v178 = *((void *)v177 + 41);
                if (!v178) {
                  operator new();
                }
              }
              while (!*(void *)(v178 + 120));
              unint64_t v255 = (uint64_t *)(v104 + 600000);
              uint64_t v256 = v424;
              uint64_t v257 = *v424;
              float v258 = v424;
              if (*v424)
              {
                unint64_t v259 = v424;
                uint64_t v260 = *v424;
                long long v108 = v443;
                do
                {
                  unint64_t v261 = v260[4];
                  BOOL v262 = v261 >= (unint64_t)v443;
                  if (v261 >= (unint64_t)v443) {
                    uint64_t v263 = (uint64_t **)v260;
                  }
                  else {
                    uint64_t v263 = (uint64_t **)(v260 + 1);
                  }
                  if (v262) {
                    unint64_t v259 = (uint64_t **)v260;
                  }
                  uint64_t v260 = *v263;
                }
                while (*v263);
                if (v259 != v424 && v259[4] <= (uint64_t *)v443)
                {
                  unsigned int v264 = *((_DWORD *)v259 + 10);
                  if (v264 <= v255) {
                    unsigned int v264 = v104 + 600000;
                  }
                  *((_DWORD *)v259 + 10) = v264;
                  *((_DWORD *)v259 + 11) = 0;
LABEL_567:
                  *((_DWORD *)v108 + 97) = a3;
                  goto LABEL_568;
                }
                do
                {
                  while (1)
                  {
                    uint64_t v256 = (uint64_t **)v257;
                    unint64_t v265 = v257[4];
                    if (v265 <= (unint64_t)v443) {
                      break;
                    }
                    uint64_t v257 = *v256;
                    float v258 = v256;
                    if (!*v256) {
                      goto LABEL_563;
                    }
                  }
                  if (v265 >= (unint64_t)v443) {
                    goto LABEL_566;
                  }
                  uint64_t v257 = v256[1];
                }
                while (v257);
                float v258 = v256 + 1;
              }
LABEL_563:
              uint64_t v266 = (uint64_t *)v256;
              uint64_t v256 = (uint64_t **)operator new(0x30uLL);
              v256[4] = (uint64_t *)v443;
              v256[5] = 0;
              *uint64_t v256 = 0;
              v256[1] = 0;
              v256[2] = v266;
              _OWORD *v258 = (uint64_t *)v256;
              uint64_t v267 = **(void **)(v9 + 536);
              uint64_t v268 = (uint64_t *)v256;
              if (v267)
              {
                *(void *)(v9 + 536) = v267;
                uint64_t v268 = *v258;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 544), v268);
              ++*(void *)(v9 + 552);
              a3 = v441;
LABEL_566:
              v256[5] = v255;
              long long v108 = v443;
              goto LABEL_567;
            }
LABEL_407:
            v166[97] = a3;
            *(unsigned char *)(v9 + 620) = 1;
            if ((v111 & 1) == 0
              && !altitude::Tile::hasLoadedData((altitude::Tile *)v166)
              && v432
              && !*(unsigned char *)(v436 + 282))
            {
              altitude::CompleteGlobeTileSetLoader::queueLoadMesh((void *)v9, (altitude::Tile *)v166, v176 + 200000);
              goto LABEL_208;
            }
            int v182 = 1;
            DWORD2(v461) = 1;
            float v463 = 0;
            long long v464 = 0;
            char v462 = 0;
            *(void *)&long long v461 = &unk_1EF568E18;
            long long v465 = (char *)v166;
            altitude::TileSetNode::collectSubTreeInSet(a2, (uint64_t)v166, (altitude::CoarsenTileSet *)&v461);
            uint64_t v183 = v465;
            uint64_t v184 = *((void *)v465 + 41);
            if (v184) {
              int v182 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v184 + 96))(v184, &v461);
            }
            uint64_t v185 = *((void *)v183 + 42);
            if (v185) {
              v182 &= (*(uint64_t (**)(uint64_t, long long *))(*(void *)v185 + 96))(v185, &v461);
            }
            uint64_t v186 = *((void *)v183 + 43);
            if (v186) {
              v182 &= (*(uint64_t (**)(uint64_t, long long *))(*(void *)v186 + 96))(v186, &v461);
            }
            uint64_t v187 = *((void *)v183 + 44);
            if (v187) {
              v182 &= (*(uint64_t (**)(uint64_t, long long *))(*(void *)v187 + 96))(v187, &v461);
            }
            uint64_t v188 = *((void *)v183 + 45);
            if (v188)
            {
              if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v188 + 96))(v188, &v461) & v182) {
                goto LABEL_421;
              }
LABEL_447:
              char v209 = 0;
LABEL_540:
              *(void *)&long long v461 = &unk_1EF568E18;
              if (v462)
              {
                float v463 = v462;
                operator delete(v462);
              }
              if (v209) {
                goto LABEL_670;
              }
              goto LABEL_208;
            }
            if (!v182) {
              goto LABEL_447;
            }
LABEL_421:
            unint64_t v189 = v465;
            uint64_t v190 = *((void *)v465 + 41);
            if (v190) {
              (*(void (**)(uint64_t, long long *))(*(void *)v190 + 104))(v190, &v461);
            }
            uint64_t v191 = *((void *)v189 + 42);
            if (v191) {
              (*(void (**)(uint64_t, long long *))(*(void *)v191 + 104))(v191, &v461);
            }
            uint64_t v192 = *((void *)v189 + 43);
            if (v192) {
              (*(void (**)(uint64_t, long long *))(*(void *)v192 + 104))(v192, &v461);
            }
            uint64_t v193 = *((void *)v189 + 44);
            if (v193) {
              (*(void (**)(uint64_t, long long *))(*(void *)v193 + 104))(v193, &v461);
            }
            uint64_t v194 = *((void *)v189 + 45);
            if (v194) {
              (*(void (**)(uint64_t, long long *))(*(void *)v194 + 104))(v194, &v461);
            }
            unint64_t v195 = v462;
            uint64_t v196 = v463;
            if (v462 == v463)
            {
              uint64_t v197 = (char *)*((void *)a2 + 9);
            }
            else
            {
              do
              {
                uint64_t v201 = *(void *)v195;
                uint64_t v203 = *((void *)a2 + 5);
                uint64_t v202 = *((void *)a2 + 6);
                if (v202 != v203)
                {
                  unint64_t v204 = 0;
                  unsigned int v205 = 1;
                  do
                  {
                    if (*(void *)(v203 + 8 * v204) == v201)
                    {
                      *(void *)(v203 + 8 * v204) = 0;
                      uint64_t v203 = *((void *)a2 + 5);
                      uint64_t v202 = *((void *)a2 + 6);
                    }
                    unint64_t v204 = v205++;
                  }
                  while (v204 < (v202 - v203) >> 3);
                }
                unint64_t v206 = (char *)*((void *)a2 + 8);
                uint64_t v197 = (char *)*((void *)a2 + 9);
                if (v197 != v206)
                {
                  unint64_t v207 = 0;
                  unsigned int v208 = 1;
                  do
                  {
                    if (*(void *)&v206[8 * v207] == v201)
                    {
                      *(void *)&v206[8 * v207] = 0;
                      unint64_t v206 = (char *)*((void *)a2 + 8);
                      uint64_t v197 = (char *)*((void *)a2 + 9);
                    }
                    unint64_t v207 = v208++;
                  }
                  while (v207 < (v197 - v206) >> 3);
                }
                unint64_t v195 = (altitude::Tile *)((char *)v195 + 8);
              }
              while (v195 != v196);
            }
            BOOL v198 = v465;
            unint64_t v199 = *((void *)a2 + 10);
            if ((unint64_t)v197 < v199)
            {
              *(void *)uint64_t v197 = v465;
              long long v200 = v197 + 8;
              a3 = v441;
LABEL_539:
              *((void *)a2 + 9) = v200;
              char v209 = 1;
              goto LABEL_540;
            }
            uint64_t v210 = (char *)*((void *)a2 + 8);
            uint64_t v211 = (v197 - v210) >> 3;
            unint64_t v212 = v211 + 1;
            if ((unint64_t)(v211 + 1) >> 61) {
              goto LABEL_922;
            }
            uint64_t v213 = v199 - (void)v210;
            if (v213 >> 2 > v212) {
              unint64_t v212 = v213 >> 2;
            }
            if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v214 = v212;
            }
            if (v214)
            {
              if (!(v214 >> 61))
              {
                int32x4_t v215 = operator new(8 * v214);
                goto LABEL_530;
              }
LABEL_923:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int32x4_t v215 = 0;
LABEL_530:
            unsigned int v251 = (char **)&v215[8 * v211];
            *unsigned int v251 = v198;
            long long v200 = v251 + 1;
            if (v197 == v210)
            {
              uint64_t v210 = v197;
              uint64_t v9 = (uint64_t)v439;
              a3 = v441;
            }
            else
            {
              unint64_t v252 = v197 - v210 - 8;
              a3 = v441;
              if (v252 >= 0x58 && (unint64_t)(v210 - v215) >= 0x20)
              {
                uint64_t v314 = (v252 >> 3) + 1;
                float v253 = &v197[-8 * (v314 & 0x3FFFFFFFFFFFFFFCLL)];
                uint64_t v315 = &v215[8 * v211 - 16];
                unint64_t v316 = v197 - 16;
                uint64_t v317 = v314 & 0x3FFFFFFFFFFFFFFCLL;
                uint64_t v9 = (uint64_t)v439;
                do
                {
                  long long v318 = *(_OWORD *)v316;
                  *(v315 - 1) = *((_OWORD *)v316 - 1);
                  _OWORD *v315 = v318;
                  v315 -= 2;
                  v316 -= 32;
                  v317 -= 4;
                }
                while (v317);
                v251 -= v314 & 0x3FFFFFFFFFFFFFFCLL;
                if (v314 != (v314 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_534;
                }
              }
              else
              {
                float v253 = v197;
                uint64_t v9 = (uint64_t)v439;
                do
                {
LABEL_534:
                  uint64_t v254 = (char *)*((void *)v253 - 1);
                  v253 -= 8;
                  *--unsigned int v251 = v254;
                }
                while (v253 != v210);
                uint64_t v210 = (char *)*((void *)a2 + 8);
              }
            }
            *((void *)a2 + 8) = v251;
            *((void *)a2 + 9) = v200;
            *((void *)a2 + 10) = &v215[8 * v214];
            if (v210) {
              operator delete(v210);
            }
            goto LABEL_539;
          }
          if (!*(unsigned char *)(v116 + 432))
          {
            uint64_t v119 = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 24))(v116);
            long long v461 = *(_OWORD *)v119;
            char v462 = *(altitude::Tile **)(v119 + 16);
            unint64_t v120 = *a4;
            if (*a4)
            {
              uint64_t v121 = 0;
              unint64_t v122 = 0;
              unsigned int v123 = 0;
              uint64_t v124 = 0xFFFFFFFFLL;
              do
              {
                uint64_t v125 = (uint64_t *)(a4[5] + v121 * 8);
                ++v121;
                if (v120 <= 4) {
                  uint64_t v126 = (uint64_t *)&a4[v121];
                }
                else {
                  uint64_t v126 = v125;
                }
                unsigned int v127 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v126, (double *)&v461)* 100000.0);
                if (v127 <= 1) {
                  unsigned int v127 = 1;
                }
                if (v127 > v123)
                {
                  uint64_t v124 = v122;
                  unsigned int v123 = v127;
                }
                ++v122;
                unint64_t v120 = *a4;
              }
              while (v122 < *a4);
              if (v124 == 0xFFFFFFFFLL)
              {
                a5 = v429;
                a3 = v441;
                uint64_t v9 = (uint64_t)v439;
                a4 = v435;
              }
              else
              {
                a4 = v435;
                a5 = v429;
                a3 = v441;
                uint64_t v9 = (uint64_t)v439;
              }
            }
            if (!altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v9, (altitude::Tile *)v116))goto LABEL_208; {
          }
            }
          *(void *)&long long v461 = 0;
          long long v470 = 0;
          uint64_t v471 = 0;
          long long v469 = 0;
          altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v9, a5, a4, v116, &v461, a3, 1);
          LODWORD(v472) = 0;
          if (!(void)v461) {
            goto LABEL_323;
          }
          if ((unint64_t)v461 >= 5)
          {
            char v128 = 0;
            float v129 = 0.0;
            unsigned int v130 = 1;
            unint64_t v131 = v469;
            long long v132 = v469;
            do
            {
              if (*(_DWORD *)(*((void *)v132 + 1) + 1296) && !*((unsigned char *)v132 + 4))
              {
                uint64_t v133 = v132;
                if (v128)
                {
                  if (*v132 >= v129) {
                    uint64_t v133 = (float *)&v472;
                  }
                  else {
                    uint64_t v133 = v132;
                  }
                }
                float v129 = *v133;
                *(float *)&unint64_t v472 = *v133;
                char v128 = 1;
              }
              v132 += 4;
              BOOL v68 = (unint64_t)v461 > v130++;
            }
            while (v68);
            unint64_t v140 = 0;
            if ((v128 & 1) == 0) {
              float v129 = 1.0;
            }
            BOOL v141 = v129 < 1.0;
            unsigned int v142 = 1;
            do
            {
              double v143 = (char *)&v469[4 * v140];
              if (*(_DWORD *)(*((void *)v143 + 1) + 1296) && !v143[4]) {
                goto LABEL_293;
              }
              unint64_t v140 = v142++;
            }
            while ((unint64_t)v461 > v140);
            LOBYTE(v135) = 0;
            LODWORD(v472) = 0;
            float v144 = 0.0;
            unsigned int v145 = 1;
            do
            {
              if (*(_DWORD *)(*((void *)v131 + 1) + 1296))
              {
                uint64_t v146 = v131;
                if (v135)
                {
                  if (*v131 >= v144) {
                    uint64_t v146 = (float *)&v472;
                  }
                  else {
                    uint64_t v146 = v131;
                  }
                }
                float v144 = *v146;
                *(float *)&unint64_t v472 = *v146;
                LOBYTE(v135) = 1;
              }
              v131 += 4;
              BOOL v68 = (unint64_t)v461 > v145++;
            }
            while (v68);
            goto LABEL_298;
          }
          int v134 = *((_DWORD *)v462 + 324);
          BOOL v135 = v134 != 0;
          BOOL v136 = BYTE12(v461) == 0;
          BOOL v137 = v135 && v136;
          float v138 = *((float *)&v461 + 2);
          if (!v135 || !v136) {
            float v138 = 0.0;
          }
          if (v461 == 1)
          {
            char v139 = v135 && v136;
          }
          else
          {
            float v147 = *(float *)&v463;
            float v148 = fminf(*(float *)&v463, v138);
            if (v134 != 0 && v136) {
              float v147 = v148;
            }
            if (*((_DWORD *)v464 + 324) != 0 && BYTE4(v463) == 0) {
              float v138 = v147;
            }
            char v139 = *((_DWORD *)v464 + 324) != 0 && BYTE4(v463) == 0 || v137;
            if (v461 != 2)
            {
              float v149 = *(float *)&v465;
              float v150 = fminf(*(float *)&v465, v138);
              if (*((_DWORD *)v464 + 324) != 0 && BYTE4(v463) == 0 || v137) {
                float v149 = v150;
              }
              if (*((_DWORD *)v466 + 324) != 0 && BYTE4(v465) == 0) {
                float v138 = v149;
              }
              v139 |= *((_DWORD *)v466 + 324) != 0 && BYTE4(v465) == 0;
              if (v461 != 3 && *(_DWORD *)(v468 + 1296) && !BYTE4(v467))
              {
                float v138 = fminf(*(float *)&v467, v138);
                if ((v139 & 1) == 0) {
                  float v138 = *(float *)&v467;
                }
LABEL_288:
                float v151 = v138;
                goto LABEL_289;
              }
            }
          }
          float v151 = 1.0;
          if (v139) {
            goto LABEL_288;
          }
LABEL_289:
          BOOL v141 = v151 < 1.0;
          if ((unint64_t)v461 <= 1) {
            uint64_t v152 = 1;
          }
          else {
            uint64_t v152 = v461;
          }
          if (v137)
          {
LABEL_293:
            if (!v141) {
              goto LABEL_304;
            }
            goto LABEL_302;
          }
          if ((unint64_t)v461 > 1)
          {
            if (*((_DWORD *)v464 + 324) && !BYTE4(v463)
              || v152 != 2
              && (*((_DWORD *)v466 + 324) && !BYTE4(v465) || v152 != 3 && *(_DWORD *)(v468 + 1296) && !BYTE4(v467)))
            {
              goto LABEL_293;
            }
            float v144 = *((float *)&v461 + 2);
            if (!v134) {
              float v144 = 0.0;
            }
            int v159 = *((_DWORD *)v464 + 324);
            float v161 = *(float *)&v463;
            float v162 = fminf(*(float *)&v463, v144);
            if (v134) {
              float v161 = v162;
            }
            if (v159) {
              float v144 = v161;
            }
            int v160 = v159 | v134;
            BOOL v135 = (v159 | v134) != 0;
            if (v461 != 2)
            {
              float v163 = *(float *)&v465;
              float v164 = fminf(*(float *)&v465, v144);
              if (v160) {
                float v163 = v164;
              }
              if (*((_DWORD *)v466 + 324))
              {
                float v144 = v163;
                BOOL v135 = 1;
              }
              if (v461 != 3 && *(_DWORD *)(v468 + 1296))
              {
                float v144 = fminf(*(float *)&v467, v144);
                if (!v135) {
                  float v144 = *(float *)&v467;
                }
                LOBYTE(v135) = 1;
              }
            }
          }
          else
          {
            float v144 = *((float *)&v461 + 2);
            if (!v134) {
              float v144 = 0.0;
            }
          }
LABEL_298:
          if (!v135) {
            float v144 = 1.0;
          }
          if (v144 > v115 || !v141)
          {
LABEL_304:
            if ((unint64_t)v461 <= 4)
            {
              if ((unint64_t)v461 <= 1) {
                uint64_t v156 = 1;
              }
              else {
                uint64_t v156 = v461;
              }
              if (*((_DWORD *)v462 + 324)) {
                BOOL v157 = BYTE12(v461) == 0;
              }
              else {
                BOOL v157 = 0;
              }
              if (v157) {
                goto LABEL_351;
              }
              if ((unint64_t)v461 < 2) {
                goto LABEL_323;
              }
              if (*((_DWORD *)v464 + 324)) {
                BOOL v158 = BYTE4(v463) == 0;
              }
              else {
                BOOL v158 = 0;
              }
              if (v158) {
                goto LABEL_351;
              }
              if (v156 == 2) {
                goto LABEL_323;
              }
              if (*((_DWORD *)v466 + 324) && !BYTE4(v465)) {
                goto LABEL_351;
              }
              if (v156 == 3)
              {
LABEL_323:
                char v111 = 1;
              }
              else
              {
                if (*(_DWORD *)(v468 + 1296)) {
                  BOOL v165 = BYTE4(v467) == 0;
                }
                else {
                  BOOL v165 = 0;
                }
                char v111 = !v165;
              }
            }
            else
            {
              unint64_t v153 = 0;
              unsigned int v154 = 1;
              while (1)
              {
                uint64_t v155 = (char *)&v469[4 * v153];
                if (*(_DWORD *)(*((void *)v155 + 1) + 1296))
                {
                  if (!v155[4]) {
                    break;
                  }
                }
                unint64_t v153 = v154++;
                if ((unint64_t)v461 <= v153) {
                  goto LABEL_323;
                }
              }
LABEL_351:
              char v111 = 0;
            }
            if (altitude::Tile::hasLoadedData((altitude::Tile *)v116)) {
              unint64_t v113 = (_DWORD *)v116;
            }
            uint64_t v112 = (_DWORD *)v116;
            uint64_t v116 = *(void *)(v116 + 296);
            char v117 = 1;
            uint64_t v118 = v469;
            if (!v469) {
              goto LABEL_223;
            }
LABEL_222:
            long long v470 = v118;
            operator delete(v118);
            goto LABEL_223;
          }
LABEL_302:
          if (!*(unsigned char *)(*(void *)(v116 + 288) + 166) || *(_DWORD *)(v116 + 392) >= v430) {
            goto LABEL_304;
          }
          char v117 = 0;
          uint64_t v118 = v469;
          if (v469) {
            goto LABEL_222;
          }
LABEL_223:
          if ((v117 & 1) == 0) {
            goto LABEL_363;
          }
        }
      }
LABEL_178:
      BOOL v95 = 1;
      goto LABEL_206;
    }
    uint64_t v56 = (uint64_t *)*((void *)a2 + 8);
    uint64_t v57 = v52 - v56;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 61) {
      goto LABEL_922;
    }
    int v59 = a5;
    unsigned int v60 = v39;
    uint64_t v61 = v51 - (void)v56;
    if (v61 >> 2 > v58) {
      unint64_t v58 = v61 >> 2;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v58;
    }
    if (v62)
    {
      if (v62 >> 61) {
        goto LABEL_923;
      }
      unsigned int v63 = operator new(8 * v62);
    }
    else
    {
      unsigned int v63 = 0;
    }
    int v69 = (altitude::Tile **)&v63[8 * v57];
    *int v69 = v443;
    int v70 = v69 + 1;
    if (v52 == v56)
    {
      uint64_t v56 = v52;
      a3 = v441;
      goto LABEL_123;
    }
    unint64_t v71 = (char *)(v52 - 1) - (char *)v56;
    if (v71 >= 0x58)
    {
      a3 = v441;
      if ((unint64_t)((char *)v56 - v63) >= 0x20)
      {
        uint64_t v72 = (v71 >> 3) + 1;
        uint64_t v73 = &v63[8 * v57 - 16];
        unsigned int v74 = v52 - 2;
        uint64_t v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v76 = *(_OWORD *)v74;
          *(v73 - 1) = *((_OWORD *)v74 - 1);
          *uint64_t v73 = v76;
          v73 -= 2;
          v74 -= 4;
          v75 -= 4;
        }
        while (v75);
        v69 -= v72 & 0x3FFFFFFFFFFFFFFCLL;
        v52 -= v72 & 0x3FFFFFFFFFFFFFFCLL;
        if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_123;
        }
      }
    }
    else
    {
      a3 = v441;
    }
    do
    {
      uint64_t v77 = (altitude::Tile *)*--v52;
      *--int v69 = v77;
    }
    while (v52 != v56);
    uint64_t v56 = (uint64_t *)*((void *)a2 + 8);
LABEL_123:
    *((void *)a2 + 8) = v69;
    *((void *)a2 + 9) = v70;
    *((void *)a2 + 10) = &v63[8 * v62];
    if (v56)
    {
      operator delete(v56);
      unint64_t v40 = v445;
    }
    uint64_t v9 = (uint64_t)v439;
    uint64_t v38 = (uint64_t)v443;
    unsigned int v39 = v60;
    a5 = v59;
    a4 = v435;
    *((void *)a2 + 9) = v70;
    if (!v40) {
      goto LABEL_126;
    }
LABEL_84:
    if (v40 < 5)
    {
      int v64 = *(_DWORD *)(v448 + 1296);
      int v65 = v447[0];
      if (v64) {
        BOOL v66 = v447[0] == 0;
      }
      else {
        BOOL v66 = 0;
      }
      if (!v66)
      {
        if (v40 == 1)
        {
          if (v64) {
            BOOL v67 = v447[0] == 0;
          }
          else {
            BOOL v67 = 0;
          }
          BOOL v68 = v67 && v46 < 1.0;
          if (v68) {
            goto LABEL_162;
          }
          goto LABEL_167;
        }
        BOOL v79 = *(_DWORD *)(v451 + 1296) && v450 == 0;
        if (!v79
          && (v40 == 2 || (!*(_DWORD *)(v454 + 1296) || v453) && (v40 == 3 || !*(_DWORD *)(v457 + 1296) || v456)))
        {
LABEL_143:
          if (v40 <= 1) {
            uint64_t v83 = 1;
          }
          else {
            uint64_t v83 = v40;
          }
          if (v64) {
            BOOL v84 = v65 == 0;
          }
          else {
            BOOL v84 = 0;
          }
          if (v84) {
            goto LABEL_161;
          }
          if (v40 >= 2)
          {
            BOOL v85 = *(_DWORD *)(v451 + 1296) && v450 == 0;
            if (v85 || v83 != 2 && (*(_DWORD *)(v454 + 1296) && !v453 || v83 != 3 && *(_DWORD *)(v457 + 1296) && !v456)) {
              goto LABEL_161;
            }
          }
LABEL_167:
          if (v440)
          {
            LODWORD(v461) = 0;
            if (v40 < 5)
            {
              if (v40 <= 1) {
                int v98 = 1;
              }
              else {
                int v98 = v40;
              }
              int v99 = *(_DWORD *)(v448 + 1296);
              LOBYTE(v91) = v99 != 0;
              float v78 = v446;
              if (!v99) {
                float v78 = 0.0;
              }
              if (v40 >= 2)
              {
                int v100 = *(_DWORD *)(v451 + 1296);
                float v102 = v449;
                float v103 = fminf(v449, v78);
                if (v99) {
                  float v102 = v103;
                }
                if (v100) {
                  float v78 = v102;
                }
                int v101 = v100 | v99;
                BOOL v91 = (v100 | v99) != 0;
                if (v98 != 2)
                {
                  if (*(_DWORD *)(v454 + 1296))
                  {
                    float v78 = fminf(v452, v78);
                    if (!v101) {
                      float v78 = v452;
                    }
                    *(float *)&long long v461 = v78;
                    BOOL v91 = 1;
                  }
                  if (v98 != 3 && *(_DWORD *)(v457 + 1296))
                  {
                    float v78 = fminf(v455, v78);
                    if (!v91) {
                      float v78 = v455;
                    }
                    LOBYTE(v91) = 1;
                  }
                }
              }
            }
            else
            {
              LOBYTE(v91) = 0;
              float v78 = 0.0;
              unsigned int v92 = 1;
              unint64_t v93 = (float *)__p;
              do
              {
                if (*(_DWORD *)(*((void *)v93 + 1) + 1296))
                {
                  uint64_t v94 = v93;
                  if (v91)
                  {
                    if (*v93 >= v78) {
                      uint64_t v94 = (float *)&v461;
                    }
                    else {
                      uint64_t v94 = v93;
                    }
                  }
                  float v78 = *v94;
                  *(float *)&long long v461 = *v94;
                  LOBYTE(v91) = 1;
                }
                v93 += 4;
                BOOL v68 = v40 > v92++;
              }
              while (v68);
            }
            if (!v91) {
              float v78 = 1.0;
            }
            goto LABEL_205;
          }
          goto LABEL_178;
        }
      }
    }
    else
    {
      unint64_t v53 = 0;
      unsigned int v54 = 1;
      while (1)
      {
        double v55 = (char *)__p + 16 * v53;
        if (*(_DWORD *)(*((void *)v55 + 1) + 1296))
        {
          if (!v55[4]) {
            break;
          }
        }
        unint64_t v53 = v54++;
        if (v40 <= v53) {
          goto LABEL_136;
        }
      }
    }
    *(_DWORD *)(v38 + 388) = a3;
LABEL_136:
    if (v40 <= 4)
    {
      int v64 = *(_DWORD *)(v448 + 1296);
      int v65 = v447[0];
      goto LABEL_143;
    }
    unint64_t v80 = 0;
    unsigned int v81 = 1;
    while (1)
    {
      uint64_t v82 = (char *)__p + 16 * v80;
      if (*(_DWORD *)(*((void *)v82 + 1) + 1296))
      {
        if (!v82[4]) {
          break;
        }
      }
      unint64_t v80 = v81++;
      if (v40 <= v80) {
        goto LABEL_167;
      }
    }
LABEL_161:
    if (v46 >= 1.0) {
      goto LABEL_167;
    }
LABEL_162:
    uint64_t v86 = *(void *)(v38 + 304);
    uint64_t v87 = *(void *)(v38 + 312);
    if (v86 == v87 || *(_DWORD *)(v38 + 392) >= v39 || !*(unsigned char *)(*(void *)(v38 + 288) + 166)) {
      goto LABEL_167;
    }
    if (v40 <= 4)
    {
      if (v40 <= 1) {
        uint64_t v97 = 1;
      }
      else {
        uint64_t v97 = v40;
      }
      if ((!*(_DWORD *)(v448 + 1296) || v447[0])
        && (v40 < 2
         || (!*(_DWORD *)(v451 + 1296) || v450)
         && (v97 == 2 || (!*(_DWORD *)(v454 + 1296) || v453) && (v97 == 3 || !*(_DWORD *)(v457 + 1296) || v456))))
      {
        goto LABEL_670;
      }
      unsigned int v90 = (char *)__p;
    }
    else
    {
      unint64_t v88 = 0;
      unsigned int v89 = 1;
      unsigned int v90 = (char *)__p;
      while (1)
      {
        uint64_t v96 = (char *)__p + 16 * v88;
        if (*(_DWORD *)(*((void *)v96 + 1) + 1296))
        {
          if (!v96[4]) {
            break;
          }
        }
        unint64_t v88 = v89++;
        if (v40 <= v88) {
          goto LABEL_670;
        }
      }
      uint64_t v97 = v40;
    }
    uint64_t v216 = 0;
    char v217 = 0;
    int v218 = 0;
    do
    {
      if (*a4 < 5)
      {
        if (v40 <= 4)
        {
          unsigned int v228 = (float *)&v447[16 * v216];
          float v229 = v228;
          while (1)
          {
            int v230 = *(unsigned __int8 *)v229;
            v229 += 4;
            if (!v230 && (*(_DWORD *)(v420[v216] + 1296) & 0xFFFFFFFE) == 2)
            {
              float v231 = *(v228 - 1);
              v218 |= v231 >= v11;
              if (v231 < 1.0) {
                break;
              }
            }
            ++v216;
            unsigned int v228 = v229;
            if (v97 == v216)
            {
LABEL_493:
              if ((v217 & 1) == 0) {
                goto LABEL_670;
              }
              goto LABEL_494;
            }
          }
        }
        else
        {
          uint64_t v224 = (uint64_t)&v90[16 * v216 + 4];
          unsigned int v225 = (unsigned __int8 *)v224;
          while (1)
          {
            int v226 = *v225;
            v225 += 16;
            if (!v226 && (*(_DWORD *)(v420[v216] + 1296) & 0xFFFFFFFE) == 2)
            {
              float v227 = *(float *)(v224 - 4);
              v218 |= v227 >= v11;
              if (v227 < 1.0) {
                break;
              }
            }
            ++v216;
            uint64_t v224 = (uint64_t)v225;
            if (v97 == v216) {
              goto LABEL_493;
            }
          }
        }
      }
      else
      {
        uint64_t v219 = 2 * v216;
        char v220 = &v445;
        char v221 = v90;
        while (1)
        {
          unint64_t v222 = (float *)&v221[v219 * 8];
          uint64_t v223 = &v221[v219 * 8 + 4];
          if (v40 <= 4) {
            uint64_t v223 = (char *)&v220[v219 + 1] + 4;
          }
          if (!*v223 && (*(_DWORD *)(*(void *)(a4[5] + 8 * v216) + 1296) & 0xFFFFFFFE) == 2)
          {
            if (v40 <= 4) {
              unint64_t v222 = (float *)&v220[v219 + 1];
            }
            v218 |= *v222 >= v11;
            if (*v222 < 1.0) {
              break;
            }
          }
          ++v216;
          v220 += 2;
          v221 += 16;
          if (v97 == v216) {
            goto LABEL_493;
          }
        }
      }
      ++v216;
      char v217 = 1;
    }
    while (v216 != v97);
LABEL_494:
    uint64_t v232 = *((void *)v443 + 41);
    if (!v232) {
      operator new();
    }
    BOOL v233 = *(void *)(v232 + 120) != 0;
    if (v86 == v87) {
      goto LABEL_670;
    }
    *(unsigned char *)(v9 + 620) = 1;
    unint64_t v472 = (char *)operator new(0x20uLL);
    uint64_t v473 = v472;
    unint64_t v474 = v472 + 32;
    if (!altitude::CompleteGlobeTileSetLoader::expandSubTree((altitude::CompleteGlobeTileSetLoader *)v9, (uint64_t)v443, (uint64_t)&v472, a4, a5, a3, *(_DWORD *)(v9 + 616)))
    {
      uint64_t v237 = v472;
      goto LABEL_783;
    }
    if (v473 == v472)
    {
      uint64_t v320 = v472;
      uint64_t v319 = v443;
      uint64_t v237 = v472;
      goto LABEL_712;
    }
    uint64_t v427 = v473;
    uint64_t v234 = 0;
    unsigned int v235 = 0;
    unsigned int v236 = 0;
    int v418 = v233 & v218;
    int v431 = *(unsigned __int8 *)(*(void *)(v9 + 32) + 69);
    unint64_t v437 = (v473 - v472) >> 3;
    uint64_t v237 = v472;
    double v433 = v472;
    do
    {
      unint64_t v239 = *(_DWORD **)&v237[8 * v234];
      uint64_t v240 = (*(uint64_t (**)(_DWORD *))(*(void *)v239 + 24))(v239);
      long long v461 = *(_OWORD *)v240;
      char v462 = *(altitude::Tile **)(v240 + 16);
      unint64_t v238 = *a4;
      if (*a4)
      {
        uint64_t v241 = 0;
        unint64_t v242 = 0;
        unsigned int v243 = 0;
        uint64_t v244 = 0xFFFFFFFFLL;
        do
        {
          uint64_t v245 = (uint64_t *)(a4[5] + v241 * 8);
          ++v241;
          if (v238 <= 4) {
            unint64_t v246 = (uint64_t *)&a4[v241];
          }
          else {
            unint64_t v246 = v245;
          }
          unsigned int v247 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v246, (double *)&v461)
                                     * 100000.0);
          if (v247 <= 1) {
            unsigned int v247 = 1;
          }
          if (v247 > v243)
          {
            uint64_t v244 = v242;
            unsigned int v243 = v247;
          }
          ++v242;
          unint64_t v238 = *a4;
        }
        while (v242 < *a4);
        a3 = v441;
        if (v244 == 0xFFFFFFFFLL)
        {
          LODWORD(v238) = 0;
        }
        else
        {
          if (v238 <= 4) {
            unint64_t v238 = (unint64_t)&a4[v244 + 1];
          }
          else {
            unint64_t v238 = a4[5] + 8 * v244;
          }
          LODWORD(v238) = *(_DWORD *)(*(void *)v238 + 1300) + v243;
        }
        a5 = v429;
        uint64_t v9 = (uint64_t)v439;
        uint64_t v237 = v433;
      }
      if (v236 <= v238) {
        unsigned int v236 = v238;
      }
      v239[96] = a3;
      v239[97] = a3;
      uint64_t v234 = ++v235;
    }
    while (v437 > v235);
    uint64_t v319 = v443;
    if (*(unsigned char *)(v9 + 613))
    {
      uint64_t v320 = v427;
      goto LABEL_712;
    }
    uint64_t v364 = 0;
    unsigned int v365 = 0;
    char v366 = 1;
    int v367 = v418;
    do
    {
      while (1)
      {
        uint64_t v368 = *(altitude::Tile **)&v237[8 * v364];
        if (*((unsigned char *)v368 + 432)) {
          break;
        }
        altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v9, v368);
        char v366 = 0;
        uint64_t v364 = ++v365;
        if (v437 <= v365) {
          goto LABEL_783;
        }
      }
      uint64_t v364 = ++v365;
    }
    while (v437 > v365);
    if ((v366 & 1) == 0) {
      goto LABEL_784;
    }
    unint64_t v369 = 0;
    unsigned int v370 = 0;
    unsigned int v371 = 1;
    do
    {
      uint64_t v372 = *(void *)&v237[8 * v369];
      *(void *)&long long v461 = 0;
      long long v470 = 0;
      uint64_t v471 = 0;
      long long v469 = 0;
      altitude::CompleteGlobeTileSetLoader::computeTileViewRelation((uint64_t)v439, a5, a4, v372, &v461, a3, 0);
      unsigned int v373 = altitude::CompleteGlobeTileSetLoader::computePriority((uint64_t)&v461, v372);
      if (v370 <= v373) {
        unsigned int v370 = v373;
      }
      if (v469)
      {
        long long v470 = v469;
        operator delete(v469);
      }
      unint64_t v369 = v371++;
    }
    while (v437 > v369);
    if (v427 == v237)
    {
      uint64_t v320 = v237;
      uint64_t v9 = (uint64_t)v439;
      uint64_t v319 = v443;
      goto LABEL_712;
    }
    uint64_t v375 = 0;
    long long v376 = v237;
    unsigned int v377 = 0;
    unsigned int v416 = v370 + 100000;
    unsigned int v428 = v370 + 700000;
    uint64_t v417 = v370 + 600000;
    int v378 = 1;
    uint64_t v9 = (uint64_t)v439;
    uint64_t v379 = v425;
    do
    {
      int v434 = v378;
      uint64_t v380 = *(altitude::Tile **)&v376[8 * v375];
      long long v381 = (__n128 *)*((void *)v380 + 41);
      if (!v381) {
        operator new();
      }
      float v438 = (__n128 *)*((void *)v380 + 41);
      if (v431)
      {
        if (!v381[8].n128_u64[1] && !*((_DWORD *)v443 + 101))
        {
          *(void *)&long long v461 = *(void *)&v376[8 * v375];
          uint64_t v399 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v379, (unint64_t)v380);
          if (v399)
          {
            unsigned int v400 = *((_DWORD *)v399 + 6);
            if (v400 <= v428) {
              unsigned int v400 = v428;
            }
          }
          else
          {
            uint64_t v399 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v379, (unint64_t)v380, &v461);
            unsigned int v400 = v428;
          }
          *((_DWORD *)v399 + 6) = v400;
          int v382 = v367;
          long long v381 = v438;
          goto LABEL_899;
        }
        if (!v367)
        {
          int v382 = 0;
LABEL_899:
          if (!v381[8].n128_u64[1] && !*((_DWORD *)v443 + 101)) {
            goto LABEL_903;
          }
          if (!v382) {
            goto LABEL_807;
          }
          int v378 = v434;
          if (!v381[7].n128_u64[1]) {
LABEL_903:
          }
            int v378 = 0;
          goto LABEL_808;
        }
        if (altitude::Tile::hasLoadedData(v380))
        {
          int v382 = 1;
          uint64_t v379 = v425;
          long long v381 = v438;
          goto LABEL_899;
        }
        *(void *)&long long v461 = 0;
        long long v470 = 0;
        uint64_t v471 = 0;
        long long v469 = 0;
        altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v9, a5, a4, (uint64_t)v380, &v461, a3, 0);
        if (!(void)v461) {
          goto LABEL_894;
        }
        if ((unint64_t)v461 >= 5)
        {
          unint64_t v396 = 0;
          unsigned int v397 = 1;
          while (1)
          {
            uint64_t v398 = (char *)&v469[4 * v396];
            if (*(_DWORD *)(*((void *)v398 + 1) + 1296))
            {
              if (!v398[4]) {
                goto LABEL_881;
              }
            }
            unint64_t v396 = v397++;
            if ((unint64_t)v461 <= v396) {
              goto LABEL_894;
            }
          }
        }
        if (*((_DWORD *)v462 + 324) && !BYTE12(v461))
        {
LABEL_881:
          altitude::CompleteGlobeTileSetLoader::queueLoadMesh((void *)v9, v380, v416);
          int v382 = 1;
          goto LABEL_895;
        }
        if ((void)v461 == 1) {
          goto LABEL_894;
        }
        if (*((_DWORD *)v464 + 324) && !BYTE4(v463)) {
          goto LABEL_881;
        }
        if ((void)v461 == 2) {
          goto LABEL_894;
        }
        if (*((_DWORD *)v466 + 324) && !BYTE4(v465)) {
          goto LABEL_881;
        }
        if ((void)v461 == 3)
        {
LABEL_894:
          int v382 = 0;
        }
        else
        {
          int v382 = 0;
          if (*(_DWORD *)(v468 + 1296))
          {
            a5 = v429;
            uint64_t v9 = (uint64_t)v439;
            a3 = v441;
            int v367 = v418;
            a4 = v435;
            if (!BYTE4(v467)) {
              goto LABEL_881;
            }
          }
          else
          {
            a5 = v429;
            uint64_t v9 = (uint64_t)v439;
            a3 = v441;
            int v367 = v418;
            a4 = v435;
          }
        }
LABEL_895:
        if (v469)
        {
          long long v470 = v469;
          operator delete(v469);
        }
        goto LABEL_897;
      }
      int v383 = (*(uint64_t (**)(__n128 *))(v381->n128_u64[0] + 56))(v381) ^ 1;
      uint64_t v384 = *((void *)v380 + 42);
      if (v384) {
        v383 += (*(uint64_t (**)(uint64_t))(*(void *)v384 + 56))(v384) ^ 1;
      }
      uint64_t v385 = *((void *)v380 + 43);
      if (v385) {
        v383 += (*(uint64_t (**)(uint64_t))(*(void *)v385 + 56))(v385) ^ 1;
      }
      uint64_t v386 = *((void *)v380 + 44);
      if (v386) {
        v383 += (*(uint64_t (**)(uint64_t))(*(void *)v386 + 56))(v386) ^ 1;
      }
      uint64_t v387 = *((void *)v380 + 45);
      if (v387) {
        v383 += (*(uint64_t (**)(uint64_t))(*(void *)v387 + 56))(v387) ^ 1;
      }
      if (!v383)
      {
        int v390 = v438[14].n128_u32[0] - 1;
        unint64_t v391 = v380;
        while (1)
        {
          BOOL v262 = v390-- != 0;
          if (!v262) {
            break;
          }
          unint64_t v391 = (altitude::Tile *)*((void *)v391 + 37);
          if (!v391) {
            break;
          }
          if (altitude::Tile::hasLoadedData(v391))
          {
            uint64_t v392 = *(__n128 **)(v9 + 664);
            if ((unint64_t)v392 >= *(void *)(v9 + 672))
            {
              uint64_t v395 = v438;
              uint64_t v394 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v419, v438[13]);
            }
            else
            {
              v392->n128_u64[0] = v438[13].n128_u64[0];
              unint64_t v393 = v438[13].n128_u64[1];
              v392->n128_u64[1] = v393;
              if (v393) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v393 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v394 = v392 + 1;
              uint64_t v395 = v438;
            }
            *(void *)(v9 + 664) = v394;
            if (v395[13].n128_u64[0])
            {
              long long v461 = 0uLL;
              altitude::GlobeTileComponent::setFallbackElement((uint64_t)v438, (uint64_t *)&v461, 0);
            }
            break;
          }
        }
      }
      if (altitude::Tile::hasLoadedData(v380) || !altitude::Tile::needsFallbackData(v380))
      {
        int v382 = 1;
LABEL_897:
        uint64_t v379 = v425;
        long long v381 = v438;
        goto LABEL_898;
      }
      unint64_t v388 = v380;
      uint64_t v379 = v425;
      long long v381 = v438;
      do
      {
        unint64_t v388 = (altitude::Tile *)*((void *)v388 + 37);
        if (!v388) {
          goto LABEL_878;
        }
        uint64_t v389 = *((void *)v388 + 41);
        if (!v389) {
          operator new();
        }
      }
      while (!*(void *)(v389 + 120));
      unint64_t v401 = (uint64_t *)v424;
      uint64_t v402 = *v424;
      uint64_t v403 = v424;
      if (!*v424)
      {
LABEL_874:
        unint64_t v411 = v401;
        unint64_t v401 = (uint64_t *)operator new(0x30uLL);
        v401[4] = (uint64_t)v380;
        v401[5] = 0;
        *unint64_t v401 = 0;
        v401[1] = 0;
        v401[2] = (uint64_t)v411;
        *uint64_t v403 = v401;
        uint64_t v412 = **(void **)(v9 + 536);
        unint64_t v413 = v401;
        if (v412)
        {
          *(void *)(v9 + 536) = v412;
          unint64_t v413 = *v403;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 544), v413);
        ++*(void *)(v9 + 552);
        a3 = v441;
        uint64_t v379 = v425;
        long long v381 = v438;
LABEL_877:
        v401[5] = v417;
        goto LABEL_878;
      }
      uint64_t v404 = v424;
      uint64_t v405 = *v424;
      do
      {
        unint64_t v406 = v405[4];
        BOOL v407 = v406 >= (unint64_t)v380;
        if (v406 >= (unint64_t)v380) {
          uint64_t v408 = (uint64_t **)v405;
        }
        else {
          uint64_t v408 = (uint64_t **)(v405 + 1);
        }
        if (v407) {
          uint64_t v404 = (uint64_t **)v405;
        }
        uint64_t v405 = *v408;
      }
      while (*v408);
      if (v404 == v424 || v404[4] > (uint64_t *)v380)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v401 = v402;
            unint64_t v410 = v402[4];
            if (v410 <= (unint64_t)v380) {
              break;
            }
            uint64_t v402 = (uint64_t *)*v401;
            uint64_t v403 = (uint64_t **)v401;
            if (!*v401) {
              goto LABEL_874;
            }
          }
          if (v410 >= (unint64_t)v380) {
            goto LABEL_877;
          }
          uint64_t v402 = (uint64_t *)v401[1];
          if (!v402)
          {
            uint64_t v403 = (uint64_t **)(v401 + 1);
            goto LABEL_874;
          }
        }
      }
      unsigned int v409 = *((_DWORD *)v404 + 10);
      if (v409 <= v417) {
        unsigned int v409 = v417;
      }
      *((_DWORD *)v404 + 10) = v409;
      *((_DWORD *)v404 + 11) = 0;
LABEL_878:
      int v382 = 1;
      int v367 = v418;
LABEL_898:
      if (v431) {
        goto LABEL_899;
      }
      if (!altitude::Tile::hasLoadedData(v380) && altitude::Tile::needsFallbackData(v380))
      {
        uint64_t v379 = v425;
        while (1)
        {
          uint64_t v380 = (altitude::Tile *)*((void *)v380 + 37);
          if (!v380) {
            break;
          }
          uint64_t v414 = *((void *)v380 + 41);
          if (!v414) {
            operator new();
          }
          int v378 = 0;
          if (*(void *)(v414 + 120)) {
            goto LABEL_808;
          }
        }
LABEL_807:
        int v378 = v434;
        goto LABEL_808;
      }
      int v378 = v434;
      uint64_t v379 = v425;
LABEL_808:
      long long v376 = v472;
      uint64_t v375 = ++v377;
    }
    while (v377 < (unint64_t)((v473 - v472) >> 3));
    uint64_t v319 = v443;
    uint64_t v237 = v472;
    uint64_t v320 = v473;
    if ((v378 & 1) == 0) {
      goto LABEL_783;
    }
LABEL_712:
    DWORD2(v461) = 0;
    *(void *)&long long v461 = &unk_1EF568C98;
    char v462 = v319;
    long long v464 = 0;
    long long v465 = 0;
    float v463 = 0;
    int64_t v321 = v320 - v237;
    if (v320 != v237)
    {
      if ((v321 & 0x8000000000000000) == 0)
      {
        float v463 = (altitude::Tile *)operator new(v320 - v237);
        long long v464 = v463;
        uint64_t v322 = (char *)v463 + 8 * (v321 >> 3);
        long long v465 = v322;
        memcpy(v463, v237, v321);
        long long v464 = (altitude::Tile *)v322;
        goto LABEL_715;
      }
LABEL_922:
      abort();
    }
LABEL_715:
    uint64_t v323 = *((void *)v319 + 41);
    if (v323) {
      int v324 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v323 + 96))(v323, &v461);
    }
    else {
      int v324 = 1;
    }
    uint64_t v325 = *((void *)v319 + 42);
    if (v325) {
      v324 &= (*(uint64_t (**)(uint64_t, long long *))(*(void *)v325 + 96))(v325, &v461);
    }
    uint64_t v326 = *((void *)v319 + 43);
    if (v326) {
      v324 &= (*(uint64_t (**)(uint64_t, long long *))(*(void *)v326 + 96))(v326, &v461);
    }
    uint64_t v327 = *((void *)v319 + 44);
    if (v327) {
      v324 &= (*(uint64_t (**)(uint64_t, long long *))(*(void *)v327 + 96))(v327, &v461);
    }
    uint64_t v328 = *((void *)v319 + 45);
    if (!v328)
    {
      if (!v324) {
        goto LABEL_779;
      }
      goto LABEL_728;
    }
    if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v328 + 96))(v328, &v461) & v324)
    {
LABEL_728:
      int v329 = v462;
      uint64_t v330 = *((void *)v462 + 41);
      if (v330) {
        (*(void (**)(uint64_t, long long *))(*(void *)v330 + 104))(v330, &v461);
      }
      uint64_t v331 = *((void *)v329 + 42);
      if (v331) {
        (*(void (**)(uint64_t, long long *))(*(void *)v331 + 104))(v331, &v461);
      }
      uint64_t v332 = *((void *)v329 + 43);
      if (v332) {
        (*(void (**)(uint64_t, long long *))(*(void *)v332 + 104))(v332, &v461);
      }
      uint64_t v333 = *((void *)v329 + 44);
      if (v333) {
        (*(void (**)(uint64_t, long long *))(*(void *)v333 + 104))(v333, &v461);
      }
      uint64_t v334 = *((void *)v329 + 45);
      if (v334) {
        (*(void (**)(uint64_t, long long *))(*(void *)v334 + 104))(v334, &v461);
      }
      long long v335 = (char *)v462;
      uint64_t v337 = *((void *)a2 + 5);
      uint64_t v336 = *((void *)a2 + 6);
      if (v336 != v337)
      {
        unint64_t v338 = 0;
        unsigned int v339 = 1;
        do
        {
          if (*(char **)(v337 + 8 * v338) == v335)
          {
            *(void *)(v337 + 8 * v338) = 0;
            uint64_t v337 = *((void *)a2 + 5);
            uint64_t v336 = *((void *)a2 + 6);
          }
          unint64_t v338 = v339++;
        }
        while (v338 < (v336 - v337) >> 3);
      }
      unint64_t v340 = (char *)*((void *)a2 + 8);
      uint64_t v341 = (char *)*((void *)a2 + 9);
      if (v341 != v340)
      {
        unint64_t v342 = 0;
        unsigned int v343 = 1;
        do
        {
          if (*(char **)&v340[8 * v342] == v335)
          {
            *(void *)&v340[8 * v342] = 0;
            unint64_t v340 = (char *)*((void *)a2 + 8);
            uint64_t v341 = (char *)*((void *)a2 + 9);
          }
          unint64_t v342 = v343++;
        }
        while (v342 < (v341 - v340) >> 3);
      }
      uint64_t v345 = v463;
      uint64_t v344 = v464;
      if (v463 == v464) {
        goto LABEL_780;
      }
      unsigned int v444 = v464;
      while (1)
      {
        uint64_t v347 = *(void *)v345;
        unint64_t v348 = *((void *)a2 + 10);
        if ((unint64_t)v341 >= v348) {
          break;
        }
        *(void *)uint64_t v341 = v347;
        uint64_t v346 = v341 + 8;
        a3 = v441;
LABEL_751:
        *((void *)a2 + 9) = v346;
        uint64_t v345 = (altitude::Tile *)((char *)v345 + 8);
        uint64_t v341 = v346;
        if (v345 == v344) {
          goto LABEL_779;
        }
      }
      uint64_t v349 = (char *)*((void *)a2 + 8);
      uint64_t v350 = (v341 - v349) >> 3;
      unint64_t v351 = v350 + 1;
      if ((unint64_t)(v350 + 1) >> 61) {
        goto LABEL_922;
      }
      uint64_t v352 = v348 - (void)v349;
      if (v352 >> 2 > v351) {
        unint64_t v351 = v352 >> 2;
      }
      if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v353 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v353 = v351;
      }
      if (v353)
      {
        if (v353 >> 61) {
          goto LABEL_923;
        }
        uint64_t v354 = operator new(8 * v353);
      }
      else
      {
        uint64_t v354 = 0;
      }
      uint64_t v355 = &v354[8 * v350];
      *uint64_t v355 = v347;
      uint64_t v346 = (char *)(v355 + 1);
      if (v341 == v349)
      {
        uint64_t v349 = v341;
        uint64_t v9 = (uint64_t)v439;
        a3 = v441;
      }
      else
      {
        unint64_t v356 = v341 - 8 - v349;
        a3 = v441;
        if (v356 < 0x168
          || &v354[v341 - v349 - 8 - (v356 & 0xFFFFFFFFFFFFFFF8)] > &v354[v341 - v349 - 8]
          || &v341[-(v356 & 0xFFFFFFFFFFFFFFF8) - 8] > v341 - 8
          || (unint64_t)(v349 - v354) < 0x20)
        {
          uint64_t v357 = v341;
          uint64_t v9 = (uint64_t)v439;
          goto LABEL_769;
        }
        uint64_t v359 = (v356 >> 3) + 1;
        uint64_t v357 = &v341[-8 * (v359 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v360 = &v354[8 * v350 - 16];
        uint64_t v361 = v341 - 16;
        uint64_t v362 = v359 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v9 = (uint64_t)v439;
        do
        {
          long long v363 = *(_OWORD *)v361;
          *(v360 - 1) = *((_OWORD *)v361 - 1);
          *uint64_t v360 = v363;
          v360 -= 2;
          v361 -= 32;
          v362 -= 4;
        }
        while (v362);
        v355 -= v359 & 0x3FFFFFFFFFFFFFFCLL;
        if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_769:
            uint64_t v358 = *((void *)v357 - 1);
            v357 -= 8;
            *--uint64_t v355 = v358;
          }
          while (v357 != v349);
          uint64_t v349 = (char *)*((void *)a2 + 8);
        }
      }
      *((void *)a2 + 8) = v355;
      *((void *)a2 + 9) = v346;
      *((void *)a2 + 10) = &v354[8 * v353];
      if (v349) {
        operator delete(v349);
      }
      a5 = v429;
      uint64_t v344 = v444;
      goto LABEL_751;
    }
LABEL_779:
    uint64_t v345 = v463;
LABEL_780:
    *(void *)&long long v461 = &unk_1EF568C98;
    if (v345)
    {
      long long v464 = v345;
      operator delete(v345);
    }
    uint64_t v237 = v472;
LABEL_783:
    if (v237) {
LABEL_784:
    }
      operator delete(v237);
LABEL_670:
    if (__p)
    {
      int64x2_t v459 = __p;
      operator delete(__p);
    }
    unsigned __int8 v36 = (uint64_t *)*((void *)a2 + 6);
    long long v37 = v442;
LABEL_46:
    if (++v37 != v36) {
      continue;
    }
    break;
  }
LABEL_921:
  altitude::CompleteGlobeTileSetLoader::processQueues((altitude::CompleteGlobeTileSetLoader *)v9);
  altitude::TileSetNode::swap(a2);
}

void altitude::CompleteGlobeTileSetLoader::processQueues(altitude::CompleteGlobeTileSetLoader *this)
{
  uint64_t v392 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((void *)this + 60);
  if (v2)
  {
    memset(v382, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v382, v2);
    int v3 = *(altitude::Tile ***)v382;
    uint64_t v4 = (uint64_t *)*((void *)this + 59);
    if (v4)
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v6 = v4[2];
        uint64_t v7 = (char *)&v3[2 * v5];
        *(_DWORD *)uint64_t v7 = *((_DWORD *)v4 + 6);
        *((void *)v7 + 1) = v6;
        ++v5;
        uint64_t v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
    int v8 = *(altitude::Tile ***)&v382[8];
    unint64_t v9 = 126 - 2 * __clz((uint64_t)(*(void *)&v382[8] - (void)v3) >> 4);
    if (*(altitude::Tile ***)&v382[8] == v3) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v3, *(unint64_t *)&v382[8], v10, 1);
    if (v8 != v3)
    {
      unsigned int v11 = 0;
      BOOL v12 = v8 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadBaseSurface(this, v12[1]);
        if (v12 == v3) {
          break;
        }
        v12 -= 2;
        BOOL v13 = v11++ >= 0x12B;
      }
      while (!v13);
    }
    if (v3) {
      operator delete(v3);
    }
  }
  uint64_t v355 = (std::string *)((char *)this + 560);
  *((void *)this + 71) = *((void *)this + 70);
  *((void *)this + 74) = *((void *)this + 73);
  unint64_t v14 = *((void *)this + 69);
  if (v14)
  {
    if (v14 >> 60) {
      goto LABEL_538;
    }
    int64_t v15 = 16 * v14;
    int v16 = (char *)operator new(16 * v14);
    bzero(v16, v15);
    uint64_t v17 = &v16[v15];
    uint64_t v18 = (altitude::CompleteGlobeTileSetLoader *)*((void *)this + 67);
    if (v18 != (altitude::CompleteGlobeTileSetLoader *)((char *)this + 544))
    {
      int v19 = 0;
      do
      {
        uint64_t v20 = *((void *)v18 + 4);
        unsigned int v21 = &v16[16 * v19];
        *(void *)unsigned int v21 = *((void *)v18 + 5);
        *((void *)v21 + 1) = v20;
        uint64_t v22 = (altitude::CompleteGlobeTileSetLoader *)*((void *)v18 + 1);
        if (v22)
        {
          do
          {
            unsigned int v23 = v22;
            uint64_t v22 = *(altitude::CompleteGlobeTileSetLoader **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unsigned int v23 = (altitude::CompleteGlobeTileSetLoader *)*((void *)v18 + 2);
            BOOL v24 = *(void *)v23 == (void)v18;
            uint64_t v18 = v23;
          }
          while (!v24);
        }
        ++v19;
        uint64_t v18 = v23;
      }
      while (v23 != (altitude::CompleteGlobeTileSetLoader *)((char *)this + 544));
    }
    unint64_t v25 = 126 - 2 * __clz(v15 >> 4);
    if (v15) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *,false>((unint64_t)v16, &v16[v15], v26, 1);
    if (v15)
    {
      unsigned int v27 = 0;
      uint64_t v345 = (char *)this + 656;
      unint64_t v351 = v16;
      do
      {
        unsigned int v28 = *((_DWORD *)v17 - 4);
        v17 -= 16;
        unsigned int v357 = v28;
        uint64_t v29 = *((void *)v17 + 1);
        unsigned int v30 = *((_DWORD *)v17 + 1);
        *((unsigned char *)this + 620) = 1;
        uint64_t v31 = v29;
        do
        {
          uint64_t v31 = *(void *)(v31 + 296);
          if (!v31) {
            goto LABEL_181;
          }
          uint64_t v32 = *(void *)(v31 + 328);
          if (!v32) {
            operator new();
          }
        }
        while (!*(void *)(v32 + 120));
        if (v30 && *(_DWORD *)(v29 + 392) - *(_DWORD *)(v31 + 392) > v30 && *(void *)(v29 + 296))
        {
          do
          {
            uint64_t v29 = *(void *)(v29 + 296);
            --v30;
          }
          while (v30);
          altitude::CompleteGlobeTileSetLoader::queueLoadMesh(this, (altitude::Tile *)v29, v357);
          if (v17 == v16) {
            break;
          }
          goto LABEL_182;
        }
        uint64_t v33 = *(void *)(v29 + 328);
        if (*(unsigned char *)(v32 + 296))
        {
          if (!v33) {
            operator new();
          }
          if (!*(void *)(v33 + 208) || *(_DWORD *)(v33 + 224) != *(_DWORD *)(v29 + 392) - *(_DWORD *)(v31 + 392))
          {
            unint64_t v353 = v17;
            uint64_t v34 = *(void *)(v29 + 288);
            *(_OWORD *)int v382 = *(_OWORD *)(v29 + 392);
            *(_OWORD *)&v382[16] = *(_OWORD *)(v31 + 392);
            int v35 = (_OWORD *)*((void *)this + 71);
            unint64_t v36 = *((void *)this + 72);
            if ((unint64_t)v35 >= v36)
            {
              uint64_t v38 = (_OWORD *)v355->__r_.__value_.__r.__words[0];
              uint64_t v39 = (uint64_t)((uint64_t)v35 - v355->__r_.__value_.__r.__words[0]) >> 6;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 58) {
                goto LABEL_538;
              }
              uint64_t v41 = v36 - (void)v38;
              if (v41 >> 5 > v40) {
                unint64_t v40 = v41 >> 5;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0) {
                unint64_t v42 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                if (v42 >> 58) {
                  goto LABEL_539;
                }
                unsigned int v43 = (char *)operator new(v42 << 6);
              }
              else
              {
                unsigned int v43 = 0;
              }
              long long v63 = *(_OWORD *)&v382[16];
              int v64 = &v43[64 * v39];
              *(_OWORD *)int v64 = *(_OWORD *)v382;
              *((_OWORD *)v64 + 1) = v63;
              *((void *)v64 + 4) = v34;
              *((void *)v64 + 5) = v31;
              *((_DWORD *)v64 + 12) = v357;
              *((_DWORD *)v64 + 13) = 1;
              v64[56] = 0;
              int v65 = v64;
              if (v35 == v38)
              {
                int v16 = v351;
              }
              else
              {
                int v16 = v351;
                do
                {
                  long long v66 = *(v35 - 4);
                  long long v67 = *(v35 - 3);
                  long long v68 = *(v35 - 2);
                  *(_OWORD *)(v65 - 23) = *(_OWORD *)((char *)v35 - 23);
                  *((_OWORD *)v65 - 3) = v67;
                  *((_OWORD *)v65 - 2) = v68;
                  *((_OWORD *)v65 - 4) = v66;
                  v65 -= 64;
                  v35 -= 4;
                }
                while (v35 != v38);
                int v35 = (_OWORD *)v355->__r_.__value_.__r.__words[0];
              }
              *((void *)this + 70) = v65;
              long long v37 = v64 + 64;
              *((void *)this + 71) = v64 + 64;
              *((void *)this + 72) = &v43[64 * v42];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              *int v35 = *(_OWORD *)v382;
              v35[1] = *(_OWORD *)&v382[16];
              *((void *)v35 + 4) = v34;
              *((void *)v35 + 5) = v31;
              *((_DWORD *)v35 + 12) = v357;
              *((_DWORD *)v35 + 13) = 1;
              *((unsigned char *)v35 + 56) = 0;
              long long v37 = v35 + 4;
            }
            *((void *)this + 71) = v37;
            int v69 = (uint64_t *)*((void *)this + 74);
            unint64_t v70 = *((void *)this + 75);
            if ((unint64_t)v69 < v70)
            {
              *int v69 = v29;
              unint64_t v71 = v69 + 1;
              uint64_t v17 = v353;
LABEL_116:
              *((void *)this + 74) = v71;
              goto LABEL_117;
            }
            uint64_t v72 = (uint64_t *)*((void *)this + 73);
            uint64_t v73 = v69 - v72;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61) {
              goto LABEL_538;
            }
            uint64_t v75 = v70 - (void)v72;
            if (v75 >> 2 > v74) {
              unint64_t v74 = v75 >> 2;
            }
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v74;
            }
            if (v76)
            {
              if (v76 >> 61) {
LABEL_539:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              uint64_t v77 = operator new(8 * v76);
            }
            else
            {
              uint64_t v77 = 0;
            }
            float v78 = (uint64_t *)&v77[8 * v73];
            *float v78 = v29;
            unint64_t v71 = v78 + 1;
            if (v69 == v72)
            {
              uint64_t v72 = v69;
              int v16 = v351;
            }
            else
            {
              unint64_t v79 = (char *)v69 - (char *)v72 - 8;
              if (v79 >= 0x58)
              {
                int v16 = v351;
                if ((unint64_t)((char *)v72 - v77) < 0x20) {
                  goto LABEL_111;
                }
                uint64_t v80 = (v79 >> 3) + 1;
                unsigned int v81 = &v77[8 * v73 - 16];
                uint64_t v82 = v69 - 2;
                uint64_t v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v84 = *(_OWORD *)v82;
                  *(v81 - 1) = *((_OWORD *)v82 - 1);
                  *unsigned int v81 = v84;
                  v81 -= 2;
                  v82 -= 4;
                  v83 -= 4;
                }
                while (v83);
                v78 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
                v69 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
                if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_111;
                }
              }
              else
              {
                int v16 = v351;
                do
                {
LABEL_111:
                  uint64_t v85 = *--v69;
                  *--float v78 = v85;
                }
                while (v69 != v72);
                uint64_t v72 = (uint64_t *)*((void *)this + 73);
              }
            }
            *((void *)this + 73) = v78;
            *((void *)this + 74) = v71;
            *((void *)this + 75) = &v77[8 * v76];
            if (v72) {
              operator delete(v72);
            }
            uint64_t v17 = v353;
            goto LABEL_116;
          }
        }
        else
        {
          if (!v33) {
            operator new();
          }
          if (!*(void *)(v33 + 208) || *(_DWORD *)(v33 + 224) != *(_DWORD *)(v29 + 392) - *(_DWORD *)(v31 + 392))
          {
            uint64_t v44 = *(void *)(v31 + 328);
            if (!v44) {
              operator new();
            }
            uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 56))(v31);
            *(_OWORD *)uint64_t v354 = *(_OWORD *)(v45 + 24);
            float64x2_t v46 = vsubq_f64(*(float64x2_t *)(v45 + 32), *(float64x2_t *)(v45 + 8));
            long long v347 = *(_OWORD *)v45;
            int64x2_t v349 = (int64x2_t)vmulq_f64(v46, v46);
            uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 56))(v29);
            *(void *)&v48.f64[0] = v347;
            v48.f64[1] = *(float64_t *)v47;
            float64x2_t v49 = vsubq_f64(*(float64x2_t *)(v47 + 32), *(float64x2_t *)(v47 + 8));
            int64x2_t v50 = (int64x2_t)vmulq_f64(v49, v49);
            *(std::string **)&v51.f64[0] = v354[0];
            v51.f64[1] = *(float64_t *)(v47 + 24);
            float64x2_t v52 = vsubq_f64(v51, v48);
            float64x2_t v53 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v349, v50), v52, v52), (float64x2_t)vzip2q_s64(v349, v50))), (float64x2_t)xmmword_1A28FD0C0);
            altitude::Tile::createClipPlanes(v29, (double *)v382, fmin(fmax(vdivq_f64(v53, (float64x2_t)vdupq_laneq_s64((int64x2_t)v53, 1)).f64[0] + 1.0, 1.0), 1.5));
            altitude::util::createFallbackElement(__p, (uint64_t *)(v44 + 120), (double *)v382);
            unint64_t v54 = *(void *)(v33 + 208);
            if (v54)
            {
              double v55 = (__n128 *)*((void *)this + 83);
              if ((unint64_t)v55 >= *((void *)this + 84))
              {
                uint64_t v57 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v345, *(__n128 *)(v33 + 208));
              }
              else
              {
                v55->n128_u64[0] = v54;
                unint64_t v56 = *(void *)(v33 + 216);
                v55->n128_u64[1] = v56;
                if (v56) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v57 = v55 + 1;
              }
              *((void *)this + 83) = v57;
            }
            unint64_t v58 = *(void *)(v33 + 120);
            if (v58)
            {
              int v59 = (__n128 *)*((void *)this + 83);
              if ((unint64_t)v59 >= *((void *)this + 84))
              {
                uint64_t v61 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v345, *(__n128 *)(v33 + 120));
              }
              else
              {
                v59->n128_u64[0] = v58;
                unint64_t v60 = *(void *)(v33 + 128);
                v59->n128_u64[1] = v60;
                if (v60) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v61 = v59 + 1;
              }
              *((void *)this + 83) = v61;
              altitude::GlobeTileComponent::destroyGeometryElement((altitude::GlobeTileComponent *)v33);
            }
            altitude::GlobeTileComponent::setFallbackElement(v33, (uint64_t *)__p, *(_DWORD *)(v31 + 392));
            unint64_t v62 = (std::__shared_weak_count *)__p[1];
            if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
LABEL_117:
        uint64_t v86 = *(void *)(v29 + 336);
        if (*(unsigned char *)(*((void *)this + 23) + 136))
        {
          if (!v86) {
            operator new();
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v86 + 56))(v86) & 1) == 0)
          {
            uint64_t v87 = *(void *)(v31 + 336);
            if (!v87) {
              operator new();
            }
            unint64_t v88 = v17;
            char v89 = 0;
            uint64_t v90 = *(void *)(v29 + 392);
            unsigned int v91 = *(_DWORD *)(v29 + 400);
            *(void *)int v382 = 20;
            *(void *)&v382[8] = 0;
            *(void *)&v382[16] = v90;
            *(void *)&v382[24] = v91;
            uint64_t v92 = *((void *)this + 24);
            LOBYTE(v91) = atomic_load((unsigned __int8 *)(*(void *)(v92 + 96) + 224));
            if (v91) {
              char v89 = (*(uint64_t (**)(void, unsigned char *))(**(void **)(v92 + 96) + 112))(*(void *)(v92 + 96), v382);
            }
            *(unsigned char *)(v86 + 121) = v89;
            uint64_t v93 = *(void *)(v87 + 88);
            if (v93)
            {
              uint64_t v94 = *((void *)this + 24);
              BOOL v95 = *(std::__shared_weak_count **)(v87 + 96);
              if (v95)
              {
                atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(void *)long long buf = v93;
              uint64_t v389 = &v95->__vftable;
              (*(void (**)(void **__return_ptr))(*(void *)v94 + 80))(__p);
              uint64_t v96 = (std::__shared_weak_count *)v389;
              if (v389 && !atomic_fetch_add(v389 + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
              if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
              int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)__p);
              if (Status)
              {
                uint64_t v17 = v88;
                if (Status == 4)
                {
                  uint64_t v375 = 0;
                  long long v376 = 0;
                  uint64_t v389 = 0;
                  *(void *)&long long v390 = 0;
                  *(void *)long long buf = &v389;
                  if (altitude::RoadRequestManager::getRoadTile(*((pthread_mutex_t ***)this + 24), (uint64_t)v382, &v375, (uint64_t)buf))
                  {
                    int v98 = v375;
                    if (v375)
                    {
                      int v99 = (std::__shared_weak_count *)v376;
                      if (v376) {
                        atomic_fetch_add_explicit(v376 + 1, 1uLL, memory_order_relaxed);
                      }
                      if (*(void *)(v86 + 104)) {
                        (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v86 + 16) + 424)
                      }
                                                                        + 24))(*(void *)(*(void *)(v86 + 16) + 424), *(void *)(v86 + 16), v86);
                      if (v99) {
                        atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      int v100 = *(std::__shared_weak_count **)(v86 + 112);
                      *(void *)(v86 + 104) = v98;
                      *(void *)(v86 + 112) = v99;
                      if (!v100) {
                        goto LABEL_148;
                      }
                      if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                      int v98 = *(atomic_ullong ***)(v86 + 104);
                      if (v98) {
LABEL_148:
                      }
                        (*(void (**)(void, void, uint64_t, atomic_ullong **))(**(void **)(*(void *)(v86 + 16) + 424)
                                                                                          + 16))(*(void *)(*(void *)(v86 + 16) + 424), *(void *)(v86 + 16), v86, v98);
                      if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                        std::__shared_weak_count::__release_weak(v99);
                      }
                    }
                  }
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v389);
                  int v101 = (std::__shared_weak_count *)v376;
                  if (v376 && !atomic_fetch_add(v376 + 1, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v101);
                  }
                  uint64_t v17 = v88;
                }
              }
              else
              {
                uint64_t v17 = v88;
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                }
                float v103 = GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
                {
                  int v104 = *(_DWORD *)(v29 + 396);
                  int v105 = *(_DWORD *)(v29 + 400);
                  int v106 = *(_DWORD *)(v29 + 392);
                  *(_DWORD *)long long buf = 67109632;
                  *(_DWORD *)&buf[4] = v104;
                  LOWORD(v389) = 1024;
                  *(_DWORD *)((char *)&v389 + 2) = v105;
                  HIWORD(v389) = 1024;
                  LODWORD(v390) = v106;
                  _os_log_impl(&dword_1A1780000, v103, OS_LOG_TYPE_ERROR, "Failed to load road data for tile %u %u %u", buf, 0x14u);
                }
              }
              __p[0] = off_1EF5677B0;
              if (__p[1]) {
                atomic_fetch_add((atomic_uint *volatile)__p[1] + 32, 0xFFFFFFFF);
              }
              unsigned int v107 = (std::__shared_weak_count *)v380[0];
              if (v380[0] && !atomic_fetch_add((atomic_ullong *volatile)v380[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            else
            {
              *(unsigned char *)(v86 + 121) = 0;
            }
          }
        }
        else
        {
          if (v86)
          {
            (*(void (**)(void))(*(void *)v86 + 8))(*(void *)(v29 + 336));
            *(void *)(v29 + 336) = 0;
          }
          uint64_t v102 = *(void *)(v29 + 344);
          if (v102)
          {
            (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
            *(void *)(v29 + 344) = 0;
          }
        }
        if (*(unsigned char *)(*((void *)this + 26) + 136))
        {
          long long v108 = *(unsigned char **)(v29 + 352);
          if (!v108) {
            operator new();
          }
          if (((*(uint64_t (**)(unsigned char *))(*(void *)v108 + 56))(v108) & 1) == 0)
          {
            uint64_t v109 = *(void *)(v31 + 352);
            if (!v109) {
              operator new();
            }
            uint64_t v110 = *(void *)(v109 + 88);
            char v111 = *(std::__shared_weak_count **)(v109 + 96);
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              if (atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                if (v110) {
                  goto LABEL_178;
                }
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
                if (v110) {
LABEL_178:
                }
                  operator new();
              }
            }
            else if (v110)
            {
              goto LABEL_178;
            }
            v108[81] = 0;
            int v16 = v351;
          }
          if (v17 == v16) {
            break;
          }
        }
        else
        {
          uint64_t v112 = *(void *)(v29 + 352);
          if (v112) {
            *(unsigned char *)(v112 + 82) = 0;
          }
LABEL_181:
          if (v17 == v16) {
            break;
          }
        }
LABEL_182:
        BOOL v13 = v27++ >= 0x12B;
      }
      while (!v13);
    }
    operator delete(v16);
    uint64_t v113 = *((void *)this + 71);
    uint64_t v114 = *((void *)this + 70);
    __p[0] = 0;
    __p[1] = 0;
    v380[0] = 0;
    uint64_t v115 = v113 - v114;
    if (v115)
    {
      if ((v115 & 0x8000000000000000) == 0)
      {
        size_t v116 = 24 * (v115 >> 6);
        __p[0] = operator new(v116);
        __p[1] = __p[0];
        v380[0] = (char *)__p[0] + v116;
        goto LABEL_196;
      }
LABEL_538:
      abort();
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v380[0] = 0;
  }
LABEL_196:
  (*(void (**)(void, std::string *, void **, void))(**((void **)this + 22) + 72))(*((void *)this + 22), v355, __p, 0);
  if (*((void *)this + 71) != *((void *)this + 70))
  {
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    unint64_t v119 = 0;
    unint64_t v120 = (char *)this + 656;
    while (1)
    {
      int v121 = (*(uint64_t (**)(void))(*(void *)((char *)__p[0] + v118) + 16))();
      if (!v121)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        float v129 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          unsigned int v130 = (_DWORD *)(v355->__r_.__value_.__r.__words[0] + v117);
          int v132 = v130[1];
          int v131 = v130[2];
          LODWORD(v130) = *v130;
          *(_DWORD *)int v382 = 67109632;
          *(_DWORD *)&v382[4] = v132;
          *(_WORD *)&v382[8] = 1024;
          *(_DWORD *)&v382[10] = v131;
          *(_WORD *)&v382[14] = 1024;
          *(_DWORD *)&v382[16] = v130;
          _os_log_impl(&dword_1A1780000, v129, OS_LOG_TYPE_ERROR, "Failed to load height fallback data for tile %u %u %u", v382, 0x14u);
        }
        goto LABEL_198;
      }
      if (v121 != 4) {
        goto LABEL_198;
      }
      uint64_t v122 = *(void *)((char *)__p[0] + v118 + 8);
      unsigned int v123 = *(std::__shared_weak_count **)((char *)__p[0] + v118 + 16);
      if (v123) {
        atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v122 + 48))(buf);
      if (*(void *)buf) {
        break;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v133 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        int v134 = (_DWORD *)(v355->__r_.__value_.__r.__words[0] + v117);
        int v136 = v134[1];
        int v135 = v134[2];
        LODWORD(v134) = *v134;
        *(_DWORD *)int v382 = 67109632;
        *(_DWORD *)&v382[4] = v136;
        *(_WORD *)&v382[8] = 1024;
        *(_DWORD *)&v382[10] = v135;
        *(_WORD *)&v382[14] = 1024;
        *(_DWORD *)&v382[16] = v134;
        _os_log_impl(&dword_1A1780000, v133, OS_LOG_TYPE_ERROR, "Got no actor when loading height fallback data for tile %u %u %u", v382, 0x14u);
      }
      BOOL v137 = (std::__shared_weak_count *)v389;
      if (!v389)
      {
LABEL_233:
        if (v123) {
          goto LABEL_234;
        }
        goto LABEL_198;
      }
LABEL_232:
      if (atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_233;
      }
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
      if (v123)
      {
LABEL_234:
        if (!atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
LABEL_198:
      ++v119;
      v118 += 24;
      v117 += 64;
      if (v119 >= (uint64_t)(*((void *)this + 71) - *((void *)this + 70)) >> 6) {
        goto LABEL_238;
      }
    }
    uint64_t v124 = *(void *)(*(void *)(*((void *)this + 73) + 8 * v119) + 328);
    if (!v124) {
      operator new();
    }
    unint64_t v125 = *(void *)(v124 + 208);
    if (v125)
    {
      uint64_t v126 = (__n128 *)*((void *)this + 83);
      if ((unint64_t)v126 >= *((void *)this + 84))
      {
        char v128 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v120, *(__n128 *)(v124 + 208));
      }
      else
      {
        v126->n128_u64[0] = v125;
        unint64_t v127 = *(void *)(v124 + 216);
        v126->n128_u64[1] = v127;
        if (v127) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v127 + 8), 1uLL, memory_order_relaxed);
        }
        char v128 = v126 + 1;
      }
      *((void *)this + 83) = v128;
      unint64_t v138 = *(void *)(v124 + 120);
      if (!v138)
      {
LABEL_231:
        altitude::GlobeTileComponent::setFallbackElement(v124, (uint64_t *)buf, *(_DWORD *)(*(void *)(v355->__r_.__value_.__r.__words[0] + v117 + 40) + 392));
        BOOL v137 = (std::__shared_weak_count *)v389;
        if (!v389) {
          goto LABEL_233;
        }
        goto LABEL_232;
      }
    }
    else
    {
      unint64_t v138 = *(void *)(v124 + 120);
      if (!v138) {
        goto LABEL_231;
      }
    }
    char v139 = (__n128 *)*((void *)this + 83);
    if ((unint64_t)v139 >= *((void *)this + 84))
    {
      BOOL v141 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v120, *(__n128 *)(v124 + 120));
    }
    else
    {
      v139->n128_u64[0] = v138;
      unint64_t v140 = *(void *)(v124 + 128);
      v139->n128_u64[1] = v140;
      if (v140) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v140 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v141 = v139 + 1;
    }
    *((void *)this + 83) = v141;
    altitude::GlobeTileComponent::destroyGeometryElement((altitude::GlobeTileComponent *)v124);
    goto LABEL_231;
  }
LABEL_238:
  unsigned int v142 = (char *)__p[0];
  if (__p[0])
  {
    double v143 = __p[0];
    if (__p[1] != __p[0])
    {
      float v144 = (char *)__p[1] - 24;
      unsigned int v145 = (char *)__p[1] - 24;
      uint64_t v146 = (void (***)(char *))((char *)__p[1] - 24);
      do
      {
        float v147 = *v146;
        v146 -= 3;
        (*v147)(v145);
        v144 -= 24;
        BOOL v24 = v145 == v142;
        unsigned int v145 = (char *)v146;
      }
      while (!v24);
      double v143 = __p[0];
    }
    __p[1] = v142;
    operator delete(v143);
  }
  unint64_t v148 = *((void *)this + 50);
  if (v148)
  {
    memset(v382, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v382, v148);
    float v149 = *(char **)v382;
    float v150 = (uint64_t *)*((void *)this + 49);
    if (v150)
    {
      int v151 = 0;
      do
      {
        uint64_t v152 = v150[2];
        unint64_t v153 = &v149[16 * v151];
        *(_DWORD *)unint64_t v153 = *((_DWORD *)v150 + 6);
        *((void *)v153 + 1) = v152;
        ++v151;
        float v150 = (uint64_t *)*v150;
      }
      while (v150);
    }
    unsigned int v154 = *(char **)&v382[8];
    unint64_t v155 = 126 - 2 * __clz((uint64_t)(*(void *)&v382[8] - (void)v149) >> 4);
    if (*(char **)&v382[8] == v149) {
      uint64_t v156 = 0;
    }
    else {
      uint64_t v156 = v155;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v149, *(unint64_t *)&v382[8], v156, 1);
    if (v154 != v149)
    {
      unsigned int v157 = 0;
      BOOL v158 = v154 - 16;
      do
      {
        (*(void (**)(altitude::CompleteGlobeTileSetLoader *, void, void))(*(void *)this + 112))(this, *((void *)v158 + 1), *(unsigned int *)v158);
        if (v158 == v149) {
          break;
        }
        v158 -= 16;
        BOOL v13 = v157++ >= 0xB;
      }
      while (!v13);
    }
    if (v149) {
      operator delete(v149);
    }
  }
  unint64_t v159 = *((void *)this + 55);
  if (v159)
  {
    unsigned int v371 = 0;
    uint64_t v372 = 0;
    unsigned int v373 = 0;
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)&v371, v159);
    int v160 = v371;
    float v161 = (uint64_t *)*((void *)this + 54);
    if (v161)
    {
      unsigned int v162 = 0;
      do
      {
        float v163 = (void (*)(karo::AsyncRequestManager::RequestHandle *__hidden))v161[2];
        float v164 = &v160[2 * v162];
        *(_DWORD *)float v164 = *((_DWORD *)v161 + 6);
        v164[1] = v163;
        ++v162;
        float v161 = (uint64_t *)*v161;
      }
      while (v161);
    }
    BOOL v165 = v372;
    unint64_t v166 = 126 - 2 * __clz(((char *)v372 - (char *)v160) >> 4);
    if (v372 == v160) {
      uint64_t v167 = 0;
    }
    else {
      uint64_t v167 = v166;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v160, (unint64_t)v372, v167, 1);
    if (v165 != v160)
    {
      unsigned int v168 = 0;
      do
      {
        unsigned int v170 = *((_DWORD *)v165 - 4);
        v165 -= 2;
        uint64_t v169 = v170;
        unsigned int v171 = v165[1];
        uint64_t v172 = (altitude::GlobeTileComponent *)*((void *)v171 + 41);
        if (!v172) {
          operator new();
        }
        if (*((unsigned char *)v172 + 282))
        {
          if (v165 == v160) {
            break;
          }
          goto LABEL_328;
        }
        *((_DWORD *)v171 + 97) = *(_DWORD *)(*((void *)this + 4) + 88);
        *((unsigned char *)this + 620) = 1;
        uint64_t v173 = *((void *)this + 18);
        uint64_t v174 = *((void *)v171 + 36);
        unsigned int v175 = (_OWORD *)(v174 + 40);
        int v176 = *(_DWORD *)(v174 + 28);
        *(void *)int v382 = *(void *)(v174 + 168);
        if (*(char *)(v174 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v382[8], *(const std::string::value_type **)(v174 + 40), *(void *)(v174 + 48));
          if ((*(char *)(v174 + 159) & 0x80000000) == 0)
          {
LABEL_275:
            *(_OWORD *)&v382[32] = *(_OWORD *)(v174 + 136);
            uint64_t v383 = *(void *)(v174 + 152);
            goto LABEL_278;
          }
        }
        else
        {
          *(_OWORD *)&v382[8] = *v175;
          *(void *)&v382[24] = *(void *)(v174 + 56);
          if ((*(char *)(v174 + 159) & 0x80000000) == 0) {
            goto LABEL_275;
          }
        }
        std::string::__init_copy_ctor_external((std::string *)&v382[32], *(const std::string::value_type **)(v174 + 136), *(void *)(v174 + 144));
LABEL_278:
        BOOL v384 = v176 == 1;
        int v385 = 256;
        __int16 v386 = 1;
        char v387 = 1;
        int v177 = *(_DWORD *)(v174 + 168);
        *(_OWORD *)std::string __p = *(_OWORD *)((char *)v171 + 392);
        LODWORD(v380[0]) = v177;
        if (*(char *)(v174 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v380[1], *(const std::string::value_type **)(v174 + 40), *(void *)(v174 + 48));
        }
        else
        {
          *(_OWORD *)&v380[1] = *v175;
          v380[3] = *(void **)(v174 + 56);
        }
        LOBYTE(v381) = 1;
        (*(void (**)(uint8_t *__return_ptr, uint64_t, void **, void, uint64_t, uint64_t, void, unsigned char *))(*(void *)v173 + 80))(buf, v173, __p, 0, v169, 1, 0, v382);
        if ((SHIBYTE(v380[3]) & 0x80000000) == 0)
        {
          uint64_t v178 = (unsigned __int8 *)v389;
          unint64_t v179 = (std::__shared_weak_count *)v390;
          if (!(void)v390) {
            goto LABEL_284;
          }
LABEL_283:
          atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_284;
        }
        operator delete(v380[1]);
        uint64_t v178 = (unsigned __int8 *)v389;
        unint64_t v179 = (std::__shared_weak_count *)v390;
        if ((void)v390) {
          goto LABEL_283;
        }
LABEL_284:
        if (v178) {
          atomic_store(0, v178 + 504);
        }
        if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
          if (SHIBYTE(v383) < 0)
          {
LABEL_302:
            operator delete(*(void **)&v382[32]);
            if ((v382[31] & 0x80000000) == 0) {
              goto LABEL_290;
            }
            goto LABEL_303;
          }
        }
        else if (SHIBYTE(v383) < 0)
        {
          goto LABEL_302;
        }
        if ((v382[31] & 0x80000000) == 0) {
          goto LABEL_290;
        }
LABEL_303:
        operator delete(*(void **)&v382[8]);
LABEL_290:
        int v180 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)buf);
        if (v180)
        {
          if (v180 == 4)
          {
            char v366 = 0;
            int v367 = 0;
            __p[0] = 0;
            __p[1] = 0;
            v380[0] = 0;
            long long v376 = 0;
            uint64_t v377 = 0;
            uint64_t v375 = &v376;
            uint64_t v181 = *((void *)v171 + 36);
            int v182 = *(_DWORD *)(v181 + 168);
            *(_OWORD *)int v382 = *(_OWORD *)((char *)v171 + 392);
            *(_DWORD *)&v382[16] = v182;
            if (*(char *)(v181 + 63) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v382[24], *(const std::string::value_type **)(v181 + 40), *(void *)(v181 + 48));
            }
            else
            {
              *(_OWORD *)&v382[24] = *(_OWORD *)(v181 + 40);
              *(void *)&v382[40] = *(void *)(v181 + 56);
            }
            LOBYTE(v383) = 1;
            if (altitude::C3bRequestManager::getResult(*((void *)this + 18), (uint64_t)v382, (uint64_t)&v366, (uint64_t)__p, (uint64_t)&v375, &v363, &v360)&& __p[0] != __p[1])
            {
              altitude::GlobeTileComponent::setHiresTextures(v172, (uint64_t **)__p);
            }
            if ((v382[47] & 0x80000000) != 0) {
              operator delete(*(void **)&v382[24]);
            }
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v376);
            uint64_t v187 = (char *)__p[0];
            if (__p[0])
            {
              uint64_t v188 = (char *)__p[1];
              unint64_t v189 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  uint64_t v190 = (std::__shared_weak_count *)*((void *)v188 - 1);
                  if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                  }
                  v188 -= 16;
                }
                while (v188 != v187);
                unint64_t v189 = __p[0];
              }
              __p[1] = v187;
              operator delete(v189);
            }
            uint64_t v191 = v367;
            if (v367 && !atomic_fetch_add(&v367->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
        }
        else
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v183 = GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          {
            int v184 = *((_DWORD *)v171 + 99);
            int v185 = *((_DWORD *)v171 + 100);
            int v186 = *((_DWORD *)v171 + 98);
            *(_DWORD *)int v382 = 67109632;
            *(_DWORD *)&v382[4] = v184;
            *(_WORD *)&v382[8] = 1024;
            *(_DWORD *)&v382[10] = v185;
            *(_WORD *)&v382[14] = 1024;
            *(_DWORD *)&v382[16] = v186;
            _os_log_impl(&dword_1A1780000, v183, OS_LOG_TYPE_ERROR, "Failed to load hires texture for tile %u %u %u", v382, 0x14u);
          }
          *((unsigned char *)v172 + 200) = 1;
        }
        *(void *)long long buf = off_1EF5677B0;
        if (v389) {
          atomic_fetch_add((atomic_uint *volatile)v389 + 32, 0xFFFFFFFF);
        }
        uint64_t v192 = (std::__shared_weak_count *)v390;
        if ((void)v390 && !atomic_fetch_add((atomic_ullong *volatile)(v390 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
        int v160 = v371;
        if (v165 == v371) {
          break;
        }
LABEL_328:
        BOOL v13 = v168++ >= 0xB;
      }
      while (!v13);
    }
    if (v160)
    {
      uint64_t v372 = v160;
      operator delete(v160);
    }
  }
  unint64_t v193 = *((void *)this + 40);
  if (v193)
  {
    memset(v382, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v382, v193);
    uint64_t v194 = *(altitude::Tile ***)v382;
    unint64_t v195 = (uint64_t *)*((void *)this + 39);
    if (v195)
    {
      unsigned int v196 = 0;
      do
      {
        uint64_t v197 = v195[2];
        BOOL v198 = (char *)&v194[2 * v196];
        *(_DWORD *)BOOL v198 = *((_DWORD *)v195 + 6);
        *((void *)v198 + 1) = v197;
        ++v196;
        unint64_t v195 = (uint64_t *)*v195;
      }
      while (v195);
    }
    unint64_t v199 = *(altitude::Tile ***)&v382[8];
    unint64_t v200 = 126 - 2 * __clz((uint64_t)(*(void *)&v382[8] - (void)v194) >> 4);
    if (*(altitude::Tile ***)&v382[8] == v194) {
      uint64_t v201 = 0;
    }
    else {
      uint64_t v201 = v200;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v194, *(unint64_t *)&v382[8], v201, 1);
    if (v199 != v194)
    {
      unsigned int v202 = 0;
      uint64_t v203 = v199 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadRoads(this, v203[1]);
        if (v203 == v194) {
          break;
        }
        v203 -= 2;
        BOOL v13 = v202++ >= 0xB;
      }
      while (!v13);
    }
    if (v194) {
      operator delete(v194);
    }
  }
  unint64_t v204 = *((void *)this + 45);
  if (v204)
  {
    memset(v382, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v382, v204);
    unsigned int v205 = *(altitude::Tile ***)v382;
    unint64_t v206 = (uint64_t *)*((void *)this + 44);
    if (v206)
    {
      unsigned int v207 = 0;
      do
      {
        uint64_t v208 = v206[2];
        char v209 = (char *)&v205[2 * v207];
        *(_DWORD *)char v209 = *((_DWORD *)v206 + 6);
        *((void *)v209 + 1) = v208;
        ++v207;
        unint64_t v206 = (uint64_t *)*v206;
      }
      while (v206);
    }
    uint64_t v210 = *(altitude::Tile ***)&v382[8];
    unint64_t v211 = 126 - 2 * __clz((uint64_t)(*(void *)&v382[8] - (void)v205) >> 4);
    if (*(altitude::Tile ***)&v382[8] == v205) {
      uint64_t v212 = 0;
    }
    else {
      uint64_t v212 = v211;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v205, *(unint64_t *)&v382[8], v212, 1);
    if (v210 != v205)
    {
      unsigned int v213 = 0;
      unint64_t v214 = v210 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadTraffic(this, v214[1]);
        if (v214 == v205) {
          break;
        }
        v214 -= 2;
        BOOL v13 = v213++ >= 0xB;
      }
      while (!v13);
    }
    if (v205) {
      operator delete(v205);
    }
  }
  unint64_t v215 = *((void *)this + 35);
  if (v215)
  {
    memset(v382, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v382, v215);
    uint64_t v216 = *(altitude::Tile ***)v382;
    char v217 = (uint64_t *)*((void *)this + 34);
    if (v217)
    {
      unsigned int v218 = 0;
      do
      {
        uint64_t v219 = v217[2];
        char v220 = (char *)&v216[2 * v218];
        *(_DWORD *)char v220 = *((_DWORD *)v217 + 6);
        *((void *)v220 + 1) = v219;
        ++v218;
        char v217 = (uint64_t *)*v217;
      }
      while (v217);
    }
    char v221 = *(altitude::Tile ***)&v382[8];
    unint64_t v222 = 126 - 2 * __clz((uint64_t)(*(void *)&v382[8] - (void)v216) >> 4);
    if (*(altitude::Tile ***)&v382[8] == v216) {
      uint64_t v223 = 0;
    }
    else {
      uint64_t v223 = v222;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v216, *(unint64_t *)&v382[8], v223, 1);
    if (v221 != v216)
    {
      unsigned int v224 = 0;
      unsigned int v225 = v221 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadLabelData(this, v225[1]);
        if (v225 == v216) {
          break;
        }
        v225 -= 2;
        BOOL v13 = v224++ >= 0xB;
      }
      while (!v13);
    }
    if (v216) {
      operator delete(v216);
    }
  }
  unint64_t v226 = *((void *)this + 65);
  if (v226)
  {
    memset(v382, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v382, v226);
    float v227 = *(char **)v382;
    unsigned int v228 = (uint64_t *)*((void *)this + 64);
    if (v228)
    {
      int v229 = 0;
      do
      {
        uint64_t v230 = v228[2];
        float v231 = &v227[16 * v229];
        *(_DWORD *)float v231 = *((_DWORD *)v228 + 6);
        *((void *)v231 + 1) = v230;
        ++v229;
        unsigned int v228 = (uint64_t *)*v228;
      }
      while (v228);
    }
    uint64_t v232 = *(char **)&v382[8];
    unint64_t v233 = 126 - 2 * __clz((uint64_t)(*(void *)&v382[8] - (void)v227) >> 4);
    if (*(char **)&v382[8] == v227) {
      uint64_t v234 = 0;
    }
    else {
      uint64_t v234 = v233;
    }
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v227, *(unint64_t *)&v382[8], v234, 1);
    if (v232 != v227)
    {
      unsigned int v235 = 0;
      unsigned int v236 = v232 - 16;
      do
      {
        md::realistic::OverlayRenderLayer::stageLoadOperation(*(md::realistic::OverlayRenderLayer **)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 40) + 48), *((altitude::Tile **)v236 + 1), *(_DWORD *)v236);
        if (v236 == v227) {
          break;
        }
        v236 -= 16;
        BOOL v13 = v235++ >= 0xB;
      }
      while (!v13);
    }
    if (v227) {
      operator delete(v227);
    }
  }
  if (*(unsigned char *)(*((void *)this + 27) + 104))
  {
    uint64_t v237 = *(std::string **)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 40) + 48);
    std::string::size_type size = v237[2].__r_.__value_.__l.__size_;
    if (size)
    {
      unint64_t v239 = (std::mutex *)(size + 16);
      std::mutex::lock((std::mutex *)(size + 16));
      id v240 = *(id *)(size + 8);
      std::mutex::unlock(v239);
      uint64_t v241 = (void *)[v240 copy];
      uint64_t v242 = *(void *)(v237[2].__r_.__value_.__l.__size_ + 80);
      LODWORD(v239) = HIDWORD(v237[3].__r_.__value_.__r.__words[0]);
      unsigned int v243 = v241;
      uint64_t v375 = v243;
      long long v376 = 0;
      LODWORD(v377) = v239;
      uint64_t v378 = v242;
      objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v243, "count"));
      uint64_t v244 = (atomic_ullong *)objc_claimAutoreleasedReturnValue();
      uint64_t v245 = v376;
      long long v376 = v244;

      long long v381 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v380, 0, sizeof(v380));
      unint64_t v246 = v375;
      uint64_t v247 = [v246 countByEnumeratingWithState:__p objects:v382 count:16];
      if (v247)
      {
        uint64_t v248 = *(void *)v380[0];
        do
        {
          for (uint64_t i = 0; i != v247; ++i)
          {
            if (*(void *)v380[0] != v248) {
              objc_enumerationMutation(v246);
            }
            unsigned int v250 = v376;
            unsigned int v251 = [*((id *)__p[1] + i) delegate];
            [(atomic_ullong *)v250 addObject:v251];
          }
          uint64_t v247 = [v246 countByEnumeratingWithState:__p objects:v382 count:16];
        }
        while (v247);
      }

      unint64_t v252 = (uint64_t *)v237[5].__r_.__value_.__l.__size_;
      float v253 = (uint64_t *)v237[5].__r_.__value_.__r.__words[2];
      if (v252 == v253) {
        goto LABEL_536;
      }
      p_std::string::size_type size = (uint64_t)&v237[6].__r_.__value_.__l.__size_;
      unint64_t v356 = v237;
      uint64_t v336 = (uint64_t *)v237[5].__r_.__value_.__r.__words[2];
      while (1)
      {
        uint64_t v254 = *v252;
        if (*v252)
        {
          uint64_t v255 = *(void *)(v254 + 288);
          if (v255)
          {
            int isPoleTile = altitude::Tile::isPoleTile((char **)(v255 + 40));
            uint64_t v256 = *(void *)(v254 + 360);
            if (v256) {
              break;
            }
            goto LABEL_399;
          }
          int isPoleTile = 0;
          uint64_t v256 = *(void *)(v254 + 360);
          if (v256) {
            break;
          }
        }
LABEL_399:
        v252 += 2;
        if (v252 == v253)
        {
          unint64_t v252 = (uint64_t *)v237[5].__r_.__value_.__l.__size_;
LABEL_536:
          v237[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v252;
          uint64_t v334 = v376;
          long long v376 = 0;

          return;
        }
      }
      uint64_t v257 = 0;
      uint64_t v340 = v254;
      int v352 = *(_DWORD *)(v255 + 168);
      long long v374 = *(_OWORD *)(v254 + 392);
      uint64_t v337 = (uint64_t **)(v256 + 24);
      char v258 = 1;
      uint64_t v348 = v256;
      while (1)
      {
        char v259 = v258;
        uint64_t v260 = (unsigned char *)(v256 + v257 + 168);
        if (*v260) {
          break;
        }
LABEL_406:
        char v258 = 0;
        uint64_t v257 = 1;
        if ((v259 & 1) == 0) {
          goto LABEL_399;
        }
      }
      char v358 = v258;
      *(_DWORD *)long long buf = 0;
      *(_DWORD *)&buf[4] = v352;
      uint64_t v389 = 0;
      long long v390 = v374;
      int v391 = v257;
      (*(void (**)(void *__return_ptr))(*(void *)v237[11].__r_.__value_.__l.__size_ + 80))(&v371);
      int v261 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v371);
      if (!v261)
      {
        *uint64_t v260 = 0;
        goto LABEL_528;
      }
      if (v261 != 4)
      {
LABEL_528:
        unsigned int v371 = off_1EF5677B0;
        if (v372) {
          atomic_fetch_add((atomic_uint *volatile)v372 + 32, 0xFFFFFFFF);
        }
        uint64_t v333 = v373;
        char v259 = v358;
        if (v373)
        {
          if (!atomic_fetch_add(&v373->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
            std::__shared_weak_count::__release_weak(v333);
            char v259 = v358;
          }
        }
        goto LABEL_406;
      }
      uint64_t v369 = 0;
      unsigned int v370 = 0;
      int v367 = 0;
      uint64_t v368 = 0;
      char v366 = &v367;
      BOOL v262 = (pthread_mutex_t **)v237[11].__r_.__value_.__l.__size_;
      pthread_mutex_lock(v262[5]);
      memset(v382, 0, 20);
      *(void *)&v382[24] = 0x3FF0000000000000;
      (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, uint8_t *, unsigned char *))&(*v262)[1].__opaque[24])(&v360, v262, buf, v382);
      uint64_t v263 = v360;
      unsigned int v264 = v361;
      if (v361) {
        atomic_fetch_add_explicit(&v361->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v263 + 152));
      int v265 = *(_DWORD *)(v263 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v263 + 152));
      if ((v265 & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(void *)v263 + 40))(v263) & 1) == 0)
      {
        int v350 = 0;
        unsigned int v344 = 0;
        uint64_t v346 = 0;
        uint64_t v341 = 0;
        char v271 = 0;
        if (!v264) {
          goto LABEL_431;
        }
LABEL_430:
        if (!atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
          std::__shared_weak_count::__release_weak(v264);
          BOOL v272 = v361;
          if (!v361) {
            goto LABEL_435;
          }
          goto LABEL_432;
        }
LABEL_431:
        BOOL v272 = v361;
        if (!v361) {
          goto LABEL_435;
        }
LABEL_432:
        if (!atomic_fetch_add(&v272->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
        }
LABEL_435:
        BOOL v273 = *(void **)&v382[8];
        *(void *)&v382[8] = 0;

        uint64_t v237 = v356;
        pthread_mutex_unlock(v262[5]);
        if ((v271 & 1) == 0)
        {
          *uint64_t v260 = 0;
          goto LABEL_522;
        }
        if (v344 < HIDWORD(v356[3].__r_.__value_.__r.__words[0]))
        {
          (*(void (**)(std::string::size_type, uint8_t *))(*(void *)v356[11].__r_.__value_.__l.__size_
                                                                    + 48))(v356[11].__r_.__value_.__l.__size_, buf);
          (*(void (**)(void *__return_ptr))(*(void *)v356[11].__r_.__value_.__l.__size_ + 80))(&v363);
          long long v363 = off_1EF5677B0;
          if (v364) {
            atomic_fetch_add((atomic_uint *volatile)(v364 + 128), 0xFFFFFFFF);
          }
          uint64_t v274 = v365;
          uint64_t v256 = v348;
          if (!v365) {
            goto LABEL_522;
          }
          goto LABEL_520;
        }
        uint64_t v342 = v256 + 16 * v257;
        unint64_t v275 = *(void *)(v342 + 88);
        if (v275)
        {
          unint64_t v276 = (__n128 *)v356[6].__r_.__value_.__r.__words[2];
          if ((unint64_t)v276 >= v356[7].__r_.__value_.__r.__words[0])
          {
            uint64_t v278 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(p_size, *(__n128 *)(v342 + 88));
          }
          else
          {
            v276->n128_u64[0] = v275;
            unint64_t v277 = *(void *)(v256 + 16 * v257 + 96);
            v276->n128_u64[1] = v277;
            if (v277) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v277 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v278 = v276 + 1;
          }
          v356[6].__r_.__value_.__r.__words[2] = (std::string::size_type)v278;
        }
        uint64_t v279 = *(void *)(v342 + 120);
        unsigned int v343 = (uint64_t *)(v342 + 120);
        if (!v279)
        {
LABEL_474:
          uint64_t v296 = *(void *)(v340 + 328);
          if (!v296) {
            operator new();
          }
          uint64_t v298 = *(void *)(v296 + 120);
          unsigned int v297 = *(std::__shared_weak_count **)(v296 + 128);
          if (v297) {
            atomic_fetch_add_explicit(&v297->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v339 = v297;
          int v299 = isPoleTile;
          if (!v298) {
            int v299 = 0;
          }
          if (v299 == 1)
          {
            uint64_t v300 = (std::__shared_weak_count *)operator new(0xA8uLL);
            v300->__shared_owners_ = 0;
            v300->__shared_weak_owners_ = 0;
            v300->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AC80;
            strcpy((char *)&v300[1].__shared_owners_, "OverlayPole/Element");
            HIBYTE(v300[2].__vftable) = 19;
            v300[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5690C0;
            v300[2].__shared_owners_ = 0;
            LOBYTE(v300[2].__shared_weak_owners_) = 1;
            v300[3].std::__shared_count = 0u;
            *(_OWORD *)&v300[3].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v300[4].__shared_owners_ = 0u;
            v300[5].std::__shared_count = 0u;
            v300[5].__shared_weak_owners_ = 0;
            LOBYTE(v300[6].__vftable) = 1;
            v300[6].__shared_owners_ = 0;
            v300[6].__shared_weak_owners_ = 0;
            unsigned int v301 = *(_DWORD *)(v340 + 392);
            int v302 = *(_DWORD *)(v340 + 396);
            int v303 = *(_DWORD *)(v340 + 400);
            uint64_t v305 = *(void *)(v298 + 48);
            uint64_t v304 = *(void *)(v298 + 56);
            v362[0] = (uint64_t)&v300[1];
            v362[1] = (uint64_t)v300;
            if (v301 >= 0x1F) {
              char v306 = 31;
            }
            else {
              char v306 = v301;
            }
            LOBYTE(v360) = -1;
            BYTE1(v360) = v301;
            HIDWORD(v360) = ~(-1 << v306) - v302;
            LODWORD(v361) = v303;
            if (v305 != v304)
            {
              char v307 = BYTE1(v360);
              uint64_t v308 = **(void **)(*(void *)(*(void *)v305 + 216) + 64);
              uint64_t v310 = *(void *)(v308 + 40);
              uint64_t v309 = *(void *)(v308 + 48);
              unint64_t v311 = *(void *)(v308 + 8);
              if ((*(unsigned char *)(v308 + 16) & 2) == 0
                && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
              {
                *(void *)int v382 = v359;
                __p[0] = v382;
                std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              }
              if (v309 - v310 == (v309 - v310) % v311) {
                uint64_t v312 = 0;
              }
              else {
                uint64_t v312 = *(void *)(v308 + 72);
              }
              float v313 = 626172.136 / (double)(1 << v307);
              uint64_t v314 = **(void ***)(*(void *)(*(void *)v305 + 216) + 64);
              altitude::HeightMeshBuilder::computeBounds<ggl::CommonMesh::BufferPos4UV>((uint64_t)&v360, 32, v312, (v314[6] - v314[5]) / v314[1], (uint64_t)__p, 0.0, 0.0, v313);
              uint64_t v315 = (*(uint64_t (**)(void))(**(void **)v305 + 24))();
              long long v316 = *(_OWORD *)v315;
              *(void *)&v382[16] = *(void *)(v315 + 16);
              *(_OWORD *)int v382 = v316;
              long long v317 = *(_OWORD *)(v315 + 24);
              *(void *)&v382[40] = *(void *)(v315 + 40);
              *(_OWORD *)&v382[24] = v317;
              uint64_t v383 = *(void *)(v315 + 48);
              uint64_t v318 = *(void *)(v356[1].__r_.__value_.__r.__words[2] + 136);
              uint64_t v319 = *(void *)(*(void *)v305 + 216);
              uint64_t v320 = *(uint64_t **)(v319 + 64);
              uint64_t data = (uint64_t)v356[10].__r_.__value_.__l.__data_;
              v359[0] = v356[9].__r_.__value_.__r.__words[2];
              v359[1] = data;
              if (data) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(data + 8), 1uLL, memory_order_relaxed);
              }
              altitude::Renderable::createOverlayElement(*(void *)(*(void *)(*(void *)(v318 + 8) + 40) + 48), (uint64_t)v382, (uint64_t)__p, *v320, v320[1], (uint64_t *)(v319 + 96), v359, v356[11].__r_.__value_.__r.__words[2], v350);
            }
            altitude::OverlayTileComponent::setOverlayElement(v256, v257, v362);
            if (!atomic_fetch_add(&v300->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
            }
            float v253 = v336;
          }
          else
          {
            uint64_t v322 = *(void *)(v369 + 48);
            uint64_t v323 = *(void *)(v369 + 56);
            if (v322 != v323 && v356[12].__r_.__value_.__s.__data_[8])
            {
              uint64_t v324 = v322 + 8;
LABEL_502:
              uint64_t v325 = *(void *)(*(void *)(v324 - 8) + 192);
              uint64_t v326 = *(void *)(v325 + 64);
              *(void *)(v326 + 64) = v356[10].__r_.__value_.__l.__size_;
              *(void *)(v326 + 72) = 0;
              uint64_t v327 = *(void *)(v325 + 160);
              uint64_t v328 = *(std::__shared_weak_count **)(v327 + 72);
              *(void *)(v327 + 64) = 0;
              *(void *)(v327 + 72) = 0;
              if (v328 && !atomic_fetch_add(&v328->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                std::__shared_weak_count::__release_weak(v328);
              }
              while (v324 != v323)
              {
                v324 += 8;
                if (v356[12].__r_.__value_.__s.__data_[8]) {
                  goto LABEL_502;
                }
              }
            }
            uint64_t v256 = v348;
            altitude::OverlayTileComponent::setOverlayElement(v348, v257, &v369);
          }
          if (*v343) {
            (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v256 + 16) + 424) + 24))(*(void *)(*(void *)(v256 + 16) + 424), *(void *)(v256 + 16), v256);
          }
          if (v346) {
            atomic_fetch_add_explicit(&v346->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v329 = v341;
          uint64_t *v343 = v341;
          uint64_t v330 = v256 + 16 * v257;
          uint64_t v331 = *(std::__shared_weak_count **)(v330 + 128);
          *(void *)(v330 + 128) = v346;
          if (v331)
          {
            if (!atomic_fetch_add(&v331->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
              std::__shared_weak_count::__release_weak(v331);
            }
            uint64_t v329 = *v343;
          }
          if (v329) {
            (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v256 + 16) + 424) + 16))(*(void *)(*(void *)(v256 + 16) + 424), *(void *)(v256 + 16), v256);
          }
          *uint64_t v260 = 0;
          *(_DWORD *)(v256 + 84) = v344;
          uint64_t v274 = v339;
          if (v337 != (uint64_t **)&v366) {
            std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(v337, v366, &v367);
          }
          if (!v339)
          {
LABEL_522:
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v367);
            if (v346 && !atomic_fetch_add(&v346->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
              std::__shared_weak_count::__release_weak(v346);
              uint64_t v332 = v370;
              if (v370)
              {
LABEL_525:
                if (!atomic_fetch_add(&v332->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                  std::__shared_weak_count::__release_weak(v332);
                }
                goto LABEL_528;
              }
            }
            else
            {
              uint64_t v332 = v370;
              if (v370) {
                goto LABEL_525;
              }
            }
            goto LABEL_528;
          }
LABEL_520:
          if (!atomic_fetch_add(&v274->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
            std::__shared_weak_count::__release_weak(v274);
          }
          goto LABEL_522;
        }
        uint64_t v281 = (char *)v356[7].__r_.__value_.__r.__words[2];
        std::string::pointer v280 = v356[8].__r_.__value_.__l.__data_;
        if (v281 < v280)
        {
          *(void *)uint64_t v281 = v279;
          uint64_t v282 = *(void *)(v348 + 16 * v257 + 128);
          *((void *)v281 + 1) = v282;
          if (v282) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v282 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v283 = v281 + 16;
          uint64_t v256 = v348;
          goto LABEL_473;
        }
        uint64_t v284 = (char *)v356[7].__r_.__value_.__l.__size_;
        uint64_t v285 = (v281 - v284) >> 4;
        unint64_t v286 = v285 + 1;
        if ((unint64_t)(v285 + 1) >> 60) {
          abort();
        }
        uint64_t v287 = v280 - v284;
        if (v287 >> 3 > v286) {
          unint64_t v286 = v287 >> 3;
        }
        if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v288 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v288 = v286;
        }
        if (v288 >> 60) {
          goto LABEL_539;
        }
        unsigned int v289 = (char *)operator new(16 * v288);
        uint64_t v290 = &v289[16 * v285];
        long long v291 = *(_OWORD *)v343;
        *(_OWORD *)uint64_t v290 = *(_OWORD *)v343;
        if (*((void *)&v291 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v291 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v284 = (char *)v356[7].__r_.__value_.__l.__size_;
          uint64_t v281 = (char *)v356[7].__r_.__value_.__r.__words[2];
        }
        unsigned int v292 = &v289[16 * v288];
        uint64_t v283 = v290 + 16;
        if (v281 == v284)
        {
          v356[7].__r_.__value_.__l.__size_ = (std::string::size_type)v290;
          v356[7].__r_.__value_.__r.__words[2] = (std::string::size_type)v283;
          v356[8].__r_.__value_.__r.__words[0] = (std::string::size_type)v292;
          uint64_t v256 = v348;
          if (!v284) {
            goto LABEL_473;
          }
        }
        else
        {
          do
          {
            long long v293 = *((_OWORD *)v281 - 1);
            v281 -= 16;
            *((_OWORD *)v290 - 1) = v293;
            v290 -= 16;
            *(void *)uint64_t v281 = 0;
            *((void *)v281 + 1) = 0;
          }
          while (v281 != v284);
          uint64_t v284 = (char *)v356[7].__r_.__value_.__l.__size_;
          unsigned int v294 = (char *)v356[7].__r_.__value_.__r.__words[2];
          v356[7].__r_.__value_.__l.__size_ = (std::string::size_type)v290;
          v356[7].__r_.__value_.__r.__words[2] = (std::string::size_type)v283;
          v356[8].__r_.__value_.__r.__words[0] = (std::string::size_type)v292;
          while (v294 != v284)
          {
            uint64_t v295 = (std::__shared_weak_count *)*((void *)v294 - 1);
            if (v295 && !atomic_fetch_add(&v295->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
              std::__shared_weak_count::__release_weak(v295);
            }
            v294 -= 16;
          }
          uint64_t v256 = v348;
          if (!v284) {
            goto LABEL_473;
          }
        }
        operator delete(v284);
LABEL_473:
        v356[7].__r_.__value_.__r.__words[2] = (std::string::size_type)v283;
        goto LABEL_474;
      }
      unsigned int v344 = *(_DWORD *)(v263 + 208);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v263 + 40))(v263))
      {
        uint64_t v266 = *(void *)(v263 + 288);
        uint64_t v267 = *(std::__shared_weak_count **)(v263 + 296);
        if (v267) {
          atomic_fetch_add_explicit(&v267->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v266 = 0;
        uint64_t v267 = 0;
      }
      uint64_t v369 = v266;
      unsigned int v370 = v267;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v263 + 40))(v263))
      {
        uint64_t v268 = *(void *)(v263 + 320);
        uint64_t v341 = *(void *)(v263 + 312);
        if (v268)
        {
          uint64_t v346 = *(std::__shared_weak_count **)(v263 + 320);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v268 + 8), 1uLL, memory_order_relaxed);
          goto LABEL_424;
        }
      }
      else
      {
        uint64_t v341 = 0;
      }
      uint64_t v346 = 0;
LABEL_424:
      unint64_t v269 = *(void **)(v263 + 328);
      __p[1] = 0;
      v380[0] = 0;
      __p[0] = &__p[1];
      std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)__p, v269, (void *)(v263 + 336));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v367);
      unsigned int v270 = __p[1];
      char v366 = (std::__shared_weak_count **)__p[0];
      int v367 = (std::__shared_weak_count *)__p[1];
      uint64_t v368 = v380[0];
      if (v380[0])
      {
        *((void *)__p[1] + 2) = &v367;
        __p[0] = &__p[1];
        __p[1] = 0;
        v380[0] = 0;
        unsigned int v270 = 0;
      }
      else
      {
        char v366 = &v367;
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v270);
      int v350 = *(_DWORD *)(v263 + 304);
      char v271 = 1;
      if (!v264) {
        goto LABEL_431;
      }
      goto LABEL_430;
    }
  }
}

void sub_1A1ECBBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Unwind_Resume(a1);
}

void altitude::TileSetNode::swap(altitude::TileSetNode *this)
{
  unint64_t v2 = (char *)*((void *)this + 5);
  int v3 = (char *)*((void *)this + 6);
  if (v3 != v2)
  {
    *((void *)this + 6) = v2;
    int v3 = v2;
  }
  uint64_t v5 = *((void *)this + 8);
  uint64_t v4 = *((void *)this + 9);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(v5 + 8 * v6);
      if (!v9) {
        goto LABEL_7;
      }
      unint64_t v10 = *((void *)this + 7);
      if ((unint64_t)v3 >= v10) {
        break;
      }
      *(void *)int v3 = v9;
      int v8 = v3 + 8;
LABEL_6:
      *((void *)this + 6) = v8;
      int v3 = v8;
      uint64_t v5 = *((void *)this + 8);
      uint64_t v4 = *((void *)this + 9);
LABEL_7:
      uint64_t v6 = ++v7;
      if (v7 >= (unint64_t)((v4 - v5) >> 3))
      {
        if (v4 != v5) {
          *((void *)this + 9) = v5;
        }
        return;
      }
    }
    unsigned int v11 = (char *)*((void *)this + 5);
    uint64_t v12 = (v3 - v11) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      abort();
    }
    uint64_t v14 = v10 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v16 = operator new(8 * v15);
      uint64_t v9 = *(void *)(v5 + 8 * v6);
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    *uint64_t v17 = v9;
    int v8 = (char *)(v17 + 1);
    if (v3 == v11)
    {
      unsigned int v11 = v3;
    }
    else
    {
      unint64_t v18 = v3 - 8 - v11;
      if (v18 < 0x168)
      {
        int v19 = v3;
        goto LABEL_33;
      }
      if (&v16[v3 - v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v3 - v11 - 8])
      {
        int v19 = v3;
        goto LABEL_33;
      }
      if (&v3[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v3 - 8)
      {
        int v19 = v3;
        goto LABEL_33;
      }
      if ((unint64_t)(v11 - v16) < 0x20)
      {
        int v19 = v3;
        goto LABEL_33;
      }
      uint64_t v20 = (v18 >> 3) + 1;
      int v19 = &v3[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
      unsigned int v21 = &v16[8 * v12 - 16];
      uint64_t v22 = v3 - 16;
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_33:
          uint64_t v25 = *((void *)v19 - 1);
          v19 -= 8;
          *--uint64_t v17 = v25;
        }
        while (v19 != v11);
        unsigned int v11 = (char *)*((void *)this + 5);
      }
    }
    *((void *)this + 5) = v17;
    *((void *)this + 6) = v8;
    *((void *)this + 7) = &v16[8 * v15];
    if (v11) {
      operator delete(v11);
    }
    goto LABEL_6;
  }
}

void altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(uint64_t a1, _DWORD *a2, unint64_t *a3, uint64_t a4, void *a5, unsigned int a6, int a7)
{
  unint64_t v7 = *a3;
  if (*a3)
  {
    unsigned int v8 = a6;
    uint64_t v10 = a4;
    uint64_t v12 = a1;
    unint64_t v13 = 0;
    unint64_t v70 = (char **)(a5 + 9);
    uint64_t v57 = a5 + 3;
    unint64_t v58 = a5 + 1;
    double v55 = a5 + 7;
    unint64_t v56 = a5 + 5;
    do
    {
      char v72 = 0;
      float v71 = 1.0;
      if (v7 <= 4) {
        unint64_t v15 = (uint64_t *)&a3[v13 + 1];
      }
      else {
        unint64_t v15 = (uint64_t *)(a3[5] + 8 * v13);
      }
      uint64_t v16 = *v15;
      uint64_t v17 = *(void *)(v12 + 48);
      int v18 = *(_DWORD *)(v17 + 208);
      if (*(_DWORD *)(v16 + 1296) == 3)
      {
        if (v16) {
          BOOL v19 = v10 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          char v20 = 0;
        }
        else
        {
          float v59 = *(float *)(v17 + 200);
          double v65 = *(float *)(v16 + 1316);
          unsigned int v28 = (double *)(*(uint64_t (**)(void))(*(void *)(v16 + 40) + 24))();
          uint64_t v29 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
          unsigned int v30 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10);
          double v31 = *v30 + (v30[3] - *v30) * 0.5;
          double v32 = v30[1] + (v30[4] - v30[1]) * 0.5;
          double v33 = v30[2] + (v30[5] - v30[2]) * 0.5;
          double v35 = v29[4];
          double v34 = v29[5];
          double v64 = v29[6];
          double v36 = v29[3];
          double v62 = v33;
          double v63 = v29[2];
          double v37 = -(v34 * v32 - v33 * v35) - (v34 * v32 - v33 * v35);
          double v38 = -(v33 * v36 - v34 * v31) - (v33 * v36 - v34 * v31);
          double v39 = -(v35 * v31 - v32 * v36) - (v35 * v31 - v32 * v36);
          double v60 = *v29;
          double v61 = v29[1];
          uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10);
          float64x2_t v41 = vsubq_f64(*(float64x2_t *)(v40 + 32), *(float64x2_t *)(v40 + 8));
          float64x2_t v42 = vmulq_f64(v41, v41);
          double v43 = sqrt(v42.f64[0]+ (*(double *)(v40 + 24) - *(double *)v40) * (*(double *)(v40 + 24) - *(double *)v40)+ v42.f64[1]);
          v42.f64[0] = *v28 - (v31 + v60 + v39 * v35 + v37 * v64 - v38 * v34);
          double v44 = v28[1] - (v32 + v61 + v37 * v34 + v38 * v64 - v39 * v36);
          double v45 = v28[2] - (v62 + v63 + v39 * v64 + v38 * v36 - v37 * v35);
          if (fmax(sqrt(v42.f64[0] * v42.f64[0] + v44 * v44 + v45 * v45) - v43 * 0.5, 0.0) <= v65)
          {
            char v20 = v72;
            uint64_t v12 = a1;
            uint64_t v10 = a4;
            if (!v72) {
              altitude::Tile::computeTileResolution(a4, v16, a2, v18, &v71, v8, v59);
            }
          }
          else
          {
            char v20 = 1;
            uint64_t v12 = a1;
            uint64_t v10 = a4;
          }
        }
      }
      else
      {
        altitude::Tile::computeTileViewRelation(v16, a2, v10, v18, &v72, &v71, v8, a7, *(float *)(v17 + 200));
        char v20 = v72;
      }
      float v21 = v71;
      if (*a3 <= 4) {
        uint64_t v22 = &a3[v13 + 1];
      }
      else {
        uint64_t v22 = (unint64_t *)(a3[5] + 8 * v13);
      }
      unint64_t v23 = *v22;
      uint64_t v24 = *a5;
      if (*a5 <= 3uLL)
      {
        *a5 = v24 + 1;
        uint64_t v14 = (float *)&a5[2 * v24];
        v14[2] = v21;
        *((unsigned char *)v14 + 12) = v20;
        *((void *)v14 + 2) = v23;
      }
      else
      {
        if (v24 == 4)
        {
          v73[0] = v70;
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v73, v58);
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v73, v57);
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v73, v56);
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v73, v55);
        }
        uint64_t v26 = (char *)a5[10];
        unint64_t v25 = a5[11];
        if ((unint64_t)v26 >= v25)
        {
          float64x2_t v46 = *v70;
          uint64_t v47 = (v26 - *v70) >> 4;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 60) {
            abort();
          }
          uint64_t v49 = v25 - (void)v46;
          if (v49 >> 3 > v48) {
            unint64_t v48 = v49 >> 3;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            if (v50 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            float64x2_t v51 = (char *)operator new(16 * v50);
          }
          else
          {
            float64x2_t v51 = 0;
          }
          float64x2_t v52 = &v51[16 * v47];
          *(float *)float64x2_t v52 = v21;
          v52[4] = v20;
          *((void *)v52 + 1) = v23;
          float64x2_t v53 = v52;
          if (v26 == v46)
          {
            unsigned int v8 = a6;
            uint64_t v12 = a1;
          }
          else
          {
            uint64_t v12 = a1;
            do
            {
              *((_OWORD *)v53 - 1) = *((_OWORD *)v26 - 1);
              v53 -= 16;
              v26 -= 16;
            }
            while (v26 != v46);
            uint64_t v26 = *v70;
            unsigned int v8 = a6;
          }
          unsigned int v27 = v52 + 16;
          a5[9] = v53;
          a5[10] = v52 + 16;
          a5[11] = &v51[16 * v50];
          uint64_t v10 = a4;
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(float *)uint64_t v26 = v21;
          v26[4] = v20;
          unsigned int v27 = v26 + 16;
          *((void *)v26 + 1) = v23;
        }
        a5[10] = v27;
        ++*a5;
      }
      ++v13;
      unint64_t v7 = *a3;
    }
    while (v13 < *a3);
  }
}

uint64_t altitude::CompleteGlobeTileSetLoader::computePriority(uint64_t a1, uint64_t a2)
{
  int v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unint64_t v4 = *(void *)a1;
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v4 >= 5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = (float *)(v5 + 4);
    uint64_t v8 = 0xFFFFFFFFLL;
    unsigned int v9 = -1;
    do
    {
      if ((*(unsigned char *)v7 & 1) == 0)
      {
        float v10 = *(v7 - 1);
        if (v10 < (float)v9)
        {
          unsigned int v9 = v10;
          uint64_t v8 = v6;
        }
      }
      ++v6;
      v7 += 4;
    }
    while (v4 != v6);
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 12))
  {
    unsigned int v12 = -1;
    uint64_t v8 = 0xFFFFFFFFLL;
    if (v4 == 1) {
      goto LABEL_29;
    }
  }
  else
  {
    float v11 = *(float *)(a1 + 8);
    if (v11 >= 4295000000.0) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v8 = 0xFFFFFFFFLL;
    if (v11 < 4295000000.0) {
      uint64_t v8 = 0;
    }
    if (v4 == 1) {
      goto LABEL_29;
    }
  }
  if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    float v13 = *(float *)(a1 + 24);
    if (v13 < (float)v12)
    {
      unsigned int v12 = v13;
      uint64_t v8 = 1;
    }
  }
  if (v4 != 2)
  {
    if ((*(unsigned char *)(a1 + 44) & 1) == 0)
    {
      float v14 = *(float *)(a1 + 40);
      if (v14 < (float)v12)
      {
        unsigned int v12 = v14;
        uint64_t v8 = 2;
      }
    }
    if (v4 != 3 && (*(unsigned char *)(a1 + 60) & 1) == 0 && *(float *)(a1 + 56) < (float)v12)
    {
      uint64_t v8 = 3;
      goto LABEL_31;
    }
  }
LABEL_29:
  if (v8 == 0xFFFFFFFFLL) {
    return 0;
  }
LABEL_31:
  uint64_t v16 = 16 * v8;
  uint64_t v17 = v5 + v16;
  uint64_t v18 = a1 + v16 + 8;
  if (v4 <= 4) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v17;
  }
  uint64_t v20 = *(void *)(v19 + 8);
  unsigned int v21 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(v20, v3) * 100000.0);
  if (v21 <= 1) {
    unsigned int v21 = 1;
  }
  return v21 + *(_DWORD *)(v20 + 1300);
}

uint64_t altitude::CompleteGlobeTileSetLoader::loadTileMetaData(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2)
{
  uint64_t v349 = *MEMORY[0x1E4F143B8];
  ++*((_DWORD *)this + 157);
  *((unsigned char *)this + 620) = 1;
  long long v305 = 0u;
  long long v306 = 0u;
  long long v307 = 0u;
  long long v308 = 0u;
  int v303 = 0;
  uint64_t v304 = &unk_1EF568F68;
  uint64_t v309 = 0;
  long long v310 = 0u;
  long long v311 = 0u;
  memset(v312, 0, sizeof(v312));
  long long v313 = 0u;
  int v316 = 0;
  uint64_t v314 = 0;
  uint64_t v315 = 0xFFFFFFFFLL;
  long long v318 = 0u;
  long long v319 = 0u;
  long long v321 = 0u;
  long long v320 = 0u;
  long long v317 = &unk_1EF568F68;
  uint64_t v322 = 0;
  long long v323 = 0u;
  long long v324 = 0u;
  long long v325 = 0u;
  long long v326 = 0u;
  long long v327 = 0u;
  long long v328 = 0u;
  long long v329 = 0u;
  uint64_t v330 = 0;
  uint64_t v331 = 0xFFFFFFFFLL;
  int v332 = 0;
  uint64_t v335 = 0;
  uint64_t v333 = 0;
  uint64_t v334 = 0;
  if (*((unsigned char *)this + 80))
  {
    uint64_t v4 = (*(uint64_t (**)(altitude::Tile *))(*(void *)a2 + 48))(a2);
    double v5 = *(double *)(v4 + 16) + (*(double *)(v4 + 40) - *(double *)(v4 + 16)) * 0.5;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)__sb = vmlaq_f64(*(float64x2_t *)v4, _Q1, vsubq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)v4));
    uint64_t v10 = (*(uint64_t (**)(altitude::Tile *))(*(void *)a2 + 48))(a2);
    float64x2_t v11 = vsubq_f64(*(float64x2_t *)(v10 + 32), *(float64x2_t *)(v10 + 8));
    float64x2_t v12 = vmulq_f64(v11, v11);
    double v13 = sqrt(v12.f64[0]+ (*(double *)(v10 + 24) - *(double *)v10) * (*(double *)(v10 + 24) - *(double *)v10)+ v12.f64[1])* 0.5;
    *(_OWORD *)long long buf = *(_OWORD *)__sb;
    *(double *)&uint8_t buf[16] = v5;
    *(double *)&unsigned char buf[24] = v13;
    altitude::TriggerManager::cullTriggers(*((void *)this + 28), &v303, buf, *((_DWORD *)a2 + 98) + 1);
  }
  if (!altitude::C3mmRequestManager::loadTriggerMetaData(*((void *)this + 21), (unint64_t *)&v303, 0))goto LABEL_12; {
  uint64_t v296 = *((void *)this + 6);
  }
  if (!v296)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v17 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A1780000, v17, OS_LOG_TYPE_ERROR, "Missing node, can not load meta data!", buf, 2u);
    }

    goto LABEL_12;
  }
  unsigned int v294 = this;
  uint64_t v295 = a2;
  float v14 = v303;
  if (v303)
  {
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    do
    {
      uint64_t v20 = (char *)v333;
      uint64_t v21 = 240 * v15;
      uint64_t v22 = (char *)v333 + 240 * v15;
      unint64_t v23 = &v303 + 30 * v15;
      if ((unint64_t)v14 <= 2) {
        uint64_t v24 = (char *)(v23 + 23);
      }
      else {
        uint64_t v24 = v22 + 176;
      }
      if ((unint64_t)v14 <= 2) {
        unint64_t v25 = (char *)(v23 + 1);
      }
      else {
        unint64_t v25 = (char *)v333 + 240 * v15;
      }
      int v26 = v25[199];
      unsigned int v27 = v22 + 184;
      unsigned int v28 = v23 + 24;
      if ((unint64_t)v14 <= 2) {
        uint64_t v29 = (size_t *)v28;
      }
      else {
        uint64_t v29 = (size_t *)v27;
      }
      size_t v30 = *v29;
      if (v26 >= 0) {
        size_t v30 = v25[199];
      }
      if (v30 == 15)
      {
        if (v26 >= 0) {
          double v35 = (uint64_t *)v24;
        }
        else {
          double v35 = *(uint64_t **)v24;
        }
        uint64_t v36 = *v35;
        uint64_t v37 = *(uint64_t *)((char *)v35 + 7);
        if (v36 != 0x756F7365726F6567 || v37 != 0x6833635F65637275) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v30 != 3) {
          goto LABEL_16;
        }
        double v31 = v26 >= 0 ? v24 : *(char **)v24;
        int v32 = *(unsigned __int16 *)v31;
        int v33 = v31[2];
        _ZF = v32 == 13155 && v33 == 104;
        if (!_ZF) {
          goto LABEL_16;
        }
      }
      if ((unint64_t)v14 <= 2) {
        unint64_t v48 = (void **)&v312[v21 - 8];
      }
      else {
        unint64_t v48 = (void **)((char *)v333 + v21 + 128);
      }
      memset(buf, 0, sizeof(buf));
      uint64_t v49 = v25[151];
      __s = v48;
      unsigned int v297 = v29;
      uint64_t v298 = v25;
      if (v25[151] < 0)
      {
        unint64_t v48 = (void **)*v48;
        float64x2_t v51 = (char *)v333 + v21 + 136;
        if ((unint64_t)v14 <= 2) {
          float64x2_t v51 = &v312[v21];
        }
        uint64_t v50 = *(void *)v51;
        if (v50 < 5) {
          goto LABEL_85;
        }
      }
      else
      {
        uint64_t v50 = v25[151];
        if ((unint64_t)v50 < 5) {
          goto LABEL_85;
        }
      }
      float64x2_t v52 = (char *)v48 + v50;
      float64x2_t v53 = v48;
      do
      {
        unint64_t v54 = (char *)memchr(v53, 115, v50 - 4);
        if (!v54) {
          break;
        }
        if (*(_DWORD *)v54 == 1953853299 && v54[4] == 104)
        {
          if (v54 != v52 && v54 - (char *)v48 != -1)
          {
            *(_DWORD *)long long buf = 15;
            memset(&buf[4], 0, 28);
            goto LABEL_15;
          }
          break;
        }
        float64x2_t v53 = (void **)(v54 + 1);
        uint64_t v50 = v52 - (char *)v53;
      }
      while (v52 - (char *)v53 >= 5);
LABEL_85:
      if ((v49 & 0x80) != 0)
      {
        unint64_t v56 = (char *)*__s;
        uint64_t v57 = (uint64_t *)&v20[v21 + 136];
        if ((unint64_t)v14 <= 2) {
          uint64_t v57 = (uint64_t *)&v312[v21];
        }
        uint64_t v49 = *v57;
      }
      else
      {
        unint64_t v56 = (char *)__s;
      }
      if (v49 >= 5)
      {
        unint64_t v58 = &v56[v49];
        float v59 = v56;
        do
        {
          double v60 = (char *)memchr(v59, 110, v49 - 4);
          if (!v60) {
            break;
          }
          if (*(_DWORD *)v60 == 1953656686 && v60[4] == 104)
          {
            if (v60 != v58 && v60 - v56 != -1)
            {
              *(_DWORD *)long long buf = 15;
              *(void *)&buf[4] = 0x100000000;
              *(void *)((unint64_t)buf | 0xC) = 0;
              *(void *)(((unint64_t)buf | 0xC) + 8) = 0;
              *(_DWORD *)(((unint64_t)buf | 0xC) + 0x10) = 0;
            }
            break;
          }
          float v59 = v60 + 1;
          uint64_t v49 = v58 - (unsigned char *)v59;
        }
        while (v58 - (unsigned char *)v59 >= 5);
      }
LABEL_15:
      if ((_DWORD *)(v296 + 176) == std::__tree<altitude::TileKey>::find<altitude::TileKey>(v296 + 168, (unsigned int *)buf))
      {
        uint64_t v337 = 0;
        uint64_t v336 = 0;
        karo::util::Path::getNonDirectory((void **)&__p, __s);
        unint64_t v39 = HIBYTE(v343);
        unint64_t v40 = *((void *)&__p + 1);
        float64x2_t v41 = (long long *)__p;
        if ((v343 & 0x8000000000000000) == 0) {
          int64_t v42 = HIBYTE(v343);
        }
        else {
          int64_t v42 = *((void *)&__p + 1);
        }
        if ((v343 & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        double v44 = (char *)p_p + v42;
        if (v42 >= 1)
        {
          double v45 = p_p;
          do
          {
            float64x2_t v46 = memchr(v45, 95, v42);
            if (!v46) {
              break;
            }
            if (*v46 == 95) {
              goto LABEL_60;
            }
            double v45 = (long long *)(v46 + 1);
            int64_t v42 = v44 - (unsigned char *)v45;
          }
          while (v44 - (unsigned char *)v45 > 0);
        }
        float64x2_t v46 = v44;
LABEL_60:
        if (v46 == v44) {
          unint64_t v47 = 0;
        }
        else {
          unint64_t v47 = v46 - (unsigned char *)p_p + 1;
        }
        if ((v39 & 0x80) == 0)
        {
          if (v47 <= v39)
          {
            float64x2_t v41 = &__p;
            goto LABEL_104;
          }
          goto LABEL_547;
        }
        if (v40 < v47) {
          goto LABEL_547;
        }
        unint64_t v39 = v40;
LABEL_104:
        size_t v62 = v39 - v47;
        if (v39 - v47 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_547;
        }
        if (v62 >= 0x17)
        {
          uint64_t v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v62 | 7) != 0x17) {
            uint64_t v64 = v62 | 7;
          }
          uint64_t v65 = v64 + 1;
          p_dst = (long long *)operator new(v64 + 1);
          *(void *)&long long v341 = v65 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
          *((void *)&__dst + 1) = v62;
        }
        else
        {
          BYTE7(v341) = v39 - v47;
          p_dst = &__dst;
          if (v39 == v47)
          {
LABEL_112:
            *((unsigned char *)p_dst + v62) = 0;
            if (SHIBYTE(v343) < 0) {
              operator delete((void *)__p);
            }
            long long __p = __dst;
            unint64_t v343 = v341;
            if ((SBYTE7(v341) & 0x80u) == 0) {
              int64_t v66 = BYTE7(v341);
            }
            else {
              int64_t v66 = *((void *)&__dst + 1);
            }
            if ((SBYTE7(v341) & 0x80u) == 0) {
              long long v67 = &__p;
            }
            else {
              long long v67 = (long long *)__dst;
            }
            long long v68 = (char *)v67 + v66;
            if (v66 >= 1)
            {
              size_t v69 = v66;
              unint64_t v70 = v67;
              do
              {
                float v71 = memchr(v70, 95, v69);
                if (!v71) {
                  break;
                }
                if (*v71 == 95) {
                  goto LABEL_126;
                }
                unint64_t v70 = (long long *)(v71 + 1);
                size_t v69 = v68 - (unsigned char *)v70;
              }
              while (v68 - (unsigned char *)v70 > 0);
            }
            float v71 = (char *)v67 + v66;
LABEL_126:
            unint64_t v72 = v71 - (unsigned char *)v67;
            if (v71 == v68) {
              unint64_t v72 = -1;
            }
            if (v66 >= v72) {
              size_t v73 = v72;
            }
            else {
              size_t v73 = v66;
            }
            if (v73 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_547;
            }
            if (v73 >= 0x17)
            {
              uint64_t v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v73 | 7) != 0x17) {
                uint64_t v75 = v73 | 7;
              }
              uint64_t v76 = v75 + 1;
              unint64_t v74 = (long long *)operator new(v75 + 1);
              *(void *)&long long v341 = v76 | 0x8000000000000000;
              *(void *)&long long __dst = v74;
              *((void *)&__dst + 1) = v73;
            }
            else
            {
              BYTE7(v341) = v73;
              unint64_t v74 = &__dst;
              if (!v73)
              {
LABEL_139:
                *((unsigned char *)v74 + v73) = 0;
                if ((SBYTE7(v341) & 0x80u) == 0) {
                  uint64_t v77 = (const char *)&__dst;
                }
                else {
                  uint64_t v77 = (const char *)__dst;
                }
                LODWORD(v336) = atoi(v77);
                unint64_t v78 = HIBYTE(v343);
                unint64_t v79 = *((void *)&__p + 1);
                uint64_t v80 = (long long *)__p;
                if ((v343 & 0x8000000000000000) == 0) {
                  int64_t v81 = HIBYTE(v343);
                }
                else {
                  int64_t v81 = *((void *)&__p + 1);
                }
                if ((v343 & 0x8000000000000000) == 0) {
                  uint64_t v82 = &__p;
                }
                else {
                  uint64_t v82 = (long long *)__p;
                }
                uint64_t v83 = (char *)v82 + v81;
                if (v81 >= 1)
                {
                  long long v84 = v82;
                  do
                  {
                    uint64_t v85 = memchr(v84, 95, v81);
                    if (!v85) {
                      break;
                    }
                    if (*v85 == 95) {
                      goto LABEL_154;
                    }
                    long long v84 = (long long *)(v85 + 1);
                    int64_t v81 = v83 - (unsigned char *)v84;
                  }
                  while (v83 - (unsigned char *)v84 > 0);
                }
                uint64_t v85 = v83;
LABEL_154:
                if (v85 == v83) {
                  unint64_t v86 = 0;
                }
                else {
                  unint64_t v86 = v85 - (unsigned char *)v82 + 1;
                }
                if ((v78 & 0x80) != 0)
                {
                  if (v79 < v86) {
                    goto LABEL_547;
                  }
                  unint64_t v78 = v79;
                }
                else
                {
                  if (v86 > v78) {
                    goto LABEL_547;
                  }
                  uint64_t v80 = &__p;
                }
                size_t v87 = v78 - v86;
                if (v78 - v86 > 0x7FFFFFFFFFFFFFF7) {
                  goto LABEL_547;
                }
                if (v87 >= 0x17)
                {
                  uint64_t v89 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v87 | 7) != 0x17) {
                    uint64_t v89 = v87 | 7;
                  }
                  uint64_t v90 = v89 + 1;
                  unint64_t v88 = (long long *)operator new(v89 + 1);
                  *((void *)&v344 + 1) = v87;
                  int64_t v345 = v90 | 0x8000000000000000;
                  *(void *)&long long v344 = v88;
                }
                else
                {
                  HIBYTE(v345) = v78 - v86;
                  unint64_t v88 = &v344;
                  if (v78 == v86)
                  {
LABEL_170:
                    *((unsigned char *)v88 + v87) = 0;
                    if (SHIBYTE(v343) < 0) {
                      operator delete((void *)__p);
                    }
                    long long __p = v344;
                    unint64_t v343 = v345;
                    if (v345 >= 0) {
                      uint64_t v91 = HIBYTE(v343);
                    }
                    else {
                      uint64_t v91 = *((void *)&v344 + 1);
                    }
                    if ((v343 & 0x8000000000000000) == 0) {
                      uint64_t v92 = &__p;
                    }
                    else {
                      uint64_t v92 = (long long *)v344;
                    }
                    uint64_t v93 = (char *)v92 + v91;
                    if (v91 >= 1)
                    {
                      size_t v94 = v91;
                      BOOL v95 = v92;
                      do
                      {
                        uint64_t v96 = memchr(v95, 95, v94);
                        if (!v96) {
                          break;
                        }
                        if (*v96 == 95) {
                          goto LABEL_184;
                        }
                        BOOL v95 = (long long *)(v96 + 1);
                        size_t v94 = v93 - (unsigned char *)v95;
                      }
                      while (v93 - (unsigned char *)v95 > 0);
                    }
                    uint64_t v96 = (char *)v92 + v91;
LABEL_184:
                    unint64_t v97 = v96 - (unsigned char *)v92;
                    if (v96 == v93) {
                      unint64_t v97 = -1;
                    }
                    if (v91 >= v97) {
                      size_t v98 = v97;
                    }
                    else {
                      size_t v98 = v91;
                    }
                    if (v98 > 0x7FFFFFFFFFFFFFF7) {
                      goto LABEL_547;
                    }
                    if (v98 >= 0x17)
                    {
                      uint64_t v100 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v98 | 7) != 0x17) {
                        uint64_t v100 = v98 | 7;
                      }
                      uint64_t v101 = v100 + 1;
                      int v99 = (long long *)operator new(v100 + 1);
                      *((void *)&v344 + 1) = v98;
                      int64_t v345 = v101 | 0x8000000000000000;
                      *(void *)&long long v344 = v99;
                    }
                    else
                    {
                      HIBYTE(v345) = v98;
                      int v99 = &v344;
                      if (!v98)
                      {
LABEL_197:
                        *((unsigned char *)v99 + v98) = 0;
                        if (v345 >= 0) {
                          uint64_t v102 = (const char *)&v344;
                        }
                        else {
                          uint64_t v102 = (const char *)v344;
                        }
                        HIDWORD(v336) = atoi(v102);
                        unint64_t v103 = HIBYTE(v343);
                        unint64_t v104 = *((void *)&__p + 1);
                        int v105 = (long long *)__p;
                        if ((v343 & 0x8000000000000000) == 0) {
                          int64_t v106 = HIBYTE(v343);
                        }
                        else {
                          int64_t v106 = *((void *)&__p + 1);
                        }
                        if ((v343 & 0x8000000000000000) == 0) {
                          unsigned int v107 = &__p;
                        }
                        else {
                          unsigned int v107 = (long long *)__p;
                        }
                        long long v108 = (char *)v107 + v106;
                        if (v106 >= 1)
                        {
                          uint64_t v109 = v107;
                          do
                          {
                            uint64_t v110 = memchr(v109, 95, v106);
                            if (!v110) {
                              break;
                            }
                            if (*v110 == 95) {
                              goto LABEL_212;
                            }
                            uint64_t v109 = (long long *)(v110 + 1);
                            int64_t v106 = v108 - (unsigned char *)v109;
                          }
                          while (v108 - (unsigned char *)v109 > 0);
                        }
                        uint64_t v110 = v108;
LABEL_212:
                        if (v110 == v108) {
                          unint64_t v111 = 0;
                        }
                        else {
                          unint64_t v111 = v110 - (unsigned char *)v107 + 1;
                        }
                        if ((v103 & 0x80) != 0)
                        {
                          if (v104 < v111) {
                            goto LABEL_547;
                          }
                          unint64_t v103 = v104;
                        }
                        else
                        {
                          if (v111 > v103) {
                            goto LABEL_547;
                          }
                          int v105 = &__p;
                        }
                        size_t v112 = v103 - v111;
                        if (v103 - v111 <= 0x7FFFFFFFFFFFFFF7)
                        {
                          if (v112 >= 0x17)
                          {
                            uint64_t v114 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v112 | 7) != 0x17) {
                              uint64_t v114 = v112 | 7;
                            }
                            uint64_t v115 = v114 + 1;
                            uint64_t v113 = (long long *)operator new(v114 + 1);
                            int64_t v339 = v115 | 0x8000000000000000;
                            *(void *)&long long v338 = v113;
                            *((void *)&v338 + 1) = v112;
                          }
                          else
                          {
                            HIBYTE(v339) = v103 - v111;
                            uint64_t v113 = &v338;
                            if (v103 == v111)
                            {
LABEL_228:
                              *((unsigned char *)v113 + v112) = 0;
                              if (SHIBYTE(v343) < 0) {
                                operator delete((void *)__p);
                              }
                              long long __p = v338;
                              unint64_t v343 = v339;
                              if (v339 >= 0) {
                                uint64_t v116 = HIBYTE(v339);
                              }
                              else {
                                uint64_t v116 = *((void *)&v338 + 1);
                              }
                              if (v339 >= 0) {
                                uint64_t v117 = &__p;
                              }
                              else {
                                uint64_t v117 = (long long *)v338;
                              }
                              uint64_t v118 = (char *)v117 + v116;
                              if (v116 >= 1)
                              {
                                size_t v119 = v116;
                                unint64_t v120 = v117;
                                do
                                {
                                  int v121 = memchr(v120, 46, v119);
                                  if (!v121) {
                                    break;
                                  }
                                  if (*v121 == 46) {
                                    goto LABEL_242;
                                  }
                                  unint64_t v120 = (long long *)(v121 + 1);
                                  size_t v119 = v118 - (unsigned char *)v120;
                                }
                                while (v118 - (unsigned char *)v120 > 0);
                              }
                              int v121 = (char *)v117 + v116;
LABEL_242:
                              unint64_t v122 = v121 - (unsigned char *)v117;
                              if (v121 == v118) {
                                unint64_t v122 = -1;
                              }
                              if (v116 >= v122) {
                                size_t v123 = v122;
                              }
                              else {
                                size_t v123 = v116;
                              }
                              if (v123 > 0x7FFFFFFFFFFFFFF7) {
                                goto LABEL_547;
                              }
                              if (v123 >= 0x17)
                              {
                                uint64_t v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v123 | 7) != 0x17) {
                                  uint64_t v125 = v123 | 7;
                                }
                                uint64_t v126 = v125 + 1;
                                uint64_t v124 = (long long *)operator new(v125 + 1);
                                int64_t v339 = v126 | 0x8000000000000000;
                                *(void *)&long long v338 = v124;
                                *((void *)&v338 + 1) = v123;
                              }
                              else
                              {
                                HIBYTE(v339) = v123;
                                uint64_t v124 = &v338;
                                if (!v123)
                                {
LABEL_255:
                                  *((unsigned char *)v124 + v123) = 0;
                                  if (SHIBYTE(v339) < 0)
                                  {
                                    char v128 = (void *)v338;
                                    int v127 = atoi((const char *)v338);
                                    operator delete(v128);
                                  }
                                  else
                                  {
                                    int v127 = atoi((const char *)&v338);
                                  }
                                  LODWORD(v337) = v127;
                                  if (SHIBYTE(v345) < 0) {
                                    operator delete((void *)v344);
                                  }
                                  if (SBYTE7(v341) < 0)
                                  {
                                    operator delete((void *)__dst);
                                    if (SHIBYTE(v343) < 0) {
                                      goto LABEL_276;
                                    }
                                  }
                                  else
                                  {
                                    if ((SHIBYTE(v343) & 0x80000000) == 0) {
                                      goto LABEL_262;
                                    }
LABEL_276:
                                    operator delete((void *)__p);
                                  }
LABEL_262:
                                  karo::util::Path::getFileSuffix((uint64_t)&__dst, (uint64_t)__s);
                                  float v129 = std::string::insert((std::string *)&__dst, 0, ".", 1uLL);
                                  long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
                                  unint64_t v343 = v129->__r_.__value_.__r.__words[2];
                                  long long __p = v130;
                                  v129->__r_.__value_.__l.__size_ = 0;
                                  v129->__r_.__value_.__r.__words[2] = 0;
                                  v129->__r_.__value_.__r.__words[0] = 0;
                                  if (SBYTE7(v341) < 0) {
                                    operator delete((void *)__dst);
                                  }
                                  BYTE7(v341) = 4;
                                  strcpy((char *)&__dst, ".c3b");
                                  size_t v131 = v298[199];
                                  int v132 = (char)v131;
                                  if ((v131 & 0x80u) != 0) {
                                    size_t v131 = *v297;
                                  }
                                  if (v131 == 15)
                                  {
                                    uint64_t v133 = v132 >= 0 ? v24 : *(char **)v24;
                                    if (*(void *)v133 == 0x756F7365726F6567
                                      && *(void *)(v133 + 7) == 0x6833635F65637275)
                                    {
                                      if (&__p != (long long *)v24)
                                      {
                                        if (SHIBYTE(v343) < 0)
                                        {
                                          std::string::__assign_no_alias<false>((void **)&__p, v133, 0xFuLL);
                                        }
                                        else if (v132 < 0)
                                        {
                                          std::string::__assign_no_alias<true>(&__p, *(void **)v24, *v297);
                                        }
                                        else
                                        {
                                          long long v135 = *(_OWORD *)v24;
                                          unint64_t v343 = *((void *)v24 + 2);
                                          long long __p = v135;
                                        }
                                      }
                                      int v136 = &v20[v21 + 200];
                                      if ((unint64_t)v14 <= 2) {
                                        int v136 = (char *)&v313 + v21;
                                      }
                                      if (&__dst != (long long *)v136)
                                      {
                                        char v137 = v298[223];
                                        if (SBYTE7(v341) < 0)
                                        {
                                          char v139 = (size_t *)&v20[v21 + 208];
                                          if ((unint64_t)v14 <= 2) {
                                            char v139 = (size_t *)((char *)&v313 + v21 + 8);
                                          }
                                          size_t v140 = *v139;
                                          if (v137 >= 0) {
                                            BOOL v141 = v136;
                                          }
                                          else {
                                            BOOL v141 = *(char **)v136;
                                          }
                                          if (v137 >= 0) {
                                            size_t v142 = v298[223];
                                          }
                                          else {
                                            size_t v142 = v140;
                                          }
                                          std::string::__assign_no_alias<false>((void **)&__dst, v141, v142);
                                        }
                                        else if (v298[223] < 0)
                                        {
                                          double v143 = *(char **)v136;
                                          float v144 = (size_t *)&v20[v21 + 208];
                                          if ((unint64_t)v14 <= 2) {
                                            float v144 = (size_t *)((char *)&v313 + v21 + 8);
                                          }
                                          std::string::__assign_no_alias<true>(&__dst, v143, *v144);
                                        }
                                        else
                                        {
                                          long long v138 = *(_OWORD *)v136;
                                          *(void *)&long long v341 = *((void *)v136 + 2);
                                          long long __dst = v138;
                                        }
                                      }
                                    }
                                  }
                                  operator new();
                                }
                              }
                              memmove(v124, v117, v123);
                              goto LABEL_255;
                            }
                          }
                          memmove(v113, (char *)v105 + v111, v112);
                          goto LABEL_228;
                        }
LABEL_547:
                        abort();
                      }
                    }
                    memmove(v99, v92, v98);
                    goto LABEL_197;
                  }
                }
                memmove(v88, (char *)v80 + v86, v87);
                goto LABEL_170;
              }
            }
            memmove(v74, v67, v73);
            goto LABEL_139;
          }
        }
        memmove(p_dst, (char *)v41 + v47, v62);
        goto LABEL_112;
      }
LABEL_16:
      uint64_t v15 = ++v16;
    }
    while ((unint64_t)v14 > v16);
  }
  unsigned int v145 = v295;
  if (*((unsigned char *)v295 + 432)) {
    goto LABEL_302;
  }
  uint64_t v153 = *((void *)v295 + 36);
  unsigned int v154 = (uint64_t *)(v153 + 112);
  uint64_t v155 = *(unsigned __int8 *)(v153 + 135);
  int v156 = (char)v155;
  if ((v155 & 0x80u) != 0) {
    uint64_t v155 = *(void *)(v153 + 120);
  }
  if (v155 == 15)
  {
    if (v156 >= 0) {
      BOOL v158 = (uint64_t *)(v153 + 112);
    }
    else {
      BOOL v158 = (uint64_t *)*v154;
    }
    uint64_t v159 = *v158;
    uint64_t v160 = *(uint64_t *)((char *)v158 + 7);
    if (v159 == 0x756F7365726F6567 && v160 == 0x6833635F65637275) {
      goto LABEL_331;
    }
    goto LABEL_358;
  }
  if (v155 != 5)
  {
    if (v155 == 4)
    {
      unsigned int v157 = (_DWORD *)(v156 >= 0 ? v153 + 112 : *v154);
      if (*v157 == 1748198190)
      {
LABEL_331:
        unsigned int v145 = v295;
        altitude::Tile::updateBoundsAltitude(v295, 0.0, 0.0);
        *((unsigned char *)v295 + 432) = 1;
        goto LABEL_332;
      }
    }
    goto LABEL_358;
  }
  unsigned int v175 = (uint64_t *)*v154;
  if (v156 >= 0) {
    unsigned int v175 = (uint64_t *)(v153 + 112);
  }
  int v176 = *(_DWORD *)v175;
  int v177 = *((unsigned __int8 *)v175 + 4);
  if (v176 != 1832084270 || v177 != 109)
  {
    uint64_t v179 = v156 >= 0 ? v153 + 112 : *v154;
    int v180 = *(_DWORD *)v179;
    int v181 = *(unsigned __int8 *)(v179 + 4);
    if (v180 != 1819308129 || v181 != 101)
    {
LABEL_358:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v183 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v153 + 135) < 0) {
          unsigned int v154 = (uint64_t *)*v154;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&buf[4] = v154;
        _os_log_impl(&dword_1A1780000, v183, OS_LOG_TYPE_ERROR, "Unknown meta file extension: %s", buf, 0xCu);
      }
      goto LABEL_12;
    }
  }
  long long __dst = 0uLL;
  LODWORD(v341) = 1;
  WORD2(v341) = 0;
  unsigned int v145 = v295;
  int v184 = (unsigned int *)((char *)v295 + 392);
  if (!altitude::C3mmRequestManager::loadMetaData(*((void *)v294 + 21), (unsigned int *)v295 + 98, (uint64_t)&__dst, 0, 0))goto LABEL_12; {
  if (v341 == 1)
  }
  {
    uint64_t v198 = *((void *)v295 + 41);
    if (!v198) {
      operator new();
    }
    *(unsigned char *)(v198 + 296) = 1;
    goto LABEL_332;
  }
  if (!v341)
  {
    unsigned int v185 = *(_DWORD *)(**((void **)v294 + 4) + 816);
    uint64_t v186 = *((void *)v295 + 41);
    if (!v186) {
      operator new();
    }
    if (!*(unsigned char *)(v186 + 297)) {
      goto LABEL_466;
    }
    uint64_t v187 = *((void *)v295 + 36);
    *(_OWORD *)long long buf = *(_OWORD *)v184;
    *(void *)&uint8_t buf[16] = v187;
    *(_WORD *)&unsigned char buf[24] = 1;
    buf[26] = 0;
    *(_DWORD *)&buf[28] = 0;
    (*(void (**)(long long *__return_ptr))(**((void **)v294 + 19) + 104))(&__p);
    int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&__p);
    if (!Status)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v237 = GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_461;
      }
      LODWORD(v344) = 67109632;
      DWORD1(v344) = *(_DWORD *)&buf[4];
      WORD4(v344) = 1024;
      *(_DWORD *)((char *)&v344 + 10) = *(_DWORD *)&buf[8];
      HIWORD(v344) = 1024;
      LODWORD(v345) = *(_DWORD *)buf;
      unint64_t v238 = "Failed to load height bounds for tile %u %u %u";
      goto LABEL_460;
    }
    if (Status == 4)
    {
      LODWORD(v338) = 0;
      LODWORD(v336) = 0;
      uint64_t v189 = *((void *)v294 + 19);
      pthread_mutex_lock(*(pthread_mutex_t **)(v189 + 40));
      (*(void (**)(long long *__return_ptr, uint64_t, uint8_t *, void))(*(void *)v189 + 96))(&v344, v189, buf, 0);
      long long v190 = v344;
      if (*((void *)&v344 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v344 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if ((*(unsigned int (**)(void))(*(void *)v190 + 40))(v190))
      {
        int v191 = (*(uint64_t (**)(void, long long *, uint64_t *))(*(void *)v190 + 64))(v190, &v338, &v336);
        uint64_t v192 = *(void *)(v189 + 128);
        if (v192)
        {
          double v193 = *(double *)(v190 + 424);
          double v194 = (v193 - *(double *)(v190 + 416)) * 1000.0;
          gdc::Statistics::addSampleValue(v192, "HeightLoadJobTotalTime(Bounds) (ms)", 0x81FB80FF00000023, (v193 - *(double *)(v190 + 408)) * 1000.0);
          gdc::Statistics::addSampleValue(*(void *)(v189 + 128), "HeightLoadJobMainTime(Bounds) (ms)", 0xFA386B6B00000022, v194);
        }
      }
      else
      {
        int v191 = 0;
      }
      if (*((void *)&v190 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v190 + 1) + 16))(*((void *)&v190 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v190 + 1));
      }
      id v240 = (std::__shared_weak_count *)*((void *)&v344 + 1);
      if (*((void *)&v344 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v344 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v189 + 40));
      if (v191)
      {
        *(void *)&long long __dst = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&v336, *((float *)&__dst + 1))), COERCE_UNSIGNED_INT(fminf(*(float *)&__dst, *(float *)&v338)));
LABEL_461:
        *(void *)&long long __p = off_1EF5677B0;
        if (*((void *)&__p + 1)) {
          atomic_fetch_add((atomic_uint *volatile)(*((void *)&__p + 1) + 128), 0xFFFFFFFF);
        }
        uint64_t v241 = (std::__shared_weak_count *)v343;
        if (v343 && !atomic_fetch_add((atomic_ullong *volatile)(v343 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
LABEL_466:
        uint64_t __sa = v186;
        unsigned int v299 = v185;
        v242.i32[0] = *((void *)v295 + 51);
        v242.i32[1] = DWORD1(__dst);
        v243.i32[0] = __dst;
        v243.i32[1] = HIDWORD(*((void *)v295 + 51));
        int8x8_t v244 = vbsl_s8((int8x8_t)vcgt_f32(v243, v242), *(int8x8_t *)((char *)v295 + 408), *(int8x8_t *)&__dst);
        *((int8x8_t *)v295 + 51) = v244;
        long long v347 = 0u;
        memset(buf, 0, sizeof(buf));
        uint64_t v348 = 0x3FF0000000000000;
        altitude::Tile::computeGeocentricBoundsFromTileIndex(v184, (uint64_t)buf, (uint64_t)&__p, *(float *)v244.i32, *(float *)&v244.i32[1]);
        (*(void (**)(altitude::Tile *, uint8_t *, long long *))(*(void *)v295 + 40))(v295, buf, &__p);
        uint64_t v245 = (void *)*((void *)v295 + 38);
        if (v245 == *((void **)v295 + 39))
        {
          unsigned int v259 = WORD2(v341);
          if (*((void *)v295 + 40) - (void)v245 <= 0xFFuLL)
          {
            uint64_t v260 = (char *)operator new(0x100uLL);
            *((void *)v295 + 38) = v260;
            *((void *)v295 + 39) = v260;
            *((void *)v295 + 40) = v260 + 256;
            if (v245) {
              operator delete(v245);
            }
          }
          unsigned int v261 = 0;
          int v262 = *((_DWORD *)v295 + 98) + 1;
          while (2)
          {
            uint64_t v266 = v145;
            int v267 = (v261 >> 1) & 1 | (2 * *((_DWORD *)v145 + 99));
            int v268 = v261 & 1 | (2 * *((_DWORD *)v266 + 100));
            int v269 = (2 * *((_DWORD *)v266 + 101)) | (v261 >> 2);
            switch((v259 >> (2 * v261)) & 3)
            {
              case 1u:
                unsigned int v270 = v295;
                unint64_t v272 = *((void *)v295 + 39);
                unint64_t v271 = *((void *)v295 + 40);
                if (v272 < v271)
                {
                  *(void *)unint64_t v272 = 0;
                  *(_DWORD *)(v272 + 8) = v262;
                  *(_DWORD *)(v272 + 12) = v267;
                  *(_DWORD *)(v272 + 16) = v268;
                  *(_DWORD *)(v272 + 20) = v269;
                  uint64_t v263 = (char *)(v272 + 32);
                  *(_WORD *)(v272 + 24) = 0;
                  goto LABEL_493;
                }
                uint64_t v281 = *((void *)v295 + 38);
                uint64_t v282 = (uint64_t)(v272 - v281) >> 5;
                unint64_t v283 = v282 + 1;
                if ((unint64_t)(v282 + 1) >> 59) {
                  goto LABEL_547;
                }
                uint64_t v284 = v271 - v281;
                if (v284 >> 4 > v283) {
                  unint64_t v283 = v284 >> 4;
                }
                if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v279 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v279 = v283;
                }
                if (v279)
                {
                  if (v279 >> 59) {
                    goto LABEL_548;
                  }
                  std::string::pointer v280 = (char *)operator new(32 * v279);
                }
                else
                {
                  std::string::pointer v280 = 0;
                }
                unsigned int v289 = &v280[32 * v282];
                *(void *)unsigned int v289 = 0;
                *((_DWORD *)v289 + 2) = v262;
                *((_DWORD *)v289 + 3) = v267;
                *((_DWORD *)v289 + 4) = v268;
                *((_DWORD *)v289 + 5) = v269;
                *((_WORD *)v289 + 12) = 0;
                uint64_t v290 = v289;
                if (v272 == v281) {
                  goto LABEL_544;
                }
                int v265 = v295;
                do
                {
                  long long v292 = *(_OWORD *)(v272 - 32);
                  *(_OWORD *)(v290 - 22) = *(_OWORD *)(v272 - 22);
                  *((_OWORD *)v290 - 2) = v292;
                  v290 -= 32;
                  v272 -= 32;
                }
                while (v272 != v281);
                goto LABEL_543;
              case 2u:
                unsigned int v270 = v295;
                unint64_t v272 = *((void *)v295 + 39);
                unint64_t v273 = *((void *)v295 + 40);
                if (v272 >= v273)
                {
                  uint64_t v285 = *((void *)v295 + 38);
                  uint64_t v286 = (uint64_t)(v272 - v285) >> 5;
                  unint64_t v287 = v286 + 1;
                  if ((unint64_t)(v286 + 1) >> 59) {
                    goto LABEL_547;
                  }
                  uint64_t v288 = v273 - v285;
                  if (v288 >> 4 > v287) {
                    unint64_t v287 = v288 >> 4;
                  }
                  if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v279 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v279 = v287;
                  }
                  if (v279)
                  {
                    if (v279 >> 59) {
                      goto LABEL_548;
                    }
                    std::string::pointer v280 = (char *)operator new(32 * v279);
                  }
                  else
                  {
                    std::string::pointer v280 = 0;
                  }
                  unsigned int v289 = &v280[32 * v286];
                  *(void *)unsigned int v289 = 0;
                  *((_DWORD *)v289 + 2) = v262;
                  *((_DWORD *)v289 + 3) = v267;
                  *((_DWORD *)v289 + 4) = v268;
                  *((_DWORD *)v289 + 5) = v269;
                  *((_WORD *)v289 + 12) = 1;
                  uint64_t v290 = v289;
                  if (v272 == v285)
                  {
LABEL_544:
                    int v265 = v295;
                  }
                  else
                  {
                    int v265 = v295;
                    do
                    {
                      long long v293 = *(_OWORD *)(v272 - 32);
                      *(_OWORD *)(v290 - 22) = *(_OWORD *)(v272 - 22);
                      *((_OWORD *)v290 - 2) = v293;
                      v290 -= 32;
                      v272 -= 32;
                    }
                    while (v272 != v285);
LABEL_543:
                    unint64_t v272 = *((void *)v265 + 38);
                  }
                  uint64_t v263 = v289 + 32;
                  *((void *)v265 + 38) = v290;
                  *((void *)v265 + 39) = v289 + 32;
                  *((void *)v265 + 40) = &v280[32 * v279];
                  if (v272) {
                    operator delete((void *)v272);
                  }
                }
                else
                {
                  *(void *)unint64_t v272 = 0;
                  *(_DWORD *)(v272 + 8) = v262;
                  *(_DWORD *)(v272 + 12) = v267;
                  *(_DWORD *)(v272 + 16) = v268;
                  *(_DWORD *)(v272 + 20) = v269;
                  uint64_t v263 = (char *)(v272 + 32);
                  __int16 v264 = 1;
LABEL_492:
                  *(_WORD *)(v272 + 24) = v264;
LABEL_493:
                  int v265 = v270;
                }
                *((void *)v265 + 39) = v263;
LABEL_495:
                ++v261;
                unsigned int v145 = v295;
                if (v261 != 8) {
                  continue;
                }
                goto LABEL_467;
              case 3u:
                unsigned int v270 = v295;
                unint64_t v272 = *((void *)v295 + 39);
                unint64_t v274 = *((void *)v295 + 40);
                if (v272 < v274)
                {
                  *(void *)unint64_t v272 = 0;
                  *(_DWORD *)(v272 + 8) = v262;
                  *(_DWORD *)(v272 + 12) = v267;
                  *(_DWORD *)(v272 + 16) = v268;
                  *(_DWORD *)(v272 + 20) = v269;
                  uint64_t v263 = (char *)(v272 + 32);
                  __int16 v264 = 256;
                  goto LABEL_492;
                }
                uint64_t v275 = *((void *)v295 + 38);
                uint64_t v276 = (uint64_t)(v272 - v275) >> 5;
                unint64_t v277 = v276 + 1;
                if ((unint64_t)(v276 + 1) >> 59) {
                  goto LABEL_547;
                }
                uint64_t v278 = v274 - v275;
                if (v278 >> 4 > v277) {
                  unint64_t v277 = v278 >> 4;
                }
                if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v279 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v279 = v277;
                }
                if (v279)
                {
                  if (v279 >> 59) {
                    goto LABEL_548;
                  }
                  std::string::pointer v280 = (char *)operator new(32 * v279);
                }
                else
                {
                  std::string::pointer v280 = 0;
                }
                unsigned int v289 = &v280[32 * v276];
                *(void *)unsigned int v289 = 0;
                *((_DWORD *)v289 + 2) = v262;
                *((_DWORD *)v289 + 3) = v267;
                *((_DWORD *)v289 + 4) = v268;
                *((_DWORD *)v289 + 5) = v269;
                *((_WORD *)v289 + 12) = 256;
                uint64_t v290 = v289;
                if (v272 == v275) {
                  goto LABEL_544;
                }
                int v265 = v295;
                do
                {
                  long long v291 = *(_OWORD *)(v272 - 32);
                  *(_OWORD *)(v290 - 22) = *(_OWORD *)(v272 - 22);
                  *((_OWORD *)v290 - 2) = v291;
                  v290 -= 32;
                  v272 -= 32;
                }
                while (v272 != v275);
                goto LABEL_543;
              default:
                goto LABEL_495;
            }
          }
        }
LABEL_467:
        if (*((_DWORD *)v295 + 98) >= v299)
        {
          int v246 = *(unsigned __int8 *)(__sa + 296);
          *((unsigned char *)v145 + 432) = 1;
          if (!v246)
          {
            uint64_t v247 = *((void *)v294 + 21);
            uint64_t v250 = *(void *)(v247 + 104);
            uint64_t v248 = v247 + 104;
            uint64_t v249 = v250;
            if (v250)
            {
              int v251 = *(_DWORD *)(*((void *)v145 + 36) + 168);
              uint64_t v252 = v248;
              do
              {
                int v253 = *(_DWORD *)(v249 + 32);
                BOOL v254 = v253 < v251;
                if (v253 >= v251) {
                  uint64_t v255 = (uint64_t *)v249;
                }
                else {
                  uint64_t v255 = (uint64_t *)(v249 + 8);
                }
                if (!v254) {
                  uint64_t v252 = v249;
                }
                uint64_t v249 = *v255;
              }
              while (*v255);
              if (v252 != v248 && *(_DWORD *)(v252 + 32) <= v251)
              {
                atomic_store(*(_DWORD *)(*((void *)v294 + 21) + 156), (unsigned int *)(v252 + 60));
                uint64_t v256 = *(void *)(v252 + 40);
                uint64_t v257 = *(std::__shared_weak_count **)(v252 + 48);
                if (v257) {
                  atomic_fetch_add_explicit(&v257->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v256)
                {
                  std::mutex::lock((std::mutex *)(v256 + 208));
                  int v258 = *(_DWORD *)(v256 + 4);
                  *(_WORD *)(__sa + 302) = *(_WORD *)v256;
                  *(_WORD *)(__sa + 304) = v258;
                  *((_DWORD *)v295 + 104) = *(_DWORD *)(v256 + 8);
                  std::mutex::unlock((std::mutex *)(v256 + 208));
                }
                unsigned int v145 = v295;
                if (v257 && !atomic_fetch_add(&v257->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                  std::__shared_weak_count::__release_weak(v257);
                }
              }
            }
          }
        }
        else
        {
          *(unsigned char *)(__sa + 296) = 1;
          *((unsigned char *)v145 + 432) = 1;
        }
        goto LABEL_332;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v237 = GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_461;
      }
      LODWORD(v344) = 67109632;
      DWORD1(v344) = *(_DWORD *)&buf[4];
      WORD4(v344) = 1024;
      *(_DWORD *)((char *)&v344 + 10) = *(_DWORD *)&buf[8];
      HIWORD(v344) = 1024;
      LODWORD(v345) = *(_DWORD *)buf;
      unint64_t v238 = "Failed to get height field altitude bounds for tile %u %u %u";
LABEL_460:
      _os_log_impl(&dword_1A1780000, v237, OS_LOG_TYPE_ERROR, v238, (uint8_t *)&v344, 0x14u);
      goto LABEL_461;
    }
    *(void *)&long long __p = off_1EF5677B0;
    if (*((void *)&__p + 1)) {
      atomic_fetch_add((atomic_uint *volatile)(*((void *)&__p + 1) + 128), 0xFFFFFFFF);
    }
    unint64_t v239 = (std::__shared_weak_count *)v343;
    if (v343 && !atomic_fetch_add((atomic_ullong *volatile)(v343 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
LABEL_12:
    uint64_t v18 = 0;
    uint64_t v19 = (char *)v333;
    if (!v333) {
      goto LABEL_312;
    }
    goto LABEL_306;
  }
LABEL_332:
  uint64_t v163 = *((void *)v145 + 41);
  if (!v163) {
    operator new();
  }
  if (!*(unsigned char *)(v163 + 296)) {
    goto LABEL_431;
  }
  float v164 = (char *)v145 + 392;
  *((_DWORD *)v145 + 104) = 1140850688;
  *(void *)((char *)&__dst + 4) = 0;
  long long v341 = *(_OWORD *)((char *)v145 + 392);
  HIDWORD(__dst) = 0;
  LODWORD(__dst) = 17;
  if (!(*(unsigned int (**)(void, long long *))(**((void **)v294 + 20) + 112))(*((void *)v294 + 20), &__dst))
  {
    BOOL v167 = 0;
    float v195 = -3000.0;
    float v196 = 8000.0;
LABEL_396:
    float v203 = fminf(*((float *)v295 + 102), v195);
    *((float *)v295 + 102) = v203;
    float v204 = fmaxf(*((float *)v295 + 103), v196);
    *((float *)v295 + 103) = v204;
    long long v347 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v348 = 0x3FF0000000000000;
    altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)v164, (uint64_t)buf, (uint64_t)&__p, v203, v204);
    (*(void (**)(altitude::Tile *, uint8_t *, long long *))(*(void *)v295 + 40))(v295, buf, &__p);
    unsigned int v206 = *((_DWORD *)v295 + 98);
    if (v167)
    {
      uint64_t v207 = *((void *)v294 + 19);
      *(void *)&uint8_t buf[8] = 0;
      *(_DWORD *)long long buf = 7;
      *(_DWORD *)&buf[4] = 0;
      *(void *)&buf[20] = *(void *)(v164 + 4);
      int v208 = *((_DWORD *)v164 + 3);
      *(_DWORD *)&uint8_t buf[16] = v206;
      *(_DWORD *)&buf[28] = v208;
      unsigned int v209 = altitude::HeightRequestManager::maxHeightMeshLevelForTileKey(*(void *)(*(void *)(v207 + 144) + 32), (unsigned int *)buf);
    }
    else
    {
      unsigned int v209 = 13;
    }
    BOOL v254 = v209 > v206;
    unsigned int v145 = v295;
    if (v254)
    {
      uint64_t v210 = *((void *)v295 + 38);
      unint64_t v211 = (int32x4_t *)*((void *)v295 + 39);
      uint64_t v212 = (uint64_t)v211->i64 - v210;
      if ((unint64_t)v211 - v210 > 0x7F)
      {
        if (v212 == 128)
        {
          unsigned int v145 = v295;
        }
        else
        {
          unsigned int v145 = v295;
          *((void *)v295 + 39) = v210 + 128;
        }
      }
      else
      {
        unint64_t v213 = 4 - ((unint64_t)v212 >> 5);
        uint64_t v214 = *((void *)v295 + 40);
        if (v213 <= (v214 - (uint64_t)v211) >> 5)
        {
          uint64_t v219 = &v211[2 * v213];
          uint64_t v220 = 128 - v212;
          do
          {
            v211->i64[0] = 0;
            v211->i64[1] = 0;
            v211[1].i16[4] = 0;
            v211[1].i64[0] = 0;
            v211 += 2;
            v220 -= 32;
          }
          while (v220);
          unsigned int v145 = v295;
          *((void *)v295 + 39) = v219;
        }
        else
        {
          unint64_t v215 = (v212 >> 5) + v213;
          if (v215 >> 59) {
            goto LABEL_547;
          }
          uint64_t v216 = v214 - v210;
          if (v216 >> 4 > v215) {
            unint64_t v215 = v216 >> 4;
          }
          if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v217 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v217 = v215;
          }
          if (v217)
          {
            if (v217 >> 59) {
LABEL_548:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            unsigned int v218 = (char *)operator new(32 * v217);
          }
          else
          {
            unsigned int v218 = 0;
          }
          char v221 = (int32x4_t *)&v218[32 * (v212 >> 5)];
          i8 = v221[2 * v213].i8;
          uint64_t v223 = 128 - v212;
          unsigned int v224 = v221;
          do
          {
            v224->i64[0] = 0;
            v224->i64[1] = 0;
            v224[1].i16[4] = 0;
            v224[1].i64[0] = 0;
            v224 += 2;
            v223 -= 32;
          }
          while (v223);
          unsigned int v145 = v295;
          if (v211 != (int32x4_t *)v210)
          {
            do
            {
              int32x4_t v205 = v211[-2];
              *(int32x4_t *)((char *)v221 - 22) = *(int32x4_t *)((char *)v211 - 22);
              v221[-2] = v205;
              v221 -= 2;
              v211 -= 2;
            }
            while (v211 != (int32x4_t *)v210);
            unint64_t v211 = (int32x4_t *)*((void *)v295 + 38);
          }
          *((void *)v295 + 38) = v221;
          *((void *)v295 + 39) = i8;
          *((void *)v295 + 40) = &v218[32 * v217];
          if (v211) {
            operator delete(v211);
          }
        }
        uint64_t v210 = *((void *)v145 + 38);
      }
      int v225 = *((_DWORD *)v145 + 101);
      v205.i64[0] = *(void *)v164;
      v205.i32[2] = *((_DWORD *)v164 + 2);
      v226.i64[0] = 0x100000001;
      v226.i64[1] = 0x100000001;
      v226.i32[0] = vaddq_s32(v205, v226).u32[0];
      int32x4_t v227 = vaddq_s32(v205, v205);
      *(_DWORD *)(v210 + 16) = v227.i32[2];
      *(void *)(v210 + 8) = __PAIR64__(v227.u32[1], v226.u32[0]);
      *(_DWORD *)(v210 + 20) = v225;
      int v228 = (2 * *((_DWORD *)v145 + 99)) | 1;
      int v229 = 2 * *((_DWORD *)v145 + 100);
      int v230 = *((_DWORD *)v145 + 101);
      *(_DWORD *)(v210 + 40) = v226.i32[0];
      *(_DWORD *)(v210 + 44) = v228;
      *(_DWORD *)(v210 + 48) = v229;
      *(_DWORD *)(v210 + 52) = v230;
      int v231 = 2 * *((_DWORD *)v145 + 99);
      int v232 = (2 * *((_DWORD *)v145 + 100)) | 1;
      int v233 = *((_DWORD *)v145 + 101);
      *(_DWORD *)(v210 + 72) = v226.i32[0];
      *(_DWORD *)(v210 + 76) = v231;
      *(_DWORD *)(v210 + 80) = v232;
      *(_DWORD *)(v210 + 84) = v233;
      int v234 = *((_DWORD *)v145 + 101);
      v227.i64[0] = *(void *)&vadd_s32(*(int32x2_t *)(v164 + 4), *(int32x2_t *)(v164 + 4)) | 0x100000001;
      *(_DWORD *)(v210 + 104) = v226.i32[0];
      *(void *)(v210 + 108) = v227.i64[0];
      *(_DWORD *)(v210 + 116) = v234;
    }
    *((unsigned char *)v145 + 432) = 1;
LABEL_431:
    uint64_t v235 = *((void *)v145 + 37);
    if (v235)
    {
      uint64_t v236 = *(void *)(v235 + 328);
      if (!v236) {
        operator new();
      }
      if (*(unsigned char *)(v236 + 296)) {
        altitude::Tile::propagateChildBounds(*((void *)v145 + 37), v162, *((float *)v145 + 102), *((float *)v145 + 103));
      }
    }
    if (!*((unsigned char *)v145 + 432))
    {
      uint64_t v18 = 1;
      goto LABEL_305;
    }
LABEL_302:
    uint64_t v146 = *((void *)v145 + 41);
    if (!v146) {
      operator new();
    }
    uint64_t v18 = 1;
    *(unsigned char *)(v146 + 280) = 1;
LABEL_305:
    uint64_t v19 = (char *)v333;
    if (!v333) {
      goto LABEL_312;
    }
    goto LABEL_306;
  }
  (*(void (**)(uint8_t *__return_ptr))(**((void **)v294 + 20) + 104))(buf);
  uint64_t v166 = *(void *)buf;
  BOOL v167 = *(void *)buf != 0;
  if (*(void *)buf)
  {
    unsigned int v168 = *((_DWORD *)v295 + 98);
    if (v168 >= 0x1F) {
      char v169 = 31;
    }
    else {
      char v169 = *((_DWORD *)v295 + 98);
    }
    int v170 = ~(-1 << v169) - *((_DWORD *)v295 + 99);
    unsigned int v171 = *((_DWORD *)v295 + 100);
    LOBYTE(__p) = -1;
    BYTE1(__p) = v168;
    *(void *)((char *)&__p + 4) = __PAIR64__(v171, v170);
    uint64_t v172 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    v165.n128_f64[0] = (double)(1 << v168);
    double v173 = 626172.136 / v165.n128_f64[0];
    LODWORD(v344) = 2139095039;
    LODWORD(v338) = -8388609;
    int v174 = *(_DWORD *)(v166 + 132);
    if (v174 == 16)
    {
      v165.n128_f32[0] = karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(v166, (uint64_t)&__p, (float *)&v344, (float *)&v338, v165.n128_f32[0]);
    }
    else if (v174 == 8)
    {
      v165.n128_f32[0] = karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>(v166, (uint64_t)&__p, (float *)&v344, (float *)&v338, v165.n128_f32[0]);
    }
    float v199 = v173;
    float v196 = *(float *)&v338;
    float v200 = *(float *)&v344;
    if (v172 && !atomic_fetch_add(&v172->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v172->__on_zero_shared)(v172, v165);
      std::__shared_weak_count::__release_weak(v172);
    }
    float v195 = v200 - v199;
    BOOL v197 = 1;
  }
  else
  {
    BOOL v197 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&buf[16]) == 0;
    float v195 = -3000.0;
    float v196 = 8000.0;
  }
  *(void *)&uint8_t buf[16] = off_1EF5677B0;
  if (*(void *)&buf[24]) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&buf[24] + 128), 0xFFFFFFFF);
  }
  uint64_t v201 = (std::__shared_weak_count *)v347;
  if ((void)v347 && !atomic_fetch_add((atomic_ullong *volatile)(v347 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
    std::__shared_weak_count::__release_weak(v201);
  }
  unsigned int v202 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
    std::__shared_weak_count::__release_weak(v202);
  }
  if (v197) {
    goto LABEL_396;
  }
  uint64_t v18 = 0;
  uint64_t v19 = (char *)v333;
  if (!v333) {
    goto LABEL_312;
  }
LABEL_306:
  float v147 = v19;
  if (v334 != v19)
  {
    unint64_t v148 = v334 - 240;
    float v149 = v334 - 240;
    float v150 = v334 - 240;
    do
    {
      int v151 = *(void (***)(char *))v150;
      v150 -= 240;
      (*v151)(v149);
      v148 -= 240;
      _ZF = v149 == v19;
      float v149 = v150;
    }
    while (!_ZF);
    float v147 = v333;
  }
  uint64_t v334 = v19;
  operator delete(v147);
LABEL_312:
  altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)&v317);
  altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)&v304);
  return v18;
}

void sub_1A1ECEEA4(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    float64x2_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      float64x2_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            float64x2_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          float64x2_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  float64x2_t v12 = operator new(0x20uLL);
  *float64x2_t v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        int64_t v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = operator new(8 * prime);
    uint64_t v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    unint64_t v25 = (uint64_t *)(a1 + 4);
    uint64_t v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          *uint64_t v24 = *i;
          uint64_t v31 = 8 * v30;
          void *i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          uint64_t v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    double v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *uint64_t v24 = *v35;
        uint64_t v36 = 8 * v37;
        *double v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        double v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      uint64_t v24 = v35;
      double v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  double v38 = *(void **)a1;
  unint64_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    *float64x2_t v12 = *v39;
LABEL_80:
    void *v39 = v12;
    goto LABEL_81;
  }
  *float64x2_t v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    unint64_t v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

void *altitude::CompleteGlobeTileSetLoader::queueLoadMesh(void *this, altitude::Tile *a2, unsigned int a3)
{
  unint64_t v8 = a2;
  uint64_t v5 = *((void *)a2 + 41);
  if (!v5) {
    operator new();
  }
  if (!*(unsigned char *)(v5 + 282))
  {
    unint64_t v6 = (float *)(this + 47);
    this = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(this + 47, (unint64_t)a2);
    if (this)
    {
      unsigned int v7 = *((_DWORD *)this + 6);
      if (v7 <= a3) {
        unsigned int v7 = a3;
      }
      *((_DWORD *)this + 6) = v7;
    }
    else
    {
      this = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v6, (unint64_t)a2, &v8);
      *((_DWORD *)this + 6) = a3;
    }
  }
  return this;
}

void karo::SizedArray<altitude::View *,4>::push_back(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 > 3)
  {
    if (v4 == 4)
    {
      uint64_t v23 = a1 + 5;
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[1]);
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[2]);
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[3]);
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[4]);
    }
    unsigned int v7 = (char *)a1[6];
    unint64_t v6 = a1[7];
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v9 = (char *)a1[5];
      uint64_t v10 = (v7 - v9) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v14 = operator new(8 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      float v15 = &v14[8 * v10];
      void *v15 = *a2;
      unint64_t v8 = v15 + 1;
      if (v7 == v9)
      {
        unint64_t v9 = v7;
      }
      else
      {
        unint64_t v16 = v7 - v9 - 8;
        if (v16 < 0x58) {
          goto LABEL_34;
        }
        if ((unint64_t)(v9 - v14) < 0x20) {
          goto LABEL_34;
        }
        uint64_t v17 = (v16 >> 3) + 1;
        unint64_t v18 = &v14[8 * v10 - 16];
        unint64_t v19 = v7 - 16;
        uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *(_OWORD *)v19;
          *(v18 - 1) = *((_OWORD *)v19 - 1);
          *unint64_t v18 = v21;
          v18 -= 2;
          v19 -= 32;
          v20 -= 4;
        }
        while (v20);
        v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        v7 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            uint64_t v22 = *((void *)v7 - 1);
            v7 -= 8;
            *--float v15 = v22;
          }
          while (v7 != v9);
          unint64_t v9 = (char *)a1[5];
        }
      }
      a1[5] = (uint64_t)v15;
      a1[6] = (uint64_t)v8;
      a1[7] = (uint64_t)&v14[8 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)unsigned int v7 = *a2;
      unint64_t v8 = v7 + 8;
    }
    a1[6] = (uint64_t)v8;
    ++*a1;
  }
  else
  {
    uint64_t v5 = *a2;
    *a1 = v4 + 1;
    a1[v4 + 1] = v5;
  }
}

uint64_t altitude::CompleteGlobeTileSetLoader::computePriorityFromPosition(unint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  long long v14 = *(_OWORD *)v3;
  uint64_t v15 = *(void *)(v3 + 16);
  unint64_t v4 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unsigned int v7 = 0;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    unint64_t v9 = (uint64_t *)(a1[5] + v5 * 8);
    ++v5;
    if (v4 <= 4) {
      uint64_t v10 = (uint64_t *)&a1[v5];
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v10, (double *)&v14) * 100000.0);
    if (v11 <= 1) {
      unsigned int v11 = 1;
    }
    if (v11 > v7)
    {
      uint64_t v8 = v6;
      unsigned int v7 = v11;
    }
    ++v6;
    unint64_t v4 = *a1;
  }
  while (v6 < *a1);
  if (v8 == 0xFFFFFFFFLL) {
    return 0;
  }
  if (v4 <= 4) {
    uint64_t v13 = (uint64_t)&a1[v8 + 1];
  }
  else {
    uint64_t v13 = a1[5] + 8 * v8;
  }
  return *(_DWORD *)(*(void *)v13 + 1300) + v7;
}

void *altitude::CompleteGlobeTileSetLoader::queueLoadHiresTexture(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, unsigned int a3)
{
  uint64_t v8 = a2;
  uint64_t v5 = (float *)((char *)this + 416);
  __n128 result = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 52, (unint64_t)a2);
  if (result)
  {
    unsigned int v7 = *((_DWORD *)result + 6);
    if (v7 <= a3) {
      unsigned int v7 = a3;
    }
    *((_DWORD *)result + 6) = v7;
  }
  else
  {
    __n128 result = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v5, (unint64_t)a2, &v8);
    *((_DWORD *)result + 6) = a3;
  }
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::expandSubTree(altitude::CompleteGlobeTileSetLoader *a1, uint64_t a2, uint64_t a3, unint64_t *a4, _DWORD *a5, unsigned int a6, unsigned int a7)
{
  unsigned int v8 = a6;
  uint64_t v13 = a1;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 432)) {
    goto LABEL_2;
  }
  if (*((_DWORD *)a1 + 157) > 0x1F3u) {
    return 0;
  }
  uint64_t v20 = *(void *)(a2 + 296);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  *(_OWORD *)long long buf = *(_OWORD *)v21;
  *(void *)&long long v80 = *(void *)(v21 + 16);
  unint64_t v22 = *a4;
  if (*a4)
  {
    uint64_t v77 = v13;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    unsigned int v25 = 0;
    do
    {
      size_t v26 = (uint64_t *)(a4[5] + v23 * 8);
      ++v23;
      if (v22 <= 4) {
        size_t v27 = (uint64_t *)&a4[v23];
      }
      else {
        size_t v27 = v26;
      }
      unsigned int v28 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v27, (double *)buf) * 100000.0);
      if (v28 <= 1) {
        unsigned int v28 = 1;
      }
      if (v28 > v25) {
        unsigned int v25 = v28;
      }
      ++v24;
      unint64_t v22 = *a4;
    }
    while (v24 < *a4);
    uint64_t v13 = v77;
  }
  int TileMetaData = altitude::CompleteGlobeTileSetLoader::loadTileMetaData(v13, (altitude::Tile *)a2);
  if (v20)
  {
    if (*(void *)(v20 + 304) == *(void *)(v20 + 312)) {
      char v62 = 0;
    }
    else {
      char v62 = TileMetaData;
    }
    if (v62) {
      goto LABEL_101;
    }
    return 0;
  }
  if (!TileMetaData) {
    return 0;
  }
LABEL_101:
  unsigned int v8 = a6;
  if (!*(unsigned char *)(a2 + 432))
  {
    uint64_t v63 = *(void *)(a2 + 328);
    if (!v63) {
      operator new();
    }
    if (*(unsigned char *)(v63 + 296)) {
      goto LABEL_71;
    }
  }
LABEL_2:
  *(void *)long long buf = 0;
  long long __p = 0;
  size_t v87 = 0;
  uint64_t v88 = 0;
  altitude::CompleteGlobeTileSetLoader::computeTileViewRelation((uint64_t)v13, a5, a4, a2, buf, v8, 0);
  *(_DWORD *)uint64_t v89 = 0;
  if (!*(void *)buf) {
    goto LABEL_69;
  }
  if (*(void *)buf < 5uLL)
  {
    char v14 = *(_DWORD *)(v80 + 1296) != 0 && buf[12] == 0;
    float v15 = *(float *)&buf[8];
    if (!v14) {
      float v15 = 0.0;
    }
    if (*(void *)buf != 1)
    {
      float v29 = *((float *)&v80 + 2);
      float v30 = fminf(*((float *)&v80 + 2), v15);
      if (*(_DWORD *)(v80 + 1296) != 0 && buf[12] == 0) {
        float v29 = v30;
      }
      if (*(_DWORD *)(v81 + 1296) != 0 && BYTE12(v80) == 0) {
        float v15 = v29;
      }
      v14 |= *(_DWORD *)(v81 + 1296) != 0 && BYTE12(v80) == 0;
      if (*(void *)buf != 2)
      {
        float v31 = *((float *)&v81 + 2);
        float v32 = fminf(*((float *)&v81 + 2), v15);
        if (v14) {
          float v31 = v32;
        }
        if (*(_DWORD *)(v82 + 1296) != 0 && BYTE12(v81) == 0) {
          float v15 = v31;
        }
        v14 |= *(_DWORD *)(v82 + 1296) != 0 && BYTE12(v81) == 0;
        if (*(void *)buf != 3 && *(_DWORD *)(v85 + 1296) && !v84)
        {
          float v15 = fminf(v83, v15);
          if ((v14 & 1) == 0) {
            float v15 = v83;
          }
          char v14 = 1;
        }
      }
    }
  }
  else
  {
    char v14 = 0;
    float v15 = 0.0;
    unsigned int v16 = 1;
    uint64_t v17 = (uint8_t *)__p;
    do
    {
      if (*(_DWORD *)(*((void *)v17 + 1) + 1296) && !v17[4])
      {
        unint64_t v19 = v17;
        if (v14)
        {
          if (*(float *)v17 >= v15) {
            unint64_t v19 = v89;
          }
          else {
            unint64_t v19 = v17;
          }
        }
        float v15 = *(float *)v19;
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v19;
        char v14 = 1;
      }
      v17 += 16;
    }
    while (*(void *)buf > (unint64_t)v16++);
  }
  if ((v14 & 1) == 0) {
    float v15 = 1.0;
  }
  if (*(void *)(a2 + 304) == *(void *)(a2 + 312) || v15 >= 1.0) {
    goto LABEL_69;
  }
  if (*(void *)buf < 5uLL)
  {
    if (*(_DWORD *)(v80 + 1296) && !buf[12]
      || *(void *)buf != 1
      && (*(_DWORD *)(v81 + 1296) && !BYTE12(v80)
       || *(void *)buf != 2
       && (*(_DWORD *)(v82 + 1296) && !BYTE12(v81) || *(void *)buf != 3 && *(_DWORD *)(v85 + 1296) && !v84)))
    {
      double v35 = __p;
      unsigned int v37 = *(_DWORD *)(a2 + 392);
      if (!__p) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
LABEL_69:
    if (__p)
    {
      size_t v87 = __p;
      operator delete(__p);
    }
    goto LABEL_71;
  }
  unint64_t v33 = 0;
  unsigned int v34 = 1;
  double v35 = __p;
  while (1)
  {
    uint64_t v36 = (char *)__p + 16 * v33;
    if (*(_DWORD *)(*((void *)v36 + 1) + 1296))
    {
      if (!v36[4]) {
        break;
      }
    }
    unint64_t v33 = v34++;
    if (*(void *)buf <= v33) {
      goto LABEL_69;
    }
  }
  unsigned int v37 = *(_DWORD *)(a2 + 392);
LABEL_58:
  size_t v87 = v35;
  operator delete(v35);
LABEL_59:
  if (v37 < a7)
  {
    uint64_t v38 = *(void *)(a2 + 304);
    if (*(void *)(a2 + 312) != v38)
    {
      unint64_t v78 = v13;
      uint64_t v39 = 0;
      unsigned int v40 = 0;
      LODWORD(v41) = 1;
      while (1)
      {
        uint64_t v65 = *(void *)(v38 + 32 * v39);
        if (!v65) {
          break;
        }
        *(void *)(v65 + 376) = v8;
        uint64_t v41 = v41 & altitude::CompleteGlobeTileSetLoader::expandSubTree(v78);
        uint64_t v38 = *(void *)(a2 + 304);
        uint64_t v39 = ++v40;
        if (v40 >= (unint64_t)((*(void *)(a2 + 312) - v38) >> 5)) {
          return v41;
        }
      }
      if (*(unsigned char *)(*(void *)(a2 + 288) + 164))
      {
        int64_t v66 = *(uint64_t **)(*((void *)v78 + 6) + 56);
        long long v67 = 0uLL;
        if (v66)
        {
          long long v68 = (_DWORD *)(v38 + 32 * v39);
          unsigned int v70 = v68[2];
          unsigned int v69 = v68[3];
          unsigned int v72 = v68[4];
          unsigned int v71 = v68[5];
          do
          {
            unsigned int v73 = *((_DWORD *)v66 + 8);
            if (v73 >= v70)
            {
              if (v73 > v70) {
                goto LABEL_115;
              }
              unsigned int v74 = *((_DWORD *)v66 + 9);
              if (v74 >= v69)
              {
                if (v74 > v69) {
                  goto LABEL_115;
                }
                unsigned int v75 = *((_DWORD *)v66 + 10);
                if (v75 >= v72)
                {
                  if (v75 <= v72 && *((_DWORD *)v66 + 11) < v71) {
                    ++v66;
                  }
                  goto LABEL_115;
                }
              }
            }
            ++v66;
LABEL_115:
            int64_t v66 = (uint64_t *)*v66;
          }
          while (v66);
        }
      }
      else
      {
        long long v67 = 0uLL;
      }
      long long v80 = v67;
      long long v81 = v67;
      *(_OWORD *)long long buf = v67;
      uint64_t v82 = 0x3FF0000000000000;
      altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)(v38 + 32 * v39 + 8), (uint64_t)buf, (uint64_t)v89, 0.0, 10000.0);
      operator new();
    }
    return 1;
  }
LABEL_71:
  double v43 = *(uint64_t **)(a3 + 8);
  unint64_t v42 = *(void *)(a3 + 16);
  if ((unint64_t)v43 >= v42)
  {
    double v45 = *(uint64_t **)a3;
    uint64_t v46 = (uint64_t)v43 - *(void *)a3;
    uint64_t v47 = v46 >> 3;
    unint64_t v48 = (v46 >> 3) + 1;
    if (v48 >> 61) {
      abort();
    }
    uint64_t v49 = v42 - (void)v45;
    if (v49 >> 2 > v48) {
      unint64_t v48 = v49 >> 2;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      if (v50 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      float64x2_t v51 = operator new(8 * v50);
    }
    else
    {
      float64x2_t v51 = 0;
    }
    float64x2_t v52 = (uint64_t *)&v51[8 * v47];
    float64x2_t v53 = &v51[8 * v50];
    *float64x2_t v52 = a2;
    double v44 = v52 + 1;
    if (v43 == v45)
    {
      double v45 = v43;
    }
    else
    {
      unint64_t v54 = (char *)v43 - (char *)v45 - 8;
      if (v54 < 0x58) {
        goto LABEL_135;
      }
      if ((unint64_t)((char *)v43 - v51 - v46) < 0x20) {
        goto LABEL_135;
      }
      uint64_t v55 = (v54 >> 3) + 1;
      unint64_t v56 = &v51[8 * v47 - 16];
      uint64_t v57 = v43 - 2;
      uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v59 = *(_OWORD *)v57;
        *(v56 - 1) = *((_OWORD *)v57 - 1);
        *unint64_t v56 = v59;
        v56 -= 2;
        v57 -= 4;
        v58 -= 4;
      }
      while (v58);
      v52 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
      v43 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_135:
        do
        {
          uint64_t v60 = *--v43;
          *--float64x2_t v52 = v60;
        }
        while (v43 != v45);
        double v45 = *(uint64_t **)a3;
      }
    }
    *(void *)a3 = v52;
    *(void *)(a3 + 8) = v44;
    *(void *)(a3 + 16) = v53;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *double v43 = a2;
    double v44 = v43 + 1;
  }
  *(void *)(a3 + 8) = v44;
  return 1;
}

uint64_t *std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = *(void **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  unsigned int v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = *(unsigned char **)v4;
    uint64_t v10 = (uint64_t)v6 - *(void *)v4;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      abort();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      float v15 = operator new(8 * v14);
    }
    else
    {
      float v15 = 0;
    }
    unsigned int v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *unsigned int v16 = a2;
    unsigned int v8 = v16 + 1;
    if (v6 == (void *)v9)
    {
      unint64_t v9 = v6;
    }
    else
    {
      unint64_t v18 = (char *)v6 - v9 - 8;
      if (v18 < 0x58) {
        goto LABEL_29;
      }
      if ((unint64_t)((char *)v6 - v15 - v10) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      unsigned int v7 = &v6[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v20 = &v15[8 * v11 - 16];
      uint64_t v21 = (long long *)(v6 - 2);
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          uint64_t v24 = *--v7;
          *--unsigned int v16 = v24;
        }
        while (v7 != (void *)v9);
        unint64_t v9 = *(unsigned char **)v4;
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *unint64_t v6 = a2;
    unsigned int v8 = v6 + 1;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

char ***std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](char ***a1, _OWORD *a2)
{
  int v4 = *a1;
  unint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = (char *)operator new(16 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[16 * v9];
    *(_OWORD *)unint64_t v14 = *a2;
    unsigned int v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      unint64_t v6 = *v4;
    }
    uint64_t *v4 = v14;
    v4[1] = v7;
    unsigned char v4[2] = &v13[16 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v6 = *a2;
    unsigned int v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

void std::vector<std::pair<unsigned int,altitude::Tile *>>::__append(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  int v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    unint64_t v12 = &v5[16 * a2];
    if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v13 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unint64_t v14 = v5 + 16;
      uint64_t v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v14 - 4) = 0;
        *(_DWORD *)unint64_t v14 = 0;
        *((void *)v14 - 1) = 0;
        *((void *)v14 + 1) = 0;
        v14 += 32;
        v15 -= 2;
      }
      while (v15);
      if (v13 == (v13 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_17;
      }
      v5 += 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)unint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      v5 += 16;
    }
    while (v5 != v12);
LABEL_17:
    a1[1] = v12;
    return;
  }
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = (v5 - (unsigned char *)*a1) >> 4;
  unint64_t v8 = v7 + a2;
  if ((v7 + a2) >> 60) {
    abort();
  }
  uint64_t v9 = v4 - v6;
  if (v9 >> 3 > v8) {
    unint64_t v8 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v11 = (char *)operator new(16 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unsigned int v16 = &v11[16 * v7];
  uint64_t v17 = &v16[16 * a2];
  unint64_t v18 = v16;
  uint64_t v19 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v19)
  {
    uint64_t v20 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v21 = v16 + 16;
    uint64_t v22 = v20;
    do
    {
      *((_DWORD *)v21 - 4) = 0;
      *(_DWORD *)uint64_t v21 = 0;
      *((void *)v21 - 1) = 0;
      *((void *)v21 + 1) = 0;
      v21 += 32;
      v22 -= 2;
    }
    while (v22);
    if (v19 + 1 == v20) {
      goto LABEL_25;
    }
    unint64_t v18 = &v16[16 * v20];
  }
  do
  {
    *(_DWORD *)unint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    v18 += 16;
  }
  while (v18 != v17);
LABEL_25:
  long long v23 = &v11[16 * v10];
  if (v5 == v6)
  {
    uint64_t v24 = &v11[16 * v7];
  }
  else
  {
    do
    {
      uint64_t v24 = v16 - 16;
      *((_OWORD *)v16 - 1) = *((_OWORD *)v5 - 1);
      v5 -= 16;
      v16 -= 16;
    }
    while (v5 != v6);
  }
  unsigned int v25 = *a1;
  *a1 = v24;
  a1[1] = v17;
  a1[2] = v23;
  if (v25)
  {
    operator delete(v25);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = (unsigned int *)(a2 - 16);
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = a2 - v11;
          uint64_t v13 = (uint64_t)(a2 - v11) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unsigned int v113 = *(_DWORD *)v11;
                if (*v10 >= *(_DWORD *)v11) {
                  return result;
                }
                *(_DWORD *)unint64_t v11 = *v10;
                *(_DWORD *)(a2 - 16) = v113;
                goto LABEL_101;
              case 3:
                unsigned int v114 = *(_DWORD *)(v11 + 16);
                unsigned int v115 = *(_DWORD *)v11;
                unsigned int v116 = *v10;
                if (v114 >= *(_DWORD *)v11)
                {
                  if (v116 < v114)
                  {
                    *(_DWORD *)(v11 + 16) = v116;
                    *(_DWORD *)(a2 - 16) = v114;
                    uint64_t v151 = *(void *)(v11 + 24);
                    *(void *)(v11 + 24) = *(void *)(a2 - 8);
                    *(void *)(a2 - 8) = v151;
                    unsigned int v152 = *(_DWORD *)(v11 + 16);
                    unsigned int v153 = *(_DWORD *)v11;
                    if (v152 < *(_DWORD *)v11)
                    {
                      *(_DWORD *)unint64_t v11 = v152;
                      *(_DWORD *)(v11 + 16) = v153;
                      uint64_t v127 = *(void *)(v11 + 8);
                      uint64_t v123 = *(void *)(v11 + 24);
LABEL_154:
                      *(void *)(v11 + 8) = v123;
                      *(void *)(v11 + 24) = v127;
                    }
                  }
                }
                else if (v116 >= v114)
                {
                  *(_DWORD *)unint64_t v11 = v114;
                  *(_DWORD *)(v11 + 16) = v115;
                  uint64_t v177 = *(void *)(v11 + 8);
                  *(void *)(v11 + 8) = *(void *)(v11 + 24);
                  *(void *)(v11 + 24) = v177;
                  if (*v10 < v115)
                  {
                    *(_DWORD *)(v11 + 16) = *v10;
                    *(_DWORD *)(a2 - 16) = v115;
                    *(void *)(v11 + 24) = *(void *)(a2 - 8);
                    *(void *)(a2 - 8) = v177;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v11 = v116;
                  *(_DWORD *)(a2 - 16) = v115;
LABEL_101:
                  uint64_t v117 = *(void *)(v11 + 8);
                  *(void *)(v11 + 8) = *(void *)(a2 - 8);
                  *(void *)(a2 - 8) = v117;
                }
                break;
              case 4:
                return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)v11, (unsigned int *)(v11 + 16), (unsigned int *)(v11 + 32), (unsigned int *)(a2 - 16));
              case 5:
                __n128 result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)v11, (unsigned int *)(v11 + 16), (unsigned int *)(v11 + 32), (unsigned int *)(v11 + 48));
                unsigned int v118 = *(_DWORD *)(v11 + 48);
                if (*v10 >= v118) {
                  return result;
                }
                *(_DWORD *)(v11 + 48) = *v10;
                *(_DWORD *)(a2 - 16) = v118;
                uint64_t v119 = *(void *)(v11 + 56);
                *(void *)(v11 + 56) = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v119;
                unsigned int v120 = *(_DWORD *)(v11 + 48);
                unsigned int v121 = *(_DWORD *)(v11 + 32);
                if (v120 >= v121) {
                  return result;
                }
                *(_DWORD *)(v11 + 32) = v120;
                *(_DWORD *)(v11 + 48) = v121;
                uint64_t v122 = *(void *)(v11 + 40);
                uint64_t v123 = *(void *)(v11 + 56);
                *(void *)(v11 + 40) = v123;
                *(void *)(v11 + 56) = v122;
                unsigned int v124 = *(_DWORD *)(v11 + 16);
                if (v120 >= v124) {
                  return result;
                }
                *(_DWORD *)(v11 + 16) = v120;
                *(_DWORD *)(v11 + 32) = v124;
                uint64_t v125 = *(void *)(v11 + 24);
                *(void *)(v11 + 24) = v123;
                *(void *)(v11 + 40) = v125;
                unsigned int v126 = *(_DWORD *)v11;
                if (v120 >= *(_DWORD *)v11) {
                  return result;
                }
                *(_DWORD *)unint64_t v11 = v120;
                *(_DWORD *)(v11 + 16) = v126;
                uint64_t v127 = *(void *)(v11 + 8);
                goto LABEL_154;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            unint64_t v128 = v11 + 16;
            BOOL v130 = v11 == a2 || v128 == a2;
            if (a4)
            {
              if (!v130)
              {
                uint64_t v131 = 0;
                unint64_t v132 = v11;
                do
                {
                  unint64_t v134 = v128;
                  unsigned int v135 = *(_DWORD *)(v132 + 16);
                  unsigned int v136 = *(_DWORD *)v132;
                  if (v135 < *(_DWORD *)v132)
                  {
                    uint64_t v137 = *(void *)(v132 + 24);
                    uint64_t v138 = v131;
                    do
                    {
                      uint64_t v139 = v11 + v138;
                      *(_DWORD *)(v139 + 16) = v136;
                      *(void *)(v139 + 24) = *(void *)(v11 + v138 + 8);
                      if (!v138)
                      {
                        uint64_t v133 = v11;
                        goto LABEL_120;
                      }
                      unsigned int v136 = *(_DWORD *)(v139 - 16);
                      v138 -= 16;
                    }
                    while (v135 < v136);
                    uint64_t v133 = v11 + v138 + 16;
LABEL_120:
                    *(_DWORD *)uint64_t v133 = v135;
                    *(void *)(v133 + 8) = v137;
                  }
                  unint64_t v128 = v134 + 16;
                  v131 += 16;
                  unint64_t v132 = v134;
                }
                while (v134 + 16 != a2);
              }
            }
            else if (!v130)
            {
              unsigned int v154 = (void *)(v11 + 24);
              do
              {
                unint64_t v155 = v128;
                unsigned int v156 = *(_DWORD *)(v9 + 16);
                unsigned int v157 = *(_DWORD *)v9;
                if (v156 < *(_DWORD *)v9)
                {
                  uint64_t v158 = *(void *)(v9 + 24);
                  uint64_t v159 = v154;
                  do
                  {
                    uint64_t v160 = v159;
                    *((_DWORD *)v159 - 2) = v157;
                    uint64_t v161 = *(v159 - 2);
                    v159 -= 2;
                    *uint64_t v160 = v161;
                    unsigned int v157 = *((_DWORD *)v160 - 10);
                  }
                  while (v156 < v157);
                  *((_DWORD *)v159 - 2) = v156;
                  *uint64_t v159 = v158;
                }
                unint64_t v128 = v155 + 16;
                v154 += 2;
                unint64_t v9 = v155;
              }
              while (v155 + 16 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v140 = (unint64_t)(v13 - 2) >> 1;
              int64_t v141 = v140;
              do
              {
                if (v140 >= v141)
                {
                  uint64_t v143 = (2 * v141) | 1;
                  unint64_t v144 = v11 + 16 * v143;
                  if (2 * v141 + 2 < v13)
                  {
                    unsigned int v146 = *(_DWORD *)(v144 + 16);
                    BOOL v145 = *(_DWORD *)v144 >= v146;
                    if (*(_DWORD *)v144 > v146) {
                      unsigned int v146 = *(_DWORD *)v144;
                    }
                    if (!v145)
                    {
                      v144 += 16;
                      uint64_t v143 = 2 * v141 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v146 = *(_DWORD *)v144;
                  }
                  uint64_t v147 = v11 + 16 * v141;
                  unsigned int v148 = *(_DWORD *)v147;
                  if (v146 >= *(_DWORD *)v147)
                  {
                    uint64_t v149 = *(void *)(v147 + 8);
                    while (1)
                    {
                      __n128 result = v147;
                      uint64_t v147 = v144;
                      *(_DWORD *)__n128 result = v146;
                      *(void *)(result + 8) = *(void *)(v144 + 8);
                      if (v140 < v143) {
                        break;
                      }
                      __n128 result = (2 * v143) | 1;
                      unint64_t v144 = v11 + 16 * result;
                      uint64_t v143 = 2 * v143 + 2;
                      if (v143 < v13)
                      {
                        unsigned int v146 = *(_DWORD *)v144;
                        unsigned int v150 = *(_DWORD *)(v144 + 16);
                        if (*(_DWORD *)v144 <= v150) {
                          unsigned int v146 = *(_DWORD *)(v144 + 16);
                        }
                        if (*(_DWORD *)v144 >= v150) {
                          uint64_t v143 = result;
                        }
                        else {
                          v144 += 16;
                        }
                        if (v146 < v148) {
                          break;
                        }
                      }
                      else
                      {
                        unsigned int v146 = *(_DWORD *)v144;
                        uint64_t v143 = result;
                        if (*(_DWORD *)v144 < v148) {
                          break;
                        }
                      }
                    }
                    *(_DWORD *)uint64_t v147 = v148;
                    *(void *)(v147 + 8) = v149;
                  }
                }
                BOOL v142 = v141-- <= 0;
              }
              while (!v142);
              uint64_t v162 = (unint64_t)v12 >> 4;
              do
              {
                uint64_t v163 = 0;
                unsigned int v164 = *(_DWORD *)v11;
                uint64_t v165 = *(void *)(v11 + 8);
                unint64_t v166 = v11;
                do
                {
                  uint64_t v168 = v166 + 16 * v163 + 16;
                  uint64_t v169 = (2 * v163) | 1;
                  uint64_t v163 = 2 * v163 + 2;
                  if (v163 < v162)
                  {
                    unsigned int v167 = *(_DWORD *)v168;
                    __n128 result = *(unsigned int *)(v168 + 16);
                    if (*(_DWORD *)v168 <= result) {
                      unsigned int v167 = *(_DWORD *)(v168 + 16);
                    }
                    if (*(_DWORD *)v168 >= result) {
                      uint64_t v163 = v169;
                    }
                    else {
                      v168 += 16;
                    }
                  }
                  else
                  {
                    unsigned int v167 = *(_DWORD *)v168;
                    uint64_t v163 = v169;
                  }
                  *(_DWORD *)unint64_t v166 = v167;
                  *(void *)(v166 + 8) = *(void *)(v168 + 8);
                  unint64_t v166 = v168;
                }
                while (v163 <= (uint64_t)((unint64_t)(v162 - 2) >> 1));
                if (v168 == a2 - 16)
                {
                  *(_DWORD *)uint64_t v168 = v164;
                  *(void *)(v168 + 8) = v165;
                }
                else
                {
                  *(_DWORD *)uint64_t v168 = *(_DWORD *)(a2 - 16);
                  *(void *)(v168 + 8) = *(void *)(a2 - 8);
                  *(_DWORD *)(a2 - 16) = v164;
                  *(void *)(a2 - 8) = v165;
                  uint64_t v170 = v168 - v11 + 16;
                  if (v170 >= 17)
                  {
                    unint64_t v171 = (((unint64_t)v170 >> 4) - 2) >> 1;
                    uint64_t v172 = v11 + 16 * v171;
                    int v173 = *(_DWORD *)v172;
                    unsigned int v174 = *(_DWORD *)v168;
                    if (*(_DWORD *)v172 < *(_DWORD *)v168)
                    {
                      uint64_t v175 = *(void *)(v168 + 8);
                      do
                      {
                        uint64_t v176 = v168;
                        uint64_t v168 = v172;
                        *(_DWORD *)uint64_t v176 = v173;
                        *(void *)(v176 + 8) = *(void *)(v172 + 8);
                        if (!v171) {
                          break;
                        }
                        unint64_t v171 = (v171 - 1) >> 1;
                        uint64_t v172 = v11 + 16 * v171;
                        int v173 = *(_DWORD *)v172;
                      }
                      while (*(_DWORD *)v172 < v174);
                      *(_DWORD *)uint64_t v168 = v174;
                      *(void *)(v168 + 8) = v175;
                    }
                  }
                }
                a2 -= 16;
                BOOL v142 = v162-- <= 2;
              }
              while (!v142);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = (unsigned int *)(v11 + 16 * ((unint64_t)v13 >> 1));
          unsigned int v16 = *v10;
          if ((unint64_t)v12 >= 0x801)
          {
            unsigned int v17 = *v15;
            unsigned int v18 = *(_DWORD *)v11;
            if (*v15 >= *(_DWORD *)v11)
            {
              if (v16 < v17)
              {
                unsigned int *v15 = v16;
                *(_DWORD *)(a2 - 16) = v17;
                unint64_t v24 = v11 + 16 * v14;
                uint64_t v26 = *(void *)(v24 + 8);
                unsigned int v25 = (void *)(v24 + 8);
                void *v25 = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v26;
                unsigned int v27 = *(_DWORD *)v11;
                if (*v15 < *(_DWORD *)v11)
                {
                  *(_DWORD *)unint64_t v11 = *v15;
                  unsigned int *v15 = v27;
                  uint64_t v28 = *(void *)(v11 + 8);
                  *(void *)(v11 + 8) = *v25;
                  void *v25 = v28;
                }
              }
            }
            else if (v16 >= v17)
            {
              *(_DWORD *)unint64_t v11 = v17;
              unsigned int *v15 = v18;
              uint64_t v33 = *(void *)(v11 + 8);
              unsigned int v34 = (void *)(v11 + 8 + 16 * v14);
              *(void *)(v11 + 8) = *v34;
              void *v34 = v33;
              if (*v10 < v18)
              {
                unsigned int *v15 = *v10;
                *(_DWORD *)(a2 - 16) = v18;
                void *v34 = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v33;
              }
            }
            else
            {
              *(_DWORD *)unint64_t v11 = v16;
              *(_DWORD *)(a2 - 16) = v18;
              uint64_t v19 = *(void *)(v11 + 8);
              *(void *)(v11 + 8) = *(void *)(a2 - 8);
              *(void *)(a2 - 8) = v19;
            }
            unint64_t v35 = v14 - 1;
            uint64_t v36 = (unsigned int *)(v11 + 16 * (v14 - 1));
            unsigned int v37 = *v36;
            unsigned int v38 = *(_DWORD *)(v11 + 16);
            unsigned int v39 = *(_DWORD *)(a2 - 32);
            if (*v36 >= v38)
            {
              if (v39 < v37)
              {
                unsigned int *v36 = v39;
                *(_DWORD *)(a2 - 32) = v37;
                unint64_t v41 = v11 + 16 * v35;
                uint64_t v43 = *(void *)(v41 + 8);
                unint64_t v42 = (void *)(v41 + 8);
                *unint64_t v42 = *(void *)(a2 - 24);
                *(void *)(a2 - 24) = v43;
                unsigned int v44 = *(_DWORD *)(v11 + 16);
                if (*v36 < v44)
                {
                  *(_DWORD *)(v11 + 16) = *v36;
                  unsigned int *v36 = v44;
                  uint64_t v45 = *(void *)(v11 + 24);
                  *(void *)(v11 + 24) = *v42;
                  *unint64_t v42 = v45;
                }
              }
            }
            else if (v39 >= v37)
            {
              *(_DWORD *)(v11 + 16) = v37;
              unint64_t v46 = v11 + 16 * v35;
              uint64_t v48 = *(void *)(v46 + 8);
              uint64_t v47 = (void *)(v46 + 8);
              unsigned int *v36 = v38;
              uint64_t v49 = *(void *)(v11 + 24);
              *(void *)(v11 + 24) = v48;
              *uint64_t v47 = v49;
              unsigned int v50 = *(_DWORD *)(a2 - 32);
              if (v50 < v38)
              {
                unsigned int *v36 = v50;
                *(_DWORD *)(a2 - 32) = v38;
                *uint64_t v47 = *(void *)(a2 - 24);
                *(void *)(a2 - 24) = v49;
              }
            }
            else
            {
              *(_DWORD *)(v11 + 16) = v39;
              *(_DWORD *)(a2 - 32) = v38;
              uint64_t v40 = *(void *)(v11 + 24);
              *(void *)(v11 + 24) = *(void *)(a2 - 24);
              *(void *)(a2 - 24) = v40;
            }
            unint64_t v51 = v14 + 1;
            float64x2_t v52 = (unsigned int *)(v11 + 16 * (v14 + 1));
            unsigned int v53 = *v52;
            unsigned int v54 = *(_DWORD *)(v11 + 32);
            unsigned int v55 = *(_DWORD *)(a2 - 48);
            if (*v52 >= v54)
            {
              if (v55 < v53)
              {
                *float64x2_t v52 = v55;
                *(_DWORD *)(a2 - 48) = v53;
                unint64_t v57 = v11 + 16 * v51;
                uint64_t v59 = *(void *)(v57 + 8);
                uint64_t v58 = (void *)(v57 + 8);
                void *v58 = *(void *)(a2 - 40);
                *(void *)(a2 - 40) = v59;
                unsigned int v60 = *(_DWORD *)(v11 + 32);
                if (*v52 < v60)
                {
                  *(_DWORD *)(v11 + 32) = *v52;
                  *float64x2_t v52 = v60;
                  uint64_t v61 = *(void *)(v11 + 40);
                  *(void *)(v11 + 40) = *v58;
                  void *v58 = v61;
                }
              }
            }
            else if (v55 >= v53)
            {
              *(_DWORD *)(v11 + 32) = v53;
              unint64_t v62 = v11 + 16 * v51;
              uint64_t v64 = *(void *)(v62 + 8);
              uint64_t v63 = (void *)(v62 + 8);
              *float64x2_t v52 = v54;
              uint64_t v65 = *(void *)(v11 + 40);
              *(void *)(v11 + 40) = v64;
              *uint64_t v63 = v65;
              unsigned int v66 = *(_DWORD *)(a2 - 48);
              if (v66 < v54)
              {
                *float64x2_t v52 = v66;
                *(_DWORD *)(a2 - 48) = v54;
                *uint64_t v63 = *(void *)(a2 - 40);
                *(void *)(a2 - 40) = v65;
              }
            }
            else
            {
              *(_DWORD *)(v11 + 32) = v55;
              *(_DWORD *)(a2 - 48) = v54;
              uint64_t v56 = *(void *)(v11 + 40);
              *(void *)(v11 + 40) = *(void *)(a2 - 40);
              *(void *)(a2 - 40) = v56;
            }
            unsigned int v67 = *v15;
            unsigned int v68 = *v36;
            unsigned int v69 = *v52;
            if (*v15 >= *v36)
            {
              if (v69 >= v67) {
                goto LABEL_47;
              }
              unsigned int *v15 = v69;
              unint64_t v73 = v11 + 16 * v14;
              uint64_t v75 = *(void *)(v73 + 8);
              unsigned int v74 = (void *)(v73 + 8);
              __n128 result = v75;
              *float64x2_t v52 = v67;
              unint64_t v76 = v11 + 16 * v51;
              uint64_t v77 = *(void *)(v76 + 8);
              *unsigned int v74 = v77;
              *(void *)(v76 + 8) = v75;
              if (v69 < v68)
              {
                unsigned int *v36 = v69;
                unsigned int *v15 = v68;
                unint64_t v78 = v11 + 16 * v35;
                uint64_t v79 = *(void *)(v78 + 8);
                *(void *)(v78 + 8) = v77;
                *unsigned int v74 = v79;
LABEL_51:
                unsigned int v85 = *(_DWORD *)v11;
                *(_DWORD *)unint64_t v11 = v68;
                unsigned int *v15 = v85;
                unint64_t v86 = v11 + 16 * v14;
                uint64_t v87 = *(void *)(v11 + 8);
                *(void *)(v11 + 8) = *(void *)(v86 + 8);
                *(void *)(v86 + 8) = v87;
                goto LABEL_52;
              }
            }
            else
            {
              unsigned int v70 = (uint64_t *)(v11 + 16 * v35 + 8);
              if (v69 < v67)
              {
                unsigned int *v36 = v69;
                *float64x2_t v52 = v68;
                unint64_t v71 = v11 + 16 * v51;
                uint64_t v72 = *v70;
                uint64_t *v70 = *(void *)(v71 + 8);
                *(void *)(v71 + 8) = v72;
LABEL_47:
                unsigned int v68 = v67;
                goto LABEL_51;
              }
              unsigned int *v36 = v67;
              unsigned int *v15 = v68;
              unint64_t v80 = v11 + 16 * v14;
              uint64_t v82 = *(void *)(v80 + 8);
              long long v81 = (void *)(v80 + 8);
              uint64_t v83 = *v70;
              uint64_t *v70 = v82;
              *long long v81 = v83;
              if (v69 >= v68) {
                goto LABEL_51;
              }
              unsigned int *v15 = v69;
              *float64x2_t v52 = v68;
              unint64_t v84 = v11 + 16 * v51;
              *long long v81 = *(void *)(v84 + 8);
              *(void *)(v84 + 8) = v83;
            }
            unsigned int v68 = v69;
            goto LABEL_51;
          }
          unsigned int v20 = *(_DWORD *)v11;
          unsigned int v21 = *v15;
          if (*(_DWORD *)v11 >= *v15)
          {
            if (v16 < v20)
            {
              *(_DWORD *)unint64_t v11 = v16;
              *(_DWORD *)(a2 - 16) = v20;
              uint64_t v29 = *(void *)(v11 + 8);
              *(void *)(v11 + 8) = *(void *)(a2 - 8);
              *(void *)(a2 - 8) = v29;
              unsigned int v30 = *v15;
              if (*(_DWORD *)v11 < *v15)
              {
                unsigned int *v15 = *(_DWORD *)v11;
                *(_DWORD *)unint64_t v11 = v30;
                unint64_t v31 = v11 + 16 * v14;
                uint64_t v32 = *(void *)(v31 + 8);
                *(void *)(v31 + 8) = *(void *)(v11 + 8);
                *(void *)(v11 + 8) = v32;
              }
            }
          }
          else
          {
            uint64_t v22 = (uint64_t *)(v11 + 16 * v14 + 8);
            if (v16 < v20)
            {
              unsigned int *v15 = v16;
              *(_DWORD *)(a2 - 16) = v21;
              uint64_t v23 = *v22;
              uint64_t *v22 = *(void *)(a2 - 8);
LABEL_30:
              *(void *)(a2 - 8) = v23;
              goto LABEL_52;
            }
            unsigned int *v15 = v20;
            *(_DWORD *)unint64_t v11 = v21;
            uint64_t v23 = *v22;
            uint64_t *v22 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = v23;
            if (*v10 < v21)
            {
              *(_DWORD *)unint64_t v11 = *v10;
              *(_DWORD *)(a2 - 16) = v21;
              *(void *)(v11 + 8) = *(void *)(a2 - 8);
              goto LABEL_30;
            }
          }
LABEL_52:
          --a3;
          unsigned int v88 = *(_DWORD *)v11;
          if ((a4 & 1) != 0 || *(_DWORD *)(v11 - 16) < v88) {
            break;
          }
          if (v88 < *v10)
          {
            do
            {
              unsigned int v103 = *(_DWORD *)(v11 + 16);
              v11 += 16;
            }
            while (v88 >= v103);
          }
          else
          {
            unint64_t v104 = v11 + 16;
            do
            {
              unint64_t v11 = v104;
              if (v104 >= a2) {
                break;
              }
              v104 += 16;
            }
            while (v88 >= *(_DWORD *)v11);
          }
          unint64_t v105 = a2;
          if (v11 < a2)
          {
            unint64_t v105 = a2;
            do
            {
              unsigned int v106 = *(_DWORD *)(v105 - 16);
              v105 -= 16;
            }
            while (v88 < v106);
          }
          uint64_t v107 = *(void *)(v9 + 8);
          if (v11 < v105)
          {
            unsigned int v108 = *(_DWORD *)v11;
            unsigned int v109 = *(_DWORD *)v105;
            do
            {
              *(_DWORD *)unint64_t v11 = v109;
              *(_DWORD *)unint64_t v105 = v108;
              uint64_t v110 = *(void *)(v11 + 8);
              *(void *)(v11 + 8) = *(void *)(v105 + 8);
              *(void *)(v105 + 8) = v110;
              do
              {
                unsigned int v111 = *(_DWORD *)(v11 + 16);
                v11 += 16;
                unsigned int v108 = v111;
              }
              while (v88 >= v111);
              do
              {
                unsigned int v112 = *(_DWORD *)(v105 - 16);
                v105 -= 16;
                unsigned int v109 = v112;
              }
              while (v88 < v112);
            }
            while (v11 < v105);
          }
          BOOL v4 = v11 - 16 >= v9;
          BOOL v5 = v11 - 16 == v9;
          if (v11 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v11 - 16);
            *(void *)(v9 + 8) = *(void *)(v11 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v11 - 16) = v88;
          *(void *)(v11 - 8) = v107;
        }
        uint64_t v89 = *(void *)(v11 + 8);
        unint64_t v90 = v11;
        do
        {
          unint64_t v91 = v90;
          unsigned int v93 = *(_DWORD *)(v90 + 16);
          v90 += 16;
          unsigned int v92 = v93;
        }
        while (v93 < v88);
        size_t v94 = (unsigned int *)a2;
        if (v91 == v11)
        {
          size_t v94 = (unsigned int *)a2;
          do
          {
            if (v90 >= (unint64_t)v94) {
              break;
            }
            unsigned int v96 = *(v94 - 4);
            v94 -= 4;
          }
          while (v96 >= v88);
        }
        else
        {
          do
          {
            unsigned int v95 = *(v94 - 4);
            v94 -= 4;
          }
          while (v95 >= v88);
        }
        if (v90 < (unint64_t)v94)
        {
          unsigned int v97 = *v94;
          unint64_t v11 = v90;
          size_t v98 = v94;
          do
          {
            *(_DWORD *)unint64_t v11 = v97;
            unsigned int *v98 = v92;
            uint64_t v99 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *((void *)v98 + 1);
            *((void *)v98 + 1) = v99;
            do
            {
              unsigned int v100 = *(_DWORD *)(v11 + 16);
              v11 += 16;
              unsigned int v92 = v100;
            }
            while (v100 < v88);
            do
            {
              unsigned int v101 = *(v98 - 4);
              v98 -= 4;
              unsigned int v97 = v101;
            }
            while (v101 >= v88);
          }
          while (v11 < (unint64_t)v98);
        }
        else
        {
          unint64_t v11 = v90;
        }
        if (v11 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v11 - 16);
          *(void *)(v9 + 8) = *(void *)(v11 - 8);
        }
        *(_DWORD *)(v11 - 16) = v88;
        *(void *)(v11 - 8) = v89;
        if (v90 >= (unint64_t)v94) {
          break;
        }
LABEL_74:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>(v9, v11 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v102 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(v9, v11 - 16);
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(v11, a2);
      if (result) {
        break;
      }
      if (!v102) {
        goto LABEL_74;
      }
    }
    a2 = v11 - 16;
    if (!v102) {
      continue;
    }
    return result;
  }
}

void altitude::CompleteGlobeTileSetLoader::loadBaseSurface(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 41);
  if (!v3) {
    operator new();
  }
  if (!*(unsigned char *)(v3 + 282))
  {
    *((_DWORD *)a2 + 97) = *(_DWORD *)(*((void *)this + 4) + 88);
    uint64_t v4 = *((void *)a2 + 36);
    long long v41 = *(_OWORD *)((char *)a2 + 392);
    uint64_t v42 = v4;
    __int16 v43 = 256;
    char v44 = 0;
    int v45 = 0;
    (*(void (**)(void *__return_ptr))(**((void **)this + 19) + 104))(&v38);
    int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v38);
    if (Status)
    {
      if (Status == 4)
      {
        uint64_t v36 = 0;
        unsigned int v37 = 0;
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(void *)long long buf = &v53;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        if (altitude::HeightRequestManager::getResult(*((void *)this + 19), (uint64_t)&v41, (uint64_t)&v36, (uint64_t)&v34, (uint64_t)buf, (uint64_t)&v32))
        {
          uint64_t v8 = v36;
          if (v36)
          {
            unint64_t v9 = *(void *)(v3 + 136);
            if (v9)
            {
              unint64_t v10 = (__n128 *)*((void *)this + 83);
              if ((unint64_t)v10 >= *((void *)this + 84))
              {
                uint64_t v12 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 656, *(__n128 *)(v3 + 136));
              }
              else
              {
                v10->n128_u64[0] = v9;
                unint64_t v11 = *(void *)(v3 + 144);
                v10->n128_u64[1] = v11;
                if (v11) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v12 = v10 + 1;
              }
              *((void *)this + 83) = v12;
              if (*(void *)(v3 + 136))
              {
                (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v3 + 16) + 424) + 24))(*(void *)(*(void *)(v3 + 16) + 424), *(void *)(v3 + 16), v3);
                uint64_t v8 = v36;
              }
            }
            uint64_t v23 = v37;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v24 = *(std::__shared_weak_count **)(v3 + 144);
            *(void *)(v3 + 136) = v8;
            *(void *)(v3 + 144) = v23;
            if (v24)
            {
              if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
              uint64_t v8 = *(void *)(v3 + 136);
            }
            if (v8) {
              (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(*(void *)(v3 + 16) + 424)
            }
                                                                       + 16))(*(void *)(*(void *)(v3 + 16) + 424), *(void *)(v3 + 16), v3, v8);
            uint64_t v26 = v32;
            unsigned int v25 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v27 = *(std::__shared_weak_count **)(v3 + 112);
            *(void *)(v3 + 104) = v26;
            *(void *)(v3 + 112) = v25;
            if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
            if ((uint8_t *)(v3 + 24) != buf) {
              std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v3 + 24), *(void **)buf, &v53);
            }
            goto LABEL_50;
          }
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        unsigned int v18 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v46 = 67109632;
          int v47 = DWORD1(v41);
          __int16 v48 = 1024;
          int v49 = DWORD2(v41);
          __int16 v50 = 1024;
          int v51 = v41;
          _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, "Got no actor when loading base surface for tile %u %u %u", v46, 0x14u);
        }
        *(unsigned char *)(v3 + 282) = 1;
        *(unsigned char *)(v3 + 280) = 1;
        double v19 = *(double *)(v3 + 288) + *(double *)(v3 + 288);
        *(double *)(v3 + 288) = v19;
        double Current = CFAbsoluteTimeGetCurrent();
        uint64_t v21 = *((void *)this + 127);
        std::mutex::lock((std::mutex *)(v21 + 16));
        if (*(unsigned char *)(v21 + 96))
        {
          double v22 = *(double *)(v21 + 88);
          std::mutex::unlock((std::mutex *)(v21 + 16));
          v7.n128_f64[0] = Current + v19;
          if (Current + v19 >= v22)
          {
LABEL_50:
            uint64_t v28 = v33;
            if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, __n128))v28->__on_zero_shared)(v28, v7);
              std::__shared_weak_count::__release_weak(v28);
            }
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v53);
            uint64_t v29 = v35;
            if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
            unsigned int v30 = v37;
            if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
            goto LABEL_59;
          }
        }
        else
        {
          std::mutex::unlock((std::mutex *)(v21 + 16));
        }
        (*(void (**)(void, void, double))(**((void **)this + 127) + 24))(*((void *)this + 127), 0, v19);
        goto LABEL_50;
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v13 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&buf[4] = DWORD1(v41);
        LOWORD(v53) = 1024;
        *(_DWORD *)((char *)&v53 + 2) = DWORD2(v41);
        HIWORD(v53) = 1024;
        LODWORD(v54) = v41;
        _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_ERROR, "Failed to load base surface for tile %u %u %u", buf, 0x14u);
      }
      *(unsigned char *)(v3 + 282) = 1;
      *(unsigned char *)(v3 + 280) = 1;
      double v14 = *(double *)(v3 + 288) + *(double *)(v3 + 288);
      *(double *)(v3 + 288) = v14;
      double v15 = CFAbsoluteTimeGetCurrent();
      uint64_t v16 = *((void *)this + 127);
      std::mutex::lock((std::mutex *)(v16 + 16));
      if (*(unsigned char *)(v16 + 96))
      {
        double v17 = *(double *)(v16 + 88);
        std::mutex::unlock((std::mutex *)(v16 + 16));
        v6.n128_f64[0] = v15 + v14;
        if (v15 + v14 >= v17) {
          goto LABEL_59;
        }
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v16 + 16));
      }
      (*(void (**)(void, void, double))(**((void **)this + 127) + 24))(*((void *)this + 127), 0, v14);
    }
LABEL_59:
    unsigned int v38 = off_1EF5677B0;
    if (v39) {
      atomic_fetch_add((atomic_uint *volatile)(v39 + 128), 0xFFFFFFFF);
    }
    unint64_t v31 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v31->__on_zero_shared)(v31, v6);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *,false>(unint64_t result, void *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = a2 - 2;
  unint64_t v11 = a2 - 1;
  unint64_t v12 = v9;
  while (1)
  {
    unint64_t v9 = v12;
    uint64_t v13 = (uint64_t)a2 - v12;
    uint64_t v14 = (uint64_t)((uint64_t)a2 - v12) >> 4;
    if (v5 || !v4)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (*(_DWORD *)v10 < *(_DWORD *)v12)
          {
            uint64_t v106 = *(void *)v12;
            *(void *)unint64_t v12 = *v10;
            *unint64_t v10 = v106;
            uint64_t v107 = *(void *)(v12 + 8);
            *(void *)(v12 + 8) = *v11;
            *unint64_t v11 = v107;
          }
          return result;
        case 3:
          unsigned int v108 = *(_DWORD *)(v12 + 16);
          unsigned int v109 = *(_DWORD *)v10;
          if (v108 >= *(_DWORD *)v12)
          {
            if (v109 >= v108) {
              return result;
            }
            uint64_t v147 = *(void *)(v12 + 16);
            *(void *)(v12 + 16) = *v10;
            *unint64_t v10 = v147;
            uint64_t v148 = *(void *)(v12 + 24);
            *(void *)(v12 + 24) = *v11;
            *unint64_t v11 = v148;
            if (*(_DWORD *)(v12 + 16) >= *(_DWORD *)v12) {
              return result;
            }
            uint64_t v149 = *(void *)v12;
            *(void *)unint64_t v12 = *(void *)(v12 + 16);
            *(void *)(v12 + 16) = v149;
            uint64_t v110 = (uint64_t *)(v12 + 8);
            unint64_t v11 = (uint64_t *)(v12 + 24);
          }
          else
          {
            uint64_t v110 = (uint64_t *)(v12 + 8);
            uint64_t v111 = *(void *)v12;
            if (v109 >= v108)
            {
              uint64_t v110 = (uint64_t *)(v12 + 24);
              uint64_t v172 = *(void *)(v12 + 8);
              uint64_t v171 = *(void *)(v12 + 16);
              *(void *)(v12 + 8) = *(void *)(v12 + 24);
              *(void *)(v12 + 16) = v111;
              *(void *)unint64_t v12 = v171;
              *(void *)(v12 + 24) = v172;
              if (*(_DWORD *)v10 >= v111) {
                return result;
              }
              *(void *)(v12 + 16) = *v10;
            }
            else
            {
              *(void *)unint64_t v12 = *v10;
            }
            *unint64_t v10 = v111;
          }
          uint64_t v173 = *v110;
          *uint64_t v110 = *v11;
          *unint64_t v11 = v173;
          return result;
        case 4:
          return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)v12, (int *)(v12 + 16), (int *)(v12 + 32), a2 - 2);
        case 5:
          __n128 result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)v12, (int *)(v12 + 16), (int *)(v12 + 32), (void *)(v12 + 48));
          if (*(_DWORD *)v10 < *(_DWORD *)(v12 + 48))
          {
            uint64_t v112 = *(void *)(v12 + 48);
            *(void *)(v12 + 48) = *v10;
            *unint64_t v10 = v112;
            uint64_t v113 = *(void *)(v12 + 56);
            *(void *)(v12 + 56) = *v11;
            *unint64_t v11 = v113;
            if (*(_DWORD *)(v12 + 48) < *(_DWORD *)(v12 + 32))
            {
              uint64_t v114 = *(void *)(v12 + 32);
              uint64_t v115 = *(void *)(v12 + 40);
              uint64_t v116 = *(void *)(v12 + 48);
              uint64_t v117 = *(void *)(v12 + 56);
              *(void *)(v12 + 32) = v116;
              *(void *)(v12 + 40) = v117;
              *(void *)(v12 + 48) = v114;
              *(void *)(v12 + 56) = v115;
              if (*(_DWORD *)(v12 + 16) > v116)
              {
                uint64_t v118 = *(void *)(v12 + 16);
                uint64_t v119 = *(void *)(v12 + 24);
                *(void *)(v12 + 16) = v116;
                *(void *)(v12 + 24) = v117;
                *(void *)(v12 + 32) = v118;
                *(void *)(v12 + 40) = v119;
                if (*(_DWORD *)v12 > v116)
                {
                  uint64_t v120 = *(void *)v12;
                  uint64_t v121 = *(void *)(v12 + 8);
                  *(void *)unint64_t v12 = v116;
                  *(void *)(v12 + 8) = v117;
                  *(void *)(v12 + 16) = v120;
                  *(void *)(v12 + 24) = v121;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 383) {
      break;
    }
    if (!a3)
    {
      if ((void *)v12 != a2)
      {
        int64_t v134 = (unint64_t)(v14 - 2) >> 1;
        int64_t v135 = v134;
        do
        {
          if (v134 >= v135)
          {
            uint64_t v137 = (2 * v135) | 1;
            uint64_t v138 = (unsigned int *)(v12 + 16 * v137);
            if (2 * v135 + 2 < v14)
            {
              unsigned int v140 = *v138;
              unsigned int v139 = v138[4];
              if (*v138 <= v139) {
                unsigned int v140 = v138[4];
              }
              if (*v138 < v139)
              {
                v138 += 4;
                uint64_t v137 = 2 * v135 + 2;
              }
            }
            else
            {
              unsigned int v140 = *v138;
            }
            int64_t v141 = (unsigned int *)(v12 + 16 * v135);
            if (v140 >= *v141)
            {
              uint64_t v142 = *(void *)v141;
              uint64_t v143 = *((void *)v141 + 1);
              while (1)
              {
                BOOL v145 = v141;
                int64_t v141 = v138;
                *(void *)BOOL v145 = *(void *)v138;
                *((void *)v145 + 1) = *((void *)v138 + 1);
                if (v134 < v137) {
                  break;
                }
                uint64_t v146 = (2 * v137) | 1;
                uint64_t v138 = (unsigned int *)(v12 + 16 * v146);
                uint64_t v137 = 2 * v137 + 2;
                if (v137 < v14)
                {
                  LODWORD(result) = *v138;
                  unsigned int v144 = v138[4];
                  if (*v138 <= v144) {
                    __n128 result = v144;
                  }
                  else {
                    __n128 result = result;
                  }
                  if (*v138 >= v144) {
                    uint64_t v137 = v146;
                  }
                  else {
                    v138 += 4;
                  }
                  if (result < v142) {
                    break;
                  }
                }
                else
                {
                  __n128 result = *v138;
                  uint64_t v137 = v146;
                  if (result < v142) {
                    break;
                  }
                }
              }
              *(void *)int64_t v141 = v142;
              *((void *)v141 + 1) = v143;
            }
          }
          BOOL v136 = v135-- <= 0;
        }
        while (!v136);
        uint64_t v157 = (unint64_t)v13 >> 4;
        do
        {
          uint64_t v158 = 0;
          uint64_t v159 = *(void *)v12;
          uint64_t v160 = *(void *)(v12 + 8);
          uint64_t v161 = (void *)v12;
          do
          {
            uint64_t v162 = (uint64_t)&v161[2 * v158 + 2];
            uint64_t v163 = (2 * v158) | 1;
            uint64_t v164 = 2 * v158 + 2;
            if (v164 < v157)
            {
              __n128 result = *(unsigned int *)(v162 + 16);
              if (*(_DWORD *)v162 < result)
              {
                v162 += 16;
                uint64_t v163 = v164;
              }
            }
            *uint64_t v161 = *(void *)v162;
            v161[1] = *(void *)(v162 + 8);
            uint64_t v161 = (void *)v162;
            uint64_t v158 = v163;
          }
          while (v163 <= (uint64_t)((unint64_t)(v157 - 2) >> 1));
          if ((void *)v162 == a2 - 2)
          {
            *(void *)uint64_t v162 = v159;
            *(void *)(v162 + 8) = v160;
          }
          else
          {
            *(void *)uint64_t v162 = *(a2 - 2);
            *(void *)(v162 + 8) = *(a2 - 1);
            *(a2 - 2) = v159;
            *(a2 - 1) = v160;
            uint64_t v165 = v162 - v12 + 16;
            if (v165 >= 17)
            {
              unint64_t v166 = (((unint64_t)v165 >> 4) - 2) >> 1;
              unsigned int v167 = (void *)(v12 + 16 * v166);
              if (*(_DWORD *)v167 < *(_DWORD *)v162)
              {
                uint64_t v168 = *(void *)v162;
                uint64_t v169 = *(void *)(v162 + 8);
                do
                {
                  uint64_t v170 = (void *)v162;
                  uint64_t v162 = (uint64_t)v167;
                  *uint64_t v170 = *v167;
                  v170[1] = v167[1];
                  if (!v166) {
                    break;
                  }
                  unint64_t v166 = (v166 - 1) >> 1;
                  unsigned int v167 = (void *)(v12 + 16 * v166);
                }
                while (*(_DWORD *)v167 < v168);
                *(void *)uint64_t v162 = v168;
                *(void *)(v162 + 8) = v169;
              }
            }
          }
          a2 -= 2;
          BOOL v136 = v157-- <= 2;
        }
        while (!v136);
      }
      return result;
    }
    unint64_t v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = (unsigned int *)(v12 + 16 * ((unint64_t)v14 >> 1));
    unsigned int v17 = *(_DWORD *)v10;
    if ((unint64_t)v13 >= 0x801)
    {
      unsigned int v18 = *v16;
      if (*v16 >= *(_DWORD *)v12)
      {
        if (v17 < v18)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)uint64_t v16 = *v10;
          *unint64_t v10 = v24;
          unint64_t v25 = v12 + 16 * v15;
          uint64_t v27 = *(void *)(v25 + 8);
          uint64_t v26 = (uint64_t *)(v25 + 8);
          uint64_t *v26 = *v11;
          *unint64_t v11 = v27;
          if (*v16 < *(_DWORD *)v12)
          {
            uint64_t v28 = *(void *)v12;
            *(void *)unint64_t v12 = *(void *)v16;
            double v19 = (uint64_t *)(v12 + 8);
            *(void *)uint64_t v16 = v28;
            goto LABEL_23;
          }
        }
      }
      else
      {
        double v19 = (uint64_t *)(v12 + 8);
        uint64_t v20 = *(void *)v12;
        if (v17 < v18)
        {
          *(void *)unint64_t v12 = *v10;
          goto LABEL_22;
        }
        *(void *)unint64_t v12 = *(void *)v16;
        *(void *)uint64_t v16 = v20;
        uint64_t v33 = *(void *)(v12 + 8);
        double v19 = (uint64_t *)(v12 + 8 + 16 * v15);
        *(void *)(v12 + 8) = *v19;
        *double v19 = v33;
        if (*(_DWORD *)v10 < v20)
        {
          *(void *)uint64_t v16 = *v10;
LABEL_22:
          *unint64_t v10 = v20;
          uint64_t v26 = a2 - 1;
LABEL_23:
          uint64_t v34 = *v19;
          *double v19 = *v26;
          uint64_t *v26 = v34;
        }
      }
      unint64_t v35 = v15 - 1;
      uint64_t v36 = (unsigned int *)(v12 + 16 * (v15 - 1));
      unsigned int v37 = *v36;
      unsigned int v38 = *((_DWORD *)a2 - 8);
      if (*v36 >= *(_DWORD *)(v12 + 16))
      {
        if (v38 < v37)
        {
          uint64_t v41 = *(void *)v36;
          *(void *)uint64_t v36 = *(a2 - 4);
          *(a2 - 4) = v41;
          unint64_t v42 = v12 + 16 * v35;
          uint64_t v44 = *(void *)(v42 + 8);
          __int16 v43 = (uint64_t *)(v42 + 8);
          *__int16 v43 = *(a2 - 3);
          *(a2 - 3) = v44;
          if (*v36 < *(_DWORD *)(v12 + 16))
          {
            uint64_t v45 = *(void *)(v12 + 16);
            *(void *)(v12 + 16) = *(void *)v36;
            *(void *)uint64_t v36 = v45;
            uint64_t v40 = (uint64_t *)(v12 + 24);
            goto LABEL_36;
          }
        }
      }
      else
      {
        uint64_t v39 = *(void *)(v12 + 16);
        if (v38 < v37)
        {
          uint64_t v40 = (uint64_t *)(v12 + 24);
          *(void *)(v12 + 16) = *(a2 - 4);
          goto LABEL_35;
        }
        unint64_t v48 = v12 + 16 * v35;
        uint64_t v49 = *(void *)(v48 + 8);
        uint64_t v40 = (uint64_t *)(v48 + 8);
        uint64_t v50 = *(void *)(v12 + 24);
        *(void *)(v12 + 16) = *(void *)v36;
        *(void *)(v12 + 24) = v49;
        *(void *)uint64_t v36 = v39;
        *uint64_t v40 = v50;
        if (*((_DWORD *)a2 - 8) < v39)
        {
          *(void *)uint64_t v36 = *(a2 - 4);
LABEL_35:
          *(a2 - 4) = v39;
          __int16 v43 = a2 - 3;
LABEL_36:
          uint64_t v51 = *v40;
          *uint64_t v40 = *v43;
          *__int16 v43 = v51;
        }
      }
      unint64_t v52 = v15 + 1;
      unsigned int v53 = (unsigned int *)(v12 + 16 * (v15 + 1));
      unsigned int v54 = *v53;
      unsigned int v55 = *((_DWORD *)a2 - 12);
      if (*v53 >= *(_DWORD *)(v12 + 32))
      {
        if (v55 < v54)
        {
          uint64_t v58 = *(void *)v53;
          *(void *)unsigned int v53 = *(a2 - 6);
          *(a2 - 6) = v58;
          unint64_t v59 = v12 + 16 * v52;
          uint64_t v61 = *(void *)(v59 + 8);
          unsigned int v60 = (unint64_t *)(v59 + 8);
          *unsigned int v60 = *(a2 - 5);
          *(a2 - 5) = v61;
          unsigned int v54 = *v53;
          if (*v53 < *(_DWORD *)(v12 + 32))
          {
            uint64_t v62 = *(void *)(v12 + 32);
            *(void *)(v12 + 32) = *(void *)v53;
            *(void *)unsigned int v53 = v62;
            unint64_t v57 = (unint64_t *)(v12 + 40);
            goto LABEL_46;
          }
        }
      }
      else
      {
        uint64_t v56 = *(void *)(v12 + 32);
        if (v55 < v54)
        {
          unint64_t v57 = (unint64_t *)(v12 + 40);
          *(void *)(v12 + 32) = *(a2 - 6);
          goto LABEL_45;
        }
        unint64_t v63 = v12 + 16 * v52;
        uint64_t v64 = *(void *)(v63 + 8);
        unint64_t v57 = (unint64_t *)(v63 + 8);
        __n128 result = *(void *)(v12 + 40);
        *(void *)(v12 + 32) = *(void *)v53;
        *(void *)(v12 + 40) = v64;
        *(void *)unsigned int v53 = v56;
        unint64_t *v57 = result;
        unsigned int v54 = v56;
        if (*((_DWORD *)a2 - 12) < v56)
        {
          *(void *)unsigned int v53 = *(a2 - 6);
LABEL_45:
          *(a2 - 6) = v56;
          unsigned int v60 = a2 - 5;
LABEL_46:
          unint64_t v65 = *v57;
          unint64_t *v57 = *v60;
          *unsigned int v60 = v65;
          unsigned int v54 = *v53;
        }
      }
      unsigned int v66 = *v16;
      unsigned int v67 = *v36;
      if (*v16 >= *v36)
      {
        uint64_t v68 = *(void *)v16;
        if (v54 < v66)
        {
          uint64_t v71 = *(void *)v53;
          *(void *)uint64_t v16 = *(void *)v53;
          unint64_t v72 = v12 + 16 * v15;
          unint64_t v73 = *(uint64_t **)(v72 + 8);
          unsigned int v70 = (uint64_t *)(v72 + 8);
          __n128 result = (unint64_t)v73;
          *(void *)unsigned int v53 = v68;
          unint64_t v74 = v12 + 16 * v52;
          uint64_t *v70 = *(void *)(v74 + 8);
          *(void *)(v74 + 8) = v73;
          if (v67 > v71)
          {
            uint64_t v75 = *(void *)v36;
            *(void *)uint64_t v36 = v71;
            *(void *)uint64_t v16 = v75;
            unsigned int v69 = (uint64_t *)(v12 + 16 * v35 + 8);
            goto LABEL_55;
          }
          uint64_t v68 = v71;
        }
      }
      else
      {
        uint64_t v68 = *(void *)v36;
        unsigned int v69 = (uint64_t *)(v12 + 16 * v35 + 8);
        if (v54 < v66)
        {
          *(void *)uint64_t v36 = *(void *)v53;
          *(void *)unsigned int v53 = v68;
          unsigned int v70 = (uint64_t *)(v12 + 16 * v52 + 8);
          goto LABEL_55;
        }
        *(void *)uint64_t v36 = *(void *)v16;
        *(void *)uint64_t v16 = v68;
        unint64_t v76 = v12 + 16 * v15;
        uint64_t v78 = *(void *)(v76 + 8);
        uint64_t v77 = (uint64_t *)(v76 + 8);
        uint64_t v79 = *v69;
        *unsigned int v69 = v78;
        *uint64_t v77 = v79;
        if (v54 < v68)
        {
          *(void *)uint64_t v16 = *(void *)v53;
          *(void *)unsigned int v53 = v68;
          unsigned int v70 = (uint64_t *)(v12 + 16 * v52 + 8);
          unsigned int v69 = v77;
LABEL_55:
          uint64_t v80 = *v69;
          *unsigned int v69 = *v70;
          uint64_t *v70 = v80;
          uint64_t v68 = *(void *)v16;
        }
      }
      uint64_t v81 = *(void *)v12;
      *(void *)unint64_t v12 = v68;
      uint64_t v23 = (uint64_t *)(v12 + 8);
      *(void *)uint64_t v16 = v81;
      unint64_t v31 = (uint64_t *)(v12 + 8 + 16 * v15);
      goto LABEL_57;
    }
    unsigned int v21 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 >= *v16)
    {
      if (v17 >= v21) {
        goto LABEL_58;
      }
      uint64_t v29 = *(void *)v12;
      *(void *)unint64_t v12 = *v10;
      *unint64_t v10 = v29;
      unint64_t v31 = (uint64_t *)(v12 + 8);
      uint64_t v30 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = *v11;
      *unint64_t v11 = v30;
      if (*(_DWORD *)v12 >= *v16) {
        goto LABEL_58;
      }
      uint64_t v32 = *(void *)v16;
      *(void *)uint64_t v16 = *(void *)v12;
      *(void *)unint64_t v12 = v32;
      uint64_t v23 = (uint64_t *)(v12 + 16 * v15 + 8);
      goto LABEL_57;
    }
    uint64_t v22 = *(void *)v16;
    uint64_t v23 = (uint64_t *)(v12 + 16 * v15 + 8);
    if (v17 < v21)
    {
      *(void *)uint64_t v16 = *v10;
      *unint64_t v10 = v22;
      goto LABEL_32;
    }
    *(void *)uint64_t v16 = *(void *)v12;
    uint64_t v46 = *(void *)(v12 + 8);
    *(void *)unint64_t v12 = v22;
    uint64_t v47 = *v23;
    *uint64_t v23 = v46;
    *(void *)(v12 + 8) = v47;
    if (*(_DWORD *)v10 < v22)
    {
      *(void *)unint64_t v12 = *v10;
      *unint64_t v10 = v22;
      uint64_t v23 = (uint64_t *)(v12 + 8);
LABEL_32:
      unint64_t v31 = a2 - 1;
LABEL_57:
      uint64_t v82 = *v23;
      *uint64_t v23 = *v31;
      *unint64_t v31 = v82;
    }
LABEL_58:
    --a3;
    if (a4)
    {
      uint64_t v83 = *(void *)v12;
LABEL_61:
      uint64_t v84 = *(void *)(v12 + 8);
      unint64_t v85 = v12;
      do
      {
        unint64_t v86 = v85;
        unsigned int v87 = *(_DWORD *)(v85 + 16);
        v85 += 16;
      }
      while (v87 < v83);
      unsigned int v88 = a2;
      if (v86 == v12)
      {
        unsigned int v88 = a2;
        do
        {
          if (v85 >= (unint64_t)v88) {
            break;
          }
          unsigned int v90 = *((_DWORD *)v88 - 4);
          v88 -= 2;
        }
        while (v90 >= v83);
      }
      else
      {
        do
        {
          unsigned int v89 = *((_DWORD *)v88 - 4);
          v88 -= 2;
        }
        while (v89 >= v83);
      }
      unint64_t v12 = v85;
      if (v85 < (unint64_t)v88)
      {
        unint64_t v91 = v88;
        do
        {
          uint64_t v92 = *(void *)v12;
          *(void *)unint64_t v12 = *v91;
          *unint64_t v91 = v92;
          uint64_t v93 = *(void *)(v12 + 8);
          *(void *)(v12 + 8) = v91[1];
          v91[1] = v93;
          do
          {
            unsigned int v94 = *(_DWORD *)(v12 + 16);
            v12 += 16;
          }
          while (v94 < v83);
          do
          {
            unsigned int v95 = *((_DWORD *)v91 - 4);
            v91 -= 2;
          }
          while (v95 >= v83);
        }
        while (v12 < (unint64_t)v91);
      }
      if (v12 - 16 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v12 - 16);
        *(void *)(v9 + 8) = *(void *)(v12 - 8);
      }
      *(void *)(v12 - 16) = v83;
      *(void *)(v12 - 8) = v84;
      if (v85 < (unint64_t)v88) {
        goto LABEL_80;
      }
      BOOL v96 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(v9, (void *)(v12 - 16));
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(v12, a2);
      if (result)
      {
        a2 = (void *)(v12 - 16);
        if (v96) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v96)
      {
LABEL_80:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *,false>(v9, v12 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v83 = *(void *)v12;
      if (*(_DWORD *)(v12 - 16) < *(_DWORD *)v12) {
        goto LABEL_61;
      }
      if (*(_DWORD *)v10 > v83)
      {
        do
        {
          unsigned int v97 = *(_DWORD *)(v12 + 16);
          v12 += 16;
        }
        while (v97 <= v83);
      }
      else
      {
        unint64_t v98 = v12 + 16;
        do
        {
          unint64_t v12 = v98;
          if (v98 >= (unint64_t)a2) {
            break;
          }
          v98 += 16;
        }
        while (*(_DWORD *)v12 <= v83);
      }
      uint64_t v99 = a2;
      if (v12 < (unint64_t)a2)
      {
        uint64_t v99 = a2;
        do
        {
          unsigned int v100 = *((_DWORD *)v99 - 4);
          v99 -= 2;
        }
        while (v100 > v83);
      }
      uint64_t v101 = *(void *)(v9 + 8);
      while (v12 < (unint64_t)v99)
      {
        uint64_t v102 = *(void *)v12;
        *(void *)unint64_t v12 = *v99;
        uint64_t *v99 = v102;
        uint64_t v103 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = v99[1];
        v99[1] = v103;
        do
        {
          unsigned int v104 = *(_DWORD *)(v12 + 16);
          v12 += 16;
        }
        while (v104 <= v83);
        do
        {
          unsigned int v105 = *((_DWORD *)v99 - 4);
          v99 -= 2;
        }
        while (v105 > v83);
      }
      BOOL v4 = v12 - 16 >= v9;
      BOOL v5 = v12 - 16 == v9;
      if (v12 - 16 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v12 - 16);
        *(void *)(v9 + 8) = *(void *)(v12 - 8);
      }
      a4 = 0;
      *(void *)(v12 - 16) = v83;
      *(void *)(v12 - 8) = v101;
    }
  }
  uint64_t v122 = (void *)(v12 + 16);
  BOOL v124 = (void *)v12 == a2 || v122 == a2;
  if (a4)
  {
    if (!v124)
    {
      uint64_t v125 = 0;
      unint64_t v126 = v12;
      do
      {
        unint64_t v128 = v122;
        if (*(_DWORD *)(v126 + 16) < *(_DWORD *)v126)
        {
          uint64_t v129 = *v122;
          uint64_t v130 = *(void *)(v126 + 24);
          uint64_t v131 = v125;
          do
          {
            uint64_t v132 = v12 + v131;
            uint64_t v133 = *(void *)(v12 + v131 + 8);
            *(void *)(v132 + 16) = *(void *)(v12 + v131);
            *(void *)(v132 + 24) = v133;
            if (!v131)
            {
              uint64_t v127 = (void *)v12;
              goto LABEL_126;
            }
            v131 -= 16;
          }
          while (*(_DWORD *)(v132 - 16) > v129);
          uint64_t v127 = (void *)(v12 + v131 + 16);
LABEL_126:
          *uint64_t v127 = v129;
          v127[1] = v130;
        }
        uint64_t v122 = v128 + 2;
        v125 += 16;
        unint64_t v126 = (unint64_t)v128;
      }
      while (v128 + 2 != a2);
    }
  }
  else if (!v124)
  {
    unsigned int v150 = (void *)(v12 + 8);
    do
    {
      uint64_t v151 = v122;
      if (*(_DWORD *)(v9 + 16) < *(_DWORD *)v9)
      {
        uint64_t v152 = *v122;
        uint64_t v153 = *(void *)(v9 + 24);
        unsigned int v154 = v150;
        do
        {
          uint64_t v155 = *v154;
          v154[1] = *(v154 - 1);
          v154[2] = v155;
          unsigned int v156 = *((_DWORD *)v154 - 6);
          v154 -= 2;
        }
        while (v156 > v152);
        v154[1] = v152;
        v154[2] = v153;
      }
      uint64_t v122 = v151 + 2;
      v150 += 2;
      unint64_t v9 = (unint64_t)v151;
    }
    while (v151 + 2 != a2);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<altitude::LabelDataPrivate *,std::shared_ptr<altitude::LabelDataPrivate>::__shared_ptr_default_delete<altitude::LabelDataPrivate,altitude::LabelDataPrivate>,std::allocator<altitude::LabelDataPrivate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::LabelDataPrivate *,std::shared_ptr<altitude::LabelDataPrivate>::__shared_ptr_default_delete<altitude::LabelDataPrivate,altitude::LabelDataPrivate>,std::allocator<altitude::LabelDataPrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::LabelDataPrivate::~LabelDataPrivate(altitude::LabelDataPrivate *this)
{
  altitude::LabelDataPrivate::~LabelDataPrivate(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  *(void *)this = &unk_1EF5695C8;
  unint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    BOOL v5 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v5 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  __n128 v6 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    __n128 v7 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    __n128 v7 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v9) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_23:
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v11) {
      return;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

uint64_t altitude::LabelDataPrivate::altitudeTileKey(altitude::LabelDataPrivate *this)
{
  return *((void *)this + 24);
}

unint64_t altitude::LabelDataPrivate::geoTileKey(altitude::LabelDataPrivate *this)
{
  return *((unsigned int *)this + 48) | ((unint64_t)((1 << *((_DWORD *)this + 50))
                                                                        + ~*((_DWORD *)this + 49)) << 32);
}

uint64_t altitude::LabelDataPrivate::renderStamp(altitude::LabelDataPrivate *this)
{
  return *((void *)this + 23);
}

uint64_t altitude::LabelDataPrivate::anchorTile(altitude::LabelDataPrivate *this)
{
  return *((void *)this + 15);
}

uint64_t (***altitude::LabelDataPrivate::regionalResourceData(altitude::LabelDataPrivate *this))(void)
{
  uint64_t result = (uint64_t (***)(void))*((void *)this + 9);
  if (result) {
    return (uint64_t (***)(void))(**result)(result);
  }
  return result;
}

void *altitude::LabelDataPrivate::trafficIncidents@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  BOOL v4 = (unsigned char *)this[20];
  uint64_t v3 = (unsigned char *)this[21];
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    __n128 v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    __n128 v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    this = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

void *altitude::LabelDataPrivate::trafficPieces@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  BOOL v4 = (unsigned char *)this[17];
  uint64_t v3 = (unsigned char *)this[18];
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    __n128 v6 = (char *)operator new(v5);
    *a2 = v6;
    __n128 v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    this = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

uint64_t altitude::LabelDataPrivate::skeletonTile@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 112);
  *a2 = *(void *)(this + 104);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t altitude::LabelDataPrivate::trafficTile@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 96);
  *a2 = *(void *)(this + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *altitude::LabelDataPrivate::labelTile@<X0>(void *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = result[1];
      if (!v3) {
        goto LABEL_15;
      }
      uint64_t v5 = *(void *)(v3 + 48);
      uint64_t v4 = *(void *)(v3 + 56);
      *a3 = v5;
      a3[1] = v4;
      if (v4) {
        goto LABEL_13;
      }
      break;
    case 2:
      uint64_t v6 = result[3];
      if (!v6) {
        goto LABEL_15;
      }
      uint64_t v7 = *(void *)(v6 + 64);
      uint64_t v4 = *(void *)(v6 + 72);
      *a3 = v7;
      a3[1] = v4;
      if (v4) {
        goto LABEL_13;
      }
      break;
    case 4:
      uint64_t v8 = result[5];
      if (!v8) {
        goto LABEL_15;
      }
      uint64_t v9 = *(void *)(v8 + 80);
      uint64_t v4 = *(void *)(v8 + 88);
      *a3 = v9;
      a3[1] = v4;
      if (v4) {
        goto LABEL_13;
      }
      break;
    case 8:
      uint64_t v10 = result[7];
      if (!v10) {
        goto LABEL_15;
      }
      uint64_t v11 = *(void *)(v10 + 96);
      uint64_t v4 = *(void *)(v10 + 104);
      *a3 = v11;
      a3[1] = v4;
      if (v4) {
LABEL_13:
      }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      break;
    default:
LABEL_15:
      *a3 = 0;
      a3[1] = 0;
      break;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(uint64_t *result, int *a2, int *a3, void *a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v5 < v4)
    {
      uint64_t v8 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v8;
      uint64_t v10 = (uint64_t *)(a2 + 2);
      uint64_t v9 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v9;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v11 = *result;
        void *result = *(void *)a2;
        uint64_t v6 = result + 1;
        *(void *)a2 = v11;
LABEL_10:
        uint64_t v14 = *v6;
        *uint64_t v6 = *v10;
        *uint64_t v10 = v14;
      }
    }
  }
  else
  {
    uint64_t v6 = result + 1;
    uint64_t v7 = *result;
    if (v5 < v4)
    {
      void *result = *(void *)a3;
LABEL_9:
      *(void *)a3 = v7;
      uint64_t v10 = (uint64_t *)(a3 + 2);
      goto LABEL_10;
    }
    void *result = *(void *)a2;
    uint64_t v6 = (uint64_t *)(a2 + 2);
    uint64_t v12 = *((void *)a2 + 1);
    *(void *)a2 = v7;
    uint64_t v13 = result[1];
    result[1] = v12;
    *((void *)a2 + 1) = v13;
    if (*a3 < v7)
    {
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      goto LABEL_9;
    }
  }
  if (*(_DWORD *)a4 < *a3)
  {
    uint64_t v15 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v15;
    uint64_t v16 = *((void *)a3 + 1);
    *((void *)a3 + 1) = a4[1];
    a4[1] = v16;
    if (*a3 < *a2)
    {
      uint64_t v17 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v17;
      uint64_t v18 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v18;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v19 = *result;
        void *result = *(void *)a2;
        *(void *)a2 = v19;
        uint64_t v20 = result[1];
        result[1] = *((void *)a2 + 1);
        *((void *)a2 + 1) = v20;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((_DWORD *)a2 - 4) < *(_DWORD *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      unsigned int v9 = *((_DWORD *)a2 - 4);
      if (v8 < *(_DWORD *)a1)
      {
        uint64_t v10 = (uint64_t *)(a1 + 8);
        uint64_t v11 = *(void *)a1;
        if (v9 >= v8)
        {
          uint64_t v10 = (uint64_t *)(a1 + 24);
          uint64_t v39 = *(void *)(a1 + 8);
          uint64_t v38 = *(void *)(a1 + 16);
          *(void *)(a1 + 8) = *(void *)(a1 + 24);
          *(void *)(a1 + 16) = v11;
          *(void *)a1 = v38;
          *(void *)(a1 + 24) = v39;
          if (*((_DWORD *)a2 - 4) >= v11) {
            return result;
          }
          *(void *)(a1 + 16) = *(a2 - 2);
        }
        else
        {
          *(void *)a1 = *(a2 - 2);
        }
        *(a2 - 2) = v11;
        uint64_t v30 = a2 - 1;
        goto LABEL_25;
      }
      if (v9 < v8)
      {
        uint64_t v28 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(a2 - 2);
        *(a2 - 2) = v28;
        uint64_t v30 = (uint64_t *)(a1 + 24);
        uint64_t v29 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(a2 - 1);
        *(a2 - 1) = v29;
        if (*(_DWORD *)(a1 + 16) < *(_DWORD *)a1)
        {
          uint64_t v31 = *(void *)a1;
          *(void *)a1 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v31;
          uint64_t v10 = (uint64_t *)(a1 + 8);
LABEL_25:
          uint64_t v40 = *v10;
          *uint64_t v10 = *v30;
          uint64_t *v30 = v40;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (void *)(a1 + 48));
      if (*((_DWORD *)a2 - 4) < *(_DWORD *)(a1 + 48))
      {
        uint64_t v18 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = *(a2 - 2);
        *(a2 - 2) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = *(a2 - 1);
        *(a2 - 1) = v19;
        if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 32))
        {
          uint64_t v20 = *(void *)(a1 + 32);
          uint64_t v21 = *(void *)(a1 + 40);
          uint64_t v22 = *(void *)(a1 + 48);
          uint64_t v23 = *(void *)(a1 + 56);
          *(void *)(a1 + 32) = v22;
          *(void *)(a1 + 40) = v23;
          *(void *)(a1 + 48) = v20;
          *(void *)(a1 + 56) = v21;
          if (*(_DWORD *)(a1 + 16) > v22)
          {
            uint64_t v24 = *(void *)(a1 + 16);
            uint64_t v25 = *(void *)(a1 + 24);
            *(void *)(a1 + 16) = v22;
            *(void *)(a1 + 24) = v23;
            *(void *)(a1 + 32) = v24;
            *(void *)(a1 + 40) = v25;
            if (*(_DWORD *)a1 > v22)
            {
              uint64_t v26 = *(void *)a1;
              uint64_t v27 = *(void *)(a1 + 8);
              *(void *)a1 = v22;
              *(void *)(a1 + 8) = v23;
              *(void *)(a1 + 16) = v26;
              *(void *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = (_DWORD *)(a1 + 32);
      unsigned int v13 = *(_DWORD *)(a1 + 32);
      unsigned int v14 = *(_DWORD *)(a1 + 16);
      unsigned int v15 = *(_DWORD *)a1;
      if (v14 < *(_DWORD *)a1)
      {
        uint64_t v16 = (uint64_t *)(a1 + 8);
        uint64_t v17 = *(void *)a1;
        if (v13 >= v14)
        {
          uint64_t v41 = *(void *)(a1 + 8);
          uint64_t v16 = (uint64_t *)(a1 + 24);
          uint64_t v42 = *(void *)(a1 + 24);
          *(void *)a1 = *(void *)(a1 + 16);
          *(void *)(a1 + 8) = v42;
          *(void *)(a1 + 16) = v17;
          *(void *)(a1 + 24) = v41;
          if (v13 >= v17) {
            goto LABEL_30;
          }
          *(void *)(a1 + 16) = *(void *)(a1 + 32);
        }
        else
        {
          *(void *)a1 = *(void *)(a1 + 32);
        }
        *(void *)(a1 + 32) = v17;
        uint64_t v32 = (uint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v13 < v14)
      {
        uint64_t v32 = (uint64_t *)(a1 + 24);
        uint64_t v33 = *(void *)(a1 + 24);
        uint64_t v34 = *(void *)(a1 + 16);
        uint64_t v35 = *(void *)(a1 + 32);
        uint64_t v36 = *(void *)(a1 + 40);
        *(void *)(a1 + 16) = v35;
        *(void *)(a1 + 24) = v36;
        *(void *)(a1 + 32) = v34;
        *(void *)(a1 + 40) = v33;
        if (v15 > v35)
        {
          uint64_t v37 = *(void *)a1;
          *(void *)a1 = v35;
          *(void *)(a1 + 16) = v37;
          uint64_t v16 = (uint64_t *)(a1 + 8);
LABEL_29:
          uint64_t v43 = *v16;
          *uint64_t v16 = *v32;
          *uint64_t v32 = v43;
        }
      }
LABEL_30:
      uint64_t v44 = (void *)(a1 + 48);
      if ((void *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v45 = 0;
      int v46 = 0;
      while (1)
      {
        if (*(_DWORD *)v44 < *v12)
        {
          uint64_t v48 = *v44;
          uint64_t v49 = v44[1];
          uint64_t v50 = v45;
          do
          {
            uint64_t v51 = a1 + v50;
            uint64_t v52 = *(void *)(a1 + v50 + 40);
            *(void *)(v51 + 48) = *(void *)(a1 + v50 + 32);
            *(void *)(v51 + 56) = v52;
            if (v50 == -32)
            {
              uint64_t v47 = (void *)a1;
              goto LABEL_33;
            }
            v50 -= 16;
          }
          while (*(_DWORD *)(v51 + 16) > v48);
          uint64_t v47 = (void *)(a1 + v50 + 48);
LABEL_33:
          *uint64_t v47 = v48;
          v47[1] = v49;
          if (++v46 == 8) {
            return v44 + 2 == a2;
          }
        }
        uint64_t v12 = v44;
        v45 += 16;
        v44 += 2;
        if (v44 == a2) {
          return 1;
        }
      }
  }
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *result;
  unsigned int v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 >= v4)
    {
      unsigned int v4 = *a3;
    }
    else
    {
      *a2 = v6;
      *a3 = v4;
      uint64_t v8 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v8;
      unsigned int v9 = *result;
      if (*a2 < *result)
      {
        void *result = *a2;
        *a2 = v9;
        uint64_t v10 = *((void *)result + 1);
        *((void *)result + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v10;
        unsigned int v4 = *a3;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      void *result = v6;
      *a3 = v5;
      uint64_t v7 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v7;
LABEL_9:
      unsigned int v4 = v5;
      goto LABEL_11;
    }
    void *result = v4;
    *a2 = v5;
    uint64_t v11 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v11;
    unsigned int v4 = *a3;
    if (*a3 < v5)
    {
      *a2 = v4;
      *a3 = v5;
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v11;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v4)
  {
    *a3 = *a4;
    *a4 = v4;
    uint64_t v12 = *((void *)a3 + 1);
    *((void *)a3 + 1) = *((void *)a4 + 1);
    *((void *)a4 + 1) = v12;
    unsigned int v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v14;
      unsigned int v15 = *result;
      if (*a2 < *result)
      {
        void *result = *a2;
        *a2 = v15;
        uint64_t v16 = *((void *)result + 1);
        *((void *)result + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        goto LABEL_7;
      }
      return result;
    case 3:
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      unsigned int v9 = *(_DWORD *)a1;
      unsigned int v10 = *(_DWORD *)(a2 - 16);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 16) = v10;
          *(_DWORD *)(a2 - 16) = v8;
          uint64_t v28 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v28;
          unsigned int v29 = *(_DWORD *)(a1 + 16);
          unsigned int v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 16) = v30;
            uint64_t v31 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 16) = v9;
        uint64_t v35 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v35;
        unsigned int v36 = *(_DWORD *)(a2 - 16);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 16) = v36;
          *(_DWORD *)(a2 - 16) = v9;
          *(void *)(a1 + 24) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(_DWORD *)(a2 - 16) = v9;
LABEL_7:
        uint64_t v11 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a2 - 16));
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 48));
      unsigned int v17 = *(_DWORD *)(a2 - 16);
      unsigned int v18 = *(_DWORD *)(a1 + 48);
      if (v17 < v18)
      {
        *(_DWORD *)(a1 + 48) = v17;
        *(_DWORD *)(a2 - 16) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v19;
        unsigned int v20 = *(_DWORD *)(a1 + 48);
        unsigned int v21 = *(_DWORD *)(a1 + 32);
        if (v20 < v21)
        {
          *(_DWORD *)(a1 + 32) = v20;
          *(_DWORD *)(a1 + 48) = v21;
          uint64_t v22 = *(void *)(a1 + 40);
          uint64_t v23 = *(void *)(a1 + 56);
          *(void *)(a1 + 40) = v23;
          *(void *)(a1 + 56) = v22;
          unsigned int v24 = *(_DWORD *)(a1 + 16);
          if (v20 < v24)
          {
            *(_DWORD *)(a1 + 16) = v20;
            *(_DWORD *)(a1 + 32) = v24;
            uint64_t v25 = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = v23;
            *(void *)(a1 + 40) = v25;
            unsigned int v26 = *(_DWORD *)a1;
            if (v20 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v20;
              *(_DWORD *)(a1 + 16) = v26;
              uint64_t v27 = *(void *)(a1 + 8);
              *(void *)(a1 + 8) = v23;
              *(void *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = (unsigned int *)(a1 + 32);
      unsigned int v13 = *(_DWORD *)(a1 + 32);
      unsigned int v14 = *(_DWORD *)(a1 + 16);
      unsigned int v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v14;
          uint64_t v32 = *(void *)(a1 + 24);
          uint64_t v33 = *(void *)(a1 + 40);
          *(void *)(a1 + 24) = v33;
          *(void *)(a1 + 40) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 16) = v15;
            uint64_t v34 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v33;
            *(void *)(a1 + 24) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 16) = v15;
        uint64_t v37 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v15;
          *(void *)(a1 + 24) = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 32) = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v16;
      }
      uint64_t v38 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      break;
  }
  while (1)
  {
    unsigned int v42 = *(_DWORD *)v38;
    unsigned int v43 = *v12;
    if (*(_DWORD *)v38 < *v12)
    {
      uint64_t v44 = *(void *)(v38 + 8);
      uint64_t v45 = v39;
      do
      {
        uint64_t v46 = a1 + v45;
        *(_DWORD *)(v46 + 48) = v43;
        *(void *)(v46 + 56) = *(void *)(a1 + v45 + 40);
        if (v45 == -32)
        {
          uint64_t v41 = a1;
          goto LABEL_30;
        }
        unsigned int v43 = *(_DWORD *)(v46 + 16);
        v45 -= 16;
      }
      while (v42 < v43);
      uint64_t v41 = a1 + v45 + 48;
LABEL_30:
      *(_DWORD *)uint64_t v41 = v42;
      *(void *)(v41 + 8) = v44;
      if (++v40 == 8) {
        return v38 + 16 == a2;
      }
    }
    uint64_t v12 = (unsigned int *)v38;
    v39 += 16;
    v38 += 16;
    if (v38 == a2) {
      return 1;
    }
  }
}

uint64_t altitude::CompleteGlobeTileSetLoader::setLabelDataRequestManager(uint64_t result, uint64_t a2)
{
  *(void *)(result + 208) = a2;
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setSkeletoRequestManager(uint64_t result, uint64_t a2)
{
  *(void *)(result + 200) = a2;
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setRoadRequestManager(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setOverlayRequestManager(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

void altitude::CompleteGlobeTileSetLoader::clear(altitude::CompleteGlobeTileSetLoader *this)
{
  uint64_t v2 = (void *)*((void *)this + 31);
  v2[6] = v2[5];
  v2[9] = v2[8];
  v2[12] = v2[11];
  uint64_t v3 = *((void *)this + 80);
  for (uint64_t i = *((void *)this + 79); v3 != i; v3 -= 24)
  {
    unsigned int v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((void *)this + 80) = i;
}

BOOL altitude::CompleteGlobeTileSetLoader::hasRequestsInProgress(altitude::CompleteGlobeTileSetLoader *this)
{
  if (!*((unsigned char *)this + 80)) {
    return 0;
  }
  int v1 = *((_DWORD *)this + 152);
  if (!*((unsigned char *)this + 620)) {
    return v1 - *((_DWORD *)this + 156) < 3;
  }
  *((_DWORD *)this + 156) = v1;
  return 1;
}

void altitude::CompleteGlobeTileSetLoader::preRenderUpdate(altitude::CompleteGlobeTileSetLoader *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 79);
  uint64_t v3 = (uint64_t *)*((void *)this + 80);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *((void *)this + 31);
      uint64_t v5 = *v2;
      unsigned int v6 = *(void **)(v4 + 40);
      unsigned int v7 = *(void **)(v4 + 48);
      if (v6 != v7)
      {
        while (*v6 != v5)
        {
          if (++v6 == v7)
          {
            unsigned int v6 = v7;
            break;
          }
        }
      }
      if (v6 != v7)
      {
        unsigned int v8 = *(void **)(v5 + 344);
        if (!v8) {
          operator new();
        }
        unsigned int v9 = (std::__shared_weak_count *)v2[2];
        v12[0] = v2[1];
        v12[1] = (uint64_t)v9;
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          altitude::TrafficTileComponent::setTrafficTile(v8, v12);
          if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        else
        {
          altitude::TrafficTileComponent::setTrafficTile(v8, v12);
        }
      }
      v2 += 3;
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)*((void *)this + 80);
    unsigned int v10 = (uint64_t *)*((void *)this + 79);
    if (v2 != v10)
    {
      do
      {
        uint64_t v11 = (std::__shared_weak_count *)*(v2 - 1);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v2 -= 3;
      }
      while (v2 != v10);
      uint64_t v2 = v10;
    }
  }
  *((void *)this + 80) = v2;
}

void altitude::CompleteGlobeTileSetLoader::update(altitude::CompleteGlobeTileSetLoader *this, unsigned int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 83);
  for (uint64_t i = *((void *)this + 82); v4 != i; v4 -= 16)
  {
    unsigned int v6 = *(std::__shared_weak_count **)(v4 - 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((void *)this + 83) = i;
  uint64_t v7 = *((void *)this + 86);
  for (uint64_t j = *((void *)this + 85); v7 != j; v7 -= 16)
  {
    unsigned int v9 = *(std::__shared_weak_count **)(v7 - 8);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *((void *)this + 86) = j;
  if (*((void *)this + 65))
  {
    unsigned int v10 = (void *)*((void *)this + 64);
    if (v10)
    {
      do
      {
        uint64_t v11 = (void *)*v10;
        operator delete(v10);
        unsigned int v10 = v11;
      }
      while (v11);
    }
    *((void *)this + 64) = 0;
    uint64_t v12 = *((void *)this + 63);
    if (v12)
    {
      for (uint64_t k = 0; k != v12; ++k)
        *(void *)(*((void *)this + 62) + 8 * k) = 0;
    }
    *((void *)this + 65) = 0;
  }
  if (*(unsigned char *)(*((void *)this + 27) + 104))
  {
    uint64_t v14 = *(void *)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 40) + 48);
    *(_DWORD *)(v14 + 72) = a2;
    uint64_t v15 = *(void *)(v14 + 152);
    for (uint64_t m = *(void *)(v14 + 160); m != v15; m -= 16)
    {
      unsigned int v17 = *(std::__shared_weak_count **)(m - 8);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(void *)(v14 + 160) = v15;
    uint64_t v18 = *(void *)(v14 + 176);
    for (uint64_t n = *(void *)(v14 + 184); n != v18; n -= 16)
    {
      unsigned int v20 = *(std::__shared_weak_count **)(n - 8);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(void *)(v14 + 184) = v18;
  }
  *((_DWORD *)this + 157) = 0;
  *((unsigned char *)this + 620) = 0;
  *((_DWORD *)this + 152) = a2;
  uint64_t v21 = *((void *)this + 6);
  if (v21
    && (uint64_t v22 = *((void *)this + 14)) != 0
    && *((void *)this + 15) != *((void *)this + 16)
    && *((void *)this + 18)
    && *((void *)this + 19)
    && *((void *)this + 22)
    && *((void *)this + 21)
    && (uint64_t v23 = *((void *)this + 31)) != 0
    && *((void *)this + 29))
  {
    if (*(unsigned char *)(v21 + 204) || !*((unsigned char *)this + 80))
    {
      *(void *)long long buf = 0;
      uint64_t v35 = 0;
      unsigned int v36 = 0;
      uint64_t v37 = 0;
      altitude::CompleteGlobeTileSetLoader::updateTileStamps((uint64_t)this, v23, a2, (unint64_t *)buf);
    }
    else
    {
      if (*((void *)this + 25))
      {
        altitude::SkeletonRequestManager::update(*((altitude::SkeletonRequestManager **)this + 25), a2);
        uint64_t v22 = *((void *)this + 14);
      }
      uint64_t v33 = 0;
      *(void *)long long buf = 0;
      uint64_t v35 = 0;
      unsigned int v36 = 0;
      uint64_t v37 = 0;
      v30[0] = 0;
      long long __p = 0;
      uint64_t v32 = 0;
      (*(void (**)(uint64_t, altitude::CompleteGlobeTileSetLoader *))(*(void *)v22 + 24))(v22, this);
      unsigned int v26 = (void *)*((void *)this + 15);
      uint64_t v27 = (void *)*((void *)this + 16);
      while (v26 != v27)
      {
        uint64_t v28 = (*(uint64_t (**)(void, altitude::CompleteGlobeTileSetLoader *, uint64_t))(*(void *)*v26 + 24))(*v26, this, 0xFFFFFFFFLL);
        uint64_t v29 = v28;
        karo::SizedArray<altitude::View *,4>::push_back((uint64_t *)buf, &v29);
        if (*(_DWORD *)(v28 + 1296)) {
          karo::SizedArray<altitude::View *,4>::push_back(v30, &v29);
        }
        ++v26;
      }
      altitude::CompleteGlobeTileSetLoader::loadRoots(this);
      if (*(void *)(*((void *)this + 31) + 40) != *(void *)(*((void *)this + 31) + 48))
      {
        (*(void (**)(altitude::CompleteGlobeTileSetLoader *))(*(void *)this + 104))(this);
        altitude::CompleteGlobeTileSetLoader::updateTileStamps((uint64_t)this, *((void *)this + 31), a2, (unint64_t *)buf);
      }
      if (__p)
      {
        uint64_t v32 = __p;
        operator delete(__p);
      }
      if (v35)
      {
        unsigned int v36 = v35;
        operator delete(v35);
      }
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v24 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        uint64_t v25 = (void *)*v25;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&buf[4] = v25;
      _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "Missing input node: %s", buf, 0xCu);
    }
  }
}

void altitude::CompleteGlobeTileSetLoader::updateTileStamps(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t *a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *a4;
  if (*a4)
  {
    uint64_t v10 = a1;
    unint64_t v11 = 0;
    unint64_t v57 = (uint64_t **)(a1 + 96);
    uint64_t v12 = a4 + 1;
    uint64_t v13 = a3;
    uint64_t v54 = a1 + 792;
    uint64_t v55 = a1 + 712;
    uint64_t v52 = a1 + 984;
    uint64_t v53 = a1 + 952;
    do
    {
      if (v7 <= 4) {
        uint64_t v14 = &a4[v11 + 1];
      }
      else {
        uint64_t v14 = (unint64_t *)(a4[5] + 8 * v11);
      }
      unint64_t v15 = *v14;
      uint64_t v16 = (char *)v57;
      unsigned int v17 = *v57;
      uint64_t v18 = v57;
      unint64_t v60 = v11;
      if (*v57)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v16 = (char *)v17;
            unint64_t v19 = v17[4];
            if (v15 >= v19) {
              break;
            }
            unsigned int v17 = *(uint64_t **)v16;
            uint64_t v18 = (uint64_t **)v16;
            if (!*(void *)v16) {
              goto LABEL_14;
            }
          }
          if (v19 >= v15) {
            break;
          }
          unsigned int v17 = (uint64_t *)*((void *)v16 + 1);
          if (!v17)
          {
            uint64_t v18 = (uint64_t **)(v16 + 8);
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        unsigned int v20 = v16;
        uint64_t v16 = (char *)operator new(0x60uLL);
        *((void *)v16 + 4) = v15;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *((void *)v16 + 9) = 0;
        *((_OWORD *)v16 + 5) = xmmword_1A28FD0E0;
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v20;
        *uint64_t v18 = (uint64_t *)v16;
        uint64_t v21 = **(void **)(v10 + 88);
        uint64_t v22 = (uint64_t *)v16;
        if (v21)
        {
          *(void *)(v10 + 88) = v21;
          uint64_t v22 = *v18;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 96), v22);
        ++*(void *)(v10 + 104);
      }
      *((void *)v16 + 9) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *((_OWORD *)v16 + 5) = xmmword_1A28FD0E0;
      uint64_t v23 = *(uint64_t **)(a2 + 40);
      unsigned int v24 = *(uint64_t **)(a2 + 48);
      if (v23 == v24)
      {
        unint64_t v25 = v60;
        if (*(unsigned char *)(v15 + 1292)) {
          goto LABEL_81;
        }
        goto LABEL_3;
      }
      unsigned int v59 = 0;
      do
      {
        uint64_t v28 = *v23;
        if (*a4 <= 4) {
          uint64_t v29 = v12;
        }
        else {
          uint64_t v29 = (void *)a4[5];
        }
        if (v15 == *v29)
        {
          *(_DWORD *)(v28 + 384) = a3;
          uint64_t v30 = v28;
          do
          {
            if (*(void *)(v30 + 376) == v13) {
              break;
            }
            *(void *)(v30 + 376) = v13;
            uint64_t v30 = *(void *)(v30 + 296);
          }
          while (v30);
        }
        if (*(unsigned char *)(v15 + 1292))
        {
          unint64_t v31 = *(void *)(v28 + 160);
          if (v31)
          {
            if (v31 < 3)
            {
              if (*(void *)(v28 + 184) == v15)
              {
                unsigned int v35 = 0;
              }
              else
              {
                if (v31 == 1 || *(void *)(v28 + 232) != v15) {
                  goto LABEL_24;
                }
                unsigned int v35 = 1;
              }
              uint64_t v36 = v28 + 48 * v35 + 168;
            }
            else
            {
              uint64_t v32 = 0;
              uint64_t v33 = *(void *)(v28 + 264);
              uint64_t v34 = (void *)(v33 + 16);
              while (*v34 != v15)
              {
                ++v32;
                v34 += 6;
                if (v31 == v32) {
                  goto LABEL_24;
                }
              }
              uint64_t v36 = v33 + 48 * v32;
            }
            if (*(_DWORD *)(v36 + 36) >= a3 && !*(unsigned char *)(v36 + 32))
            {
              ++*((_DWORD *)v16 + 11);
              uint64_t v37 = *(void *)(v28 + 328);
              if (!v37) {
                operator new();
              }
              if (*(unsigned char *)(v37 + 296)) {
                ++*((_DWORD *)v16 + 16);
              }
              if (altitude::Tile::hasLoadedData((altitude::Tile *)v28))
              {
                ++*((_DWORD *)v16 + 12);
                uint64_t v38 = *(void *)(v28 + 328);
                if (!v38) {
LABEL_62:
                }
                  operator new();
              }
              else
              {
                uint64_t v38 = *(void *)(v28 + 328);
                if (!v38) {
                  goto LABEL_62;
                }
              }
              if (*(void *)(v38 + 136)) {
                ++*((_DWORD *)v16 + 13);
              }
              unint64_t v39 = *(void *)(v28 + 160);
              if (v39)
              {
                if (v39 < 3)
                {
                  if (*(void *)(v28 + 184) == v15)
                  {
                    unsigned int v43 = 0;
                  }
                  else
                  {
                    if (v39 == 1 || *(void *)(v28 + 232) != v15) {
                      goto LABEL_24;
                    }
                    unsigned int v43 = 1;
                  }
                  uint64_t v44 = v28 + 48 * v43 + 168;
                }
                else
                {
                  uint64_t v40 = 0;
                  uint64_t v41 = *(void *)(v28 + 264);
                  unsigned int v42 = (void *)(v41 + 16);
                  while (*v42 != v15)
                  {
                    ++v40;
                    v42 += 6;
                    if (v39 == v40) {
                      goto LABEL_24;
                    }
                  }
                  uint64_t v44 = v41 + 48 * v40;
                }
                if (*(_DWORD *)(v44 + 28) >= a3)
                {
                  float v45 = *(float *)(v44 + 24);
                  if (v45 >= 1.0 || *(void *)(v28 + 304) == *(void *)(v28 + 312))
                  {
                    if (altitude::Tile::hasLoadedData((altitude::Tile *)v28))
                    {
                      ++*((_DWORD *)v16 + 15);
                      uint64_t v46 = *(void *)(v28 + 328);
                      if (!v46) {
                        operator new();
                      }
                      if (*(unsigned char *)(v46 + 296)) {
                        ++*((_DWORD *)v16 + 17);
                      }
                    }
                  }
                  else
                  {
                    ++*((_DWORD *)v16 + 14);
                  }
                  double v26 = *((double *)v16 + 9);
                  double v27 = fmax(*((double *)v16 + 11), v45);
                  *((double *)v16 + 10) = fmin(*((double *)v16 + 10), v45);
                  *((double *)v16 + 11) = v27;
                  *((double *)v16 + 9) = v26 + v45;
                  ++v59;
                }
              }
            }
          }
        }
LABEL_24:
        ++v23;
      }
      while (v23 != v24);
      uint64_t v10 = a1;
      unint64_t v25 = v60;
      if (*(unsigned char *)(v15 + 1292))
      {
        if (v59) {
          *((double *)v16 + 9) = *((double *)v16 + 9) / (double)v59;
        }
LABEL_81:
        if (*(unsigned char *)(v15 + 1290))
        {
          LODWORD(v5) = *((_DWORD *)v16 + 11);
          LODWORD(v6) = *((_DWORD *)v16 + 12);
          LODWORD(v4) = *((_DWORD *)v16 + 15);
          if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
            dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
          }
          double v6 = 1.0 - (double)*(unint64_t *)&v6 / (double)*(unint64_t *)&v5;
          double v5 = (double)*(unint64_t *)&v4 / (double)*(unint64_t *)&v5;
          double v4 = v6 * 100.0;
          atomic_store((unint64_t)(v6 * 100.0), (unint64_t *)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 176));
          atomic_store((unint64_t)(100.0 - v5 * 100.0), (unint64_t *)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 184));
          uint64_t v47 = *(void *)(v10 + 976);
          if (!v47)
          {
            uint64_t v64 = 0;
            unsigned int v66 = 0;
            goto LABEL_93;
          }
          if (v47 == v53)
          {
            uint64_t v64 = v63;
            (*(void (**)(uint64_t, void *))(*(void *)v53 + 24))(v53, v63);
            uint64_t v48 = v64;
            if (v64) {
              goto LABEL_87;
            }
          }
          else
          {
            uint64_t v48 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v47 + 16))(v47);
            uint64_t v64 = v48;
            if (v48)
            {
LABEL_87:
              if (v48 == v63)
              {
                unsigned int v66 = &v65;
                (*(void (**)(void *, long long *))(v63[0] + 24))(v63, &v65);
              }
              else
              {
                unsigned int v66 = (long long *)(*(uint64_t (**)(void *))(*v48 + 16))(v48);
              }
LABEL_93:
              gdc::Histogram::addSample(v55, (uint64_t)&v65, v6);
              if (v66 == &v65)
              {
                (*(void (**)(long long *))(v65 + 32))(&v65);
              }
              else if (v66)
              {
                (*(void (**)(void))(*(void *)v66 + 40))();
              }
              if (v64 == v63)
              {
                (*(void (**)(void *))(v63[0] + 32))(v63);
                uint64_t v49 = *(void *)(v10 + 1008);
                if (v49) {
                  goto LABEL_101;
                }
              }
              else
              {
                if (v64) {
                  (*(void (**)(void))(*v64 + 40))();
                }
                uint64_t v49 = *(void *)(v10 + 1008);
                if (v49)
                {
LABEL_101:
                  if (v49 == v52)
                  {
                    uint64_t v62 = v61;
                    (*(void (**)(uint64_t, void *))(*(void *)v52 + 24))(v52, v61);
                    uint64_t v50 = v62;
                    if (v62) {
                      goto LABEL_103;
                    }
                  }
                  else
                  {
                    uint64_t v50 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 16))(v49);
                    uint64_t v62 = v50;
                    if (v50)
                    {
LABEL_103:
                      if (v50 == v61)
                      {
                        unsigned int v66 = &v65;
                        (*(void (**)(void *, long long *))(v61[0] + 24))(v61, &v65);
                      }
                      else
                      {
                        unsigned int v66 = (long long *)(*(uint64_t (**)(void *))(*v50 + 16))(v50);
                      }
LABEL_110:
                      gdc::Histogram::addSample(v54, (uint64_t)&v65, v5);
                      if (v66 == &v65)
                      {
                        (*(void (**)(long long *))(v65 + 32))(&v65);
                      }
                      else if (v66)
                      {
                        (*(void (**)(void))(*(void *)v66 + 40))();
                      }
                      if (v62 == v61)
                      {
                        (*(void (**)(void *))(v61[0] + 32))(v61);
                        uint64_t v51 = *(void *)(v10 + 704);
                        if (!v51) {
                          goto LABEL_3;
                        }
                      }
                      else
                      {
                        if (v62) {
                          (*(void (**)(void))(*v62 + 40))();
                        }
                        uint64_t v51 = *(void *)(v10 + 704);
                        if (!v51) {
                          goto LABEL_3;
                        }
                      }
                      gdc::Statistics::addHistogramValue(v51, "FractionLoadedTime", 0x3B440AB400000012uLL, v5, 0.1);
                      gdc::Statistics::addSampleValue(*(void *)(v10 + 704), "TileSetGridFraction (%)", 0x453D210500000017uLL, v6 * 100.0);
                      goto LABEL_3;
                    }
                  }
                  unsigned int v66 = 0;
                  goto LABEL_110;
                }
              }
              uint64_t v62 = 0;
              unsigned int v66 = 0;
              goto LABEL_110;
            }
          }
          unsigned int v66 = 0;
          goto LABEL_93;
        }
      }
LABEL_3:
      unint64_t v11 = v25 + 1;
      unint64_t v7 = *a4;
    }
    while (v11 < *a4);
  }
}

void altitude::CompleteGlobeTileSetLoader::loadRoots(altitude::CompleteGlobeTileSetLoader *this)
{
  char v110 = 0;
  unsigned int v2 = 0;
  int v3 = *(unsigned __int8 *)(*((void *)this + 4) + 69);
  int v109 = v3;
  while (1)
  {
    unint64_t v4 = v2;
    uint64_t v5 = *(void *)(*((void *)this + 6) + 96);
    if (v4 >= (*(void *)(*((void *)this + 6) + 104) - v5) >> 3) {
      break;
    }
    uint64_t v6 = *(void *)(v5 + 8 * v4);
    if (*(unsigned char *)(v6 + 165)) {
      goto LABEL_3;
    }
    long long v111 = *(_OWORD *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 32);
    if (!v7)
    {
      long long v114 = 0u;
      long long v115 = 0u;
      long long v113 = 0u;
      uint64_t v116 = 0x3FF0000000000000;
      altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)&v111, (uint64_t)&v113, (uint64_t)v112, 0.0, 10000.0);
      operator new();
    }
    int isPoleTile = altitude::Tile::isPoleTile((char **)(*(void *)(v7 + 288) + 40));
    float v9 = (float)((float)*(unsigned int *)(v7 + 392) * -0.5) + 10.0;
    if (*(unsigned char *)(v7 + 432))
    {
      int v10 = isPoleTile;
      uint64_t v11 = *(void *)(v7 + 328);
      if (v3)
      {
        if (!v11) {
          operator new();
        }
        if (*(void *)(v11 + 136) || (*(_DWORD *)(v7 + 404) ? (char v14 = 1) : (char v14 = isPoleTile), (v14 & 1) != 0))
        {
          if ((isPoleTile & 1) == 0) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        altitude::CompleteGlobeTileSetLoader::loadBaseSurface(this, (altitude::Tile *)v7);
        unsigned int v2 = v4 + 1;
      }
      else
      {
        if (!v11) {
          operator new();
        }
LABEL_24:
        if (!*(void *)(v11 + 120))
        {
          *((unsigned char *)this + 620) = 1;
          (*(void (**)(altitude::CompleteGlobeTileSetLoader *, uint64_t, void))(*(void *)this + 112))(this, v7, (float)(v9 * 100000.0) + 100000);
          if (v10)
          {
            uint64_t v19 = *(void *)(v7 + 328);
            if (!v19) {
              operator new();
            }
            uint64_t v20 = *(void *)(v19 + 120);
            if (v20)
            {
              uint64_t v21 = *(void *)(v20 + 48);
              uint64_t v22 = *(void *)(v20 + 56);
              if (v21 == v22)
              {
                double v26 = -1.79769313e308;
                double v28 = 1.79769313e308;
                double v27 = 1.79769313e308;
                double v23 = 1.79769313e308;
                double v25 = -1.79769313e308;
                double v24 = -1.79769313e308;
              }
              else
              {
                double v23 = 1.79769313e308;
                double v24 = -1.79769313e308;
                double v25 = -1.79769313e308;
                double v26 = -1.79769313e308;
                double v27 = 1.79769313e308;
                double v28 = 1.79769313e308;
                do
                {
                  for (int i = 0; i != 8; ++i)
                  {
                    uint64_t v30 = (double *)(*(uint64_t (**)(void))(**(void **)v21 + 24))();
                    uint64_t v31 = (*(uint64_t (**)(void))(**(void **)v21 + 56))();
                    uint64_t v32 = (double *)(v31 + 24);
                    if (i) {
                      uint64_t v32 = (double *)v31;
                    }
                    double v33 = *v32;
                    uint64_t v34 = (double *)(v31 + 8);
                    if ((i & 2) == 0) {
                      uint64_t v34 = (double *)(v31 + 32);
                    }
                    double v35 = *v34;
                    uint64_t v36 = (double *)(v31 + 16);
                    if ((i & 4) == 0) {
                      uint64_t v36 = (double *)(v31 + 40);
                    }
                    double v37 = v30[4];
                    double v38 = v30[5];
                    double v39 = v30[6];
                    double v40 = v30[3];
                    double v41 = -(v37 * v33 - v40 * v35);
                    double v42 = *v30 + v33;
                    double v43 = -(*v36 * v40 - v38 * v33);
                    double v44 = v30[1] + v35;
                    double v45 = -(v38 * v35 - v37 * *v36);
                    double v46 = v45 + v45;
                    double v47 = v41 + v41;
                    double v48 = v43 + v43;
                    double v49 = v42 + v47 * v37 + v46 * v39 - v48 * v38;
                    double v50 = v44 - v47 * v40 + v46 * v38 + v48 * v39;
                    double v51 = *v36 + v47 * v39 + v30[2] + v48 * v40 - v46 * v37;
                    double v28 = fmin(v49, v28);
                    double v26 = fmax(v26, v49);
                    double v27 = fmin(v50, v27);
                    double v25 = fmax(v25, v50);
                    double v23 = fmin(v51, v23);
                    double v24 = fmax(v24, v51);
                  }
                  v21 += 8;
                }
                while (v21 != v22);
              }
              if (v26 - v28 >= 0.0) {
                double v83 = (v26 - v28) * 0.5;
              }
              else {
                double v83 = 0.0;
              }
              if (v25 - v27 >= 0.0) {
                double v84 = (v25 - v27) * 0.5;
              }
              else {
                double v84 = 0.0;
              }
              if (v24 - v23 >= 0.0) {
                double v85 = (v24 - v23) * 0.5;
              }
              else {
                double v85 = 0.0;
              }
              double v86 = fmax(v83, 0.0);
              double v87 = fmax(v84, 0.0);
              double v88 = fmax(v85, 0.0);
              *((void *)&v114 + 1) = 0;
              long long v115 = 0uLL;
              *(double *)&long long v113 = (v26 - v28) * 0.5 + v28;
              *((double *)&v113 + 1) = (v25 - v27) * 0.5 + v27;
              *(double *)&long long v114 = (v24 - v23) * 0.5 + v23;
              uint64_t v116 = 0x3FF0000000000000;
              v112[0] = -v86;
              v112[1] = -v87;
              v112[2] = -v88;
              v112[3] = v86;
              v112[4] = v87;
              v112[5] = v88;
              (*(void (**)(uint64_t, long long *, double *))(*(void *)v7 + 40))(v7, &v113, v112);
            }
          }
          goto LABEL_3;
        }
LABEL_25:
        unint64_t v15 = (void *)*((void *)this + 31);
        uint64_t v16 = (char *)v15[11];
        unsigned int v17 = (char *)v15[12];
        uint64_t v18 = v16;
        if (v16 != v17)
        {
          uint64_t v18 = (char *)v15[11];
          while (*(void *)v18 != v7)
          {
            v18 += 8;
            if (v18 == v17)
            {
              uint64_t v18 = (char *)v15[12];
              break;
            }
          }
        }
        if (v18 == v17)
        {
          unint64_t v12 = v15[13];
          if ((unint64_t)v17 >= v12)
          {
            uint64_t v52 = (v17 - v16) >> 3;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61) {
              goto LABEL_132;
            }
            uint64_t v54 = v12 - (void)v16;
            if (v54 >> 2 > v53) {
              unint64_t v53 = v54 >> 2;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              if (v55 >> 61) {
                goto LABEL_133;
              }
              uint64_t v56 = operator new(8 * v55);
            }
            else
            {
              uint64_t v56 = 0;
            }
            unint64_t v57 = &v56[8 * v52];
            void *v57 = v7;
            uint64_t v13 = v57 + 1;
            if (v16 != v17)
            {
              unint64_t v58 = v17 - 8 - v16;
              if (v58 < 0x58) {
                goto LABEL_136;
              }
              if ((unint64_t)(v16 - v56) < 0x20) {
                goto LABEL_136;
              }
              uint64_t v59 = (v58 >> 3) + 1;
              unint64_t v60 = &v56[8 * v52 - 16];
              uint64_t v61 = v17 - 16;
              uint64_t v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v63 = *(_OWORD *)v61;
                *(v60 - 1) = *((_OWORD *)v61 - 1);
                *unint64_t v60 = v63;
                v60 -= 2;
                v61 -= 32;
                v62 -= 4;
              }
              while (v62);
              v57 -= v59 & 0x3FFFFFFFFFFFFFFCLL;
              v17 -= 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_136:
                do
                {
                  uint64_t v64 = *((void *)v17 - 1);
                  v17 -= 8;
                  *--unint64_t v57 = v64;
                }
                while (v17 != v16);
              }
              uint64_t v16 = (char *)v15[11];
            }
            v15[11] = v57;
            v15[12] = v13;
            v15[13] = &v56[8 * v55];
            if (v16) {
              operator delete(v16);
            }
            int v3 = v109;
          }
          else
          {
            *(void *)unsigned int v17 = v7;
            uint64_t v13 = v17 + 8;
          }
          v15[12] = v13;
          long long v65 = (void *)*((void *)this + 31);
          uint64_t v67 = (char *)v65[9];
          unint64_t v66 = v65[10];
          if ((unint64_t)v67 >= v66)
          {
            unsigned int v69 = (char *)v65[8];
            uint64_t v70 = (v67 - v69) >> 3;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61) {
LABEL_132:
            }
              abort();
            uint64_t v72 = v66 - (void)v69;
            if (v72 >> 2 > v71) {
              unint64_t v71 = v72 >> 2;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              if (v73 >> 61) {
LABEL_133:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              unint64_t v74 = (char *)operator new(8 * v73);
            }
            else
            {
              unint64_t v74 = 0;
            }
            uint64_t v75 = &v74[8 * v70];
            *(void *)uint64_t v75 = v7;
            uint64_t v68 = v75 + 8;
            if (v67 != v69)
            {
              unint64_t v76 = v67 - 8 - v69;
              if (v76 < 0x58) {
                goto LABEL_137;
              }
              if ((unint64_t)(v69 - v74) < 0x20) {
                goto LABEL_137;
              }
              uint64_t v77 = (v76 >> 3) + 1;
              uint64_t v78 = &v74[8 * v70 - 16];
              uint64_t v79 = (long long *)(v67 - 16);
              uint64_t v80 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v81 = *v79;
                *((_OWORD *)v78 - 1) = *(v79 - 1);
                *(_OWORD *)uint64_t v78 = v81;
                v78 -= 32;
                v79 -= 2;
                v80 -= 4;
              }
              while (v80);
              v75 -= 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v67 -= 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_137:
                do
                {
                  uint64_t v82 = *((void *)v67 - 1);
                  v67 -= 8;
                  *((void *)v75 - 1) = v82;
                  v75 -= 8;
                }
                while (v67 != v69);
              }
              uint64_t v67 = (char *)v65[8];
            }
            v65[8] = v75;
            v65[9] = v68;
            v65[10] = &v74[8 * v73];
            int v3 = v109;
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *(void *)uint64_t v67 = v7;
            uint64_t v68 = v67 + 8;
          }
          v65[9] = v68;
          char v110 = 1;
        }
LABEL_3:
        unsigned int v2 = v4 + 1;
      }
    }
    else
    {
      altitude::CompleteGlobeTileSetLoader::loadTileMetaData(this, (altitude::Tile *)v7);
      unsigned int v2 = v4 + 1;
    }
  }
  if (v110)
  {
    unsigned int v89 = (altitude::TileSetNode *)*((void *)this + 31);
    for (uint64_t j = (uint64_t *)*((void *)v89 + 5); j != *((uint64_t **)v89 + 6); ++j)
    {
      uint64_t v92 = *j;
      if (*j)
      {
        unsigned int v94 = (char *)*((void *)v89 + 9);
        unint64_t v93 = *((void *)v89 + 10);
        if ((unint64_t)v94 < v93)
        {
          *(void *)unsigned int v94 = v92;
          unint64_t v91 = v94 + 8;
        }
        else
        {
          unsigned int v95 = (char *)*((void *)v89 + 8);
          uint64_t v96 = (v94 - v95) >> 3;
          unint64_t v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 61) {
            goto LABEL_132;
          }
          uint64_t v98 = v93 - (void)v95;
          if (v98 >> 2 > v97) {
            unint64_t v97 = v98 >> 2;
          }
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v97;
          }
          if (v99)
          {
            if (v99 >> 61) {
              goto LABEL_133;
            }
            unsigned int v100 = (char *)operator new(8 * v99);
          }
          else
          {
            unsigned int v100 = 0;
          }
          uint64_t v101 = &v100[8 * v96];
          *(void *)uint64_t v101 = v92;
          unint64_t v91 = v101 + 8;
          if (v94 != v95)
          {
            unint64_t v102 = v94 - 8 - v95;
            if (v102 < 0x58) {
              goto LABEL_138;
            }
            if ((unint64_t)(v95 - v100) < 0x20) {
              goto LABEL_138;
            }
            uint64_t v103 = (v102 >> 3) + 1;
            unsigned int v104 = &v100[8 * v96 - 16];
            unsigned int v105 = (long long *)(v94 - 16);
            uint64_t v106 = v103 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v107 = *v105;
              *((_OWORD *)v104 - 1) = *(v105 - 1);
              *(_OWORD *)unsigned int v104 = v107;
              v104 -= 32;
              v105 -= 2;
              v106 -= 4;
            }
            while (v106);
            v101 -= 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
            v94 -= 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
            if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_138:
              do
              {
                uint64_t v108 = *((void *)v94 - 1);
                v94 -= 8;
                *((void *)v101 - 1) = v108;
                v101 -= 8;
              }
              while (v94 != v95);
            }
            unsigned int v94 = (char *)*((void *)v89 + 8);
          }
          *((void *)v89 + 8) = v101;
          *((void *)v89 + 9) = v91;
          *((void *)v89 + 10) = &v100[8 * v99];
          if (v94) {
            operator delete(v94);
          }
        }
        *((void *)v89 + 9) = v91;
        unsigned int v89 = (altitude::TileSetNode *)*((void *)this + 31);
      }
    }
    altitude::TileSetNode::swap(v89);
  }
}