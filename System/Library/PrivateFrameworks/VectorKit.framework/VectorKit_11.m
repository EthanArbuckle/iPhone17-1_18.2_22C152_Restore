void sub_1A1D12920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ggl::Batcher *a9, uint64_t a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t *a32,uint64_t *a33,uint64_t *a34,uint64_t *a35,uint64_t *a36,void *a37)
{
  uint64_t v37;
  gss::FeatureAttributeSet *v38;
  gss::FeatureAttributeSet *v39;
  void *v40;
  void *v41;

  std::function<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~function(v40);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v39);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v38);
  std::function<void ()(ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup *)>::~function(&STACK[0x518]);
  std::function<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~function(&STACK[0x538]);
  MEMORY[0x1A6239270](v38, 0x10A0C40D234DDC7);

  md::RenderItemPool::~RenderItemPool((md::RenderItemPool *)(v37 + 864));
  STACK[0x300] = v37 + 40;
  STACK[0x2F0] = v37 + 56;
  STACK[0x2E0] = v37 + 72;
  STACK[0x2D0] = v37 + 88;
  STACK[0x2C0] = v37 + 104;
  STACK[0x2B0] = v37 + 120;
  STACK[0x2A0] = v37 + 136;
  STACK[0x290] = v37 + 152;
  STACK[0x280] = v37 + 168;
  STACK[0x270] = v37 + 184;
  STACK[0x260] = v37 + 200;
  STACK[0x250] = v37 + 216;
  STACK[0x240] = v37 + 232;
  STACK[0x230] = v37 + 248;
  STACK[0x220] = v37 + 264;
  STACK[0x210] = v37 + 280;
  STACK[0x200] = v37 + 296;
  ggl::Batcher::~Batcher(a9);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a18);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a25);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a26);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a28);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a30);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a19);
  std::unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::PrefilteredLinePipelineSetup>>::~unique_ptr[abi:nn180100](a14);
  std::unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](a21);
  std::unique_ptr<ggl::FragmentedPool<ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a22);
  std::unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a23);
  std::unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)(v37 + 568));
  std::unique_ptr<ggl::FragmentedPool<ggl::SpecularBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a24);
  std::unique_ptr<ggl::FragmentedPool<ggl::SpecularBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100]((uint64_t *)(v37 + 552));
  std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a11);
  std::unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a12);
  std::unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a31);
  std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a13);
  std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseBuilding::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a32);
  std::unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoofDepth::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a33);
  std::unique_ptr<ggl::FragmentedPool<ggl::BuildingTopDepth::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a34);
  std::unique_ptr<ggl::FragmentedPool<ggl::BuildingFacadeDepth::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a35);
  std::unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](a36);
  std::unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup>>::~unique_ptr[abi:nn180100](a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 456);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 440);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 424);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 408);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 392);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 376);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 360);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 344);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 328);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 312);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x200]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x210]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x220]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x230]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x240]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x250]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x260]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x270]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x280]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x290]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2A0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2B0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2C0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2D0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2E0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x2F0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](STACK[0x300]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v37 + 24);

  _Unwind_Resume(a1);
}

uint64_t ggl::SpecularBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB32B660 = 1;
        }
        ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
        *(void *)algn_1E9587318 = &ggl::SpecularBuildingPointyRoof::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
        qword_1E9587320 = 0;
        {
          ggl::SpecularBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          unk_1E9587350 = ggl::Tile::View::reflection(void)::reflection;
          qword_1E9587358 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1E9587360 = ggl::Building::Style::reflection(void)::reflection;
          qword_1E9587368 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1E9587370 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1E9587378 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1E9587328 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref;
        unk_1E9587330 = xmmword_1A28FD0B0;
      }
      ggl::SpecularBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref;
      {
        ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingPointyRoofShader";
        {
          qword_1EB32A820 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1EB32A828 = ggl::specularBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A830 = 1;
          unk_1EB32A838 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A840 = 6;
          unk_1EB32A848 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A850 = 0;
          unk_1EB32A858 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = 1075938269;
          qword_1EB32A860 = 0;
          unk_1EB32A868 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A878 = 0;
          unk_1EB32A880 = 0;
          qword_1EB32A870 = 0;
        }
        qword_1EB323640 = (uint64_t)&ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323648 = 1075938269;
        {
          ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x10062DEDALL;
          qword_1EB32AD88 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1EB32AD90 = 0;
          qword_1EB32AD98 = 0;
          unk_1EB32ADA0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32ADA8 = 4;
          unk_1EB32ADB0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32ADB8 = 0;
          unk_1EB32ADC0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32ADC8 = 0;
          unk_1EB32ADD0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32ADE0 = 0;
          unk_1EB32ADE8 = 0;
          qword_1EB32ADD8 = 0;
        }
        qword_1EB323650 = (uint64_t)&ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323658 = 6479578;
        qword_1EB323660 = (uint64_t)ggl::specularBuildingPointyRoofShaderShaderConstants(void)::ref;
        unk_1EB323668 = 7;
        qword_1EB323670 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderTextures(void)::ref;
        unk_1EB323678 = 0;
        qword_1EB323680 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderSamplers(void)::ref;
        unk_1EB323688 = 0;
      }
      qword_1EB319750 = (uint64_t)&ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref;
      {
        ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95874E0 = 0;
        qword_1E95874E8 = (uint64_t)"";
        dword_1E95874F0 = 0;
        qword_1E95874F8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E9587500 = 2;
      }
      qword_1EB319758 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1EB319760 = 1;
      qword_1EB319768 = 0;
      unk_1EB319770 = 0;
      qword_1EB319778 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB319780 = 0;
      {
        ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9587390 = 0;
        qword_1E9587398 = (uint64_t)"skyfog";
        dword_1E95873A0 = 3;
        qword_1E95873A8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E95873B0 = xmmword_1A28FD030;
        qword_1E95873C0 = 1;
        unk_1E95873C8 = "view";
        dword_1E95873D0 = 3;
        qword_1E95873D8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E95873E0 = vdupq_n_s64(2uLL);
        qword_1E95873F0 = 2;
        unk_1E95873F8 = "scale";
        dword_1E9587400 = 3;
        qword_1E9587408 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E9587410 = xmmword_1A28FD040;
        qword_1E9587420 = 3;
        unk_1E9587428 = "style";
        dword_1E9587430 = 3;
        qword_1E9587438 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E9587440 = xmmword_1A28FD050;
        qword_1E9587450 = 4;
        unk_1E9587458 = "gradient";
        dword_1E9587460 = 3;
        qword_1E9587468 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E9587470 = xmmword_1A28FCF80;
        qword_1E9587480 = 5;
        unk_1E9587488 = "lightConfig";
        dword_1E9587490 = 3;
        qword_1E9587498 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E95874A0 = xmmword_1A28FD060;
        qword_1E95874B0 = 6;
        unk_1E95874B8 = "fade";
        dword_1E95874C0 = 3;
        qword_1E95874C8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E95874D0 = 2;
      }
      qword_1EB319788 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB319790 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::SpecularBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FFD8;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    uint64_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v82;
    if (v83)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
          }
          ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
          unk_1EB32B498 = 1;
        }
        ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
        *(void *)algn_1E9586FF8 = &ggl::FoggedSpecularBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
        qword_1E9587000 = 0;
        {
          ggl::FoggedSpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          unk_1E9587030 = ggl::Tile::View::reflection(void)::reflection;
          qword_1E9587038 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1E9587040 = ggl::Building::Style::reflection(void)::reflection;
          qword_1E9587048 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1E9587050 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1E9587058 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1E9587008 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
        unk_1E9587010 = xmmword_1A28FD0B0;
      }
      ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      {
        ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularBuildingTopShader";
        {
          int v84 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
          qword_1EB32A390 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1EB32A398 = ggl::foggedSpecularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A3A0 = 1;
          unk_1EB32A3A8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A3B0 = 6;
          unk_1EB32A3B8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A3C0 = 0;
          unk_1EB32A3C8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v84;
          *(_DWORD *)algn_1EB32A38C = 0;
          qword_1EB32A3D0 = 0;
          unk_1EB32A3D8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A3E8 = 0;
          unk_1EB32A3F0 = 0;
          qword_1EB32A3E0 = 0;
        }
        qword_1EB323530 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323538 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
        {
          ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x113B913CCLL;
          qword_1EB32AA68 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1EB32AA70 = 0;
          qword_1EB32AA78 = 0;
          unk_1EB32AA80 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AA88 = 4;
          unk_1EB32AA90 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AA98 = 0;
          unk_1EB32AAA0 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AAA8 = 0;
          unk_1EB32AAB0 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AAC0 = 0;
          unk_1EB32AAC8 = 0;
          qword_1EB32AAB8 = 0;
        }
        qword_1EB323540 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323548 = 330896332;
        qword_1EB323550 = (uint64_t)ggl::foggedSpecularBuildingTopShaderShaderConstants(void)::ref;
        unk_1EB323558 = 7;
        qword_1EB323560 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderTextures(void)::ref;
        unk_1EB323568 = 0;
        qword_1EB323570 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderSamplers(void)::ref;
        unk_1EB323578 = 0;
      }
      qword_1EB3196A0 = (uint64_t)&ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref;
      {
        ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95871C0 = 0;
        qword_1E95871C8 = (uint64_t)"";
        dword_1E95871D0 = 0;
        qword_1E95871D8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E95871E0 = 1;
      }
      qword_1EB3196A8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB3196B0 = 1;
      qword_1EB3196B8 = 0;
      unk_1EB3196C0 = 0;
      qword_1EB3196C8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB3196D0 = 0;
      {
        ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9587070 = 0;
        qword_1E9587078 = (uint64_t)"skyfog";
        dword_1E9587080 = 3;
        qword_1E9587088 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E9587090 = xmmword_1A28FD030;
        qword_1E95870A0 = 1;
        unk_1E95870A8 = "view";
        dword_1E95870B0 = 3;
        qword_1E95870B8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95870C0 = vdupq_n_s64(2uLL);
        qword_1E95870D0 = 2;
        unk_1E95870D8 = "scale";
        dword_1E95870E0 = 3;
        qword_1E95870E8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E95870F0 = xmmword_1A28FD040;
        qword_1E9587100 = 3;
        unk_1E9587108 = "style";
        dword_1E9587110 = 3;
        qword_1E9587118 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1E9587120 = xmmword_1A28FD050;
        qword_1E9587130 = 4;
        unk_1E9587138 = "gradient";
        dword_1E9587140 = 3;
        qword_1E9587148 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E9587150 = xmmword_1A28FCF80;
        qword_1E9587160 = 5;
        unk_1E9587168 = "lightConfig";
        dword_1E9587170 = 3;
        qword_1E9587178 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9587180 = xmmword_1A28FD060;
        qword_1E9587190 = 6;
        unk_1E9587198 = "fade";
        dword_1E95871A0 = 3;
        qword_1E95871A8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1E95871B0 = 2;
      }
      qword_1EB3196D8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB3196E0 = 7;
      a4 = v82;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FEA8;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    uint64_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v82;
    if (v83)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB32B660 = 1;
        }
        ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
        unk_1E9586E00 = &ggl::DiffuseBuildingPointyRoof::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
        qword_1E9586E08 = 0;
        {
          ggl::DiffuseBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          *(void *)algn_1E9586E38 = ggl::Tile::View::reflection(void)::reflection;
          qword_1E9586E40 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1E9586E48 = ggl::Building::Style::reflection(void)::reflection;
          qword_1E9586E50 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1E9586E58 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1E9586E60 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1E9586E10 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref;
        unk_1E9586E18 = xmmword_1A28FD0B0;
      }
      ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref;
      {
        ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingPointyRoofShader";
        {
          int v84 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
          qword_1EB32A1B8 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1EB32A1C0 = ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A1C8 = 1;
          unk_1EB32A1D0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A1D8 = 6;
          unk_1EB32A1E0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A1E8 = 0;
          unk_1EB32A1F0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = v84;
          *(_DWORD *)algn_1EB32A1B4 = 0;
          qword_1EB32A1F8 = 0;
          unk_1EB32A200 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A210 = 0;
          unk_1EB32A218 = 0;
          qword_1EB32A208 = 0;
        }
        qword_1EB323428 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323430 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
        {
          ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x19F819965;
          qword_1EB32A890 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1EB32A898 = 0;
          qword_1EB32A8A0 = 0;
          unk_1EB32A8A8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A8B0 = 3;
          unk_1EB32A8B8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A8C0 = 0;
          unk_1EB32A8C8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A8D0 = 0;
          unk_1EB32A8D8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A8E8 = 0;
          unk_1EB32A8F0 = 0;
          qword_1EB32A8E0 = 0;
        }
        qword_1EB323438 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323440 = -1618896539;
        qword_1EB323448 = (uint64_t)ggl::diffuseBuildingPointyRoofShaderShaderConstants(void)::ref;
        unk_1EB323450 = 7;
        qword_1EB323458 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderTextures(void)::ref;
        unk_1EB323460 = 0;
        qword_1EB323468 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderSamplers(void)::ref;
        unk_1EB323470 = 0;
      }
      qword_1EB319648 = (uint64_t)&ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref;
      {
        ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9586FC8 = 0;
        qword_1E9586FD0 = (uint64_t)"";
        dword_1E9586FD8 = 0;
        qword_1E9586FE0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E9586FE8 = 2;
      }
      qword_1EB319650 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319658 = 1;
      qword_1EB319660 = 0;
      unk_1EB319668 = 0;
      qword_1EB319670 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB319678 = 0;
      {
        ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9586E78 = 0;
        qword_1E9586E80 = (uint64_t)"skyfog";
        dword_1E9586E88 = 3;
        qword_1E9586E90 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E9586E98 = xmmword_1A28FD030;
        qword_1E9586EA8 = 1;
        unk_1E9586EB0 = "view";
        dword_1E9586EB8 = 3;
        qword_1E9586EC0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E9586EC8 = vdupq_n_s64(2uLL);
        qword_1E9586ED8 = 2;
        unk_1E9586EE0 = "scale";
        dword_1E9586EE8 = 3;
        qword_1E9586EF0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E9586EF8 = xmmword_1A28FD040;
        qword_1E9586F08 = 3;
        unk_1E9586F10 = "style";
        dword_1E9586F18 = 3;
        qword_1E9586F20 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E9586F28 = xmmword_1A28FD050;
        qword_1E9586F38 = 4;
        unk_1E9586F40 = "gradient";
        dword_1E9586F48 = 3;
        qword_1E9586F50 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1E9586F58 = xmmword_1A28FCF80;
        qword_1E9586F68 = 5;
        unk_1E9586F70 = "lightConfig";
        dword_1E9586F78 = 3;
        qword_1E9586F80 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9586F88 = xmmword_1A28FD060;
        qword_1E9586F98 = 6;
        unk_1E9586FA0 = "fade";
        dword_1E9586FA8 = 3;
        qword_1E9586FB0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E9586FB8 = 2;
      }
      qword_1EB319680 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB319688 = 7;
      a4 = v82;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FDB8;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    uint64_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v82;
    if (v83)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
          }
          ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
          unk_1EB32B498 = 1;
        }
        ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
        unk_1E9586C00 = &ggl::FoggedDiffuseBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
        qword_1E9586C08 = 0;
        {
          ggl::FoggedDiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          *(void *)algn_1E9586C38 = ggl::Tile::View::reflection(void)::reflection;
          qword_1E9586C40 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1E9586C48 = ggl::Building::Style::reflection(void)::reflection;
          qword_1E9586C50 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1E9586C58 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1E9586C60 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1E9586C10 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
        unk_1E9586C18 = xmmword_1A28FD0B0;
      }
      ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      {
        ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseBuildingTopShader";
        {
          int v84 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
          qword_1EB329EF8 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1EB329F00 = ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329F08 = 1;
          unk_1EB329F10 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329F18 = 6;
          unk_1EB329F20 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329F28 = 0;
          unk_1EB329F30 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v84;
          *(_DWORD *)algn_1EB329EF4 = 0;
          qword_1EB329F38 = 0;
          unk_1EB329F40 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329F50 = 0;
          unk_1EB329F58 = 0;
          qword_1EB329F48 = 0;
        }
        qword_1EB323368 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323370 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
        {
          ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x1AC1081B8;
          qword_1EB32A6C0 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1EB32A6C8 = 0;
          qword_1EB32A6D0 = 0;
          unk_1EB32A6D8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A6E0 = 3;
          unk_1EB32A6E8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A6F0 = 0;
          unk_1EB32A6F8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A700 = 0;
          unk_1EB32A708 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A718 = 0;
          unk_1EB32A720 = 0;
          qword_1EB32A710 = 0;
        }
        qword_1EB323378 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323380 = -1408204360;
        qword_1EB323388 = (uint64_t)ggl::foggedDiffuseBuildingTopShaderShaderConstants(void)::ref;
        unk_1EB323390 = 7;
        qword_1EB323398 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderTextures(void)::ref;
        unk_1EB3233A0 = 0;
        qword_1EB3233A8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderSamplers(void)::ref;
        unk_1EB3233B0 = 0;
      }
      qword_1EB3195F8 = (uint64_t)&ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref;
      {
        ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9586DC8 = 0;
        qword_1E9586DD0 = (uint64_t)"";
        dword_1E9586DD8 = 0;
        qword_1E9586DE0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9586DE8 = 1;
      }
      qword_1EB319600 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319608 = 1;
      qword_1EB319610 = 0;
      unk_1EB319618 = 0;
      qword_1EB319620 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB319628 = 0;
      {
        ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9586C78 = 0;
        qword_1E9586C80 = (uint64_t)"skyfog";
        dword_1E9586C88 = 3;
        qword_1E9586C90 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E9586C98 = xmmword_1A28FD030;
        qword_1E9586CA8 = 1;
        unk_1E9586CB0 = "view";
        dword_1E9586CB8 = 3;
        qword_1E9586CC0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9586CC8 = vdupq_n_s64(2uLL);
        qword_1E9586CD8 = 2;
        unk_1E9586CE0 = "scale";
        dword_1E9586CE8 = 3;
        qword_1E9586CF0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        unk_1E9586CF8 = xmmword_1A28FD040;
        qword_1E9586D08 = 3;
        unk_1E9586D10 = "style";
        dword_1E9586D18 = 3;
        qword_1E9586D20 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1E9586D28 = xmmword_1A28FD050;
        qword_1E9586D38 = 4;
        unk_1E9586D40 = "gradient";
        dword_1E9586D48 = 3;
        qword_1E9586D50 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        unk_1E9586D58 = xmmword_1A28FCF80;
        qword_1E9586D68 = 5;
        unk_1E9586D70 = "lightConfig";
        dword_1E9586D78 = 3;
        qword_1E9586D80 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9586D88 = xmmword_1A28FD060;
        qword_1E9586D98 = 6;
        unk_1E9586DA0 = "fade";
        dword_1E9586DA8 = 3;
        qword_1E9586DB0 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1E9586DB8 = 2;
      }
      qword_1EB319630 = (uint64_t)&ggl::FoggedDiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1EB319638 = 7;
      a4 = v82;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FD68;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FoggedSpecularBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B578 = 1;
          }
          ggl::FoggedSpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          unk_1E9586110 = &ggl::FoggedSpecularBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E9586118 = 0;
          {
            ggl::FoggedSpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(void *)algn_1E9586148 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9586150 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9586158 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9586160 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9586168 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9586170 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9586120 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E9586128 = xmmword_1A28FD020;
        }
      }
      ggl::FoggedSpecularBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedSpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedSpecularBuildingShader::typedReflection(v83);
      qword_1EB319448 = (uint64_t)&ggl::FoggedSpecularBuildingShader::typedReflection(void)::ref;
      {
        ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E95862D8 = 0;
        qword_1E95862E0 = (uint64_t)"";
        dword_1E95862E8 = 0;
        qword_1E95862F0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E95862F8 = 2;
      }
      qword_1EB319450 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB319458 = 1;
      qword_1EB319460 = 0;
      unk_1EB319468 = 1;
      qword_1EB319470 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB319478 = 0;
      {
        ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9586188 = 0;
        qword_1E9586190 = (uint64_t)"skyfog";
        dword_1E9586198 = 3;
        qword_1E95861A0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E95861A8 = xmmword_1A28FD030;
        qword_1E95861B8 = 1;
        unk_1E95861C0 = "view";
        dword_1E95861C8 = 3;
        qword_1E95861D0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E95861D8 = vdupq_n_s64(2uLL);
        qword_1E95861E8 = 2;
        unk_1E95861F0 = "scale";
        dword_1E95861F8 = 3;
        qword_1E9586200 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E9586208 = xmmword_1A28FD040;
        qword_1E9586218 = 3;
        unk_1E9586220 = "style";
        dword_1E9586228 = 3;
        qword_1E9586230 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E9586238 = xmmword_1A28FD050;
        qword_1E9586248 = 4;
        unk_1E9586250 = "gradient";
        dword_1E9586258 = 3;
        qword_1E9586260 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1E9586268 = xmmword_1A28FCF80;
        qword_1E9586278 = 5;
        unk_1E9586280 = "lightConfig";
        dword_1E9586288 = 3;
        qword_1E9586290 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9586298 = xmmword_1A28FD060;
        qword_1E95862A8 = 6;
        unk_1E95862B0 = "fade";
        dword_1E95862B8 = 3;
        qword_1E95862C0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E95862C8 = 2;
      }
      qword_1EB319480 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB319488 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FoggedSpecularBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FA38;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FoggedDiffuseBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B578 = 1;
          }
          ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9585CB8 = &ggl::FoggedDiffuseBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E9585CC0 = 0;
          {
            ggl::FoggedDiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1E9585CF0 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9585CF8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9585D00 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9585D08 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9585D10 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9585D18 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9585CC8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1E9585CD0 = xmmword_1A28FD020;
        }
      }
      ggl::FoggedDiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedDiffuseBuildingShader::typedReflection(v83);
      qword_1EB3192A0 = (uint64_t)&ggl::FoggedDiffuseBuildingShader::typedReflection(void)::ref;
      {
        ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9585E80 = 0;
        qword_1E9585E88 = (uint64_t)"";
        dword_1E9585E90 = 0;
        qword_1E9585E98 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E9585EA0 = 2;
      }
      qword_1EB3192A8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1EB3192B0 = 1;
      qword_1EB3192B8 = 0;
      unk_1EB3192C0 = 1;
      qword_1EB3192C8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB3192D0 = 0;
      {
        ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9585D30 = 0;
        qword_1E9585D38 = (uint64_t)"skyfog";
        dword_1E9585D40 = 3;
        qword_1E9585D48 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E9585D50 = xmmword_1A28FD030;
        qword_1E9585D60 = 1;
        unk_1E9585D68 = "view";
        dword_1E9585D70 = 3;
        qword_1E9585D78 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E9585D80 = vdupq_n_s64(2uLL);
        qword_1E9585D90 = 2;
        unk_1E9585D98 = "scale";
        dword_1E9585DA0 = 3;
        qword_1E9585DA8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E9585DB0 = xmmword_1A28FD040;
        qword_1E9585DC0 = 3;
        unk_1E9585DC8 = "style";
        dword_1E9585DD0 = 3;
        qword_1E9585DD8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E9585DE0 = xmmword_1A28FD050;
        qword_1E9585DF0 = 4;
        unk_1E9585DF8 = "gradient";
        dword_1E9585E00 = 3;
        qword_1E9585E08 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E9585E10 = xmmword_1A28FCF80;
        qword_1E9585E20 = 5;
        unk_1E9585E28 = "lightConfig";
        dword_1E9585E30 = 3;
        qword_1E9585E38 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9585E40 = xmmword_1A28FD060;
        qword_1E9585E50 = 6;
        unk_1E9585E58 = "fade";
        dword_1E9585E60 = 3;
        qword_1E9585E68 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E9585E70 = 2;
      }
      qword_1EB3192D8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB3192E0 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FoggedDiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55F6E0;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::SpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          *(void *)algn_1E9585918 = &ggl::SpecularBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9585920 = 0;
          {
            ggl::SpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1E9585950 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9585958 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9585960 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9585968 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9585970 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9585978 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9585928 = (uint64_t)&ggl::SpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1E9585930 = xmmword_1A28FD0B0;
        }
      }
      ggl::SpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::SpecularBuildingTopShader::typedReflection(v83);
      qword_1EB3191A0 = (uint64_t)&ggl::SpecularBuildingTopShader::typedReflection(void)::ref;
      {
        ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9585AE0 = 0;
        qword_1E9585AE8 = (uint64_t)"";
        dword_1E9585AF0 = 0;
        qword_1E9585AF8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9585B00 = 1;
      }
      qword_1EB3191A8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EB3191B0 = 1;
      qword_1EB3191B8 = 0;
      unk_1EB3191C0 = 0;
      qword_1EB3191C8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB3191D0 = 0;
      {
        ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9585990 = 0;
        qword_1E9585998 = (uint64_t)"skyfog";
        dword_1E95859A0 = 3;
        qword_1E95859A8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E95859B0 = xmmword_1A28FD030;
        qword_1E95859C0 = 1;
        unk_1E95859C8 = "view";
        dword_1E95859D0 = 3;
        qword_1E95859D8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95859E0 = vdupq_n_s64(2uLL);
        qword_1E95859F0 = 2;
        unk_1E95859F8 = "scale";
        dword_1E9585A00 = 3;
        qword_1E9585A08 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E9585A10 = xmmword_1A28FD040;
        qword_1E9585A20 = 3;
        unk_1E9585A28 = "style";
        dword_1E9585A30 = 3;
        qword_1E9585A38 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1E9585A40 = xmmword_1A28FD050;
        qword_1E9585A50 = 4;
        unk_1E9585A58 = "gradient";
        dword_1E9585A60 = 3;
        qword_1E9585A68 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E9585A70 = xmmword_1A28FCF80;
        qword_1E9585A80 = 5;
        unk_1E9585A88 = "lightConfig";
        dword_1E9585A90 = 3;
        qword_1E9585A98 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9585AA0 = xmmword_1A28FD060;
        qword_1E9585AB0 = 6;
        unk_1E9585AB8 = "fade";
        dword_1E9585AC0 = 3;
        qword_1E9585AC8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1E9585AD0 = 2;
      }
      qword_1EB3191D8 = (uint64_t)&ggl::SpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB3191E0 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::SpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55F510;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::DiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E95853E0 = &ggl::DiffuseBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E95853E8 = 0;
          {
            ggl::DiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(void *)algn_1E9585418 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9585420 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9585428 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9585430 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9585438 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9585440 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E95853F0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1E95853F8 = xmmword_1A28FD0B0;
        }
      }
      ggl::DiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::DiffuseBuildingTopShader::typedReflection(v83);
      qword_1EB3190A8 = (uint64_t)&ggl::DiffuseBuildingTopShader::typedReflection(void)::ref;
      {
        ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E95855A8 = 0;
        qword_1E95855B0 = (uint64_t)"";
        dword_1E95855B8 = 0;
        qword_1E95855C0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E95855C8 = 1;
      }
      qword_1EB3190B0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB3190B8 = 1;
      qword_1EB3190C0 = 0;
      unk_1EB3190C8 = 0;
      qword_1EB3190D0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB3190D8 = 0;
      {
        ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9585458 = 0;
        qword_1E9585460 = (uint64_t)"skyfog";
        dword_1E9585468 = 3;
        qword_1E9585470 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E9585478 = xmmword_1A28FD030;
        qword_1E9585488 = 1;
        unk_1E9585490 = "view";
        dword_1E9585498 = 3;
        qword_1E95854A0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E95854A8 = vdupq_n_s64(2uLL);
        qword_1E95854B8 = 2;
        unk_1E95854C0 = "scale";
        dword_1E95854C8 = 3;
        qword_1E95854D0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        unk_1E95854D8 = xmmword_1A28FD040;
        qword_1E95854E8 = 3;
        unk_1E95854F0 = "style";
        dword_1E95854F8 = 3;
        qword_1E9585500 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1E9585508 = xmmword_1A28FD050;
        qword_1E9585518 = 4;
        unk_1E9585520 = "gradient";
        dword_1E9585528 = 3;
        qword_1E9585530 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        unk_1E9585538 = xmmword_1A28FCF80;
        qword_1E9585548 = 5;
        unk_1E9585550 = "lightConfig";
        dword_1E9585558 = 3;
        qword_1E9585560 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9585568 = xmmword_1A28FD060;
        qword_1E9585578 = 6;
        unk_1E9585580 = "fade";
        dword_1E9585588 = 3;
        qword_1E9585590 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1E9585598 = 2;
      }
      qword_1EB3190E0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB3190E8 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::DiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55F1D8;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::SpecularBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B578 = 1;
          }
          ggl::SpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          unk_1E9583E80 = &ggl::SpecularBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E9583E88 = 0;
          {
            ggl::SpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(void *)algn_1E9583EB8 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9583EC0 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9583EC8 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9583ED0 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9583ED8 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9583EE0 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9583E90 = (uint64_t)&ggl::SpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1E9583E98 = xmmword_1A28FD020;
        }
      }
      ggl::SpecularBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::SpecularBuildingShader::typedReflection(v83);
      qword_1EB318E58 = (uint64_t)&ggl::SpecularBuildingShader::typedReflection(void)::ref;
      {
        ggl::SpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9584048 = 0;
        qword_1E9584050 = (uint64_t)"";
        dword_1E9584058 = 0;
        qword_1E9584060 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E9584068 = 2;
      }
      qword_1EB318E60 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB318E68 = 1;
      qword_1EB318E70 = 0;
      unk_1EB318E78 = 1;
      qword_1EB318E80 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB318E88 = 0;
      {
        ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9583EF8 = 0;
        qword_1E9583F00 = (uint64_t)"skyfog";
        dword_1E9583F08 = 3;
        qword_1E9583F10 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E9583F18 = xmmword_1A28FD030;
        qword_1E9583F28 = 1;
        unk_1E9583F30 = "view";
        dword_1E9583F38 = 3;
        qword_1E9583F40 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E9583F48 = vdupq_n_s64(2uLL);
        qword_1E9583F58 = 2;
        unk_1E9583F60 = "scale";
        dword_1E9583F68 = 3;
        qword_1E9583F70 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E9583F78 = xmmword_1A28FD040;
        qword_1E9583F88 = 3;
        unk_1E9583F90 = "style";
        dword_1E9583F98 = 3;
        qword_1E9583FA0 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E9583FA8 = xmmword_1A28FD050;
        qword_1E9583FB8 = 4;
        unk_1E9583FC0 = "gradient";
        dword_1E9583FC8 = 3;
        qword_1E9583FD0 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1E9583FD8 = xmmword_1A28FCF80;
        qword_1E9583FE8 = 5;
        unk_1E9583FF0 = "lightConfig";
        dword_1E9583FF8 = 3;
        qword_1E9584000 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9584008 = xmmword_1A28FD060;
        qword_1E9584018 = 6;
        unk_1E9584020 = "fade";
        dword_1E9584028 = 3;
        qword_1E9584030 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E9584038 = 2;
      }
      qword_1EB318E90 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB318E98 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::SpecularBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55D528;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::DiffuseBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B578 = 1;
          }
          ggl::DiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9583218 = &ggl::DiffuseBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E9583220 = 0;
          {
            ggl::DiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1E9583250 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9583258 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9583260 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9583268 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9583270 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9583278 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9583228 = (uint64_t)&ggl::DiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1E9583230 = xmmword_1A28FD020;
        }
      }
      ggl::DiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::DiffuseBuildingShader::typedReflection(v83);
      qword_1EB318C10 = (uint64_t)&ggl::DiffuseBuildingShader::typedReflection(void)::ref;
      {
        ggl::DiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95833E0 = 0;
        qword_1E95833E8 = (uint64_t)"";
        dword_1E95833F0 = 0;
        qword_1E95833F8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E9583400 = 2;
      }
      qword_1EB318C18 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1EB318C20 = 1;
      qword_1EB318C28 = 0;
      unk_1EB318C30 = 1;
      qword_1EB318C38 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB318C40 = 0;
      {
        ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9583290 = 0;
        qword_1E9583298 = (uint64_t)"skyfog";
        dword_1E95832A0 = 3;
        qword_1E95832A8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E95832B0 = xmmword_1A28FD030;
        qword_1E95832C0 = 1;
        unk_1E95832C8 = "view";
        dword_1E95832D0 = 3;
        qword_1E95832D8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E95832E0 = vdupq_n_s64(2uLL);
        qword_1E95832F0 = 2;
        unk_1E95832F8 = "scale";
        dword_1E9583300 = 3;
        qword_1E9583308 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E9583310 = xmmword_1A28FD040;
        qword_1E9583320 = 3;
        unk_1E9583328 = "style";
        dword_1E9583330 = 3;
        qword_1E9583338 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E9583340 = xmmword_1A28FD050;
        qword_1E9583350 = 4;
        unk_1E9583358 = "gradient";
        dword_1E9583360 = 3;
        qword_1E9583368 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E9583370 = xmmword_1A28FCF80;
        qword_1E9583380 = 5;
        unk_1E9583388 = "lightConfig";
        dword_1E9583390 = 3;
        qword_1E9583398 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E95833A0 = xmmword_1A28FD060;
        qword_1E95833B0 = 6;
        unk_1E95833B8 = "fade";
        dword_1E95833C0 = 3;
        qword_1E95833C8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E95833D0 = 2;
      }
      qword_1EB318C48 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB318C50 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::DiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55BA40;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::BuildingFlat::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    int v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1EB32B498 = 1;
          }
          ggl::BuildingFlat::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1E9581E90 = &ggl::BuildingFlat::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1E9581E98 = 0;
          {
            ggl::BuildingFlat::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9581EC8 = ggl::BuildingFlat::Building::reflection(void)::reflection;
          }
          qword_1E9581EA0 = (uint64_t)&ggl::BuildingFlat::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E9581EA8 = xmmword_1A28FCED0;
        }
      }
      ggl::BuildingFlat::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingFlat::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingFlatShader::typedReflection(v83);
      qword_1EB3188D8 = (uint64_t)&ggl::BuildingFlatShader::typedReflection(void)::ref;
      {
        ggl::BuildingFlat::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9581F38 = 0;
        qword_1E9581F40 = (uint64_t)"";
        dword_1E9581F48 = 0;
        qword_1E9581F50 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1E9581F58 = 1;
      }
      qword_1EB3188E0 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB3188E8 = 1;
      qword_1EB3188F0 = 0;
      unk_1EB3188F8 = 0;
      qword_1EB318900 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EB318908 = 0;
      {
        ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9581ED8 = 0;
        qword_1E9581EE0 = (uint64_t)"view";
        dword_1E9581EE8 = 3;
        qword_1E9581EF0 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1E9581EF8 = xmmword_1A28FCEB0;
        qword_1E9581F08 = 1;
        unk_1E9581F10 = "building";
        dword_1E9581F18 = 3;
        qword_1E9581F20 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantBuildingBinding(void)::reflection;
        unk_1E9581F28 = 3;
      }
      qword_1EB318910 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1EB318918 = 2;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::BuildingFlat::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55AB20;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26SpecularBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BD78;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25FoggedSpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BCE8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23BuildingPointyRoofDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BB80;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B8F8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19SpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B8B0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19BuildingFacadeDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B820;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18BuildingFlatStroke31BuildingFlatStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B790;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16BuildingTopDepth27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B0D0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15PrefilteredLine28PrefilteredLinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B040;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AFB0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14BuildingShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AE48;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12BuildingFlat27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57ACE0;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5763F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576368;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5762D8;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576128;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5760E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576008;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575FC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575F78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575F30;
  a2[1] = v2;
  return result;
}

uint64_t *md::BuildingRenderLayer::prune(uint64_t a1)
{
  md::BuildingRenderResources::resetPools(*(md::BuildingRenderResources **)(a1 + 392));
  uint64_t v2 = *(uint64_t ***)(a1 + 400);
  return md::LandmarkRenderResources::resetPools(v2);
}

void md::BuildingRenderResources::resetPools(md::BuildingRenderResources *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 60);
  v3 = (uint64_t *)v2[4];
  v4 = (uint64_t *)v2[5];
  if (v3 == v4) {
    goto LABEL_33;
  }
  uint64_t v5 = (void *)v2[1];
  do
  {
    uint64_t v6 = *v3;
    unint64_t v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5) {
        *uint64_t v5 = v6;
      }
      ++v5;
      goto LABEL_4;
    }
    uint64_t v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
LABEL_499:
    }
      abort();
    uint64_t v9 = v7 - *v2;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 16))(v2[3], 8 * v11, 8);
      int8x16_t v14 = (void *)(v13 + 8 * v8);
      uint64_t v11 = v13 + v12;
      if (v13) {
        *int8x16_t v14 = v6;
      }
    }
    else
    {
      int8x16_t v14 = (void *)(8 * v8);
    }
    uint64_t v16 = *v2;
    uint64_t v15 = v2[1];
    uint64_t v17 = v15 - *v2;
    if (v15 == *v2)
    {
      int8x16_t v19 = v14;
      goto LABEL_29;
    }
    unint64_t v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      int8x16_t v19 = v14;
    }
    else
    {
      int8x16_t v19 = v14;
      if ((unint64_t)(v15 - (void)v14) >= 0x20)
      {
        uint64_t v20 = (v18 >> 3) + 1;
        int8x16_t v21 = v14 - 2;
        int8x16_t v22 = (long long *)(v15 - 16);
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *int8x16_t v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        int8x16_t v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    do
    {
      uint64_t v25 = *(void *)(v15 - 8);
      v15 -= 8;
      *--int8x16_t v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    uint64_t v15 = *v2;
LABEL_29:
    uint64_t v5 = v14 + 1;
    *uint64_t v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    uint64_t v26 = v2[2];
    v2[2] = v11;
    if (v15) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v15, v26 - v15);
    }
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  uint64_t v27 = v2[4];
  if (v27 != v2[5]) {
    v2[5] = v27;
  }
LABEL_33:
  int8x16_t v28 = (uint64_t *)*((void *)this + 61);
  int8x16_t v29 = (uint64_t *)v28[4];
  int16x8_t v30 = (uint64_t *)v28[5];
  if (v29 == v30) {
    goto LABEL_65;
  }
  int32x4_t v31 = (void *)v28[1];
  while (2)
  {
    uint64_t v32 = *v29;
    unint64_t v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31) {
        *int32x4_t v31 = v32;
      }
      ++v31;
      goto LABEL_36;
    }
    uint64_t v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v35 = v33 - *v28;
    uint64_t v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
      uint64_t v36 = v34 + 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v37 = v36;
    }
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 16))(v28[3], 8 * v37, 8);
      int8x16_t v40 = (void *)(v39 + 8 * v34);
      uint64_t v37 = v39 + v38;
      if (v39) {
        *int8x16_t v40 = v32;
      }
    }
    else
    {
      int8x16_t v40 = (void *)(8 * v34);
    }
    uint64_t v42 = *v28;
    uint64_t v41 = v28[1];
    uint64_t v43 = v41 - *v28;
    if (v41 == *v28)
    {
      int8x16_t v45 = v40;
      goto LABEL_61;
    }
    unint64_t v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      int8x16_t v45 = v40;
      do
      {
LABEL_59:
        uint64_t v51 = *(void *)(v41 - 8);
        v41 -= 8;
        *--int8x16_t v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    int8x16_t v45 = v40;
    if ((unint64_t)(v41 - (void)v40) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v46 = (v44 >> 3) + 1;
    int8x16_t v47 = v40 - 2;
    int8x16_t v48 = (long long *)(v41 - 16);
    uint64_t v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *int8x16_t v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    int8x16_t v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v41 = *v28;
LABEL_61:
    int32x4_t v31 = v40 + 1;
    *int8x16_t v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    uint64_t v52 = v28[2];
    v28[2] = v37;
    if (v41) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 40))(v28[3], v41, v52 - v41);
    }
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30) {
      continue;
    }
    break;
  }
  uint64_t v53 = v28[4];
  if (v53 != v28[5]) {
    v28[5] = v53;
  }
LABEL_65:
  int32x4_t v54 = (uint64_t *)*((void *)this + 62);
  int8x16_t v55 = (uint64_t *)v54[4];
  int16x8_t v56 = (uint64_t *)v54[5];
  if (v55 == v56) {
    goto LABEL_97;
  }
  int32x4_t v57 = (void *)v54[1];
  while (2)
  {
    uint64_t v58 = *v55;
    unint64_t v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57) {
        *int32x4_t v57 = v58;
      }
      ++v57;
      goto LABEL_68;
    }
    uint64_t v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v61 = v59 - *v54;
    uint64_t v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
      uint64_t v62 = v60 + 1;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v63 = v62;
    }
    if (v63)
    {
      uint64_t v64 = 8 * v63;
      uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[3] + 16))(v54[3], 8 * v63, 8);
      int8x16_t v66 = (void *)(v65 + 8 * v60);
      uint64_t v63 = v65 + v64;
      if (v65) {
        *int8x16_t v66 = v58;
      }
    }
    else
    {
      int8x16_t v66 = (void *)(8 * v60);
    }
    uint64_t v68 = *v54;
    uint64_t v67 = v54[1];
    uint64_t v69 = v67 - *v54;
    if (v67 == *v54)
    {
      int16x8_t v71 = v66;
      goto LABEL_93;
    }
    unint64_t v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      int16x8_t v71 = v66;
      do
      {
LABEL_91:
        uint64_t v77 = *(void *)(v67 - 8);
        v67 -= 8;
        *--int16x8_t v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    int16x8_t v71 = v66;
    if ((unint64_t)(v67 - (void)v66) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v72 = (v70 >> 3) + 1;
    int8x16_t v73 = v66 - 2;
    int32x4_t v74 = (long long *)(v67 - 16);
    uint64_t v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      *int8x16_t v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    int16x8_t v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_91;
    }
LABEL_92:
    uint64_t v67 = *v54;
LABEL_93:
    int32x4_t v57 = v66 + 1;
    *int32x4_t v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    uint64_t v78 = v54[2];
    v54[2] = v63;
    if (v67) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[3] + 40))(v54[3], v67, v78 - v67);
    }
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56) {
      continue;
    }
    break;
  }
  uint64_t v79 = v54[4];
  if (v79 != v54[5]) {
    v54[5] = v79;
  }
LABEL_97:
  int8x16_t v80 = (uint64_t *)*((void *)this + 63);
  v81 = (uint64_t *)v80[4];
  v82 = (uint64_t *)v80[5];
  if (v81 == v82) {
    goto LABEL_129;
  }
  int v83 = (void *)v80[1];
  while (2)
  {
    uint64_t v84 = *v81;
    unint64_t v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83) {
        *int v83 = v84;
      }
      ++v83;
      goto LABEL_100;
    }
    uint64_t v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v87 = v85 - *v80;
    uint64_t v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1)) {
      uint64_t v88 = v86 + 1;
    }
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v89 = v88;
    }
    if (v89)
    {
      uint64_t v90 = 8 * v89;
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80[3] + 16))(v80[3], 8 * v89, 8);
      v92 = (void *)(v91 + 8 * v86);
      uint64_t v89 = v91 + v90;
      if (v91) {
        void *v92 = v84;
      }
    }
    else
    {
      v92 = (void *)(8 * v86);
    }
    uint64_t v94 = *v80;
    uint64_t v93 = v80[1];
    uint64_t v95 = v93 - *v80;
    if (v93 == *v80)
    {
      v97 = v92;
      goto LABEL_125;
    }
    unint64_t v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      v97 = v92;
      do
      {
LABEL_123:
        uint64_t v103 = *(void *)(v93 - 8);
        v93 -= 8;
        *--v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    v97 = v92;
    if ((unint64_t)(v93 - (void)v92) < 0x20) {
      goto LABEL_123;
    }
    uint64_t v98 = (v96 >> 3) + 1;
    v99 = v92 - 2;
    v100 = (long long *)(v93 - 16);
    uint64_t v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      _OWORD *v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_123;
    }
LABEL_124:
    uint64_t v93 = *v80;
LABEL_125:
    int v83 = v92 + 1;
    *int8x16_t v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    uint64_t v104 = v80[2];
    v80[2] = v89;
    if (v93) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80[3] + 40))(v80[3], v93, v104 - v93);
    }
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82) {
      continue;
    }
    break;
  }
  uint64_t v105 = v80[4];
  if (v105 != v80[5]) {
    v80[5] = v105;
  }
LABEL_129:
  v106 = (uint64_t *)*((void *)this + 64);
  v107 = (uint64_t *)v106[4];
  v108 = (uint64_t *)v106[5];
  if (v107 == v108) {
    goto LABEL_161;
  }
  v109 = (void *)v106[1];
  while (2)
  {
    uint64_t v110 = *v107;
    unint64_t v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109) {
        void *v109 = v110;
      }
      ++v109;
      goto LABEL_132;
    }
    uint64_t v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v113 = v111 - *v106;
    uint64_t v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1)) {
      uint64_t v114 = v112 + 1;
    }
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v115 = v114;
    }
    if (v115)
    {
      uint64_t v116 = 8 * v115;
      uint64_t v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v118 = (void *)(v117 + 8 * v112);
      uint64_t v115 = v117 + v116;
      if (v117) {
        void *v118 = v110;
      }
    }
    else
    {
      v118 = (void *)(8 * v112);
    }
    uint64_t v120 = *v106;
    uint64_t v119 = v106[1];
    uint64_t v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v118;
      goto LABEL_157;
    }
    unint64_t v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v118;
      do
      {
LABEL_155:
        uint64_t v129 = *(void *)(v119 - 8);
        v119 -= 8;
        *--v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    v123 = v118;
    if ((unint64_t)(v119 - (void)v118) < 0x20) {
      goto LABEL_155;
    }
    uint64_t v124 = (v122 >> 3) + 1;
    v125 = v118 - 2;
    v126 = (long long *)(v119 - 16);
    uint64_t v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      _OWORD *v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_155;
    }
LABEL_156:
    uint64_t v119 = *v106;
LABEL_157:
    v109 = v118 + 1;
    uint64_t *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    uint64_t v130 = v106[2];
    v106[2] = v115;
    if (v119) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106[3] + 40))(v106[3], v119, v130 - v119);
    }
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108) {
      continue;
    }
    break;
  }
  uint64_t v131 = v106[4];
  if (v131 != v106[5]) {
    v106[5] = v131;
  }
LABEL_161:
  v132 = (uint64_t *)*((void *)this + 66);
  v133 = (uint64_t *)v132[4];
  v134 = (uint64_t *)v132[5];
  if (v133 == v134) {
    goto LABEL_193;
  }
  v135 = (void *)v132[1];
  while (2)
  {
    uint64_t v136 = *v133;
    unint64_t v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135) {
        void *v135 = v136;
      }
      ++v135;
      goto LABEL_164;
    }
    uint64_t v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v139 = v137 - *v132;
    uint64_t v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1)) {
      uint64_t v140 = v138 + 1;
    }
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v141 = v140;
    }
    if (v141)
    {
      uint64_t v142 = 8 * v141;
      uint64_t v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132[3] + 16))(v132[3], 8 * v141, 8);
      v144 = (void *)(v143 + 8 * v138);
      uint64_t v141 = v143 + v142;
      if (v143) {
        void *v144 = v136;
      }
    }
    else
    {
      v144 = (void *)(8 * v138);
    }
    uint64_t v146 = *v132;
    uint64_t v145 = v132[1];
    uint64_t v147 = v145 - *v132;
    if (v145 == *v132)
    {
      v149 = v144;
      goto LABEL_189;
    }
    unint64_t v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      v149 = v144;
      do
      {
LABEL_187:
        uint64_t v155 = *(void *)(v145 - 8);
        v145 -= 8;
        *--v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    v149 = v144;
    if ((unint64_t)(v145 - (void)v144) < 0x20) {
      goto LABEL_187;
    }
    uint64_t v150 = (v148 >> 3) + 1;
    v151 = v144 - 2;
    v152 = (long long *)(v145 - 16);
    uint64_t v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      _OWORD *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_187;
    }
LABEL_188:
    uint64_t v145 = *v132;
LABEL_189:
    v135 = v144 + 1;
    uint64_t *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    uint64_t v156 = v132[2];
    v132[2] = v141;
    if (v145) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v132[3] + 40))(v132[3], v145, v156 - v145);
    }
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134) {
      continue;
    }
    break;
  }
  uint64_t v157 = v132[4];
  if (v157 != v132[5]) {
    v132[5] = v157;
  }
LABEL_193:
  if (!*((unsigned char *)this + 772))
  {
    v236 = (uint64_t *)*((void *)this + 65);
    v237 = (uint64_t *)v236[4];
    v238 = (uint64_t *)v236[5];
    if (v237 == v238) {
      goto LABEL_320;
    }
    v239 = (void *)v236[1];
    while (1)
    {
      uint64_t v240 = *v237;
      unint64_t v241 = v236[2];
      if ((unint64_t)v239 >= v241) {
        break;
      }
      if (v239) {
        void *v239 = v240;
      }
      ++v239;
LABEL_291:
      v236[1] = (uint64_t)v239;
      if (++v237 == v238)
      {
        uint64_t v261 = v236[4];
        if (v261 != v236[5]) {
          v236[5] = v261;
        }
LABEL_320:
        v262 = (uint64_t *)*((void *)this + 67);
        v263 = (uint64_t *)v262[4];
        v264 = (uint64_t *)v262[5];
        if (v263 == v264) {
          goto LABEL_352;
        }
        v265 = (void *)v262[1];
        while (2)
        {
          uint64_t v266 = *v263;
          unint64_t v267 = v262[2];
          if ((unint64_t)v265 < v267)
          {
            if (v265) {
              void *v265 = v266;
            }
            ++v265;
            goto LABEL_323;
          }
          uint64_t v268 = ((uint64_t)v265 - *v262) >> 3;
          if ((unint64_t)(v268 + 1) >> 61) {
            goto LABEL_499;
          }
          uint64_t v269 = v267 - *v262;
          uint64_t v270 = v269 >> 2;
          if (v269 >> 2 <= (unint64_t)(v268 + 1)) {
            uint64_t v270 = v268 + 1;
          }
          if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v271 = v270;
          }
          if (v271)
          {
            uint64_t v272 = 8 * v271;
            uint64_t v273 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v262[3] + 16))(v262[3], 8 * v271, 8);
            v274 = (void *)(v273 + 8 * v268);
            uint64_t v271 = v273 + v272;
            if (v273) {
              void *v274 = v266;
            }
          }
          else
          {
            v274 = (void *)(8 * v268);
          }
          uint64_t v276 = *v262;
          uint64_t v275 = v262[1];
          uint64_t v277 = v275 - *v262;
          if (v275 != *v262)
          {
            unint64_t v278 = v277 - 8;
            if ((unint64_t)(v277 - 8) < 0x38)
            {
              v279 = v274;
            }
            else
            {
              v279 = v274;
              if ((unint64_t)(v275 - (void)v274) >= 0x20)
              {
                uint64_t v280 = (v278 >> 3) + 1;
                v281 = v274 - 2;
                v282 = (long long *)(v275 - 16);
                uint64_t v283 = v280 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v284 = *v282;
                  *(v281 - 1) = *(v282 - 1);
                  _OWORD *v281 = v284;
                  v281 -= 2;
                  v282 -= 2;
                  v283 -= 4;
                }
                while (v283);
                v279 = &v274[-(v280 & 0x3FFFFFFFFFFFFFFCLL)];
                v275 -= 8 * (v280 & 0x3FFFFFFFFFFFFFFCLL);
                if (v280 == (v280 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_347:
                  uint64_t v275 = *v262;
LABEL_348:
                  v265 = v274 + 1;
                  uint64_t *v262 = (uint64_t)v279;
                  v262[1] = (uint64_t)(v274 + 1);
                  uint64_t v286 = v262[2];
                  v262[2] = v271;
                  if (v275) {
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v262[3] + 40))(v262[3], v275, v286 - v275);
                  }
LABEL_323:
                  v262[1] = (uint64_t)v265;
                  if (++v263 == v264)
                  {
                    uint64_t v287 = v262[4];
                    if (v287 != v262[5]) {
                      v262[5] = v287;
                    }
LABEL_352:
                    v210 = (uint64_t *)*((void *)this + 68);
                    v288 = (uint64_t *)v210[4];
                    v212 = v210 + 5;
                    v289 = (uint64_t *)v210[5];
                    if (v288 == v289) {
                      goto LABEL_384;
                    }
                    v290 = (void *)v210[1];
                    while (2)
                    {
                      uint64_t v291 = *v288;
                      unint64_t v292 = v210[2];
                      if ((unint64_t)v290 < v292)
                      {
                        if (v290) {
                          void *v290 = v291;
                        }
                        ++v290;
                        goto LABEL_355;
                      }
                      uint64_t v293 = ((uint64_t)v290 - *v210) >> 3;
                      if ((unint64_t)(v293 + 1) >> 61) {
                        goto LABEL_499;
                      }
                      uint64_t v294 = v292 - *v210;
                      uint64_t v295 = v294 >> 2;
                      if (v294 >> 2 <= (unint64_t)(v293 + 1)) {
                        uint64_t v295 = v293 + 1;
                      }
                      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8) {
                        uint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v296 = v295;
                      }
                      if (v296)
                      {
                        uint64_t v297 = 8 * v296;
                        uint64_t v298 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v210[3] + 16))(v210[3], 8 * v296, 8);
                        v299 = (void *)(v298 + 8 * v293);
                        uint64_t v296 = v298 + v297;
                        if (v298) {
                          void *v299 = v291;
                        }
                      }
                      else
                      {
                        v299 = (void *)(8 * v293);
                      }
                      uint64_t v301 = *v210;
                      uint64_t v300 = v210[1];
                      uint64_t v302 = v300 - *v210;
                      if (v300 != *v210)
                      {
                        unint64_t v303 = v302 - 8;
                        if ((unint64_t)(v302 - 8) < 0x38)
                        {
                          v304 = v299;
                        }
                        else
                        {
                          v304 = v299;
                          if ((unint64_t)(v300 - (void)v299) >= 0x20)
                          {
                            uint64_t v305 = (v303 >> 3) + 1;
                            v306 = v299 - 2;
                            v307 = (long long *)(v300 - 16);
                            uint64_t v308 = v305 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v309 = *v307;
                              *(v306 - 1) = *(v307 - 1);
                              _OWORD *v306 = v309;
                              v306 -= 2;
                              v307 -= 2;
                              v308 -= 4;
                            }
                            while (v308);
                            v304 = &v299[-(v305 & 0x3FFFFFFFFFFFFFFCLL)];
                            v300 -= 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v305 == (v305 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_379:
                              uint64_t v300 = *v210;
LABEL_380:
                              v290 = v299 + 1;
                              uint64_t *v210 = (uint64_t)v304;
                              v210[1] = (uint64_t)(v299 + 1);
                              uint64_t v311 = v210[2];
                              v210[2] = v296;
                              if (v300) {
                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v210[3] + 40))(v210[3], v300, v311 - v300);
                              }
LABEL_355:
                              v210[1] = (uint64_t)v290;
                              if (++v288 == v289)
                              {
LABEL_382:
                                uint64_t v312 = v210[4];
                                if (v312 != v210[5]) {
                                  void *v212 = v312;
                                }
                                goto LABEL_384;
                              }
                              continue;
                            }
                          }
                        }
                        do
                        {
                          uint64_t v310 = *(void *)(v300 - 8);
                          v300 -= 8;
                          *--v304 = v310;
                        }
                        while (v300 != v301);
                        goto LABEL_379;
                      }
                      break;
                    }
                    v304 = v299;
                    goto LABEL_380;
                  }
                  continue;
                }
              }
            }
            do
            {
              uint64_t v285 = *(void *)(v275 - 8);
              v275 -= 8;
              *--v279 = v285;
            }
            while (v275 != v276);
            goto LABEL_347;
          }
          break;
        }
        v279 = v274;
        goto LABEL_348;
      }
    }
    uint64_t v242 = ((uint64_t)v239 - *v236) >> 3;
    if ((unint64_t)(v242 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v243 = v241 - *v236;
    uint64_t v244 = v243 >> 2;
    if (v243 >> 2 <= (unint64_t)(v242 + 1)) {
      uint64_t v244 = v242 + 1;
    }
    if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v245 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v245 = v244;
    }
    if (v245)
    {
      uint64_t v246 = 8 * v245;
      uint64_t v247 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v236[3] + 16))(v236[3], 8 * v245, 8);
      v248 = (void *)(v247 + 8 * v242);
      uint64_t v245 = v247 + v246;
      if (v247) {
        void *v248 = v240;
      }
    }
    else
    {
      v248 = (void *)(8 * v242);
    }
    uint64_t v250 = *v236;
    uint64_t v249 = v236[1];
    uint64_t v251 = v249 - *v236;
    if (v249 == *v236)
    {
      v253 = v248;
      goto LABEL_316;
    }
    unint64_t v252 = v251 - 8;
    if ((unint64_t)(v251 - 8) < 0x38)
    {
      v253 = v248;
    }
    else
    {
      v253 = v248;
      if ((unint64_t)(v249 - (void)v248) >= 0x20)
      {
        uint64_t v254 = (v252 >> 3) + 1;
        v255 = v248 - 2;
        v256 = (long long *)(v249 - 16);
        uint64_t v257 = v254 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v258 = *v256;
          *(v255 - 1) = *(v256 - 1);
          _OWORD *v255 = v258;
          v255 -= 2;
          v256 -= 2;
          v257 -= 4;
        }
        while (v257);
        v253 = &v248[-(v254 & 0x3FFFFFFFFFFFFFFCLL)];
        v249 -= 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
        if (v254 == (v254 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_315;
        }
      }
    }
    do
    {
      uint64_t v259 = *(void *)(v249 - 8);
      v249 -= 8;
      *--v253 = v259;
    }
    while (v249 != v250);
LABEL_315:
    uint64_t v249 = *v236;
LABEL_316:
    v239 = v248 + 1;
    uint64_t *v236 = (uint64_t)v253;
    v236[1] = (uint64_t)(v248 + 1);
    uint64_t v260 = v236[2];
    v236[2] = v245;
    if (v249) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v236[3] + 40))(v236[3], v249, v260 - v249);
    }
    goto LABEL_291;
  }
  v158 = (uint64_t *)*((void *)this + 70);
  v159 = (uint64_t *)v158[4];
  v160 = (uint64_t *)v158[5];
  if (v159 == v160) {
    goto LABEL_226;
  }
  v161 = (void *)v158[1];
  while (2)
  {
    uint64_t v162 = *v159;
    unint64_t v163 = v158[2];
    if ((unint64_t)v161 < v163)
    {
      if (v161) {
        void *v161 = v162;
      }
      ++v161;
      goto LABEL_197;
    }
    uint64_t v164 = ((uint64_t)v161 - *v158) >> 3;
    if ((unint64_t)(v164 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v165 = v163 - *v158;
    uint64_t v166 = v165 >> 2;
    if (v165 >> 2 <= (unint64_t)(v164 + 1)) {
      uint64_t v166 = v164 + 1;
    }
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v167 = v166;
    }
    if (v167)
    {
      uint64_t v168 = 8 * v167;
      uint64_t v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v158[3] + 16))(v158[3], 8 * v167, 8);
      v170 = (void *)(v169 + 8 * v164);
      uint64_t v167 = v169 + v168;
      if (v169) {
        void *v170 = v162;
      }
    }
    else
    {
      v170 = (void *)(8 * v164);
    }
    uint64_t v172 = *v158;
    uint64_t v171 = v158[1];
    uint64_t v173 = v171 - *v158;
    if (v171 == *v158)
    {
      v175 = v170;
      goto LABEL_222;
    }
    unint64_t v174 = v173 - 8;
    if ((unint64_t)(v173 - 8) < 0x38)
    {
      v175 = v170;
      do
      {
LABEL_220:
        uint64_t v181 = *(void *)(v171 - 8);
        v171 -= 8;
        *--v175 = v181;
      }
      while (v171 != v172);
      goto LABEL_221;
    }
    v175 = v170;
    if ((unint64_t)(v171 - (void)v170) < 0x20) {
      goto LABEL_220;
    }
    uint64_t v176 = (v174 >> 3) + 1;
    v177 = v170 - 2;
    v178 = (long long *)(v171 - 16);
    uint64_t v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v180 = *v178;
      *(v177 - 1) = *(v178 - 1);
      _OWORD *v177 = v180;
      v177 -= 2;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    v175 = &v170[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_220;
    }
LABEL_221:
    uint64_t v171 = *v158;
LABEL_222:
    v161 = v170 + 1;
    uint64_t *v158 = (uint64_t)v175;
    v158[1] = (uint64_t)(v170 + 1);
    uint64_t v182 = v158[2];
    v158[2] = v167;
    if (v171) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v158[3] + 40))(v158[3], v171, v182 - v171);
    }
LABEL_197:
    v158[1] = (uint64_t)v161;
    if (++v159 != v160) {
      continue;
    }
    break;
  }
  uint64_t v183 = v158[4];
  if (v183 != v158[5]) {
    v158[5] = v183;
  }
LABEL_226:
  v184 = (uint64_t *)*((void *)this + 72);
  v185 = (uint64_t *)v184[4];
  v186 = (uint64_t *)v184[5];
  if (v185 == v186) {
    goto LABEL_258;
  }
  v187 = (void *)v184[1];
  while (2)
  {
    uint64_t v188 = *v185;
    unint64_t v189 = v184[2];
    if ((unint64_t)v187 < v189)
    {
      if (v187) {
        void *v187 = v188;
      }
      ++v187;
      goto LABEL_229;
    }
    uint64_t v190 = ((uint64_t)v187 - *v184) >> 3;
    if ((unint64_t)(v190 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v191 = v189 - *v184;
    uint64_t v192 = v191 >> 2;
    if (v191 >> 2 <= (unint64_t)(v190 + 1)) {
      uint64_t v192 = v190 + 1;
    }
    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v193 = v192;
    }
    if (v193)
    {
      uint64_t v194 = 8 * v193;
      uint64_t v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v184[3] + 16))(v184[3], 8 * v193, 8);
      v196 = (void *)(v195 + 8 * v190);
      uint64_t v193 = v195 + v194;
      if (v195) {
        void *v196 = v188;
      }
    }
    else
    {
      v196 = (void *)(8 * v190);
    }
    uint64_t v198 = *v184;
    uint64_t v197 = v184[1];
    uint64_t v199 = v197 - *v184;
    if (v197 == *v184)
    {
      v201 = v196;
      goto LABEL_254;
    }
    unint64_t v200 = v199 - 8;
    if ((unint64_t)(v199 - 8) < 0x38)
    {
      v201 = v196;
      do
      {
LABEL_252:
        uint64_t v207 = *(void *)(v197 - 8);
        v197 -= 8;
        *--v201 = v207;
      }
      while (v197 != v198);
      goto LABEL_253;
    }
    v201 = v196;
    if ((unint64_t)(v197 - (void)v196) < 0x20) {
      goto LABEL_252;
    }
    uint64_t v202 = (v200 >> 3) + 1;
    v203 = v196 - 2;
    v204 = (long long *)(v197 - 16);
    uint64_t v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v206 = *v204;
      *(v203 - 1) = *(v204 - 1);
      _OWORD *v203 = v206;
      v203 -= 2;
      v204 -= 2;
      v205 -= 4;
    }
    while (v205);
    v201 = &v196[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
    v197 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
    if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_252;
    }
LABEL_253:
    uint64_t v197 = *v184;
LABEL_254:
    v187 = v196 + 1;
    uint64_t *v184 = (uint64_t)v201;
    v184[1] = (uint64_t)(v196 + 1);
    uint64_t v208 = v184[2];
    v184[2] = v193;
    if (v197) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v184[3] + 40))(v184[3], v197, v208 - v197);
    }
LABEL_229:
    v184[1] = (uint64_t)v187;
    if (++v185 != v186) {
      continue;
    }
    break;
  }
  uint64_t v209 = v184[4];
  if (v209 != v184[5]) {
    v184[5] = v209;
  }
LABEL_258:
  v210 = (uint64_t *)*((void *)this + 73);
  v211 = (uint64_t *)v210[4];
  v212 = v210 + 5;
  v213 = (uint64_t *)v210[5];
  if (v211 != v213)
  {
    v214 = (void *)v210[1];
    while (1)
    {
      uint64_t v215 = *v211;
      unint64_t v216 = v210[2];
      if ((unint64_t)v214 >= v216) {
        break;
      }
      if (v214) {
        void *v214 = v215;
      }
      ++v214;
LABEL_261:
      v210[1] = (uint64_t)v214;
      if (++v211 == v213) {
        goto LABEL_382;
      }
    }
    uint64_t v217 = ((uint64_t)v214 - *v210) >> 3;
    if ((unint64_t)(v217 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v218 = v216 - *v210;
    uint64_t v219 = v218 >> 2;
    if (v218 >> 2 <= (unint64_t)(v217 + 1)) {
      uint64_t v219 = v217 + 1;
    }
    if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v220 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v220 = v219;
    }
    if (v220)
    {
      uint64_t v221 = 8 * v220;
      uint64_t v222 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v210[3] + 16))(v210[3], 8 * v220, 8);
      v223 = (void *)(v222 + 8 * v217);
      uint64_t v220 = v222 + v221;
      if (v222) {
        void *v223 = v215;
      }
    }
    else
    {
      v223 = (void *)(8 * v217);
    }
    uint64_t v225 = *v210;
    uint64_t v224 = v210[1];
    uint64_t v226 = v224 - *v210;
    if (v224 != *v210)
    {
      unint64_t v227 = v226 - 8;
      if ((unint64_t)(v226 - 8) < 0x38)
      {
        v228 = v223;
      }
      else
      {
        v228 = v223;
        if ((unint64_t)(v224 - (void)v223) >= 0x20)
        {
          uint64_t v229 = (v227 >> 3) + 1;
          v230 = v223 - 2;
          v231 = (long long *)(v224 - 16);
          uint64_t v232 = v229 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v233 = *v231;
            *(v230 - 1) = *(v231 - 1);
            _OWORD *v230 = v233;
            v230 -= 2;
            v231 -= 2;
            v232 -= 4;
          }
          while (v232);
          v228 = &v223[-(v229 & 0x3FFFFFFFFFFFFFFCLL)];
          v224 -= 8 * (v229 & 0x3FFFFFFFFFFFFFFCLL);
          if (v229 == (v229 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_285:
            uint64_t v224 = *v210;
LABEL_286:
            v214 = v223 + 1;
            uint64_t *v210 = (uint64_t)v228;
            v210[1] = (uint64_t)(v223 + 1);
            uint64_t v235 = v210[2];
            v210[2] = v220;
            if (v224) {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v210[3] + 40))(v210[3], v224, v235 - v224);
            }
            goto LABEL_261;
          }
        }
      }
      do
      {
        uint64_t v234 = *(void *)(v224 - 8);
        v224 -= 8;
        *--v228 = v234;
      }
      while (v224 != v225);
      goto LABEL_285;
    }
    v228 = v223;
    goto LABEL_286;
  }
LABEL_384:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 93));
  if (!*((unsigned char *)this + 770)) {
    goto LABEL_418;
  }
  v313 = (uint64_t *)*((void *)this + 74);
  v314 = (uint64_t *)v313[4];
  v315 = (uint64_t *)v313[5];
  if (v314 == v315) {
    goto LABEL_417;
  }
  v316 = (void *)v313[1];
  while (2)
  {
    uint64_t v317 = *v314;
    unint64_t v318 = v313[2];
    if ((unint64_t)v316 < v318)
    {
      if (v316) {
        void *v316 = v317;
      }
      ++v316;
      goto LABEL_388;
    }
    uint64_t v319 = ((uint64_t)v316 - *v313) >> 3;
    if ((unint64_t)(v319 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v320 = v318 - *v313;
    uint64_t v321 = v320 >> 2;
    if (v320 >> 2 <= (unint64_t)(v319 + 1)) {
      uint64_t v321 = v319 + 1;
    }
    if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v322 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v322 = v321;
    }
    if (v322)
    {
      uint64_t v323 = 8 * v322;
      uint64_t v324 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v313[3] + 16))(v313[3], 8 * v322, 8);
      v325 = (void *)(v324 + 8 * v319);
      uint64_t v322 = v324 + v323;
      if (v324) {
        void *v325 = v317;
      }
    }
    else
    {
      v325 = (void *)(8 * v319);
    }
    uint64_t v327 = *v313;
    uint64_t v326 = v313[1];
    uint64_t v328 = v326 - *v313;
    if (v326 == *v313)
    {
      v330 = v325;
      goto LABEL_413;
    }
    unint64_t v329 = v328 - 8;
    if ((unint64_t)(v328 - 8) < 0x38)
    {
      v330 = v325;
      do
      {
LABEL_411:
        uint64_t v336 = *(void *)(v326 - 8);
        v326 -= 8;
        *--v330 = v336;
      }
      while (v326 != v327);
      goto LABEL_412;
    }
    v330 = v325;
    if ((unint64_t)(v326 - (void)v325) < 0x20) {
      goto LABEL_411;
    }
    uint64_t v331 = (v329 >> 3) + 1;
    v332 = v325 - 2;
    v333 = (long long *)(v326 - 16);
    uint64_t v334 = v331 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v335 = *v333;
      *(v332 - 1) = *(v333 - 1);
      _OWORD *v332 = v335;
      v332 -= 2;
      v333 -= 2;
      v334 -= 4;
    }
    while (v334);
    v330 = &v325[-(v331 & 0x3FFFFFFFFFFFFFFCLL)];
    v326 -= 8 * (v331 & 0x3FFFFFFFFFFFFFFCLL);
    if (v331 != (v331 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_411;
    }
LABEL_412:
    uint64_t v326 = *v313;
LABEL_413:
    v316 = v325 + 1;
    uint64_t *v313 = (uint64_t)v330;
    v313[1] = (uint64_t)(v325 + 1);
    uint64_t v337 = v313[2];
    v313[2] = v322;
    if (v326) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v313[3] + 40))(v313[3], v326, v337 - v326);
    }
LABEL_388:
    v313[1] = (uint64_t)v316;
    if (++v314 != v315) {
      continue;
    }
    break;
  }
  uint64_t v338 = v313[4];
  if (v338 != v313[5]) {
    v313[5] = v338;
  }
LABEL_417:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 94));
LABEL_418:
  if (!*((unsigned char *)this + 768)) {
    goto LABEL_451;
  }
  v339 = (uint64_t *)*((void *)this + 59);
  v340 = (uint64_t *)v339[4];
  v341 = (uint64_t *)v339[5];
  if (v340 == v341) {
    goto LABEL_451;
  }
  v342 = (void *)v339[1];
  while (2)
  {
    uint64_t v343 = *v340;
    unint64_t v344 = v339[2];
    if ((unint64_t)v342 < v344)
    {
      if (v342) {
        void *v342 = v343;
      }
      ++v342;
      goto LABEL_422;
    }
    uint64_t v345 = ((uint64_t)v342 - *v339) >> 3;
    if ((unint64_t)(v345 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v346 = v344 - *v339;
    uint64_t v347 = v346 >> 2;
    if (v346 >> 2 <= (unint64_t)(v345 + 1)) {
      uint64_t v347 = v345 + 1;
    }
    if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v348 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v348 = v347;
    }
    if (v348)
    {
      uint64_t v349 = 8 * v348;
      uint64_t v350 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v339[3] + 16))(v339[3], 8 * v348, 8);
      v351 = (void *)(v350 + 8 * v345);
      uint64_t v348 = v350 + v349;
      if (v350) {
        void *v351 = v343;
      }
    }
    else
    {
      v351 = (void *)(8 * v345);
    }
    uint64_t v353 = *v339;
    uint64_t v352 = v339[1];
    uint64_t v354 = v352 - *v339;
    if (v352 == *v339)
    {
      v356 = v351;
      goto LABEL_447;
    }
    unint64_t v355 = v354 - 8;
    if ((unint64_t)(v354 - 8) < 0x38)
    {
      v356 = v351;
      do
      {
LABEL_445:
        uint64_t v362 = *(void *)(v352 - 8);
        v352 -= 8;
        *--v356 = v362;
      }
      while (v352 != v353);
      goto LABEL_446;
    }
    v356 = v351;
    if ((unint64_t)(v352 - (void)v351) < 0x20) {
      goto LABEL_445;
    }
    uint64_t v357 = (v355 >> 3) + 1;
    v358 = v351 - 2;
    v359 = (long long *)(v352 - 16);
    uint64_t v360 = v357 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v361 = *v359;
      *(v358 - 1) = *(v359 - 1);
      _OWORD *v358 = v361;
      v358 -= 2;
      v359 -= 2;
      v360 -= 4;
    }
    while (v360);
    v356 = &v351[-(v357 & 0x3FFFFFFFFFFFFFFCLL)];
    v352 -= 8 * (v357 & 0x3FFFFFFFFFFFFFFCLL);
    if (v357 != (v357 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_445;
    }
LABEL_446:
    uint64_t v352 = *v339;
LABEL_447:
    v342 = v351 + 1;
    uint64_t *v339 = (uint64_t)v356;
    v339[1] = (uint64_t)(v351 + 1);
    uint64_t v363 = v339[2];
    v339[2] = v348;
    if (v352) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v339[3] + 40))(v339[3], v352, v363 - v352);
    }
LABEL_422:
    v339[1] = (uint64_t)v342;
    if (++v340 != v341) {
      continue;
    }
    break;
  }
  uint64_t v364 = v339[4];
  if (v364 != v339[5]) {
    v339[5] = v364;
  }
LABEL_451:
  if (!*((unsigned char *)this + 769)) {
    goto LABEL_485;
  }
  v365 = (uint64_t *)*((void *)this + 75);
  v366 = (uint64_t *)v365[4];
  v367 = (uint64_t *)v365[5];
  if (v366 == v367) {
    goto LABEL_484;
  }
  v368 = (void *)v365[1];
  while (2)
  {
    uint64_t v369 = *v366;
    unint64_t v370 = v365[2];
    if ((unint64_t)v368 < v370)
    {
      if (v368) {
        void *v368 = v369;
      }
      ++v368;
      goto LABEL_455;
    }
    uint64_t v371 = ((uint64_t)v368 - *v365) >> 3;
    if ((unint64_t)(v371 + 1) >> 61) {
      goto LABEL_499;
    }
    uint64_t v372 = v370 - *v365;
    uint64_t v373 = v372 >> 2;
    if (v372 >> 2 <= (unint64_t)(v371 + 1)) {
      uint64_t v373 = v371 + 1;
    }
    if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v374 = v373;
    }
    if (v374)
    {
      uint64_t v375 = 8 * v374;
      uint64_t v376 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v365[3] + 16))(v365[3], 8 * v374, 8);
      v377 = (void *)(v376 + 8 * v371);
      uint64_t v374 = v376 + v375;
      if (v376) {
        void *v377 = v369;
      }
    }
    else
    {
      v377 = (void *)(8 * v371);
    }
    uint64_t v379 = *v365;
    uint64_t v378 = v365[1];
    uint64_t v380 = v378 - *v365;
    if (v378 == *v365)
    {
      v382 = v377;
      goto LABEL_480;
    }
    unint64_t v381 = v380 - 8;
    if ((unint64_t)(v380 - 8) < 0x38)
    {
      v382 = v377;
      do
      {
LABEL_478:
        uint64_t v388 = *(void *)(v378 - 8);
        v378 -= 8;
        *--v382 = v388;
      }
      while (v378 != v379);
      goto LABEL_479;
    }
    v382 = v377;
    if ((unint64_t)(v378 - (void)v377) < 0x20) {
      goto LABEL_478;
    }
    uint64_t v383 = (v381 >> 3) + 1;
    v384 = v377 - 2;
    v385 = (long long *)(v378 - 16);
    uint64_t v386 = v383 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v387 = *v385;
      *(v384 - 1) = *(v385 - 1);
      _OWORD *v384 = v387;
      v384 -= 2;
      v385 -= 2;
      v386 -= 4;
    }
    while (v386);
    v382 = &v377[-(v383 & 0x3FFFFFFFFFFFFFFCLL)];
    v378 -= 8 * (v383 & 0x3FFFFFFFFFFFFFFCLL);
    if (v383 != (v383 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_478;
    }
LABEL_479:
    uint64_t v378 = *v365;
LABEL_480:
    v368 = v377 + 1;
    uint64_t *v365 = (uint64_t)v382;
    v365[1] = (uint64_t)(v377 + 1);
    uint64_t v389 = v365[2];
    v365[2] = v374;
    if (v378) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v365[3] + 40))(v365[3], v378, v389 - v378);
    }
LABEL_455:
    v365[1] = (uint64_t)v368;
    if (++v366 != v367) {
      continue;
    }
    break;
  }
  uint64_t v390 = v365[4];
  if (v390 != v365[5]) {
    v365[5] = v390;
  }
LABEL_484:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 92));
LABEL_485:
  uint64_t v391 = *((void *)this + 102);
  uint64_t v392 = *((void *)this + 101);
  if (v391 != v392)
  {
    uint64_t v393 = *((void *)this + 102);
    do
    {
      v395 = *(void **)(v393 - 24);
      v393 -= 24;
      v394 = v395;
      if (v395)
      {
        *(void *)(v391 - 16) = v394;
        operator delete(v394);
      }
      uint64_t v391 = v393;
    }
    while (v393 != v392);
  }
  *((void *)this + 102) = v392;
  *((void *)this + 99) = *((void *)this + 98);
  v396 = (void *)*((void *)this + 108);
  if (v396)
  {
    do
    {
      if (v396[1])
      {
        unint64_t v398 = 0;
        v399 = v396 + 2;
        v400 = v396 + 2;
        v401 = (void (***)(void))(v396 + 2);
        do
        {
          v402 = (void (**)(void *))*v401;
          v401 += 15;
          (*v402)(v400);
          ++v398;
          v399 += 15;
          v400 = v401;
        }
        while (v398 < v396[1]);
      }
      v396[1] = 0;
      v396 = (void *)*v396;
    }
    while (v396);
    uint64_t v397 = *((void *)this + 108);
  }
  else
  {
    uint64_t v397 = 0;
  }
  *((void *)this + 109) = v397;
}

void parseUnnamedRow(std::string **a1, void *a2)
{
  v4 = 0;
  char v20 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = a2 + 4;
  uint64_t v6 = (void *)MEMORY[0x1E4FBA250];
  do
  {
    if (std::istream::peek() == 34)
    {
      *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (std::istream::get() == 34)
      {
        while (1)
        {
          if (*(_DWORD *)((char *)v5 + *(void *)(*a2 - 24)))
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: ", 7);
            unint64_t v7 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)": Parse error in CSV file\n", 26);
          }
          std::string::value_type v8 = std::istream::get();
          if (v8 == 92)
          {
            char v9 = std::istream::get();
            if (*(_DWORD *)((char *)v5 + *(void *)(*a2 - 24)))
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: ", 7);
              int8x16_t v14 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)": Parse error in CSV file\n", 26);
              break;
            }
            if (v9 == 114) {
              char v10 = 13;
            }
            else {
              char v10 = v9;
            }
            if (v9 == 116) {
              char v11 = 9;
            }
            else {
              char v11 = v10;
            }
            if (v9 == 110) {
              std::string::value_type v8 = 10;
            }
            else {
              std::string::value_type v8 = v11;
            }
          }
          else if (v8 == 34)
          {
            break;
          }
          std::string::push_back(&v21, v8);
        }
      }
    }
    else
    {
      *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      while (!*(_DWORD *)((char *)v5 + *(void *)(*a2 - 24)))
      {
        std::string::value_type v12 = std::istream::peek();
        if (v12 <= 0x2C && ((1 << v12) & 0x100000002400) != 0) {
          break;
        }
        std::istream::get();
        std::string::push_back(&v21, v12);
      }
    }
    if (v4 >= a1[2])
    {
      v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)a1, (uint64_t)&v21);
    }
    else
    {
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v4, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v15 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        v4->__r_.__value_.__r.__words[2] = v21.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v15;
      }
      ++v4;
    }
    a1[1] = v4;
    char v16 = std::istream::get();
    if (*(_DWORD *)((char *)v5 + *(void *)(*a2 - 24)) || v16 == 10) {
      goto LABEL_37;
    }
    if (v16 != 44)
    {
      if (v16 == 13)
      {
        if (std::istream::peek() == 10) {
          std::istream::get();
        }
      }
      else
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: ", 7);
        unint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)": Parse error in CSV file\n", 26);
      }
LABEL_37:
      char v17 = 0;
      char v20 = 1;
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        continue;
      }
LABEL_38:
      operator delete(v21.__r_.__value_.__l.__data_);
      continue;
    }
    char v17 = 1;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_38;
    }
  }
  while ((v17 & 1) != 0);
  if ((v20 & 1) == 0)
  {
    int8x16_t v19 = *a1;
    if (*a1)
    {
      if (v4 != v19)
      {
        do
        {
          if (SHIBYTE(v4[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v4[-1].__r_.__value_.__l.__data_);
          }
          --v4;
        }
        while (v4 != v19);
        v4 = v19;
      }
      a1[1] = v19;
      operator delete(v4);
    }
  }
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    char v9 = (char *)operator new(24 * v8);
  }
  else
  {
    char v9 = 0;
  }
  char v10 = (std::string *)&v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  char v11 = &v9[24 * v8];
  std::string::value_type v12 = v10 + 1;
  if (v3 == v2)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v13;
      --v10;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 3;
    }
    while (v3 != v2);
    uint64_t v2 = *(void ***)a1;
    int8x16_t v14 = *(void ***)(a1 + 8);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
    while (v14 != v2)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void md::CartographicGlobeMapEngineConfiguration::createMode(int a1@<W1>, void *a2@<X8>)
{
  unint64_t v4 = +[VKDebugSettings sharedSettings];
  if ([v4 forceFlyoverUnificationMode])
  {
    BOOL v5 = 1;
  }
  else if (GEOConfigGetBOOL())
  {
    uint64_t v6 = [MEMORY[0x1E4F64918] modernManager];
    unint64_t v7 = [v6 activeTileGroup];
    unint64_t v8 = [v7 activeTileSetForTileType:92 scale:1];
    BOOL v5 = v8 != 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      if (v5) {
        operator new();
      }
      operator new();
    case 8:
      if (v5) {
        operator new();
      }
      operator new();
    case 9:
      if (v5) {
        operator new();
      }
      operator new();
    case 10:
      operator new();
    case 11:
      operator new();
    case 12:
      operator new();
    case 13:
      operator new();
    case 18:
      operator new();
    default:
      *a2 = 0;
      return;
  }
}

void sub_1A1D1BEB4(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A1C403DD9F596);
  _Unwind_Resume(a1);
}

void sub_1A1D1BF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::DaVinciMapEngineMode::DaVinciMapEngineMode(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  v10[11] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = a5;
  }
  else
  {
    uint64_t v8 = 0;
  }
  v10[0] = a4;
  v10[1] = v8;
  char IsEnabled_VKMLayout_SPR = MapsFeature_IsEnabled_VKMLayout_SPR();
  md::DaVinciBaseMapEngineMode::DaVinciBaseMapEngineMode(a1, a2, a3, v10, IsEnabled_VKMLayout_SPR);
}

void sub_1A1D1C43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  md::DaVinciBaseMapEngineMode::~DaVinciBaseMapEngineMode(v23);
  _Unwind_Resume(a1);
}

void md::DaVinciBaseMapEngineMode::DaVinciBaseMapEngineMode(uint64_t a1, char a2, int a3, void *a4, char a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = md::MapEngineMode::MapEngineMode(a1, a2);
  *(void *)uint64_t v9 = &unk_1EF544D70;
  *(_OWORD *)(v9 + 536) = 0u;
  *(void *)(v9 + 552) = 0x3F80000000000000;
  *(unsigned char *)(v9 + 560) = a5;
  *(void *)(v9 + 568) = *a4;
  uint64_t v10 = a4[1];
  *(void *)(v9 + 576) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 536) = 100;
  *(unsigned char *)(a1 + 49) = 1;
  *(_DWORD *)(a1 + 52) = 21;
  if (a3)
  {
    char v11 = +[VKDebugSettings sharedSettings];
    if ([v11 daVinciCameraController])
    {
      std::string::value_type v12 = +[VKDebugSettings sharedSettings];
      int v13 = [v12 daVinciCameraControllerForceMercatorZoom];

      if (v13) {
        char v14 = 2;
      }
      else {
        char v14 = 1;
      }
    }
    else
    {

      char v14 = 2;
    }
    unint64_t v18 = (void *)(a1 + 128);
    uint64_t v17 = *(void *)(a1 + 128);
    *(unsigned char *)(a1 + 224) = v14;
    *(unsigned char *)(a1 + 225) = 5;
    if (v17)
    {
      do
      {
        while (1)
        {
          int8x16_t v19 = (void *)v17;
          unsigned int v20 = *(unsigned __int16 *)(v17 + 26);
          if (v20 < 9) {
            break;
          }
          uint64_t v17 = *v19;
          unint64_t v18 = v19;
          if (!*v19) {
            goto LABEL_17;
          }
        }
        if (v20 == 8) {
          goto LABEL_20;
        }
        uint64_t v17 = v19[1];
      }
      while (v17);
      unint64_t v18 = v19 + 1;
    }
    else
    {
      int8x16_t v19 = (void *)(a1 + 128);
    }
LABEL_17:
    std::string v21 = operator new(0x20uLL);
    v21[13] = 8;
    *(void *)std::string v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = v19;
    *unint64_t v18 = v21;
    uint64_t v22 = **(void **)(a1 + 120);
    if (v22)
    {
      *(void *)(a1 + 120) = v22;
      std::string v21 = (_WORD *)*v18;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v21);
    ++*(void *)(a1 + 136);
LABEL_20:
    __int16 v16 = 1;
    int v15 = 1;
  }
  else
  {
    *(_WORD *)(a1 + 224) = 1024;
    int v15 = 4;
    __int16 v16 = 3;
  }
  LOWORD(v67) = 1;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(a1 + 8, 1u, &v67)+ 18) = 1;
  LOWORD(v67) = 2560;
  *((void *)&v67 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v67);
  LOWORD(v67) = 6410;
  *((void *)&v67 + 1) = 0x3FD657184AE74487;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v67);
  LOWORD(v67) = 2560;
  *((void *)&v67 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v67);
  LOWORD(v67) = 6410;
  *((void *)&v67 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v67);
  LOWORD(v67) = 768;
  *((void *)&v67 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v67);
  LOWORD(v67) = 3843;
  *((void *)&v67 + 1) = 0x3FE38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v67);
  LOWORD(v67) = 4111;
  *((void *)&v67 + 1) = 0x3FF0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v67);
  LOWORD(v67) = 4624;
  *((void *)&v67 + 1) = 0x3FF38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v67);
  LOWORD(v67) = 6418;
  *((void *)&v67 + 1) = 0x3FF4F1A6C638D03FLL;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v67);
  uint64_t v23 = a1 + 144;
  LOBYTE(v67) = 0;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v67)+ 17) = 0;
  LOBYTE(v67) = 51;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x33u, &v67)+ 17) = 0;
  LOBYTE(v67) = 2;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v67)+ 17) = 0;
  LOBYTE(v67) = 29;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Du, &v67)+ 17) = 0;
  LOBYTE(v67) = 34;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x22u, &v67)+ 17) = 0;
  LOBYTE(v67) = 33;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x21u, &v67)+ 17) = 0;
  LOBYTE(v67) = 32;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x20u, &v67)+ 17) = 0;
  LOBYTE(v67) = 31;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Fu, &v67)+ 17) = 0;
  LOBYTE(v67) = 28;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Cu, &v67)+ 17) = 0;
  LOBYTE(v67) = 49;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x31u, &v67)+ 17) = 0;
  LOBYTE(v67) = 36;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x24u, &v67)+ 17) = 0;
  if (a3)
  {
    LOBYTE(v67) = 1;
    long long v24 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v67);
  }
  else
  {
    LOBYTE(v67) = 3;
    long long v24 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v67);
  }
  *((unsigned char *)v24 + 17) = 0;
  uint64_t v25 = [MEMORY[0x1E4F64860] sharedPlatform];
  int v26 = [v25 isInternalInstall];

  if (v26)
  {
    *(void *)&long long v61 = 0x3A3A2962B4F0D965;
    *((void *)&v61 + 1) = "md::DisplayLinkVerificationLogic]";
    uint64_t v62 = 32;
    *(void *)&long long v57 = 0x42BE82C40F9A8F80;
    *((void *)&v57 + 1) = "md::DisplayLinkVerificationContext]";
    *(void *)&long long v58 = 34;
    BYTE8(v58) = 1;
    unint64_t v64 = (unint64_t)&v66;
    uint64_t v65 = 0;
    *(void *)&long long v67 = &v68;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A96CC0;
    *(void *)&long long v69 = 17;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v64, (uint64_t)&v67);
  }
  *(void *)&long long v61 = 0xEA624BC935BAF297;
  *((void *)&v61 + 1) = "md::mun::MuninLogic]";
  uint64_t v27 = a1 + 232;
  uint64_t v62 = 19;
  *(void *)&long long v57 = 0x8EA84A1BD3791AFALL;
  *((void *)&v57 + 1) = "md::mun::MuninContext]";
  *(void *)&long long v58 = 21;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 3;
  long long v70 = xmmword_1E5A97EB0;
  long long v71 = unk_1E5A97EC0;
  *(void *)&long long v72 = 20;
  long long v68 = xmmword_1E5A97E90;
  long long v69 = unk_1E5A97EA0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 1, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0xA5031243356EEB30;
  *((void *)&v61 + 1) = "md::ElevatedOverlayLogic]";
  uint64_t v62 = 24;
  *(void *)&long long v57 = 0x1DCE255EA309B4ADLL;
  *((void *)&v57 + 1) = "md::ElevatedOverlayContext]";
  *(void *)&long long v58 = 26;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A96CD8;
  long long v69 = unk_1E5A96CE8;
  long long v70 = xmmword_1E5A96CF8;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 1, (uint64_t)&v67, (uint64_t)&v64);
  unint64_t v64 = 0x79FE0BD9535D5C4DLL;
  uint64_t v65 = "md::AnchorLogic]";
  uint64_t v66 = 15;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0x63B6FE00C0848868;
  *((void *)&v61 + 1) = "md::AnchorContext]";
  uint64_t v62 = 17;
  char v63 = 1;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A97998;
  long long v69 = unk_1E5A979A8;
  long long v70 = xmmword_1E5A979B8;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A98030;
  *(void *)&long long v59 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v61 = 0x85B8F2BE93EDF996;
  *((void *)&v61 + 1) = "md::AssetLogic]";
  uint64_t v62 = 14;
  *(void *)&long long v57 = 0x88B81689974D86F3;
  *((void *)&v57 + 1) = "md::AssetContext]";
  *(void *)&long long v58 = 16;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97E18;
  *(void *)&long long v69 = 29;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x582FBDD84553E215;
  *((void *)&v61 + 1) = "md::AssetInjectionLogic]";
  uint64_t v62 = 23;
  *(void *)&long long v57 = 0xD77FB76AFC10A710;
  *((void *)&v57 + 1) = "md::AssetInjectionContext]";
  *(void *)&long long v58 = 25;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97E00;
  *(void *)&long long v69 = 16;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x8E629317B3523E63;
  *((void *)&v61 + 1) = "md::CameraLogic]";
  uint64_t v62 = 15;
  *(void *)&long long v57 = 0x1AF456233693CD46;
  *((void *)&v57 + 1) = "md::CameraContext]";
  *(void *)&long long v58 = 17;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A979C8;
  *(void *)&long long v69 = 20;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  unint64_t v64 = 0x17767EADC5B287BLL;
  uint64_t v65 = "md::ElevationLogic]";
  uint64_t v66 = 18;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0x8BD499FBD96FBB9ELL;
  *((void *)&v61 + 1) = "md::ElevationContext]";
  uint64_t v62 = 20;
  char v63 = 1;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A97A70;
  long long v69 = unk_1E5A97A80;
  long long v70 = xmmword_1E5A97A90;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97AA0;
  *(void *)&long long v59 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v57 = 0x701C95861FC50076;
  *((void *)&v57 + 1) = "md::GeometryLogic]";
  *(void *)&long long v58 = 17;
  *(void *)&long long v67 = 0x3070CB6B3C7F21D3;
  *((void *)&v67 + 1) = "md::GeometryContext]";
  *(void *)&long long v68 = 19;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  unint64_t v64 = 0x4AC7AB7561675F6;
  uint64_t v65 = "md::GridLogic]";
  uint64_t v66 = 13;
  *(void *)&long long v61 = 0x336A901A15BB7353;
  *((void *)&v61 + 1) = "md::GridContext]";
  uint64_t v62 = 15;
  char v63 = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97DD0;
  *(void *)&long long v69 = 21;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97CE0;
  *(void *)&long long v59 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v61 = 0xC74495586E0C32F6;
  *((void *)&v61 + 1) = "md::HikingLogic]";
  uint64_t v62 = 15;
  *(void *)&long long v57 = 0x92F3DC114CADB853;
  *((void *)&v57 + 1) = "md::HikingContext]";
  *(void *)&long long v58 = 17;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 5;
  long long v72 = xmmword_1E5A96D48;
  long long v73 = *(_OWORD *)&off_1E5A96D58;
  long long v74 = xmmword_1E5A96D68;
  *(void *)&long long v75 = 21;
  long long v68 = xmmword_1E5A96D08;
  long long v69 = unk_1E5A96D18;
  long long v70 = xmmword_1E5A96D28;
  long long v71 = unk_1E5A96D38;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  unint64_t v64 = 0x8B855FB229857EA1;
  uint64_t v65 = "md::IdentifiedResourceLogic]";
  uint64_t v66 = 27;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0x12B1E486D3040E2CLL;
  *((void *)&v61 + 1) = "md::IdentifiedResourceContext]";
  uint64_t v62 = 29;
  char v63 = 1;
  *((void *)&v67 + 1) = 4;
  long long v70 = xmmword_1E5A97C40;
  long long v71 = unk_1E5A97C50;
  long long v72 = xmmword_1E5A97C60;
  long long v73 = *(_OWORD *)&off_1E5A97C70;
  long long v68 = xmmword_1E5A97C20;
  long long v69 = unk_1E5A97C30;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97C80;
  *(void *)&long long v59 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  unint64_t v64 = 0x20A1ED17D78F322BLL;
  uint64_t v65 = "md::LabelsLogic]";
  uint64_t v66 = 15;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0xA588623CD4116DAELL;
  *((void *)&v61 + 1) = "md::LabelsContext]";
  uint64_t v62 = 17;
  char v63 = 1;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97DD0;
  *(void *)&long long v69 = 21;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97DE8;
  *(void *)&long long v59 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v61 = 0x91E65CD7F1A7A7FALL;
  *((void *)&v61 + 1) = "md::LightingLogic]";
  uint64_t v62 = 17;
  *(void *)&long long v57 = 0x41E8D6E445F4145;
  *((void *)&v57 + 1) = "md::LightingLogicContext]";
  *(void *)&long long v58 = 24;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 4;
  long long v70 = xmmword_1E5A96DA0;
  long long v71 = unk_1E5A96DB0;
  long long v72 = xmmword_1E5A96DC0;
  long long v73 = *(_OWORD *)&off_1E5A96DD0;
  long long v68 = xmmword_1E5A96D80;
  long long v69 = unk_1E5A96D90;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  unint64_t v64 = 0x653D1F33EF15EF04;
  uint64_t v65 = "md::LoadingStatusLogic]";
  uint64_t v66 = 22;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0x90B6813830DCB581;
  *((void *)&v61 + 1) = "md::LoadingStatusContext]";
  uint64_t v62 = 24;
  char v63 = 1;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97E00;
  *(void *)&long long v69 = 16;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97E18;
  *(void *)&long long v59 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v61 = 0xBDB8C71631E0AA6CLL;
  *((void *)&v61 + 1) = "md::MapZoomLevelStyleLogic]";
  uint64_t v62 = 26;
  *(void *)&long long v57 = 0xF0AA2DB42EB710AFLL;
  *((void *)&v57 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(void *)&long long v58 = 33;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A97A40;
  long long v69 = unk_1E5A97A50;
  long long v70 = xmmword_1E5A97A60;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0xA1851987210F8D55;
  *((void *)&v61 + 1) = "md::MaterialLogic]";
  uint64_t v62 = 17;
  *(void *)&long long v57 = 0xD2404CDD1F9A6950;
  *((void *)&v57 + 1) = "md::MaterialContext]";
  *(void *)&long long v58 = 19;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 5;
  long long v72 = xmmword_1E5A96E20;
  long long v73 = *(_OWORD *)&off_1E5A96E30;
  long long v74 = xmmword_1E5A96E40;
  *(void *)&long long v75 = 21;
  long long v68 = xmmword_1E5A96DE0;
  long long v69 = unk_1E5A96DF0;
  long long v70 = xmmword_1E5A96E00;
  long long v71 = unk_1E5A96E10;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x87668FB4D087F775;
  *((void *)&v61 + 1) = "md::OverlaysLogic]";
  uint64_t v62 = 17;
  *(void *)&long long v57 = 0xADE8F13E6C18D970;
  *((void *)&v57 + 1) = "md::OverlaysContext]";
  *(void *)&long long v58 = 19;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 4;
  long long v70 = xmmword_1E5A97E50;
  long long v71 = unk_1E5A97E60;
  long long v72 = xmmword_1E5A97E70;
  long long v73 = *(_OWORD *)&off_1E5A97E80;
  long long v68 = xmmword_1E5A97E30;
  long long v69 = unk_1E5A97E40;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x3B36D43422893971;
  *((void *)&v61 + 1) = "md::DrapingLogic]";
  uint64_t v62 = 16;
  *(void *)&long long v57 = 0x1B9039CBDAB12E5CLL;
  *((void *)&v57 + 1) = "md::DrapingContext]";
  *(void *)&long long v58 = 18;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 4;
  long long v70 = xmmword_1E5A96E78;
  long long v71 = unk_1E5A96E88;
  long long v72 = xmmword_1E5A96E98;
  long long v73 = *(_OWORD *)&off_1E5A96EA8;
  long long v68 = xmmword_1E5A96E58;
  long long v69 = unk_1E5A96E68;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x3C2657D301A7BCF4;
  *((void *)&v61 + 1) = "md::PolygonLogic]";
  uint64_t v62 = 16;
  *(void *)&long long v57 = 0x401D4CCE847AB1D1;
  *((void *)&v57 + 1) = "md::PolygonContext]";
  *(void *)&long long v58 = 18;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A96EB8;
  long long v69 = unk_1E5A96EC8;
  long long v70 = xmmword_1E5A96ED8;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x88BE5DF80D25DA79;
  *((void *)&v61 + 1) = "md::MeshRenderableLogic]";
  uint64_t v62 = 23;
  *(void *)&long long v57 = 0xF014CCE28176CA44;
  *((void *)&v57 + 1) = "md::MeshRenderableContext]";
  *(void *)&long long v58 = 25;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 9;
  long long v78 = xmmword_1E5A96F88;
  long long v79 = *(_OWORD *)&off_1E5A96F98;
  long long v80 = xmmword_1E5A96FA8;
  uint64_t v81 = 15;
  long long v74 = xmmword_1E5A96F48;
  long long v75 = unk_1E5A96F58;
  long long v76 = xmmword_1E5A96F68;
  long long v77 = unk_1E5A96F78;
  long long v70 = xmmword_1E5A96F08;
  long long v71 = unk_1E5A96F18;
  long long v72 = xmmword_1E5A96F28;
  long long v73 = *(_OWORD *)&off_1E5A96F38;
  long long v68 = xmmword_1E5A96EE8;
  long long v69 = unk_1E5A96EF8;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  unint64_t v64 = 0xBEC1A12372CEEC00;
  uint64_t v65 = "md::NavigationLogic]";
  uint64_t v66 = 19;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0x1B8B241A8D896A1DLL;
  *((void *)&v61 + 1) = "md::NavigationContext]";
  uint64_t v62 = 21;
  char v63 = 1;
  *((void *)&v67 + 1) = 3;
  long long v70 = xmmword_1E5A97A00;
  long long v71 = unk_1E5A97A10;
  *(void *)&long long v72 = 17;
  long long v68 = xmmword_1E5A979E0;
  long long v69 = unk_1E5A979F0;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97A28;
  *(void *)&long long v59 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  unint64_t v64 = 0x7173CF8D2BE8FE53;
  uint64_t v65 = "md::RouteLineLogic]";
  uint64_t v66 = 18;
  *(void *)&long long v67 = &v68;
  *(void *)&long long v61 = 0x8E4587A431F9C696;
  *((void *)&v61 + 1) = "md::RouteLineContext]";
  uint64_t v62 = 20;
  char v63 = 1;
  *((void *)&v67 + 1) = 4;
  long long v70 = xmmword_1E5A97AD8;
  long long v71 = unk_1E5A97AE8;
  long long v72 = xmmword_1E5A97AF8;
  long long v73 = *(_OWORD *)&off_1E5A97B08;
  long long v68 = xmmword_1E5A97AB8;
  long long v69 = unk_1E5A97AC8;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 2;
  long long v58 = xmmword_1E5A97B18;
  long long v59 = unk_1E5A97B28;
  long long v60 = xmmword_1E5A97B38;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v61 = 0x1FCDF994595CDE24;
  *((void *)&v61 + 1) = "md::PuckLocationAnimationTracingLogic]";
  uint64_t v62 = 37;
  *(void *)&long long v57 = 0xA81ACD73F9C92AA1;
  *((void *)&v57 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(void *)&long long v58 = 39;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A98030;
  *(void *)&long long v69 = 21;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0xDEBD99099DA2C65BLL;
  *((void *)&v61 + 1) = "md::RegistryLogic]";
  uint64_t v62 = 17;
  *(void *)&long long v57 = 0xFBD83FDA8879FF7ELL;
  *((void *)&v57 + 1) = "md::RegistryContext]";
  *(void *)&long long v58 = 19;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97E00;
  *(void *)&long long v69 = 16;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x8B45D3D7944796A2;
  *((void *)&v61 + 1) = "md::PendingRegistryLogic]";
  uint64_t v62 = 24;
  *(void *)&long long v57 = 0xA8300AA8F44B09FFLL;
  *((void *)&v57 + 1) = "md::PendingRegistryContext]";
  *(void *)&long long v58 = 26;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97DB8;
  *(void *)&long long v69 = 23;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x8D737D0C0FC52C0CLL;
  *((void *)&v61 + 1) = "md::EntityDebugHighlightLogic]";
  uint64_t v62 = 29;
  *(void *)&long long v57 = 0xE75FAB3171C16149;
  *((void *)&v57 + 1) = "md::EntityDebugHighlightContext]";
  *(void *)&long long v58 = 31;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 4;
  long long v70 = xmmword_1E5A96FE0;
  long long v71 = unk_1E5A96FF0;
  long long v72 = xmmword_1E5A97000;
  long long v73 = *(_OWORD *)&off_1E5A97010;
  long long v68 = xmmword_1E5A96FC0;
  long long v69 = unk_1E5A96FD0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v57 = 0x5CBBA028798243FLL;
  *((void *)&v57 + 1) = "md::RouteOverlayLogic]";
  *(void *)&long long v58 = 21;
  *(void *)&long long v67 = 0x13043386C0978CC2;
  *((void *)&v67 + 1) = "md::RouteOverlayContext]";
  *(void *)&long long v68 = 23;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  *(void *)&long long v57 = 0x90C2E4CBBB63E301;
  *((void *)&v57 + 1) = "md::LayerDataLogic]";
  *(void *)&long long v58 = 18;
  *(void *)&long long v67 = 0x7851AF310F49C988;
  *((void *)&v67 + 1) = "md::LayerDataLogicContext]";
  *(void *)&long long v68 = 25;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  *(void *)&long long v61 = 0xAF46DE79C836B0D8;
  *((void *)&v61 + 1) = "md::TileSelectionLogic]";
  uint64_t v62 = 22;
  *(void *)&long long v57 = 0x64780CBD71DF7CF5;
  *((void *)&v57 + 1) = "md::TileSelectionContext]";
  *(void *)&long long v58 = 24;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 3;
  long long v70 = xmmword_1E5A97CB8;
  long long v71 = unk_1E5A97CC8;
  *(void *)&long long v72 = 21;
  long long v68 = xmmword_1E5A97C98;
  long long v69 = unk_1E5A97CA8;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  uint64_t v28 = 0xCBF29CE484222325;
  uint64_t v29 = 0x26u;
  do
    uint64_t v28 = 0x100000001B3 * (v28 ^ aStdStringViewG_928[v29++]);
  while (v29 != 368);
  unint64_t v64 = v28;
  uint64_t v65 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  uint64_t v66 = 330;
  *(void *)&long long v61 = 0x8677AD8BA9352C1DLL;
  *((void *)&v61 + 1) = "md::ResolvedTileSelectionContext]";
  uint64_t v62 = 32;
  char v63 = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 1;
  long long v68 = xmmword_1E5A97CE0;
  *(void *)&long long v69 = 24;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97CF8;
  *(void *)&long long v59 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  *(void *)&long long v61 = 0x87BA2765F9E38E05;
  *((void *)&v61 + 1) = "md::PendingSceneLogic]";
  uint64_t v62 = 21;
  *(void *)&long long v57 = 0x9F2276D081C2CB20;
  *((void *)&v57 + 1) = "md::PendingSceneContext]";
  *(void *)&long long v58 = 23;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 5;
  long long v72 = xmmword_1E5A97D50;
  long long v73 = *(_OWORD *)&off_1E5A97D60;
  long long v74 = xmmword_1E5A97D70;
  *(void *)&long long v75 = 25;
  long long v68 = xmmword_1E5A97D10;
  long long v69 = unk_1E5A97D20;
  long long v70 = xmmword_1E5A97D30;
  long long v71 = unk_1E5A97D40;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x1F3242C85D9F2F62;
  *((void *)&v61 + 1) = "md::SceneQueryLogic]";
  uint64_t v62 = 19;
  *(void *)&long long v57 = 0xDFC317497CF9A4BFLL;
  *((void *)&v57 + 1) = "md::SceneQueryContext]";
  *(void *)&long long v58 = 21;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 5;
  long long v72 = xmmword_1E5A97060;
  long long v73 = *(_OWORD *)&off_1E5A97070;
  long long v74 = xmmword_1E5A97080;
  *(void *)&long long v75 = 19;
  long long v68 = xmmword_1E5A97020;
  long long v69 = unk_1E5A97030;
  long long v70 = xmmword_1E5A97040;
  long long v71 = unk_1E5A97050;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v57 = 0xD2443A61CED86C69;
  *((void *)&v57 + 1) = "md::SettingsLogic]";
  *(void *)&long long v58 = 17;
  *(void *)&long long v67 = 0xC97B9E962ADF4AD4;
  *((void *)&v67 + 1) = "md::SettingsContext]";
  *(void *)&long long v68 = 19;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  *(void *)&long long v57 = 0x3F812BA5755E8568;
  *((void *)&v57 + 1) = "md::SharedResourcesLogic]";
  *(void *)&long long v58 = 24;
  *(void *)&long long v67 = 0xA60DDA5A69582425;
  *((void *)&v67 + 1) = "md::SharedResourcesContext]";
  *(void *)&long long v68 = 26;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  *(void *)&long long v61 = 0xDAD5CEE0DC5FF509;
  *((void *)&v61 + 1) = "md::SkyLogic]";
  uint64_t v62 = 12;
  *(void *)&long long v57 = 0x7C7EC6C7C111B0D0;
  *((void *)&v57 + 1) = "md::SkyLogicContext]";
  *(void *)&long long v58 = 19;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A97A40;
  long long v69 = unk_1E5A97A50;
  long long v70 = xmmword_1E5A97A60;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v57 = 0x2FED70A4459DFCA1;
  *((void *)&v57 + 1) = "md::StyleLogic]";
  *(void *)&long long v58 = 14;
  *(void *)&long long v67 = 0xE42D19AFCA302E68;
  *((void *)&v67 + 1) = "md::StyleLogicContext]";
  *(void *)&long long v68 = 21;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  *(void *)&long long v61 = 0x33D44727E59BE9E9;
  *((void *)&v61 + 1) = "md::PuckLogic]";
  uint64_t v62 = 13;
  *(void *)&long long v57 = 0x9AEE7E062376E454;
  *((void *)&v57 + 1) = "md::PuckContext]";
  *(void *)&long long v58 = 15;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 9;
  long long v78 = xmmword_1E5A97BE8;
  long long v79 = *(_OWORD *)&off_1E5A97BF8;
  long long v80 = xmmword_1E5A97C08;
  uint64_t v81 = 24;
  long long v74 = xmmword_1E5A97BA8;
  long long v75 = unk_1E5A97BB8;
  long long v76 = xmmword_1E5A97BC8;
  long long v77 = unk_1E5A97BD8;
  long long v70 = xmmword_1E5A97B68;
  long long v71 = unk_1E5A97B78;
  long long v72 = xmmword_1E5A97B88;
  long long v73 = *(_OWORD *)&off_1E5A97B98;
  long long v68 = xmmword_1E5A97B48;
  long long v69 = unk_1E5A97B58;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v57 = 0x6139471CB89383CBLL;
  *((void *)&v57 + 1) = "md::NonTiledAssetLogic]";
  *(void *)&long long v58 = 22;
  *(void *)&long long v67 = 0x932EE29454ABDC4ELL;
  *((void *)&v67 + 1) = "md::NonTiledAssetContext]";
  *(void *)&long long v68 = 24;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  *(void *)&long long v61 = 0x738A703709805788;
  *((void *)&v61 + 1) = "md::LocalNorthLogic]";
  uint64_t v62 = 19;
  *(void *)&long long v57 = 0xC81F81A7CB7767BBLL;
  *((void *)&v57 + 1) = "md::LocalNorthLogicContext]";
  *(void *)&long long v58 = 26;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 3;
  long long v70 = xmmword_1E5A970B8;
  long long v71 = unk_1E5A970C8;
  *(void *)&long long v72 = 17;
  long long v68 = xmmword_1E5A97098;
  long long v69 = unk_1E5A970A8;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v61 = 0x652FEFC5C602CC21;
  *((void *)&v61 + 1) = "md::StandardLogic]";
  uint64_t v62 = 17;
  *(void *)&long long v57 = 0xFFA06A69D924B0E8;
  *((void *)&v57 + 1) = "md::StandardLogicContext]";
  *(void *)&long long v58 = 24;
  BYTE8(v58) = 1;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A970E0;
  long long v69 = unk_1E5A970F0;
  long long v70 = xmmword_1E5A97100;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
  *(void *)&long long v57 = 0x41948F4CADE567A1;
  *((void *)&v57 + 1) = "md::DebugDrawLogic]";
  *(void *)&long long v58 = 18;
  *(void *)&long long v67 = 0x3619066E3FB5F2CLL;
  *((void *)&v67 + 1) = "md::DebugDrawContext]";
  *(void *)&long long v68 = 20;
  BYTE8(v68) = 1;
  *(void *)&long long v61 = &v62;
  *((void *)&v61 + 1) = 0;
  unint64_t v64 = (unint64_t)&v66;
  uint64_t v65 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v57, &v67, 0, (uint64_t)&v61, (uint64_t)&v64);
  unint64_t v64 = 0x2B7C4502BD3C99C6;
  uint64_t v65 = "md::ResolvedSceneLogic]";
  *(void *)&long long v61 = 0x99BED48DEFBBD82BLL;
  *((void *)&v61 + 1) = "md::SceneContext]";
  uint64_t v62 = 16;
  char v63 = 1;
  *(void *)&long long v57 = &v58;
  *((void *)&v57 + 1) = 1;
  long long v58 = xmmword_1E5A97DB8;
  *(void *)&long long v59 = 23;
  uint64_t v66 = 22;
  *(void *)&long long v67 = &v68;
  *((void *)&v67 + 1) = 2;
  long long v68 = xmmword_1E5A97D88;
  long long v69 = unk_1E5A97D98;
  long long v70 = xmmword_1E5A97DA8;
  gdc::LogicExecutionGraphBuilder::addLogic(v27, &v64, &v61, 0, (uint64_t)&v57, (uint64_t)&v67);
  if (*(unsigned char *)(a1 + 560))
  {
    *(void *)&long long v61 = 0x3BC31E741FCE930;
    *((void *)&v61 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciGround>]";
    uint64_t v62 = 55;
    *(void *)&long long v57 = 0x9052DC4F017D3735;
    *((void *)&v57 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciGround>]";
    *(void *)&long long v58 = 57;
    BYTE8(v58) = 1;
    *(void *)&long long v67 = &v68;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97E00;
    *(void *)&long long v69 = 16;
    unint64_t v64 = (unint64_t)&v66;
    uint64_t v65 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
    unint64_t v64 = 0x6E358E41B8F27CBFLL;
    uint64_t v65 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciGround, md::DaVinciGroundRenderable>]";
    uint64_t v66 = 88;
    *(void *)&long long v67 = &v68;
    *(void *)&long long v61 = 0xF20ACC1C64F7EF84;
    *((void *)&v61 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciGround>]";
    uint64_t v62 = 66;
    char v63 = 1;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97158;
    *(void *)&long long v69 = 19;
    *(void *)&long long v57 = &v58;
    *((void *)&v57 + 1) = 1;
    long long v58 = xmmword_1E5A97110;
    *(void *)&long long v59 = 57;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
    *(void *)&long long v61 = 0x1322DEACE457CC27;
    *((void *)&v61 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciGroundGlobe>]";
    uint64_t v62 = 60;
    *(void *)&long long v57 = 0x412AFB1345D08930;
    *((void *)&v57 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciGroundGlobe>]";
    *(void *)&long long v58 = 62;
    BYTE8(v58) = 1;
    *(void *)&long long v67 = &v68;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97E00;
    *(void *)&long long v69 = 16;
    unint64_t v64 = (unint64_t)&v66;
    uint64_t v65 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
    unint64_t v64 = 0x8555A05B7A670CC0;
    uint64_t v65 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciGroundGlobe, md::DaVinciGroundRenderable>]";
    uint64_t v66 = 93;
    *(void *)&long long v67 = &v68;
    *(void *)&long long v61 = 0x521897C68EA476F3;
    *((void *)&v61 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciGroundGlobe>]";
    uint64_t v62 = 71;
    char v63 = 1;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97158;
    *(void *)&long long v69 = 19;
    *(void *)&long long v57 = &v58;
    *((void *)&v57 + 1) = 1;
    long long v58 = xmmword_1E5A97128;
    *(void *)&long long v59 = 62;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
    *(void *)&long long v61 = 0xF1FE4046E5C81374;
    *((void *)&v61 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciBuildings>]";
    uint64_t v62 = 58;
    *(void *)&long long v57 = 0x5B0BFF71B88387C7;
    *((void *)&v57 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciBuildings>]";
    *(void *)&long long v58 = 60;
    BYTE8(v58) = 1;
    *(void *)&long long v67 = &v68;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97E00;
    *(void *)&long long v69 = 16;
    unint64_t v64 = (unint64_t)&v66;
    uint64_t v65 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
    unint64_t v64 = 0x20B829C32C58D309;
    uint64_t v65 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciBuildings, md::DaVinciGroundRenderable>]";
    uint64_t v66 = 91;
    *(void *)&long long v67 = &v68;
    *(void *)&long long v61 = 0xF5BDE3F396AD5C40;
    *((void *)&v61 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciBuildings>]";
    uint64_t v62 = 69;
    char v63 = 1;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97158;
    *(void *)&long long v69 = 19;
    *(void *)&long long v57 = &v58;
    *((void *)&v57 + 1) = 1;
    long long v58 = xmmword_1E5A97140;
    *(void *)&long long v59 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
    *(void *)&long long v61 = 0xB4DD094975FB84EALL;
    *((void *)&v61 + 1) = "md::CollectMapDataLogic<md::MapDataType::InjectedFeatures>]";
    uint64_t v62 = 58;
    *(void *)&long long v57 = 0x5A88E3C88DA0DCA1;
    *((void *)&v57 + 1) = "md::CollectMapDataContext<md::MapDataType::InjectedFeatures>]";
    *(void *)&long long v58 = 60;
    BYTE8(v58) = 1;
    *(void *)&long long v67 = &v68;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97E00;
    *(void *)&long long v69 = 16;
    unint64_t v64 = (unint64_t)&v66;
    uint64_t v65 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, (unint64_t *)&v61, &v57, 0, (uint64_t)&v67, (uint64_t)&v64);
    unint64_t v64 = 0x13C9C3CF7E2D459BLL;
    uint64_t v65 = "md::CollectRenderablesLogic<md::MapDataType::InjectedFeatures, md::DaVinciGroundRenderable>]";
    uint64_t v66 = 91;
    *(void *)&long long v67 = &v68;
    *(void *)&long long v61 = 0x552ACF95227023D6;
    *((void *)&v61 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::InjectedFeatures>]";
    uint64_t v62 = 69;
    char v63 = 1;
    *((void *)&v67 + 1) = 1;
    long long v68 = xmmword_1E5A97158;
    *(void *)&long long v69 = 19;
    *(void *)&long long v57 = &v58;
    *((void *)&v57 + 1) = 1;
    long long v58 = xmmword_1E5A97170;
    *(void *)&long long v59 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v27, &v64, &v61, 0, (uint64_t)&v67, (uint64_t)&v57);
  }
  LOBYTE(v67) = 44;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x2Cu, &v67)+ 17) = 1;
  LOBYTE(v67) = 40;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x28u, &v67)+ 17) = 1;
  LOBYTE(v67) = 39;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x27u, &v67)+ 17) = 1;
  LOBYTE(v67) = 50;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x32u, &v67)+ 17) = 1;
  LOBYTE(v67) = 18;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x12u, &v67)+ 17) = 1;
  LOBYTE(v67) = 30;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x1Eu, &v67)+ 17) = 2;
  LOBYTE(v67) = 52;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x34u, &v67)+ 17) = 2;
  LOBYTE(v67) = 38;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x26u, &v67)+ 17) = 2;
  LOBYTE(v67) = 37;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v23, 0x25u, &v67)+ 17) = 2;
  LOWORD(v67) = 44;
  WORD1(v67) = v15;
  WORD2(v67) = 46;
  WORD3(v67) = v15;
  WORD4(v67) = 50;
  WORD5(v67) = v15;
  WORD6(v67) = 33;
  HIWORD(v67) = v15;
  LODWORD(v68) = 327714;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x2Cu, &v67)+ 18) = v15 << 16;
  int v30 = WORD3(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v67), (_WORD *)&v67 + 2)+ 18) = v30 << 16;
  int v31 = WORD5(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v67), (_WORD *)&v67 + 4)+ 18) = v31 << 16;
  int v32 = HIWORD(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v67), (_WORD *)&v67 + 6)+ 18) = v32 << 16;
  int v33 = WORD1(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v68, &v68)+ 18) = v33 << 16;
  WORD2(v67) = 57;
  LODWORD(v67) = 327703;
  WORD3(v67) = v15;
  WORD4(v67) = 58;
  WORD5(v67) = v15;
  WORD6(v67) = 27;
  HIWORD(v67) = v15;
  LOWORD(v68) = 21;
  WORD1(v68) = v15;
  WORD2(v68) = 22;
  WORD3(v68) = v15;
  WORD4(v68) = 43;
  WORD5(v68) = v15;
  WORD6(v68) = 49;
  HIWORD(v68) = v15;
  LOWORD(v69) = 55;
  WORD1(v69) = v15;
  WORD2(v69) = 56;
  WORD3(v69) = v15;
  WORD4(v69) = 62;
  WORD5(v69) = v15;
  WORD6(v69) = 29;
  HIWORD(v69) = v15;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x17u, &v67)+ 18) = 327681;
  int v34 = WORD3(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v67), (_WORD *)&v67 + 2)+ 18) = (v34 << 16) | 1;
  int v35 = WORD5(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v67), (_WORD *)&v67 + 4)+ 18) = (v35 << 16) | 1;
  int v36 = HIWORD(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v67), (_WORD *)&v67 + 6)+ 18) = (v36 << 16) | 1;
  int v37 = WORD1(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v68, &v68)+ 18) = (v37 << 16) | 1;
  int v38 = WORD3(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v68), (_WORD *)&v68 + 2)+ 18) = (v38 << 16) | 1;
  int v39 = WORD5(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v68), (_WORD *)&v68 + 4)+ 18) = (v39 << 16) | 1;
  int v40 = HIWORD(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v68), (_WORD *)&v68 + 6)+ 18) = (v40 << 16) | 1;
  int v41 = WORD1(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v69, &v69)+ 18) = (v41 << 16) | 1;
  int v42 = WORD3(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v69), (_WORD *)&v69 + 2)+ 18) = (v42 << 16) | 1;
  int v43 = WORD5(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v69), (_WORD *)&v69 + 4)+ 18) = (v43 << 16) | 1;
  int v44 = HIWORD(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v69), (_WORD *)&v69 + 6)+ 18) = (v44 << 16) | 1;
  LOWORD(v67) = 51;
  WORD1(v67) = v15;
  WORD2(v67) = 54;
  WORD3(v67) = v15;
  WORD4(v67) = 63;
  WORD5(v67) = v15;
  WORD6(v67) = 35;
  HIWORD(v67) = v16;
  LOWORD(v68) = 20;
  WORD1(v68) = v15;
  WORD2(v68) = 24;
  WORD3(v68) = v15;
  WORD4(v68) = 69;
  WORD5(v68) = v15;
  WORD6(v68) = 48;
  HIWORD(v68) = v15;
  LOWORD(v69) = 74;
  WORD1(v69) = v15;
  WORD2(v69) = 70;
  WORD3(v69) = v15;
  WORD4(v69) = 47;
  WORD5(v69) = v15;
  WORD6(v69) = 66;
  HIWORD(v69) = v15;
  LOWORD(v70) = 80;
  WORD1(v70) = v15;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x33u, &v67)+ 18) = ((unsigned __int16)v15 << 16) | 2;
  int v45 = WORD3(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v67), (_WORD *)&v67 + 2)+ 18) = (v45 << 16) | 2;
  int v46 = WORD5(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v67), (_WORD *)&v67 + 4)+ 18) = (v46 << 16) | 2;
  int v47 = HIWORD(v67);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v67), (_WORD *)&v67 + 6)+ 18) = (v47 << 16) | 2;
  int v48 = WORD1(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v68, &v68)+ 18) = (v48 << 16) | 2;
  int v49 = WORD3(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v68), (_WORD *)&v68 + 2)+ 18) = (v49 << 16) | 2;
  int v50 = WORD5(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v68), (_WORD *)&v68 + 4)+ 18) = (v50 << 16) | 2;
  int v51 = HIWORD(v68);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v68), (_WORD *)&v68 + 6)+ 18) = (v51 << 16) | 2;
  int v52 = WORD1(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v69, &v69)+ 18) = (v52 << 16) | 2;
  int v53 = WORD3(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v69), (_WORD *)&v69 + 2)+ 18) = (v53 << 16) | 2;
  int v54 = WORD5(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v69), (_WORD *)&v69 + 4)+ 18) = (v54 << 16) | 2;
  int v55 = HIWORD(v69);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v69), (_WORD *)&v69 + 6)+ 18) = (v55 << 16) | 2;
  int v56 = WORD1(v70);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v70, &v70)+ 18) = (v56 << 16) | 2;
  operator new();
}

void sub_1A1D1EEA8(_Unwind_Exception *a1)
{
  unint64_t v4 = v1;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v3 + 568);
  md::MapEngineMode::~MapEngineMode(v3);
  _Unwind_Resume(a1);
}

void md::LandmarkRenderResources::LandmarkRenderResources(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  {
    operator new();
  }
  *(void *)(a1 + 328) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  uint64_t v6 = objc_msgSend(v5, "shaderLibrary", a1 + 280, a1 + 240, a1 + 224, a1 + 208, a1 + 192, a1 + 176, a1 + 160, a1 + 144, a1 + 128, a1 + 112, a1 + 96, a1 + 32, a1 + 8, a1 + 40, a1 + 16, a1 + 88, v5,
         a1 + 24);
  unint64_t v7 = +[VKPlatform sharedPlatform];
  *(unsigned char *)(a1 + 272) = [v7 supportsPerFragmentLighting];

  uint64_t v8 = *(void *)(v6 + 80);
  uint64_t v9 = *(void *)(v8 + 1304);
  uint64_t v10 = *(void *)(v8 + 1312);
  *(void *)&long long v173 = v9;
  *((void *)&v173 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v169 = 0;
  char v11 = (char *)operator new(0x198uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)char v11 = &unk_1EF5839A8;
  long long v12 = a3[1];
  *(_OWORD *)uint64_t v167 = *a3;
  *(_OWORD *)&v167[16] = v12;
  {
    if (v166)
    {
      {
        if (v166)
        {
          {
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B758 = 1;
          }
          ggl::LandmarkDepth::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E95825F8 = &ggl::LandmarkDepth::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E9582600 = 0;
          {
            ggl::LandmarkDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E9582630 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1E9582608 = (uint64_t)&ggl::LandmarkDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1E9582610 = xmmword_1A28FCED0;
        }
      }
      ggl::LandmarkDepth::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::LandmarkDepth::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::LandmarkDepthShader::typedReflection(v166);
      qword_1EB318980 = (uint64_t)&ggl::LandmarkDepthShader::typedReflection(void)::ref;
      {
        ggl::LandmarkDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95826A0 = 0;
        qword_1E95826A8 = (uint64_t)"";
        dword_1E95826B0 = 0;
        qword_1E95826B8 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E95826C0 = 3;
      }
      qword_1EB318988 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1EB318990 = 1;
      qword_1EB318998 = 0;
      unk_1EB3189A0 = 0;
      qword_1EB3189A8 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1EB3189B0 = 0;
      {
        ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9582640 = 0;
        qword_1E9582648 = (uint64_t)"view";
        dword_1E9582650 = 3;
        qword_1E9582658 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E9582660 = xmmword_1A28FCEB0;
        qword_1E9582670 = 1;
        unk_1E9582678 = "scale";
        dword_1E9582680 = 3;
        qword_1E9582688 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E9582690 = 4;
      }
      qword_1EB3189B8 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1EB3189C0 = 2;
    }
  }
  long long v13 = v173;
  if (*((void *)&v173 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v173 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((_DWORD *)v11 + 14) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 3) = &unk_1EF55B208;
  *((void *)v11 + 8) = &ggl::LandmarkDepth::BuildingPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v11 + 72) = v13;
  if (*((void *)&v13 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v11[136] = 0;
  *(_OWORD *)(v11 + 140) = xmmword_1A28FC970;
  *(void *)(v11 + 156) = 0;
  *(void *)(v11 + 172) = 0;
  *(void *)(v11 + 164) = 0;
  v11[184] = 0;
  *(_OWORD *)(v11 + 188) = xmmword_1A28FC970;
  *(void *)(v11 + 204) = 0;
  *(void *)(v11 + 220) = 0;
  *(void *)(v11 + 212) = 0;
  v11[232] = 0;
  *(_OWORD *)(v11 + 236) = xmmword_1A28FC970;
  *(void *)(v11 + 252) = 0;
  *(void *)(v11 + 268) = 0;
  *(void *)(v11 + 260) = 0;
  long long v14 = *(_OWORD *)&v167[16];
  *(_OWORD *)(v11 + 280) = *(_OWORD *)v167;
  *(_OWORD *)(v11 + 296) = v14;
  v11[312] = 0;
  *((void *)v11 + 48) = 0;
  *((_OWORD *)v11 + 22) = 0u;
  *((_OWORD *)v11 + 23) = 0u;
  *((_OWORD *)v11 + 20) = 0u;
  *((_OWORD *)v11 + 21) = 0u;
  *((void *)v11 + 49) = 0x100000001;
  v11[400] = 0;
  v11[88] = 0;
  *(_WORD *)(v11 + 89) = v171;
  v11[91] = v172;
  *(_OWORD *)(v11 + 92) = xmmword_1A28FC970;
  *(void *)(v11 + 108) = v169;
  *(void *)(v11 + 124) = 0;
  *(void *)(v11 + 116) = 0;
  v11[132] = 0;
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v13 + 1) + 16))(*((void *)&v13 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
  }
  v11[329] = 0;
  int8x16_t v15 = *(int8x16_t *)(v11 + 344);
  int8x16_t v16 = vceqzq_s8(*(int8x16_t *)(v11 + 328));
  int16x8_t v17 = vmovl_high_s8(v16);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  int8x16_t v20 = v19;
  int16x8_t v21 = vmovl_s8(*(int8x8_t *)v16.i8);
  int32x4_t v22 = vmovl_s16(*(int16x4_t *)v21.i8);
  *((void *)v11 + 3) = &unk_1EF55B068;
  v19.i64[0] = v22.u32[0];
  v19.i64[1] = v22.u32[1];
  int8x16_t v23 = v19;
  int32x4_t v24 = vmovl_high_s16(v17);
  v19.i64[0] = v24.u32[0];
  v19.i64[1] = v24.u32[1];
  int8x16_t v25 = v19;
  int32x4_t v26 = vmovl_high_s16(v21);
  v19.i64[0] = v26.u32[0];
  v19.i64[1] = v26.u32[1];
  int8x16_t v27 = v19;
  v19.i64[0] = v18.u32[2];
  v19.i64[1] = v18.u32[3];
  int8x16_t v28 = v19;
  v19.i64[0] = v22.u32[2];
  v19.i64[1] = v22.u32[3];
  int8x16_t v29 = v19;
  v19.i64[0] = v24.u32[2];
  v19.i64[1] = v24.u32[3];
  int8x16_t v30 = v19;
  v19.i64[0] = v26.u32[2];
  v19.i64[1] = v26.u32[3];
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v19);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v30);
  int8x16_t v33 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v29);
  int8x16_t v34 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v25);
  int8x16_t v35 = vceqzq_s8(v15);
  int16x8_t v36 = vmovl_high_s8(v35);
  int32x4_t v37 = vmovl_s16(*(int16x4_t *)v36.i8);
  v19.i64[0] = v37.u32[0];
  v19.i64[1] = v37.u32[1];
  int8x16_t v38 = v19;
  int16x8_t v39 = vmovl_s8(*(int8x8_t *)v35.i8);
  int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v19.i64[0] = v40.u32[0];
  v19.i64[1] = v40.u32[1];
  int8x16_t v41 = v19;
  int32x4_t v42 = vmovl_high_s16(v36);
  v19.i64[0] = v42.u32[0];
  v19.i64[1] = v42.u32[1];
  int8x16_t v43 = v19;
  int32x4_t v44 = vmovl_high_s16(v39);
  v19.i64[0] = v44.u32[0];
  v19.i64[1] = v44.u32[1];
  int8x16_t v45 = v19;
  v19.i64[0] = v37.u32[2];
  v19.i64[1] = v37.u32[3];
  int8x16_t v46 = v19;
  v19.i64[0] = v40.u32[2];
  v19.i64[1] = v40.u32[3];
  int8x16_t v47 = v19;
  v19.i64[0] = v42.u32[2];
  v19.i64[1] = v42.u32[3];
  int8x16_t v48 = v19;
  v19.i64[0] = v44.u32[2];
  v19.i64[1] = v44.u32[3];
  int8x16_t v49 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v48);
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v38), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v20));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v41), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v23));
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v43), v34);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v27));
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v46), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v28));
  int8x16_t v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v47), v33);
  int8x16_t v56 = vorrq_s8(v49, v32);
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v19), v31);
  int8x16_t v58 = vceqzq_s8(*(int8x16_t *)(v11 + 360));
  int16x8_t v59 = vmovl_s8(*(int8x8_t *)v58.i8);
  int32x4_t v60 = vmovl_high_s16(v59);
  v19.i64[0] = v60.i32[2];
  v19.i64[1] = v60.i32[3];
  int8x16_t v61 = v19;
  int16x8_t v62 = vmovl_high_s8(v58);
  int32x4_t v63 = vmovl_high_s16(v62);
  v19.i64[0] = v63.i32[2];
  v19.i64[1] = v63.i32[3];
  int8x16_t v64 = v19;
  int32x4_t v65 = vmovl_s16(*(int16x4_t *)v59.i8);
  v19.i64[0] = v65.i32[2];
  v19.i64[1] = v65.i32[3];
  int8x16_t v66 = v19;
  int32x4_t v67 = vmovl_s16(*(int16x4_t *)v62.i8);
  v19.i64[0] = v67.i32[2];
  v19.i64[1] = v67.i32[3];
  int8x16_t v68 = v19;
  v19.i64[0] = v60.i32[0];
  v19.i64[1] = v60.i32[1];
  int8x16_t v69 = v19;
  v19.i64[0] = v63.i32[0];
  v19.i64[1] = v63.i32[1];
  int8x16_t v70 = v19;
  v19.i64[0] = v65.i32[0];
  v19.i64[1] = v65.i32[1];
  int8x16_t v71 = v19;
  v19.i64[0] = v67.i32[0];
  v19.i64[1] = v67.i32[1];
  int8x16_t v72 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v19);
  int8x16_t v73 = vceqzq_s8(*(int8x16_t *)(v11 + 376));
  int16x8_t v74 = vmovl_high_s8(v73);
  int32x4_t v75 = vmovl_s16(*(int16x4_t *)v74.i8);
  v19.i64[0] = v75.i32[0];
  v19.i64[1] = v75.i32[1];
  int8x16_t v76 = v19;
  int16x8_t v77 = vmovl_s8(*(int8x8_t *)v73.i8);
  int32x4_t v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v19.i64[0] = v78.i32[0];
  v19.i64[1] = v78.i32[1];
  int8x16_t v79 = v19;
  int32x4_t v80 = vmovl_high_s16(v74);
  v19.i64[0] = v80.i32[0];
  v19.i64[1] = v80.i32[1];
  int8x16_t v81 = v19;
  int32x4_t v82 = vmovl_high_s16(v77);
  v19.i64[0] = v82.i32[0];
  v19.i64[1] = v82.i32[1];
  int8x16_t v83 = v19;
  v19.i64[0] = v75.i32[2];
  v19.i64[1] = v75.i32[3];
  int8x16_t v84 = v19;
  v19.i64[0] = v78.i32[2];
  v19.i64[1] = v78.i32[3];
  int8x16_t v85 = v19;
  v19.i64[0] = v80.i32[2];
  v19.i64[1] = v80.i32[3];
  int8x16_t v86 = v19;
  v19.i64[0] = v82.i32[2];
  v19.i64[1] = v82.i32[3];
  *((void *)v11 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v79), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v71)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v76), v72), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v83), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v69)), v53), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v81), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v70)),
                                               v52))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v85), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v66)), v55), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v84), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v68)), v54)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v19), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v61)), v57), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v86),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v64)),
                                               v56)))));
  v11[312] = 1;
  uint64_t v87 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v11 + 24;
  *(void *)(a1 + 136) = v11;
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  if (*((void *)&v173 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v173 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v173 + 1) + 16))(*((void *)&v173 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v173 + 1));
  }
  uint64_t v88 = *(void *)(v6 + 80);
  uint64_t v89 = *(void *)(v88 + 1328);
  uint64_t v90 = *(std::__shared_weak_count **)(v88 + 1336);
  uint64_t v169 = v89;
  v170 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v167[20], 0, 24);
  v167[0] = 0;
  *(_OWORD *)&v167[4] = xmmword_1A28FC970;
  char v168 = 15;
  uint64_t v91 = operator new(0x198uLL);
  v91[1] = 0;
  v91[2] = 0;
  *uint64_t v91 = &unk_1EF5837E8;
  long long v92 = a3[1];
  long long v173 = *a3;
  long long v174 = v92;
  uint64_t v93 = ggl::LandmarkFlat::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v91 + 3), &v169, (uint64_t)v167, &v173);
  uint64_t v94 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v93;
  *(void *)(a1 + 104) = v91;
  if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
  uint64_t v95 = v170;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
  }
  uint64_t v96 = *(void *)(v6 + 80);
  uint64_t v97 = *(void *)(v96 + 1328);
  uint64_t v98 = *(std::__shared_weak_count **)(v96 + 1336);
  uint64_t v169 = v97;
  v170 = v98;
  if (v98) {
    atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v167[24], 0, 20);
  v167[0] = 1;
  *(_OWORD *)&v167[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v167[20] = 7;
  char v168 = 15;
  v99 = operator new(0x198uLL);
  v99[1] = 0;
  v99[2] = 0;
  void *v99 = &unk_1EF5837E8;
  long long v100 = a3[1];
  long long v173 = *a3;
  long long v174 = v100;
  uint64_t v101 = ggl::LandmarkFlat::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v99 + 3), &v169, (uint64_t)v167, &v173);
  long long v102 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v101;
  *(void *)(a1 + 120) = v99;
  if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
  uint64_t v103 = v170;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
    if (*(unsigned char *)(a1 + 272))
    {
LABEL_34:
      uint64_t v104 = *(void *)(v6 + 80);
      uint64_t v105 = *(void *)(v104 + 2456);
      v106 = *(std::__shared_weak_count **)(v104 + 2464);
      uint64_t v169 = v105;
      v170 = v106;
      if (v106) {
        atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(&v167[20], 0, 24);
      v167[0] = 0;
      *(_OWORD *)&v167[4] = xmmword_1A28FC970;
      char v168 = 15;
      v107 = operator new(0x198uLL);
      v107[1] = 0;
      v107[2] = 0;
      void *v107 = &unk_1EF585880;
      long long v108 = a3[1];
      long long v173 = *a3;
      long long v174 = v108;
      uint64_t v109 = ggl::SpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v107 + 3), &v169, (uint64_t)v167, &v173);
      uint64_t v110 = *(std::__shared_weak_count **)(a1 + 152);
      *(void *)(a1 + 144) = v109;
      *(void *)(a1 + 152) = v107;
      if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
      unint64_t v111 = v170;
      if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      uint64_t v112 = *(void *)(v6 + 80);
      uint64_t v113 = *(void *)(v112 + 824);
      uint64_t v114 = *(std::__shared_weak_count **)(v112 + 832);
      uint64_t v169 = v113;
      v170 = v114;
      if (v114) {
        atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(&v167[20], 0, 24);
      v167[0] = 0;
      *(_OWORD *)&v167[4] = xmmword_1A28FC970;
      char v168 = 15;
      uint64_t v115 = operator new(0x198uLL);
      v115[1] = 0;
      v115[2] = 0;
      *uint64_t v115 = &unk_1EF5886A8;
      long long v116 = a3[1];
      long long v173 = *a3;
      long long v174 = v116;
      uint64_t v117 = ggl::FoggedSpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v115 + 3), &v169, (uint64_t)v167, &v173);
      v118 = *(std::__shared_weak_count **)(a1 + 168);
      *(void *)(a1 + 160) = v117;
      *(void *)(a1 + 168) = v115;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
      uint64_t v119 = v170;
      if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
      uint64_t v120 = *(void *)(v6 + 80);
      uint64_t v121 = *(void *)(v120 + 2456);
      unint64_t v122 = *(std::__shared_weak_count **)(v120 + 2464);
      uint64_t v169 = v121;
      v170 = v122;
      if (v122) {
        atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(&v167[24], 0, 20);
      v167[0] = 1;
      *(_OWORD *)&v167[4] = xmmword_1A28FCEC0;
      *(_DWORD *)&v167[20] = 7;
      char v168 = 15;
      v123 = operator new(0x198uLL);
      v123[1] = 0;
      v123[2] = 0;
      void *v123 = &unk_1EF585880;
      long long v124 = a3[1];
      long long v173 = *a3;
      long long v174 = v124;
      uint64_t v125 = ggl::SpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v123 + 3), &v169, (uint64_t)v167, &v173);
      v126 = *(std::__shared_weak_count **)(a1 + 184);
      *(void *)(a1 + 176) = v125;
      *(void *)(a1 + 184) = v123;
      if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
      uint64_t v127 = v170;
      if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
      uint64_t v128 = *(void *)(v6 + 80);
      uint64_t v129 = *(void *)(v128 + 824);
      uint64_t v130 = *(std::__shared_weak_count **)(v128 + 832);
      uint64_t v169 = v129;
      v170 = v130;
      if (v130) {
        atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(&v167[24], 0, 20);
      v167[0] = 1;
      *(_OWORD *)&v167[4] = xmmword_1A28FCEC0;
      *(_DWORD *)&v167[20] = 7;
      char v168 = 15;
      uint64_t v131 = operator new(0x198uLL);
      v131[1] = 0;
      v131[2] = 0;
      *uint64_t v131 = &unk_1EF5886A8;
      long long v132 = a3[1];
      long long v173 = *a3;
      long long v174 = v132;
      uint64_t v133 = ggl::FoggedSpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v131 + 3), &v169, (uint64_t)v167, &v173);
      v134 = *(std::__shared_weak_count **)(a1 + 200);
      *(void *)(a1 + 192) = v133;
      *(void *)(a1 + 200) = v131;
      if (!v134) {
        goto LABEL_92;
      }
      goto LABEL_90;
    }
  }
  else if (*(unsigned char *)(a1 + 272))
  {
    goto LABEL_34;
  }
  uint64_t v135 = *(void *)(v6 + 80);
  uint64_t v136 = *(void *)(v135 + 560);
  unint64_t v137 = *(std::__shared_weak_count **)(v135 + 568);
  uint64_t v169 = v136;
  v170 = v137;
  if (v137) {
    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v167[20], 0, 24);
  v167[0] = 0;
  *(_OWORD *)&v167[4] = xmmword_1A28FC970;
  char v168 = 15;
  uint64_t v138 = operator new(0x198uLL);
  v138[1] = 0;
  v138[2] = 0;
  *uint64_t v138 = &unk_1EF584070;
  long long v139 = a3[1];
  long long v173 = *a3;
  long long v174 = v139;
  uint64_t v140 = ggl::DiffuseLandmark::BuildingPipelineState::BuildingPipelineState((uint64_t)(v138 + 3), &v169, (uint64_t)v167, &v173);
  uint64_t v141 = *(std::__shared_weak_count **)(a1 + 216);
  *(void *)(a1 + 208) = v140;
  *(void *)(a1 + 216) = v138;
  if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
  uint64_t v142 = v170;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
  }
  uint64_t v143 = *(void *)(v6 + 80);
  uint64_t v144 = *(void *)(v143 + 752);
  uint64_t v145 = *(std::__shared_weak_count **)(v143 + 760);
  uint64_t v169 = v144;
  v170 = v145;
  if (v145) {
    atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v167[20], 0, 24);
  v167[0] = 0;
  *(_OWORD *)&v167[4] = xmmword_1A28FC970;
  char v168 = 15;
  uint64_t v146 = operator new(0x198uLL);
  v146[1] = 0;
  v146[2] = 0;
  *uint64_t v146 = &unk_1EF5884E8;
  long long v147 = a3[1];
  long long v173 = *a3;
  long long v174 = v147;
  uint64_t v148 = ggl::FoggedDiffuseLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v146 + 3), &v169, (uint64_t)v167, &v173);
  v149 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = v148;
  *(void *)(a1 + 232) = v146;
  if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
  }
  uint64_t v150 = v170;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
  uint64_t v151 = *(void *)(v6 + 80);
  uint64_t v152 = *(void *)(v151 + 560);
  uint64_t v153 = *(std::__shared_weak_count **)(v151 + 568);
  uint64_t v169 = v152;
  v170 = v153;
  if (v153) {
    atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v167[24], 0, 20);
  v167[0] = 1;
  *(_OWORD *)&v167[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v167[20] = 7;
  char v168 = 15;
  long long v154 = operator new(0x198uLL);
  v154[1] = 0;
  v154[2] = 0;
  *long long v154 = &unk_1EF584070;
  long long v155 = a3[1];
  long long v173 = *a3;
  long long v174 = v155;
  uint64_t v156 = ggl::DiffuseLandmark::BuildingPipelineState::BuildingPipelineState((uint64_t)(v154 + 3), &v169, (uint64_t)v167, &v173);
  uint64_t v157 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = v156;
  *(void *)(a1 + 248) = v154;
  if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
    std::__shared_weak_count::__release_weak(v157);
  }
  v158 = v170;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
  }
  uint64_t v159 = *(void *)(v6 + 80);
  uint64_t v160 = *(void *)(v159 + 752);
  v161 = *(std::__shared_weak_count **)(v159 + 760);
  uint64_t v169 = v160;
  v170 = v161;
  if (v161) {
    atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v167[24], 0, 20);
  v167[0] = 1;
  *(_OWORD *)&v167[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v167[20] = 7;
  char v168 = 15;
  uint64_t v162 = operator new(0x198uLL);
  v162[1] = 0;
  v162[2] = 0;
  *uint64_t v162 = &unk_1EF5884E8;
  long long v163 = a3[1];
  long long v173 = *a3;
  long long v174 = v163;
  uint64_t v164 = ggl::FoggedDiffuseLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v162 + 3), &v169, (uint64_t)v167, &v173);
  v134 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = v164;
  *(void *)(a1 + 264) = v162;
  if (!v134)
  {
LABEL_92:
    uint64_t v165 = v170;
    if (v170)
    {
      if (!atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    operator new();
  }
LABEL_90:
  if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
  goto LABEL_92;
}

void sub_1A1D22B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ggl::Batcher *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,void *a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  std::function<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup * ()(void)>::~function(v60);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v59);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v58);
  std::function<void ()(ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup *)>::~function(&a53);
  std::function<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup * ()(void)>::~function(&a57);
  MEMORY[0x1A6239270](v58, 0x10A0C40D234DDC7);
  ggl::Batcher::~Batcher(a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v57 + 32));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a18);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a19);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a24);
  uint64_t v62 = v57[10];
  v57[10] = 0;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  uint64_t v63 = v57[9];
  v57[9] = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  uint64_t v64 = v57[8];
  v57[8] = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = v57[7];
  v57[7] = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = v57[6];
  v57[6] = 0;
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::FoggedSpecularLandmark::LandmarkPipelineSetup>>::~unique_ptr[abi:nn180100](a22);
  std::unique_ptr<ggl::FragmentedPool<ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup>>::~unique_ptr[abi:nn180100](a20);
  std::unique_ptr<ggl::FragmentedPool<ggl::LandmarkFlat::LandmarkPipelineSetup>>::~unique_ptr[abi:nn180100](a26);
  std::unique_ptr<ggl::FragmentedPool<ggl::SpecularLandmark::LandmarkPipelineSetup>>::~unique_ptr[abi:nn180100](a23);
  std::unique_ptr<ggl::FragmentedPool<ggl::DiffuseLandmark::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](a21);
  std::unique_ptr<ggl::FragmentedPool<ggl::LandmarkDepth::BuildingPipelineSetup>>::~unique_ptr[abi:nn180100](v57);

  _Unwind_Resume(a1);
}

uint64_t ggl::FoggedSpecularLandmark::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int32x4_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B758 = 1;
          }
          ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9586308 = &ggl::FoggedSpecularLandmark::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1E9586310 = 0;
          {
            ggl::FoggedSpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1E9586340 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9586348 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9586350 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E9586358 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E9586360 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E9586368 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9586318 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1E9586320 = xmmword_1A28FD020;
        }
      }
      ggl::FoggedSpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedSpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedSpecularLandmarkShader::typedReflection(v83);
      qword_1EB3194A0 = (uint64_t)&ggl::FoggedSpecularLandmarkShader::typedReflection(void)::ref;
      {
        ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95864D0 = 0;
        qword_1E95864D8 = (uint64_t)"";
        dword_1E95864E0 = 0;
        qword_1E95864E8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1E95864F0 = 3;
      }
      qword_1EB3194A8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1EB3194B0 = 1;
      qword_1EB3194B8 = 0;
      unk_1EB3194C0 = 1;
      qword_1EB3194C8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1EB3194D0 = 0;
      {
        ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9586380 = 0;
        qword_1E9586388 = (uint64_t)"skyfog";
        dword_1E9586390 = 3;
        qword_1E9586398 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E95863A0 = xmmword_1A28FD030;
        qword_1E95863B0 = 1;
        unk_1E95863B8 = "view";
        dword_1E95863C0 = 3;
        qword_1E95863C8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1E95863D0 = vdupq_n_s64(2uLL);
        qword_1E95863E0 = 2;
        unk_1E95863E8 = "scale";
        dword_1E95863F0 = 3;
        qword_1E95863F8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        unk_1E9586400 = xmmword_1A28FD040;
        qword_1E9586410 = 3;
        unk_1E9586418 = "style";
        dword_1E9586420 = 3;
        qword_1E9586428 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1E9586430 = xmmword_1A28FD050;
        qword_1E9586440 = 4;
        unk_1E9586448 = "gradient";
        dword_1E9586450 = 3;
        qword_1E9586458 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantGradientBinding(void)::reflection;
        unk_1E9586460 = xmmword_1A28FCF80;
        qword_1E9586470 = 5;
        unk_1E9586478 = "lightConfig";
        dword_1E9586480 = 3;
        qword_1E9586488 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9586490 = xmmword_1A28FD060;
        qword_1E95864A0 = 6;
        unk_1E95864A8 = "fade";
        dword_1E95864B0 = 3;
        qword_1E95864B8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantFadeBinding(void)::reflection;
        unk_1E95864C0 = 2;
      }
      qword_1EB3194D8 = (uint64_t)&ggl::FoggedSpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1EB3194E0 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FoggedSpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55FA88;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::SpecularLandmark::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int32x4_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B758 = 1;
          }
          ggl::SpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E9584078 = &ggl::SpecularLandmark::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1E9584080 = 0;
          {
            ggl::SpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1E95840B0 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E95840B8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E95840C0 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E95840C8 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E95840D0 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E95840D8 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E9584088 = (uint64_t)&ggl::SpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1E9584090 = xmmword_1A28FD020;
        }
      }
      ggl::SpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::SpecularLandmarkShader::typedReflection(v83);
      qword_1EB318EB0 = (uint64_t)&ggl::SpecularLandmarkShader::typedReflection(void)::ref;
      {
        ggl::SpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584240 = 0;
        qword_1E9584248 = (uint64_t)"";
        dword_1E9584250 = 0;
        qword_1E9584258 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1E9584260 = 3;
      }
      qword_1EB318EB8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1EB318EC0 = 1;
      qword_1EB318EC8 = 0;
      unk_1EB318ED0 = 1;
      qword_1EB318ED8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1EB318EE0 = 0;
      {
        ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1E95840F0 = 0;
        qword_1E95840F8 = (uint64_t)"skyfog";
        dword_1E9584100 = 3;
        qword_1E9584108 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E9584110 = xmmword_1A28FD030;
        qword_1E9584120 = 1;
        unk_1E9584128 = "view";
        dword_1E9584130 = 3;
        qword_1E9584138 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        unk_1E9584140 = vdupq_n_s64(2uLL);
        qword_1E9584150 = 2;
        unk_1E9584158 = "scale";
        dword_1E9584160 = 3;
        qword_1E9584168 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E9584170 = xmmword_1A28FD040;
        qword_1E9584180 = 3;
        unk_1E9584188 = "style";
        dword_1E9584190 = 3;
        qword_1E9584198 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        unk_1E95841A0 = xmmword_1A28FD050;
        qword_1E95841B0 = 4;
        unk_1E95841B8 = "gradient";
        dword_1E95841C0 = 3;
        qword_1E95841C8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1E95841D0 = xmmword_1A28FCF80;
        qword_1E95841E0 = 5;
        unk_1E95841E8 = "lightConfig";
        dword_1E95841F0 = 3;
        qword_1E95841F8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E9584200 = xmmword_1A28FD060;
        qword_1E9584210 = 6;
        unk_1E9584218 = "fade";
        dword_1E9584220 = 3;
        qword_1E9584228 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantFadeBinding(void)::reflection;
        unk_1E9584230 = 2;
      }
      qword_1EB318EE8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1EB318EF0 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::SpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55D578;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::LandmarkFlat::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int32x4_t v82 = a4;
    int8x16_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B758 = 1;
          }
          ggl::LandmarkFlat::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E95822F8 = &ggl::LandmarkFlat::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1E9582300 = 0;
          {
            ggl::LandmarkFlat::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1E9582330 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E9582338 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E9582340 = ggl::Building::Style::reflection(void)::reflection;
          }
          qword_1E9582308 = (uint64_t)&ggl::LandmarkFlat::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1E9582310 = xmmword_1A28FE1F0;
        }
      }
      ggl::LandmarkFlat::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::LandmarkFlat::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::LandmarkFlatShader::typedReflection(v83);
      qword_1EB318930 = (uint64_t)&ggl::LandmarkFlatShader::typedReflection(void)::ref;
      {
        ggl::LandmarkFlat::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9582410 = 0;
        qword_1E9582418 = (uint64_t)"";
        dword_1E9582420 = 0;
        qword_1E9582428 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1E9582430 = 3;
      }
      qword_1EB318938 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1EB318940 = 1;
      qword_1EB318948 = 0;
      unk_1EB318950 = 1;
      qword_1EB318958 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1EB318960 = 0;
      {
        ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9582350 = 0;
        qword_1E9582358 = (uint64_t)"skyfog";
        dword_1E9582360 = 3;
        qword_1E9582368 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1E9582370 = xmmword_1A28FD030;
        qword_1E9582380 = 1;
        unk_1E9582388 = "view";
        dword_1E9582390 = 3;
        qword_1E9582398 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        unk_1E95823A0 = vdupq_n_s64(2uLL);
        qword_1E95823B0 = 2;
        unk_1E95823B8 = "scale";
        dword_1E95823C0 = 3;
        qword_1E95823C8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1E95823D0 = xmmword_1A28FD040;
        qword_1E95823E0 = 3;
        unk_1E95823E8 = "style";
        dword_1E95823F0 = 3;
        qword_1E95823F8 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        unk_1E9582400 = 8;
      }
      qword_1EB318968 = (uint64_t)&ggl::LandmarkFlat::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1EB318970 = 4;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::LandmarkFlat::LandmarkPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55AD28;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22FoggedSpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BAF0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16SpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57B1A8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13LandmarkDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AD70;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12LandmarkFlat21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57AD28;
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::FoggedSpecularLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576758;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::SpecularLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::LandmarkFlat::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5766C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::LandmarkDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576680;
  a2[1] = v2;
  return result;
}

void md::AnchorManager::newAnchorAtCoordinate(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    if (a4) {
      operator new();
    }
    operator new();
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  if (a4) {
    operator new();
  }
  operator new();
}

void sub_1A1D25218(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::Anchor::setCoordinate(uint64_t a1, long long *a2)
{
  if (*(double *)a2 != *(double *)(a1 + 40)
    || *((double *)a2 + 1) != *(double *)(a1 + 48)
    || *((double *)a2 + 2) != *(double *)(a1 + 56))
  {
    long long v3 = *a2;
    *(void *)(a1 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v3;
    float64_t v13 = *((double *)a2 + 1);
    uint64_t v4 = *((void *)a2 + 2);
    long double v5 = tan(*(double *)a2 * 0.00872664626 + 0.785398163);
    long double v6 = log(v5);
    v7.f64[0] = v13;
    v7.f64[1] = v6;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)(a1 + 16) = vmlaq_f64(_Q1, (float64x2_t)xmmword_1A28FCBE0, v7);
    *(void *)(a1 + 32) = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    [WeakRetained anchorWorldPointDidChange:a1];
  }
}

void sub_1A1D253C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void md::DebugLayerRenderResources::DebugLayerRenderResources(md::DebugLayerRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  uint64_t v357 = *MEMORY[0x1E4F143B8];
  long double v5 = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  uint64_t v348 = v5;
  uint64_t v6 = [(VKSharedResources *)v5 shaderLibrary];
  [(VKSharedResources *)v348 textureManager];
  uint64_t v8 = **(void **)v349;
  uint64_t v7 = *(void *)(*(void *)v349 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v9 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = v8;
  *((void *)this + 31) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (*(void *)&v349[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v349[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)&v349[8] + 16))(*(void *)&v349[8]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v349[8]);
  }
  uint64_t v10 = *(void *)(v6 + 80);
  uint64_t v12 = *(void *)(v10 + 392);
  int16x8_t v11 = *(std::__shared_weak_count **)(v10 + 400);
  uint64_t v353 = v12;
  uint64_t v354 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v350 = 0;
  *(void *)&v349[24] = 0;
  int v351 = 0;
  v349[0] = 1;
  *(_OWORD *)&v349[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v349[20] = 7;
  char v352 = 15;
  float64_t v13 = operator new(0x198uLL);
  v13[1] = 0;
  v13[2] = 0;
  *float64_t v13 = &unk_1EF589048;
  long long v14 = *(_OWORD *)&a3->colorFormatsCount;
  long long v355 = *(_OWORD *)a3->colorFormats;
  long long v356 = v14;
  uint64_t v15 = ggl::Debug::BasePipelineState::BasePipelineState((uint64_t)(v13 + 3), &v353, (uint64_t)v349, &v355);
  int32x4_t v16 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v15;
  *((void *)this + 1) = v13;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  int8x16_t v17 = v354;
  if (v354 && !atomic_fetch_add(&v354->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = *(void *)(v6 + 80);
  uint64_t v20 = *(void *)(v18 + 440);
  uint64_t v19 = *(void *)(v18 + 448);
  *(void *)&long long v355 = v20;
  *((void *)&v355 + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v21 = (char *)operator new(0x198uLL);
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = 0;
  *(void *)int8x16_t v21 = &unk_1EF589080;
  long long v22 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v349 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v349[16] = v22;
  {
    if (v344)
    {
      {
        if (v344)
        {
          {
            {
              ggl::MeshTyped<ggl::Debug::LineVBO>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::lineVBOReflection;
            }
            ggl::MeshTyped<ggl::Debug::LineVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::LineVBO>::attributesReflection(void)::r;
            unk_1EB31D9A8 = 1;
          }
          ggl::Debug::LinePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Debug::LineVBO>::typedReflection(void)::r;
          unk_1E95883B0 = &ggl::Debug::pipelineDataLinePipelineDeviceStructs(void)::ref;
          qword_1E95883B8 = 0;
          {
            ggl::Debug::pipelineDataLinePipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            *(void *)algn_1E9588498 = ggl::Debug::View::reflection(void)::reflection;
            qword_1E95884A0 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
            unk_1E95884A8 = ggl::Debug::Viewport::reflection(void)::reflection;
          }
          qword_1E95883C0 = (uint64_t)&ggl::Debug::pipelineDataLinePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E95883C8 = xmmword_1A28FCFA0;
        }
      }
      ggl::Debug::LinePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::LinePipelineSetup::typedReflection(void)::ref;
      ggl::DebugLineShader::typedReflection(v344);
      qword_1E95883E8 = (uint64_t)&ggl::DebugLineShader::typedReflection(void)::ref;
      {
        ggl::Debug::pipelineStateLinePipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9588648 = 0;
        qword_1E9588650 = (uint64_t)"";
        dword_1E9588658 = 0;
        qword_1E9588660 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineAttributeBinding_0(void)::attr;
        unk_1E9588668 = 2;
      }
      qword_1E95883F0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E95883F8 = 1;
      qword_1E9588400 = 0;
      unk_1E9588408 = 0;
      qword_1E9588410 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineDeviceStructBinding(void)::ref;
      unk_1E9588418 = 0;
      {
        ggl::Debug::pipelineStateLinePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9588558 = 0;
        qword_1E9588560 = (uint64_t)"style";
        dword_1E9588568 = 3;
        qword_1E9588570 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantStyleBinding(void)::reflection;
        unk_1E9588578 = xmmword_1A28FCEF0;
        qword_1E9588588 = 1;
        unk_1E9588590 = "view";
        dword_1E9588598 = 3;
        qword_1E95885A0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantViewBinding(void)::reflection;
        unk_1E95885A8 = xmmword_1A28FC6E0;
        qword_1E95885B8 = 2;
        unk_1E95885C0 = "transform";
        dword_1E95885C8 = 3;
        qword_1E95885D0 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantTransformBinding(void)::reflection;
        unk_1E95885D8 = xmmword_1A28FE470;
        qword_1E95885E8 = 3;
        unk_1E95885F0 = "viewport";
        dword_1E95885F8 = 3;
        qword_1E9588600 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantViewportBinding(void)::reflection;
        unk_1E9588608 = 1;
      }
      qword_1E9588420 = (uint64_t)&ggl::Debug::pipelineStateLinePipelineConstantStructBinding(void)::ref;
      unk_1E9588428 = 4;
    }
  }
  long long v23 = v355;
  if (*((void *)&v355 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v21 + 4) = 0;
  *((void *)v21 + 5) = 0;
  *((_DWORD *)v21 + 14) = 0;
  *((void *)v21 + 6) = 0;
  *((void *)v21 + 3) = &unk_1EF55B208;
  *((void *)v21 + 8) = &ggl::Debug::LinePipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v21 + 72) = v23;
  if (*((void *)&v23 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v21[136] = 0;
  *(_OWORD *)(v21 + 140) = xmmword_1A28FC970;
  *(void *)(v21 + 156) = 0;
  *(void *)(v21 + 172) = 0;
  *(void *)(v21 + 164) = 0;
  v21[184] = 0;
  *(_OWORD *)(v21 + 188) = xmmword_1A28FC970;
  *(void *)(v21 + 204) = 0;
  *(void *)(v21 + 220) = 0;
  *(void *)(v21 + 212) = 0;
  v21[232] = 0;
  *(_OWORD *)(v21 + 236) = xmmword_1A28FC970;
  *(void *)(v21 + 252) = 0;
  *(void *)(v21 + 268) = 0;
  *(void *)(v21 + 260) = 0;
  long long v24 = *(_OWORD *)&v349[16];
  *(_OWORD *)(v21 + 280) = *(_OWORD *)v349;
  *(_OWORD *)(v21 + 296) = v24;
  v21[312] = 0;
  *((void *)v21 + 48) = 0;
  *((_OWORD *)v21 + 22) = 0u;
  *((_OWORD *)v21 + 23) = 0u;
  *((_OWORD *)v21 + 20) = 0u;
  *((_OWORD *)v21 + 21) = 0u;
  *((void *)v21 + 49) = 0x100000001;
  v21[400] = 0;
  v21[88] = 1;
  *(_WORD *)(v21 + 89) = v353;
  v21[91] = BYTE2(v353);
  *(_OWORD *)(v21 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v21 + 27) = 7;
  *((void *)v21 + 14) = 0;
  *((void *)v21 + 15) = 0;
  *((_DWORD *)v21 + 32) = 0;
  v21[132] = 15;
  if (*((void *)&v23 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v23 + 1) + 16))(*((void *)&v23 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
  }
  v21[329] = 0;
  int8x16_t v25 = vceqzq_s8(*(int8x16_t *)(v21 + 328));
  int16x8_t v26 = vmovl_high_s8(v25);
  int32x4_t v27 = vmovl_s16(*(int16x4_t *)v26.i8);
  v28.i64[0] = v27.u32[0];
  v28.i64[1] = v27.u32[1];
  int8x16_t v29 = v28;
  int16x8_t v30 = vmovl_s8(*(int8x8_t *)v25.i8);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v28.i64[0] = v31.u32[0];
  v28.i64[1] = v31.u32[1];
  int8x16_t v32 = v28;
  int32x4_t v33 = vmovl_high_s16(v26);
  v28.i64[0] = v33.u32[0];
  v28.i64[1] = v33.u32[1];
  int8x16_t v34 = v28;
  int32x4_t v35 = vmovl_high_s16(v30);
  v28.i64[0] = v35.u32[0];
  v28.i64[1] = v35.u32[1];
  int8x16_t v36 = v28;
  v28.i64[0] = v27.u32[2];
  v28.i64[1] = v27.u32[3];
  int8x16_t v37 = v28;
  v28.i64[0] = v31.u32[2];
  v28.i64[1] = v31.u32[3];
  int8x16_t v38 = v28;
  v28.i64[0] = v33.u32[2];
  v28.i64[1] = v33.u32[3];
  int8x16_t v39 = v28;
  v28.i64[0] = v35.u32[2];
  v28.i64[1] = v35.u32[3];
  int8x16_t v40 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v28);
  int8x16_t v41 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v39);
  int8x16_t v42 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v38);
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v34);
  int8x16_t v44 = vceqzq_s8(*(int8x16_t *)(v21 + 344));
  int16x8_t v45 = vmovl_high_s8(v44);
  int32x4_t v46 = vmovl_s16(*(int16x4_t *)v45.i8);
  v28.i64[0] = v46.u32[0];
  v28.i64[1] = v46.u32[1];
  int8x16_t v47 = v28;
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v44.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v28.i64[0] = v49.u32[0];
  v28.i64[1] = v49.u32[1];
  int8x16_t v50 = v28;
  int32x4_t v51 = vmovl_high_s16(v45);
  v28.i64[0] = v51.u32[0];
  v28.i64[1] = v51.u32[1];
  int8x16_t v52 = v28;
  int32x4_t v53 = vmovl_high_s16(v48);
  v28.i64[0] = v53.u32[0];
  v28.i64[1] = v53.u32[1];
  int8x16_t v54 = v28;
  v28.i64[0] = v46.u32[2];
  v28.i64[1] = v46.u32[3];
  int8x16_t v55 = v28;
  v28.i64[0] = v49.u32[2];
  v28.i64[1] = v49.u32[3];
  int8x16_t v56 = v28;
  v28.i64[0] = v51.u32[2];
  v28.i64[1] = v51.u32[3];
  int8x16_t v57 = v28;
  v28.i64[0] = v53.u32[2];
  v28.i64[1] = v53.u32[3];
  int8x16_t v58 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v57);
  int8x16_t v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v47), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v29));
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v50), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v32));
  int8x16_t v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v52), v43);
  int8x16_t v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v54), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v36));
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v55), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v37));
  int8x16_t v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v56), v42);
  int8x16_t v65 = vorrq_s8(v58, v41);
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v28), v40);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(v21 + 360));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v28.i64[0] = v69.i32[0];
  v28.i64[1] = v69.i32[1];
  int8x16_t v70 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v28);
  int8x16_t v71 = vceqzq_s8(*(int8x16_t *)(v21 + 376));
  int16x8_t v72 = vmovl_high_s8(v71);
  int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v28.i64[0] = v73.i32[0];
  v28.i64[1] = v73.i32[1];
  int8x16_t v74 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v28), v70), v59);
  int16x8_t v75 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v28.i64[0] = v76.i32[0];
  v28.i64[1] = v76.i32[1];
  int8x16_t v77 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v28);
  int16x8_t v78 = vmovl_s8(*(int8x8_t *)v71.i8);
  int32x4_t v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v28.i64[0] = v79.i32[0];
  v28.i64[1] = v79.i32[1];
  int8x16_t v80 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v28), v77), v60);
  int32x4_t v81 = vmovl_high_s16(v68);
  v28.i64[0] = v81.i32[0];
  v28.i64[1] = v81.i32[1];
  int8x16_t v82 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v28);
  int32x4_t v83 = vmovl_high_s16(v72);
  v28.i64[0] = v83.i32[0];
  v28.i64[1] = v83.i32[1];
  int8x16_t v84 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v28), v82), v61);
  int32x4_t v85 = vmovl_high_s16(v75);
  v28.i64[0] = v85.i32[0];
  v28.i64[1] = v85.i32[1];
  int8x16_t v86 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v28);
  int32x4_t v87 = vmovl_high_s16(v78);
  v28.i64[0] = v87.i32[0];
  v28.i64[1] = v87.i32[1];
  int8x16_t v88 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v28), v86), v62);
  v28.i64[0] = v69.i32[2];
  v28.i64[1] = v69.i32[3];
  int8x16_t v89 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v28);
  v28.i64[0] = v73.i32[2];
  v28.i64[1] = v73.i32[3];
  int8x16_t v90 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v28), v89), v63);
  v28.i64[0] = v76.i32[2];
  v28.i64[1] = v76.i32[3];
  int8x16_t v91 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v28);
  v28.i64[0] = v79.i32[2];
  v28.i64[1] = v79.i32[3];
  int8x16_t v92 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v28), v91), v64);
  v28.i64[0] = v81.i32[2];
  v28.i64[1] = v81.i32[3];
  int8x16_t v93 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v28);
  v28.i64[0] = v83.i32[2];
  v28.i64[1] = v83.i32[3];
  int8x16_t v94 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v28), v93), v65);
  v28.i64[0] = v85.i32[2];
  v28.i64[1] = v85.i32[3];
  int8x16_t v95 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v28);
  v28.i64[0] = v87.i32[2];
  v28.i64[1] = v87.i32[3];
  *((void *)v21 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v80, v74), vorrq_s8(v88, v84)), (int64x2_t)vorrq_s8(vorrq_s8(v92, v90), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v28), v95), v66), v94))));
  *((void *)v21 + 3) = &unk_1EF560840;
  v21[312] = 1;
  uint64_t v96 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v21 + 24;
  *((void *)this + 5) = v21;
  if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  uint64_t v97 = (std::__shared_weak_count *)*((void *)&v355 + 1);
  if (*((void *)&v355 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
  }
  uint64_t v98 = *(void *)(v6 + 80);
  uint64_t v100 = *(void *)(v98 + 368);
  uint64_t v99 = *(void *)(v98 + 376);
  *(void *)&long long v355 = v100;
  *((void *)&v355 + 1) = v99;
  if (v99) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v99 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v101 = (char *)operator new(0x198uLL);
  *((void *)v101 + 1) = 0;
  *((void *)v101 + 2) = 0;
  *(void *)uint64_t v101 = &unk_1EF5890F0;
  long long v102 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v349 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v349[16] = v102;
  {
    if (v345)
    {
      {
        if (v345)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1EB32B428 = 1;
          }
          ggl::Debug::InstancedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          {
            ggl::Debug::pipelineDataInstancedBasePipelineDeviceStructs(void)::ref = (uint64_t)ggl::Debug::InstanceTransform::reflection(void)::reflection;
          }
          qword_1E9588440 = (uint64_t)&ggl::Debug::pipelineDataInstancedBasePipelineDeviceStructs(void)::ref;
          *(void *)algn_1E9588448 = 1;
          {
            ggl::Debug::pipelineDataInstancedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            unk_1E9588680 = ggl::Debug::View::reflection(void)::reflection;
            qword_1E9588688 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1E9588450 = (uint64_t)&ggl::Debug::pipelineDataInstancedBasePipelineConstantStructs(void)::ref;
          unk_1E9588458 = xmmword_1A28FCD30;
        }
      }
      ggl::Debug::InstancedBasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::InstancedBasePipelineSetup::typedReflection(void)::ref;
      ggl::InstancedDebugShader::typedReflection(v345);
      qword_1E958D9A8 = (uint64_t)&ggl::InstancedDebugShader::typedReflection(void)::ref;
      {
        ggl::Debug::pipelineStateInstancedBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9588760 = 0;
        qword_1E9588768 = (uint64_t)"";
        dword_1E9588770 = 0;
        qword_1E9588778 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineAttributeBinding_0(void)::attr;
        unk_1E9588780 = 1;
      }
      qword_1E958D9B0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958D9B8 = 1;
      qword_1E958D9C0 = 0;
      unk_1E958D9C8 = 0;
      {
        ggl::Debug::pipelineStateInstancedBasePipelineDeviceStructBinding(void)::ref = 0;
        *(void *)algn_1E9588698 = 0;
        qword_1E95886A0 = (uint64_t)"instanceTransform";
        dword_1E95886A8 = 2;
        qword_1E95886B0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1E95886B8 = 0;
      }
      qword_1E958D9D0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineDeviceStructBinding(void)::ref;
      *(void *)algn_1E958D9D8 = 1;
      {
        ggl::Debug::pipelineStateInstancedBasePipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95886C8 = 0;
        qword_1E95886D0 = (uint64_t)"style";
        dword_1E95886D8 = 3;
        qword_1E95886E0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantStyleBinding(void)::reflection;
        unk_1E95886E8 = xmmword_1A28FCEF0;
        qword_1E95886F8 = 1;
        unk_1E9588700 = "view";
        dword_1E9588708 = 3;
        qword_1E9588710 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantViewBinding(void)::reflection;
        unk_1E9588718 = xmmword_1A28FC6E0;
        qword_1E9588728 = 2;
        unk_1E9588730 = "transform";
        dword_1E9588738 = 3;
        qword_1E9588740 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantTransformBinding(void)::reflection;
        unk_1E9588748 = 10;
      }
      qword_1E958D9E0 = (uint64_t)&ggl::Debug::pipelineStateInstancedBasePipelineConstantStructBinding(void)::ref;
      unk_1E958D9E8 = 3;
    }
  }
  long long v103 = v355;
  if (*((void *)&v355 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v101 + 4) = 0;
  *((void *)v101 + 5) = 0;
  *((_DWORD *)v101 + 14) = 0;
  *((void *)v101 + 6) = 0;
  *((void *)v101 + 3) = &unk_1EF55B208;
  *((void *)v101 + 8) = &ggl::Debug::InstancedBasePipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v101 + 72) = v103;
  if (*((void *)&v103 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v101[136] = 0;
  *(_OWORD *)(v101 + 140) = xmmword_1A28FC970;
  *(void *)(v101 + 156) = 0;
  *(void *)(v101 + 172) = 0;
  *(void *)(v101 + 164) = 0;
  v101[184] = 0;
  *(_OWORD *)(v101 + 188) = xmmword_1A28FC970;
  *(void *)(v101 + 204) = 0;
  *(void *)(v101 + 220) = 0;
  *(void *)(v101 + 212) = 0;
  v101[232] = 0;
  *(_OWORD *)(v101 + 236) = xmmword_1A28FC970;
  *(void *)(v101 + 252) = 0;
  *(void *)(v101 + 268) = 0;
  *(void *)(v101 + 260) = 0;
  long long v104 = *(_OWORD *)&v349[16];
  *(_OWORD *)(v101 + 280) = *(_OWORD *)v349;
  *(_OWORD *)(v101 + 296) = v104;
  v101[312] = 0;
  *((void *)v101 + 48) = 0;
  *((_OWORD *)v101 + 22) = 0u;
  *((_OWORD *)v101 + 23) = 0u;
  *((_OWORD *)v101 + 20) = 0u;
  *((_OWORD *)v101 + 21) = 0u;
  *((void *)v101 + 49) = 0x100000001;
  v101[400] = 0;
  v101[88] = 1;
  *(_WORD *)(v101 + 89) = v353;
  v101[91] = BYTE2(v353);
  *(_OWORD *)(v101 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v101 + 27) = 7;
  *((void *)v101 + 14) = 0;
  *((void *)v101 + 15) = 0;
  *((_DWORD *)v101 + 32) = 0;
  v101[132] = 15;
  if (*((void *)&v103 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v103 + 1) + 16))(*((void *)&v103 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v103 + 1));
  }
  v101[329] = 0;
  int8x16_t v105 = vceqzq_s8(*(int8x16_t *)(v101 + 328));
  int16x8_t v106 = vmovl_high_s8(v105);
  int32x4_t v107 = vmovl_s16(*(int16x4_t *)v106.i8);
  v108.i64[0] = v107.u32[0];
  v108.i64[1] = v107.u32[1];
  int8x16_t v109 = v108;
  int16x8_t v110 = vmovl_s8(*(int8x8_t *)v105.i8);
  int32x4_t v111 = vmovl_s16(*(int16x4_t *)v110.i8);
  v108.i64[0] = v111.u32[0];
  v108.i64[1] = v111.u32[1];
  int8x16_t v112 = v108;
  int32x4_t v113 = vmovl_high_s16(v106);
  v108.i64[0] = v113.u32[0];
  v108.i64[1] = v113.u32[1];
  int8x16_t v114 = v108;
  int32x4_t v115 = vmovl_high_s16(v110);
  v108.i64[0] = v115.u32[0];
  v108.i64[1] = v115.u32[1];
  int8x16_t v116 = v108;
  v108.i64[0] = v107.u32[2];
  v108.i64[1] = v107.u32[3];
  int8x16_t v117 = v108;
  v108.i64[0] = v111.u32[2];
  v108.i64[1] = v111.u32[3];
  int8x16_t v118 = v108;
  v108.i64[0] = v113.u32[2];
  v108.i64[1] = v113.u32[3];
  int8x16_t v119 = v108;
  v108.i64[0] = v115.u32[2];
  v108.i64[1] = v115.u32[3];
  int8x16_t v120 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v108);
  int8x16_t v121 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v119);
  int8x16_t v122 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v118);
  int8x16_t v123 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v114);
  int8x16_t v124 = vceqzq_s8(*(int8x16_t *)(v101 + 344));
  int16x8_t v125 = vmovl_high_s8(v124);
  int32x4_t v126 = vmovl_s16(*(int16x4_t *)v125.i8);
  v108.i64[0] = v126.u32[0];
  v108.i64[1] = v126.u32[1];
  int8x16_t v127 = v108;
  int16x8_t v128 = vmovl_s8(*(int8x8_t *)v124.i8);
  int32x4_t v129 = vmovl_s16(*(int16x4_t *)v128.i8);
  v108.i64[0] = v129.u32[0];
  v108.i64[1] = v129.u32[1];
  int8x16_t v130 = v108;
  int32x4_t v131 = vmovl_high_s16(v125);
  v108.i64[0] = v131.u32[0];
  v108.i64[1] = v131.u32[1];
  int8x16_t v132 = v108;
  int32x4_t v133 = vmovl_high_s16(v128);
  v108.i64[0] = v133.u32[0];
  v108.i64[1] = v133.u32[1];
  int8x16_t v134 = v108;
  v108.i64[0] = v126.u32[2];
  v108.i64[1] = v126.u32[3];
  int8x16_t v135 = v108;
  v108.i64[0] = v129.u32[2];
  v108.i64[1] = v129.u32[3];
  int8x16_t v136 = v108;
  v108.i64[0] = v131.u32[2];
  v108.i64[1] = v131.u32[3];
  int8x16_t v137 = v108;
  v108.i64[0] = v133.u32[2];
  v108.i64[1] = v133.u32[3];
  int8x16_t v138 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v137);
  int8x16_t v139 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v127), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v109));
  int8x16_t v140 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v130), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v112));
  int8x16_t v141 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v132), v123);
  int8x16_t v142 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v134), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v116));
  int8x16_t v143 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v135), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v117));
  int8x16_t v144 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v136), v122);
  int8x16_t v145 = vorrq_s8(v138, v121);
  int8x16_t v146 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v108), v120);
  int8x16_t v147 = vceqzq_s8(*(int8x16_t *)(v101 + 360));
  int16x8_t v148 = vmovl_s8(*(int8x8_t *)v147.i8);
  int32x4_t v149 = vmovl_high_s16(v148);
  int16x8_t v150 = vmovl_high_s8(v147);
  int32x4_t v151 = vmovl_high_s16(v150);
  int32x4_t v152 = vmovl_s16(*(int16x4_t *)v148.i8);
  int32x4_t v153 = vmovl_s16(*(int16x4_t *)v150.i8);
  v108.i64[0] = v152.i32[0];
  v108.i64[1] = v152.i32[1];
  int8x16_t v154 = v108;
  v108.i64[0] = v153.i32[0];
  v108.i64[1] = v153.i32[1];
  int8x16_t v155 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v108);
  int8x16_t v156 = vceqzq_s8(*(int8x16_t *)(v101 + 376));
  int16x8_t v157 = vmovl_high_s8(v156);
  int32x4_t v158 = vmovl_s16(*(int16x4_t *)v157.i8);
  v108.i64[0] = v158.i32[0];
  v108.i64[1] = v158.i32[1];
  int16x8_t v159 = vmovl_s8(*(int8x8_t *)v156.i8);
  int32x4_t v160 = vmovl_s16(*(int16x4_t *)v159.i8);
  int8x16_t v161 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v108), v155), v139);
  v108.i64[0] = v160.i32[0];
  v108.i64[1] = v160.i32[1];
  int8x16_t v162 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v108), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v154));
  v108.i64[0] = v151.i32[0];
  v108.i64[1] = v151.i32[1];
  int8x16_t v163 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v108);
  int32x4_t v164 = vmovl_high_s16(v157);
  int8x16_t v165 = vorrq_s8(v162, v140);
  v108.i64[0] = v164.i32[0];
  v108.i64[1] = v164.i32[1];
  int8x16_t v166 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v108), v163);
  v108.i64[0] = v149.i32[0];
  v108.i64[1] = v149.i32[1];
  int8x16_t v167 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v108);
  int32x4_t v168 = vmovl_high_s16(v159);
  v108.i64[0] = v168.i32[0];
  v108.i64[1] = v168.i32[1];
  int8x16_t v169 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v108), v167), v142);
  v108.i64[0] = v153.i32[2];
  v108.i64[1] = v153.i32[3];
  int8x16_t v170 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v108);
  v108.i64[0] = v158.i32[2];
  v108.i64[1] = v158.i32[3];
  int8x16_t v171 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v108), v170), v143);
  v108.i64[0] = v152.i32[2];
  v108.i64[1] = v152.i32[3];
  int8x16_t v172 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v108);
  v108.i64[0] = v160.i32[2];
  v108.i64[1] = v160.i32[3];
  int8x16_t v173 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v108), v172), v144);
  v108.i64[0] = v151.i32[2];
  v108.i64[1] = v151.i32[3];
  int8x16_t v174 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v108);
  v108.i64[0] = v164.i32[2];
  v108.i64[1] = v164.i32[3];
  int8x16_t v175 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108), v174), v145);
  v108.i64[0] = v149.i32[2];
  v108.i64[1] = v149.i32[3];
  int8x16_t v176 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v108);
  v108.i64[0] = v168.i32[2];
  v108.i64[1] = v168.i32[3];
  *((void *)v101 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v165, v161), vorrq_s8(v169, vorrq_s8(v166, v141))), (int64x2_t)vorrq_s8(vorrq_s8(v173, v171), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v108), v176), v146), v175))));
  *((void *)v101 + 3) = &unk_1EF5608E0;
  v101[312] = 1;
  v177 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = v101 + 24;
  *((void *)this + 3) = v101;
  if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
  }
  v178 = (std::__shared_weak_count *)*((void *)&v355 + 1);
  if (*((void *)&v355 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
    std::__shared_weak_count::__release_weak(v178);
  }
  uint64_t v179 = *(void *)(v6 + 80);
  uint64_t v180 = *(void *)(v179 + 1904);
  uint64_t v181 = *(void *)(v179 + 1912);
  *(void *)&long long v355 = v180;
  *((void *)&v355 + 1) = v181;
  if (v181) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v181 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v182 = (char *)operator new(0x198uLL);
  *((void *)v182 + 1) = 0;
  *((void *)v182 + 2) = 0;
  *(void *)uint64_t v182 = &unk_1EF589160;
  long long v183 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v349 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v349[16] = v183;
  {
    if (v346)
    {
      {
        if (v346)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1EB32B400 = 1;
          }
          ggl::Point::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          *(void *)algn_1E9588798 = &ggl::Point::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1E95887A0 = 0;
          {
            ggl::Point::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Point::View::reflection(void)::reflection;
            unk_1E95887D0 = ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1E95887A8 = (uint64_t)&ggl::Point::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1E95887B0 = xmmword_1A28FCED0;
        }
      }
      ggl::Point::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Point::PipelineSetup::typedReflection(void)::ref;
      ggl::PointShader::typedReflection(v346);
      qword_1EB319B10 = (uint64_t)&ggl::PointShader::typedReflection(void)::ref;
      {
        ggl::Point::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9588840 = 0;
        qword_1E9588848 = (uint64_t)"";
        dword_1E9588850 = 0;
        qword_1E9588858 = (uint64_t)&ggl::Point::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1E9588860 = 1;
      }
      qword_1EB319B18 = (uint64_t)&ggl::Point::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1EB319B20 = 1;
      qword_1EB319B28 = 0;
      unk_1EB319B30 = 0;
      qword_1EB319B38 = (uint64_t)&ggl::Point::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1EB319B40 = 0;
      {
        ggl::Point::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1E95887E0 = 0;
        qword_1E95887E8 = (uint64_t)"view";
        dword_1E95887F0 = 3;
        qword_1E95887F8 = (uint64_t)&ggl::Point::pipelineStatePipelineConstantViewBinding(void)::reflection;
        unk_1E9588800 = xmmword_1A28FE1F0;
        qword_1E9588810 = 1;
        unk_1E9588818 = "transform";
        dword_1E9588820 = 3;
        qword_1E9588828 = (uint64_t)&ggl::Point::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        unk_1E9588830 = 10;
      }
      qword_1EB319B48 = (uint64_t)&ggl::Point::pipelineStatePipelineConstantStructBinding(void)::ref;
      unk_1EB319B50 = 2;
    }
  }
  long long v184 = v355;
  if (*((void *)&v355 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v182 + 4) = 0;
  *((void *)v182 + 5) = 0;
  *((_DWORD *)v182 + 14) = 0;
  *((void *)v182 + 6) = 0;
  *((void *)v182 + 3) = &unk_1EF55B208;
  *((void *)v182 + 8) = &ggl::Point::PipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v182 + 72) = v184;
  if (*((void *)&v184 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v182[136] = 0;
  *(_OWORD *)(v182 + 140) = xmmword_1A28FC970;
  *(void *)(v182 + 156) = 0;
  *(void *)(v182 + 172) = 0;
  *(void *)(v182 + 164) = 0;
  v182[184] = 0;
  *(_OWORD *)(v182 + 188) = xmmword_1A28FC970;
  *(void *)(v182 + 204) = 0;
  *(void *)(v182 + 220) = 0;
  *(void *)(v182 + 212) = 0;
  v182[232] = 0;
  *(_OWORD *)(v182 + 236) = xmmword_1A28FC970;
  *(void *)(v182 + 252) = 0;
  *(void *)(v182 + 268) = 0;
  *(void *)(v182 + 260) = 0;
  long long v185 = *(_OWORD *)&v349[16];
  *(_OWORD *)(v182 + 280) = *(_OWORD *)v349;
  *(_OWORD *)(v182 + 296) = v185;
  v182[312] = 0;
  *((void *)v182 + 48) = 0;
  *((_OWORD *)v182 + 22) = 0u;
  *((_OWORD *)v182 + 23) = 0u;
  *((_OWORD *)v182 + 20) = 0u;
  *((_OWORD *)v182 + 21) = 0u;
  *((void *)v182 + 49) = 0x100000001;
  v182[400] = 0;
  v182[88] = 1;
  *(_WORD *)(v182 + 89) = v353;
  v182[91] = BYTE2(v353);
  *(_OWORD *)(v182 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v182 + 27) = 7;
  *((void *)v182 + 14) = 0;
  *((void *)v182 + 15) = 0;
  *((_DWORD *)v182 + 32) = 0;
  v182[132] = 15;
  if (*((void *)&v184 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v184 + 1) + 16))(*((void *)&v184 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v184 + 1));
  }
  v182[329] = 0;
  int8x16_t v186 = vceqzq_s8(*(int8x16_t *)(v182 + 328));
  int16x8_t v187 = vmovl_high_s8(v186);
  int32x4_t v188 = vmovl_s16(*(int16x4_t *)v187.i8);
  v189.i64[0] = v188.u32[0];
  v189.i64[1] = v188.u32[1];
  int8x16_t v190 = v189;
  int16x8_t v191 = vmovl_s8(*(int8x8_t *)v186.i8);
  int32x4_t v192 = vmovl_s16(*(int16x4_t *)v191.i8);
  v189.i64[0] = v192.u32[0];
  v189.i64[1] = v192.u32[1];
  int8x16_t v193 = v189;
  int32x4_t v194 = vmovl_high_s16(v187);
  v189.i64[0] = v194.u32[0];
  v189.i64[1] = v194.u32[1];
  int8x16_t v195 = v189;
  int32x4_t v196 = vmovl_high_s16(v191);
  v189.i64[0] = v196.u32[0];
  v189.i64[1] = v196.u32[1];
  int8x16_t v197 = v189;
  v189.i64[0] = v188.u32[2];
  v189.i64[1] = v188.u32[3];
  int8x16_t v198 = v189;
  v189.i64[0] = v192.u32[2];
  v189.i64[1] = v192.u32[3];
  int8x16_t v199 = v189;
  v189.i64[0] = v194.u32[2];
  v189.i64[1] = v194.u32[3];
  int8x16_t v200 = v189;
  v189.i64[0] = v196.u32[2];
  v189.i64[1] = v196.u32[3];
  int8x16_t v201 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v189);
  int8x16_t v202 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v200);
  int8x16_t v203 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v199);
  int8x16_t v204 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v195);
  int8x16_t v205 = vceqzq_s8(*(int8x16_t *)(v182 + 344));
  int16x8_t v206 = vmovl_high_s8(v205);
  int32x4_t v207 = vmovl_s16(*(int16x4_t *)v206.i8);
  v189.i64[0] = v207.u32[0];
  v189.i64[1] = v207.u32[1];
  int8x16_t v208 = v189;
  int16x8_t v209 = vmovl_s8(*(int8x8_t *)v205.i8);
  int32x4_t v210 = vmovl_s16(*(int16x4_t *)v209.i8);
  v189.i64[0] = v210.u32[0];
  v189.i64[1] = v210.u32[1];
  int8x16_t v211 = v189;
  int32x4_t v212 = vmovl_high_s16(v206);
  v189.i64[0] = v212.u32[0];
  v189.i64[1] = v212.u32[1];
  int8x16_t v213 = v189;
  int32x4_t v214 = vmovl_high_s16(v209);
  v189.i64[0] = v214.u32[0];
  v189.i64[1] = v214.u32[1];
  int8x16_t v215 = v189;
  v189.i64[0] = v207.u32[2];
  v189.i64[1] = v207.u32[3];
  int8x16_t v216 = v189;
  v189.i64[0] = v210.u32[2];
  v189.i64[1] = v210.u32[3];
  int8x16_t v217 = v189;
  v189.i64[0] = v212.u32[2];
  v189.i64[1] = v212.u32[3];
  int8x16_t v218 = v189;
  v189.i64[0] = v214.u32[2];
  v189.i64[1] = v214.u32[3];
  int8x16_t v219 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v218);
  int8x16_t v220 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v208), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v190));
  int8x16_t v221 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v211), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v193));
  int8x16_t v222 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v213), v204);
  int8x16_t v223 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v215), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v197));
  int8x16_t v224 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v216), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v198));
  int8x16_t v225 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v217), v203);
  int8x16_t v226 = vorrq_s8(v219, v202);
  int8x16_t v227 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v189), v201);
  int8x16_t v228 = vceqzq_s8(*(int8x16_t *)(v182 + 360));
  int16x8_t v229 = vmovl_s8(*(int8x8_t *)v228.i8);
  int32x4_t v230 = vmovl_high_s16(v229);
  int16x8_t v231 = vmovl_high_s8(v228);
  int32x4_t v232 = vmovl_high_s16(v231);
  int32x4_t v233 = vmovl_s16(*(int16x4_t *)v229.i8);
  int32x4_t v234 = vmovl_s16(*(int16x4_t *)v231.i8);
  v189.i64[0] = v233.i32[0];
  v189.i64[1] = v233.i32[1];
  int8x16_t v235 = v189;
  v189.i64[0] = v234.i32[0];
  v189.i64[1] = v234.i32[1];
  int8x16_t v236 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v189);
  int8x16_t v237 = vceqzq_s8(*(int8x16_t *)(v182 + 376));
  int16x8_t v238 = vmovl_high_s8(v237);
  int32x4_t v239 = vmovl_s16(*(int16x4_t *)v238.i8);
  v189.i64[0] = v239.i32[0];
  v189.i64[1] = v239.i32[1];
  int16x8_t v240 = vmovl_s8(*(int8x8_t *)v237.i8);
  int32x4_t v241 = vmovl_s16(*(int16x4_t *)v240.i8);
  int8x16_t v242 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v189), v236), v220);
  v189.i64[0] = v241.i32[0];
  v189.i64[1] = v241.i32[1];
  int8x16_t v243 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v189), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v235));
  v189.i64[0] = v232.i32[0];
  v189.i64[1] = v232.i32[1];
  int8x16_t v244 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v189);
  int32x4_t v245 = vmovl_high_s16(v238);
  int8x16_t v246 = vorrq_s8(v243, v221);
  v189.i64[0] = v245.i32[0];
  v189.i64[1] = v245.i32[1];
  int8x16_t v247 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v189), v244);
  v189.i64[0] = v230.i32[0];
  v189.i64[1] = v230.i32[1];
  int8x16_t v248 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v189);
  int32x4_t v249 = vmovl_high_s16(v240);
  v189.i64[0] = v249.i32[0];
  v189.i64[1] = v249.i32[1];
  int8x16_t v250 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v189), v248), v223);
  v189.i64[0] = v234.i32[2];
  v189.i64[1] = v234.i32[3];
  int8x16_t v251 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v189);
  v189.i64[0] = v239.i32[2];
  v189.i64[1] = v239.i32[3];
  int8x16_t v252 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v189), v251), v224);
  v189.i64[0] = v233.i32[2];
  v189.i64[1] = v233.i32[3];
  int8x16_t v253 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v189);
  v189.i64[0] = v241.i32[2];
  v189.i64[1] = v241.i32[3];
  int8x16_t v254 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v189), v253), v225);
  v189.i64[0] = v232.i32[2];
  v189.i64[1] = v232.i32[3];
  int8x16_t v255 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v189);
  v189.i64[0] = v245.i32[2];
  v189.i64[1] = v245.i32[3];
  int8x16_t v256 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v189), v255), v226);
  v189.i64[0] = v230.i32[2];
  v189.i64[1] = v230.i32[3];
  int8x16_t v257 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v189);
  v189.i64[0] = v249.i32[2];
  v189.i64[1] = v249.i32[3];
  *((void *)v182 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v246, v242), vorrq_s8(v250, vorrq_s8(v247, v222))), (int64x2_t)vorrq_s8(vorrq_s8(v254, v252), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v189), v257), v227), v256))));
  *((void *)v182 + 3) = &unk_1EF5609F0;
  v182[312] = 1;
  long long v258 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = v182 + 24;
  *((void *)this + 7) = v182;
  if (v258 && !atomic_fetch_add(&v258->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
  }
  uint64_t v259 = (std::__shared_weak_count *)*((void *)&v355 + 1);
  if (*((void *)&v355 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
    std::__shared_weak_count::__release_weak(v259);
  }
  uint64_t v260 = *(void *)(v6 + 80);
  uint64_t v261 = *(void *)(v260 + 2864);
  v262 = *(std::__shared_weak_count **)(v260 + 2872);
  uint64_t v353 = v261;
  uint64_t v354 = v262;
  if (v262) {
    atomic_fetch_add_explicit(&v262->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v350 = 0;
  *(void *)&v349[24] = 0;
  int v351 = 0;
  v349[0] = 1;
  *(_OWORD *)&v349[4] = xmmword_1A28FCEC0;
  *(_DWORD *)&v349[20] = 7;
  char v352 = 15;
  v263 = operator new(0x198uLL);
  v263[1] = 0;
  v263[2] = 0;
  void *v263 = &unk_1EF589B70;
  long long v264 = *(_OWORD *)&a3->colorFormatsCount;
  long long v355 = *(_OWORD *)a3->colorFormats;
  long long v356 = v264;
  uint64_t v265 = ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState((uint64_t)(v263 + 3), &v353, (uint64_t)v349, &v355, 0);
  uint64_t v266 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = v265;
  *((void *)this + 9) = v263;
  if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
    std::__shared_weak_count::__release_weak(v266);
  }
  unint64_t v267 = v354;
  if (v354 && !atomic_fetch_add(&v354->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
    std::__shared_weak_count::__release_weak(v267);
  }
  uint64_t v268 = *(void *)(v6 + 80);
  uint64_t v269 = *(void *)(v268 + 2912);
  uint64_t v270 = *(void *)(v268 + 2920);
  *(void *)&long long v355 = v269;
  *((void *)&v355 + 1) = v270;
  if (v270) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v270 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v271 = (char *)operator new(0x198uLL);
  *((void *)v271 + 1) = 0;
  *((void *)v271 + 2) = 0;
  *(void *)uint64_t v271 = &unk_1EF589BE0;
  long long v272 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)uint64_t v349 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v349[16] = v272;
  {
    if (v347)
    {
      {
        if (v347)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::Textured::ScreenTexturedQuadPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(void *)algn_1E958AEC8 = &ggl::Textured::pipelineDataScreenTexturedQuadPipelineDeviceStructs(void)::ref;
          qword_1E958AED0 = 0;
          {
            ggl::Textured::pipelineDataScreenTexturedQuadPipelineConstantStructs(void)::ref = (uint64_t)ggl::Textured::ScreenTexturedQuad::reflection(void)::reflection;
          }
          qword_1E958AED8 = (uint64_t)&ggl::Textured::pipelineDataScreenTexturedQuadPipelineConstantStructs(void)::ref;
          unk_1E958AEE0 = vdupq_n_s64(1uLL);
        }
      }
      ggl::Textured::ScreenTexturedQuadPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::ScreenTexturedQuadPipelineSetup::typedReflection(void)::ref;
      ggl::ScreenTexturedQuadShader::typedReflection(v347);
      qword_1E958AF00 = (uint64_t)&ggl::ScreenTexturedQuadShader::typedReflection(void)::ref;
      {
        ggl::Textured::pipelineStateScreenTexturedQuadPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E958B518 = 0;
        qword_1E958B520 = (uint64_t)"";
        dword_1E958B528 = 0;
        qword_1E958B530 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineAttributeBinding_0(void)::attr;
        unk_1E958B538 = 2;
      }
      qword_1E958AF08 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineAttributeStructBinding(void)::attr;
      unk_1E958AF10 = 1;
      qword_1E958AF18 = 0;
      unk_1E958AF20 = 1;
      qword_1E958AF28 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineDeviceStructBinding(void)::ref;
      unk_1E958AF30 = 0;
      {
        ggl::Textured::pipelineStateScreenTexturedQuadPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E958B4E8 = 0;
        qword_1E958B4F0 = (uint64_t)"screenTexturedQuad";
        dword_1E958B4F8 = 3;
        qword_1E958B500 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineConstantScreenTexturedQuadBinding(void)::reflection;
        unk_1E958B508 = 2;
      }
      qword_1E958AF38 = (uint64_t)&ggl::Textured::pipelineStateScreenTexturedQuadPipelineConstantStructBinding(void)::ref;
      unk_1E958AF40 = 1;
    }
  }
  long long v273 = v355;
  if (*((void *)&v355 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v271 + 4) = 0;
  *((void *)v271 + 5) = 0;
  *((_DWORD *)v271 + 14) = 0;
  *((void *)v271 + 6) = 0;
  *((void *)v271 + 3) = &unk_1EF55B208;
  *((void *)v271 + 8) = &ggl::Textured::ScreenTexturedQuadPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v271 + 72) = v273;
  if (*((void *)&v273 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v273 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v271[136] = 0;
  *(_OWORD *)(v271 + 140) = xmmword_1A28FC970;
  *(void *)(v271 + 156) = 0;
  *(void *)(v271 + 172) = 0;
  *(void *)(v271 + 164) = 0;
  v271[184] = 0;
  *(_OWORD *)(v271 + 188) = xmmword_1A28FC970;
  *(void *)(v271 + 204) = 0;
  *(void *)(v271 + 220) = 0;
  *(void *)(v271 + 212) = 0;
  v271[232] = 0;
  *(_OWORD *)(v271 + 236) = xmmword_1A28FC970;
  *(void *)(v271 + 252) = 0;
  *(void *)(v271 + 268) = 0;
  *(void *)(v271 + 260) = 0;
  long long v274 = *(_OWORD *)&v349[16];
  *(_OWORD *)(v271 + 280) = *(_OWORD *)v349;
  *(_OWORD *)(v271 + 296) = v274;
  v271[312] = 0;
  *((void *)v271 + 48) = 0;
  *((_OWORD *)v271 + 22) = 0u;
  *((_OWORD *)v271 + 23) = 0u;
  *((_OWORD *)v271 + 20) = 0u;
  *((_OWORD *)v271 + 21) = 0u;
  *((void *)v271 + 49) = 0x100000001;
  v271[400] = 0;
  v271[88] = 1;
  *(_WORD *)(v271 + 89) = v353;
  v271[91] = BYTE2(v353);
  *(_OWORD *)(v271 + 92) = xmmword_1A28FCEC0;
  *((_DWORD *)v271 + 27) = 7;
  *((void *)v271 + 14) = 0;
  *((void *)v271 + 15) = 0;
  *((_DWORD *)v271 + 32) = 0;
  v271[132] = 15;
  if (*((void *)&v273 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v273 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v273 + 1) + 16))(*((void *)&v273 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v273 + 1));
  }
  *((_DWORD *)v271 + 82) = 0;
  int8x16_t v275 = vceqzq_s8(*(int8x16_t *)(v271 + 328));
  int16x8_t v276 = vmovl_s8(*(int8x8_t *)v275.i8);
  int32x4_t v277 = vmovl_high_s16(v276);
  v278.i64[0] = v277.u32[2];
  v278.i64[1] = v277.u32[3];
  int8x16_t v279 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v278);
  int16x8_t v280 = vmovl_high_s8(v275);
  int32x4_t v281 = vmovl_high_s16(v280);
  v278.i64[0] = v281.u32[2];
  v278.i64[1] = v281.u32[3];
  int8x16_t v282 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v278);
  int32x4_t v283 = vmovl_s16(*(int16x4_t *)v276.i8);
  v278.i64[0] = v283.u32[2];
  v278.i64[1] = v283.u32[3];
  int8x16_t v284 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v278);
  int32x4_t v285 = vmovl_s16(*(int16x4_t *)v280.i8);
  v278.i64[0] = v285.u32[2];
  v278.i64[1] = v285.u32[3];
  int8x16_t v286 = vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v278);
  v278.i64[0] = v277.u32[0];
  v278.i64[1] = v277.u32[1];
  int8x16_t v287 = vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v278);
  v278.i64[0] = v281.u32[0];
  v278.i64[1] = v281.u32[1];
  int8x16_t v288 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v278);
  v278.i64[0] = v283.u32[0];
  v278.i64[1] = v283.u32[1];
  int8x16_t v289 = vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v278);
  v278.i64[0] = v285.u32[0];
  v278.i64[1] = v285.u32[1];
  int8x16_t v290 = vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v278);
  int8x16_t v291 = vceqzq_s8(*(int8x16_t *)(v271 + 344));
  int16x8_t v292 = vmovl_s8(*(int8x8_t *)v291.i8);
  int32x4_t v293 = vmovl_high_s16(v292);
  v278.i64[0] = v293.u32[2];
  v278.i64[1] = v293.u32[3];
  int8x16_t v294 = vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v278);
  int16x8_t v295 = vmovl_high_s8(v291);
  int32x4_t v296 = vmovl_high_s16(v295);
  v278.i64[0] = v296.u32[2];
  v278.i64[1] = v296.u32[3];
  int8x16_t v297 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v278);
  int32x4_t v298 = vmovl_s16(*(int16x4_t *)v292.i8);
  v278.i64[0] = v298.u32[2];
  v278.i64[1] = v298.u32[3];
  int8x16_t v299 = vbicq_s8((int8x16_t)xmmword_1A28FCA10, v278);
  int32x4_t v300 = vmovl_s16(*(int16x4_t *)v295.i8);
  v278.i64[0] = v300.u32[2];
  v278.i64[1] = v300.u32[3];
  int8x16_t v301 = vbicq_s8((int8x16_t)xmmword_1A28FCA20, v278);
  v278.i64[0] = v293.u32[0];
  v278.i64[1] = v293.u32[1];
  int8x16_t v302 = vbicq_s8((int8x16_t)xmmword_1A28FCA30, v278);
  v278.i64[0] = v296.u32[0];
  v278.i64[1] = v296.u32[1];
  int8x16_t v303 = vbicq_s8((int8x16_t)xmmword_1A28FCA40, v278);
  v278.i64[0] = v298.u32[0];
  v278.i64[1] = v298.u32[1];
  int8x16_t v304 = vbicq_s8((int8x16_t)xmmword_1A28FCA50, v278);
  v278.i64[0] = v300.u32[0];
  v278.i64[1] = v300.u32[1];
  int8x16_t v305 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v278), v290);
  int8x16_t v306 = vorrq_s8(v304, v289);
  int8x16_t v307 = vorrq_s8(v303, v288);
  int8x16_t v308 = vorrq_s8(v302, v287);
  int8x16_t v309 = vorrq_s8(v301, v286);
  int8x16_t v310 = vorrq_s8(v299, v284);
  int8x16_t v311 = vorrq_s8(v297, v282);
  int8x16_t v312 = vorrq_s8(v294, v279);
  int8x16_t v313 = vceqzq_s8(*(int8x16_t *)(v271 + 360));
  int16x8_t v314 = vmovl_s8(*(int8x8_t *)v313.i8);
  int32x4_t v315 = vmovl_high_s16(v314);
  int16x8_t v316 = vmovl_high_s8(v313);
  int32x4_t v317 = vmovl_high_s16(v316);
  int32x4_t v318 = vmovl_s16(*(int16x4_t *)v314.i8);
  int32x4_t v319 = vmovl_s16(*(int16x4_t *)v316.i8);
  v278.i64[0] = v319.i32[0];
  v278.i64[1] = v319.i32[1];
  int8x16_t v320 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v278);
  v278.i64[0] = v318.i32[0];
  v278.i64[1] = v318.i32[1];
  int8x16_t v321 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v278);
  v278.i64[0] = v317.i32[0];
  v278.i64[1] = v317.i32[1];
  int8x16_t v322 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v278);
  v278.i64[0] = v315.i32[0];
  v278.i64[1] = v315.i32[1];
  int8x16_t v323 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v278);
  v278.i64[0] = v315.i32[2];
  v278.i64[1] = v315.i32[3];
  int8x16_t v324 = v278;
  v278.i64[0] = v317.i32[2];
  v278.i64[1] = v317.i32[3];
  int8x16_t v325 = v278;
  v278.i64[0] = v318.i32[2];
  v278.i64[1] = v318.i32[3];
  int8x16_t v326 = v278;
  v278.i64[0] = v319.i32[2];
  v278.i64[1] = v319.i32[3];
  int8x16_t v327 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v278);
  int8x16_t v328 = vceqzq_s8(*(int8x16_t *)(v271 + 376));
  int16x8_t v329 = vmovl_high_s8(v328);
  int32x4_t v330 = vmovl_s16(*(int16x4_t *)v329.i8);
  int16x8_t v331 = vmovl_s8(*(int8x8_t *)v328.i8);
  int32x4_t v332 = vmovl_s16(*(int16x4_t *)v331.i8);
  int32x4_t v333 = vmovl_high_s16(v329);
  int32x4_t v334 = vmovl_high_s16(v331);
  v278.i64[0] = v334.i32[2];
  v278.i64[1] = v334.i32[3];
  int8x16_t v335 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v278);
  v278.i64[0] = v333.i32[2];
  v278.i64[1] = v333.i32[3];
  int8x16_t v336 = vbicq_s8((int8x16_t)xmmword_1A28FCB00, v278);
  v278.i64[0] = v332.i32[2];
  v278.i64[1] = v332.i32[3];
  int8x16_t v337 = vbicq_s8((int8x16_t)xmmword_1A28FCB10, v278);
  v278.i64[0] = v330.i32[2];
  v278.i64[1] = v330.i32[3];
  int8x16_t v338 = vbicq_s8((int8x16_t)xmmword_1A28FCB20, v278);
  v278.i64[0] = v334.i32[0];
  v278.i64[1] = v334.i32[1];
  int8x16_t v339 = vbicq_s8((int8x16_t)xmmword_1A28FCB30, v278);
  v278.i64[0] = v333.i32[0];
  v278.i64[1] = v333.i32[1];
  int8x16_t v340 = vbicq_s8((int8x16_t)xmmword_1A28FCB40, v278);
  v278.i64[0] = v332.i32[0];
  v278.i64[1] = v332.i32[1];
  int8x16_t v341 = vbicq_s8((int8x16_t)xmmword_1A28FCB50, v278);
  v278.i64[0] = v330.i32[0];
  v278.i64[1] = v330.i32[1];
  *((void *)v271 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v341, v321), v306), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v278), v320), v305)), vorrq_s8(vorrq_s8(vorrq_s8(v339, v323), v308), vorrq_s8(vorrq_s8(v340, v322), v307))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v337, vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v326)), v310), vorrq_s8(vorrq_s8(v338, v327), v309)), vorrq_s8(vorrq_s8(vorrq_s8(v335, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v324)),
                                                v312),
                                              vorrq_s8(vorrq_s8(v336, vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v325)), v311)))));
  *((void *)v271 + 3) = &unk_1EF5619B0;
  v271[312] = 1;
  v342 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = v271 + 24;
  *((void *)this + 11) = v271;
  if (v342 && !atomic_fetch_add(&v342->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
    std::__shared_weak_count::__release_weak(v342);
  }
  uint64_t v343 = (std::__shared_weak_count *)*((void *)&v355 + 1);
  if (*((void *)&v355 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v355 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  operator new();
}

void sub_1A1D2A320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,void *a24)
{
  std::function<ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::~function(v25);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v27);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v26);
  std::function<void ()(ggl::Textured::ScreenTexturedQuadPipelineSetup *)>::~function(&STACK[0x340]);
  std::function<ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::~function(&STACK[0x360]);
  MEMORY[0x1A6239270](v26, 0x10A0C40D234DDC7);
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)(v24 + 42));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v24 + 40));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v24 + 38));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v24 + 36));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v24 + 34));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v24 + 32));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  uint64_t v30 = v24[27];
  v24[27] = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = v24[26];
  v24[26] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = v24[25];
  v24[25] = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = v24[24];
  v24[24] = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = v24[23];
  v24[23] = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = v24[22];
  v24[22] = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = v24[21];
  v24[21] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](v28);
  std::unique_ptr<ggl::FragmentedPool<ggl::Textured::ScreenTexturedQuadPipelineSetup>>::~unique_ptr[abi:nn180100](a16);
  std::unique_ptr<ggl::FragmentedPool<ggl::Textured::Pos2DUVExtendedPipelineSetup>>::~unique_ptr[abi:nn180100](a17);
  std::unique_ptr<ggl::FragmentedPool<ggl::Point::PipelineSetup>>::~unique_ptr[abi:nn180100](a18);
  std::unique_ptr<ggl::FragmentedPool<ggl::Debug::InstancedBasePipelineSetup>>::~unique_ptr[abi:nn180100](a19);
  std::unique_ptr<ggl::FragmentedPool<ggl::Debug::LinePipelineSetup>>::~unique_ptr[abi:nn180100](a22);
  std::unique_ptr<ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>>::~unique_ptr[abi:nn180100](a23);
  std::unique_ptr<ggl::FragmentedPool<ggl::Debug::LineMesh>>::~unique_ptr[abi:nn180100](a21);
  std::unique_ptr<ggl::FragmentedPool<ggl::CommonMesh::Pos4Mesh>>::~unique_ptr[abi:nn180100](a20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v24);

  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured31ScreenTexturedQuadPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C798;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured28Pos2DUVExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C708;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Point13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C1F8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug8LineMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C1B0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug26InstancedBasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C168;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17LinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C0D8;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577640;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::Textured::Pos2DUVExtendedPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5775F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::Point::PipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5775B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Debug::InstancedBasePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577568;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Debug::LineMesh * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5774D8;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Debug::LinePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577490;
  a2[1] = v2;
  return result;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::SDFGlyphRenderer::SDFGlyphRenderer(unsigned int,unsigned int,unsigned int)::$_0 &&>>()
{
  uint64_t v0 = 0;
  uint64x2_t v1 = (uint64x2_t)xmmword_1A28FE820;
  uint64x2_t v2 = (uint64x2_t)xmmword_1A28FE830;
  uint64x2_t v3 = (uint64x2_t)xmmword_1A28FE840;
  uint64x2_t v4 = (uint64x2_t)xmmword_1A28FC8E0;
  uint64x2_t v5 = (uint64x2_t)xmmword_1A28FC8F0;
  uint64x2_t v6 = (uint64x2_t)xmmword_1A28FC900;
  uint64x2_t v7 = (uint64x2_t)xmmword_1A28FC910;
  float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  uint64x2_t v8 = (uint64x2_t)xmmword_1A28FC760;
  float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  int64x2_t v29 = vdupq_n_s64(0x10uLL);
  do
  {
    int64x2_t v37 = (int64x2_t)v8;
    int64x2_t v38 = (int64x2_t)v3;
    int64x2_t v32 = (int64x2_t)v7;
    int64x2_t v33 = (int64x2_t)v6;
    int64x2_t v34 = (int64x2_t)v5;
    int64x2_t v35 = (int64x2_t)v4;
    int64x2_t v36 = (int64x2_t)v2;
    int64x2_t v39 = (int64x2_t)v1;
    float32x4_t v40 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v4)), vcvtq_f64_u64(v3)), v31);
    float32x4_t v43 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v2)), vcvtq_f64_u64(v1)), v31);
    float32x4_t v44 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v6)), vcvtq_f64_u64(v5)), v31);
    float32x4_t v48 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v8)), vcvtq_f64_u64(v7)), v31);
    float v52 = powf(v48.f32[1], 0.55556);
    v9.f32[0] = powf(v48.f32[0], 0.55556);
    v9.f32[1] = v52;
    float32x4_t v53 = v9;
    float v10 = powf(v48.f32[2], 0.55556);
    float32x4_t v11 = v53;
    v11.f32[2] = v10;
    float32x4_t v54 = v11;
    float v12 = powf(v48.f32[3], 0.55556);
    float32x4_t v13 = v54;
    v13.f32[3] = v12;
    float32x4_t v55 = v13;
    v48.i32[0] = powf(v44.f32[1], 0.55556);
    v14.f32[0] = powf(v44.f32[0], 0.55556);
    v14.i32[1] = v48.i32[0];
    float32x4_t v49 = v14;
    float v15 = powf(v44.f32[2], 0.55556);
    float32x4_t v16 = v49;
    v16.f32[2] = v15;
    float32x4_t v50 = v16;
    float v17 = powf(v44.f32[3], 0.55556);
    float32x4_t v18 = v50;
    v18.f32[3] = v17;
    float32x4_t v51 = v18;
    v44.i32[0] = powf(v40.f32[1], 0.55556);
    v19.f32[0] = powf(v40.f32[0], 0.55556);
    v19.i32[1] = v44.i32[0];
    float32x4_t v45 = v19;
    float v20 = powf(v40.f32[2], 0.55556);
    float32x4_t v21 = v45;
    v21.f32[2] = v20;
    float32x4_t v46 = v21;
    float v22 = powf(v40.f32[3], 0.55556);
    float32x4_t v23 = v46;
    v23.f32[3] = v22;
    float32x4_t v47 = v23;
    v40.i32[0] = powf(v43.f32[1], 0.55556);
    v24.f32[0] = powf(v43.f32[0], 0.55556);
    v24.i32[1] = v40.i32[0];
    float32x4_t v41 = v24;
    float v25 = powf(v43.f32[2], 0.55556);
    float32x4_t v26 = v41;
    v26.f32[2] = v25;
    float32x4_t v42 = v26;
    float v27 = powf(v43.f32[3], 0.55556);
    float32x4_t v28 = v42;
    v28.f32[3] = v27;
    v56.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v55, v30));
    v56.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v51, v30));
    v56.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v47, v30));
    v56.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v28, v30));
    md::SDFGlyphRenderer::_coverageMaskDeGammaTable[v0++] = (__int128)vqtbl4q_s8(v56, (int8x16_t)xmmword_1A28FE720);
    uint64x2_t v6 = (uint64x2_t)vaddq_s64(v33, v29);
    uint64x2_t v7 = (uint64x2_t)vaddq_s64(v32, v29);
    uint64x2_t v8 = (uint64x2_t)vaddq_s64(v37, v29);
    uint64x2_t v5 = (uint64x2_t)vaddq_s64(v34, v29);
    uint64x2_t v4 = (uint64x2_t)vaddq_s64(v35, v29);
    uint64x2_t v3 = (uint64x2_t)vaddq_s64(v38, v29);
    uint64x2_t v2 = (uint64x2_t)vaddq_s64(v36, v29);
    uint64x2_t v1 = (uint64x2_t)vaddq_s64(v39, v29);
  }
  while (v0 != 16);
}

void sub_1A1D2B0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::DaVinciMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 29)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_11;
      }
    }
  }
  if (v5 == v6 || *(void *)(v5 + 32) != 1)
  {
LABEL_11:
    uint64_t v9 = 0;
LABEL_12:
    int16x8_t v68 = 0;
    if (!v9) {
      goto LABEL_65;
    }
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v7 + 112);
  uint64x2_t v8 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v8) {
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  int16x8_t v68 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v9)
    {
LABEL_65:
      int8x16_t v65 = operator new(0x340uLL);
      v65[1] = 0;
      v65[2] = 0;
      *int8x16_t v65 = &unk_1EF580B80;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      v69[0] = 0;
      v69[1] = 0;
      md::MapTileData::MapTileData((uint64_t)(v65 + 3), a1, (uint64_t)&v70, v69, 1);
      v65[3] = &unk_1EF53B800;
      v65[82] = &unk_1EF53B840;
      *(void *)((char *)v65 + 740) = 0;
      *((_OWORD *)v65 + 47) = 0u;
      *((_OWORD *)v65 + 48) = 0u;
      *((_OWORD *)v65 + 49) = 0u;
      *((_OWORD *)v65 + 50) = 0u;
      v65[102] = 0;
      *((_WORD *)v65 + 412) = 1;
      *((_DWORD *)v65 + 207) = 1;
      *((unsigned char *)v65 + 748) = 0;
      std::vector<BOOL>::resize((uint64_t)(v65 + 97), 1uLL);
      *(void *)v65[97] &= ~1uLL;
      std::vector<BOOL>::resize((uint64_t)(v65 + 94), 1uLL);
      *(void *)v65[94] &= ~1uLL;
      int8x16_t v66 = (_WORD *)v65[100];
      unint64_t v67 = v65[101] - (void)v66;
      if (v67)
      {
        if (v67 >= 3) {
          v65[101] = v66 + 1;
        }
      }
      else
      {
        std::vector<md::DaVinciMetaTileData::PackedElevationRange>::__append((uint64_t)(v65 + 100), 1uLL);
        int8x16_t v66 = (_WORD *)v65[100];
      }
      *int8x16_t v66 = 0;
      *a3 = v65 + 3;
      a3[1] = v65;
      int8x16_t v64 = v68;
      if (v68) {
        goto LABEL_70;
      }
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9) {
      goto LABEL_65;
    }
  }
LABEL_13:
  float32x4_t v11 = *(geo::codec::VectorTile **)(v9 + 144);
  float v10 = (uint64_t *)(v9 + 144);
  if (!geo::codec::VectorTile::daVinciMetaData(v11)) {
    goto LABEL_65;
  }
  float v12 = (std::__shared_weak_count *)operator new(0x340uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580B80;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  md::MapTileData::MapTileData((uint64_t)&v12[1], a1, (uint64_t)&v70, v10, 1);
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF53B800;
  v12[27].__shared_owners_ = (uint64_t)&unk_1EF53B840;
  p_uint64_t shared_owners = &v12[33].__shared_owners_;
  *(_OWORD *)&v12[31].__shared_owners_ = 0u;
  v12[32].std::__shared_count = 0u;
  *(_OWORD *)&v12[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[33].__shared_owners_ = 0u;
  v12[34].__vftable = 0;
  uint64_t v14 = geo::codec::VectorTile::daVinciMetaData((geo::codec::VectorTile *)*v10);
  *(uint64_t *)((char *)&v12[30].__shared_weak_owners_ + 4) = *(void *)v14;
  unsigned int v15 = *(unsigned __int16 *)(v14 + 8);
  LOWORD(v12[34].__shared_owners_) = v15;
  unsigned int v16 = 31 - __clz(v15);
  if (!v15) {
    LOBYTE(v16) = 0;
  }
  BYTE4(v12[31].__vftable) = v16;
  std::vector<BOOL>::resize((uint64_t)&v12[32].__shared_owners_, v15 * v15);
  std::vector<BOOL>::resize((uint64_t)&v12[31].__shared_owners_, LOWORD(v12[34].__shared_owners_) * LOWORD(v12[34].__shared_owners_));
  HIDWORD(v12[34].__shared_owners_) = 0;
  unsigned int shared_owners_low = LOWORD(v12[34].__shared_owners_);
  if (shared_owners_low <= 1)
  {
    unint64_t v18 = 0;
    p_shared_weak_owners = &v12[33].__shared_weak_owners_;
    uint64_t shared_owners = v12[33].__shared_owners_;
    if (!((v12[33].__shared_weak_owners_ - shared_owners) >> 1)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  LODWORD(v18) = 0;
  unsigned int v19 = LOWORD(v12[34].__shared_owners_);
  do
  {
    unint64_t v18 = v18 + v19 * v19;
    BOOL v20 = v19 > 3;
    v19 >>= 1;
  }
  while (v20);
  HIDWORD(v12[34].__shared_owners_) = v18;
  uint64_t shared_owners = v12[33].__shared_owners_;
  unint64_t v22 = (v12[33].__shared_weak_owners_ - shared_owners) >> 1;
  if (v18 > v22)
  {
    std::vector<md::DaVinciMetaTileData::PackedElevationRange>::__append((uint64_t)&v12[33].__shared_owners_, v18 - v22);
    unsigned int shared_owners_low = LOWORD(v12[34].__shared_owners_);
    goto LABEL_23;
  }
  p_shared_weak_owners = &v12[33].__shared_weak_owners_;
  if (v22 > v18) {
LABEL_22:
  }
    uint64_t *p_shared_weak_owners = shared_owners + 2 * v18;
LABEL_23:
  if (!shared_owners_low) {
    goto LABEL_57;
  }
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = v12[32].__shared_owners_;
  uint64_t v27 = v12[31].__shared_owners_;
  uint64_t v28 = *(void *)(v14 + 24);
  uint64_t v29 = *p_shared_owners;
  uint64_t v30 = *p_shared_owners + 1;
  uint64_t v31 = 2 * shared_owners_low;
  uint64_t v32 = *(void *)(v14 + 16) + 1;
  while (2)
  {
    uint64_t v33 = v32;
    uint64_t v34 = v30;
    unint64_t v35 = v24;
    uint64_t v36 = shared_owners_low;
    do
    {
      char v38 = *(unsigned char *)(v28 + v35);
      unint64_t v39 = v35 >> 6;
      uint64_t v40 = 1 << v35;
      if ((v38 & 2) != 0)
      {
        *(void *)(v26 + 8 * v39) |= v40;
        if ((v38 & 1) == 0)
        {
LABEL_27:
          uint64_t v37 = *(void *)(v27 + 8 * v39) & ~v40;
          goto LABEL_28;
        }
      }
      else
      {
        *(void *)(v26 + 8 * v39) &= ~v40;
        if ((v38 & 1) == 0) {
          goto LABEL_27;
        }
      }
      uint64_t v37 = *(void *)(v27 + 8 * v39) | v40;
LABEL_28:
      *(void *)(v27 + 8 * v39) = v37;
      *(_WORD *)(v34 - 1) = *(_WORD *)(v33 - 1);
      v34 += 2;
      v33 += 2;
      ++v35;
      --v36;
    }
    while (v36);
    ++v25;
    v24 += shared_owners_low;
    v30 += v31;
    v32 += v31;
    if (v25 != shared_owners_low) {
      continue;
    }
    break;
  }
  if (shared_owners_low >= 4)
  {
    int v41 = 0;
    do
    {
      unsigned int v42 = (unsigned __int16)shared_owners_low;
      if ((unsigned __int16)shared_owners_low < 2u) {
        break;
      }
      int v43 = 0;
      int v44 = 0;
      unsigned int shared_owners_low = (unsigned __int16)shared_owners_low >> 1;
      int v45 = v42 * v42;
      uint64_t v46 = shared_owners_low <= 1 ? 1 : shared_owners_low;
      int v47 = 2 * v42;
      unsigned int v48 = v42;
      do
      {
        int v49 = v43;
        unsigned int v50 = v48;
        int v51 = v45;
        uint64_t v52 = v46;
        do
        {
          float32x4_t v53 = (unsigned __int8 *)(v29 + 2 * (v41 + v49));
          float32x4_t v54 = (unsigned __int8 *)(v29 + 2 * (v41 + v49 + 1));
          unsigned int v55 = *v54;
          if (v55 >= *v53) {
            unsigned int v55 = *v53;
          }
          unsigned int v56 = v53[1];
          unsigned int v57 = v54[1];
          if (v56 > v57) {
            unsigned int v57 = v56;
          }
          int8x16_t v58 = (unsigned __int8 *)(v29 + 2 * (v41 + v50));
          int8x16_t v59 = (unsigned __int8 *)(v29 + 2 * (v41 + v50 + 1));
          unsigned int v60 = *v59;
          if (v60 >= *v58) {
            unsigned int v60 = *v58;
          }
          unsigned int v61 = v58[1];
          unsigned int v62 = v59[1];
          if (v61 > v62) {
            unsigned int v62 = v61;
          }
          if (v60 < v55) {
            LOBYTE(v55) = v60;
          }
          int8x16_t v63 = (unsigned char *)(v29 + 2 * (v41 + v51));
          *int8x16_t v63 = v55;
          if (v57 <= v62) {
            LOBYTE(v57) = v62;
          }
          v63[1] = v57;
          ++v51;
          v50 += 2;
          v49 += 2;
          --v52;
        }
        while (v52);
        ++v44;
        v45 += shared_owners_low;
        v48 += v47;
        v43 += v47;
      }
      while (v44 != v46);
      v41 += v42 * v42;
    }
    while (v42 >= 8);
  }
LABEL_57:
  *a3 = v12 + 1;
  a3[1] = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int8x16_t v64 = v68;
    if (!v68) {
      return;
    }
LABEL_70:
    if (!atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    int8x16_t v64 = v68;
    if (v68) {
      goto LABEL_70;
    }
  }
}

void sub_1A1D2B73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  unsigned int v16 = *v14;
  if (*v14)
  {
    v10[33].__shared_weak_owners_ = (uint64_t)v16;
    operator delete(v16);
    float v17 = *v13;
    if (!*v13)
    {
LABEL_3:
      unint64_t v18 = *v12;
      if (!*v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    float v17 = *v13;
    if (!*v13) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  unint64_t v18 = *v12;
  if (!*v12)
  {
LABEL_5:
    md::MapTileData::~MapTileData(v11);
    std::__shared_weak_count::~__shared_weak_count(v10);
    operator delete(v19);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v18);
  goto LABEL_5;
}

uint64_t geo::codec::VectorTile::daVinciMetaData(geo::codec::VectorTile *this)
{
  return *((void *)this + 279);
}

void md::RouteAnnotationSupport::setTrafficFeatures(md::RouteAnnotationSupport *this, NSArray *a2)
{
  uint64_t v352 = *MEMORY[0x1E4F143B8];
  int8x16_t v320 = a2;
  if ([(NSArray *)v320 isEqualToArray:*((void *)this + 2)]) {
    goto LABEL_495;
  }
  uint64_t v4 = *((void *)this + 10);
  for (uint64_t i = *((void *)this + 11); i != v4; i -= 8)
  {
    uint64_t v5 = *(void **)(i - 8);
  }
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 11) = v4;
  for (uint64_t j = *((void *)this + 7); j != v6; j -= 8)
  {
    uint64x2_t v8 = *(void **)(j - 8);
  }
  *((void *)this + 7) = v6;
  uint64_t v9 = [objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v320 copyItems:0];
  float v10 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v9;

  long long v343 = 0u;
  long long v344 = 0u;
  long long v345 = 0u;
  long long v346 = 0u;
  id v11 = *((id *)this + 2);
  unint64_t v12 = [v11 countByEnumeratingWithState:&v343 objects:v351 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v344;
    do
    {
      for (uint64_t k = 0; k != v12; ++k)
      {
        if (*(void *)v344 != v13) {
          objc_enumerationMutation(v11);
        }
        unsigned int v16 = *(void **)(*((void *)&v343 + 1) + 8 * k);
        int8x16_t v336 = v16;
        if ([v16 isIncident])
        {
          float v17 = (void *)*((void *)this + 11);
          if ((unint64_t)v17 >= *((void *)this + 12))
          {
            *((void *)this + 11) = std::vector<VKTrafficFeature * {__strong},geo::StdAllocator<VKTrafficFeature * {__strong},mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * const {__strong}&>((uint64_t)this + 80, (id *)&v336);
          }
          else
          {
            if (v17) {
              *float v17 = v16;
            }
            *((void *)this + 11) = v17 + 1;
          }
        }
        else
        {
          unint64_t v18 = (void *)*((void *)this + 7);
          if ((unint64_t)v18 >= *((void *)this + 8))
          {
            unsigned int v15 = std::vector<VKTrafficFeature * {__strong},geo::StdAllocator<VKTrafficFeature * {__strong},mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * const {__strong}&>((uint64_t)this + 48, (id *)&v336);
          }
          else
          {
            if (v18) {
              *unint64_t v18 = v16;
            }
            unsigned int v15 = v18 + 1;
          }
          *((void *)this + 7) = v15;
        }
      }
      unint64_t v12 = [v11 countByEnumeratingWithState:&v343 objects:v351 count:16];
    }
    while (v12);
  }

  unsigned int v19 = (id *)*((void *)this + 6);
  BOOL v20 = (id *)*((void *)this + 7);
  unint64_t v21 = 126 - 2 * __clz(v20 - v19);
  if (v20 == v19) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,false>(v19, v20, v22, 1);
  unint64_t v24 = (id *)*((void *)this + 6);
  float32x4_t v23 = (id *)*((void *)this + 7);
  int32x4_t v332 = (void *)((char *)this + 176);
  uint64_t v25 = *((void *)this + 27);
  if (v25 != v23 - v24) {
    goto LABEL_153;
  }
  if (v24 == v23) {
    goto LABEL_495;
  }
  do
  {
    id v26 = *v24;
    unint64_t v12 = [v26 uniqueIdentifier];
    unint64_t v27 = [(id)v12 hash];

    int8x8_t v28 = *(int8x8_t *)((char *)this + 184);
    if (!*(void *)&v28) {
      goto LABEL_152;
    }
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      unint64_t v30 = v27;
      if (v27 >= *(void *)&v28) {
        unint64_t v30 = v27 % *(void *)&v28;
      }
    }
    else
    {
      unint64_t v30 = (*(void *)&v28 - 1) & v27;
    }
    uint64_t v31 = *(void **)(*v332 + 8 * v30);
    if (!v31 || (uint64_t v32 = (void *)*v31) == 0)
    {
LABEL_152:

      uint64_t v25 = *((void *)this + 27);
LABEL_153:
      if (v25)
      {
        int8x16_t v80 = (uint64_t *)*((void *)this + 25);
        if (v80)
        {
          do
          {
            int32x4_t v81 = (uint64_t *)*v80;

            (*(void (**)(void, uint64_t *, uint64_t))(**((void **)this + 26) + 40))(*((void *)this + 26), v80, 32);
            int8x16_t v80 = v81;
          }
          while (v81);
        }
        *((void *)this + 25) = 0;
        uint64_t v82 = *((void *)this + 23);
        if (v82)
        {
          for (uint64_t m = 0; m != v82; ++m)
            *(void *)(*v332 + 8 * m) = 0;
        }
        *((void *)this + 27) = 0;
      }
      *((void *)this + 19) = *((void *)this + 18);
      uint64_t v84 = *((void *)this + 14);
      int8x16_t v321 = (char *)this + 112;
      int8x16_t v322 = (uint64_t **)((char *)this + 144);
      uint64_t v85 = *((void *)this + 15);
      if (v85 != v84)
      {
        unint64_t v12 = -1;
        do
        {
          int8x16_t v86 = *(std::__shared_weak_count **)(v85 - 8);
          if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
          v85 -= 16;
        }
        while (v85 != v84);
      }
      *((void *)this + 15) = v84;
      int8x16_t v336 = 0;
      unint64_t v337 = 0;
      {
        operator new();
      }
      uint64_t v338 = mdm::Allocator::instance(void)::alloc;
      int8x16_t v339 = 0;
      {
        operator new();
      }
      uint64_t v340 = mdm::Allocator::instance(void)::alloc;
      unint64_t v341 = 0;
      float v342 = 1.0;
      int32x4_t v87 = (id *)*((void *)this + 6);
      int16x8_t v331 = (id *)*((void *)this + 7);
      while (v87 != v331)
      {
        id v335 = *v87;
        if ([v335 isGrouped])
        {
          int v88 = [v335 groupIdentifier];
          int v89 = v88;
          unint64_t v90 = v88;
          unint64_t v91 = v337;
          if (v337)
          {
            uint8x8_t v92 = (uint8x8_t)vcnt_s8((int8x8_t)v337);
            v92.i16[0] = vaddlv_u8(v92);
            if (v92.u32[0] > 1uLL)
            {
              unint64_t v12 = v88;
              if (v337 <= v88) {
                unint64_t v12 = v88 % v337;
              }
            }
            else
            {
              unint64_t v12 = (v337 - 1) & v88;
            }
            int8x16_t v118 = (id *)v336[v12];
            if (v118)
            {
              int8x16_t v119 = *v118;
              if (*v118)
              {
                if (v92.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v121 = v119[1];
                    if (v121 == v88)
                    {
                      if (*((_DWORD *)v119 + 4) == v88) {
                        goto LABEL_324;
                      }
                    }
                    else if ((v121 & (v337 - 1)) != v12)
                    {
                      goto LABEL_215;
                    }
                    int8x16_t v119 = (void *)*v119;
                    if (!v119) {
                      goto LABEL_215;
                    }
                  }
                }
                do
                {
                  unint64_t v120 = v119[1];
                  if (v120 == v88)
                  {
                    if (*((_DWORD *)v119 + 4) == v88) {
                      goto LABEL_324;
                    }
                  }
                  else
                  {
                    if (v120 >= v337) {
                      v120 %= v337;
                    }
                    if (v120 != v12) {
                      break;
                    }
                  }
                  int8x16_t v119 = (void *)*v119;
                }
                while (v119);
              }
            }
          }
LABEL_215:
          int8x16_t v119 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v340 + 16))(v340, 48, 8);
          uint64_t v347 = (id *)v119;
          uint64_t v348 = &v340;
          *int8x16_t v119 = 0;
          v119[1] = v90;
          *((_DWORD *)v119 + 4) = v89;
          v119[4] = 0;
          v119[5] = 0;
          v119[3] = 0;
          LOBYTE(v349) = 1;
          float v122 = (float)(v341 + 1);
          if (!v91 || (float)(v342 * (float)v91) < v122)
          {
            BOOL v123 = (v91 & (v91 - 1)) != 0;
            if (v91 < 3) {
              BOOL v123 = 1;
            }
            unint64_t v124 = v123 | (2 * v91);
            unint64_t v125 = vcvtps_u32_f32(v122 / v342);
            if (v124 <= v125) {
              int8x8_t prime = (int8x8_t)v125;
            }
            else {
              int8x8_t prime = (int8x8_t)v124;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            }
            unint64_t v91 = v337;
            if (*(void *)&prime > v337)
            {
LABEL_227:
              int8x16_t v127 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v338 + 16))(v338, 8 * *(void *)&prime, 8);
              int16x8_t v128 = v336;
              int8x16_t v336 = v127;
              if (v128) {
                (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v338 + 40))(v338, v128, 8 * v337);
              }
              uint64_t v129 = 0;
              unint64_t v337 = (unint64_t)prime;
              do
                v336[v129++] = 0;
              while (*(void *)&prime != v129);
              int8x16_t v130 = (void **)v339;
              if (!v339) {
                goto LABEL_300;
              }
              unint64_t v131 = v339[1];
              uint64_t v132 = *(void *)&prime - 1;
              if ((*(void *)&prime & (*(void *)&prime - 1)) == 0)
              {
                uint64_t v133 = v131 & v132;
                v336[v133] = &v339;
                for (n = *v130; *v130; n = *v130)
                {
                  uint64_t v135 = n[1] & v132;
                  if (v135 == v133)
                  {
                    int8x16_t v130 = (void **)n;
                  }
                  else if (v336[v135])
                  {
                    *int8x16_t v130 = (void *)*n;
                    uint64_t v136 = v135;
                    void *n = *(void *)v336[v136];
                    *(void *)v336[v136] = n;
                  }
                  else
                  {
                    v336[v135] = v130;
                    int8x16_t v130 = (void **)n;
                    uint64_t v133 = v135;
                  }
                }
                goto LABEL_300;
              }
              if (v131 >= *(void *)&prime) {
                v131 %= *(void *)&prime;
              }
              v336[v131] = &v339;
              v177 = *v130;
              if (!*v130)
              {
LABEL_300:
                unint64_t v91 = (unint64_t)prime;
                goto LABEL_301;
              }
              while (2)
              {
                unint64_t v179 = v177[1];
                if (v179 >= *(void *)&prime) {
                  v179 %= *(void *)&prime;
                }
                if (v179 != v131)
                {
                  if (!v336[v179])
                  {
                    v336[v179] = v130;
LABEL_305:
                    int8x16_t v130 = (void **)v177;
                    v177 = (void *)*v177;
                    unint64_t v131 = v179;
                    if (!v177) {
                      goto LABEL_300;
                    }
                    continue;
                  }
                  *int8x16_t v130 = (void *)*v177;
                  uint64_t v178 = v179;
                  void *v177 = *(void *)v336[v178];
                  *(void *)v336[v178] = v177;
                  v177 = v130;
                }
                break;
              }
              unint64_t v179 = v131;
              goto LABEL_305;
            }
            if (*(void *)&prime < v337)
            {
              unint64_t v137 = vcvtps_u32_f32((float)v341 / v342);
              if (v337 < 3
                || (uint8x8_t v138 = (uint8x8_t)vcnt_s8((int8x8_t)v337), v138.i16[0] = vaddlv_u8(v138), v138.u32[0] > 1uLL))
              {
                unint64_t v137 = std::__next_prime(v137);
              }
              else
              {
                uint64_t v139 = 1 << -(char)__clz(v137 - 1);
                if (v137 >= 2) {
                  unint64_t v137 = v139;
                }
              }
              if (*(void *)&prime <= v137) {
                int8x8_t prime = (int8x8_t)v137;
              }
              if (*(void *)&prime >= v91)
              {
                unint64_t v91 = v337;
              }
              else
              {
                if (prime) {
                  goto LABEL_227;
                }
                int32x4_t v214 = v336;
                int8x16_t v336 = 0;
                if (v214) {
                  (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v338 + 40))(v338, v214, 8 * v337);
                }
                unint64_t v91 = 0;
                unint64_t v337 = 0;
              }
            }
LABEL_301:
            if ((v91 & (v91 - 1)) != 0)
            {
              if (v91 <= v90) {
                unint64_t v12 = v90 % v91;
              }
              else {
                unint64_t v12 = v90;
              }
            }
            else
            {
              unint64_t v12 = (v91 - 1) & v90;
            }
          }
          uint64_t v180 = (void *)v336[v12];
          if (v180)
          {
            *int8x16_t v119 = *v180;
            goto LABEL_322;
          }
          *int8x16_t v119 = v339;
          int8x16_t v339 = v119;
          v336[v12] = &v339;
          if (*v119)
          {
            unint64_t v181 = *(void *)(*v119 + 8);
            if ((v91 & (v91 - 1)) != 0)
            {
              if (v181 >= v91) {
                v181 %= v91;
              }
            }
            else
            {
              v181 &= v91 - 1;
            }
            uint64_t v180 = &v336[v181];
LABEL_322:
            *uint64_t v180 = v119;
          }
          ++v341;
LABEL_324:
          long long v183 = (void *)v119[4];
          unint64_t v182 = v119[5];
          if ((unint64_t)v183 >= v182)
          {
            uint64_t v185 = v119[3];
            int8x16_t v186 = (char *)v183 - v185;
            uint64_t v187 = ((uint64_t)v183 - v185) >> 3;
            if ((unint64_t)(v187 + 1) >> 61) {
              abort();
            }
            uint64_t v188 = v182 - v185;
            uint64_t v189 = v188 >> 2;
            if (v188 >> 2 <= (unint64_t)(v187 + 1)) {
              uint64_t v189 = v187 + 1;
            }
            if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v190 = v189;
            }
            if (v190)
            {
              if (v190 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              int16x8_t v191 = (char *)operator new(8 * v190);
            }
            else
            {
              int16x8_t v191 = 0;
            }
            int32x4_t v192 = &v191[8 * v187];
            unint64_t v12 = (unint64_t)&v191[8 * v190];
            *(void *)int32x4_t v192 = v335;
            long long v184 = v192 + 8;
            int8x16_t v193 = (char *)v119[3];
            int32x4_t v194 = (char *)v119[4];
            if (v194 == v193)
            {
              v119[3] = v192;
              v119[4] = v184;
              v119[5] = v12;
            }
            else
            {
              unint64_t v195 = v194 - v193 - 8;
              if (v195 <= 0x77
                || &v194[-(v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v192
                && &v186[(void)v191 - (v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v194)
              {
                goto LABEL_514;
              }
              uint64_t v196 = (v195 >> 3) + 1;
              int8x16_t v197 = &v191[8 * v187 - 16];
              int8x16_t v198 = v194 - 32;
              uint64_t v199 = v196 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v201 = *(_OWORD *)v198;
                long long v200 = *((_OWORD *)v198 + 1);
                *(_OWORD *)int8x16_t v198 = 0uLL;
                *((_OWORD *)v198 + 1) = 0uLL;
                v198 -= 32;
                *((_OWORD *)v197 - 1) = v201;
                *(_OWORD *)int8x16_t v197 = v200;
                v197 -= 32;
                v199 -= 4;
              }
              while (v199);
              v192 -= 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
              v194 -= 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
              if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_514:
                do
                {
                  uint64_t v202 = *((void *)v194 - 1);
                  v194 -= 8;
                  *(void *)int32x4_t v194 = 0;
                  *((void *)v192 - 1) = v202;
                  v192 -= 8;
                }
                while (v194 != v193);
              }
              int32x4_t v194 = (char *)v119[3];
              int8x16_t v203 = (char *)v119[4];
              v119[3] = v192;
              v119[4] = v184;
              v119[5] = v12;
              while (v203 != v194)
              {
                int8x16_t v204 = (void *)*((void *)v203 - 1);
                v203 -= 8;
              }
            }
            if (v194) {
              operator delete(v194);
            }
          }
          else
          {
            *long long v183 = v335;
            long long v184 = v183 + 1;
          }
          v119[4] = v184;
          goto LABEL_361;
        }
        int8x16_t v93 = (std::__shared_weak_count *)operator new(0x1A8uLL);
        v93->__shared_owners_ = 0;
        v93->__shared_weak_owners_ = 0;
        v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582208;
        id v94 = v335;
        uint64_t v95 = *((void *)this + 4);
        uint64_t v96 = (std::__shared_weak_count *)*((void *)this + 5);
        if (v96) {
          atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v97 = *(void *)this;
        unint64_t v12 = (unint64_t)v94;
        id v350 = (id)v12;
        [(id)v12 mercatorPoint];
        uint64_t v347 = v98;
        uint64_t v348 = v99;
        uint64_t v349 = v100;
        int8x16_t v328 = (void *)md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)&v93[1], (uint64_t)&v347);
        v93[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF548A10;
        v93[11].__shared_owners_ = v95;
        v93[11].__shared_weak_owners_ = (uint64_t)v96;
        if (v96) {
          atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v93[12].__vftable = 0;
        v93[12].__shared_owners_ = 0;
        v93[12].__shared_weak_owners_ = 0;
        {
          operator new();
        }
        v93[13].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
        v93[13].__shared_owners_ = 0;
        v93[13].__shared_weak_owners_ = 0;
        v93[14].__vftable = 0;
        {
          operator new();
        }
        v93[14].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
        v93[14].__shared_weak_owners_ = 0;
        v93[15].__vftable = 0;
        v93[15].__shared_owners_ = 0;
        {
          operator new();
        }
        p_uint64_t shared_owners = &v93[13].__shared_owners_;
        v93[15].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
        v93[16].__vftable = (std::__shared_weak_count_vtbl *)[(id)v12 routeOffset];
        [(id)v12 routeOffsetInMeters];
        v93[16].__shared_owners_ = v102;
        LOBYTE(v93[16].__shared_weak_owners_) = 0;
        BYTE4(v93[16].__shared_weak_owners_) = 0;
        BYTE4(v93[17].__shared_owners_) = [(id)v12 collisionPriority];
        uint64_t shared_owners = (void *)v93[12].__shared_owners_;
        if ((unint64_t)shared_owners >= v93[12].__shared_weak_owners_)
        {
          uint64_t v105 = std::vector<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * {__strong}&,geo::memory_management_mode const&>((uint64_t *)&v93[12], &v350);
        }
        else
        {
          if (shared_owners)
          {
            id v104 = (id)v12;
            *uint64_t shared_owners = &unk_1EF5596F8;
            shared_owners[1] = v104;
          }
          uint64_t v105 = (uint64_t)(shared_owners + 3);
        }
        v93[12].__shared_owners_ = v105;
        shared_weak_owners = (std::__shared_weak_count_vtbl *)v93[13].__shared_weak_owners_;
        int16x8_t v106 = v93[14].__vftable;
        if (shared_weak_owners < v106)
        {
          if (shared_weak_owners) {
            shared_weak_owners->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v350;
          }
          int8x16_t v108 = &shared_weak_owners->~__shared_weak_count_0;
          goto LABEL_260;
        }
        uint64_t v109 = ((uint64_t)shared_weak_owners - *p_shared_owners) >> 3;
        if ((unint64_t)(v109 + 1) >> 61) {
          abort();
        }
        uint64_t v110 = (uint64_t)v106 - *p_shared_owners;
        uint64_t v111 = v110 >> 2;
        if (v110 >> 2 <= (unint64_t)(v109 + 1)) {
          uint64_t v111 = v109 + 1;
        }
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v112 = v111;
        }
        if (v112)
        {
          uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v93[14].__shared_owners_ + 16))(v93[14].__shared_owners_, 8 * v112, 8);
          int8x16_t v114 = (void *)(v113 + 8 * v109);
          int32x4_t v115 = (std::__shared_weak_count_vtbl *)(v113 + 8 * v112);
          if (v113)
          {
            uint64_t v116 = v113 + 8 * v112;
            id v117 = v350;
            int32x4_t v115 = (std::__shared_weak_count_vtbl *)v116;
            *int8x16_t v114 = v117;
          }
        }
        else
        {
          int32x4_t v115 = 0;
          int8x16_t v114 = (void *)(8 * v109);
        }
        int8x16_t v108 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v114 + 1);
        int8x16_t v140 = (void *)v93[13].__shared_owners_;
        unint64_t v12 = v93[13].__shared_weak_owners_;
        if ((void *)v12 == v140)
        {
          v93[13].__shared_owners_ = (uint64_t)v114;
          v93[13].__shared_weak_owners_ = (uint64_t)v108;
          int8x16_t v146 = v93[14].__vftable;
          v93[14].__vftable = v115;
          goto LABEL_258;
        }
        unint64_t v141 = v12 - (void)v140 - 8;
        if (v141 > 0x57
          && ((unint64_t v142 = ((unint64_t)v140 - v12 + 7) & 0xFFFFFFFFFFFFFFF8, v12 + v142 >= (unint64_t)v114)
           || (unint64_t)v114 + v142 >= v12))
        {
          uint64_t v205 = (v141 >> 3) + 1;
          int8x16_t v143 = (void *)(v12 - 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL));
          int16x8_t v206 = v114 - 2;
          int32x4_t v207 = (long long *)(v12 - 32);
          uint64_t v208 = v205 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v210 = *v207;
            long long v209 = v207[1];
            *int32x4_t v207 = 0uLL;
            v207[1] = 0uLL;
            v207 -= 2;
            *(v206 - 1) = v210;
            *int16x8_t v206 = v209;
            v206 -= 2;
            v208 -= 4;
          }
          while (v208);
          v114 -= v205 & 0x3FFFFFFFFFFFFFFCLL;
          if (v205 == (v205 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_254;
          }
        }
        else
        {
          int8x16_t v143 = (void *)v93[13].__shared_weak_owners_;
        }
        do
        {
          uint64_t v144 = *--v143;
          *int8x16_t v143 = 0;
          *--int8x16_t v114 = v144;
        }
        while (v143 != v140);
LABEL_254:
        unint64_t v12 = v93[13].__shared_owners_;
        uint64_t v145 = v93[13].__shared_weak_owners_;
        v93[13].__shared_owners_ = (uint64_t)v114;
        v93[13].__shared_weak_owners_ = (uint64_t)v108;
        int8x16_t v146 = v93[14].__vftable;
        v93[14].__vftable = v115;
        while (v145 != v12)
        {
          int8x16_t v147 = *(void **)(v145 - 8);
          v145 -= 8;
        }
LABEL_258:
        if (v12) {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v93[14].__shared_owners_
        }
                                                                              + 40))(v93[14].__shared_owners_, v12, (unint64_t)v146 - v12);
LABEL_260:
        v93[13].__shared_weak_owners_ = (uint64_t)v108;
        id v148 = v350;
        [v350 facingAzimuth];
        if (v149 != -1.0)
        {
          [v148 facingAzimuth];
          if (!BYTE4(v93[16].__shared_weak_owners_)) {
            BYTE4(v93[16].__shared_weak_owners_) = 1;
          }
          float v151 = v150;
          *(float *)&v93[16].__shared_weak_owners_ = v151;
          *(float *)&v93[17].__vftable = md::LabelFeature::vectorFromAzimuth((md::LabelFeature *)&v93[9], v151, (const md::LabelPoint *)(*(unsigned char *)(*(void *)(v97 + 232) + 17) == 0));
          HIDWORD(v93[17].__vftable) = v152;
          LODWORD(v93[17].__shared_owners_) = v153;
        }

        if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
        id v333 = v328;
        int32x4_t v334 = v93;
        int8x16_t v154 = (void *)*((void *)this + 15);
        if ((unint64_t)v154 >= *((void *)this + 16))
        {
          int8x16_t v155 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>((uint64_t)v321, (uint64_t)&v333);
          int8x16_t v93 = v334;
          *((void *)this + 15) = v155;
          if (!v93) {
            goto LABEL_275;
          }
LABEL_273:
          if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
          goto LABEL_275;
        }
        if (v154)
        {
          *int8x16_t v154 = v328;
          v154[1] = v93;
          id v333 = 0;
          int32x4_t v334 = 0;
          int8x16_t v93 = 0;
        }
        *((void *)this + 15) = v154 + 2;
        if (v93) {
          goto LABEL_273;
        }
LABEL_275:
        uint64_t v156 = *(void *)(*((void *)this + 15) - 16);
        int16x8_t v157 = (void *)*((void *)this + 19);
        unint64_t v158 = *((void *)this + 20);
        if ((unint64_t)v157 >= v158)
        {
          uint64_t v160 = v157 - *v322;
          unint64_t v161 = v160 + 1;
          if ((unint64_t)(v160 + 1) >> 61) {
            abort();
          }
          uint64_t v162 = v158 - (void)*v322;
          if (v162 >> 2 > v161) {
            unint64_t v161 = v162 >> 2;
          }
          if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v163 = v161;
          }
          if (v163)
          {
            uint64_t v164 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 21) + 16))(*((void *)this + 21), 8 * v163, 8);
            int8x16_t v165 = (void *)(v164 + 8 * v160);
            uint64_t v166 = v164 + 8 * v163;
            if (v164) {
              *int8x16_t v165 = v156;
            }
          }
          else
          {
            uint64_t v166 = 0;
            int8x16_t v165 = (void *)(8 * v160);
          }
          int32x4_t v168 = (uint64_t *)*((void *)this + 18);
          int8x16_t v167 = (uint64_t *)*((void *)this + 19);
          int8x16_t v169 = (char *)((char *)v167 - (char *)v168);
          if (v167 != v168)
          {
            int8x16_t v170 = v169 - 8;
            if ((unint64_t)(v169 - 8) < 0x38)
            {
              int8x16_t v171 = v165;
            }
            else
            {
              int8x16_t v171 = v165;
              if ((unint64_t)((char *)v167 - (char *)v165) >= 0x20)
              {
                uint64_t v172 = ((unint64_t)v170 >> 3) + 1;
                int8x16_t v173 = v165 - 2;
                int8x16_t v174 = v167 - 2;
                uint64_t v175 = v172 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v176 = *(_OWORD *)v174;
                  *(v173 - 1) = *((_OWORD *)v174 - 1);
                  *int8x16_t v173 = v176;
                  v173 -= 2;
                  v174 -= 4;
                  v175 -= 4;
                }
                while (v175);
                int8x16_t v171 = &v165[-(v172 & 0x3FFFFFFFFFFFFFFCLL)];
                v167 -= v172 & 0x3FFFFFFFFFFFFFFCLL;
                if (v172 == (v172 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_357:
                  int8x16_t v167 = *v322;
LABEL_358:
                  int16x8_t v159 = v165 + 1;
                  *((void *)this + 18) = v171;
                  *((void *)this + 19) = v165 + 1;
                  uint64_t v212 = *((void *)this + 20);
                  *((void *)this + 20) = v166;
                  if (v167) {
                    (*(void (**)(void, uint64_t *, uint64_t))(**((void **)this + 21) + 40))(*((void *)this + 21), v167, v212 - (void)v167);
                  }
                  goto LABEL_360;
                }
              }
            }
            do
            {
              uint64_t v211 = *--v167;
              *--int8x16_t v171 = v211;
            }
            while (v167 != v168);
            goto LABEL_357;
          }
          int8x16_t v171 = v165;
          goto LABEL_358;
        }
        if (v157) {
          *int16x8_t v157 = v156;
        }
        int16x8_t v159 = v157 + 1;
LABEL_360:
        *((void *)this + 19) = v159;
        uint64_t v213 = *(void *)(*((void *)this + 15) - 16);
        uint64_t v347 = &v335;
        std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__emplace_unique_key_args<VKTrafficFeature * {__strong},std::piecewise_construct_t const&,std::tuple<VKTrafficFeature * const {__strong}&>,std::tuple<>>((uint64_t)v332, &v335, &v347)[3] = v213;
LABEL_361:

        ++v87;
      }
      int8x16_t v215 = v339;
      if (!v339)
      {
LABEL_488:
        md::LabelFeatureStyler::restyleFeatures(*(void *)(*(void *)this + 296), v322);
        uint64_t v309 = *(void *)this;
        *(unsigned char *)(v309 + 3041) = 1;
        unsigned __int8 v310 = atomic_load((unsigned __int8 *)(v309 + 3058));
        if (v310)
        {
          uint64_t v311 = *(void *)(v309 + 136);
          if (v311)
          {
            uint64_t v312 = *(void *)(v311 + 56);
            if (v312)
            {
              uint64_t v347 = (id *)v309;
              LOBYTE(v333) = 9;
              (*(void (**)(uint64_t, id **, id *))(*(void *)v312 + 48))(v312, &v347, &v333);
            }
          }
        }
        int8x16_t v313 = v339;
        if (v339)
        {
          do
          {
            int32x4_t v315 = (void *)*v313;
            uint64_t v316 = v313[3];
            if (v316)
            {
              uint64_t v317 = v313[4];
              int32x4_t v318 = (void *)v313[3];
              if (v317 != v316)
              {
                do
                {
                  int32x4_t v319 = *(void **)(v317 - 8);
                  v317 -= 8;
                }
                while (v317 != v316);
                int32x4_t v318 = (void *)v313[3];
              }
              v313[4] = v316;
              operator delete(v318);
            }
            (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v340 + 40))(v340, v313, 48);
            int8x16_t v313 = v315;
          }
          while (v315);
        }
        int16x8_t v314 = v336;
        int8x16_t v336 = 0;
        if (v314) {
          (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v338 + 40))(v338, v314, 8 * v337);
        }
        goto LABEL_495;
      }
      while (1)
      {
        id v216 = *(id *)v215[3];
        uint64_t v217 = v215[3];
        if ((unint64_t)(v215[4] - v217) >= 9)
        {
          unint64_t v218 = 1;
          do
          {
            id v219 = *(id *)(v217 + 8 * v218);
            unsigned int v220 = [v219 collisionPriority];
            if (v220 > [v216 collisionPriority])
            {
              id v221 = v219;

              id v216 = v221;
            }

            ++v218;
            uint64_t v217 = v215[3];
          }
          while (v218 < (v215[4] - v217) >> 3);
        }
        [v216 mercatorPoint];
        uint64_t v347 = v222;
        uint64_t v348 = v223;
        uint64_t v349 = v224;
        uint64_t v225 = [v216 routeOffset];
        [v216 routeOffsetInMeters];
        uint64_t v227 = v226;
        [v216 facingAzimuth];
        double v229 = v228;
        int32x4_t v230 = (std::__shared_weak_count *)operator new(0x1A8uLL);
        int16x8_t v231 = v230;
        v230->__shared_owners_ = 0;
        v230->__shared_weak_owners_ = 0;
        v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582208;
        uint64_t v232 = *((void *)this + 4);
        int32x4_t v233 = (std::__shared_weak_count *)*((void *)this + 5);
        if (v233) {
          atomic_fetch_add_explicit(&v233->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v234 = *(void *)this;
        int8x16_t v325 = (void *)md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)&v230[1], (uint64_t)&v347);
        v231[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF548A10;
        v231[11].__shared_owners_ = v232;
        v231[11].__shared_weak_owners_ = (uint64_t)v233;
        if (v233) {
          atomic_fetch_add_explicit(&v233->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int8x16_t v326 = v233;
        v231[12].__vftable = 0;
        v231[12].__shared_owners_ = 0;
        v231[12].__shared_weak_owners_ = 0;
        {
          operator new();
        }
        v231[13].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
        v231[13].__shared_owners_ = 0;
        v231[13].__shared_weak_owners_ = 0;
        v231[14].__vftable = 0;
        {
          operator new();
        }
        int8x16_t v323 = v216;
        v231[14].__shared_owners_ = mdm::Allocator::instance(void)::alloc;
        v231[14].__shared_weak_owners_ = 0;
        v231[15].__vftable = 0;
        v231[15].__shared_owners_ = 0;
        {
          operator new();
        }
        int16x8_t v329 = &v231[13].__shared_owners_;
        v231[15].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
        v231[16].__vftable = (std::__shared_weak_count_vtbl *)v225;
        v231[16].__shared_owners_ = v227;
        LOBYTE(v231[16].__shared_weak_owners_) = 0;
        BYTE4(v231[16].__shared_weak_owners_) = 0;
        BYTE4(v231[17].__shared_owners_) = 0;
        int8x16_t v235 = (id *)v215[3];
        for (iuint64_t i = (id *)v215[4]; v235 != ii; ++v235)
        {
          id v237 = *v235;
          int16x8_t v238 = v237;
          id v350 = v237;
          int32x4_t v239 = (void *)v231[12].__shared_owners_;
          if ((unint64_t)v239 >= v231[12].__shared_weak_owners_)
          {
            uint64_t v241 = std::vector<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * {__strong}&,geo::memory_management_mode const&>((uint64_t *)&v231[12], &v350);
          }
          else
          {
            if (v239)
            {
              id v240 = v237;
              void *v239 = &unk_1EF5596F8;
              v239[1] = v240;
            }
            uint64_t v241 = (uint64_t)(v239 + 3);
          }
          v231[12].__shared_owners_ = v241;
        }
        if (v229 != -1.0)
        {
          if (!BYTE4(v231[16].__shared_weak_owners_)) {
            BYTE4(v231[16].__shared_weak_owners_) = 1;
          }
          float v242 = v229;
          *(float *)&v231[16].__shared_weak_owners_ = v242;
          *(float *)&v231[17].__vftable = md::LabelFeature::vectorFromAzimuth((md::LabelFeature *)&v231[9], v242, (const md::LabelPoint *)(*(unsigned char *)(*(void *)(v234 + 232) + 17) == 0));
          HIDWORD(v231[17].__vftable) = v243;
          LODWORD(v231[17].__shared_owners_) = v244;
        }
        uint64_t v245 = (uint64_t)v231[12].__vftable;
        unint64_t v246 = v231[12].__shared_owners_;
        unint64_t v247 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246 - v245) >> 3));
        if (v246 == v245) {
          uint64_t v248 = 0;
        }
        else {
          uint64_t v248 = v247;
        }
        std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,false>(v245, v246, v248, 1);
        BYTE4(v231[17].__shared_owners_) = 0;
        int32x4_t v249 = v231[12].__vftable;
        uint64_t v250 = v231[12].__shared_owners_;
        if (v249 != (std::__shared_weak_count_vtbl *)v250)
        {
          while (1)
          {
            int8x16_t v251 = v249->~__shared_weak_count_0;
            int8x16_t v252 = v251;
            int8x16_t v253 = (std::__shared_weak_count_vtbl *)v231[13].__shared_weak_owners_;
            int8x16_t v254 = v231[14].__vftable;
            if (v253 >= v254) {
              break;
            }
            if (v253)
            {
              v253->~__shared_weak_count = v251;
              int8x16_t v252 = 0;
            }
            int8x16_t v255 = &v253->~__shared_weak_count_0;
LABEL_432:
            v231[13].__shared_weak_owners_ = (uint64_t)v255;

            long long v272 = v249->~__shared_weak_count_0;
            unsigned int v273 = [v272 collisionPriority];
            unsigned int v274 = BYTE4(v231[17].__shared_owners_);
            if (v274 <= v273) {
              LOBYTE(v274) = v273;
            }
            BYTE4(v231[17].__shared_owners_) = v274;

            int32x4_t v249 = (std::__shared_weak_count_vtbl *)((char *)v249 + 24);
            if (v249 == (std::__shared_weak_count_vtbl *)v250) {
              goto LABEL_440;
            }
          }
          uint64_t v256 = ((uint64_t)v253 - *v329) >> 3;
          unint64_t v257 = v256 + 1;
          if ((unint64_t)(v256 + 1) >> 61) {
            abort();
          }
          uint64_t v258 = (uint64_t)v254 - *v329;
          if (v258 >> 2 > v257) {
            unint64_t v257 = v258 >> 2;
          }
          if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v259 = v257;
          }
          if (v259)
          {
            uint64_t v260 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v231[14].__shared_owners_ + 16))(v231[14].__shared_owners_, 8 * v259, 8);
            uint64_t v261 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v260 + 8 * v256);
            v262 = (std::__shared_weak_count_vtbl *)(v260 + 8 * v259);
            if (v260)
            {
              *uint64_t v261 = v252;
              int8x16_t v252 = 0;
            }
          }
          else
          {
            v262 = 0;
            uint64_t v261 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(8 * v256);
          }
          int8x16_t v255 = v261 + 1;
          v263 = (void *)v231[13].__shared_owners_;
          unint64_t v264 = v231[13].__shared_weak_owners_;
          if ((void *)v264 == v263)
          {
            v231[13].__shared_owners_ = (uint64_t)v261;
            v231[13].__shared_weak_owners_ = (uint64_t)v255;
            uint64_t v270 = v231[14].__vftable;
            v231[14].__vftable = v262;
          }
          else
          {
            unint64_t v265 = v264 - (void)v263 - 8;
            if (v265 <= 0x57
              || (unint64_t v266 = ((unint64_t)v263 - v264 + 7) & 0xFFFFFFFFFFFFFFF8, v264 + v266 < (unint64_t)v261)
              && (unint64_t)v261 + v266 < v264)
            {
              unint64_t v267 = (void *)v231[13].__shared_weak_owners_;
              goto LABEL_425;
            }
            uint64_t v275 = (v265 >> 3) + 1;
            unint64_t v267 = (void *)(v264 - 8 * (v275 & 0x3FFFFFFFFFFFFFFCLL));
            int16x8_t v276 = v261 - 2;
            int32x4_t v277 = (long long *)(v264 - 32);
            uint64_t v278 = v275 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v280 = *v277;
              long long v279 = v277[1];
              *int32x4_t v277 = 0uLL;
              v277[1] = 0uLL;
              v277 -= 2;
              *((_OWORD *)v276 - 1) = v280;
              *(_OWORD *)int16x8_t v276 = v279;
              v276 -= 4;
              v278 -= 4;
            }
            while (v278);
            v261 -= v275 & 0x3FFFFFFFFFFFFFFCLL;
            if (v275 != (v275 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_425:
                uint64_t v268 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*--v267;
                *unint64_t v267 = 0;
                *--uint64_t v261 = v268;
              }
              while (v267 != v263);
            }
            unint64_t v264 = v231[13].__shared_owners_;
            uint64_t v269 = v231[13].__shared_weak_owners_;
            v231[13].__shared_owners_ = (uint64_t)v261;
            v231[13].__shared_weak_owners_ = (uint64_t)v255;
            uint64_t v270 = v231[14].__vftable;
            v231[14].__vftable = v262;
            while (v269 != v264)
            {
              uint64_t v271 = *(void **)(v269 - 8);
              v269 -= 8;
            }
          }
          if (v264) {
            (*(void (**)(uint64_t, unint64_t, char *))(*(void *)v231[14].__shared_owners_ + 40))(v231[14].__shared_owners_, v264, (char *)v270 - v264);
          }
          goto LABEL_432;
        }
LABEL_440:
        if (v326 && !atomic_fetch_add(&v326->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
        id v333 = v325;
        int32x4_t v334 = v231;
        int32x4_t v281 = (void *)*((void *)this + 15);
        if ((unint64_t)v281 >= *((void *)this + 16)) {
          break;
        }
        if (v281)
        {
          void *v281 = v325;
          v281[1] = v231;
          id v333 = 0;
          int32x4_t v334 = 0;
          int16x8_t v231 = 0;
        }
        *((void *)this + 15) = v281 + 2;
        if (v231) {
          goto LABEL_449;
        }
LABEL_451:
        uint64_t v283 = *(void *)(*((void *)this + 15) - 16);
        int8x16_t v284 = (void *)*((void *)this + 19);
        unint64_t v285 = *((void *)this + 20);
        if ((unint64_t)v284 >= v285)
        {
          uint64_t v287 = v284 - *v322;
          unint64_t v288 = v287 + 1;
          if ((unint64_t)(v287 + 1) >> 61) {
            abort();
          }
          uint64_t v289 = v285 - (void)*v322;
          if (v289 >> 2 > v288) {
            unint64_t v288 = v289 >> 2;
          }
          if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v290 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v290 = v288;
          }
          if (v290)
          {
            uint64_t v291 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 21) + 16))(*((void *)this + 21), 8 * v290, 8);
            int16x8_t v292 = (char *)(v291 + 8 * v287);
            uint64_t v293 = v291 + 8 * v290;
            if (v291) {
              *(void *)int16x8_t v292 = v283;
            }
          }
          else
          {
            uint64_t v293 = 0;
            int16x8_t v292 = (char *)(8 * v287);
          }
          int16x8_t v295 = (uint64_t *)*((void *)this + 18);
          int8x16_t v294 = (uint64_t *)*((void *)this + 19);
          int32x4_t v296 = (char *)((char *)v294 - (char *)v295);
          if (v294 != v295)
          {
            int8x16_t v297 = v296 - 8;
            if ((unint64_t)(v296 - 8) < 0x38)
            {
              int32x4_t v298 = v292;
            }
            else
            {
              int32x4_t v298 = v292;
              if ((unint64_t)((char *)v294 - v292) >= 0x20)
              {
                uint64_t v299 = ((unint64_t)v297 >> 3) + 1;
                int32x4_t v300 = v292 - 16;
                int8x16_t v301 = v294 - 2;
                uint64_t v302 = v299 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v303 = *(_OWORD *)v301;
                  *((_OWORD *)v300 - 1) = *((_OWORD *)v301 - 1);
                  *(_OWORD *)int32x4_t v300 = v303;
                  v300 -= 32;
                  v301 -= 4;
                  v302 -= 4;
                }
                while (v302);
                int32x4_t v298 = &v292[-8 * (v299 & 0x3FFFFFFFFFFFFFFCLL)];
                v294 -= v299 & 0x3FFFFFFFFFFFFFFCLL;
                if (v299 == (v299 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_475:
                  int8x16_t v294 = *v322;
LABEL_476:
                  int8x16_t v286 = v292 + 8;
                  *((void *)this + 18) = v298;
                  *((void *)this + 19) = v292 + 8;
                  uint64_t v305 = *((void *)this + 20);
                  *((void *)this + 20) = v293;
                  if (v294) {
                    (*(void (**)(void, uint64_t *, uint64_t))(**((void **)this + 21) + 40))(*((void *)this + 21), v294, v305 - (void)v294);
                  }
                  goto LABEL_478;
                }
              }
            }
            do
            {
              uint64_t v304 = *--v294;
              *((void *)v298 - 1) = v304;
              v298 -= 8;
            }
            while (v294 != v295);
            goto LABEL_475;
          }
          int32x4_t v298 = v292;
          goto LABEL_476;
        }
        if (v284) {
          *int8x16_t v284 = v283;
        }
        int8x16_t v286 = v284 + 1;
LABEL_478:
        *((void *)this + 19) = v286;
        int8x16_t v306 = (id *)v215[3];
        for (juint64_t j = (id *)v215[4]; v306 != jj; ++v306)
        {
          id v333 = *v306;
          uint64_t v308 = *(void *)(*((void *)this + 15) - 16);
          uint64_t v347 = &v333;
          std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__emplace_unique_key_args<VKTrafficFeature * {__strong},std::piecewise_construct_t const&,std::tuple<VKTrafficFeature * const {__strong}&>,std::tuple<>>((uint64_t)v332, &v333, &v347)[3] = v308;
        }
        int8x16_t v215 = (void *)*v215;
        if (!v215) {
          goto LABEL_488;
        }
      }
      int8x16_t v282 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>((uint64_t)v321, (uint64_t)&v333);
      int16x8_t v231 = v334;
      *((void *)this + 15) = v282;
      if (!v231) {
        goto LABEL_451;
      }
LABEL_449:
      if (!atomic_fetch_add(&v231->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
        std::__shared_weak_count::__release_weak(v231);
      }
      goto LABEL_451;
    }
    if (v29.u32[0] < 2uLL)
    {
      uint64_t v33 = *(void *)&v28 - 1;
      while (1)
      {
        uint64_t v35 = v32[1];
        if (v27 == v35)
        {
          if ((id)v32[2] == v26) {
            goto LABEL_51;
          }
        }
        else if ((v35 & v33) != v30)
        {
          goto LABEL_152;
        }
        uint64_t v32 = (void *)*v32;
        if (!v32) {
          goto LABEL_152;
        }
      }
    }
    while (1)
    {
      unint64_t v34 = v32[1];
      if (v27 == v34) {
        break;
      }
      if (v34 >= *(void *)&v28) {
        v34 %= *(void *)&v28;
      }
      if (v34 != v30) {
        goto LABEL_152;
      }
LABEL_40:
      uint64_t v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_152;
      }
    }
    if ((id)v32[2] != v26) {
      goto LABEL_40;
    }
LABEL_51:

    ++v24;
  }
  while (v24 != v23);
  uint64_t v36 = (id *)*((void *)this + 6);
  int8x16_t v327 = (id *)*((void *)this + 7);
  if (v36 != v327)
  {
    int8x16_t v324 = (void *)((char *)this + 200);
    while (1)
    {
      id v37 = *v36;
      char v38 = (id *)*v36;
      uint64_t v347 = v38;
      unint64_t v39 = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::find<VKTrafficFeature * {__strong}>(v332, (id *)&v347);
      if (v39) {
        break;
      }
LABEL_150:

      if (++v36 == v327) {
        goto LABEL_495;
      }
    }
    uint64_t v40 = v38;
    int32x4_t v330 = (id *)(id)v39[2];
    if (v40 != v330)
    {
      int v41 = (void *)v39[3];
      unsigned int v42 = v40;
      uint64_t v43 = v41[37];
      if (v41[38] != v43)
      {
        unint64_t v44 = 0;
        while (*(id **)(v43 + 8 * v44) != v42)
        {
          if (objc_msgSend(v42, "isEqual:"))
          {
            objc_storeStrong((id *)(v41[37] + 8 * v44), v37);
            unint64_t v12 = v41[33];
            int v45 = v42;
            uint64_t v46 = v45;
            if (v45) {
              int v47 = v45;
            }
            unint64_t v48 = v12 + 24 * v44;
            int v49 = *(void **)(v48 + 8);
            *(void *)(v48 + 8) = v46;

            break;
          }
          ++v44;
          uint64_t v43 = v41[37];
          if (v44 >= (v41[38] - v43) >> 3) {
            break;
          }
        }
      }

      int8x8_t v50 = *(int8x8_t *)((char *)this + 184);
      unint64_t v51 = v39[1];
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(v50);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        if (v51 >= *(void *)&v50) {
          v51 %= *(void *)&v50;
        }
      }
      else
      {
        v51 &= *(void *)&v50 - 1;
      }
      float32x4_t v53 = *(void **)(*v332 + 8 * v51);
      do
      {
        float32x4_t v54 = v53;
        float32x4_t v53 = (void *)*v53;
      }
      while (v53 != v39);
      if (v54 == v324) {
        goto LABEL_82;
      }
      unint64_t v55 = v54[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v55 >= *(void *)&v50) {
          v55 %= *(void *)&v50;
        }
      }
      else
      {
        v55 &= *(void *)&v50 - 1;
      }
      if (v55 != v51)
      {
LABEL_82:
        if (!*v39) {
          goto LABEL_83;
        }
        unint64_t v56 = *(void *)(*v39 + 8);
        if (v52.u32[0] > 1uLL)
        {
          if (v56 >= *(void *)&v50) {
            v56 %= *(void *)&v50;
          }
        }
        else
        {
          v56 &= *(void *)&v50 - 1;
        }
        if (v56 != v51) {
LABEL_83:
        }
          *(void *)(*v332 + 8 * v51) = 0;
      }
      uint64_t v57 = *v39;
      if (*v39)
      {
        unint64_t v58 = *(void *)(v57 + 8);
        if (v52.u32[0] > 1uLL)
        {
          if (v58 >= *(void *)&v50) {
            v58 %= *(void *)&v50;
          }
        }
        else
        {
          v58 &= *(void *)&v50 - 1;
        }
        if (v58 != v51)
        {
          *(void *)(*v332 + 8 * v58) = v54;
          uint64_t v57 = *v39;
        }
      }
      *float32x4_t v54 = v57;
      *unint64_t v39 = 0;
      --*((void *)this + 27);

      (*(void (**)(void, void *, uint64_t))(**((void **)this + 26) + 40))(*((void *)this + 26), v39, 32);
      int8x16_t v59 = [v42 uniqueIdentifier];
      unint64_t v60 = [v59 hash];

      unint64_t v61 = *((void *)this + 23);
      if (v61)
      {
        uint8x8_t v62 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
        v62.i16[0] = vaddlv_u8(v62);
        if (v62.u32[0] > 1uLL)
        {
          unint64_t v12 = v60;
          if (v60 >= v61) {
            unint64_t v12 = v60 % v61;
          }
        }
        else
        {
          unint64_t v12 = (v61 - 1) & v60;
        }
        int8x16_t v63 = *(void **)(*v332 + 8 * v12);
        if (v63)
        {
          int8x16_t v64 = (void *)*v63;
          if (v64)
          {
            if (v62.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v66 = v64[1];
                if (v66 == v60)
                {
                  if ((id *)v64[2] == v42) {
                    goto LABEL_149;
                  }
                }
                else if ((v66 & (v61 - 1)) != v12)
                {
                  goto LABEL_111;
                }
                int8x16_t v64 = (void *)*v64;
                if (!v64) {
                  goto LABEL_111;
                }
              }
            }
            do
            {
              unint64_t v65 = v64[1];
              if (v65 == v60)
              {
                if ((id *)v64[2] == v42) {
                  goto LABEL_149;
                }
              }
              else
              {
                if (v65 >= v61) {
                  v65 %= v61;
                }
                if (v65 != v12) {
                  break;
                }
              }
              int8x16_t v64 = (void *)*v64;
            }
            while (v64);
          }
        }
      }
LABEL_111:
      unint64_t v67 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 26) + 16))(*((void *)this + 26), 32, 8);
      int8x16_t v336 = v67;
      unint64_t v337 = (unint64_t)this + 208;
      *unint64_t v67 = 0;
      v67[1] = v60;
      v67[2] = v42;
      v67[3] = v41;
      LOBYTE(v338) = 1;
      float v68 = (float)(unint64_t)(*((void *)this + 27) + 1);
      float v69 = *((float *)this + 56);
      if (!v61 || (float)(v69 * (float)v61) < v68)
      {
        BOOL v70 = (v61 & (v61 - 1)) != 0;
        if (v61 < 3) {
          BOOL v70 = 1;
        }
        unint64_t v71 = v70 | (2 * v61);
        unint64_t v72 = vcvtps_u32_f32(v68 / v69);
        if (v71 <= v72) {
          size_t v73 = v72;
        }
        else {
          size_t v73 = v71;
        }
        if (v73 == 1)
        {
          size_t v73 = 2;
        }
        else if ((v73 & (v73 - 1)) != 0)
        {
          size_t v73 = std::__next_prime(v73);
        }
        int8x8_t v74 = *(int8x8_t *)((char *)this + 184);
        if (v73 > *(void *)&v74) {
          goto LABEL_123;
        }
        if (v73 < *(void *)&v74)
        {
          unint64_t v75 = vcvtps_u32_f32((float)*((unint64_t *)this + 27) / *((float *)this + 56));
          if (*(void *)&v74 < 3uLL || (uint8x8_t v76 = (uint8x8_t)vcnt_s8(v74), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
          {
            unint64_t v75 = std::__next_prime(v75);
          }
          else
          {
            uint64_t v77 = 1 << -(char)__clz(v75 - 1);
            if (v75 >= 2) {
              unint64_t v75 = v77;
            }
          }
          if (v73 <= v75) {
            size_t v73 = v75;
          }
          if (v73 < *(void *)&v74) {
LABEL_123:
          }
            std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)v332, v73);
        }
        unint64_t v61 = *((void *)this + 23);
        if ((v61 & (v61 - 1)) != 0)
        {
          if (v60 >= v61) {
            unint64_t v12 = v60 % v61;
          }
          else {
            unint64_t v12 = v60;
          }
        }
        else
        {
          unint64_t v12 = (v61 - 1) & v60;
        }
      }
      int16x8_t v78 = *(void **)(*v332 + 8 * v12);
      if (v78)
      {
        *unint64_t v67 = *v78;
        goto LABEL_147;
      }
      *unint64_t v67 = *v324;
      *int8x16_t v324 = v67;
      *(void *)(*v332 + 8 * v12) = v324;
      if (*v67)
      {
        unint64_t v79 = *(void *)(*v67 + 8);
        if ((v61 & (v61 - 1)) != 0)
        {
          if (v79 >= v61) {
            v79 %= v61;
          }
        }
        else
        {
          v79 &= v61 - 1;
        }
        int16x8_t v78 = (void *)(*v332 + 8 * v79);
LABEL_147:
        *int16x8_t v78 = v67;
      }
      ++*((void *)this + 27);
    }
LABEL_149:

    goto LABEL_150;
  }
LABEL_495:
}

void sub_1A1D2D9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, md::LabelFeature *a14, uint64_t a15, md::LabelFeature *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a22);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,false>(id *a1, id *a2, uint64_t a3, char a4)
{
void sub_1A1D2F010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LabelFeaturePool::flushRemovedTiles(md::LabelFeaturePool *this)
{
  uint64_t v391 = *MEMORY[0x1E4F143B8];
  uint64x2_t v1 = (unsigned __int8 *)this + 632;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 632);
  if (v2)
  {
    uint64x2_t v3 = this;
    std::mutex::lock((std::mutex *)this);
    unsigned __int8 v4 = atomic_load(v1);
    if ((v4 & 1) == 0)
    {
LABEL_799:
      std::mutex::unlock((std::mutex *)v3);
      return;
    }
    v382[0] = &unk_1EF571FA0;
    uint64_t v383 = v382;
    v380[0] = &unk_1EF571FE8;
    unint64_t v381 = v380;
    v385 = v384;
    v384[0] = &unk_1EF571FE8;
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    char v5 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsFlushTiles", "", buf, 2u);
    }

    if (v381 == v380)
    {
      (*(void (**)(void *))(v380[0] + 32))(v380);
    }
    else if (v381)
    {
      (*(void (**)(void))(*v381 + 40))();
    }
    if (v383 == v382)
    {
      (*(void (**)(void *))(v382[0] + 32))(v382);
    }
    else if (v383)
    {
      (*(void (**)(void *))(*v383 + 40))(v383);
    }
    uint64_t v374 = 0;
    long long v375 = 0uLL;
    uint64_t v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v354) {
        operator new();
      }
    }
    uint64_t v376 = *((void *)v6 + 91);
    std::mutex::lock((std::mutex *)((char *)v3 + 568));
    uint64_t v7 = (unint64_t **)*((void *)v3 + 80);
    uint64_t v374 = v7;
    long long v368 = *(_OWORD *)((char *)v3 + 648);
    *((_OWORD *)v3 + 40) = 0u;
    long long v375 = v368;
    *((void *)v3 + 82) = 0;
    atomic_store(0, (unsigned __int8 *)v3 + 632);
    std::mutex::unlock((std::mutex *)((char *)v3 + 568));
    long long v361 = (unint64_t **)v368;
    if (v7 == (unint64_t **)v368)
    {
LABEL_785:
      if (v7)
      {
        int v351 = (unint64_t **)v375;
        uint64_t v352 = v7;
        if ((unint64_t **)v375 != v7)
        {
          do
          {
            uint64_t v353 = (std::__shared_weak_count *)*(v351 - 1);
            if (v353 && !atomic_fetch_add(&v353->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, unint64_t **))v353->__on_zero_shared)(v353, v352);
              std::__shared_weak_count::__release_weak(v353);
            }
            v351 -= 2;
          }
          while (v351 != v7);
          uint64_t v352 = v374;
        }
        *(void *)&long long v375 = v7;
        (*(void (**)(uint64_t, unint64_t **, void))(*(void *)v376 + 40))(v376, v352, *((void *)&v375 + 1) - (void)v352);
      }
      if (!v385)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      (*(void (**)(void *))(*v385 + 48))(v385);
      if (v385 == v384)
      {
        (*(void (**)(void *))(v384[0] + 32))(v384);
      }
      else if (v385)
      {
        (*(void (**)(void))(*v385 + 40))();
      }
      goto LABEL_799;
    }
    uint64_t v362 = (void *)((char *)v3 + 456);
    v366 = (void *)((char *)v3 + 120);
    v367 = (void *)((char *)v3 + 64);
    long long v356 = (void *)((char *)v3 + 200);
    uint64_t v357 = (void *)((char *)v3 + 256);
    v359 = (void *)((char *)v3 + 368);
    uint64_t v360 = (void *)((char *)v3 + 424);
    v358 = (void *)((char *)v3 + 536);
    long long v355 = (void *)((char *)v3 + 312);
    uint64_t v369 = v3;
    while (1)
    {
      uint64x2_t v8 = *v7;
      unint64_t v9 = **v7;
      v365 = v7;
      if (!v9) {
        break;
      }
      unint64_t v10 = v8[1];
      uint64_t v372 = (geo::codec::VectorTile *)**v7;
      uint64_t v373 = (std::__shared_weak_count *)v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v11 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v362, v9);
      if (!v11) {
        goto LABEL_321;
      }
      int v12 = *((_DWORD *)v11 + 108);
      BOOL v13 = __OFSUB__(v12--, 1);
      *((_DWORD *)v11 + 108) = v12;
      if (!((v12 < 0) ^ v13 | (v12 == 0))) {
        goto LABEL_321;
      }
      uint64_t v363 = v11;
      uint64_t v14 = (void *)v11[41];
      if (v14)
      {
        while (2)
        {
          uint64_t v66 = v14[2];
          if (v66) {
            uint64_t v67 = (void *)(v66 + 8);
          }
          else {
            uint64_t v67 = 0;
          }
          float v68 = (std::mutex *)(v67[1] + 8);
          std::mutex::lock(v68);
          uint64_t v70 = (void *)v67[3];
          float v69 = (void *)v67[4];
          uint64_t v71 = v372;
          unint64_t v72 = v373;
          *(void *)buf = v372;
          *(void *)&buf[8] = v373;
          if (v373)
          {
            atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v70 = (void *)v67[3];
            float v69 = (void *)v67[4];
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v70 == v69)
          {
LABEL_147:
            uint64_t v70 = v69;
          }
          else
          {
            while ((geo::codec::VectorTile *)v70[1] != v71)
            {
              v70 += 3;
              if (v70 == v69) {
                goto LABEL_147;
              }
            }
            if (v70 != v69)
            {
              for (uint64_t i = v70 + 3; i != v69; i += 3)
              {
                uint64_t v101 = (geo::codec::VectorTile *)i[1];
                if (v101 != v71)
                {
                  *uint64_t v70 = *i;
                  uint64_t v102 = i[2];
                  i[1] = 0;
                  i[2] = 0;
                  long long v103 = (std::__shared_weak_count *)v70[2];
                  v70[1] = v101;
                  v70[2] = v102;
                  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                  v70 += 3;
                }
              }
            }
          }
          if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
          std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase((uint64_t)(v67 + 3), (uint64_t)v70, v67[4]);
          if (v67[8] == *(void *)buf)
          {
            id v74 = (void *)v67[3];
            if (v74 != (void *)v67[4])
            {
              v67[7] = *v74;
              uint64_t v76 = v74[1];
              uint64_t v75 = v74[2];
              if (v75) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v77 = (std::__shared_weak_count *)v67[9];
              v67[8] = v76;
              v67[9] = v75;
              if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
          }
          if (v67[3] == v67[4])
          {
            uint64_t v78 = v67[1];
            *(void *)(v78 + 152) = 0;
            atomic_store(1u, (unsigned __int8 *)(v78 + 145));
            size_t v73 = *(std::__shared_weak_count **)&buf[8];
            if (!*(void *)&buf[8]) {
              goto LABEL_164;
            }
          }
          else
          {
            size_t v73 = *(std::__shared_weak_count **)&buf[8];
            if (!*(void *)&buf[8]) {
              goto LABEL_164;
            }
          }
          if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
LABEL_164:
          std::mutex::unlock(v68);
          uint64_t v79 = v14[2];
          if (v79) {
            uint64_t v80 = v79 + 8;
          }
          else {
            uint64_t v80 = 0;
          }
          uint64_t v81 = *(void *)(v80 + 8);
          id v82 = v372;
          uint64_t v83 = v373;
          uint64_t v378 = v372;
          uint64_t v379 = v373;
          if (v373) {
            atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::mutex::lock((std::mutex *)(v81 + 248));
          unint64_t v85 = *(void *)(v81 + 328);
          unint64_t v84 = *(void *)(v81 + 336);
          if (v85 < v84)
          {
            uint64x2_t v3 = v369;
            if (v85)
            {
              if (v83)
              {
                atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
                *(unsigned char *)unint64_t v85 = 1;
                *(void *)(v85 + 8) = 0;
                *(void *)(v85 + 16) = v82;
                *(void *)(v85 + 24) = v83;
                atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
                *(unsigned char *)(v85 + 32) = 0;
                *(void *)(v85 + 40) = 0;
                if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              else
              {
                *(unsigned char *)unint64_t v85 = 1;
                *(void *)(v85 + 8) = 0;
                *(void *)(v85 + 16) = v82;
                *(void *)(v85 + 24) = 0;
                *(unsigned char *)(v85 + 32) = 0;
                *(void *)(v85 + 40) = 0;
              }
            }
            id v104 = (unsigned char *)(v85 + 48);
            goto LABEL_239;
          }
          uint64_t v86 = *(void *)(v81 + 320);
          unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - v86) >> 4);
          unint64_t v88 = v87 + 1;
          if (v87 + 1 > 0x555555555555555) {
            abort();
          }
          unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - v86) >> 4);
          if (2 * v89 > v88) {
            unint64_t v88 = 2 * v89;
          }
          if (v89 >= 0x2AAAAAAAAAAAAAALL) {
            uint64_t v90 = 0x555555555555555;
          }
          else {
            uint64_t v90 = v88;
          }
          if (v90)
          {
            uint64_t v91 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v81 + 344) + 16))(*(void *)(v81 + 344), 48 * v90, 8);
            id v92 = (unsigned char *)(v91 + 48 * v87);
            uint64_t v90 = v91 + 48 * v90;
            if (v91)
            {
              if (v83)
              {
                atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned char *v92 = 1;
                unint64_t v93 = v91 + 48 * v87;
                *(void *)(v93 + 8) = 0;
                *(void *)(v93 + 16) = v82;
                *(void *)(v93 + 24) = v83;
                atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
                *(unsigned char *)(v93 + 32) = 0;
                *(void *)(v93 + 40) = 0;
                if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              else
              {
                unsigned char *v92 = 1;
                unint64_t v118 = v91 + 48 * v87;
                *(void *)(v118 + 8) = 0;
                *(void *)(v118 + 16) = v82;
                *(void *)(v118 + 24) = 0;
                *(unsigned char *)(v118 + 32) = 0;
                *(void *)(v118 + 40) = 0;
              }
            }
          }
          else
          {
            id v92 = (unsigned char *)(16 * ((uint64_t)(v85 - v86) >> 4));
          }
          id v104 = v92 + 48;
          uint64_t v119 = *(void *)(v81 + 320);
          uint64_t v120 = *(void *)(v81 + 328);
          if (v120 == v119)
          {
            *(void *)(v81 + 320) = v92;
            *(void *)(v81 + 328) = v104;
            uint64_t v126 = *(void *)(v81 + 336);
            *(void *)(v81 + 336) = v90;
            if (v120) {
              goto LABEL_237;
            }
          }
          else
          {
            uint64_t v121 = 0;
            do
            {
              id v122 = &v92[v121];
              uint64_t v123 = v120 + v121;
              *(v122 - 48) = *(unsigned char *)(v120 + v121 - 48);
              *((void *)v122 - 5) = 0;
              *(_OWORD *)(v122 - 40) = *(_OWORD *)(v120 + v121 - 40);
              *(void *)(v123 - 40) = 0;
              *((void *)v122 - 3) = *(void *)(v120 + v121 - 24);
              *(void *)(v123 - 32) = 0;
              *(void *)(v123 - 24) = 0;
              *((_OWORD *)v122 - 1) = *(_OWORD *)(v120 + v121 - 16);
              v121 -= 48;
            }
            while (v120 + v121 != v119);
            uint64_t v124 = &v92[v121];
            uint64_t v120 = *(void *)(v81 + 320);
            uint64_t v125 = *(void *)(v81 + 328);
            *(void *)(v81 + 320) = v124;
            *(void *)(v81 + 328) = v104;
            uint64_t v126 = *(void *)(v81 + 336);
            *(void *)(v81 + 336) = v90;
            while (v125 != v120)
            {
              v125 -= 48;
              geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>::destroy(v125);
            }
            if (v120) {
LABEL_237:
            }
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v81 + 344) + 40))(*(void *)(v81 + 344), v120, v126 - v120);
          }
          uint64x2_t v3 = v369;
LABEL_239:
          *(void *)(v81 + 328) = v104;
          atomic_store(1u, (unsigned __int8 *)(v81 + 312));
          std::mutex::unlock((std::mutex *)(v81 + 248));
          id v127 = v379;
          if (v379 && !atomic_fetch_add(&v379->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
          uint64_t v64 = v14[2];
          if (v64) {
            uint64_t v65 = v64 + 8;
          }
          else {
            uint64_t v65 = 0;
          }
          if (*(void *)(v65 + 24) != *(void *)(v65 + 32)) {
            goto LABEL_138;
          }
          unint64_t v94 = md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(*(void **)(v65 + 56), *(unsigned char *)(v65 + 88));
          int8x8_t v95 = *(int8x8_t *)((char *)v3 + 352);
          if (!*(void *)&v95) {
            goto LABEL_138;
          }
          unint64_t v96 = v94;
          uint8x8_t v97 = (uint8x8_t)vcnt_s8(v95);
          v97.i16[0] = vaddlv_u8(v97);
          unint64_t v98 = v97.u32[0];
          if (v97.u32[0] > 1uLL)
          {
            unint64_t v99 = v94;
            if (v94 >= *(void *)&v95) {
              unint64_t v99 = v94 % *(void *)&v95;
            }
          }
          else
          {
            unint64_t v99 = (*(void *)&v95 - 1) & v94;
          }
          id v105 = *(void ***)(*((void *)v3 + 43) + 8 * v99);
          if (!v105) {
            goto LABEL_138;
          }
          id v106 = *v105;
          if (!*v105) {
            goto LABEL_138;
          }
          while (2)
          {
            unint64_t v107 = v106[1];
            if (v107 != v96)
            {
              if (v98 > 1)
              {
                if (v107 >= *(void *)&v95) {
                  v107 %= *(void *)&v95;
                }
              }
              else
              {
                v107 &= *(void *)&v95 - 1;
              }
              if (v107 != v99) {
                goto LABEL_138;
              }
              goto LABEL_206;
            }
            uint64_t v108 = v106[2];
            if (v108) {
              uint64_t v109 = v108 + 8;
            }
            else {
              uint64_t v109 = 0;
            }
            uint64_t v110 = v14[2];
            int v111 = *(unsigned __int8 *)(v109 + 88);
            int v112 = *(unsigned __int8 *)(v110 + 96);
            int v113 = v111 - v112;
            if (v111 == v112)
            {
              int8x16_t v114 = *(uint64_t **)(v109 + 56);
              uint64_t v115 = v114[5];
              if (!v115) {
                uint64_t v115 = v114[6];
              }
              uint64_t v116 = *(uint64_t **)(v110 + 64);
              uint64_t v117 = v116[5];
              if (v117)
              {
                if (v115 == v117) {
                  goto LABEL_224;
                }
                goto LABEL_206;
              }
              if (v115 != v116[6]) {
                goto LABEL_206;
              }
LABEL_224:
              if (v114[15] != v116[15] || v114[16] != v116[16] || v114[17] != v116[17] || v114[18] != v116[18])
              {
LABEL_206:
                id v106 = (void *)*v106;
                if (!v106) {
                  goto LABEL_138;
                }
                continue;
              }
              if (v115) {
                goto LABEL_245;
              }
              int v113 = geo::codec::featureStyleAttributesCompare(v114 + 3, v116 + 3);
            }
            break;
          }
          if (!v113)
          {
            unint64_t v96 = v106[1];
LABEL_245:
            int8x8_t v128 = *(int8x8_t *)((char *)v3 + 352);
            uint8x8_t v129 = (uint8x8_t)vcnt_s8(v128);
            v129.i16[0] = vaddlv_u8(v129);
            if (v129.u32[0] > 1uLL)
            {
              if (v96 >= *(void *)&v128) {
                v96 %= *(void *)&v128;
              }
            }
            else
            {
              v96 &= *(void *)&v128 - 1;
            }
            uint64_t v130 = *((void *)v3 + 43);
            unint64_t v131 = *(void **)(v130 + 8 * v96);
            do
            {
              uint64_t v132 = v131;
              unint64_t v131 = (void *)*v131;
            }
            while (v131 != v106);
            if (v132 == v359) {
              goto LABEL_262;
            }
            unint64_t v133 = v132[1];
            if (v129.u32[0] > 1uLL)
            {
              if (v133 >= *(void *)&v128) {
                v133 %= *(void *)&v128;
              }
            }
            else
            {
              v133 &= *(void *)&v128 - 1;
            }
            if (v133 != v96)
            {
LABEL_262:
              if (!*v106) {
                goto LABEL_263;
              }
              unint64_t v134 = *(void *)(*v106 + 8);
              if (v129.u32[0] > 1uLL)
              {
                if (v134 >= *(void *)&v128) {
                  v134 %= *(void *)&v128;
                }
              }
              else
              {
                v134 &= *(void *)&v128 - 1;
              }
              if (v134 != v96) {
LABEL_263:
              }
                *(void *)(v130 + 8 * v96) = 0;
            }
            uint64_t v135 = *v106;
            if (*v106)
            {
              unint64_t v136 = *(void *)(v135 + 8);
              if (v129.u32[0] > 1uLL)
              {
                if (v136 >= *(void *)&v128) {
                  v136 %= *(void *)&v128;
                }
              }
              else
              {
                v136 &= *(void *)&v128 - 1;
              }
              if (v136 != v96)
              {
                *(void *)(*((void *)v3 + 43) + 8 * v136) = v132;
                uint64_t v135 = *v106;
              }
            }
            void *v132 = v135;
            void *v106 = 0;
            --*((void *)v3 + 48);
            unint64_t v137 = (void *)v106[2];
            if (v137)
            {
              BOOL v49 = (*v137)-- == 1;
              if (v49)
              {
                md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v137 + 1));
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v106[2], 104);
                v106[2] = 0;
              }
            }
            (*(void (**)(void, void *, uint64_t))(**((void **)v3 + 47) + 40))(*((void *)v3 + 47), v106, 24);
LABEL_138:
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              break;
            }
            continue;
          }
          goto LABEL_206;
        }
      }
      for (uint64_t j = (void *)v363[6]; j; uint64_t j = (void *)*j)
      {
        id v139 = j + 2;
        uint64_t v138 = j[2];
        if (v138) {
          uint64_t v140 = (void *)(v138 + 8);
        }
        else {
          uint64_t v140 = 0;
        }
        md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::removeTile(v140, (uint64_t *)&v372);
        if (*v139) {
          uint64_t v141 = *v139 + 8;
        }
        else {
          uint64_t v141 = 0;
        }
        (*(void (**)(void, geo::codec::VectorTile **))(**(void **)(v141 + 8) + 632))(*(void *)(v141 + 8), &v372);
        if (*v139) {
          uint64_t v142 = *v139 + 8;
        }
        else {
          uint64_t v142 = 0;
        }
        if (*(void *)(v142 + 24) == *(void *)(v142 + 32))
        {
          id v143 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::find<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>(v367, j + 2);
          if (v143) {
            std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::erase((uint64_t)v367, v143);
          }
        }
      }
      for (uint64_t k = (void *)v363[13]; k; uint64_t k = (void *)*k)
      {
        uint64_t v145 = k + 2;
        uint64_t v144 = k[2];
        if (v144) {
          int8x16_t v146 = (void *)(v144 + 8);
        }
        else {
          int8x16_t v146 = 0;
        }
        md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::removeTile(v146, (uint64_t *)&v372);
        if (*v145) {
          uint64_t v147 = *v145 + 8;
        }
        else {
          uint64_t v147 = 0;
        }
        (*(void (**)(void, geo::codec::VectorTile **))(**(void **)(v147 + 8) + 632))(*(void *)(v147 + 8), &v372);
        if (*v145) {
          uint64_t v148 = *v145 + 8;
        }
        else {
          uint64_t v148 = 0;
        }
        if (*(void *)(v148 + 24) == *(void *)(v148 + 32))
        {
          uint64_t v149 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::find<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>(v366, k + 2);
          if (v149) {
            std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::erase((uint64_t)v366, v149);
          }
        }
      }
      id v17 = (void *)v363[27];
      if (v17)
      {
        while (1)
        {
          uint64_t v225 = v17[2];
          int64_t v226 = v225 ? (void *)(v225 + 8) : 0;
          uint64_t v227 = (std::mutex *)(v226[1] + 8);
          std::mutex::lock(v227);
          double v228 = v372;
          double v229 = v373;
          if (v373) {
            break;
          }
          int16x8_t v231 = (void *)v226[3];
          int32x4_t v230 = (void *)v226[4];
          if (v231 == v230) {
            goto LABEL_464;
          }
LABEL_462:
          while ((geo::codec::VectorTile *)v231[1] != v228)
          {
            v231 += 3;
            if (v231 == v230) {
              goto LABEL_464;
            }
          }
          if (v231 != v230)
          {
            for (uint64_t m = v231 + 3; m != v230; m += 3)
            {
              uint64_t v248 = (geo::codec::VectorTile *)m[1];
              if (v248 != v228)
              {
                void *v231 = *m;
                uint64_t v249 = m[2];
                m[1] = 0;
                m[2] = 0;
                uint64_t v250 = (std::__shared_weak_count *)v231[2];
                v231[1] = v248;
                v231[2] = v249;
                if (v250 && !atomic_fetch_add(&v250->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
                v231 += 3;
              }
            }
          }
LABEL_465:
          if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
            std::__shared_weak_count::__release_weak(v229);
          }
          uint64_t v232 = (void *)v226[4];
          if (v231 != v232)
          {
            while (v232 != v231)
            {
              int32x4_t v233 = (std::__shared_weak_count *)*(v232 - 1);
              if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                std::__shared_weak_count::__release_weak(v233);
              }
              v232 -= 3;
            }
            v226[4] = v231;
          }
          if ((geo::codec::VectorTile *)v226[8] == v228)
          {
            uint64_t v234 = (void *)v226[3];
            if (v234 != v231)
            {
              v226[7] = *v234;
              uint64_t v236 = v234[1];
              uint64_t v235 = v234[2];
              if (v235) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v235 + 8), 1uLL, memory_order_relaxed);
              }
              id v237 = (std::__shared_weak_count *)v226[9];
              v226[8] = v236;
              v226[9] = v235;
              if (v237 && !atomic_fetch_add(&v237->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                std::__shared_weak_count::__release_weak(v237);
              }
            }
          }
          if (v226[3] == v226[4])
          {
            uint64_t v238 = v226[1];
            *(void *)(v238 + 152) = 0;
            atomic_store(1u, (unsigned __int8 *)(v238 + 145));
            if (v229)
            {
LABEL_489:
              if (!atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
              }
            }
          }
          else if (v229)
          {
            goto LABEL_489;
          }
          std::mutex::unlock(v227);
          uint64_t v239 = v17[2];
          if (v239) {
            uint64_t v240 = v239 + 8;
          }
          else {
            uint64_t v240 = 0;
          }
          (*(void (**)(void))(**(void **)(v240 + 8) + 632))();
          uint64_t v241 = v17[2];
          if (v241) {
            uint64_t v242 = v241 + 8;
          }
          else {
            uint64_t v242 = 0;
          }
          if (*(void *)(v242 + 24) == *(void *)(v242 + 32))
          {
            int8x8_t v243 = *(int8x8_t *)((char *)v3 + 240);
            if (v243)
            {
              unint64_t v244 = (((unint64_t)*(unsigned __int8 *)(v242 + 88) << 6)
                    - 0x61C8864680B583EBLL
                    + ((unint64_t)*(unsigned __int8 *)(v242 + 88) >> 2)
                    + *(int *)(*(void *)(v242 + 56) + 24)) ^ *(unsigned __int8 *)(v242 + 88);
              uint8x8_t v245 = (uint8x8_t)vcnt_s8(v243);
              v245.i16[0] = vaddlv_u8(v245);
              if (v245.u32[0] > 1uLL)
              {
                unint64_t v246 = v244;
                if (v244 >= *(void *)&v243) {
                  unint64_t v246 = v244 % *(void *)&v243;
                }
              }
              else
              {
                unint64_t v246 = v244 & (*(void *)&v243 - 1);
              }
              uint64_t v251 = *((void *)v3 + 29);
              int8x16_t v252 = *(void ***)(v251 + 8 * v246);
              if (v252)
              {
                int8x16_t v253 = *v252;
                if (*v252)
                {
                  uint64_t v254 = *(void *)&v243 - 1;
                  if (v245.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v255 = v253[1];
                      if (v255 == v244)
                      {
                        uint64_t v256 = v253[2];
                        if (v256) {
                          uint64_t v257 = v256 + 8;
                        }
                        else {
                          uint64_t v257 = 0;
                        }
                        if (*(unsigned __int8 *)(v257 + 88) == *(unsigned __int8 *)(v241 + 96)
                          && *(_DWORD *)(*(void *)(v257 + 56) + 24) == *(_DWORD *)(*(void *)(v241 + 64) + 24))
                        {
                          goto LABEL_524;
                        }
                      }
                      else if ((v255 & v254) != v246)
                      {
                        goto LABEL_456;
                      }
                      int8x16_t v253 = (void *)*v253;
                      if (!v253) {
                        goto LABEL_456;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v258 = v253[1];
                    if (v258 == v244)
                    {
                      uint64_t v259 = v253[2];
                      if (v259) {
                        uint64_t v260 = v259 + 8;
                      }
                      else {
                        uint64_t v260 = 0;
                      }
                      if (*(unsigned __int8 *)(v260 + 88) == *(unsigned __int8 *)(v241 + 96)
                        && *(_DWORD *)(*(void *)(v260 + 56) + 24) == *(_DWORD *)(*(void *)(v241 + 64) + 24))
                      {
LABEL_524:
                        if (v245.u32[0] > 1uLL)
                        {
                          if (v244 >= *(void *)&v243) {
                            v244 %= *(void *)&v243;
                          }
                        }
                        else
                        {
                          v244 &= v254;
                        }
                        uint64_t v261 = *(void **)(v251 + 8 * v244);
                        do
                        {
                          v262 = v261;
                          uint64_t v261 = (void *)*v261;
                        }
                        while (v261 != v253);
                        if (v262 == v357) {
                          goto LABEL_552;
                        }
                        unint64_t v263 = v262[1];
                        if (v245.u32[0] > 1uLL)
                        {
                          if (v263 >= *(void *)&v243) {
                            v263 %= *(void *)&v243;
                          }
                        }
                        else
                        {
                          v263 &= v254;
                        }
                        if (v263 != v244)
                        {
LABEL_552:
                          if (!*v253) {
                            goto LABEL_553;
                          }
                          unint64_t v264 = *(void *)(*v253 + 8);
                          if (v245.u32[0] > 1uLL)
                          {
                            if (v264 >= *(void *)&v243) {
                              v264 %= *(void *)&v243;
                            }
                          }
                          else
                          {
                            v264 &= v254;
                          }
                          if (v264 != v244) {
LABEL_553:
                          }
                            *(void *)(v251 + 8 * v244) = 0;
                        }
                        uint64_t v265 = *v253;
                        if (*v253)
                        {
                          unint64_t v266 = *(void *)(v265 + 8);
                          if (v245.u32[0] > 1uLL)
                          {
                            if (v266 >= *(void *)&v243) {
                              v266 %= *(void *)&v243;
                            }
                          }
                          else
                          {
                            v266 &= v254;
                          }
                          if (v266 != v244)
                          {
                            *(void *)(*((void *)v3 + 29) + 8 * v266) = v262;
                            uint64_t v265 = *v253;
                          }
                        }
                        void *v262 = v265;
                        void *v253 = 0;
                        --*((void *)v3 + 34);
                        unint64_t v267 = (void *)v253[2];
                        if (v267)
                        {
                          BOOL v49 = (*v267)-- == 1;
                          if (v49)
                          {
                            md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v267 + 1));
                            {
                              operator new();
                            }
                            (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v253[2], 104);
                            v253[2] = 0;
                          }
                        }
                        (*(void (**)(void, void *, uint64_t))(**((void **)v3 + 33) + 40))(*((void *)v3 + 33), v253, 24);
                        break;
                      }
                    }
                    else
                    {
                      if (v258 >= *(void *)&v243) {
                        v258 %= *(void *)&v243;
                      }
                      if (v258 != v246) {
                        break;
                      }
                    }
                    int8x16_t v253 = (void *)*v253;
                  }
                  while (v253);
                }
              }
            }
          }
LABEL_456:
          id v17 = (void *)*v17;
          if (!v17) {
            goto LABEL_29;
          }
        }
        atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
        int16x8_t v231 = (void *)v226[3];
        int32x4_t v230 = (void *)v226[4];
        atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v231 != v230) {
          goto LABEL_462;
        }
LABEL_464:
        int16x8_t v231 = v230;
        goto LABEL_465;
      }
LABEL_29:
      for (n = (void *)v363[20]; n; n = (void *)*n)
      {
        uint64_t v268 = n[2];
        if (v268) {
          uint64_t v269 = (void *)(v268 + 8);
        }
        else {
          uint64_t v269 = 0;
        }
        uint64_t v270 = (std::mutex *)(v269[1] + 8);
        std::mutex::lock(v270);
        long long v272 = (void *)v269[3];
        uint64_t v271 = (void *)v269[4];
        unsigned int v273 = v372;
        unsigned int v274 = v373;
        *(void *)buf = v372;
        *(void *)&buf[8] = v373;
        if (v373)
        {
          atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v272 = (void *)v269[3];
          uint64_t v271 = (void *)v269[4];
          atomic_fetch_add_explicit(&v274->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v272 == v271)
        {
LABEL_578:
          long long v272 = v271;
        }
        else
        {
          while ((geo::codec::VectorTile *)v272[1] != v273)
          {
            v272 += 3;
            if (v272 == v271) {
              goto LABEL_578;
            }
          }
          if (v272 != v271)
          {
            for (iuint64_t i = v272 + 3; ii != v271; ii += 3)
            {
              uint64_t v290 = (geo::codec::VectorTile *)ii[1];
              if (v290 != v273)
              {
                *long long v272 = *ii;
                uint64_t v291 = ii[2];
                ii[1] = 0;
                ii[2] = 0;
                int16x8_t v292 = (std::__shared_weak_count *)v272[2];
                v272[1] = v290;
                v272[2] = v291;
                if (v292 && !atomic_fetch_add(&v292->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                  std::__shared_weak_count::__release_weak(v292);
                }
                v272 += 3;
              }
            }
          }
        }
        if (v274 && !atomic_fetch_add(&v274->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
        std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase((uint64_t)(v269 + 3), (uint64_t)v272, v269[4]);
        if (v269[8] == *(void *)buf)
        {
          int16x8_t v276 = (void *)v269[3];
          if (v276 != (void *)v269[4])
          {
            v269[7] = *v276;
            uint64_t v278 = v276[1];
            uint64_t v277 = v276[2];
            if (v277) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v277 + 8), 1uLL, memory_order_relaxed);
            }
            long long v279 = (std::__shared_weak_count *)v269[9];
            v269[8] = v278;
            v269[9] = v277;
            if (v279 && !atomic_fetch_add(&v279->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
          }
        }
        if (v269[3] == v269[4])
        {
          uint64_t v280 = v269[1];
          *(void *)(v280 + 152) = 0;
          atomic_store(1u, (unsigned __int8 *)(v280 + 145));
          uint64_t v275 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
LABEL_593:
            if (!atomic_fetch_add(&v275->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
              std::__shared_weak_count::__release_weak(v275);
            }
          }
        }
        else
        {
          uint64_t v275 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]) {
            goto LABEL_593;
          }
        }
        std::mutex::unlock(v270);
        uint64_t v281 = n[2];
        if (v281) {
          uint64_t v282 = v281 + 8;
        }
        else {
          uint64_t v282 = 0;
        }
        (*(void (**)(void))(**(void **)(v282 + 8) + 632))();
        uint64_t v283 = n[2];
        if (v283) {
          uint64_t v284 = v283 + 8;
        }
        else {
          uint64_t v284 = 0;
        }
        if (*(void *)(v284 + 24) == *(void *)(v284 + 32))
        {
          int8x8_t v285 = *(int8x8_t *)((char *)v369 + 184);
          if (v285)
          {
            unint64_t v286 = (*(void *)(*(void *)(v284 + 56) + 40)
                  - 0x61C8864680B583EBLL
                  + ((unint64_t)*(unsigned __int8 *)(v284 + 88) << 6)
                  + ((unint64_t)*(unsigned __int8 *)(v284 + 88) >> 2)) ^ *(unsigned __int8 *)(v284 + 88);
            uint8x8_t v287 = (uint8x8_t)vcnt_s8(v285);
            v287.i16[0] = vaddlv_u8(v287);
            if (v287.u32[0] > 1uLL)
            {
              unint64_t v288 = v286;
              if (v286 >= *(void *)&v285) {
                unint64_t v288 = v286 % *(void *)&v285;
              }
            }
            else
            {
              unint64_t v288 = v286 & (*(void *)&v285 - 1);
            }
            uint64_t v293 = *((void *)v369 + 22);
            int8x16_t v294 = *(void ***)(v293 + 8 * v288);
            if (v294)
            {
              int16x8_t v295 = *v294;
              if (*v294)
              {
                uint64_t v296 = *(void *)&v285 - 1;
                if (v287.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v297 = v295[1];
                    if (v297 == v286)
                    {
                      uint64_t v298 = v295[2];
                      if (v298) {
                        uint64_t v299 = v298 + 8;
                      }
                      else {
                        uint64_t v299 = 0;
                      }
                      if (*(unsigned __int8 *)(v299 + 88) == *(unsigned __int8 *)(v283 + 96)
                        && *(void *)(*(void *)(v299 + 56) + 40) == *(void *)(*(void *)(v283 + 64) + 40))
                      {
                        goto LABEL_628;
                      }
                    }
                    else if ((v297 & v296) != v288)
                    {
                      goto LABEL_569;
                    }
                    int16x8_t v295 = (void *)*v295;
                    if (!v295) {
                      goto LABEL_569;
                    }
                  }
                }
                do
                {
                  unint64_t v300 = v295[1];
                  if (v300 == v286)
                  {
                    uint64_t v301 = v295[2];
                    if (v301) {
                      uint64_t v302 = v301 + 8;
                    }
                    else {
                      uint64_t v302 = 0;
                    }
                    if (*(unsigned __int8 *)(v302 + 88) == *(unsigned __int8 *)(v283 + 96)
                      && *(void *)(*(void *)(v302 + 56) + 40) == *(void *)(*(void *)(v283 + 64) + 40))
                    {
LABEL_628:
                      if (v287.u32[0] > 1uLL)
                      {
                        if (v286 >= *(void *)&v285) {
                          v286 %= *(void *)&v285;
                        }
                      }
                      else
                      {
                        v286 &= v296;
                      }
                      long long v303 = *(void **)(v293 + 8 * v286);
                      do
                      {
                        uint64_t v304 = v303;
                        long long v303 = (void *)*v303;
                      }
                      while (v303 != v295);
                      if (v304 == v356) {
                        goto LABEL_656;
                      }
                      unint64_t v305 = v304[1];
                      if (v287.u32[0] > 1uLL)
                      {
                        if (v305 >= *(void *)&v285) {
                          v305 %= *(void *)&v285;
                        }
                      }
                      else
                      {
                        v305 &= v296;
                      }
                      if (v305 != v286)
                      {
LABEL_656:
                        if (!*v295) {
                          goto LABEL_657;
                        }
                        unint64_t v306 = *(void *)(*v295 + 8);
                        if (v287.u32[0] > 1uLL)
                        {
                          if (v306 >= *(void *)&v285) {
                            v306 %= *(void *)&v285;
                          }
                        }
                        else
                        {
                          v306 &= v296;
                        }
                        if (v306 != v286) {
LABEL_657:
                        }
                          *(void *)(v293 + 8 * v286) = 0;
                      }
                      uint64_t v307 = *v295;
                      if (*v295)
                      {
                        unint64_t v308 = *(void *)(v307 + 8);
                        if (v287.u32[0] > 1uLL)
                        {
                          if (v308 >= *(void *)&v285) {
                            v308 %= *(void *)&v285;
                          }
                        }
                        else
                        {
                          v308 &= v296;
                        }
                        if (v308 != v286)
                        {
                          *(void *)(*((void *)v369 + 22) + 8 * v308) = v304;
                          uint64_t v307 = *v295;
                        }
                      }
                      void *v304 = v307;
                      *int16x8_t v295 = 0;
                      --*((void *)v369 + 27);
                      uint64_t v309 = (void *)v295[2];
                      if (v309)
                      {
                        BOOL v49 = (*v309)-- == 1;
                        if (v49)
                        {
                          md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v309 + 1));
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v295[2], 104);
                          v295[2] = 0;
                        }
                      }
                      (*(void (**)(void, void *, uint64_t))(**((void **)v369 + 26) + 40))(*((void *)v369 + 26), v295, 24);
                      break;
                    }
                  }
                  else
                  {
                    if (v300 >= *(void *)&v285) {
                      v300 %= *(void *)&v285;
                    }
                    if (v300 != v288) {
                      break;
                    }
                  }
                  int16x8_t v295 = (void *)*v295;
                }
                while (v295);
              }
            }
          }
        }
LABEL_569:
        ;
      }
      unsigned int v19 = (void *)v363[48];
      if (v19)
      {
        while (1)
        {
          uint64_t v158 = v19[2];
          uint64_t v159 = v158 ? (void *)(v158 + 8) : 0;
          id v160 = (std::mutex *)(v159[1] + 8);
          std::mutex::lock(v160);
          unint64_t v161 = v372;
          uint64_t v162 = v373;
          if (v373) {
            break;
          }
          uint64_t v164 = (void *)v159[3];
          uint64_t v163 = (void *)v159[4];
          if (v164 == v163) {
            goto LABEL_334;
          }
LABEL_332:
          while ((geo::codec::VectorTile *)v164[1] != v161)
          {
            v164 += 3;
            if (v164 == v163) {
              goto LABEL_334;
            }
          }
          if (v164 != v163)
          {
            for (juint64_t j = v164 + 3; jj != v163; jj += 3)
            {
              uint64_t v185 = (geo::codec::VectorTile *)jj[1];
              if (v185 != v161)
              {
                *uint64_t v164 = *jj;
                uint64_t v186 = jj[2];
                jj[1] = 0;
                jj[2] = 0;
                unint64_t v187 = (std::__shared_weak_count *)v164[2];
                v164[1] = v185;
                v164[2] = v186;
                if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
                v164 += 3;
              }
            }
          }
LABEL_335:
          if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
          id v165 = (void *)v159[4];
          if (v164 != v165)
          {
            while (v165 != v164)
            {
              id v166 = (std::__shared_weak_count *)*(v165 - 1);
              if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
              v165 -= 3;
            }
            v159[4] = v164;
          }
          if ((geo::codec::VectorTile *)v159[8] == v161)
          {
            uint64_t v167 = (void *)v159[3];
            if (v167 != v164)
            {
              v159[7] = *v167;
              uint64_t v169 = v167[1];
              uint64_t v168 = v167[2];
              if (v168) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v168 + 8), 1uLL, memory_order_relaxed);
              }
              id v170 = (std::__shared_weak_count *)v159[9];
              v159[8] = v169;
              v159[9] = v168;
              if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                std::__shared_weak_count::__release_weak(v170);
              }
            }
          }
          if (v159[3] == v159[4])
          {
            uint64_t v171 = v159[1];
            *(void *)(v171 + 152) = 0;
            atomic_store(1u, (unsigned __int8 *)(v171 + 145));
            if (!v162) {
              goto LABEL_361;
            }
          }
          else if (!v162)
          {
            goto LABEL_361;
          }
          if (!atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
LABEL_361:
          std::mutex::unlock(v160);
          uint64_t v172 = v19[2];
          if (v172) {
            uint64_t v173 = v172 + 8;
          }
          else {
            uint64_t v173 = 0;
          }
          (*(void (**)(void))(**(void **)(v173 + 8) + 632))();
          uint64_t v174 = v19[2];
          if (v174) {
            uint64_t v175 = v174 + 8;
          }
          else {
            uint64_t v175 = 0;
          }
          if (*(void *)(v175 + 24) == *(void *)(v175 + 32))
          {
            unint64_t v176 = *(unsigned __int8 *)(v175 + 88);
            v177 = *(void **)(v175 + 56);
            uint64_t v178 = v177[4];
            if (v178)
            {
              uint64_t v179 = 0;
              unint64_t v180 = 0;
              do
              {
                uint64_t v181 = geo::codec::vectorTransitLineAlongLink(v177, v179);
                unint64_t v182 = ((v180 << 6) - 0x61C8864680B583EBLL + (v180 >> 2) + *(void *)(v181 + 40)) ^ v180;
                unint64_t v180 = (*(unsigned __int8 *)(v181 + 73) - 0x61C8864680B583EBLL + (v182 << 6) + (v182 >> 2)) ^ v182;
                ++v179;
              }
              while (v178 != v179);
              int8x8_t v183 = *(int8x8_t *)((char *)v369 + 408);
              if (!*(void *)&v183) {
                goto LABEL_326;
              }
            }
            else
            {
              unint64_t v180 = 0;
              int8x8_t v183 = *(int8x8_t *)((char *)v369 + 408);
              if (!*(void *)&v183) {
                goto LABEL_326;
              }
            }
            unint64_t v188 = (v180 - 0x61C8864680B583EBLL + (v176 << 6) + (v176 >> 2)) ^ v176;
            uint8x8_t v189 = (uint8x8_t)vcnt_s8(v183);
            v189.i16[0] = vaddlv_u8(v189);
            if (v189.u32[0] > 1uLL)
            {
              unint64_t v190 = v188;
              uint64_t v191 = v369;
              if (v188 >= *(void *)&v183) {
                unint64_t v190 = v188 % *(void *)&v183;
              }
            }
            else
            {
              unint64_t v190 = v188 & (*(void *)&v183 - 1);
              uint64_t v191 = v369;
            }
            uint64_t v192 = *(void ***)(*((void *)v191 + 50) + 8 * v190);
            if (v192)
            {
              int8x16_t v193 = *v192;
              if (*v192)
              {
                if (v189.u32[0] < 2uLL)
                {
                  uint64_t v194 = *(void *)&v183 - 1;
                  while (1)
                  {
                    uint64_t v205 = v193[1];
                    if (v205 == v188)
                    {
                      uint64_t v206 = v193[2];
                      if (v206) {
                        uint64_t v207 = v206 + 8;
                      }
                      else {
                        uint64_t v207 = 0;
                      }
                      uint64_t v208 = v19[2];
                      if (*(unsigned __int8 *)(v207 + 88) == *(unsigned __int8 *)(v208 + 96))
                      {
                        long long v209 = *(void **)(v207 + 56);
                        id v210 = *(void **)(v208 + 64);
                        uint64_t v211 = v209[4];
                        if (v211 == v210[4])
                        {
                          if (!v211) {
                            goto LABEL_422;
                          }
                          uint64_t v212 = 0;
                          while (1)
                          {
                            uint64_t v213 = geo::codec::vectorTransitLineAlongLink(v209, v212);
                            uint64_t v214 = geo::codec::vectorTransitLineAlongLink(v210, v212);
                            if (*(void *)(v213 + 40) != *(void *)(v214 + 40)
                              || *(unsigned __int8 *)(v213 + 73) != *(unsigned __int8 *)(v214 + 73))
                            {
                              break;
                            }
                            if (v211 == ++v212) {
                              goto LABEL_420;
                            }
                          }
                        }
                      }
                    }
                    else if ((v205 & v194) != v190)
                    {
                      goto LABEL_326;
                    }
                    int8x16_t v193 = (void *)*v193;
                    if (!v193) {
                      goto LABEL_326;
                    }
                  }
                }
                do
                {
                  unint64_t v195 = v193[1];
                  if (v195 == v188)
                  {
                    uint64_t v196 = v193[2];
                    if (v196) {
                      uint64_t v197 = v196 + 8;
                    }
                    else {
                      uint64_t v197 = 0;
                    }
                    uint64_t v198 = v19[2];
                    if (*(unsigned __int8 *)(v197 + 88) == *(unsigned __int8 *)(v198 + 96))
                    {
                      uint64_t v199 = *(void **)(v197 + 56);
                      id v200 = *(void **)(v198 + 64);
                      uint64_t v201 = v199[4];
                      if (v201 == v200[4])
                      {
                        if (!v201)
                        {
LABEL_422:
                          int8x8_t v215 = *(int8x8_t *)((char *)v369 + 408);
                          uint8x8_t v216 = (uint8x8_t)vcnt_s8(v215);
                          v216.i16[0] = vaddlv_u8(v216);
                          if (v216.u32[0] > 1uLL)
                          {
                            if (v188 >= *(void *)&v215) {
                              v188 %= *(void *)&v215;
                            }
                          }
                          else
                          {
                            v188 &= *(void *)&v215 - 1;
                          }
                          uint64_t v217 = *((void *)v369 + 50);
                          int64_t v218 = *(void **)(v217 + 8 * v188);
                          do
                          {
                            id v219 = v218;
                            int64_t v218 = (void *)*v218;
                          }
                          while (v218 != v193);
                          if (v219 == v360) {
                            goto LABEL_439;
                          }
                          unint64_t v220 = v219[1];
                          if (v216.u32[0] > 1uLL)
                          {
                            if (v220 >= *(void *)&v215) {
                              v220 %= *(void *)&v215;
                            }
                          }
                          else
                          {
                            v220 &= *(void *)&v215 - 1;
                          }
                          if (v220 != v188)
                          {
LABEL_439:
                            if (!*v193) {
                              goto LABEL_440;
                            }
                            unint64_t v221 = *(void *)(*v193 + 8);
                            if (v216.u32[0] > 1uLL)
                            {
                              if (v221 >= *(void *)&v215) {
                                v221 %= *(void *)&v215;
                              }
                            }
                            else
                            {
                              v221 &= *(void *)&v215 - 1;
                            }
                            if (v221 != v188) {
LABEL_440:
                            }
                              *(void *)(v217 + 8 * v188) = 0;
                          }
                          uint64_t v222 = *v193;
                          if (*v193)
                          {
                            unint64_t v223 = *(void *)(v222 + 8);
                            if (v216.u32[0] > 1uLL)
                            {
                              if (v223 >= *(void *)&v215) {
                                v223 %= *(void *)&v215;
                              }
                            }
                            else
                            {
                              v223 &= *(void *)&v215 - 1;
                            }
                            if (v223 != v188)
                            {
                              *(void *)(*((void *)v369 + 50) + 8 * v223) = v219;
                              uint64_t v222 = *v193;
                            }
                          }
                          *id v219 = v222;
                          *int8x16_t v193 = 0;
                          --*((void *)v369 + 55);
                          uint64_t v224 = (void *)v193[2];
                          if (v224)
                          {
                            BOOL v49 = (*v224)-- == 1;
                            if (v49)
                            {
                              md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v224 + 1));
                              {
                                operator new();
                              }
                              (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v193[2], 104);
                              v193[2] = 0;
                            }
                          }
                          (*(void (**)(void, void *, uint64_t))(**((void **)v369 + 54) + 40))(*((void *)v369 + 54), v193, 24);
                          break;
                        }
                        uint64_t v202 = 0;
                        while (1)
                        {
                          uint64_t v203 = geo::codec::vectorTransitLineAlongLink(v199, v202);
                          uint64_t v204 = geo::codec::vectorTransitLineAlongLink(v200, v202);
                          if (*(void *)(v203 + 40) != *(void *)(v204 + 40)
                            || *(unsigned __int8 *)(v203 + 73) != *(unsigned __int8 *)(v204 + 73))
                          {
                            break;
                          }
                          if (v201 == ++v202)
                          {
LABEL_420:
                            if (!v193) {
                              goto LABEL_326;
                            }
                            unint64_t v188 = v193[1];
                            goto LABEL_422;
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v195 >= *(void *)&v183) {
                      v195 %= *(void *)&v183;
                    }
                    if (v195 != v190) {
                      break;
                    }
                  }
                  int8x16_t v193 = (void *)*v193;
                }
                while (v193);
              }
            }
          }
LABEL_326:
          unsigned int v19 = (void *)*v19;
          if (!v19) {
            goto LABEL_31;
          }
        }
        atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v164 = (void *)v159[3];
        uint64_t v163 = (void *)v159[4];
        atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v164 != v163) {
          goto LABEL_332;
        }
LABEL_334:
        uint64_t v164 = v163;
        goto LABEL_335;
      }
LABEL_31:
      uint64_t v20 = geo::codec::VectorTile::removedFeatureIDs(v372);
      uint64_t v21 = *(unint64_t **)v20;
      uint64_t v22 = *(unint64_t **)(v20 + 8);
      uint64x2_t v3 = v369;
      if (*(unint64_t **)v20 != v22)
      {
        int8x8_t v23 = *(int8x8_t *)((char *)v369 + 520);
        if (v23)
        {
LABEL_33:
          unint64_t v24 = *v21;
          uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23);
          v25.i16[0] = vaddlv_u8(v25);
          if (v25.u32[0] > 1uLL)
          {
            unint64_t v26 = *v21;
            if (v24 >= *(void *)&v23) {
              unint64_t v26 = v24 % *(void *)&v23;
            }
          }
          else
          {
            unint64_t v26 = (*(void *)&v23 - 1) & v24;
          }
          id v27 = *(void ***)(*((void *)v369 + 64) + 8 * v26);
          if (v27)
          {
            uint64_t v28 = *v27;
            if (*v27)
            {
              unint64_t v29 = v21[1];
              if (v25.u32[0] < 2uLL)
              {
                uint64_t v30 = *(void *)&v23 - 1;
                while (1)
                {
                  uint64_t v32 = v28[1];
                  if (v32 == v24)
                  {
                    if (v28[2] == v24) {
                      goto LABEL_53;
                    }
                  }
                  else if ((v32 & v30) != v26)
                  {
                    goto LABEL_131;
                  }
                  uint64_t v28 = (void *)*v28;
                  if (!v28) {
                    goto LABEL_131;
                  }
                }
              }
              do
              {
                unint64_t v31 = v28[1];
                if (v31 == v24)
                {
                  if (v28[2] == v24)
                  {
LABEL_53:
                    id v33 = (char *)v28[4];
                    uint64_t v34 = (char *)v28[5];
                    uint64_t v35 = v33;
                    if (v33 != v34)
                    {
                      uint64_t v35 = (char *)v28[4];
                      do
                      {
                        if (*(void *)v35 == v29) {
                          goto LABEL_58;
                        }
                        v35 += 8;
                      }
                      while (v35 != v34);
                      uint64_t v35 = (char *)v28[5];
                    }
LABEL_58:
                    if (v35 == v34)
                    {
                      uint64_t v43 = v28[3];
                    }
                    else
                    {
                      if (v35 + 8 != v34) {
                        memmove(v35, v35 + 8, ((v34 - v35 - 16) & 0xFFFFFFFFFFFFFFF8) + 8);
                      }
                      uint64_t v36 = v34 - 8;
                      v28[5] = v34 - 8;
                      if (v33 == v34 - 8)
                      {
                        uint64_t v43 = 0;
                      }
                      else
                      {
                        id v37 = v33 + 8;
                        if (v33 + 8 != v36)
                        {
                          unint64_t v38 = *(void *)v33;
                          uint64_t v39 = (unint64_t *)(v33 + 8);
                          do
                          {
                            unint64_t v41 = *v39++;
                            unint64_t v40 = v41;
                            BOOL v42 = v38 >= v41;
                            if (v38 <= v41) {
                              unint64_t v38 = v40;
                            }
                            if (!v42) {
                              id v33 = v37;
                            }
                            id v37 = (char *)v39;
                          }
                          while (v39 != (unint64_t *)v36);
                        }
                        uint64_t v43 = *(void *)v33;
                      }
                      if (v43 != v28[3])
                      {
                        v28[3] = v43;
                        id v44 = v359;
                        do
                        {
                          id v44 = (void *)*v44;
                          if (!v44) {
                            goto LABEL_83;
                          }
                          uint64_t v45 = v44[2];
                          if (v45) {
                            uint64_t v46 = v45 + 8;
                          }
                          else {
                            uint64_t v46 = 0;
                          }
                        }
                        while ((*(uint64_t (**)(void))(**(void **)(v46 + 8) + 160))(*(void *)(v46 + 8)) != v24);
                        uint64_t v47 = v44[2];
                        if (v47) {
                          uint64_t v48 = v47 + 8;
                        }
                        else {
                          uint64_t v48 = 0;
                        }
                        md::PointLabelFeature::setPOIUpdateRemoveVersion(*(md::PointLabelFeature **)(v48 + 8), v43);
                      }
                    }
LABEL_83:
                    if (md::DebugStreamingPOIFeatureID) {
                      BOOL v49 = md::DebugStreamingPOIFeatureID == v24;
                    }
                    else {
                      BOOL v49 = 0;
                    }
                    if (v49)
                    {
                      if (GEOGetVectorKitStreamingPOILog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_61);
                      }
                      uint64_t v50 = (id)GEOGetVectorKitStreamingPOILog_log;
                      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                      {
                        md::HighlightHelper::debugTileToString(&__p, (uint64_t)v372 + 4);
                        p_p = &__p;
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)buf = 136315906;
                        *(void *)&buf[4] = p_p;
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v24;
                        __int16 v387 = 2048;
                        unint64_t v388 = v29;
                        __int16 v389 = 2048;
                        uint64_t v390 = v43;
                        _os_log_impl(&dword_1A1780000, v50, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::removeFeatureID, tile:%s featureID:%llu, removeVersion:%llu -> newVersion:%llu", buf, 0x2Au);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                      }

                      if (v28[4] == v28[5])
                      {
                        if (GEOGetVectorKitStreamingPOILog_onceToken != -1) {
                          dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_61);
                        }
                        uint8x8_t v52 = (id)GEOGetVectorKitStreamingPOILog_log;
                        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_1A1780000, v52, OS_LOG_TYPE_DEBUG, "LabelFeaturePool::clear removeFeatureID", buf, 2u);
                        }
                      }
                    }
                    if (v28[4] == v28[5])
                    {
                      int8x8_t v53 = *(int8x8_t *)((char *)v369 + 520);
                      unint64_t v54 = v28[1];
                      uint8x8_t v55 = (uint8x8_t)vcnt_s8(v53);
                      v55.i16[0] = vaddlv_u8(v55);
                      if (v55.u32[0] > 1uLL)
                      {
                        if (v54 >= *(void *)&v53) {
                          v54 %= *(void *)&v53;
                        }
                      }
                      else
                      {
                        v54 &= *(void *)&v53 - 1;
                      }
                      uint64_t v56 = *((void *)v369 + 64);
                      id v57 = *(void **)(v56 + 8 * v54);
                      do
                      {
                        id v58 = v57;
                        id v57 = (void *)*v57;
                      }
                      while (v57 != v28);
                      if (v58 == v358) {
                        goto LABEL_119;
                      }
                      unint64_t v59 = v58[1];
                      if (v55.u32[0] > 1uLL)
                      {
                        if (v59 >= *(void *)&v53) {
                          v59 %= *(void *)&v53;
                        }
                      }
                      else
                      {
                        v59 &= *(void *)&v53 - 1;
                      }
                      if (v59 != v54)
                      {
LABEL_119:
                        if (!*v28) {
                          goto LABEL_120;
                        }
                        unint64_t v60 = *(void *)(*v28 + 8);
                        if (v55.u32[0] > 1uLL)
                        {
                          if (v60 >= *(void *)&v53) {
                            v60 %= *(void *)&v53;
                          }
                        }
                        else
                        {
                          v60 &= *(void *)&v53 - 1;
                        }
                        if (v60 != v54) {
LABEL_120:
                        }
                          *(void *)(v56 + 8 * v54) = 0;
                      }
                      uint64_t v61 = *v28;
                      if (*v28)
                      {
                        unint64_t v62 = *(void *)(v61 + 8);
                        if (v55.u32[0] > 1uLL)
                        {
                          if (v62 >= *(void *)&v53) {
                            v62 %= *(void *)&v53;
                          }
                        }
                        else
                        {
                          v62 &= *(void *)&v53 - 1;
                        }
                        if (v62 != v54)
                        {
                          *(void *)(*((void *)v369 + 64) + 8 * v62) = v58;
                          uint64_t v61 = *v28;
                        }
                      }
                      *id v58 = v61;
                      *uint64_t v28 = 0;
                      --*((void *)v369 + 69);
                      uint64_t v63 = (void *)v28[4];
                      if (v63 != (void *)v28[6]) {
                        free(v63);
                      }
                      (*(void (**)(void, void *, uint64_t))(**((void **)v369 + 68) + 40))(*((void *)v369 + 68), v28, 80);
                    }
                    break;
                  }
                }
                else
                {
                  if (v31 >= *(void *)&v23) {
                    v31 %= *(void *)&v23;
                  }
                  if (v31 != v26) {
                    break;
                  }
                }
                uint64_t v28 = (void *)*v28;
              }
              while (v28);
            }
          }
LABEL_131:
          while (1)
          {
            v21 += 2;
            if (v21 == v22) {
              break;
            }
            int8x8_t v23 = *(int8x8_t *)((char *)v369 + 520);
            if (v23) {
              goto LABEL_33;
            }
          }
        }
      }
      std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)buf, v362, v363);
      uint64_t v157 = *(void *)buf;
      if (*(void *)buf)
      {
        if (buf[16]) {
          std::__destroy_at[abi:nn180100]<std::pair<void * const,md::LabelFeaturePoolTileInfo>,0>((uint64_t *)(*(void *)buf + 16));
        }
        (*(void (**)(void, uint64_t, uint64_t))(***(void ***)&buf[8] + 40))(**(void **)&buf[8], v157, 440);
      }
LABEL_321:
      id v156 = v373;
      if (v373)
      {
LABEL_322:
        if (!atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
LABEL_18:
      uint64_t v7 = v365 + 2;
      if (v365 + 2 == v361)
      {
        uint64_t v7 = v374;
        goto LABEL_785;
      }
    }
    unint64_t v150 = v8[2];
    BOOL v151 = (std::__shared_weak_count *)v8[3];
    unint64_t v370 = v150;
    uint64_t v371 = v151;
    if (v151) {
      atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v152 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v362, v150);
    if (!v152
      || (int v153 = *((_DWORD *)v152 + 108),
          BOOL v13 = __OFSUB__(v153, 1),
          --v153,
          *((_DWORD *)v152 + 108) = v153,
          !((v153 < 0) ^ v13 | (v153 == 0))))
    {
LABEL_315:
      id v156 = v371;
      if (v371) {
        goto LABEL_322;
      }
      goto LABEL_18;
    }
    uint64_t v364 = v152;
    id v154 = (void *)v152[34];
    if (!v154)
    {
LABEL_311:
      std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)buf, v362, v364);
      uint64_t v155 = *(void *)buf;
      if (*(void *)buf)
      {
        if (buf[16]) {
          std::__destroy_at[abi:nn180100]<std::pair<void * const,md::LabelFeaturePoolTileInfo>,0>((uint64_t *)(*(void *)buf + 16));
        }
        (*(void (**)(void, uint64_t, uint64_t))(***(void ***)&buf[8] + 40))(**(void **)&buf[8], v155, 440);
      }
      goto LABEL_315;
    }
    while (1)
    {
      uint64_t v310 = v154[2];
      uint64_t v311 = v310 ? (void *)(v310 + 8) : 0;
      uint64_t v312 = (std::mutex *)(v311[1] + 8);
      std::mutex::lock(v312);
      if (v371) {
        break;
      }
      int16x8_t v314 = (void *)v311[3];
      int8x16_t v313 = (void *)v311[4];
      if (v314 == v313) {
        goto LABEL_681;
      }
LABEL_679:
      while (v314[1] != v370)
      {
        v314 += 3;
        if (v314 == v313) {
          goto LABEL_681;
        }
      }
      if (v314 != v313)
      {
        for (kuint64_t k = v314 + 3; kk != v313; kk += 3)
        {
          uint64_t v331 = kk[1];
          if (v331 != v370)
          {
            void *v314 = *kk;
            uint64_t v332 = kk[2];
            kk[1] = 0;
            kk[2] = 0;
            id v333 = (std::__shared_weak_count *)v314[2];
            v314[1] = v331;
            v314[2] = v332;
            if (v333 && !atomic_fetch_add(&v333->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
              std::__shared_weak_count::__release_weak(v333);
            }
            v314 += 3;
          }
        }
      }
LABEL_682:
      if (v371 && !atomic_fetch_add(&v371->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
      int32x4_t v315 = (void *)v311[4];
      if (v314 != v315)
      {
        while (v315 != v314)
        {
          uint64_t v316 = (std::__shared_weak_count *)*(v315 - 1);
          if (v316 && !atomic_fetch_add(&v316->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
          v315 -= 3;
        }
        v311[4] = v314;
      }
      if (v311[8] == v370)
      {
        uint64_t v317 = (void *)v311[3];
        if (v317 != v314)
        {
          v311[7] = *v317;
          uint64_t v319 = v317[1];
          uint64_t v318 = v317[2];
          if (v318) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v318 + 8), 1uLL, memory_order_relaxed);
          }
          int8x16_t v320 = (std::__shared_weak_count *)v311[9];
          v311[8] = v319;
          v311[9] = v318;
          if (v320 && !atomic_fetch_add(&v320->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
      }
      if (v311[3] == v311[4])
      {
        uint64_t v321 = v311[1];
        *(void *)(v321 + 152) = 0;
        atomic_store(1u, (unsigned __int8 *)(v321 + 145));
        if (v371)
        {
LABEL_706:
          if (!atomic_fetch_add(&v371->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
            std::__shared_weak_count::__release_weak(v371);
          }
        }
      }
      else if (v371)
      {
        goto LABEL_706;
      }
      std::mutex::unlock(v312);
      uint64_t v322 = v154[2];
      if (v322) {
        uint64_t v323 = v322 + 8;
      }
      else {
        uint64_t v323 = 0;
      }
      (*(void (**)(void))(**(void **)(v323 + 8) + 640))();
      uint64_t v324 = v154[2];
      if (v324) {
        uint64_t v325 = v324 + 8;
      }
      else {
        uint64_t v325 = 0;
      }
      if (*(void *)(v325 + 24) == *(void *)(v325 + 32))
      {
        int8x8_t v326 = *(int8x8_t *)((char *)v3 + 296);
        if (v326)
        {
          unint64_t v327 = (*(void *)(*(void *)(v325 + 56) + 16)
                - 0x61C8864680B583EBLL
                + ((unint64_t)*(unsigned __int8 *)(v325 + 88) << 6)
                + ((unint64_t)*(unsigned __int8 *)(v325 + 88) >> 2)) ^ *(unsigned __int8 *)(v325 + 88);
          uint8x8_t v328 = (uint8x8_t)vcnt_s8(v326);
          v328.i16[0] = vaddlv_u8(v328);
          if (v328.u32[0] > 1uLL)
          {
            unint64_t v329 = v327;
            if (v327 >= *(void *)&v326) {
              unint64_t v329 = v327 % *(void *)&v326;
            }
          }
          else
          {
            unint64_t v329 = v327 & (*(void *)&v326 - 1);
          }
          uint64_t v334 = *((void *)v3 + 36);
          id v335 = *(void ***)(v334 + 8 * v329);
          if (v335)
          {
            int8x16_t v336 = *v335;
            if (*v335)
            {
              uint64_t v337 = *(void *)&v326 - 1;
              if (v328.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v338 = v336[1];
                  if (v338 == v327)
                  {
                    uint64_t v339 = v336[2];
                    if (v339) {
                      uint64_t v340 = v339 + 8;
                    }
                    else {
                      uint64_t v340 = 0;
                    }
                    if (*(unsigned __int8 *)(v340 + 88) == *(unsigned __int8 *)(v324 + 96)
                      && *(void *)(*(void *)(v340 + 56) + 16) == *(void *)(*(void *)(v324 + 64) + 16))
                    {
                      goto LABEL_741;
                    }
                  }
                  else if ((v338 & v337) != v329)
                  {
                    goto LABEL_673;
                  }
                  int8x16_t v336 = (void *)*v336;
                  if (!v336) {
                    goto LABEL_673;
                  }
                }
              }
              do
              {
                unint64_t v341 = v336[1];
                if (v341 == v327)
                {
                  uint64_t v342 = v336[2];
                  if (v342) {
                    uint64_t v343 = v342 + 8;
                  }
                  else {
                    uint64_t v343 = 0;
                  }
                  if (*(unsigned __int8 *)(v343 + 88) == *(unsigned __int8 *)(v324 + 96)
                    && *(void *)(*(void *)(v343 + 56) + 16) == *(void *)(*(void *)(v324 + 64) + 16))
                  {
LABEL_741:
                    if (v328.u32[0] > 1uLL)
                    {
                      if (v327 >= *(void *)&v326) {
                        v327 %= *(void *)&v326;
                      }
                    }
                    else
                    {
                      v327 &= v337;
                    }
                    long long v344 = *(void **)(v334 + 8 * v327);
                    do
                    {
                      long long v345 = v344;
                      long long v344 = (void *)*v344;
                    }
                    while (v344 != v336);
                    if (v345 == v355) {
                      goto LABEL_769;
                    }
                    unint64_t v346 = v345[1];
                    if (v328.u32[0] > 1uLL)
                    {
                      if (v346 >= *(void *)&v326) {
                        v346 %= *(void *)&v326;
                      }
                    }
                    else
                    {
                      v346 &= v337;
                    }
                    if (v346 != v327)
                    {
LABEL_769:
                      if (!*v336) {
                        goto LABEL_770;
                      }
                      unint64_t v347 = *(void *)(*v336 + 8);
                      if (v328.u32[0] > 1uLL)
                      {
                        if (v347 >= *(void *)&v326) {
                          v347 %= *(void *)&v326;
                        }
                      }
                      else
                      {
                        v347 &= v337;
                      }
                      if (v347 != v327) {
LABEL_770:
                      }
                        *(void *)(v334 + 8 * v327) = 0;
                    }
                    uint64_t v348 = *v336;
                    if (*v336)
                    {
                      unint64_t v349 = *(void *)(v348 + 8);
                      if (v328.u32[0] > 1uLL)
                      {
                        if (v349 >= *(void *)&v326) {
                          v349 %= *(void *)&v326;
                        }
                      }
                      else
                      {
                        v349 &= v337;
                      }
                      if (v349 != v327)
                      {
                        *(void *)(*((void *)v3 + 36) + 8 * v349) = v345;
                        uint64_t v348 = *v336;
                      }
                    }
                    *long long v345 = v348;
                    *int8x16_t v336 = 0;
                    --*((void *)v3 + 41);
                    id v350 = (void *)v336[2];
                    if (v350)
                    {
                      BOOL v49 = (*v350)-- == 1;
                      if (v49)
                      {
                        md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::~LabelFeatureThunk((uint64_t)(v350 + 1));
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, v336[2], 104);
                        v336[2] = 0;
                      }
                    }
                    (*(void (**)(void, void *, uint64_t))(**((void **)v3 + 40) + 40))(*((void *)v3 + 40), v336, 24);
                    break;
                  }
                }
                else
                {
                  if (v341 >= *(void *)&v326) {
                    v341 %= *(void *)&v326;
                  }
                  if (v341 != v329) {
                    break;
                  }
                }
                int8x16_t v336 = (void *)*v336;
              }
              while (v336);
            }
          }
        }
      }
LABEL_673:
      id v154 = (void *)*v154;
      if (!v154) {
        goto LABEL_311;
      }
    }
    atomic_fetch_add_explicit(&v371->__shared_owners_, 1uLL, memory_order_relaxed);
    int16x8_t v314 = (void *)v311[3];
    int8x16_t v313 = (void *)v311[4];
    atomic_fetch_add_explicit(&v371->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v314 != v313) {
      goto LABEL_679;
    }
LABEL_681:
    int16x8_t v314 = v313;
    goto LABEL_682;
  }
}

void sub_1A1D3238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a30);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a32);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v33 - 192));
  std::mutex::unlock(v32);
  _Unwind_Resume(a1);
}

void sub_1A1D32998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 == v12)
  {
    (*(void (**)(uint64_t *))(a9 + 32))(&a9);
    _Unwind_Resume(exception_object);
  }
  if (a12)
  {
    (*(void (**)(void))(*(void *)a12 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(unsigned char *)(v1 + 201) = *(unsigned char *)(a1 + 16);
  (*(void (**)(void, void))(**(void **)(*(void *)(v1 + 168) + 32) + 112))(*(void *)(*(void *)(v1 + 168) + 32), *(void *)(a1 + 24));
  unsigned __int8 v2 = ***(uint64_t (****)(void))(*(void *)(v1 + 168) + 40);
  return v2();
}

void non-virtual thunk to'md::MapNavLabeler::setRouteContext(md::MapNavLabeler *this, VKRouteContext *a2)
{
}

void md::MapNavLabeler::setRouteContext(md::MapNavLabeler *this, VKRouteContext *a2)
{
  v92._alternateRouteLineObservers = (NSHashTable *)*MEMORY[0x1E4F143B8];
  uint64x2_t v3 = a2;
  uint64_t v86 = v3;
  if (v3)
  {
    unsigned __int8 v4 = v3;
    uint64x2_t v3 = v86;
  }
  char v5 = (void *)*((void *)this + 11);
  *((void *)this + 11) = v3;
  uint64_t v6 = v3;

  uint64_t v7 = *((void *)this + 86);
  unint64_t v87 = v6;
  if (*(VKRouteContext **)(v7 + 24) != v87)
  {
    memset(&v88, 0, 64);
    uint64x2_t v8 = [(VKRouteContext *)v87 alternateRoutes];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v88 objects:&v92 count:16];
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v10 = **(void **)&v88._useType;
    while (1)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (**(void **)&v88._useType != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v12 = [*((id *)&v88._routeInfo->super.isa + i) route];
        id v13 = *(id *)(v7 + 24);
        uint64_t v14 = [v13 routeInfo];
        id v15 = [v14 route];
        BOOL v16 = v12 == v15;

        if (v16)
        {
          char v17 = 1;
LABEL_14:

          unint64_t v18 = [(VKRouteContext *)v87 routeInfo];
          unsigned int v19 = [*(id *)(v7 + 24) routeInfo];
          if (v18 == v19) {
            char v17 = 0;
          }

          if ((v17 & 1) == 0) {
            md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)v7);
          }
          uint64_t v20 = (NSString *)*(id *)(v7 + 24);
          uint64_t v21 = v87;
          gatherRoutesFromContext((VKRouteContext *)&v88._shareSections.__tree_.__pair3_, v20);
          gatherRoutesFromContext((VKRouteContext *)&v88._alternateRoutes, v21);
          *(void *)&v88._hasContextChangedForAlternateRouteLines = 0;
          v88._alternateRouteLineObservers = 0;
          *(void *)&v88._hasContextChangedForRouteLine = 0;
          v88._routeLineObservers = (NSHashTable *)&v88._hasContextChangedForAlternateRouteLines;
          *(void *)&v88._hasContextChangedForLabels = &v88._labelObservers;
          v88._labelObservers = 0;
          *(void *)&v88._puckLocation.double longitude = v88._alternateRoutes;
          v88._currentWaypoint = (GEOComposedWaypoint *)&v88._shareSections;
          p_shareSections = (multimap<unsigned int, std::vector<RouteSection>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::vector<RouteSection>>>> *)v89;
          unint64_t value = v88._shareSections.__tree_.__pair3_.__value_;
          v88._locale = (NSString *)&v88._routeLineObservers;
          v88._accessPointEntryName = (NSString *)&v88._hasContextChangedForAlternateRouteLines;
          std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::insert_iterator<std::set<GEOComposedRoute * {__strong}>> &>((uint64_t ****)&v92._accessPointEntryName, (uint64_t ****)&v88._puckLocation.longitude, (uint64_t ****)&v88._currentWaypoint, (uint64_t)&value, &p_shareSections, (uint64_t ****)&v88._locale);
          *(void *)&v88._puckLocation.double longitude = v88._shareSections.__tree_.__pair3_.__value_;
          v88._currentWaypoint = (GEOComposedWaypoint *)v89;
          p_shareSections = &v88._shareSections;
          unint64_t value = (unint64_t)v88._alternateRoutes;
          v88._locale = (NSString *)&v88._hasContextChangedForLabels;
          v88._accessPointEntryName = *(NSString **)&v88._hasContextChangedForLabels;
          std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::insert_iterator<std::set<GEOComposedRoute * {__strong}>> &>((uint64_t ****)&v92._accessPointEntryName, (uint64_t ****)&v88._puckLocation.longitude, (uint64_t ****)&v88._currentWaypoint, (uint64_t)&value, &p_shareSections, (uint64_t ****)&v88._locale);
          if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1) {
            dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_6571);
          }
          uint64_t v22 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            p_locale = (NSHashTable *)&v88._locale;
            buildStringForRouteSet(&v88._locale, &v88._alternateRoutes);
            if (SHIBYTE(v88._accessPointExitName) < 0) {
              p_locale = (NSHashTable *)v88._locale;
            }
            buildStringForRouteSet(&v88._puckLocation.longitude, &v88._routeLineObservers);
            int puckSnappedStopID_high = SHIBYTE(v88._puckSnappedStopID);
            double longitude = v88._puckLocation.longitude;
            buildStringForRouteSet(&v88._currentWaypoint, &v88._hasContextChangedForLabels);
            p_double longitude = &v88._puckLocation.longitude;
            if (puckSnappedStopID_high < 0) {
              p_double longitude = *(double **)&longitude;
            }
            if (v88._puckLocation.latitude >= 0.0) {
              p_currentWaypoint = (NSHashTable *)&v88._currentWaypoint;
            }
            else {
              p_currentWaypoint = (NSHashTable *)v88._currentWaypoint;
            }
            LODWORD(v92._accessPointEntryName) = 134219010;
            *(NSString **)((char *)&v92._accessPointEntryName + 4) = v20;
            WORD2(v92._accessPointExitName) = 2048;
            *(NSString **)((char *)&v92._accessPointExitName + 6) = v21;
            *((_WORD *)&v92._hasContextChangedForLabels + 3) = 2080;
            v92._labelObservers = p_locale;
            *(_WORD *)&v92._hasContextChangedForRouteLine = 2080;
            *(void *)(&v92._hasContextChangedForRouteLine + 2) = p_longitude;
            WORD1(v92._routeLineObservers) = 2080;
            *(NSHashTable **)((char *)&v92._routeLineObservers + 4) = p_currentWaypoint;
            _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_INFO, "Received new routeContext - old:%p new:%p routes:%s enteringRoutes:%s exitingRoutes:%s", (uint8_t *)&v92._accessPointEntryName, 0x34u);
            if (SHIBYTE(v88._puckLocation.latitude) < 0)
            {
              operator delete(v88._currentWaypoint);
              if (SHIBYTE(v88._puckSnappedStopID) < 0) {
                goto LABEL_56;
              }
LABEL_30:
              if (SHIBYTE(v88._accessPointExitName) < 0) {
LABEL_57:
              }
                operator delete(v88._locale);
            }
            else
            {
              if ((SHIBYTE(v88._puckSnappedStopID) & 0x80000000) == 0) {
                goto LABEL_30;
              }
LABEL_56:
              operator delete(*(void **)&v88._puckLocation.longitude);
              if (SHIBYTE(v88._accessPointExitName) < 0) {
                goto LABEL_57;
              }
            }
          }

          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(&v88._labelObservers->super.isa);
          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*(void **)&v88._hasContextChangedForAlternateRouteLines);
          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy((void *)v88._shareSections.__tree_.__begin_node_);
          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(v89[0]);

          uint64_t v28 = *(void *)(v7 + 24);
          id v29 = *(id *)(v7 + 120);
          [v29 stopObserving:v28];

          uint64_t v30 = v21;
          unint64_t v31 = (VKRouteContext *)v30;
          if (v86) {
            uint64_t v32 = v30;
          }
          uint64_t v33 = *(void **)(v7 + 24);
          *(void *)(v7 + 24) = v31;

          uint64_t v34 = *(void *)(v7 + 24);
          id v35 = *(id *)(v7 + 120);
          [v35 startObserving:v34];

          uint64_t v36 = *(void *)(v7 + 24);
          *(unsigned char *)(v7 + 252) = v36 != 0;
          if (!v36) {
            md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)v7);
          }
          std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,mdm::Allocator>>::destroy(v7 + 456, *(void **)(v7 + 464));
          *(void *)(v7 + 480) = 0;
          *(void *)(v7 + 456) = v7 + 464;
          *(void *)(v7 + 464) = 0;
          std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v7 + 488, *(void *)(v7 + 496));
          *(void *)(v7 + 512) = 0;
          *(void *)(v7 + 488) = v7 + 496;
          *(void *)(v7 + 496) = 0;
          std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v7 + 520, *(void *)(v7 + 528));
          *(void *)(v7 + 544) = 0;
          *(void *)(v7 + 520) = v7 + 528;
          *(void *)(v7 + 528) = 0;
          md::LabelNavEtaLabeler::recreateRouteCollider((md::LabelNavEtaLabeler *)v7, v31);
        }
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v88 objects:&v92 count:16];
      if (!v9)
      {
LABEL_12:
        char v17 = 0;
        goto LABEL_14;
      }
    }
  }

  uint64_t v37 = *((void *)this + 8);
  unint64_t v38 = v87;
  uint64_t v39 = *(VKRouteContext **)(v37 + 24);
  unint64_t v85 = v38;
  if (v39 != v38)
  {
    if (!v86) {
      goto LABEL_40;
    }
    v92._accessPointEntryName = 0;
    if (geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v39, (void **)&v92._accessPointEntryName)|| (-[VKRouteContext routeInfo](v85, "routeInfo"), unint64_t v40 = objc_claimAutoreleasedReturnValue(), [*(id *)(v37 + 24) routeInfo], v41 = objc_claimAutoreleasedReturnValue(), v42 = v40 == v41, v41, v40, !v42))
    {
LABEL_40:
      int v43 = 1;
      int v44 = 1;
LABEL_41:
      uint64_t v45 = *(void *)(v37 + 24);
      id v46 = *(id *)(v37 + 184);
      [v46 stopObserving:v45];

      uint64_t v47 = v85;
      uint64_t v48 = v47;
      if (v86) {
        BOOL v49 = v47;
      }
      uint64_t v50 = *(void **)(v37 + 24);
      *(void *)(v37 + 24) = v48;

      uint64_t v51 = *(void *)(v37 + 24);
      id v52 = *(id *)(v37 + 184);
      [v52 startObserving:v51];

      if (v44)
      {
        if (v43) {
          md::RouteLineSupport::resolveCurrentRouteLeg((md::RouteLineSupport *)v37);
        }
        *(unsigned char *)(v37 + 250) = 1;
      }
      if (v43)
      {
        int8x8_t v53 = *(md::LabelRoute **)(v37 + 200);
        *(void *)(v37 + 200) = 0;
        if (!v53 || (md::LabelRoute::~LabelRoute(v53), MEMORY[0x1A6239270](), !*(void *)(v37 + 200)))
        {
          unint64_t v54 = [*(id *)(v37 + 24) routeInfo];
          uint64_t v55 = [v54 route];

          if (v55)
          {
            if (((*(unsigned char *)(v37 + 208) + 1) & 0xFE) != 0) {
              char v56 = *(unsigned char *)(v37 + 208) + 1;
            }
            else {
              char v56 = 1;
            }
            *(unsigned char *)(v37 + 208) = v56;
            operator new();
          }
        }
      }
      if (!*(void *)(v37 + 24))
      {
        uint64_t v64 = *(void **)(v37 + 240);
        *(void *)(v37 + 240) = 0;

        std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(v37 + 40, *(void *)(v37 + 48));
        *(void *)(v37 + 40) = v37 + 48;
        *(void *)(v37 + 48) = 0;
        uint64_t v65 = *(std::__shared_weak_count **)(v37 + 80);
        *(void *)(v37 + 64) = 0;
        *(void *)(v37 + 72) = 0;
        *(void *)(v37 + 80) = 0;
        if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        uint64_t v66 = *(void *)(v37 + 88);
        for (uint64_t j = *(void *)(v37 + 96); j != v66; j -= 16)
        {
          float v68 = *(std::__shared_weak_count **)(j - 8);
          if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        *(void *)(v37 + 96) = v66;
        if (*(void *)(v37 + 160))
        {
          float v69 = *(void **)(v37 + 144);
          if (v69)
          {
            do
            {
              uint64_t v70 = (void *)*v69;
              (*(void (**)(void))(**(void **)(v37 + 152) + 40))(*(void *)(v37 + 152));
              float v69 = v70;
            }
            while (v70);
          }
          *(void *)(v37 + 144) = 0;
          uint64_t v71 = *(void *)(v37 + 128);
          if (v71)
          {
            for (uint64_t k = 0; k != v71; ++k)
              *(void *)(*(void *)(v37 + 120) + 8 * k) = 0;
          }
          *(void *)(v37 + 160) = 0;
        }
        md::RouteLineSupport::clearRouteLabelFeatures((md::RouteLineSupport *)v37);
        ++*(_DWORD *)(v37 + 232);
      }
      goto LABEL_86;
    }
    if (*(void *)(v37 + 24))
    {
      id v57 = [(VKRouteContext *)v85 alternateRoutes];
      uint64_t v58 = [v57 count];
      unint64_t v59 = [*(id *)(v37 + 24) alternateRoutes];
      BOOL v60 = v58 != [v59 count];

      uint64_t v61 = *(void *)(v37 + 24);
      BOOL v62 = v61 == 0;
      if (v61) {
        char v63 = v60;
      }
      else {
        char v63 = 1;
      }
      int v44 = !v62 || v60;
      if (v63)
      {
        int v43 = 0;
        goto LABEL_41;
      }
      size_t v73 = [(VKRouteContext *)v85 alternateRoutes];
      uint64_t v74 = [v73 count];
      uint64_t v75 = [*(id *)(v37 + 24) alternateRoutes];
      BOOL v76 = v74 == [v75 count];

      if (!v76)
      {
        getSortedArrayOfRoutes(&v92, v85);
        getSortedArrayOfRoutes(&v88, *(void **)(v37 + 24));
        isa = (VKRouteInfo *)v88.super.isa;
        routeInfo = v88._routeInfo;
        uint64_t v79 = (VKRouteInfo *)v92.super.isa;
        BOOL v80 = (char *)v88._routeInfo - (char *)v88.super.isa == (char *)v92._routeInfo - (char *)v92.super.isa
           && memcmp(v88.super.isa, v92.super.isa, (char *)v88._routeInfo - (char *)v88.super.isa) == 0;
        if (isa)
        {
          if (routeInfo != isa)
          {
            do
            {
              anchorpoints = routeInfo[-1]._anchorpoints;
              routeInfo = (VKRouteInfo *)((char *)routeInfo - 8);
            }
            while (routeInfo != isa);
            routeInfo = (VKRouteInfo *)v88.super.isa;
          }
          v88._routeInfo = isa;
          (*(void (**)(int64_t, VKRouteInfo *, void))(*(void *)v88._inspectedSegmentIndex + 40))(v88._inspectedSegmentIndex, routeInfo, *(void *)&v88._useType - (void)routeInfo);
          uint64_t v79 = (VKRouteInfo *)v92.super.isa;
        }
        if (v79)
        {
          id v82 = v92._routeInfo;
          Class v83 = (Class)v79;
          if (v92._routeInfo != v79)
          {
            do
            {
              unint64_t v84 = v82[-1]._anchorpoints;
              id v82 = (VKRouteInfo *)((char *)v82 - 8);
            }
            while (v82 != v79);
            Class v83 = v92.super.isa;
          }
          v92._routeInfo = v79;
          (*(void (**)(int64_t, Class, void))(*(void *)v92._inspectedSegmentIndex + 40))(v92._inspectedSegmentIndex, v83, *(void *)&v92._useType - (void)v83);
        }
        int v43 = 0;
        int v44 = !v80;
        goto LABEL_41;
      }
    }
    int v43 = 0;
    int v44 = 0;
    goto LABEL_41;
  }
LABEL_86:
}

void sub_1A1D338B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  _Unwind_Resume(a1);
}

void md::RenderBatch::prepareResources(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (!*(void *)(a1 + 264)) {
    return;
  }
  unint64_t v11 = a4;
  v360[0] = 0;
  v360[1] = 0;
  long long v361 = 0;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)v358 = 0u;
  float v359 = 1.0;
  if (a5 <= a4) {
    goto LABEL_207;
  }
  uint64_t v12 = 0;
  uint64x2_t v8 = (std::__shared_weak_count *)0x9DDFEA08EB382D69;
  unint64_t v13 = (uint64_t)(a5 - a4) >> 3;
  unint64_t v341 = v358;
  if (v13 <= 1) {
    unint64_t v13 = 1;
  }
  unint64_t v338 = v13;
  do
  {
    unint64_t p_shared_weak_owners = **(void **)(v11 + 8 * v12);
    unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * p_shared_weak_owners) + 8) ^ HIDWORD(p_shared_weak_owners));
    unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(p_shared_weak_owners) ^ (v14 >> 47) ^ v14);
    unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
    unint64_t v17 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v7 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
        if ((void *)v16 >= __p[1]) {
          unint64_t v7 = v16 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v7 = v16 & ((unint64_t)__p[1] - 1);
      }
      unsigned int v19 = (void **)*((void *)__p[0] + v7);
      if (v19)
      {
        uint64_t v20 = *v19;
        if (*v19)
        {
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v22 = v20[1];
              if (v22 == v16)
              {
                if (v20[2] == p_shared_weak_owners) {
                  goto LABEL_88;
                }
              }
              else if ((v22 & ((uint64_t)__p[1] - 1)) != v7)
              {
                goto LABEL_28;
              }
              uint64_t v20 = (void *)*v20;
              if (!v20) {
                goto LABEL_28;
              }
            }
          }
          do
          {
            unint64_t v21 = v20[1];
            if (v21 == v16)
            {
              if (v20[2] == p_shared_weak_owners) {
                goto LABEL_88;
              }
            }
            else
            {
              if ((void *)v21 >= __p[1]) {
                v21 %= (unint64_t)__p[1];
              }
              if (v21 != v7) {
                break;
              }
            }
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
      }
    }
LABEL_28:
    uint64_t v20 = operator new(0x30uLL);
    *(void *)uint64_t v362 = v20;
    *(void *)&v362[8] = v358;
    *uint64_t v20 = 0;
    v20[1] = v16;
    v20[2] = p_shared_weak_owners;
    v20[3] = 0;
    v20[4] = 0;
    v20[5] = 0;
    v362[16] = 1;
    float v23 = (float)((unint64_t)v358[1] + 1);
    if (!v17 || (float)(v359 * (float)v17) < v23)
    {
      BOOL v24 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3) {
        BOOL v24 = 1;
      }
      unint64_t v25 = v24 | (2 * v17);
      unint64_t v26 = vcvtps_u32_f32(v23 / v359);
      if (v25 <= v26) {
        size_t prime = v26;
      }
      else {
        size_t prime = v25;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v17 = (unint64_t)__p[1];
      }
      if (prime <= v17)
      {
        if (prime >= v17) {
          goto LABEL_65;
        }
        unint64_t v38 = vcvtps_u32_f32((float)(unint64_t)v358[1] / v359);
        if (v17 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
        {
          unint64_t v38 = std::__next_prime(v38);
        }
        else
        {
          uint64_t v40 = 1 << -(char)__clz(v38 - 1);
          if (v38 >= 2) {
            unint64_t v38 = v40;
          }
        }
        if (prime <= v38) {
          size_t prime = v38;
        }
        if (prime >= v17)
        {
          unint64_t v17 = (unint64_t)__p[1];
LABEL_65:
          if ((v17 & (v17 - 1)) != 0)
          {
            if (v16 >= v17) {
              unint64_t v7 = v16 % v17;
            }
            else {
              unint64_t v7 = v16;
            }
          }
          else
          {
            unint64_t v7 = (v17 - 1) & v16;
          }
          goto LABEL_78;
        }
        if (!prime)
        {
          BOOL v60 = __p[0];
          __p[0] = 0;
          if (v60) {
            operator delete(v60);
          }
          unint64_t v17 = 0;
          __p[1] = 0;
          goto LABEL_65;
        }
      }
      if (prime >> 61) {
        goto LABEL_534;
      }
      uint64_t v28 = operator new(8 * prime);
      id v29 = __p[0];
      __p[0] = v28;
      if (v29) {
        operator delete(v29);
      }
      uint64_t v30 = 0;
      __p[1] = (void *)prime;
      do
        *((void *)__p[0] + v30++) = 0;
      while (prime != v30);
      unint64_t v31 = (void **)v358[0];
      if (!v358[0])
      {
LABEL_64:
        unint64_t v17 = prime;
        goto LABEL_65;
      }
      size_t v32 = *((void *)v358[0] + 1);
      size_t v33 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v34 = v32 & v33;
        *((void *)__p[0] + v34) = v358;
        for (uint64_t i = *v31; *v31; uint64_t i = *v31)
        {
          size_t v36 = i[1] & v33;
          if (v36 == v34)
          {
            unint64_t v31 = (void **)i;
          }
          else if (*((void *)__p[0] + v36))
          {
            *unint64_t v31 = (void *)*i;
            uint64_t v37 = 8 * v36;
            *uint64_t i = **(void **)((char *)__p[0] + v37);
            **(void **)((char *)__p[0] + v37) = i;
          }
          else
          {
            *((void *)__p[0] + v36) = v31;
            unint64_t v31 = (void **)i;
            size_t v34 = v36;
          }
        }
        goto LABEL_64;
      }
      if (v32 >= prime) {
        v32 %= prime;
      }
      *((void *)__p[0] + v32) = v358;
      unint64_t v41 = *v31;
      if (!*v31) {
        goto LABEL_64;
      }
      while (1)
      {
        size_t v43 = v41[1];
        if (v43 >= prime) {
          v43 %= prime;
        }
        if (v43 != v32)
        {
          if (!*((void *)__p[0] + v43))
          {
            *((void *)__p[0] + v43) = v31;
            goto LABEL_69;
          }
          *unint64_t v31 = (void *)*v41;
          uint64_t v42 = 8 * v43;
          *unint64_t v41 = **(void **)((char *)__p[0] + v42);
          **(void **)((char *)__p[0] + v42) = v41;
          unint64_t v41 = v31;
        }
        size_t v43 = v32;
LABEL_69:
        unint64_t v31 = (void **)v41;
        unint64_t v41 = (void *)*v41;
        size_t v32 = v43;
        if (!v41) {
          goto LABEL_64;
        }
      }
    }
LABEL_78:
    int v44 = __p[0];
    uint64_t v45 = (void *)*((void *)__p[0] + v7);
    if (v45)
    {
      *uint64_t v20 = *v45;
LABEL_86:
      *uint64_t v45 = v20;
      goto LABEL_87;
    }
    *uint64_t v20 = v358[0];
    v358[0] = v20;
    v44[v7] = v358;
    if (*v20)
    {
      unint64_t v46 = *(void *)(*v20 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v46 >= v17) {
          v46 %= v17;
        }
      }
      else
      {
        v46 &= v17 - 1;
      }
      uint64_t v45 = (char *)__p[0] + 8 * v46;
      goto LABEL_86;
    }
LABEL_87:
    ++v358[1];
LABEL_88:
    uint64_t v48 = (void *)v20[4];
    unint64_t v47 = v20[5];
    if ((unint64_t)v48 < v47)
    {
      *uint64_t v48 = v12;
      uint64_t v6 = (void **)(v48 + 1);
    }
    else
    {
      unint64_t v7 = v20[3];
      uint64_t v9 = (uint64_t)v48 - v7;
      uint64_t v10 = (uint64_t)((uint64_t)v48 - v7) >> 3;
      unint64_t v49 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v50 = v47 - v7;
      if (v50 >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t p_shared_weak_owners = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t p_shared_weak_owners = v49;
      }
      if (p_shared_weak_owners)
      {
        if (p_shared_weak_owners >> 61) {
          goto LABEL_534;
        }
        uint64_t v51 = (char *)operator new(8 * p_shared_weak_owners);
      }
      else
      {
        uint64_t v51 = 0;
      }
      id v52 = &v51[8 * v10];
      *(void *)id v52 = v12;
      uint64_t v6 = (void **)(v52 + 8);
      if (v48 != (void *)v7)
      {
        unint64_t v53 = (unint64_t)v48 - v7 - 8;
        if (v53 < 0x58) {
          goto LABEL_548;
        }
        if (v7 - (unint64_t)v51 < 0x20) {
          goto LABEL_548;
        }
        uint64_t v54 = (v53 >> 3) + 1;
        uint64_t v55 = &v51[8 * v10 - 16];
        char v56 = (long long *)(v48 - 2);
        uint64_t v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v58 = *v56;
          *((_OWORD *)v55 - 1) = *(v56 - 1);
          *(_OWORD *)uint64_t v55 = v58;
          v55 -= 32;
          v56 -= 2;
          v57 -= 4;
        }
        while (v57);
        v52 -= 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v48 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
        if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_548:
          do
          {
            uint64_t v59 = *--v48;
            *((void *)v52 - 1) = v59;
            v52 -= 8;
          }
          while (v48 != (void *)v7);
        }
      }
      v20[3] = v52;
      v20[4] = v6;
      v20[5] = &v51[8 * p_shared_weak_owners];
      if (v7) {
        operator delete((void *)v7);
      }
    }
    v20[4] = v6;
    ++v12;
  }
  while (v12 != v338);
  uint64_t v61 = (void **)v358[0];
  if (v358[0])
  {
    while (1)
    {
      while (1)
      {
        unint64_t p_shared_weak_owners = (unsigned char *)v61[4] - (unsigned char *)v61[3];
        if (p_shared_weak_owners >= 9) {
          break;
        }
        uint64_t v61 = (void **)*v61;
        if (!v61) {
          goto LABEL_207;
        }
      }
      BOOL v62 = (std::__shared_weak_count *)operator new(0x30uLL);
      v62->__shared_owners_ = 0;
      v62->__shared_weak_owners_ = 0;
      v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F920;
      uint64x2_t v8 = v62 + 1;
      md::InstanceData::InstanceData((uint64_t)&v62[1], p_shared_weak_owners >> 3, 0);
      on_zero_shared_weauint64_t k = 0;
      *(void *)&long long v374 = v62 + 1;
      *((void *)&v374 + 1) = v62;
      uint64_t v64 = v62[1].__vftable;
      uint64_t v66 = v64[1].~__shared_weak_count;
      uint64_t v65 = v64[1].~__shared_weak_count_0;
      uint64_t v67 = v64->~__shared_weak_count_0;
      *(_OWORD *)uint64_t v362 = 0uLL;
      unint64_t v68 = (char *)v65 - (char *)v66;
      if (v68 != v68 % (unint64_t)v67) {
        on_zero_shared_weauint64_t k = v64[1].__on_zero_shared_weak;
      }
      *(void *)&long long v69 = 0;
      *((void *)&v69 + 1) = v64;
      *(_OWORD *)uint64_t v362 = v69;
      *(void *)&v362[16] = 0;
      *(void *)&v362[24] = v68 / (unint64_t)v67 * (void)v67;
      *(void *)&v362[40] = on_zero_shared_weak;
      *(_WORD *)&v362[32] = 1;
      BYTE4(v62[1].__shared_weak_owners_) = 0;
      uint64_t v70 = v61[3];
      uint64_t v71 = (unsigned char *)v61[4] - (unsigned char *)v70;
      if (v71)
      {
        unint64_t v72 = v71 >> 3;
        if (v72 <= 1) {
          unint64_t v72 = 1;
        }
        uint64_t v73 = (uint64_t)on_zero_shared_weak + 32;
        uint64_t v74 = (uint64_t *)v61[3];
        do
        {
          uint64_t v75 = *v74++;
          uint64_t v76 = *(void *)(v11 + 8 * v75);
          int v77 = *(_DWORD *)(v76 + 68);
          uint64_t v78 = *(void *)(v76 + 60);
          int v79 = *(_DWORD *)(v76 + 80);
          uint64_t v80 = *(void *)(v76 + 72);
          int v81 = *(_DWORD *)(v76 + 92);
          uint64_t v82 = *(void *)(v76 + 84);
          int v83 = *(_DWORD *)(v76 + 104);
          uint64_t v84 = *(void *)(v76 + 96);
          *(void *)(v73 - 32) = v78;
          *(_DWORD *)(v73 - 24) = v77;
          *(_DWORD *)(v73 - 20) = 0;
          *(void *)(v73 - 16) = v80;
          *(_DWORD *)(v73 - 8) = v79;
          *(_DWORD *)(v73 - 4) = 0;
          *(void *)uint64_t v73 = v82;
          *(_DWORD *)(v73 + 8) = v81;
          *(_DWORD *)(v73 + 12) = 0;
          *(void *)(v73 + 16) = v84;
          *(_DWORD *)(v73 + 24) = v83;
          *(_DWORD *)(v73 + 28) = 1065353216;
          v73 += 64;
          --v72;
        }
        while (v72);
      }
      unint64_t v85 = *(uint64_t **)(v11 + 8 * *v70);
      uint64_t v9 = (uint64_t)v360[1];
      if (v360[1] < v361)
      {
        uint64_t v86 = *v85;
        *(void *)v360[1] = &unk_1EF534030;
        *(unsigned char *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 24) = 0;
        *(void *)(v9 + 32) = v8;
        *(void *)(v9 + 40) = v62;
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        *(unsigned char *)(v9 + 48) = 0;
        *(unsigned char *)(v9 + 64) = 0;
        *(unsigned char *)(v9 + 72) = 1;
        *(_OWORD *)(v9 + 76) = xmmword_1A28FC710;
        *(void *)(v9 + 92) = 0x80000000800000;
        *(unsigned char *)(v9 + 100) = 0;
        *(unsigned char *)(v9 + 124) = 0;
        *(unsigned char *)(v9 + 128) = 0;
        *(unsigned char *)(v9 + 140) = 0;
        *(_DWORD *)(v9 + 144) = 65537;
        *(_WORD *)(v9 + 148) = 0;
        *(unsigned char *)(v9 + 152) = 0;
        *(unsigned char *)(v9 + 176) = 0;
        *(unsigned char *)(v9 + 184) = 0;
        *(unsigned char *)(v9 + 188) = 0;
        *(_WORD *)(v9 + 192) = 0;
        *(unsigned char *)(v9 + 196) = 0;
        *(unsigned char *)(v9 + 200) = 0;
        *(void *)(v9 + 208) = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
        *(void *)(v9 + 216) = v86;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)(v86 + 16);
        md::MeshRenderable::recalculateBounds((md::MeshRenderable *)v9);
        unint64_t v87 = (void *)(v9 + 224);
        goto LABEL_154;
      }
      unint64_t p_shared_weak_owners = 0x6DB6DB6DB6DB6DB7 * (((char *)v360[1] - (char *)v360[0]) >> 5);
      unint64_t v88 = p_shared_weak_owners + 1;
      if (p_shared_weak_owners + 1 > 0x124924924924924) {
        abort();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((v361 - (char *)v360[0]) >> 5) > v88) {
        unint64_t v88 = 0xDB6DB6DB6DB6DB6ELL * ((v361 - (char *)v360[0]) >> 5);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v361 - (char *)v360[0]) >> 5)) >= 0x92492492492492) {
        unint64_t v89 = 0x124924924924924;
      }
      else {
        unint64_t v89 = v88;
      }
      if (v89 > 0x124924924924924) {
        goto LABEL_534;
      }
      uint64_t v10 = (uint64_t)operator new(224 * v89);
      uint64_t v90 = *v85;
      uint64_t v9 = v10 + 224 * p_shared_weak_owners;
      *(void *)uint64_t v9 = &unk_1EF534030;
      *(unsigned char *)(v9 + 8) = 0;
      uint64_t v91 = (char *)(v10 + 224 * v89);
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = v8;
      *(void *)(v9 + 40) = v62;
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)(v9 + 48) = 0;
      *(unsigned char *)(v9 + 64) = 0;
      *(unsigned char *)(v9 + 72) = 1;
      *(_OWORD *)(v9 + 76) = xmmword_1A28FC710;
      *(void *)(v9 + 92) = 0x80000000800000;
      *(unsigned char *)(v9 + 100) = 0;
      *(unsigned char *)(v9 + 124) = 0;
      *(unsigned char *)(v9 + 128) = 0;
      *(unsigned char *)(v9 + 140) = 0;
      *(_DWORD *)(v9 + 144) = 65537;
      *(_WORD *)(v9 + 148) = 0;
      *(unsigned char *)(v9 + 152) = 0;
      *(unsigned char *)(v9 + 176) = 0;
      *(unsigned char *)(v9 + 184) = 0;
      *(unsigned char *)(v9 + 188) = 0;
      *(_WORD *)(v9 + 192) = 0;
      *(unsigned char *)(v9 + 196) = 0;
      *(unsigned char *)(v9 + 200) = 0;
      *(void *)(v9 + 208) = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
      *(void *)(v9 + 216) = v90;
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v90 + 16);
      md::MeshRenderable::recalculateBounds((md::MeshRenderable *)v9);
      unint64_t v87 = (void *)(v9 + 224);
      VKRouteContext v92 = (char *)v360[0];
      unint64_t v93 = (std::__shared_weak_count *)v360[1];
      if (v360[1] == v360[0])
      {
        v360[0] = (void *)(v10 + 224 * p_shared_weak_owners);
        v360[1] = (void *)(v9 + 224);
        long long v361 = v91;
        unint64_t v11 = a4;
        if (v93) {
          goto LABEL_153;
        }
      }
      else
      {
        uint64_t v94 = 0;
        do
        {
          uint64_t v96 = v9 + v94;
          *(void *)(v96 - 224) = &unk_1EF534030;
          uint8x8_t v97 = (char *)v93 + v94;
          long long v98 = *(long long *)((char *)&v93[-9].std::__shared_count + v94);
          *(void *)(v96 - 200) = *(void *)((char *)&v93[-8] + v94 - 8);
          *(_OWORD *)(v96 - 216) = v98;
          *(void *)(v96 - 192) = *(std::__shared_weak_count_vtbl **)((char *)&v93[-8].__vftable + v94);
          uint64_t v99 = *(void *)((char *)&v93[-7] + v94 - 16);
          *(void *)(v96 - 184) = v99;
          if (v99) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v99 + 8), 1uLL, memory_order_relaxed);
          }
          long long v100 = *((_OWORD *)v97 - 11);
          long long v101 = *((_OWORD *)v97 - 9);
          *(_OWORD *)(v96 - 160) = *((_OWORD *)v97 - 10);
          *(_OWORD *)(v96 - 144) = v101;
          *(_OWORD *)(v96 - 176) = v100;
          long long v102 = *((_OWORD *)v97 - 8);
          long long v103 = *((_OWORD *)v97 - 7);
          long long v104 = *((_OWORD *)v97 - 6);
          *(void *)(v96 - 82) = *(void *)(v97 - 82);
          *(_OWORD *)(v96 - 112) = v103;
          *(_OWORD *)(v96 - 96) = v104;
          *(_OWORD *)(v96 - 128) = v102;
          *(unsigned char *)(v96 - 72) = 0;
          *(unsigned char *)(v96 - 48) = 0;
          if (*(v97 - 48))
          {
            *(void *)(v96 - 72) = *(std::__shared_weak_count_vtbl **)((char *)&v93[-3].__vftable + v94);
            uint64_t v105 = *(void *)((char *)&v93[-2] + v94 - 16);
            *(void *)(v9 + v94 - 64) = v105;
            if (v105) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v105 + 8), 1uLL, memory_order_relaxed);
            }
            *(unsigned char *)(v9 + v94 - 56) = *((unsigned char *)&v93[-2] + v94 - 8);
            *(unsigned char *)(v96 - 48) = 1;
          }
          uint64_t v106 = v9 + v94;
          unint64_t v107 = (char *)v93 + v94;
          *(void *)(v106 - 40) = *(void *)((char *)&v93[-1] + v94 - 16);
          *(_WORD *)(v106 - 32) = 0;
          if (*((unsigned char *)&v93[-1] + v94 - 7))
          {
            *(unsigned char *)(v106 - 32) = *(v107 - 32);
            *(unsigned char *)(v106 - 31) = 1;
          }
          long long v95 = *(_OWORD *)(v107 - 28);
          *(_OWORD *)(v106 - 16) = *((_OWORD *)v107 - 1);
          *(_OWORD *)(v106 - 28) = v95;
          v94 -= 224;
        }
        while ((char *)v93 + v94 != v92);
        unint64_t v93 = (std::__shared_weak_count *)v360[0];
        uint64_t v108 = (std::__shared_weak_count *)v360[1];
        v360[0] = (void *)(v9 + v94);
        v360[1] = (void *)(v9 + 224);
        long long v361 = v91;
        if (v108 != v93)
        {
          unint64_t p_shared_weak_owners = (unint64_t)&v108[-10].__shared_weak_owners_;
          uint64x2_t v8 = (std::__shared_weak_count *)((char *)v108 - 224);
          uint64_t v109 = (std::__shared_weak_count *)((char *)v108 - 224);
          do
          {
            uint64_t v110 = (void (**)(std::__shared_weak_count *))v109->__vftable;
            uint64_t v109 = (std::__shared_weak_count *)((char *)v109 - 224);
            (*v110)(v8);
            p_shared_weak_owners -= 224;
            BOOL v111 = v8 == v93;
            uint64x2_t v8 = v109;
          }
          while (!v111);
        }
        unint64_t v11 = a4;
        if (v93) {
LABEL_153:
        }
          operator delete(v93);
      }
LABEL_154:
      v360[1] = v87;
      unint64_t v112 = (unint64_t)__p[1];
      uint64_t v6 = (void **)*v61;
      unint64_t v113 = (unint64_t)v61[1];
      uint8x8_t v114 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v114.i16[0] = vaddlv_u8(v114);
      if (v114.u32[0] > 1uLL)
      {
        if ((void *)v113 >= __p[1]) {
          v113 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v113 &= (unint64_t)__p[1] - 1;
      }
      uint64_t v115 = (void **)*((void *)__p[0] + v113);
      do
      {
        uint64_t v116 = v115;
        uint64_t v115 = (void **)*v115;
      }
      while (v115 != v61);
      if (v116 == v358) {
        goto LABEL_549;
      }
      unint64_t v117 = (unint64_t)v116[1];
      if (v114.u32[0] > 1uLL)
      {
        if ((void *)v117 >= __p[1]) {
          v117 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v117 &= (unint64_t)__p[1] - 1;
      }
      unint64_t v118 = (void **)*v61;
      if (v117 != v113)
      {
LABEL_549:
        if (v6)
        {
          unint64_t v119 = (unint64_t)v6[1];
          if (v114.u32[0] > 1uLL)
          {
            unint64_t v120 = (unint64_t)v6[1];
            if ((void *)v119 >= __p[1]) {
              unint64_t v120 = v119 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v120 = v119 & ((unint64_t)__p[1] - 1);
          }
          unint64_t v118 = (void **)*v61;
          if (v120 == v113) {
            goto LABEL_175;
          }
        }
        *((void *)__p[0] + v113) = 0;
        unint64_t v118 = (void **)*v61;
      }
      if (v118)
      {
        unint64_t v119 = (unint64_t)v118[1];
LABEL_175:
        if (v114.u32[0] > 1uLL)
        {
          if (v119 >= v112) {
            v119 %= v112;
          }
        }
        else
        {
          v119 &= v112 - 1;
        }
        if (v119 != v113)
        {
          *((void *)__p[0] + v119) = v116;
          unint64_t v118 = (void **)*v61;
        }
      }
      *uint64_t v116 = v118;
      *uint64_t v61 = 0;
      --v358[1];
      uint64_t v121 = v61[3];
      if (v121)
      {
        v61[4] = v121;
        operator delete(v121);
      }
      operator delete(v61);
      if (*(void *)&v362[40])
      {
        id v122 = *(std::__shared_weak_count **)&v362[24];
        uint64x2_t v8 = *(std::__shared_weak_count **)&v362[16];
        if (*(void *)&v362[24] != *(void *)&v362[16])
        {
          uint64_t v123 = *(void **)&v362[8];
          uint64_t v10 = v362[32];
          uint64_t v9 = v362[33];
          if (*(void *)v362 && *(unsigned char *)(*(void *)&v362[8] + 17) != 2) {
            (*(void (**)(void))(**(void **)v362 + 64))();
          }
          if (v10 && !v9)
          {
            uint64_t v124 = (std::__shared_weak_count *)v123[7];
            uint64_t v125 = (std::__shared_weak_count *)v123[8];
            if (v125 == v124) {
              uint64_t v124 = (std::__shared_weak_count *)(v123[10] - v123[9]);
            }
            if (v8 < v124) {
              uint64_t v124 = v8;
            }
            if (v125 <= v122) {
              uint64_t v125 = v122;
            }
            if (v125 == v124) {
              uint64_t v125 = (std::__shared_weak_count *)((char *)v124 + v123[10] - v123[9]);
            }
            v123[7] = v124;
            v123[8] = v125;
          }
        }
      }
      uint64_t v126 = (std::__shared_weak_count *)*((void *)&v374 + 1);
      if (*((void *)&v374 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v374 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        uint64_t v61 = v6;
        if (!v6) {
          break;
        }
      }
      else
      {
        uint64_t v61 = v6;
        if (!v6) {
          break;
        }
      }
    }
  }
LABEL_207:
  id v127 = (__guard *)a1;
  if (!v358[1]) {
    goto LABEL_506;
  }
  if (v358[1] == (void *)1)
  {
    int8x8_t v128 = *(uint64_t **)(v11 + 8 * **((void **)v358[0] + 3));
    *(void *)&long long v374 = v128;
    LOBYTE(v346) = 0;
    uint8x8_t v129 = (char *)v360[1];
    if (v360[1] >= v361)
    {
      uint64_t v206 = std::vector<md::MeshRenderable>::__emplace_back_slow_path<std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::components::MeshInstance *&>(v360, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8), (char *)&v346, (uint64_t **)&v374);
    }
    else
    {
      uint64_t v130 = *(std::__shared_weak_count **)(a3 + 8);
      *(void *)uint64_t v362 = *(void *)a3;
      *(void *)&v362[8] = v130;
      if (v130)
      {
        atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
        md::MeshRenderable::MeshRenderable((uint64_t)v129, v362, 0, v128);
        if (!atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      else
      {
        md::MeshRenderable::MeshRenderable((uint64_t)v360[1], v362, 0, v128);
      }
      uint64_t v206 = v129 + 224;
    }
    v360[1] = v206;
    goto LABEL_506;
  }
  uint64_t v131 = *(unsigned int *)(a1 + 224);
  if (v131 == -1)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    __break(1u);
    goto LABEL_542;
  }
  *(void *)uint64_t v362 = &v374;
  uint64_t v132 = (void *)((uint64_t (*)(unsigned char *, uint64_t))off_1EF590A20[v131])(v362, a1);
  unint64_t v133 = (void *)*v132;
  unint64_t v134 = (std::__shared_weak_count *)v132[1];
  unint64_t v346 = (void *)*v132;
  unint64_t v347 = v134;
  if (v134) {
    atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v135 = (uint64_t *)v132[3];
  uint64_t v348 = (uint64_t *)v132[2];
  unint64_t v349 = v135;
  if (v135) {
    atomic_fetch_add_explicit(v135 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v136 = v132[5];
  *(void *)&long long v350 = v132[4];
  *((void *)&v350 + 1) = v136;
  if (v136) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v137 = (uint64_t *)v132[7];
  int v351 = (uint64_t *)v132[6];
  uint64_t v352 = v137;
  if (v137) {
    atomic_fetch_add_explicit(v137 + 1, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v353 = 0u;
  long long v354 = 0u;
  float v355 = 1.0;
  uint64_t v356 = 0;
  int8x16_t v336 = (int8x16_t)xmmword_1A28FC710;
  int8x16_t v344 = (int8x16_t)xmmword_1A28FC710;
  float32x2_t v345 = (float32x2_t)0x80000000800000;
  uint64_t v138 = v358[0];
  if (!v358[0])
  {
    unint64_t v140 = 0;
    id v139 = 0;
    uint64_t v340 = 0;
    if (v133) {
      goto LABEL_352;
    }
    goto LABEL_353;
  }
  id v139 = 0;
  unint64_t v140 = 0;
  uint64_t v334 = 0;
  do
  {
    uint64_t v141 = (char *)v140;
    id v143 = (unsigned char *)v138[3];
    uint64_t v142 = (unsigned char *)v138[4];
    size_t v144 = v142 - v143;
    if (v142 == v143)
    {
      uint64_t v145 = 0;
    }
    else
    {
      if ((v144 & 0x8000000000000000) != 0) {
        abort();
      }
      uint64_t v145 = (uint64_t *)operator new(v142 - v143);
      memcpy(v145, v143, v144);
    }
    uint64_t v146 = *v145;
    uint64_t v147 = *(void *)(v11 + 8 * *v145);
    memset(&v362[4], 0, 44);
    *(_DWORD *)uint64_t v362 = 1065353216;
    *(_DWORD *)&v362[16] = 1065353216;
    *(_DWORD *)&v362[32] = 1065353216;
    unint64_t v140 = (unint64_t)v141;
    if (gm::Matrix<float,3,4>::isWithinEpsilon((float *)(v147 + 60), (float *)v362))
    {
      float32x4_t v148 = *(float32x4_t *)(v147 + 36);
      v148.i32[3] = v344.i32[3];
      float32x4_t v149 = (float32x4_t)v344;
      v149.i32[3] = HIDWORD(*(_OWORD *)(v147 + 36));
      int8x16_t v344 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v148), *(int8x16_t *)(v147 + 36), v344);
      float32x2_t v345 = vmaxnm_f32(v345, *(float32x2_t *)(v147 + 52));
      unint64_t v150 = *(void *)v147;
      if (**(void ***)(*(void *)v150 + 64) != v346) {
        goto LABEL_225;
      }
      unint64_t v151 = 0x9DDFEA08EB382D69 * (((8 * v150) + 8) ^ HIDWORD(v150));
      unint64_t v152 = 0x9DDFEA08EB382D69 * (HIDWORD(v150) ^ (v151 >> 47) ^ v151);
      unint64_t v153 = v152 ^ (v152 >> 47);
      unint64_t v154 = 0x9DDFEA08EB382D69 * v153;
      unint64_t v155 = (unint64_t)v353[1];
      if (v353[1])
      {
        uint8x8_t v156 = (uint8x8_t)vcnt_s8((int8x8_t)v353[1]);
        v156.i16[0] = vaddlv_u8(v156);
        if (v156.u32[0] > 1uLL)
        {
          unint64_t v140 = 0x9DDFEA08EB382D69 * v153;
          if ((void *)v154 >= v353[1]) {
            unint64_t v140 = v154 % (unint64_t)v353[1];
          }
        }
        else
        {
          unint64_t v140 = v154 & ((unint64_t)v353[1] - 1);
        }
        uint64_t v171 = (void *)*((void *)v353[0] + v140);
        if (v171)
        {
          uint64_t v172 = (void *)*v171;
          if (v172)
          {
            if (v156.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v174 = v172[1];
                if (v174 == v154)
                {
                  if (v172[2] == v150) {
                    goto LABEL_338;
                  }
                }
                else if ((v174 & ((uint64_t)v353[1] - 1)) != v140)
                {
                  goto LABEL_274;
                }
                uint64_t v172 = (void *)*v172;
                if (!v172) {
                  goto LABEL_274;
                }
              }
            }
            do
            {
              unint64_t v173 = v172[1];
              if (v173 == v154)
              {
                if (v172[2] == v150)
                {
LABEL_338:
                  unint64_t v140 = (unint64_t)v141;
                  goto LABEL_225;
                }
              }
              else
              {
                if ((void *)v173 >= v353[1]) {
                  v173 %= (unint64_t)v353[1];
                }
                if (v173 != v140) {
                  break;
                }
              }
              uint64_t v172 = (void *)*v172;
            }
            while (v172);
          }
        }
      }
LABEL_274:
      uint64_t v175 = operator new(0x18uLL);
      void *v175 = 0;
      v175[1] = v154;
      v175[2] = v150;
      float v176 = (float)(unint64_t)(*((void *)&v354 + 1) + 1);
      if (v155 && (float)(v355 * (float)v155) >= v176)
      {
LABEL_328:
        uint64_t v202 = v353[0];
        uint64_t v203 = (void *)*((void *)v353[0] + v140);
        if (v203)
        {
          void *v175 = *v203;
          unint64_t v140 = (unint64_t)v141;
        }
        else
        {
          void *v175 = v354;
          *(void *)&long long v354 = v175;
          v202[v140] = &v354;
          unint64_t v140 = (unint64_t)v141;
          if (!*v175)
          {
LABEL_337:
            ++*((void *)&v354 + 1);
            v356 += *(void *)(v150 + 24) - *(void *)(v150 + 16);
            goto LABEL_225;
          }
          unint64_t v204 = *(void *)(*v175 + 8);
          if ((v155 & (v155 - 1)) != 0)
          {
            if (v204 >= v155) {
              v204 %= v155;
            }
          }
          else
          {
            v204 &= v155 - 1;
          }
          uint64_t v203 = (char *)v353[0] + 8 * v204;
        }
        void *v203 = v175;
        goto LABEL_337;
      }
      BOOL v177 = (v155 & (v155 - 1)) != 0;
      if (v155 < 3) {
        BOOL v177 = 1;
      }
      unint64_t v178 = v177 | (2 * v155);
      unint64_t v179 = vcvtps_u32_f32(v176 / v355);
      if (v178 <= v179) {
        size_t v180 = v179;
      }
      else {
        size_t v180 = v178;
      }
      if (v180 == 1)
      {
        size_t v180 = 2;
      }
      else if ((v180 & (v180 - 1)) != 0)
      {
        size_t v180 = std::__next_prime(v180);
        unint64_t v155 = (unint64_t)v353[1];
      }
      if (v180 <= v155)
      {
        if (v180 >= v155) {
          goto LABEL_315;
        }
        unint64_t v191 = vcvtps_u32_f32((float)*((unint64_t *)&v354 + 1) / v355);
        if (v155 < 3 || (uint8x8_t v192 = (uint8x8_t)vcnt_s8((int8x8_t)v155), v192.i16[0] = vaddlv_u8(v192), v192.u32[0] > 1uLL))
        {
          unint64_t v191 = std::__next_prime(v191);
        }
        else
        {
          uint64_t v193 = 1 << -(char)__clz(v191 - 1);
          if (v191 >= 2) {
            unint64_t v191 = v193;
          }
        }
        if (v180 <= v191) {
          size_t v180 = v191;
        }
        if (v180 >= v155)
        {
          unint64_t v155 = (unint64_t)v353[1];
LABEL_315:
          if ((v155 & (v155 - 1)) != 0)
          {
            if (v154 >= v155) {
              unint64_t v140 = v154 % v155;
            }
            else {
              unint64_t v140 = v154;
            }
          }
          else
          {
            unint64_t v140 = (v155 - 1) & v154;
          }
          goto LABEL_328;
        }
        if (!v180)
        {
          uint64_t v205 = v353[0];
          v353[0] = 0;
          if (v205) {
            operator delete(v205);
          }
          unint64_t v155 = 0;
          v353[1] = 0;
          goto LABEL_315;
        }
      }
      if (!(v180 >> 61))
      {
        uint64_t v181 = operator new(8 * v180);
        unint64_t v182 = v353[0];
        v353[0] = v181;
        if (v182) {
          operator delete(v182);
        }
        uint64_t v183 = 0;
        v353[1] = (void *)v180;
        do
          *((void *)v353[0] + v183++) = 0;
        while (v180 != v183);
        id v184 = (void **)v354;
        if (!(void)v354) {
          goto LABEL_314;
        }
        size_t v185 = *(void *)(v354 + 8);
        size_t v186 = v180 - 1;
        if ((v180 & (v180 - 1)) == 0)
        {
          size_t v187 = v185 & v186;
          *((void *)v353[0] + v187) = &v354;
          for (uint64_t j = *v184; *v184; uint64_t j = *v184)
          {
            size_t v189 = j[1] & v186;
            if (v189 == v187)
            {
              id v184 = (void **)j;
            }
            else if (*((void *)v353[0] + v189))
            {
              void *v184 = (void *)*j;
              uint64_t v190 = 8 * v189;
              *uint64_t j = **(void **)((char *)v353[0] + v190);
              **(void **)((char *)v353[0] + v190) = j;
            }
            else
            {
              *((void *)v353[0] + v189) = v184;
              id v184 = (void **)j;
              size_t v187 = v189;
            }
          }
LABEL_314:
          unint64_t v155 = v180;
          goto LABEL_315;
        }
        if (v185 >= v180) {
          v185 %= v180;
        }
        *((void *)v353[0] + v185) = &v354;
        uint64_t v199 = *v184;
        if (!*v184) {
          goto LABEL_314;
        }
        while (1)
        {
          size_t v201 = v199[1];
          if (v201 >= v180) {
            v201 %= v180;
          }
          if (v201 != v185)
          {
            if (!*((void *)v353[0] + v201))
            {
              *((void *)v353[0] + v201) = v184;
              goto LABEL_319;
            }
            void *v184 = (void *)*v199;
            uint64_t v200 = 8 * v201;
            *uint64_t v199 = **(void **)((char *)v353[0] + v200);
            **(void **)((char *)v353[0] + v200) = v199;
            uint64_t v199 = v184;
          }
          size_t v201 = v185;
LABEL_319:
          id v184 = (void **)v199;
          uint64_t v199 = (void *)*v199;
          size_t v185 = v201;
          if (!v199) {
            goto LABEL_314;
          }
        }
      }
LABEL_534:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (v141 < v334)
    {
      *(void *)uint64_t v141 = v146;
      unint64_t v140 = (unint64_t)(v141 + 8);
      goto LABEL_225;
    }
    uint64_t v157 = v139;
    uint64_t v158 = v141 - v139;
    uint64_t v159 = v158 >> 3;
    unint64_t v160 = (v158 >> 3) + 1;
    uint64_t v339 = v157;
    if (v160 >> 61) {
      abort();
    }
    unint64_t v161 = v334 - v157;
    unint64_t v162 = (v334 - v157) >> 2;
    if (v162 > v160) {
      unint64_t v160 = v162;
    }
    if (v161 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v163 = v160;
    }
    if (v163)
    {
      if (v163 >> 61) {
        goto LABEL_534;
      }
      uint64_t v164 = operator new(8 * v163);
    }
    else
    {
      uint64_t v164 = 0;
    }
    id v165 = &v164[8 * v159];
    *id v165 = v146;
    id v166 = v165 + 1;
    uint64_t v167 = v339;
    if (v141 != v339)
    {
      unint64_t v168 = v141 - 8 - v339;
      if (v168 >= 0x168)
      {
        if (&v164[v158 - 8 - (v168 & 0xFFFFFFFFFFFFFFF8)] <= &v164[v158 - 8]
          && &v141[-(v168 & 0xFFFFFFFFFFFFFFF8) - 8] <= v141 - 8
          && (unint64_t)(v141 - &v164[v158]) >= 0x20)
        {
          uint64_t v194 = (v168 >> 3) + 1;
          uint64_t v169 = &v141[-8 * (v194 & 0x3FFFFFFFFFFFFFFCLL)];
          unint64_t v195 = &v164[8 * v159 - 16];
          uint64_t v196 = v141 - 16;
          uint64_t v197 = v194 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v167 = v339;
          do
          {
            long long v198 = *(_OWORD *)v196;
            *(v195 - 1) = *((_OWORD *)v196 - 1);
            *unint64_t v195 = v198;
            v195 -= 2;
            v196 -= 32;
            v197 -= 4;
          }
          while (v197);
          v165 -= v194 & 0x3FFFFFFFFFFFFFFCLL;
          if (v194 == (v194 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_254;
          }
        }
        else
        {
          uint64_t v169 = v141;
          uint64_t v167 = v339;
        }
      }
      else
      {
        uint64_t v169 = v141;
        uint64_t v167 = v339;
      }
      do
      {
        uint64_t v170 = *((void *)v169 - 1);
        v169 -= 8;
        *--id v165 = v170;
      }
      while (v169 != v167);
    }
LABEL_254:
    uint64_t v334 = &v164[8 * v163];
    if (v167) {
      operator delete(v167);
    }
    unint64_t v140 = (unint64_t)v166;
    id v139 = (char *)v165;
LABEL_225:
    operator delete(v145);
    uint64_t v138 = (void *)*v138;
  }
  while (v138);
  id v127 = (__guard *)a1;
  uint64_t v340 = v139;
  if (!v346) {
    goto LABEL_353;
  }
LABEL_352:
  if (*((void *)&v354 + 1) <= 1uLL)
  {
LABEL_353:
    uint64_t v207 = 0;
    v362[0] = 0;
    char v373 = 0;
    goto LABEL_453;
  }
  unint64_t v329 = v140;
  if (*((void *)&v354 + 1) >> 59) {
LABEL_538:
  }
    abort();
  uint64_t v208 = 32 * *((void *)&v354 + 1);
  long long v209 = (char *)operator new(32 * *((void *)&v354 + 1));
  id v210 = &v209[v208];
  int64x2_t v211 = vdupq_n_s64((unint64_t)v209);
  float32x2_t v212 = (float32x2_t)0x80000000800000;
  uint64_t v213 = (void *)v354;
  while (2)
  {
    int64x2_t v342 = v211;
    uint8x8_t v216 = (uint64_t *)v213[2];
    int8x16_t v217 = *(int8x16_t *)((char *)v216 + 36);
    float32x2_t v218 = *(float32x2_t *)((char *)v216 + 52);
    id v219 = v216 + 2;
    uint64_t v220 = *v216;
    if (v209 >= v210)
    {
      uint64_t v222 = (char *)v211.i64[1];
      unint64_t v223 = (char *)v211.i64[0];
      uint64_t v224 = (v211.i64[1] - v211.i64[0]) >> 5;
      unint64_t v225 = v224 + 1;
      if ((unint64_t)(v224 + 1) >> 59) {
        goto LABEL_538;
      }
      int8x16_t v335 = v217;
      if ((uint64_t)&v210[-v211.i64[0]] >> 4 > v225) {
        unint64_t v225 = (uint64_t)&v210[-v211.i64[0]] >> 4;
      }
      if ((unint64_t)&v210[-v211.i64[0]] >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v225 = 0x7FFFFFFFFFFFFFFLL;
      }
      if (v225 >> 59) {
        goto LABEL_534;
      }
      uint64_t v226 = 32 * v225;
      uint64_t v227 = (char *)operator new(32 * v225);
      double v228 = v227;
      double v229 = &v227[32 * v224];
      *(_OWORD *)double v229 = *v219;
      *((void *)v229 + 2) = *(void *)(v220 + 96);
      uint64_t v230 = *(void *)(v220 + 104);
      *((void *)v229 + 3) = v230;
      if (v230) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v230 + 8), 1uLL, memory_order_relaxed);
      }
      long long v209 = v229 + 32;
      uint64_t v231 = v342.i64[1];
      unint64_t v11 = a4;
      id v139 = v340;
      if (v342.i64[1] == v342.i64[0])
      {
        v342.i64[0] = (uint64_t)v229;
        id v210 = &v227[v226];
        if (!v222) {
          goto LABEL_378;
        }
      }
      else
      {
        do
        {
          uint64_t v232 = v229 - 32;
          *((_OWORD *)v229 - 2) = *(_OWORD *)(v231 - 32);
          *((_OWORD *)v229 - 1) = *(_OWORD *)(v231 - 16);
          *(void *)(v231 - 16) = 0;
          *(void *)(v231 - 8) = 0;
          v231 -= 32;
          v229 -= 32;
        }
        while (v231 != v342.i64[0]);
        v342.i64[0] = (uint64_t)v232;
        do
        {
          int32x4_t v233 = (std::__shared_weak_count *)*((void *)v222 - 1);
          if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
          v222 -= 32;
        }
        while (v222 != v223);
        uint64_t v222 = v223;
        id v210 = &v228[v226];
        if (!v223) {
          goto LABEL_378;
        }
      }
      operator delete(v222);
LABEL_378:
      int8x16_t v217 = v335;
      goto LABEL_357;
    }
    *(_OWORD *)long long v209 = *v219;
    *((void *)v209 + 2) = *(void *)(v220 + 96);
    uint64_t v221 = *(void *)(v220 + 104);
    *((void *)v209 + 3) = v221;
    if (v221) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v221 + 8), 1uLL, memory_order_relaxed);
    }
    v209 += 32;
    id v139 = v340;
LABEL_357:
    float32x4_t v214 = (float32x4_t)v217;
    v214.i32[3] = v336.i32[3];
    float32x4_t v215 = (float32x4_t)v336;
    v215.i32[3] = v217.i32[3];
    int8x16_t v336 = vbslq_s8((int8x16_t)vcgtq_f32(v215, v214), v217, v336);
    float32x2_t v212 = vmaxnm_f32(v212, v218);
    v211.i64[0] = v342.i64[0];
    v211.i64[1] = (uint64_t)v209;
    uint64_t v213 = (void *)*v213;
    if (v213) {
      continue;
    }
    break;
  }
  uint64_t v234 = *(unsigned char **)(v354 + 16);
  LOBYTE(v374) = v234[61];
  *((void *)&v374 + 1) = 0;
  *(void *)long long v375 = v356;
  *(int8x16_t *)&v375[8] = v336;
  *(float32x2_t *)&v375[24] = v212;
  uint64_t v376 = *(void *)(*(void *)v234 + 56);
  v377 = v346;
  uint64_t v378 = v347;
  if (v347) {
    atomic_fetch_add_explicit(&v347->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v379 = v348;
  id v127 = (__guard *)a1;
  if (v349) {
    atomic_fetch_add_explicit(v349 + 1, 1uLL, memory_order_relaxed);
  }
  if (*((void *)&v350 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v350 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (v352) {
    atomic_fetch_add_explicit(v352 + 1, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v362 = v374;
  *(_OWORD *)&v362[16] = *(_OWORD *)v375;
  *(_OWORD *)&v362[32] = *(_OWORD *)&v375[16];
  uint64_t v363 = v376;
  uint64_t v364 = (void **)v346;
  v377 = 0;
  uint64_t v378 = 0;
  v365 = v347;
  v366 = v348;
  uint64_t v379 = 0;
  uint64_t v380 = 0;
  v367 = v349;
  long long v368 = v350;
  uint64_t v381 = 0;
  uint64_t v382 = 0;
  uint64_t v369 = v351;
  uint64_t v383 = 0;
  uint64_t v384 = 0;
  int64x2_t v371 = v211;
  unint64_t v370 = v352;
  uint64_t v372 = v210;
  uint64_t v386 = 0;
  uint64_t v385 = 0;
  uint64_t v387 = 0;
  char v373 = 1;
  md::MeshBatcher::BuildContext::~BuildContext((md::MeshBatcher::BuildContext *)&v374);
  if (v373)
  {
    if (!v364 || v371.i64[1] - v371.i64[0] < 0x40uLL)
    {
      uint64_t v207 = 0;
      unint64_t v140 = v329;
      md::MeshBatcher::BuildContext::~BuildContext((md::MeshBatcher::BuildContext *)v362);
      goto LABEL_453;
    }
    uint64_t v235 = *(void *)&v362[8];
    uint64_t v236 = *(void *)&v362[16];
    uint64_t v237 = *(void *)&v362[16] - *(void *)&v362[8];
    uint64_t v238 = operator new(0xF8uLL);
    v238[1] = 0;
    v238[2] = 0;
    void *v238 = &unk_1EF589D68;
    uint64_t v239 = 0;
    uint64_t v333 = ggl::BufferData::BufferData((uint64_t)(v238 + 3), 2, 1, 0, 1, v237);
    v238[3] = &unk_1EF561BA0;
    v238[4] = 2;
    v238[28] = &unk_1EF561BC0;
    v238[29] = "Mesh Batch Index Data";
    *((_DWORD *)v238 + 60) = 0;
    unint64_t v341 = (void **)v238;
    uint64_t v240 = a2;
    if (2 * v236 != 2 * v235)
    {
      if (!a2 || *((unsigned char *)v238 + 41) == 2)
      {
        uint64_t v239 = v238[12] + 2 * v235;
      }
      else
      {
        uint64_t v239 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v333, 2 * v235, 2 * v236, 1, 1);
        uint64_t v240 = a2;
      }
    }
    uint64_t v242 = (uint64_t *)v371.i64[1];
    uint64_t v241 = (uint64_t *)v371.i64[0];
    if (v371.i64[0] != v371.i64[1])
    {
      uint64_t v243 = 0;
      do
      {
        uint64_t v244 = v241[1];
        uint64_t v245 = v241[2];
        uint64_t v246 = *v241;
        uint64_t v247 = *(void *)(v245 + 8);
        if ((*(unsigned char *)(v245 + 16) & 2) == 0
          && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
        {
          *(void *)&long long v374 = v388;
          v389[0] = (uint64_t *)&v374;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v389, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
          uint64_t v240 = a2;
        }
        uint64_t v248 = v247 * v246;
        uint64_t v249 = v247 * v244;
        if (v249 == v247 * v246)
        {
          uint64_t v250 = 0;
        }
        else if (v240 && *(unsigned char *)(v245 + 17) != 2)
        {
          uint64_t v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v240 + 56))(a2, v245, v248, v249, 0, 1);
          uint64_t v240 = a2;
        }
        else
        {
          uint64_t v250 = *(void *)(v245 + 72) + v248;
        }
        uint64_t v252 = *v241;
        uint64_t v251 = v241[1];
        unint64_t v253 = v251 - *v241;
        if (v251 == *v241) {
          goto LABEL_421;
        }
        if (v253 > 0xF && (unint64_t)(2 * v243 + v239 - v250) >= 0x20)
        {
          unint64_t v254 = v253 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v260 = (long long *)(v250 + 16);
          uint64_t v261 = (_OWORD *)(v239 + 16 + 2 * v243);
          unint64_t v262 = v253 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v263 = *v260;
            *(v261 - 1) = *(v260 - 1);
            *uint64_t v261 = v263;
            v260 += 2;
            v261 += 2;
            v262 -= 16;
          }
          while (v262);
          v243 += v254;
          if (v253 == v254) {
            goto LABEL_421;
          }
        }
        else
        {
          unint64_t v254 = 0;
        }
        uint64_t v255 = v254 + v252 - v251;
        uint64_t v256 = (__int16 *)(v250 + 2 * v254);
        uint64_t v257 = v243;
        do
        {
          __int16 v258 = *v256++;
          uint64_t v243 = v257 + 1;
          *(_WORD *)(v239 + 2 * v257++) = v258;
        }
        while (!__CFADD__(v255++, 1));
LABEL_421:
        if (v250 && v249 != v248 && v240 && *(unsigned char *)(v245 + 17) != 2)
        {
          (*(void (**)(uint64_t))(*(void *)v240 + 64))(a2);
          uint64_t v240 = a2;
        }
        v241 += 4;
      }
      while (v241 != v242);
    }
    uint64_t v6 = v364;
    uint64x2_t v8 = v365;
    if (v365) {
      atomic_fetch_add_explicit(&v365->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (uint64_t)operator new(0xA8uLL);
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)uint64_t v10 = &unk_1EF588F68;
    uint64_t v9 = v10 + 24;
    uint64_t v264 = v363;
    *(void *)(v10 + 56) = 0;
    *(void *)(v10 + 64) = 0;
    *(_DWORD *)(v10 + 72) = 0;
    *(void *)(v10 + 24) = &unk_1EF5606B0;
    *(void *)(v10 + 32) = "Batched Mesh";
    *(void *)(v10 + 40) = &unk_1EF5606D0;
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 80) = v264;
    *(void *)(v10 + 88) = 0;
    *(void *)(v10 + 96) = 0;
    *(void *)(v10 + 104) = 0;
    unint64_t p_shared_weak_owners = (unint64_t)&qword_1EB32C000;
    {
LABEL_433:
      uint64_t v265 = *(void *)(p_shared_weak_owners + 2296);
      *(void *)(v10 + 112) = v265;
      unint64_t v266 = (void ***)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v265 + 16))(v265, 16, 8);
      *(void *)(v10 + 88) = v266;
      *(void *)(v10 + 96) = v266;
      *(void *)(v10 + 104) = v266 + 2;
      if (v266)
      {
        *unint64_t v266 = v6;
        v266[1] = (void **)&v8->__vftable;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      *(void *)(v10 + 96) = v266 + 2;
      *(void *)(v10 + 120) = v333;
      *(void *)(v10 + 128) = v341;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v341 + 1, 1uLL, memory_order_relaxed);
      *(void *)(v10 + 144) = 0;
      if ((atomic_load_explicit((atomic_uchar *volatile)v127, memory_order_acquire) & 1) == 0
      {
        operator new();
      }
      *(void *)(v10 + 152) = *(void *)(p_shared_weak_owners + 2296);
      *(void *)(v10 + 160) = 0;
      *(void *)(v10 + 136) = v10 + 144;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      unint64_t v267 = (std::__shared_weak_count *)*((void *)&v368 + 1);
      long long v374 = v368;
      if (*((void *)&v368 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v368 + 1) + 8), 1uLL, memory_order_relaxed);
        ggl::Mesh::setCustomDeviceData(v9, (uint64_t **)&v374, (uint64_t *)1);
        if (!atomic_fetch_add(&v267->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
        }
      }
      else
      {
        ggl::Mesh::setCustomDeviceData(v9, (uint64_t **)&v374, (uint64_t *)1);
      }
      uint64_t v268 = (std::__shared_weak_count *)v367;
      v389[0] = v366;
      v389[1] = v367;
      if (v367)
      {
        atomic_fetch_add_explicit(v367 + 1, 1uLL, memory_order_relaxed);
        ggl::Mesh::setCustomDeviceData(v9, v389, 0);
        if (!atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
      }
      else
      {
        ggl::Mesh::setCustomDeviceData(v9, v389, 0);
      }
      uint64_t v269 = (std::__shared_weak_count *)v370;
      v388[0] = v369;
      v388[1] = v370;
      if (v370)
      {
        atomic_fetch_add_explicit(v370 + 1, 1uLL, memory_order_relaxed);
        ggl::Mesh::setCustomDeviceData(v9, v388, (uint64_t *)2);
        if (!atomic_fetch_add(&v269->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      else
      {
        ggl::Mesh::setCustomDeviceData(v9, v388, (uint64_t *)2);
      }
      operator new();
    }
LABEL_542:
      operator new();
    goto LABEL_433;
  }
  uint64_t v207 = 0;
  unint64_t v140 = v329;
LABEL_453:
  uint64_t v270 = v127;
  __guard v271 = v127[35];
  v270[35] = 0;
  if (v271)
  {
    long long v272 = *(std::__shared_weak_count **)(v271 + 72);
    if (v272 && !atomic_fetch_add(&v272->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
    unsigned int v273 = *(std::__shared_weak_count **)(v271 + 8);
    if (v273 && !atomic_fetch_add(&v273->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
    MEMORY[0x1A6239270](v271, 0x1020C408635837CLL);
    uint64_t v207 = *(void *)(a1 + 280);
  }
  if (v207)
  {
    *(void *)&long long v374 = v207;
    unsigned int v274 = (char *)v360[1];
    if (v360[1] < v361)
    {
      std::__construct_at[abi:nn180100]<md::MeshRenderable,std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::Mesh *,gm::Box<float,3> &,md::MeshRenderable*>((uint64_t)v360[1], *(void *)a3, *(std::__shared_weak_count **)(a3 + 8), (uint64_t *)&v374, &v344);
      v360[1] = v274 + 224;
      goto LABEL_464;
    }
    uint64_t v275 = 0x6DB6DB6DB6DB6DB7 * (((char *)v360[1] - (char *)v360[0]) >> 5);
    if ((unint64_t)(v275 + 1) > 0x124924924924924) {
      abort();
    }
    unint64_t v276 = 0xDB6DB6DB6DB6DB6ELL * ((v361 - (char *)v360[0]) >> 5);
    if (v276 <= v275 + 1) {
      unint64_t v276 = v275 + 1;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v361 - (char *)v360[0]) >> 5)) >= 0x92492492492492) {
      unint64_t v277 = 0x124924924924924;
    }
    else {
      unint64_t v277 = v276;
    }
    *(void *)&v362[32] = &v361;
    if (v277)
    {
      if (v277 > 0x124924924924924) {
        goto LABEL_534;
      }
      uint64_t v278 = (char *)operator new(224 * v277);
    }
    else
    {
      uint64_t v278 = 0;
    }
    *(void *)uint64_t v362 = v278;
    *(void *)&v362[8] = &v278[224 * v275];
    *(void *)&v362[16] = *(void *)&v362[8];
    *(void *)&v362[24] = &v278[224 * v277];
    std::__construct_at[abi:nn180100]<md::MeshRenderable,std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::Mesh *,gm::Box<float,3> &,md::MeshRenderable*>(*(uint64_t *)&v362[8], *(void *)a3, *(std::__shared_weak_count **)(a3 + 8), (uint64_t *)&v374, &v344);
    uint64_t v279 = *(void *)&v362[8];
    uint64_t v280 = (void *)(*(void *)&v362[16] + 224);
    uint64_t v281 = (char *)v360[0];
    uint64_t v282 = (char *)v360[1];
    if (v360[1] == v360[0])
    {
      v360[0] = *(void **)&v362[8];
      v360[1] = (void *)(*(void *)&v362[16] + 224);
      long long v361 = *(char **)&v362[24];
      if (v282) {
        goto LABEL_492;
      }
    }
    else
    {
      uint64_t v283 = 0;
      do
      {
        uint64_t v285 = v279 + v283;
        *(void *)(v285 - 224) = &unk_1EF534030;
        unint64_t v286 = &v282[v283];
        long long v287 = *(_OWORD *)&v282[v283 - 216];
        *(void *)(v285 - 200) = *(void *)&v282[v283 - 200];
        *(_OWORD *)(v285 - 216) = v287;
        *(void *)(v285 - 192) = *(void *)&v282[v283 - 192];
        uint64_t v288 = *(void *)&v282[v283 - 184];
        *(void *)(v285 - 184) = v288;
        if (v288) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v288 + 8), 1uLL, memory_order_relaxed);
        }
        long long v289 = *((_OWORD *)v286 - 11);
        long long v290 = *((_OWORD *)v286 - 9);
        *(_OWORD *)(v285 - 160) = *((_OWORD *)v286 - 10);
        *(_OWORD *)(v285 - 144) = v290;
        *(_OWORD *)(v285 - 176) = v289;
        long long v291 = *((_OWORD *)v286 - 8);
        long long v292 = *((_OWORD *)v286 - 7);
        long long v293 = *((_OWORD *)v286 - 6);
        *(void *)(v285 - 82) = *(void *)(v286 - 82);
        *(_OWORD *)(v285 - 112) = v292;
        *(_OWORD *)(v285 - 96) = v293;
        *(_OWORD *)(v285 - 128) = v291;
        *(unsigned char *)(v285 - 72) = 0;
        *(unsigned char *)(v285 - 48) = 0;
        if (*(v286 - 48))
        {
          *(void *)(v285 - 72) = *(void *)&v282[v283 - 72];
          uint64_t v294 = *(void *)&v282[v283 - 64];
          *(void *)(v279 + v283 - 64) = v294;
          if (v294) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v294 + 8), 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)(v279 + v283 - 56) = v282[v283 - 56];
          *(unsigned char *)(v285 - 48) = 1;
        }
        uint64_t v295 = v279 + v283;
        uint64_t v296 = &v282[v283];
        *(void *)(v295 - 40) = *(void *)&v282[v283 - 40];
        *(_WORD *)(v295 - 32) = 0;
        if (v282[v283 - 31])
        {
          *(unsigned char *)(v295 - 32) = *(v296 - 32);
          *(unsigned char *)(v295 - 31) = 1;
        }
        long long v284 = *(_OWORD *)(v296 - 28);
        *(_OWORD *)(v295 - 16) = *((_OWORD *)v296 - 1);
        *(_OWORD *)(v295 - 28) = v284;
        v283 -= 224;
      }
      while (&v282[v283] != v281);
      uint64_t v297 = (void *)(v279 + v283);
      uint64_t v282 = (char *)v360[0];
      uint64_t v298 = (char *)v360[1];
      v360[0] = v297;
      v360[1] = v280;
      long long v361 = *(char **)&v362[24];
      if (v298 != v282)
      {
        uint64_t v299 = v298 - 224;
        unint64_t v300 = v298 - 224;
        uint64_t v301 = (void (***)(char *))(v298 - 224);
        do
        {
          uint64_t v302 = *v301;
          v301 -= 28;
          (*v302)(v300);
          v299 -= 224;
          BOOL v111 = v300 == v282;
          unint64_t v300 = (char *)v301;
        }
        while (!v111);
      }
      unint64_t v11 = a4;
      if (v282) {
LABEL_492:
      }
        operator delete(v282);
    }
    v360[1] = v280;
    if (v139 != (char *)v140)
    {
LABEL_494:
      long long v303 = (char *)v360[1];
      uint64_t v304 = v139;
      do
      {
        unint64_t v305 = *(uint64_t **)(v11 + 8 * *(void *)v304);
        *(void *)&long long v374 = v305;
        LOBYTE(v389[0]) = 0;
        if (v303 >= v361)
        {
          long long v303 = std::vector<md::MeshRenderable>::__emplace_back_slow_path<std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::components::MeshInstance *&>(v360, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8), (char *)v389, (uint64_t **)&v374);
        }
        else
        {
          uint64_t v306 = *(void *)(a3 + 8);
          *(void *)uint64_t v362 = *(void *)a3;
          *(void *)&v362[8] = v306;
          if (v306) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v306 + 8), 1uLL, memory_order_relaxed);
          }
          md::MeshRenderable::MeshRenderable((uint64_t)v303, v362, 0, v305);
          uint64_t v307 = *(std::__shared_weak_count **)&v362[8];
          if (*(void *)&v362[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v362[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
            std::__shared_weak_count::__release_weak(v307);
          }
          v303 += 224;
        }
        v360[1] = v303;
        v304 += 8;
      }
      while (v304 != (char *)v140);
    }
  }
  else
  {
LABEL_464:
    if (v139 != (char *)v140) {
      goto LABEL_494;
    }
  }
  md::MeshBatcher::~MeshBatcher((md::MeshBatcher *)&v346);
  id v127 = (__guard *)a1;
  if (v139) {
    operator delete(v139);
  }
LABEL_506:
  long long v308 = *(_OWORD *)v360;
  uint64_t v309 = v361;
  v360[1] = 0;
  long long v361 = 0;
  v360[0] = 0;
  if (*((unsigned char *)v127 + 312))
  {
    uint64_t v310 = v127 + 36;
    uint64_t v311 = v127;
    uint64_t v312 = (char *)v127[36];
    if (v312)
    {
      long long v343 = v308;
      int8x16_t v313 = (char *)v311[37];
      int16x8_t v314 = v312;
      if (v313 != v312)
      {
        int32x4_t v315 = v313 - 224;
        uint64_t v316 = v313 - 224;
        uint64_t v317 = v313 - 224;
        do
        {
          uint64_t v318 = *(void (***)(char *))v317;
          v317 -= 224;
          (*v318)(v316);
          v315 -= 224;
          BOOL v111 = v316 == v312;
          uint64_t v316 = v317;
        }
        while (!v111);
        int16x8_t v314 = (void *)*v310;
      }
      uint64_t v311 = (__guard *)a1;
      *(void *)(a1 + 296) = v312;
      operator delete(v314);
      *uint64_t v310 = 0;
      v310[1] = 0;
      v310[2] = 0;
      long long v308 = v343;
    }
    *((_OWORD *)v311 + 18) = v308;
    v311[38] = (__guard)v309;
    id v127 = v311;
    if (!*((unsigned char *)v311 + 352)) {
      goto LABEL_516;
    }
  }
  else
  {
    *((_OWORD *)v127 + 18) = v308;
    v127[38] = (__guard)v309;
    *((unsigned char *)v127 + 312) = 1;
    if (!*((unsigned char *)v127 + 352)) {
      goto LABEL_516;
    }
  }
  *((unsigned char *)v127 + 352) = 0;
LABEL_516:
  uint64_t v319 = v358[0];
  if (v358[0])
  {
    do
    {
      unint64_t v327 = (void *)*v319;
      uint8x8_t v328 = (void *)v319[3];
      if (v328)
      {
        v319[4] = v328;
        operator delete(v328);
      }
      operator delete(v319);
      uint64_t v319 = v327;
    }
    while (v327);
  }
  int8x16_t v320 = __p[0];
  __p[0] = 0;
  if (v320) {
    operator delete(v320);
  }
  uint64_t v321 = (char *)v360[0];
  if (v360[0])
  {
    uint64_t v322 = v360[0];
    if (v360[1] != v360[0])
    {
      uint64_t v323 = (char *)v360[1] - 224;
      uint64_t v324 = (char *)v360[1] - 224;
      uint64_t v325 = (void (***)(char *))((char *)v360[1] - 224);
      do
      {
        int8x8_t v326 = *v325;
        v325 -= 28;
        (*v326)(v324);
        v323 -= 224;
        BOOL v111 = v324 == v321;
        uint64_t v324 = (char *)v325;
      }
      while (!v111);
      uint64_t v322 = v360[0];
    }
    v360[1] = v321;
    operator delete(v322);
  }
}

void sub_1A1D363F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (__p) {
    operator delete(__p);
  }
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)&a47);
  std::vector<md::MeshRenderable>::~vector[abi:nn180100](&a53);
  _Unwind_Resume(a1);
}

char *std::vector<md::MeshRenderable>::__emplace_back_slow_path<std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::components::MeshInstance *&>(void **a1, uint64_t a2, std::__shared_weak_count *a3, char *a4, uint64_t **a5)
{
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x124924924924924) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v6) {
    unint64_t v6 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)) >= 0x92492492492492) {
    unint64_t v12 = 0x124924924924924;
  }
  else {
    unint64_t v12 = v6;
  }
  if (v12)
  {
    if (v12 > 0x124924924924924) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v13 = (char *)operator new(224 * v12);
  }
  else
  {
    unint64_t v13 = 0;
  }
  unint64_t v14 = &v13[224 * v5];
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::MeshRenderable::MeshRenderable((uint64_t)&v13[224 * v5], &v41, *a4, *a5);
  unint64_t v15 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  unint64_t v16 = &v13[224 * v12];
  unint64_t v17 = v14 + 224;
  uint8x8_t v18 = (char *)*a1;
  unsigned int v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (!v19) {
      return v17;
    }
    goto LABEL_32;
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v22 = &v14[v20];
    *((void *)v22 - 28) = &unk_1EF534030;
    float v23 = &v19[v20];
    long long v24 = *(_OWORD *)&v19[v20 - 216];
    *((void *)v22 - 25) = *(void *)&v19[v20 - 200];
    *(_OWORD *)(v22 - 216) = v24;
    *((void *)v22 - 24) = *(void *)&v19[v20 - 192];
    uint64_t v25 = *(void *)&v19[v20 - 184];
    *((void *)v22 - 23) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    long long v26 = *((_OWORD *)v23 - 11);
    long long v27 = *((_OWORD *)v23 - 9);
    *((_OWORD *)v22 - 10) = *((_OWORD *)v23 - 10);
    *((_OWORD *)v22 - 9) = v27;
    *((_OWORD *)v22 - 11) = v26;
    long long v28 = *((_OWORD *)v23 - 8);
    long long v29 = *((_OWORD *)v23 - 7);
    long long v30 = *((_OWORD *)v23 - 6);
    *(void *)(v22 - 82) = *(void *)(v23 - 82);
    *((_OWORD *)v22 - 7) = v29;
    *((_OWORD *)v22 - 6) = v30;
    *((_OWORD *)v22 - 8) = v28;
    *(v22 - 72) = 0;
    *(v22 - 48) = 0;
    if (*(v23 - 48))
    {
      *((void *)v22 - 9) = *(void *)&v19[v20 - 72];
      uint64_t v31 = *(void *)&v19[v20 - 64];
      *(void *)&v14[v20 - 64] = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      v14[v20 - 56] = v19[v20 - 56];
      *(v22 - 48) = 1;
    }
    size_t v32 = &v14[v20];
    size_t v33 = &v19[v20];
    *((void *)v32 - 5) = *(void *)&v19[v20 - 40];
    *((_WORD *)v32 - 16) = 0;
    if (v19[v20 - 31])
    {
      *(v32 - 32) = *(v33 - 32);
      *(v32 - 31) = 1;
    }
    long long v21 = *(_OWORD *)(v33 - 28);
    *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
    *(_OWORD *)(v32 - 28) = v21;
    v20 -= 224;
  }
  while (&v19[v20] != v18);
  unsigned int v19 = (char *)*a1;
  size_t v34 = (char *)a1[1];
  *a1 = &v14[v20];
  a1[1] = v17;
  a1[2] = v16;
  if (v34 != v19)
  {
    id v35 = v34 - 224;
    size_t v36 = v34 - 224;
    uint64_t v37 = (void (***)(char *))(v34 - 224);
    do
    {
      unint64_t v38 = *v37;
      v37 -= 28;
      (*v38)(v36);
      v35 -= 224;
      BOOL v39 = v36 == v19;
      size_t v36 = (char *)v37;
    }
    while (!v39);
  }
  if (v19) {
LABEL_32:
  }
    operator delete(v19);
  return v17;
}

uint64_t md::MeshRenderable::MeshRenderable(uint64_t a1, void *a2, char a3, uint64_t *a4)
{
  *(void *)a1 = &unk_1EF534030;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 76) = xmmword_1A28FC710;
  *(void *)(a1 + 92) = 0x80000000800000;
  *(unsigned char *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 65537;
  *(_WORD *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
  *(void *)(a1 + 216) = 0;
  if (a4)
  {
    uint64_t v7 = *a4;
    *(void *)(a1 + 216) = *a4;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 16);
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a4 + 32);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a4 + 9);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 10);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a4 + 11);
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a4 + 12);
    *(_DWORD *)(a1 + 92) = *((_DWORD *)a4 + 13);
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 14);
    long long v30 = 0u;
    memset(v31, 0, sizeof(v31));
    int v29 = 1065353216;
    HIDWORD(v30) = 1065353216;
    v31[3] = 1065353216;
    if (!gm::Matrix<float,3,4>::isWithinEpsilon((float *)a4 + 15, (float *)&v29))
    {
      uint64x2_t v8 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v8 + 8) = 0u;
      *(void *)uint64x2_t v8 = &unk_1EF57F920;
      *(_OWORD *)(v8 + 24) = 0u;
      *((_DWORD *)v8 + 10) = 1;
      v8[44] = 0;
      uint64_t v9 = (char *)operator new(0xE0uLL);
      *(_OWORD *)(v9 + 8) = 0u;
      *(void *)uint64_t v9 = &unk_1EF583F90;
      uint64_t v10 = ggl::BufferData::BufferData((uint64_t)(v9 + 24), qword_1E95521A8, 3, 0, 6, 1);
      *((void *)v9 + 3) = &unk_1EF55B9B0;
      *((void *)v8 + 3) = v10;
      unint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 4);
      *((void *)v8 + 4) = v9;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      unint64_t v12 = *(std::__shared_weak_count **)(a1 + 40);
      *(void *)(a1 + 32) = v8 + 24;
      *(void *)(a1 + 40) = v8;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      unint64_t v13 = *(unsigned char **)(a1 + 32);
      uint64_t v14 = *(void *)v13;
      unint64_t v15 = *(void *)(*(void *)v13 + 48) - *(void *)(*(void *)v13 + 40);
      unint64_t v16 = *(void *)(*(void *)v13 + 8);
      uint64_t v17 = *(void *)(*(void *)v13 + 72);
      int v18 = *((_DWORD *)a4 + 17);
      int v19 = *((_DWORD *)a4 + 20);
      uint64_t v20 = a4[9];
      int v21 = *((_DWORD *)a4 + 23);
      uint64_t v22 = *(uint64_t *)((char *)a4 + 84);
      int v23 = *((_DWORD *)a4 + 26);
      uint64_t v24 = a4[12];
      *(void *)uint64_t v17 = *(uint64_t *)((char *)a4 + 60);
      *(_DWORD *)(v17 + 8) = v18;
      *(_DWORD *)(v17 + 12) = 0;
      *(void *)(v17 + 16) = v20;
      *(_DWORD *)(v17 + 24) = v19;
      *(_DWORD *)(v17 + 28) = 0;
      *(void *)(v17 + 32) = v22;
      *(_DWORD *)(v17 + 40) = v21;
      *(_DWORD *)(v17 + 44) = 0;
      unint64_t v25 = v15 % v16;
      *(void *)(v17 + 48) = v24;
      *(_DWORD *)(v17 + 56) = v23;
      *(_DWORD *)(v17 + 60) = 1065353216;
      v13[20] = 0;
      unint64_t v26 = v15 - v25;
      if (v15 != v25)
      {
        if (*(void *)(v14 + 64) > v26) {
          unint64_t v26 = *(void *)(v14 + 64);
        }
        *(void *)(v14 + 56) = 0;
        *(void *)(v14 + 64) = v26;
      }
    }
    long long v27 = *(_OWORD *)(a4 + 1);
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 24);
    *(_OWORD *)(a1 + 48) = v27;
  }
  return a1;
}

BOOL gm::Matrix<float,3,4>::isWithinEpsilon(float *a1, float *a2)
{
  return vabds_f32(*a1, *a2) < 0.0001
      && vabds_f32(a1[1], a2[1]) < 0.0001
      && vabds_f32(a1[2], a2[2]) < 0.0001
      && vabds_f32(a1[3], a2[3]) < 0.0001
      && vabds_f32(a1[4], a2[4]) < 0.0001
      && vabds_f32(a1[5], a2[5]) < 0.0001
      && vabds_f32(a1[6], a2[6]) < 0.0001
      && vabds_f32(a1[7], a2[7]) < 0.0001
      && vabds_f32(a1[8], a2[8]) < 0.0001
      && vabds_f32(a1[9], a2[9]) < 0.0001
      && vabds_f32(a1[10], a2[10]) < 0.0001
      && vabds_f32(a1[11], a2[11]) < 0.0001;
}

void md::CartographicMapEngineConfiguration::createRenderLayers(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64x2_t v8 = operator new(0x1B0uLL);
  a4[2] = v8 + 27;
  *uint64x2_t v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[16] = 0u;
  v8[17] = 0u;
  v8[18] = 0u;
  v8[19] = 0u;
  v8[20] = 0u;
  v8[21] = 0u;
  v8[22] = 0u;
  v8[23] = 0u;
  v8[24] = 0u;
  v8[25] = 0u;
  v8[26] = 0u;
  *a4 = v8;
  a4[1] = v8 + 27;
  unint64_t v47 = *(md::CartographicRenderer **)(a3 + 856);
  uint64_t v9 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v10 = v9[2];
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    uint64_t v12 = 0x3F812BA5755E8568;
    if (*(void *)&v10 <= 0x3F812BA5755E8568uLL) {
      uint64_t v12 = 0x3F812BA5755E8568uLL % *(void *)&v10;
    }
  }
  else
  {
    uint64_t v12 = (*(void *)&v10 - 1) & 0x3F812BA5755E8568;
  }
  int8x8_t v13 = v9[1];
  uint64_t v14 = *(void **)(*(void *)&v13 + 8 * v12);
  if (v14)
  {
    unint64_t v15 = (void *)*v14;
    if (v15)
    {
      if (v11.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v17 = v15[1];
          if (v17 == 0x3F812BA5755E8568)
          {
            if (v15[2] == 0x3F812BA5755E8568) {
              goto LABEL_86;
            }
          }
          else if ((v17 & (*(void *)&v10 - 1)) != v12)
          {
            goto LABEL_20;
          }
          unint64_t v15 = (void *)*v15;
          if (!v15) {
            goto LABEL_20;
          }
        }
      }
      do
      {
        unint64_t v16 = v15[1];
        if (v16 == 0x3F812BA5755E8568)
        {
          if (v15[2] == 0x3F812BA5755E8568)
          {
LABEL_86:
            uint64_t v18 = v15[5];
LABEL_21:
            if (v11.u32[0] > 1uLL)
            {
              uint64_t v19 = 0x652FEFC5C602CC21;
              if (*(void *)&v10 <= 0x652FEFC5C602CC21uLL) {
                uint64_t v19 = 0x652FEFC5C602CC21uLL % *(void *)&v10;
              }
            }
            else
            {
              uint64_t v19 = (*(void *)&v10 - 1) & 0x652FEFC5C602CC21;
            }
            uint64_t v20 = *(void **)(*(void *)&v13 + 8 * v19);
            if (v20)
            {
              int v21 = (void *)*v20;
              if (v21)
              {
                if (v11.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v23 = v21[1];
                    if (v23 == 0x652FEFC5C602CC21)
                    {
                      if (v21[2] == 0x652FEFC5C602CC21) {
                        goto LABEL_40;
                      }
                    }
                    else if ((v23 & (*(void *)&v10 - 1)) != v19)
                    {
                      goto LABEL_40;
                    }
                    int v21 = (void *)*v21;
                    if (!v21) {
                      goto LABEL_40;
                    }
                  }
                }
                do
                {
                  unint64_t v22 = v21[1];
                  if (v22 == 0x652FEFC5C602CC21)
                  {
                    if (v21[2] == 0x652FEFC5C602CC21) {
                      break;
                    }
                  }
                  else
                  {
                    if (v22 >= *(void *)&v10) {
                      v22 %= *(void *)&v10;
                    }
                    if (v22 != v19) {
                      break;
                    }
                  }
                  int v21 = (void *)*v21;
                }
                while (v21);
              }
            }
LABEL_40:
            if (v11.u32[0] > 1uLL)
            {
              uint64_t v24 = 0x79FE0BD9535D5C4DLL;
              if (*(void *)&v10 <= 0x79FE0BD9535D5C4DuLL) {
                uint64_t v24 = 0x79FE0BD9535D5C4DuLL % *(void *)&v10;
              }
            }
            else
            {
              uint64_t v24 = (*(void *)&v10 - 1) & 0x79FE0BD9535D5C4DLL;
            }
            unint64_t v25 = *(void **)(*(void *)&v13 + 8 * v24);
            if (v25)
            {
              unint64_t v26 = (void *)*v25;
              if (v26)
              {
                if (v11.u32[0] < 2uLL)
                {
                  uint64_t v27 = *(void *)&v10 - 1;
                  while (1)
                  {
                    uint64_t v29 = v26[1];
                    if (v29 == 0x79FE0BD9535D5C4DLL)
                    {
                      if (v26[2] == 0x79FE0BD9535D5C4DLL) {
                        goto LABEL_59;
                      }
                    }
                    else if ((v29 & v27) != v24)
                    {
                      goto LABEL_59;
                    }
                    unint64_t v26 = (void *)*v26;
                    if (!v26) {
                      goto LABEL_59;
                    }
                  }
                }
                do
                {
                  unint64_t v28 = v26[1];
                  if (v28 == 0x79FE0BD9535D5C4DLL)
                  {
                    if (v26[2] == 0x79FE0BD9535D5C4DLL) {
                      break;
                    }
                  }
                  else
                  {
                    if (v28 >= *(void *)&v10) {
                      v28 %= *(void *)&v10;
                    }
                    if (v28 != v24) {
                      break;
                    }
                  }
                  unint64_t v26 = (void *)*v26;
                }
                while (v26);
              }
            }
LABEL_59:
            id v30 = *(id *)(v18 + 128);
            int8x8_t v31 = v9[2];
            if (v31)
            {
              uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
              v32.i16[0] = vaddlv_u8(v32);
              if (v32.u32[0] > 1uLL)
              {
                uint64_t v33 = 0x20A1ED17D78F322BLL;
                if (*(void *)&v31 <= 0x20A1ED17D78F322BuLL) {
                  uint64_t v33 = 0x20A1ED17D78F322BuLL % *(void *)&v31;
                }
              }
              else
              {
                uint64_t v33 = (*(void *)&v31 - 1) & 0x20A1ED17D78F322BLL;
              }
              size_t v34 = *(void **)(*(void *)&v9[1] + 8 * v33);
              if (v34)
              {
                id v35 = (void *)*v34;
                if (v35)
                {
                  if (v32.u32[0] < 2uLL)
                  {
                    uint64_t v36 = *(void *)&v31 - 1;
                    while (1)
                    {
                      uint64_t v38 = v35[1];
                      if (v38 == 0x20A1ED17D78F322BLL)
                      {
                        if (v35[2] == 0x20A1ED17D78F322BLL) {
                          goto LABEL_89;
                        }
                      }
                      else if ((v38 & v36) != v33)
                      {
                        goto LABEL_79;
                      }
                      id v35 = (void *)*v35;
                      if (!v35) {
                        goto LABEL_79;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v37 = v35[1];
                    if (v37 == 0x20A1ED17D78F322BLL)
                    {
                      if (v35[2] == 0x20A1ED17D78F322BLL)
                      {
LABEL_89:
                        BOOL v39 = (void *)v35[5];
LABEL_80:
                        uint64_t v40 = md::LabelsLogic::labelManagerForWorldType(v39, *(unsigned __int8 *)(a1 + 32))[1];
                        if (v40) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
                        }
                        id v41 = *((id *)v47 + 13);
                        [v41 format];
                        uint64_t v42 = (char *)operator new(0x30uLL);
                        *((void *)v42 + 1) = 0;
                        *((void *)v42 + 2) = 0;
                        *(void *)uint64_t v42 = &unk_1EF5824A8;
                        id v43 = v30;
                        *((void *)v42 + 3) = 0;
                        *((void *)v42 + 4) = 0;
                        *(_DWORD *)(v42 + 39) = 0;
                        int v44 = operator new(0xE8uLL);
                        v44[1] = 0;
                        v44[2] = 0;
                        *int v44 = &unk_1EF587678;
                        uint64_t v45 = ggl::BufferData::BufferData((uint64_t)(v44 + 3), qword_1E955DB80, 2, 1, 6, 1);
                        v44[28] = ggl::Building::Fade::reflection(void)::reflection;
                        v44[3] = &unk_1EF55E8B8;
                        unint64_t v46 = (std::__shared_weak_count *)*((void *)v42 + 4);
                        *((void *)v42 + 3) = v45;
                        *((void *)v42 + 4) = v44;
                        if (v46)
                        {
                          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                            std::__shared_weak_count::__release_weak(v46);
                          }
                        }
                        v42[42] = 0;

                        [*((id *)v47 + 13) format];
                        v43;
                        operator new();
                      }
                    }
                    else
                    {
                      if (v37 >= *(void *)&v31) {
                        v37 %= *(void *)&v31;
                      }
                      if (v37 != v33) {
                        break;
                      }
                    }
                    id v35 = (void *)*v35;
                  }
                  while (v35);
                }
              }
            }
LABEL_79:
            BOOL v39 = 0;
            goto LABEL_80;
          }
        }
        else
        {
          if (v16 >= *(void *)&v10) {
            v16 %= *(void *)&v10;
          }
          if (v16 != v12) {
            break;
          }
        }
        unint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
  }
LABEL_20:
  uint64_t v18 = 0;
  goto LABEL_21;
}

void sub_1A1D43640(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  STACK[0x2E0] = a1;
  unint64_t v31 = *(void *)(v28 + 64);
  if (v31 <= v30) {
    unint64_t v31 = v30;
  }
  *(void *)(v28 + 56) = 0;
  *(void *)(v28 + 64) = v31;
  geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::~MarkedLRUCache(a19);
  v27[19] = a13;
  v27[21] = 3131955885;
  uint8x8_t v32 = (std::__shared_weak_count *)v27[18];
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v33 = v27[16];
  v27[16] = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = v27[15];
  v27[15] = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = v27[14];
  v27[14] = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = v27[13];
  v27[13] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  unint64_t v37 = (std::__shared_weak_count *)v27[12];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  uint64_t v38 = v27[10];
  v27[10] = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  BOOL v39 = (std::__shared_weak_count *)v27[9];
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v40 = (std::__shared_weak_count *)v27[7];
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  id v41 = (std::__shared_weak_count *)v27[5];
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  uint64_t v42 = (std::__shared_weak_count *)v27[3];
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  id v43 = (std::__shared_weak_count *)v27[1];
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }

  MEMORY[0x1A6239270](v27, 0x10F0C40B254EF16);
  int v44 = (md::GridRenderResources *)v29[6];
  v29[6] = 0;
  if (v44)
  {
    md::GridRenderResources::~GridRenderResources(v44);
    MEMORY[0x1A6239270]();
  }
  *uint64_t v29 = a11;
  uint64_t v45 = (void *)v29[1];
  if (v45)
  {
    v29[2] = (uint64_t)v45;
    operator delete(v45);
  }

  MEMORY[0x1A6239270](v29, 0x10A1C40581CDB8FLL);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x300]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x310]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x320]);

  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](a27);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x2E0]);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::CartographicTiledVectorRenderLayer(uint64_t a1, char a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8, uint64_t a9)
{
  id v15 = a7;
  if (a4)
  {
    if (a4 < 0) {
      abort();
    }
    size_t v16 = 2 * a4;
    uint64_t v17 = (char *)operator new(v16);
    uint64_t v18 = &v17[v16];
    memmove(v17, a3, v16);
    *(void *)&long long v19 = v17;
    *((void *)&v19 + 1) = &v17[v16];
  }
  else
  {
    uint64_t v18 = 0;
    long long v19 = 0uLL;
  }
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v21 = *(const void **)a9;
  uint64_t v20 = *(void *)(a9 + 8);
  int64_t v22 = v20 - *(void *)a9;
  if (v20 != *(void *)a9)
  {
    long long v25 = v19;
    if (v22 < 0) {
      abort();
    }
    uint64_t v23 = (char *)operator new(v20 - (void)v21);
    *(void *)(a1 + 8) = v23;
    *(void *)(a1 + 16) = v23;
    uint64_t v24 = &v23[2 * (v22 >> 1)];
    *(void *)(a1 + 24) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 16) = v24;
    long long v19 = v25;
  }
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = a2;
  *(void *)(a1 + 40) = a5;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_1A28FE5D0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v19;
  *(void *)(a1 + 336) = v18;
  *(_DWORD *)(a1 + 344) = 1;
  *(void *)a1 = &unk_1EF54E3D0;
  *(void *)(a1 + 352) = 0;
  operator new();
}

void sub_1A1D46D04(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v3, 0x10A0C40ACD82FEFLL);
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledRenderLayer(v2);

  _Unwind_Resume(a1);
}

uint64_t ggl::Hillshade::Pos2DUVPipelineState::Pos2DUVPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5, char a6)
{
  {
    uint64_t v86 = a4;
    unint64_t v88 = a2;
    uint64_t v89 = a3;
    a2 = v88;
    a3 = v89;
    a4 = v86;
    if (v87)
    {
      {
        if (v87)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::Hillshade::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(void *)algn_1E957F658 = &ggl::Hillshade::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1E957F660 = 0;
          {
            ggl::Hillshade::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1E958B7E0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E958B7E8 = (uint64_t)ggl::Hillshade::HillshadeStyle::reflection(void)::reflection;
          }
          qword_1E957F668 = (uint64_t)&ggl::Hillshade::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1E957F670 = xmmword_1A28FCEF0;
        }
      }
      ggl::Hillshade::Pos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Hillshade::Pos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::HillshadeShader::typedReflection(v87);
      qword_1E958B790 = (uint64_t)&ggl::HillshadeShader::typedReflection(void)::ref;
      {
        ggl::Hillshade::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958B890 = 0;
        qword_1E958B898 = (uint64_t)"";
        dword_1E958B8A0 = 0;
        qword_1E958B8A8 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1E958B8B0 = 2;
      }
      qword_1E958B798 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1E958B7A0 = 1;
      qword_1E958B7A8 = 0;
      unk_1E958B7B0 = 1;
      qword_1E958B7B8 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1E958B7C0 = 0;
      {
        ggl::Hillshade::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958B800 = 0;
        qword_1E958B808 = (uint64_t)"view";
        dword_1E958B810 = 3;
        qword_1E958B818 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantViewBinding(void)::reflection;
        unk_1E958B820 = xmmword_1A28FCEB0;
        qword_1E958B830 = 1;
        unk_1E958B838 = "transform";
        dword_1E958B840 = 3;
        qword_1E958B848 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E958B850 = xmmword_1A28FCF70;
        qword_1E958B860 = 2;
        unk_1E958B868 = "style";
        dword_1E958B870 = 3;
        qword_1E958B878 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantStyleBinding(void)::reflection;
        unk_1E958B880 = 4;
      }
      qword_1E958B7C8 = (uint64_t)&ggl::Hillshade::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1E958B7D0 = 3;
      a4 = v86;
      a2 = v88;
      a3 = v89;
    }
  }
  uint64_t v9 = *a2;
  int8x8_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)VKRouteContext v92 = *(_OWORD *)a3;
  *(_OWORD *)&v92[12] = *(_OWORD *)(a3 + 12);
  long long v11 = *(_OWORD *)(a3 + 28);
  char v12 = *(unsigned char *)(a3 + 44);
  long long v90 = *a4;
  long long v91 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Hillshade::Pos2DUVPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v90;
  *(_OWORD *)(a1 + 272) = v91;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v92;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v92[12];
  *(_OWORD *)(a1 + 92) = v11;
  *(unsigned char *)(a1 + 108) = v12;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = a6;
  int8x16_t v13 = *(int8x16_t *)(a1 + 320);
  int8x16_t v14 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v15 = vmovl_high_s8(v14);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  int8x16_t v18 = v17;
  int16x8_t v19 = vmovl_s8(*(int8x8_t *)v14.i8);
  int32x4_t v20 = vmovl_s16(*(int16x4_t *)v19.i8);
  v17.i64[0] = v20.u32[0];
  v17.i64[1] = v20.u32[1];
  int8x16_t v21 = v17;
  int32x4_t v22 = vmovl_high_s16(v15);
  v17.i64[0] = v22.u32[0];
  v17.i64[1] = v22.u32[1];
  int8x16_t v23 = v17;
  int32x4_t v24 = vmovl_high_s16(v19);
  v17.i64[0] = v24.u32[0];
  v17.i64[1] = v24.u32[1];
  int8x16_t v25 = v17;
  v17.i64[0] = v16.u32[2];
  v17.i64[1] = v16.u32[3];
  int8x16_t v26 = v17;
  v17.i64[0] = v20.u32[2];
  v17.i64[1] = v20.u32[3];
  int8x16_t v27 = v17;
  v17.i64[0] = v22.u32[2];
  v17.i64[1] = v22.u32[3];
  int8x16_t v28 = v17;
  v17.i64[0] = v24.u32[2];
  v17.i64[1] = v24.u32[3];
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v17);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v28);
  int8x16_t v31 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v27);
  int8x16_t v32 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v23);
  *(void *)a1 = &unk_1EF561B30;
  int8x16_t v33 = vceqzq_s8(v13);
  int16x8_t v34 = vmovl_high_s8(v33);
  int32x4_t v35 = vmovl_s16(*(int16x4_t *)v34.i8);
  v17.i64[0] = v35.u32[0];
  v17.i64[1] = v35.u32[1];
  int8x16_t v36 = v17;
  int16x8_t v37 = vmovl_s8(*(int8x8_t *)v33.i8);
  int32x4_t v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v17.i64[0] = v38.u32[0];
  v17.i64[1] = v38.u32[1];
  int8x16_t v39 = v17;
  int32x4_t v40 = vmovl_high_s16(v34);
  v17.i64[0] = v40.u32[0];
  v17.i64[1] = v40.u32[1];
  int8x16_t v41 = v17;
  int32x4_t v42 = vmovl_high_s16(v37);
  v17.i64[0] = v42.u32[0];
  v17.i64[1] = v42.u32[1];
  int8x16_t v43 = v17;
  v17.i64[0] = v35.u32[2];
  v17.i64[1] = v35.u32[3];
  int8x16_t v44 = v17;
  v17.i64[0] = v38.u32[2];
  v17.i64[1] = v38.u32[3];
  int8x16_t v45 = v17;
  v17.i64[0] = v40.u32[2];
  v17.i64[1] = v40.u32[3];
  int8x16_t v46 = v17;
  v17.i64[0] = v42.u32[2];
  v17.i64[1] = v42.u32[3];
  int8x16_t v47 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v46);
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v36), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v18));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v39), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v21));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v41), v32);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v43), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v25));
  int8x16_t v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v44), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v26));
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v45), v31);
  int8x16_t v54 = vorrq_s8(v47, v30);
  int8x16_t v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v17), v29);
  int8x16_t v56 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v57 = vmovl_s8(*(int8x8_t *)v56.i8);
  int32x4_t v58 = vmovl_high_s16(v57);
  v17.i64[0] = v58.i32[2];
  v17.i64[1] = v58.i32[3];
  int8x16_t v59 = v17;
  int16x8_t v60 = vmovl_high_s8(v56);
  int32x4_t v61 = vmovl_high_s16(v60);
  v17.i64[0] = v61.i32[2];
  v17.i64[1] = v61.i32[3];
  int8x16_t v62 = v17;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v57.i8);
  v17.i64[0] = v63.i32[2];
  v17.i64[1] = v63.i32[3];
  int8x16_t v64 = v17;
  int32x4_t v65 = vmovl_s16(*(int16x4_t *)v60.i8);
  v17.i64[0] = v65.i32[2];
  v17.i64[1] = v65.i32[3];
  int8x16_t v66 = v17;
  v17.i64[0] = v58.i32[0];
  v17.i64[1] = v58.i32[1];
  int8x16_t v67 = v17;
  v17.i64[0] = v61.i32[0];
  v17.i64[1] = v61.i32[1];
  int8x16_t v68 = v17;
  v17.i64[0] = v63.i32[0];
  v17.i64[1] = v63.i32[1];
  int8x16_t v69 = v17;
  v17.i64[0] = v65.i32[0];
  v17.i64[1] = v65.i32[1];
  int8x16_t v70 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v17);
  int8x16_t v71 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v72 = vmovl_high_s8(v71);
  int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v17.i64[0] = v73.i32[0];
  v17.i64[1] = v73.i32[1];
  int8x16_t v74 = v17;
  int16x8_t v75 = vmovl_s8(*(int8x8_t *)v71.i8);
  int32x4_t v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v17.i64[0] = v76.i32[0];
  v17.i64[1] = v76.i32[1];
  int8x16_t v77 = v17;
  int32x4_t v78 = vmovl_high_s16(v72);
  v17.i64[0] = v78.i32[0];
  v17.i64[1] = v78.i32[1];
  int8x16_t v79 = v17;
  int32x4_t v80 = vmovl_high_s16(v75);
  v17.i64[0] = v80.i32[0];
  v17.i64[1] = v80.i32[1];
  int8x16_t v81 = v17;
  v17.i64[0] = v73.i32[2];
  v17.i64[1] = v73.i32[3];
  int8x16_t v82 = v17;
  v17.i64[0] = v76.i32[2];
  v17.i64[1] = v76.i32[3];
  int8x16_t v83 = v17;
  v17.i64[0] = v78.i32[2];
  v17.i64[1] = v78.i32[3];
  int8x16_t v84 = v17;
  v17.i64[0] = v80.i32[2];
  v17.i64[1] = v80.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v69)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v74), v70), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v67)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v79), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v68)),
                                               v50))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v83), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v64)), v53), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v82), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v66)), v52)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v17), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v59)), v55), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v84),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v62)),
                                               v54)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::Grid::GridPipelineState::GridPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1EB32B428 = 1;
          }
          ggl::Grid::GridPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          unk_1E9587950 = &ggl::Grid::pipelineDataGridPipelineDeviceStructs(void)::ref;
          qword_1E9587958 = 0;
          {
            ggl::Grid::pipelineDataGridPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(void *)algn_1E9587A08 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1E9587A10 = (uint64_t)ggl::GridBase::GridView::reflection(void)::reflection;
            unk_1E9587A18 = ggl::Grid::Style::reflection(void)::reflection;
          }
          qword_1E9587960 = (uint64_t)&ggl::Grid::pipelineDataGridPipelineConstantStructs(void)::ref;
          unk_1E9587968 = xmmword_1A28FCFA0;
        }
      }
      ggl::Grid::GridPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Grid::GridPipelineSetup::typedReflection(void)::ref;
      ggl::GridShader::typedReflection(v85);
      qword_1EB3199B8 = (uint64_t)&ggl::GridShader::typedReflection(void)::ref;
      {
        ggl::Grid::pipelineStateGridPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9587B18 = 0;
        qword_1E9587B20 = (uint64_t)"";
        dword_1E9587B28 = 0;
        qword_1E9587B30 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineAttributeBinding_0(void)::attr;
        unk_1E9587B38 = 1;
      }
      qword_1EB3199C0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1EB3199C8 = 1;
      qword_1EB3199D0 = 0;
      unk_1EB3199D8 = 0;
      qword_1EB3199E0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineDeviceStructBinding(void)::ref;
      unk_1EB3199E8 = 0;
      {
        ggl::Grid::pipelineStateGridPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9587A58 = 0;
        qword_1E9587A60 = (uint64_t)"view";
        dword_1E9587A68 = 3;
        qword_1E9587A70 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantViewBinding(void)::reflection;
        unk_1E9587A78 = xmmword_1A28FCEB0;
        qword_1E9587A88 = 1;
        unk_1E9587A90 = "transform";
        dword_1E9587A98 = 3;
        qword_1E9587AA0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantTransformBinding(void)::reflection;
        unk_1E9587AA8 = xmmword_1A28FCF70;
        qword_1E9587AB8 = 2;
        unk_1E9587AC0 = "gridView";
        dword_1E9587AC8 = 3;
        qword_1E9587AD0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantGridViewBinding(void)::reflection;
        unk_1E9587AD8 = xmmword_1A28FC910;
        qword_1E9587AE8 = 3;
        unk_1E9587AF0 = "style";
        dword_1E9587AF8 = 3;
        qword_1E9587B00 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantStyleBinding(void)::reflection;
        unk_1E9587B08 = 6;
      }
      qword_1EB3199F0 = (uint64_t)&ggl::Grid::pipelineStateGridPipelineConstantStructBinding(void)::ref;
      unk_1EB3199F8 = 4;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  uint64x2_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Grid::GridPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 305) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF560510;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::GlobeAtmosphere::BasePipelineState::BasePipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int8x16_t v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GlobeAtmosphere::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32C708 = 1;
          }
          ggl::GlobeAtmosphere::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r;
          *(void *)algn_1E957F368 = &ggl::GlobeAtmosphere::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1E957F370 = 0;
          {
            ggl::GlobeAtmosphere::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::GlobeAtmosphere::AtmosphereConstants::reflection(void)::reflection;
            unk_1E9583530 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          }
          qword_1E957F378 = (uint64_t)&ggl::GlobeAtmosphere::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1E957F380 = xmmword_1A28FCED0;
        }
      }
      ggl::GlobeAtmosphere::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlobeAtmosphere::BasePipelineSetup::typedReflection(void)::ref;
      ggl::GlobeAtmosphereShader::typedReflection(v85);
      qword_1E958DB50 = (uint64_t)&ggl::GlobeAtmosphereShader::typedReflection(void)::ref;
      {
        ggl::GlobeAtmosphere::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95835A0 = 0;
        qword_1E95835A8 = (uint64_t)"";
        dword_1E95835B0 = 0;
        qword_1E95835B8 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1E95835C0 = 1;
      }
      qword_1E958DB58 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1E958DB60 = 1;
      qword_1E958DB68 = 0;
      unk_1E958DB70 = 0;
      qword_1E958DB78 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1E958DB80 = 0;
      {
        ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1E9583540 = 0;
        qword_1E9583548 = (uint64_t)"constants";
        dword_1E9583550 = 3;
        qword_1E9583558 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantConstantsBinding(void)::reflection;
        unk_1E9583560 = xmmword_1A28FD0F0;
        qword_1E9583570 = 1;
        unk_1E9583578 = "lightConfig";
        dword_1E9583580 = 3;
        qword_1E9583588 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantLightConfigBinding(void)::reflection;
        unk_1E9583590 = 4;
      }
      qword_1E958DB88 = (uint64_t)&ggl::GlobeAtmosphere::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1E958DB90 = 2;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  uint64x2_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::GlobeAtmosphere::BasePipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF55BC90;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void md::ClearRenderLayer::ClearRenderLayer(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = a3;
  *(void *)(a1 + 40) = a2;
  *(void *)a1 = &unk_1EF536008;
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_1A1D485A0(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  unsigned __int8 v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'md::MapStandardLabeler::externalObjectsModerator(md::MapStandardLabeler *this)
{
  return *((void *)this + 48);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9Hillshade20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C870;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci26GlobeTexturedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57C360;
}

uint64_t std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5779E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Hillshade::Pos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF576C68;
}

void md::RouteLineSharedResources::RouteLineSharedResources(md::RouteLineSharedResources *this, const ggl::StandardLibrary *a2, AlphaAtlas *a3, const RenderTargetFormat *a4, int a5)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (a5) {
    operator new();
  }
  operator new();
}

void sub_1A1D4CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v18 - 208);
  std::unique_ptr<md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>>::~unique_ptr[abi:nn180100](a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v17);
  md::RouteLineSharedRenderStates::~RouteLineSharedRenderStates(v16);
  _Unwind_Resume(a1);
}

void sub_1A1D4CEF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[11];
  v1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = v1[10];
  v1[10] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[9];
  v1[9] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[8];
  v1[8] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[7];
  v1[7] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[6];
  v1[6] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[5];
  v1[5] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[4];
  v1[4] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v1[3];
  v1[3] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v1[2];
  v1[2] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v1[1];
  v1[1] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *v1;
  *uint64_t v1 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

void md::DebugRenderLayer::DebugRenderLayer(uint64_t a1, uint64_t a2, void *a3, __int16 *a4, char a5)
{
  id v9 = a3;
  __int16 v10 = *a4;
  uint64_t v11 = operator new(2uLL);
  *uint64_t v11 = v10;
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = operator new(2uLL);
  *(void *)(a1 + 8) = v12;
  *v12++ = *v11;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v12;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = a5;
  *(void *)a1 = &unk_1EF542AA0;
  *(void *)(a1 + 40) = a2;
  operator delete(v11);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_1EF5361C8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_WORD *)(a1 + 136) = *a4;
  operator new();
}

void sub_1A1D4D2D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)(v2 + 7));
  uint64_t v7 = *v5;
  *uint64_t v5 = 0;
  if (v7)
  {
    md::DebugLayerRenderResources::~DebugLayerRenderResources(v7);
    MEMORY[0x1A6239270]();
  }
  *uint64_t v2 = v3;
  uint64_t v8 = (void *)v2[1];
  if (v8)
  {
    v2[2] = v8;
    operator delete(v8);
  }

  _Unwind_Resume(a1);
}

void md::ScreenLabelFeatureSupport::setScreenLabelFeatures(uint64_t a1, void *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  int8x16_t v77 = 0;
  unint64_t v78 = 0;
  id v68 = a2;
  unint64_t v3 = [v68 count];
  unint64_t v4 = v3;
  if (v3)
  {
    if (v3 >> 61) {
      goto LABEL_103;
    }
    uint64_t v5 = (char *)operator new(8 * v3);
    std::string __p = &v5[(unint64_t)v77 & 0xFFFFFFFFFFFFFFF8];
    int8x16_t v77 = (void **)__p;
    unint64_t v78 = (unint64_t)&v5[8 * v4];
  }
  uint64_t v69 = a1;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  obuint64_t j = v68;
  uint64_t v6 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
  if (!v6) {
    goto LABEL_40;
  }
  uint64_t v7 = *(void *)v73;
  uint64_t v70 = *(void *)v73;
  do
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)v73 != v7) {
        objc_enumerationMutation(obj);
      }
      __int16 v10 = *(void **)(*((void *)&v72 + 1) + 8 * i);
      uint64_t v11 = v77;
      if ((unint64_t)v77 < v78)
      {
        *uint64_t v11 = v10;
        id v9 = v11 + 1;
        goto LABEL_8;
      }
      uint64_t v12 = (void **)__p;
      int64_t v13 = (char *)v77 - (unsigned char *)__p;
      int64_t v14 = ((char *)v77 - (unsigned char *)__p) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        abort();
      }
      uint64_t v16 = v78 - (void)__p;
      if ((uint64_t)(v78 - (void)__p) >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(8 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      int8x16_t v19 = (void **)&v18[8 * v14];
      int32x4_t v20 = &v18[8 * v17];
      *int8x16_t v19 = v10;
      id v9 = v19 + 1;
      int64_t v21 = (char *)v11 - (char *)v12;
      if (v11 == v12)
      {
        std::string __p = &v18[8 * v14];
        int8x16_t v77 = v19 + 1;
        unint64_t v78 = (unint64_t)v20;
        uint64_t v7 = v70;
        goto LABEL_35;
      }
      unint64_t v22 = v21 - 8;
      if ((unint64_t)(v21 - 8) <= 0x77
        || &v11[-(v22 >> 3) - 1] < v19 && &v18[v13 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v11)
      {
        goto LABEL_106;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      int8x16_t v24 = &v18[8 * v14 - 16];
      int8x16_t v25 = v11 - 4;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v25;
        long long v27 = *((_OWORD *)v25 + 1);
        *(_OWORD *)int8x16_t v25 = 0uLL;
        *((_OWORD *)v25 + 1) = 0uLL;
        v25 -= 4;
        *((_OWORD *)v24 - 1) = v28;
        *(_OWORD *)int8x16_t v24 = v27;
        v24 -= 32;
        v26 -= 4;
      }
      while (v26);
      v19 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_106:
        do
        {
          int8x16_t v29 = *--v11;
          *uint64_t v11 = 0;
          *--int8x16_t v19 = v29;
        }
        while (v11 != v12);
      }
      uint64_t v11 = (void **)__p;
      int8x16_t v30 = v77;
      std::string __p = v19;
      int8x16_t v77 = v9;
      unint64_t v78 = (unint64_t)v20;
      if (v30 != v11)
      {
        uint64_t v7 = v70;
        do
        {
          int8x16_t v31 = *--v30;
        }
        while (v30 != v11);
LABEL_35:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_36:
        operator delete(v11);
        goto LABEL_8;
      }
      uint64_t v7 = v70;
      if (v11) {
        goto LABEL_36;
      }
LABEL_8:
      int8x16_t v77 = v9;
    }
    uint64_t v6 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
  }
  while (v6);
LABEL_40:

  unint64_t v32 = 126 - 2 * __clz(((char *)v77 - (unsigned char *)__p) >> 3);
  if (v77 == __p) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*,false>((void **)__p, v77, v33, 1);
  int8x16_t v34 = (id *)__p;
  int16x8_t v35 = v77;
  int32x4_t v36 = (void **)__p;
  uint64_t v37 = v69;
  if (__p == v77)
  {
LABEL_53:
    int16x8_t v35 = v36;
  }
  else
  {
    int32x4_t v38 = (void **)((char *)__p + 8);
    do
    {
      if (v38 == v77)
      {
        int32x4_t v36 = v77;
        goto LABEL_53;
      }
      int32x4_t v40 = v38 - 1;
      int8x16_t v39 = *(v38 - 1);
      int8x16_t v41 = *v38++;
    }
    while (v39 != v41);
    int8x16_t v42 = v40 + 2;
    if (v40 + 2 != v77)
    {
      do
      {
        int8x16_t v43 = *v42;
        if (*v40 != *v42)
        {
          *int8x16_t v42 = 0;
          int8x16_t v44 = v40[1];
          *++int32x4_t v40 = v43;
        }
        ++v42;
      }
      while (v42 != v35);
      int8x16_t v34 = (id *)__p;
      int16x8_t v35 = v77;
      uint64_t v37 = v69;
    }
    int8x16_t v45 = v40 + 1;
    if (v45 != v35)
    {
      while (v35 != v45)
      {
        int8x16_t v46 = *--v35;
      }
      int8x16_t v77 = v45;
      int8x16_t v34 = (id *)__p;
      int16x8_t v35 = v45;
      uint64_t v37 = v69;
    }
  }
  int8x16_t v48 = *(id **)(v37 + 40);
  int8x16_t v49 = *(id **)(v37 + 48);
  uint64_t v47 = v37 + 40;
  uint64_t v50 = (char *)v35 - (char *)v34;
  uint64_t v51 = (char *)v49 - (char *)v48;
  if ((char *)v35 - (char *)v34 != (char *)v49 - (char *)v48
    || memcmp(v34, *(const void **)(v37 + 40), (char *)v35 - (char *)v34))
  {
    if ((void **)v47 != &__p)
    {
      unint64_t v52 = v50 >> 3;
      uint64_t v53 = *(void *)(v37 + 56);
      if (v50 >> 3 > (unint64_t)((v53 - (uint64_t)v48) >> 3))
      {
        if (v48)
        {
          if (v49 != v48)
          {
            do
            {
              int8x16_t v54 = *--v49;
            }
            while (v49 != v48);
            int8x16_t v49 = *(id **)v47;
            uint64_t v37 = v69;
          }
          *(void *)(v37 + 48) = v48;
          operator delete(v49);
          uint64_t v53 = 0;
          *(void *)uint64_t v47 = 0;
          *(void *)(v47 + 8) = 0;
          *(void *)(v47 + 16) = 0;
        }
        if ((v50 & 0x8000000000000000) == 0)
        {
          uint64_t v55 = v53 >> 2;
          if (v53 >> 2 <= v52) {
            uint64_t v55 = v50 >> 3;
          }
          unint64_t v56 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v55;
          if (!(v56 >> 61))
          {
            int8x16_t v48 = (id *)operator new(8 * v56);
            *(void *)(v37 + 40) = v48;
            *(void *)(v37 + 48) = v48;
            for (*(void *)(v37 + 56) = &v48[v56]; v34 != v35; ++v48)
            {
              id v57 = *v34++;
              *int8x16_t v48 = v57;
            }
            goto LABEL_93;
          }
        }
LABEL_103:
        abort();
      }
      uint64_t v58 = v51 >> 3;
      if (v51 >> 3 >= v52)
      {
        if (v34 != v35)
        {
          do
            objc_storeStrong(v48++, *v34++);
          while (v34 != v35);
          uint64_t v37 = v69;
          int8x16_t v49 = *(id **)(v69 + 48);
        }
        if (v49 != v48)
        {
          do
          {
            int8x16_t v64 = *--v49;
          }
          while (v49 != v48);
          uint64_t v37 = v69;
        }
      }
      else
      {
        if (v49 != v48)
        {
          uint64_t v59 = 8 * v58;
          int8x16_t v60 = v34;
          do
          {
            objc_storeStrong(v48++, *v60++);
            v59 -= 8;
          }
          while (v59);
          uint64_t v37 = v69;
          int8x16_t v48 = *(id **)(v69 + 48);
          int8x16_t v49 = v48;
        }
        int32x4_t v61 = &v34[v58];
        int8x16_t v62 = (char *)v48;
        if (v61 != v35)
        {
          int8x16_t v62 = (char *)v49;
          do
          {
            int32x4_t v63 = *v61++;
            *(void *)int8x16_t v62 = v63;
            v62 += 8;
          }
          while (v61 != v35);
        }
        int8x16_t v48 = (id *)((char *)v49 + v62 - (char *)v48);
      }
LABEL_93:
      *(void *)(v37 + 48) = v48;
      int8x16_t v34 = (id *)__p;
    }
    *(unsigned char *)(v37 + 88) = 1;
  }
  if (v34)
  {
    int8x16_t v65 = v77;
    int8x16_t v66 = v34;
    if (v77 != v34)
    {
      do
      {
        int8x16_t v67 = *--v65;
      }
      while (v65 != v34);
      int8x16_t v66 = __p;
    }
    int8x16_t v77 = v34;
    operator delete(v66);
  }
}

void sub_1A1D4DA9C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*,false>(void **a1, void **a2, uint64_t a3, char a4)
{
void md::PostchainRenderLayer::PostchainRenderLayer(md::PostchainRenderLayer *this, id *a2, VKSharedResources *a3)
{
  uint64_t v632 = *MEMORY[0x1E4F143B8];
  BOOL v4 = a3;
  v558 = v4;
  if (v4)
  {
    char v5 = v4;
    [(VKSharedResources *)v4 standardCommandBufferSelector];
    __int16 v555 = *(unsigned __int8 *)(*(void *)(v623 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v6 = *(unsigned __int8 *)(*(void *)(v621 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v553 = *(unsigned __int8 *)(*(void *)(v619 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v7 = *(unsigned __int8 *)(*(void *)(v617 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v550 = *(unsigned __int8 *)(*(void *)(v615 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v8 = *(unsigned __int8 *)(*(void *)(v613 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v9 = *(unsigned __int8 *)(*(void *)(v611 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v10 = *(unsigned __int8 *)(*(void *)(v609 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v11 = *(unsigned __int8 *)(*(void *)(v607 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v12 = *(unsigned __int8 *)(*(void *)(v605 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v13 = *(unsigned __int8 *)(*(void *)(v603 + 32) + 123);
    [(VKSharedResources *)v5 standardCommandBufferSelector];
    __int16 v14 = v555 << 8;
    __int16 v15 = v6 << 8;
    __int16 v552 = v553 << 8;
    __int16 v16 = v7 << 8;
    __int16 v554 = v550 << 8;
    __int16 v17 = v8 << 8;
    __int16 v551 = v9 << 8;
    __int16 v18 = v10 << 8;
    __int16 v19 = v11 << 8;
    __int16 v20 = v12 << 8;
    __int16 v21 = v13 << 8;
    __int16 v556 = *(unsigned __int8 *)(*(void *)(v601 + 32) + 123);
  }
  else
  {
    v624 = 0;
    uint64_t v623 = 0;
    __int16 v556 = *(unsigned __int8 *)(MEMORY[0x20] + 123);
    __int16 v21 = v556 << 8;
    v622 = 0;
    uint64_t v621 = 0;
    v620 = 0;
    uint64_t v619 = 0;
    v618 = 0;
    uint64_t v617 = 0;
    v616 = 0;
    uint64_t v615 = 0;
    v614 = 0;
    uint64_t v613 = 0;
    v612 = 0;
    uint64_t v611 = 0;
    uint64_t v609 = 0;
    v610 = 0;
    v608 = 0;
    uint64_t v607 = 0;
    uint64_t v605 = 0;
    v606 = 0;
    __int16 v19 = v556 << 8;
    __int16 v551 = v556 << 8;
    __int16 v554 = v556 << 8;
    __int16 v552 = v556 << 8;
    __int16 v14 = v556 << 8;
    uint64_t v603 = 0;
    v604 = 0;
    __int16 v15 = v556 << 8;
    __int16 v16 = v556 << 8;
    __int16 v17 = v556 << 8;
    __int16 v18 = v556 << 8;
    __int16 v20 = v556 << 8;
    uint64_t v601 = 0;
    v602 = 0;
  }
  unint64_t v22 = operator new(0x18uLL);
  *unint64_t v22 = v14 | 0x11;
  v22[1] = v15 | 0x12;
  v22[2] = v552 | 0x13;
  v22[3] = v16 | 0x14;
  v22[4] = v554 | 0x15;
  v22[5] = v17 | 0x16;
  v22[6] = v551 | 0x17;
  v22[7] = v18 | 5;
  v22[8] = v19 | 4;
  v22[9] = v20 | 6;
  v22[10] = v21 | 7;
  v22[11] = (v556 << 8) | 8;
  *(void *)this = &unk_1EF530C60;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v23 = operator new(0x18uLL);
  *((void *)this + 2) = v23 + 3;
  *((void *)this + 3) = v23 + 3;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
  v23[2] = *((void *)v22 + 2);
  *((_WORD *)this + 16) = 0;
  *((unsigned char *)this + 34) = 52;
  *(void *)this = &unk_1EF542AA0;
  *((void *)this + 1) = v23;
  *((void *)this + 5) = a2;
  operator delete(v22);
  if (v602 && !atomic_fetch_add(&v602->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
    std::__shared_weak_count::__release_weak(v602);
  }
  if (v604 && !atomic_fetch_add(&v604->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
    std::__shared_weak_count::__release_weak(v604);
  }
  if (v606 && !atomic_fetch_add(&v606->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
    std::__shared_weak_count::__release_weak(v606);
  }
  if (v608 && !atomic_fetch_add(&v608->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
    std::__shared_weak_count::__release_weak(v608);
  }
  if (v610 && !atomic_fetch_add(&v610->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
    std::__shared_weak_count::__release_weak(v610);
  }
  if (v612 && !atomic_fetch_add(&v612->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
    std::__shared_weak_count::__release_weak(v612);
  }
  if (v614 && !atomic_fetch_add(&v614->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
    std::__shared_weak_count::__release_weak(v614);
  }
  if (v616 && !atomic_fetch_add(&v616->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
    std::__shared_weak_count::__release_weak(v616);
  }
  if (v618 && !atomic_fetch_add(&v618->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
    std::__shared_weak_count::__release_weak(v618);
  }
  if (v620 && !atomic_fetch_add(&v620->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
    std::__shared_weak_count::__release_weak(v620);
  }
  if (v622 && !atomic_fetch_add(&v622->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
    std::__shared_weak_count::__release_weak(v622);
  }
  if (v624 && !atomic_fetch_add(&v624->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
    std::__shared_weak_count::__release_weak(v624);
  }
  *(void *)this = &unk_1EF53EC20;
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  int8x16_t v24 = v600;
  *((_WORD *)this + 24) = (*(unsigned __int8 *)(*(void *)(v599 + 32) + 123) << 8) | 0x11;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  unint64_t v25 = v598;
  *((_WORD *)this + 25) = (*(unsigned __int8 *)(*(void *)(v597 + 32) + 123) << 8) | 0x12;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  unint64_t v26 = v596;
  *((_WORD *)this + 26) = (*(unsigned __int8 *)(*(void *)(v595 + 32) + 123) << 8) | 0x13;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  unint64_t v27 = v594;
  *((_WORD *)this + 27) = (*(unsigned __int8 *)(*(void *)(v593 + 32) + 123) << 8) | 0x14;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  long long v28 = v592;
  *((_WORD *)this + 28) = (*(unsigned __int8 *)(*(void *)(v591 + 32) + 123) << 8) | 0x15;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  int8x16_t v29 = v590;
  *((_WORD *)this + 29) = (*(unsigned __int8 *)(*(void *)(v589 + 32) + 123) << 8) | 0x16;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  int8x16_t v30 = v588;
  *((_WORD *)this + 30) = (*(unsigned __int8 *)(*(void *)(v587 + 32) + 123) << 8) | 0x17;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  int8x16_t v31 = v586;
  *((_WORD *)this + 31) = (*(unsigned __int8 *)(*(void *)(v585 + 32) + 123) << 8) | 5;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  unint64_t v32 = v584;
  *((_WORD *)this + 32) = (*(unsigned __int8 *)(*(void *)(v583 + 32) + 123) << 8) | 4;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  unint64_t v33 = v582;
  *((_WORD *)this + 33) = (*(unsigned __int8 *)(*(void *)(v581 + 32) + 123) << 8) | 6;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  unint64_t v34 = v580;
  *((_WORD *)this + 34) = (*(unsigned __int8 *)(*(void *)(v579 + 32) + 123) << 8) | 7;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  [(VKSharedResources *)v558 standardCommandBufferSelector];
  int16x8_t v35 = v578;
  *((_WORD *)this + 35) = (*(unsigned __int8 *)(*(void *)(v577 + 32) + 123) << 8) | 8;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v549 = (char *)this + 200;
  bzero((char *)this + 72, 0x328uLL);
  id v36 = a2[13];
  uint64_t v37 = objc_msgSend(v36, "format", (char *)this + 72, &unk_1EF530C60, (char *)this + 824, (char *)this + 680, (char *)this + 624, (char *)this + 528);

  int v38 = *(_DWORD *)v37;
  long long v575 = *(_OWORD *)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  uint64_t v576 = *(void *)(v37 + 16);
  long long v627 = *(_OWORD *)(v37 + 4);
  int v628 = *(_DWORD *)(v37 + 20);
  int32x4_t v40 = operator new(0xE8uLL);
  v40[1] = 0;
  v40[2] = 0;
  *int32x4_t v40 = &unk_1EF5863E0;
  uint64_t v41 = ggl::BufferData::BufferData((uint64_t)(v40 + 3), qword_1E9568448, 2, 1, 6, 1);
  v40[28] = ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
  v40[3] = &unk_1EF55DC78;
  unint64_t v42 = (std::__shared_weak_count *)*((void *)this + 10);
  *((void *)this + 9) = v41;
  *((void *)this + 10) = v40;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v43 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v44 = *(void *)(v43 + 2480);
  uint64_t v45 = *(void *)(v43 + 2488);
  *(void *)&long long v564 = v44;
  *((void *)&v564 + 1) = v45;
  if (v45) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v559[0] = 0;
  int8x16_t v46 = (char *)operator new(0x198uLL);
  *((void *)v46 + 1) = 0;
  *((void *)v46 + 2) = 0;
  *(void *)int8x16_t v46 = &unk_1EF587E58;
  *(_OWORD *)v629 = *(_OWORD *)v37;
  *(_OWORD *)&v629[16] = *(_OWORD *)(v37 + 16);
  {
    {
      {
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1EB32B448 = 1;
      }
      ggl::StandardPostchain::CompositePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1E9584970 = &ggl::StandardPostchain::pipelineDataCompositePipelineDeviceStructs(void)::ref;
      qword_1E9584978 = 0;
      {
        ggl::StandardPostchain::pipelineDataCompositePipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
      }
      qword_1E9584980 = (uint64_t)&ggl::StandardPostchain::pipelineDataCompositePipelineConstantStructs(void)::ref;
      *(_OWORD *)algn_1E9584988 = xmmword_1A28FC960;
    }
    ggl::StandardPostchain::CompositePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::CompositePipelineSetup::typedReflection(void)::ref;
    {
      ggl::StandardPostchainCompositeShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainCompositeShader";
      {
        qword_1EB31D068 = (uint64_t)"StandardPostchainCompositeShader";
        unk_1EB31D070 = ggl::standardPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EB31D078 = 1;
        unk_1EB31D080 = &ggl::standardPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EB31D088 = 0;
        unk_1EB31D090 = &ggl::standardPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EB31D098 = 0;
        unk_1EB31D0A0 = &ggl::standardPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = 3269181341;
        qword_1EB31D0A8 = 0;
        unk_1EB31D0B0 = &ggl::standardPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EB31D0C0 = 0;
        unk_1EB31D0C8 = 0;
        qword_1EB31D0B8 = 0;
      }
      qword_1EB31C2A8 = (uint64_t)&ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
      dword_1EB31C2B0 = -1025785955;
      {
        ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x1DF746FA2;
        qword_1EB31D3A0 = (uint64_t)"StandardPostchainCompositeShader";
        unk_1EB31D3A8 = 0;
        qword_1EB31D3B0 = 0;
        unk_1EB31D3B8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EB31D3C0 = 1;
        unk_1EB31D3C8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1EB31D3D0 = 0;
        unk_1EB31D3D8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EB31D3E0 = 4;
        unk_1EB31D3E8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EB31D3F8 = 0;
        unk_1EB31D400 = 0;
        qword_1EB31D3F0 = 4;
      }
      qword_1EB31C2B8 = (uint64_t)&ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31C2C0 = -546017374;
      qword_1EB31C2C8 = (uint64_t)ggl::standardPostchainCompositeShaderShaderConstants(void)::ref;
      unk_1EB31C2D0 = 1;
      qword_1EB31C2D8 = (uint64_t)ggl::standardPostchainCompositeShaderShaderTextures(void)::ref;
      unk_1EB31C2E0 = 4;
      qword_1EB31C2E8 = (uint64_t)ggl::standardPostchainCompositeShaderShaderSamplers(void)::ref;
      unk_1EB31C2F0 = 4;
    }
    qword_1E95849A8 = (uint64_t)&ggl::StandardPostchainCompositeShader::typedReflection(void)::ref;
    {
      ggl::StandardPostchain::pipelineStateCompositePipelineAttributeStructBinding(void)::attr = 0;
      *(void *)algn_1E9584E98 = 0;
      qword_1E9584EA0 = (uint64_t)"";
      dword_1E9584EA8 = 0;
      qword_1E9584EB0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineAttributeBinding_0(void)::attr;
      unk_1E9584EB8 = 2;
    }
    qword_1E95849B0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineAttributeStructBinding(void)::attr;
    *(void *)algn_1E95849B8 = 1;
    qword_1E95849C0 = 0;
    unk_1E95849C8 = 4;
    qword_1E95849D0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineDeviceStructBinding(void)::ref;
    unk_1E95849D8 = 0;
    {
      ggl::StandardPostchain::pipelineStateCompositePipelineConstantStructBinding(void)::ref = 0;
      *(void *)algn_1E9584DF8 = 0;
      qword_1E9584E00 = (uint64_t)"cameraProperties";
      dword_1E9584E08 = 3;
      qword_1E9584E10 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineConstantCameraPropertiesBinding(void)::reflection;
      unk_1E9584E18 = 5;
    }
    qword_1E95849E0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineConstantStructBinding(void)::ref;
    unk_1E95849E8 = 1;
  }
  long long v47 = v564;
  if (*((void *)&v564 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v46 + 4) = 0;
  *((void *)v46 + 5) = 0;
  *((_DWORD *)v46 + 14) = 0;
  *((void *)v46 + 6) = 0;
  *((void *)v46 + 3) = &unk_1EF55B208;
  *((void *)v46 + 8) = &ggl::StandardPostchain::CompositePipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v46 + 72) = v47;
  if (*((void *)&v47 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v46[136] = 0;
  *(_OWORD *)(v46 + 140) = xmmword_1A28FC970;
  *(void *)(v46 + 156) = 0;
  *(void *)(v46 + 172) = 0;
  *(void *)(v46 + 164) = 0;
  v46[184] = 0;
  *(_OWORD *)(v46 + 188) = xmmword_1A28FC970;
  *(void *)(v46 + 204) = 0;
  *(void *)(v46 + 220) = 0;
  *(void *)(v46 + 212) = 0;
  v46[232] = 0;
  *(_OWORD *)(v46 + 236) = xmmword_1A28FC970;
  *(void *)(v46 + 252) = 0;
  *(void *)(v46 + 268) = 0;
  *(void *)(v46 + 260) = 0;
  long long v48 = *(_OWORD *)&v629[16];
  *(_OWORD *)(v46 + 280) = *(_OWORD *)v629;
  *(_OWORD *)(v46 + 296) = v48;
  v46[312] = 0;
  *((void *)v46 + 48) = 0;
  *((_OWORD *)v46 + 22) = 0u;
  *((_OWORD *)v46 + 23) = 0u;
  *((_OWORD *)v46 + 20) = 0u;
  *((_OWORD *)v46 + 21) = 0u;
  *((void *)v46 + 49) = 0x100000001;
  v46[400] = 0;
  v46[88] = 0;
  *(_WORD *)(v46 + 89) = v625;
  v46[91] = v626;
  *(_OWORD *)(v46 + 92) = xmmword_1A28FC970;
  *(void *)(v46 + 108) = *(void *)&v559[0];
  *((_DWORD *)v46 + 29) = 0;
  *((void *)v46 + 15) = 0;
  *((_DWORD *)v46 + 32) = 0;
  v46[132] = 15;
  if (*((void *)&v47 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v47 + 1) + 16))(*((void *)&v47 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
  }
  v46[329] = 0;
  int8x16_t v49 = vceqzq_s8(*(int8x16_t *)(v46 + 328));
  int16x8_t v50 = vmovl_high_s8(v49);
  int32x4_t v51 = vmovl_s16(*(int16x4_t *)v50.i8);
  v52.i64[0] = v51.u32[0];
  v52.i64[1] = v51.u32[1];
  int8x16_t v53 = v52;
  int16x8_t v54 = vmovl_s8(*(int8x8_t *)v49.i8);
  int32x4_t v55 = vmovl_s16(*(int16x4_t *)v54.i8);
  v52.i64[0] = v55.u32[0];
  v52.i64[1] = v55.u32[1];
  int8x16_t v56 = v52;
  int32x4_t v57 = vmovl_high_s16(v50);
  v52.i64[0] = v57.u32[0];
  v52.i64[1] = v57.u32[1];
  int8x16_t v58 = v52;
  int32x4_t v59 = vmovl_high_s16(v54);
  v52.i64[0] = v59.u32[0];
  v52.i64[1] = v59.u32[1];
  int8x16_t v60 = v52;
  v52.i64[0] = v51.u32[2];
  v52.i64[1] = v51.u32[3];
  int8x16_t v61 = v52;
  v52.i64[0] = v55.u32[2];
  v52.i64[1] = v55.u32[3];
  int8x16_t v62 = v52;
  v52.i64[0] = v57.u32[2];
  v52.i64[1] = v57.u32[3];
  int8x16_t v63 = v52;
  v52.i64[0] = v59.u32[2];
  v52.i64[1] = v59.u32[3];
  int8x16_t v64 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v52);
  int8x16_t v65 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v63);
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v62);
  int8x16_t v67 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v58);
  int8x16_t v68 = vceqzq_s8(*(int8x16_t *)(v46 + 344));
  int16x8_t v69 = vmovl_high_s8(v68);
  int32x4_t v70 = vmovl_s16(*(int16x4_t *)v69.i8);
  v52.i64[0] = v70.u32[0];
  v52.i64[1] = v70.u32[1];
  int8x16_t v71 = v52;
  int16x8_t v72 = vmovl_s8(*(int8x8_t *)v68.i8);
  int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v52.i64[0] = v73.u32[0];
  v52.i64[1] = v73.u32[1];
  int8x16_t v74 = v52;
  int32x4_t v75 = vmovl_high_s16(v69);
  v52.i64[0] = v75.u32[0];
  v52.i64[1] = v75.u32[1];
  int8x16_t v76 = v52;
  int32x4_t v77 = vmovl_high_s16(v72);
  v52.i64[0] = v77.u32[0];
  v52.i64[1] = v77.u32[1];
  int8x16_t v78 = v52;
  v52.i64[0] = v70.u32[2];
  v52.i64[1] = v70.u32[3];
  int8x16_t v79 = v52;
  v52.i64[0] = v73.u32[2];
  v52.i64[1] = v73.u32[3];
  int8x16_t v80 = v52;
  v52.i64[0] = v75.u32[2];
  v52.i64[1] = v75.u32[3];
  int8x16_t v81 = v52;
  v52.i64[0] = v77.u32[2];
  v52.i64[1] = v77.u32[3];
  int8x16_t v82 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v81);
  int8x16_t v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v71), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v53));
  int8x16_t v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v74), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v56));
  int8x16_t v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v76), v67);
  int8x16_t v86 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v78), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v60));
  int8x16_t v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v79), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v61));
  int8x16_t v88 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v80), v66);
  int8x16_t v89 = vorrq_s8(v82, v65);
  int8x16_t v90 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v52), v64);
  int8x16_t v91 = vceqzq_s8(*(int8x16_t *)(v46 + 360));
  int16x8_t v92 = vmovl_high_s8(v91);
  int32x4_t v93 = vmovl_s16(*(int16x4_t *)v92.i8);
  v52.i64[0] = v93.i32[0];
  v52.i64[1] = v93.i32[1];
  int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v52);
  int8x16_t v95 = vceqzq_s8(*(int8x16_t *)(v46 + 376));
  int16x8_t v96 = vmovl_high_s8(v95);
  int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
  v52.i64[0] = v97.i32[0];
  v52.i64[1] = v97.i32[1];
  int8x16_t v98 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v52), v94), v83);
  int16x8_t v99 = vmovl_s8(*(int8x8_t *)v91.i8);
  int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
  v52.i64[0] = v100.i32[0];
  v52.i64[1] = v100.i32[1];
  int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FCA80, v52);
  int16x8_t v102 = vmovl_s8(*(int8x8_t *)v95.i8);
  int32x4_t v103 = vmovl_s16(*(int16x4_t *)v102.i8);
  v52.i64[0] = v103.i32[0];
  v52.i64[1] = v103.i32[1];
  int8x16_t v104 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v52), v101), v84);
  int32x4_t v105 = vmovl_high_s16(v92);
  v52.i64[0] = v105.i32[0];
  v52.i64[1] = v105.i32[1];
  int8x16_t v106 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v52);
  int32x4_t v107 = vmovl_high_s16(v96);
  v52.i64[0] = v107.i32[0];
  v52.i64[1] = v107.i32[1];
  int8x16_t v108 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v52), v106), v85);
  int32x4_t v109 = vmovl_high_s16(v99);
  v52.i64[0] = v109.i32[0];
  v52.i64[1] = v109.i32[1];
  int8x16_t v110 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v52);
  int32x4_t v111 = vmovl_high_s16(v102);
  v52.i64[0] = v111.i32[0];
  v52.i64[1] = v111.i32[1];
  int8x16_t v112 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v52), v110), v86);
  v52.i64[0] = v93.i32[2];
  v52.i64[1] = v93.i32[3];
  int8x16_t v113 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v52);
  v52.i64[0] = v97.i32[2];
  v52.i64[1] = v97.i32[3];
  int8x16_t v114 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v52), v113), v87);
  v52.i64[0] = v100.i32[2];
  v52.i64[1] = v100.i32[3];
  int8x16_t v115 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v52);
  v52.i64[0] = v103.i32[2];
  v52.i64[1] = v103.i32[3];
  int8x16_t v116 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v52), v115), v88);
  v52.i64[0] = v105.i32[2];
  v52.i64[1] = v105.i32[3];
  int8x16_t v117 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v52);
  v52.i64[0] = v107.i32[2];
  v52.i64[1] = v107.i32[3];
  int8x16_t v118 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v52), v117), v89);
  v52.i64[0] = v109.i32[2];
  v52.i64[1] = v109.i32[3];
  int8x16_t v119 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v52);
  v52.i64[0] = v111.i32[2];
  v52.i64[1] = v111.i32[3];
  *((void *)v46 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v104, v98), vorrq_s8(v112, v108)), (int64x2_t)vorrq_s8(vorrq_s8(v116, v114), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v52), v119), v90), v118))));
  *((void *)v46 + 3) = &unk_1EF55EE58;
  v46[312] = 1;
  unint64_t v120 = (std::__shared_weak_count *)*((void *)this + 22);
  *((void *)this + 21) = v46 + 24;
  *((void *)this + 22) = v46;
  if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
  }
  if (*((void *)&v564 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v564 + 1) + 16))(*((void *)&v564 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v564 + 1));
  }
  uint64_t v121 = operator new(0x100uLL);
  id v122 = v121;
  v121[1] = 0;
  v121[2] = 0;
  *uint64_t v121 = &unk_1EF587E20;
  uint64_t v123 = v121 + 3;
  uint64_t v124 = *((void *)this + 21);
  uint64_t v125 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v125)
  {
    atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v121 + 3, v124, (uint64_t)v125);
    if (!atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v121 + 3, v124, 0);
  }
  v122[3] = &unk_1EF55EE28;
  uint64_t v126 = (std::__shared_weak_count *)*((void *)this + 24);
  *((void *)this + 23) = v123;
  *((void *)this + 24) = v122;
  if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }
  uint64_t v127 = *((void *)this + 23);
  int8x8_t v128 = *(void **)(v127 + 64);
  v128[1] = 0;
  uint64_t v129 = *((void *)this + 9);
  *int8x8_t v128 = v129;
  uint64_t v130 = *(void **)(v127 + 160);
  uint64_t v131 = *((void *)this + 10);
  if (v131) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v132 = (std::__shared_weak_count *)v130[1];
  *uint64_t v130 = v129;
  v130[1] = v131;
  if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
  }
  unint64_t v133 = operator new(0xF0uLL);
  v133[1] = 0;
  v133[2] = 0;
  void *v133 = &unk_1EF583548;
  v133[5] = 0;
  v133[6] = 0;
  *((_DWORD *)v133 + 14) = 0;
  v133[3] = &unk_1EF55A890;
  v133[4] = 0;
  *(void *)((char *)v133 + 60) = 65537;
  *((_DWORD *)v133 + 17) = 0;
  v133[9] = 1;
  *((_WORD *)v133 + 40) = 0;
  *((unsigned char *)v133 + 82) = 3;
  *(void *)((char *)v133 + 91) = 0;
  *(void *)((char *)v133 + 83) = 0;
  *((unsigned char *)v133 + 99) = 0;
  *(void *)((char *)v133 + 156) = 0;
  *(void *)((char *)v133 + 148) = 0;
  *((_WORD *)v133 + 106) = 257;
  v133[27] = 0;
  v133[28] = 0;
  *((unsigned char *)v133 + 232) = 0;
  unint64_t v134 = (std::__shared_weak_count *)*((void *)this + 20);
  *((void *)this + 19) = v133 + 3;
  *((void *)this + 20) = v133;
  if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
  *(unsigned char *)(*((void *)this + 19) + 58) = 3;
  uint64_t v572 = 0;
  uint64_t v569 = 0;
  uint64_t v135 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v136 = *(void *)(v135 + 2504);
  uint64_t v137 = *(void *)(v135 + 2512);
  *(void *)v629 = v136;
  *(void *)&v629[8] = v137;
  if (v137) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v137 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v138 = (char *)operator new(0x198uLL);
  *((void *)v138 + 1) = 0;
  *((void *)v138 + 2) = 0;
  *(void *)uint64_t v138 = &unk_1EF587EC8;
  {
    {
      {
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1EB32B448 = 1;
      }
      ggl::StandardPostchain::DepthSplitPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1E9584A00 = &ggl::StandardPostchain::pipelineDataDepthSplitPipelineDeviceStructs(void)::ref;
      qword_1E9584A08 = 0;
      {
        ggl::StandardPostchain::pipelineDataDepthSplitPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
      }
      qword_1E9584A10 = (uint64_t)&ggl::StandardPostchain::pipelineDataDepthSplitPipelineConstantStructs(void)::ref;
      unk_1E9584A18 = xmmword_1A28FC6E0;
    }
    ggl::StandardPostchain::DepthSplitPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::DepthSplitPipelineSetup::typedReflection(void)::ref;
    {
      ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSplitFrameShader";
      {
        qword_1EB31D1C8 = (uint64_t)"StandardPostchainSplitFrameShader";
        unk_1EB31D1D0 = ggl::standardPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EB31D1D8 = 1;
        unk_1EB31D1E0 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EB31D1E8 = 0;
        unk_1EB31D1F0 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EB31D1F8 = 0;
        unk_1EB31D200 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 1892780714;
        qword_1EB31D208 = 0;
        unk_1EB31D210 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EB31D220 = 0;
        unk_1EB31D228 = 0;
        qword_1EB31D218 = 0;
      }
      qword_1EB31C308 = (uint64_t)&ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
      dword_1EB31C310 = 1892780714;
      {
        ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x119C0B9BFLL;
        qword_1EB31D500 = (uint64_t)"StandardPostchainSplitFrameShader";
        unk_1EB31D508 = 0;
        qword_1EB31D510 = 0;
        unk_1EB31D518 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EB31D520 = 1;
        unk_1EB31D528 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1EB31D530 = 0;
        unk_1EB31D538 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EB31D540 = 2;
        unk_1EB31D548 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EB31D558 = 0;
        unk_1EB31D560 = 0;
        qword_1EB31D550 = 2;
      }
      qword_1EB31C318 = (uint64_t)&ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31C320 = 432060863;
      qword_1EB31C328 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderConstants(void)::ref;
      unk_1EB31C330 = 1;
      qword_1EB31C338 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderTextures(void)::ref;
      unk_1EB31C340 = 2;
      qword_1EB31C348 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderSamplers(void)::ref;
      unk_1EB31C350 = 2;
    }
    qword_1E9584A38 = (uint64_t)&ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref;
    {
      ggl::StandardPostchain::pipelineStateDepthSplitPipelineAttributeStructBinding(void)::attr = 0;
      *(void *)algn_1E9584EF8 = 0;
      qword_1E9584F00 = (uint64_t)"";
      dword_1E9584F08 = 0;
      qword_1E9584F10 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineAttributeBinding_0(void)::attr;
      unk_1E9584F18 = 2;
    }
    qword_1E9584A40 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineAttributeStructBinding(void)::attr;
    *(void *)algn_1E9584A48 = 1;
    qword_1E9584A50 = 0;
    unk_1E9584A58 = 2;
    qword_1E9584A60 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineDeviceStructBinding(void)::ref;
    unk_1E9584A68 = 0;
    {
      ggl::StandardPostchain::pipelineStateDepthSplitPipelineConstantStructBinding(void)::ref = 0;
      *(void *)algn_1E9584EC8 = 0;
      qword_1E9584ED0 = (uint64_t)"cameraProperties";
      dword_1E9584ED8 = 3;
      qword_1E9584EE0 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineConstantCameraPropertiesBinding(void)::reflection;
      unk_1E9584EE8 = 5;
    }
    qword_1E9584A70 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineConstantStructBinding(void)::ref;
    unk_1E9584A78 = 1;
  }
  long long v139 = *(_OWORD *)v629;
  if (*(void *)&v629[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v629[8] + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v138 + 4) = 0;
  *((void *)v138 + 5) = 0;
  *((_DWORD *)v138 + 14) = 0;
  *((void *)v138 + 6) = 0;
  *((void *)v138 + 3) = &unk_1EF55B208;
  *((void *)v138 + 8) = &ggl::StandardPostchain::DepthSplitPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v138 + 72) = v139;
  if (*((void *)&v139 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v139 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v138[184] = 0;
  *(_OWORD *)(v138 + 188) = xmmword_1A28FC970;
  *(void *)(v138 + 204) = 0;
  *(void *)(v138 + 220) = 0;
  *(void *)(v138 + 212) = 0;
  v138[232] = 0;
  *(_OWORD *)(v138 + 236) = xmmword_1A28FC970;
  *(void *)(v138 + 252) = 0;
  *(void *)(v138 + 268) = 0;
  *(void *)(v138 + 260) = 0;
  *((_DWORD *)v138 + 70) = v38;
  *((_DWORD *)v138 + 71) = v38;
  *((void *)v138 + 36) = v39;
  *((void *)v138 + 37) = 2;
  *((void *)v138 + 38) = 1;
  v138[312] = 0;
  *((_OWORD *)v138 + 20) = 0u;
  *((_OWORD *)v138 + 21) = 0u;
  *((_OWORD *)v138 + 22) = 0u;
  *((_OWORD *)v138 + 23) = 0u;
  *((void *)v138 + 48) = 0;
  *((void *)v138 + 49) = 0x100000001;
  v138[400] = 0;
  v138[88] = 0;
  v138[91] = v574;
  *(_WORD *)(v138 + 89) = v573;
  *(_OWORD *)(v138 + 92) = xmmword_1A28FC970;
  *(void *)(v138 + 108) = v572;
  *(void *)(v138 + 124) = 0;
  *(void *)(v138 + 116) = 0;
  v138[132] = 15;
  v138[136] = 0;
  *(_WORD *)(v138 + 137) = v570;
  v138[139] = v571;
  *(_OWORD *)(v138 + 140) = xmmword_1A28FC970;
  *(void *)(v138 + 156) = v569;
  *(void *)(v138 + 164) = 0;
  *(void *)(v138 + 172) = 0;
  v138[180] = 15;
  if (*((void *)&v139 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v139 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v139 + 1) + 16))(*((void *)&v139 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v139 + 1));
  }
  v138[329] = 0;
  int8x16_t v140 = vceqzq_s8(*(int8x16_t *)(v138 + 328));
  int16x8_t v141 = vmovl_high_s8(v140);
  int32x4_t v142 = vmovl_s16(*(int16x4_t *)v141.i8);
  v143.i64[0] = v142.u32[0];
  v143.i64[1] = v142.u32[1];
  int8x16_t v144 = v143;
  int16x8_t v145 = vmovl_s8(*(int8x8_t *)v140.i8);
  int32x4_t v146 = vmovl_s16(*(int16x4_t *)v145.i8);
  v143.i64[0] = v146.u32[0];
  v143.i64[1] = v146.u32[1];
  int8x16_t v147 = v143;
  int32x4_t v148 = vmovl_high_s16(v141);
  v143.i64[0] = v148.u32[0];
  v143.i64[1] = v148.u32[1];
  int8x16_t v149 = v143;
  int32x4_t v150 = vmovl_high_s16(v145);
  v143.i64[0] = v150.u32[0];
  v143.i64[1] = v150.u32[1];
  int8x16_t v151 = v143;
  v143.i64[0] = v142.u32[2];
  v143.i64[1] = v142.u32[3];
  int8x16_t v152 = v143;
  v143.i64[0] = v146.u32[2];
  v143.i64[1] = v146.u32[3];
  int8x16_t v153 = v143;
  v143.i64[0] = v148.u32[2];
  v143.i64[1] = v148.u32[3];
  int8x16_t v154 = v143;
  v143.i64[0] = v150.u32[2];
  v143.i64[1] = v150.u32[3];
  int8x16_t v155 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v143);
  int8x16_t v156 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v154);
  int8x16_t v157 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v153);
  int8x16_t v158 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v149);
  int8x16_t v159 = vceqzq_s8(*(int8x16_t *)(v138 + 344));
  int16x8_t v160 = vmovl_high_s8(v159);
  int32x4_t v161 = vmovl_s16(*(int16x4_t *)v160.i8);
  v143.i64[0] = v161.u32[0];
  v143.i64[1] = v161.u32[1];
  int8x16_t v162 = v143;
  int16x8_t v163 = vmovl_s8(*(int8x8_t *)v159.i8);
  int32x4_t v164 = vmovl_s16(*(int16x4_t *)v163.i8);
  v143.i64[0] = v164.u32[0];
  v143.i64[1] = v164.u32[1];
  int8x16_t v165 = v143;
  int32x4_t v166 = vmovl_high_s16(v160);
  v143.i64[0] = v166.u32[0];
  v143.i64[1] = v166.u32[1];
  int8x16_t v167 = v143;
  int32x4_t v168 = vmovl_high_s16(v163);
  v143.i64[0] = v168.u32[0];
  v143.i64[1] = v168.u32[1];
  int8x16_t v169 = v143;
  v143.i64[0] = v161.u32[2];
  v143.i64[1] = v161.u32[3];
  int8x16_t v170 = v143;
  v143.i64[0] = v164.u32[2];
  v143.i64[1] = v164.u32[3];
  int8x16_t v171 = v143;
  v143.i64[0] = v166.u32[2];
  v143.i64[1] = v166.u32[3];
  int8x16_t v172 = v143;
  v143.i64[0] = v168.u32[2];
  v143.i64[1] = v168.u32[3];
  int8x16_t v173 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v172);
  int8x16_t v174 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v162), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v144));
  int8x16_t v175 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v165), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v147));
  int8x16_t v176 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v167), v158);
  int8x16_t v177 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v169), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v151));
  int8x16_t v178 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v170), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v152));
  int8x16_t v179 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v171), v157);
  int8x16_t v180 = vorrq_s8(v173, v156);
  int8x16_t v181 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v143), v155);
  int8x16_t v182 = vceqzq_s8(*(int8x16_t *)(v138 + 360));
  int16x8_t v183 = vmovl_s8(*(int8x8_t *)v182.i8);
  int32x4_t v184 = vmovl_high_s16(v183);
  int16x8_t v185 = vmovl_high_s8(v182);
  int32x4_t v186 = vmovl_high_s16(v185);
  int32x4_t v187 = vmovl_s16(*(int16x4_t *)v183.i8);
  int32x4_t v188 = vmovl_s16(*(int16x4_t *)v185.i8);
  v143.i64[0] = v187.i32[0];
  v143.i64[1] = v187.i32[1];
  int8x16_t v189 = v143;
  v143.i64[0] = v188.i32[0];
  v143.i64[1] = v188.i32[1];
  int8x16_t v190 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v143);
  int8x16_t v191 = vceqzq_s8(*(int8x16_t *)(v138 + 376));
  int16x8_t v192 = vmovl_high_s8(v191);
  int32x4_t v193 = vmovl_s16(*(int16x4_t *)v192.i8);
  v143.i64[0] = v193.i32[0];
  v143.i64[1] = v193.i32[1];
  int16x8_t v194 = vmovl_s8(*(int8x8_t *)v191.i8);
  int32x4_t v195 = vmovl_s16(*(int16x4_t *)v194.i8);
  int8x16_t v196 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v143), v190), v174);
  v143.i64[0] = v195.i32[0];
  v143.i64[1] = v195.i32[1];
  int8x16_t v197 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v143), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v189));
  v143.i64[0] = v186.i32[0];
  v143.i64[1] = v186.i32[1];
  int8x16_t v198 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v143);
  int32x4_t v199 = vmovl_high_s16(v192);
  int8x16_t v200 = vorrq_s8(v197, v175);
  v143.i64[0] = v199.i32[0];
  v143.i64[1] = v199.i32[1];
  int8x16_t v201 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v143), v198);
  v143.i64[0] = v184.i32[0];
  v143.i64[1] = v184.i32[1];
  int8x16_t v202 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v143);
  int32x4_t v203 = vmovl_high_s16(v194);
  v143.i64[0] = v203.i32[0];
  v143.i64[1] = v203.i32[1];
  int8x16_t v204 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v143), v202), v177);
  v143.i64[0] = v188.i32[2];
  v143.i64[1] = v188.i32[3];
  int8x16_t v205 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v143);
  v143.i64[0] = v193.i32[2];
  v143.i64[1] = v193.i32[3];
  int8x16_t v206 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v143), v205), v178);
  v143.i64[0] = v187.i32[2];
  v143.i64[1] = v187.i32[3];
  int8x16_t v207 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v143);
  v143.i64[0] = v195.i32[2];
  v143.i64[1] = v195.i32[3];
  int8x16_t v208 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v143), v207), v179);
  v143.i64[0] = v186.i32[2];
  v143.i64[1] = v186.i32[3];
  int8x16_t v209 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v143);
  v143.i64[0] = v199.i32[2];
  v143.i64[1] = v199.i32[3];
  int8x16_t v210 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v143), v209), v180);
  v143.i64[0] = v184.i32[2];
  v143.i64[1] = v184.i32[3];
  int8x16_t v211 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v143);
  v143.i64[0] = v203.i32[2];
  v143.i64[1] = v203.i32[3];
  *((void *)v138 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v200, v196), vorrq_s8(v204, vorrq_s8(v201, v176))), (int64x2_t)vorrq_s8(vorrq_s8(v208, v206), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v143), v211), v181), v210))));
  *((void *)v138 + 3) = &unk_1EF55EEA8;
  v138[312] = 1;
  float32x2_t v212 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = v138 + 24;
  *((void *)this + 31) = v138;
  if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
  }
  if (*(void *)&v629[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v629[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)&v629[8] + 16))(*(void *)&v629[8]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v629[8]);
  }
  uint64_t v213 = operator new(0x100uLL);
  float32x4_t v214 = v213;
  v213[1] = 0;
  v213[2] = 0;
  void *v213 = &unk_1EF587E90;
  float32x4_t v215 = v213 + 3;
  uint64_t v216 = *((void *)this + 30);
  int8x16_t v217 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v217)
  {
    atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v213 + 3, v216, (uint64_t)v217);
    if (!atomic_fetch_add(&v217->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v213 + 3, v216, 0);
  }
  v214[3] = &unk_1EF55EE78;
  float32x2_t v218 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = v215;
  *((void *)this + 33) = v214;
  if (v218 && !atomic_fetch_add(&v218->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
    std::__shared_weak_count::__release_weak(v218);
  }
  uint64_t v219 = *((void *)this + 32);
  uint64_t v220 = *(void **)(v219 + 64);
  v220[1] = 0;
  uint64_t v221 = *((void *)this + 9);
  *uint64_t v220 = v221;
  uint64_t v222 = *(void **)(v219 + 160);
  uint64_t v223 = *((void *)this + 10);
  if (v223) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v223 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v224 = (std::__shared_weak_count *)v222[1];
  *uint64_t v222 = v221;
  v222[1] = v223;
  if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
    std::__shared_weak_count::__release_weak(v224);
  }
  unint64_t v225 = operator new(0xF0uLL);
  v225[1] = 0;
  v225[2] = 0;
  *unint64_t v225 = &unk_1EF583548;
  v225[5] = 0;
  v225[6] = 0;
  *((_DWORD *)v225 + 14) = 0;
  v225[3] = &unk_1EF55A890;
  v225[4] = 0;
  *(void *)((char *)v225 + 60) = 65537;
  *((_DWORD *)v225 + 17) = 0;
  v225[9] = 1;
  *((_WORD *)v225 + 40) = 0;
  *((unsigned char *)v225 + 82) = 3;
  *(void *)((char *)v225 + 91) = 0;
  *(void *)((char *)v225 + 83) = 0;
  *((unsigned char *)v225 + 99) = 0;
  *(void *)((char *)v225 + 156) = 0;
  *(void *)((char *)v225 + 148) = 0;
  *((_WORD *)v225 + 106) = 257;
  v225[27] = 0;
  v225[28] = 0;
  *((unsigned char *)v225 + 232) = 0;
  uint64_t v226 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v225 + 3;
  *((void *)this + 29) = v225;
  if (v226 && !atomic_fetch_add(&v226->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
    std::__shared_weak_count::__release_weak(v226);
  }
  *(unsigned char *)(*((void *)this + 28) + 58) = 3;
  uint64_t v227 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v228 = *(void *)(v227 + 2528);
  uint64_t v229 = *(void *)(v227 + 2536);
  *(void *)&long long v564 = v228;
  *((void *)&v564 + 1) = v229;
  if (v229) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v229 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v559[0] = 0;
  uint64_t v230 = (char *)operator new(0x198uLL);
  *((void *)v230 + 1) = 0;
  *((void *)v230 + 2) = 0;
  *(void *)uint64_t v230 = &unk_1EF587FA8;
  *(_OWORD *)v629 = v627;
  *(_DWORD *)&v629[16] = v628;
  {
    {
      {
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1EB32B448 = 1;
      }
      ggl::StandardPostchain::DownsampleCoCPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1E9584B20 = &ggl::StandardPostchain::pipelineDataDownsampleCoCPipelineDeviceStructs(void)::ref;
      qword_1E9584B28 = 0;
      unk_1E9584B30 = &ggl::StandardPostchain::pipelineDataDownsampleCoCPipelineConstantStructs(void)::ref;
      xmmword_1E9584B38 = xmmword_1A28FC760;
    }
    ggl::StandardPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::DownsampleCoCPipelineSetup::typedReflection(void)::ref;
    {
      ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleCoCShader";
      {
        qword_1EB31D5E8 = (uint64_t)"StandardPostchainDownsampleCoCShader";
        unk_1EB31D5F0 = ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
        qword_1EB31D5F8 = 1;
        unk_1EB31D600 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1EB31D608 = 0;
        unk_1EB31D610 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1EB31D618 = 0;
        unk_1EB31D620 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 579759095;
        qword_1EB31D628 = 0;
        unk_1EB31D630 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1EB31D640 = 0;
        unk_1EB31D648 = 0;
        qword_1EB31D638 = 0;
      }
      qword_1EB31C488 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
      dword_1EB31C490 = 579759095;
      {
        ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1C1D81A17;
        qword_1EB31D7B0 = (uint64_t)"StandardPostchainDownsampleCoCShader";
        unk_1EB31D7B8 = 0;
        qword_1EB31D7C0 = 0;
        unk_1EB31D7C8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1EB31D7D0 = 0;
        unk_1EB31D7D8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1EB31D7E0 = 0;
        unk_1EB31D7E8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1EB31D7F0 = 1;
        unk_1EB31D7F8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1EB31D808 = 0;
        unk_1EB31D810 = 0;
        qword_1EB31D800 = 1;
      }
      qword_1EB31C498 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EB31C4A0 = -1042802153;
      qword_1EB31C4A8 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderShaderConstants(void)::ref;
      unk_1EB31C4B0 = 0;
      qword_1EB31C4B8 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderTextures(void)::ref;
      unk_1EB31C4C0 = 1;
      qword_1EB31C4C8 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderSamplers(void)::ref;
      unk_1EB31C4D0 = 1;
    }
    qword_1E9584B58 = (uint64_t)&ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref;
    {
      ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineAttributeStructBinding(void)::attr = 0;
      *(void *)algn_1E9584F98 = 0;
      qword_1E9584FA0 = (uint64_t)"";
      dword_1E9584FA8 = 0;
      qword_1E9584FB0 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineAttributeBinding_0(void)::attr;
      unk_1E9584FB8 = 2;
    }
    qword_1E9584B60 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineAttributeStructBinding(void)::attr;
    *(void *)algn_1E9584B68 = 1;
    qword_1E9584B70 = 0;
    unk_1E9584B78 = 1;
    qword_1E9584B80 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineDeviceStructBinding(void)::ref;
    unk_1E9584B88 = 0;
    qword_1E9584B90 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineConstantStructBinding(void)::ref;
    unk_1E9584B98 = 0;
  }
  long long v231 = v564;
  if (*((void *)&v564 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v230 + 4) = 0;
  *((void *)v230 + 5) = 0;
  *((_DWORD *)v230 + 14) = 0;
  *((void *)v230 + 6) = 0;
  *((void *)v230 + 3) = &unk_1EF55B208;
  *((void *)v230 + 8) = &ggl::StandardPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v230 + 72) = v231;
  if (*((void *)&v231 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v231 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v230[136] = 0;
  *(_OWORD *)(v230 + 140) = xmmword_1A28FC970;
  *(void *)(v230 + 156) = 0;
  *(void *)(v230 + 172) = 0;
  *(void *)(v230 + 164) = 0;
  v230[184] = 0;
  *(_OWORD *)(v230 + 188) = xmmword_1A28FC970;
  *(void *)(v230 + 204) = 0;
  *(void *)(v230 + 220) = 0;
  *(void *)(v230 + 212) = 0;
  v230[232] = 0;
  *(_OWORD *)(v230 + 236) = xmmword_1A28FC970;
  *(void *)(v230 + 252) = 0;
  *(void *)(v230 + 268) = 0;
  *(void *)(v230 + 260) = 0;
  *((_DWORD *)v230 + 70) = 2;
  long long v232 = *(_OWORD *)v629;
  *((_DWORD *)v230 + 75) = *(_DWORD *)&v629[16];
  *(_OWORD *)(v230 + 284) = v232;
  *((void *)v230 + 38) = 1;
  v230[312] = 0;
  *((void *)v230 + 48) = 0;
  *((_OWORD *)v230 + 22) = 0u;
  *((_OWORD *)v230 + 23) = 0u;
  *((_OWORD *)v230 + 20) = 0u;
  *((_OWORD *)v230 + 21) = 0u;
  *((void *)v230 + 49) = 0x100000001;
  v230[400] = 0;
  v230[88] = 0;
  *(_WORD *)(v230 + 89) = v625;
  v230[91] = v626;
  *(_OWORD *)(v230 + 92) = xmmword_1A28FC970;
  *(void *)(v230 + 108) = *(void *)&v559[0];
  *((_DWORD *)v230 + 32) = 0;
  *((void *)v230 + 15) = 0;
  *((_DWORD *)v230 + 29) = 0;
  v230[132] = 15;
  if (*((void *)&v231 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v231 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v231 + 1) + 16))(*((void *)&v231 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v231 + 1));
  }
  v230[329] = 0;
  int8x16_t v233 = vceqzq_s8(*(int8x16_t *)(v230 + 328));
  int16x8_t v234 = vmovl_high_s8(v233);
  int32x4_t v235 = vmovl_s16(*(int16x4_t *)v234.i8);
  v236.i64[0] = v235.u32[0];
  v236.i64[1] = v235.u32[1];
  int8x16_t v237 = v236;
  int16x8_t v238 = vmovl_s8(*(int8x8_t *)v233.i8);
  int32x4_t v239 = vmovl_s16(*(int16x4_t *)v238.i8);
  v236.i64[0] = v239.u32[0];
  v236.i64[1] = v239.u32[1];
  int8x16_t v240 = v236;
  int32x4_t v241 = vmovl_high_s16(v234);
  v236.i64[0] = v241.u32[0];
  v236.i64[1] = v241.u32[1];
  int8x16_t v242 = v236;
  int32x4_t v243 = vmovl_high_s16(v238);
  v236.i64[0] = v243.u32[0];
  v236.i64[1] = v243.u32[1];
  int8x16_t v244 = v236;
  v236.i64[0] = v235.u32[2];
  v236.i64[1] = v235.u32[3];
  int8x16_t v245 = v236;
  v236.i64[0] = v239.u32[2];
  v236.i64[1] = v239.u32[3];
  int8x16_t v246 = v236;
  v236.i64[0] = v241.u32[2];
  v236.i64[1] = v241.u32[3];
  int8x16_t v247 = v236;
  v236.i64[0] = v243.u32[2];
  v236.i64[1] = v243.u32[3];
  int8x16_t v248 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v236);
  int8x16_t v249 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v247);
  int8x16_t v250 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v246);
  int8x16_t v251 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v242);
  int8x16_t v252 = vceqzq_s8(*(int8x16_t *)(v230 + 344));
  int16x8_t v253 = vmovl_high_s8(v252);
  int32x4_t v254 = vmovl_s16(*(int16x4_t *)v253.i8);
  v236.i64[0] = v254.u32[0];
  v236.i64[1] = v254.u32[1];
  int8x16_t v255 = v236;
  int16x8_t v256 = vmovl_s8(*(int8x8_t *)v252.i8);
  int32x4_t v257 = vmovl_s16(*(int16x4_t *)v256.i8);
  v236.i64[0] = v257.u32[0];
  v236.i64[1] = v257.u32[1];
  int8x16_t v258 = v236;
  int32x4_t v259 = vmovl_high_s16(v253);
  v236.i64[0] = v259.u32[0];
  v236.i64[1] = v259.u32[1];
  int8x16_t v260 = v236;
  int32x4_t v261 = vmovl_high_s16(v256);
  v236.i64[0] = v261.u32[0];
  v236.i64[1] = v261.u32[1];
  int8x16_t v262 = v236;
  v236.i64[0] = v254.u32[2];
  v236.i64[1] = v254.u32[3];
  int8x16_t v263 = v236;
  v236.i64[0] = v257.u32[2];
  v236.i64[1] = v257.u32[3];
  int8x16_t v264 = v236;
  v236.i64[0] = v259.u32[2];
  v236.i64[1] = v259.u32[3];
  int8x16_t v265 = v236;
  v236.i64[0] = v261.u32[2];
  v236.i64[1] = v261.u32[3];
  int8x16_t v266 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v265);
  int8x16_t v267 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v255), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v237));
  int8x16_t v268 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v258), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v240));
  int8x16_t v269 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v260), v251);
  int8x16_t v270 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v262), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v244));
  int8x16_t v271 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v263), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v245));
  int8x16_t v272 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v264), v250);
  int8x16_t v273 = vorrq_s8(v266, v249);
  int8x16_t v274 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v236), v248);
  int8x16_t v275 = vceqzq_s8(*(int8x16_t *)(v230 + 360));
  int16x8_t v276 = vmovl_s8(*(int8x8_t *)v275.i8);
  int32x4_t v277 = vmovl_high_s16(v276);
  int16x8_t v278 = vmovl_high_s8(v275);
  int32x4_t v279 = vmovl_high_s16(v278);
  int32x4_t v280 = vmovl_s16(*(int16x4_t *)v276.i8);
  int32x4_t v281 = vmovl_s16(*(int16x4_t *)v278.i8);
  v236.i64[0] = v280.i32[0];
  v236.i64[1] = v280.i32[1];
  int8x16_t v282 = v236;
  v236.i64[0] = v281.i32[0];
  v236.i64[1] = v281.i32[1];
  int8x16_t v283 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v236);
  int8x16_t v284 = vceqzq_s8(*(int8x16_t *)(v230 + 376));
  int16x8_t v285 = vmovl_high_s8(v284);
  int32x4_t v286 = vmovl_s16(*(int16x4_t *)v285.i8);
  v236.i64[0] = v286.i32[0];
  v236.i64[1] = v286.i32[1];
  int16x8_t v287 = vmovl_s8(*(int8x8_t *)v284.i8);
  int32x4_t v288 = vmovl_s16(*(int16x4_t *)v287.i8);
  int8x16_t v289 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v236), v283), v267);
  v236.i64[0] = v288.i32[0];
  v236.i64[1] = v288.i32[1];
  int8x16_t v290 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v236), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v282));
  v236.i64[0] = v279.i32[0];
  v236.i64[1] = v279.i32[1];
  int8x16_t v291 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v236);
  int32x4_t v292 = vmovl_high_s16(v285);
  int8x16_t v293 = vorrq_s8(v290, v268);
  v236.i64[0] = v292.i32[0];
  v236.i64[1] = v292.i32[1];
  int8x16_t v294 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v236), v291);
  v236.i64[0] = v277.i32[0];
  v236.i64[1] = v277.i32[1];
  int8x16_t v295 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v236);
  int32x4_t v296 = vmovl_high_s16(v287);
  v236.i64[0] = v296.i32[0];
  v236.i64[1] = v296.i32[1];
  int8x16_t v297 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v236), v295), v270);
  v236.i64[0] = v281.i32[2];
  v236.i64[1] = v281.i32[3];
  int8x16_t v298 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v236);
  v236.i64[0] = v286.i32[2];
  v236.i64[1] = v286.i32[3];
  int8x16_t v299 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v236), v298), v271);
  v236.i64[0] = v280.i32[2];
  v236.i64[1] = v280.i32[3];
  int8x16_t v300 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v236);
  v236.i64[0] = v288.i32[2];
  v236.i64[1] = v288.i32[3];
  int8x16_t v301 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v236), v300), v272);
  v236.i64[0] = v279.i32[2];
  v236.i64[1] = v279.i32[3];
  int8x16_t v302 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v236);
  v236.i64[0] = v292.i32[2];
  v236.i64[1] = v292.i32[3];
  int8x16_t v303 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v236), v302), v273);
  v236.i64[0] = v277.i32[2];
  v236.i64[1] = v277.i32[3];
  int8x16_t v304 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v236);
  v236.i64[0] = v296.i32[2];
  v236.i64[1] = v296.i32[3];
  *((void *)v230 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v293, v289), vorrq_s8(v297, vorrq_s8(v294, v269))), (int64x2_t)vorrq_s8(vorrq_s8(v301, v299), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v236), v304), v274), v303))));
  *((void *)v230 + 3) = &unk_1EF55EF48;
  v230[312] = 1;
  unint64_t v305 = (std::__shared_weak_count *)*((void *)this + 38);
  *((void *)this + 37) = v230 + 24;
  *((void *)this + 38) = v230;
  if (v305 && !atomic_fetch_add(&v305->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
  }
  if (*((void *)&v564 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v564 + 1) + 16))(*((void *)&v564 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v564 + 1));
  }
  uint64_t v306 = operator new(0x100uLL);
  uint64_t v307 = v306;
  v306[1] = 0;
  v306[2] = 0;
  void *v306 = &unk_1EF587F70;
  long long v308 = v306 + 3;
  uint64_t v309 = *((void *)this + 37);
  uint64_t v310 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v310)
  {
    atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v306 + 3, v309, (uint64_t)v310);
    if (!atomic_fetch_add(&v310->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v306 + 3, v309, 0);
  }
  v307[3] = &unk_1EF55EF18;
  uint64_t v311 = (std::__shared_weak_count *)*((void *)this + 40);
  *((void *)this + 39) = v308;
  *((void *)this + 40) = v307;
  if (v311 && !atomic_fetch_add(&v311->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
    std::__shared_weak_count::__release_weak(v311);
  }
  uint64_t v312 = operator new(0xF0uLL);
  v312[1] = 0;
  v312[2] = 0;
  *uint64_t v312 = &unk_1EF583548;
  v312[5] = 0;
  v312[6] = 0;
  *((_DWORD *)v312 + 14) = 0;
  v312[3] = &unk_1EF55A890;
  v312[4] = 0;
  *(void *)((char *)v312 + 60) = 65537;
  *((_DWORD *)v312 + 17) = 0;
  v312[9] = 1;
  *((_WORD *)v312 + 40) = 0;
  *((unsigned char *)v312 + 82) = 3;
  *(void *)((char *)v312 + 91) = 0;
  *(void *)((char *)v312 + 83) = 0;
  *((unsigned char *)v312 + 99) = 0;
  *(void *)((char *)v312 + 156) = 0;
  *(void *)((char *)v312 + 148) = 0;
  *((_WORD *)v312 + 106) = 257;
  v312[27] = 0;
  v312[28] = 0;
  *((unsigned char *)v312 + 232) = 0;
  int8x16_t v313 = (std::__shared_weak_count *)*((void *)this + 36);
  *((void *)this + 35) = v312 + 3;
  *((void *)this + 36) = v312;
  if (v313 && !atomic_fetch_add(&v313->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
    std::__shared_weak_count::__release_weak(v313);
  }
  *(unsigned char *)(*((void *)this + 35) + 58) = 3;
  uint64_t v314 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v315 = *(void *)(v314 + 2576);
  uint64_t v316 = *(void *)(v314 + 2584);
  *(void *)&long long v564 = v315;
  *((void *)&v564 + 1) = v316;
  if (v316) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v316 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v559[0] = 0;
  uint64_t v317 = (char *)operator new(0x198uLL);
  *((void *)v317 + 1) = 0;
  *((void *)v317 + 2) = 0;
  *(void *)uint64_t v317 = &unk_1EF587D08;
  *(_OWORD *)v629 = v575;
  *(void *)&v629[16] = v576;
  {
    if (v547)
    {
      {
        if (v547)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::StandardPostchain::FGBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1E95847C0 = &ggl::StandardPostchain::pipelineDataFGBlurPipelineDeviceStructs(void)::ref;
          qword_1E95847C8 = 0;
          {
            ggl::StandardPostchain::pipelineDataFGBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
          }
          qword_1E95847D0 = (uint64_t)&ggl::StandardPostchain::pipelineDataFGBlurPipelineConstantStructs(void)::ref;
          unk_1E95847D8 = xmmword_1A28FC6E0;
        }
      }
      ggl::StandardPostchain::FGBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::FGBlurPipelineSetup::typedReflection(void)::ref;
      ggl::StandardPostchainFGBlurShader::typedReflection(v547);
      qword_1E95847F8 = (uint64_t)&ggl::StandardPostchainFGBlurShader::typedReflection(void)::ref;
      {
        ggl::StandardPostchain::pipelineStateFGBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584D90 = 0;
        qword_1E9584D98 = (uint64_t)"";
        dword_1E9584DA0 = 0;
        qword_1E9584DA8 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineAttributeBinding_0(void)::attr;
        unk_1E9584DB0 = 2;
      }
      qword_1E9584800 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9584808 = 1;
      qword_1E9584810 = 0;
      unk_1E9584818 = 2;
      qword_1E9584820 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineDeviceStructBinding(void)::ref;
      unk_1E9584828 = 0;
      {
        ggl::StandardPostchain::pipelineStateFGBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9584D30 = 0;
        qword_1E9584D38 = (uint64_t)"cameraProperties";
        dword_1E9584D40 = 3;
        qword_1E9584D48 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineConstantCameraPropertiesBinding(void)::reflection;
        unk_1E9584D50 = 5;
      }
      qword_1E9584830 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineConstantStructBinding(void)::ref;
      unk_1E9584838 = 1;
    }
  }
  long long v318 = v564;
  if (*((void *)&v564 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v317 + 4) = 0;
  *((void *)v317 + 5) = 0;
  *((_DWORD *)v317 + 14) = 0;
  *((void *)v317 + 6) = 0;
  *((void *)v317 + 3) = &unk_1EF55B208;
  *((void *)v317 + 8) = &ggl::StandardPostchain::FGBlurPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v317 + 72) = v318;
  if (*((void *)&v318 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v318 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v317[136] = 0;
  *(_OWORD *)(v317 + 140) = xmmword_1A28FC970;
  *(void *)(v317 + 156) = 0;
  *(void *)(v317 + 172) = 0;
  *(void *)(v317 + 164) = 0;
  v317[184] = 0;
  *(_OWORD *)(v317 + 188) = xmmword_1A28FC970;
  *(void *)(v317 + 204) = 0;
  *(void *)(v317 + 220) = 0;
  *(void *)(v317 + 212) = 0;
  v317[232] = 0;
  *(_OWORD *)(v317 + 236) = xmmword_1A28FC970;
  *(void *)(v317 + 252) = 0;
  *(void *)(v317 + 268) = 0;
  *(void *)(v317 + 260) = 0;
  *((void *)v317 + 37) = *(void *)&v629[16];
  *(_OWORD *)(v317 + 280) = *(_OWORD *)v629;
  *((void *)v317 + 38) = 1;
  v317[312] = 0;
  *((void *)v317 + 48) = 0;
  *((_OWORD *)v317 + 22) = 0u;
  *((_OWORD *)v317 + 23) = 0u;
  *((_OWORD *)v317 + 20) = 0u;
  *((_OWORD *)v317 + 21) = 0u;
  *((void *)v317 + 49) = 0x100000001;
  v317[400] = 0;
  v317[88] = 0;
  *(_WORD *)(v317 + 89) = v625;
  v317[91] = v626;
  *(_OWORD *)(v317 + 92) = xmmword_1A28FC970;
  *(void *)(v317 + 108) = *(void *)&v559[0];
  *((_DWORD *)v317 + 32) = 0;
  *((void *)v317 + 15) = 0;
  *((_DWORD *)v317 + 29) = 0;
  v317[132] = 15;
  if (*((void *)&v318 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v318 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v318 + 1) + 16))(*((void *)&v318 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v318 + 1));
  }
  v317[329] = 0;
  int8x16_t v319 = vceqzq_s8(*(int8x16_t *)(v317 + 328));
  int16x8_t v320 = vmovl_high_s8(v319);
  int32x4_t v321 = vmovl_s16(*(int16x4_t *)v320.i8);
  v322.i64[0] = v321.u32[0];
  v322.i64[1] = v321.u32[1];
  int8x16_t v323 = v322;
  int16x8_t v324 = vmovl_s8(*(int8x8_t *)v319.i8);
  int32x4_t v325 = vmovl_s16(*(int16x4_t *)v324.i8);
  v322.i64[0] = v325.u32[0];
  v322.i64[1] = v325.u32[1];
  int8x16_t v326 = v322;
  int32x4_t v327 = vmovl_high_s16(v320);
  v322.i64[0] = v327.u32[0];
  v322.i64[1] = v327.u32[1];
  int8x16_t v328 = v322;
  int32x4_t v329 = vmovl_high_s16(v324);
  v322.i64[0] = v329.u32[0];
  v322.i64[1] = v329.u32[1];
  int8x16_t v330 = v322;
  v322.i64[0] = v321.u32[2];
  v322.i64[1] = v321.u32[3];
  int8x16_t v331 = v322;
  v322.i64[0] = v325.u32[2];
  v322.i64[1] = v325.u32[3];
  int8x16_t v332 = v322;
  v322.i64[0] = v327.u32[2];
  v322.i64[1] = v327.u32[3];
  int8x16_t v333 = v322;
  v322.i64[0] = v329.u32[2];
  v322.i64[1] = v329.u32[3];
  int8x16_t v334 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v322);
  int8x16_t v335 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v333);
  int8x16_t v336 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v332);
  int8x16_t v337 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v328);
  int8x16_t v338 = vceqzq_s8(*(int8x16_t *)(v317 + 344));
  int16x8_t v339 = vmovl_high_s8(v338);
  int32x4_t v340 = vmovl_s16(*(int16x4_t *)v339.i8);
  v322.i64[0] = v340.u32[0];
  v322.i64[1] = v340.u32[1];
  int8x16_t v341 = v322;
  int16x8_t v342 = vmovl_s8(*(int8x8_t *)v338.i8);
  int32x4_t v343 = vmovl_s16(*(int16x4_t *)v342.i8);
  v322.i64[0] = v343.u32[0];
  v322.i64[1] = v343.u32[1];
  int8x16_t v344 = v322;
  int32x4_t v345 = vmovl_high_s16(v339);
  v322.i64[0] = v345.u32[0];
  v322.i64[1] = v345.u32[1];
  int8x16_t v346 = v322;
  int32x4_t v347 = vmovl_high_s16(v342);
  v322.i64[0] = v347.u32[0];
  v322.i64[1] = v347.u32[1];
  int8x16_t v348 = v322;
  v322.i64[0] = v340.u32[2];
  v322.i64[1] = v340.u32[3];
  int8x16_t v349 = v322;
  v322.i64[0] = v343.u32[2];
  v322.i64[1] = v343.u32[3];
  int8x16_t v350 = v322;
  v322.i64[0] = v345.u32[2];
  v322.i64[1] = v345.u32[3];
  int8x16_t v351 = v322;
  v322.i64[0] = v347.u32[2];
  v322.i64[1] = v347.u32[3];
  int8x16_t v352 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v351);
  int8x16_t v353 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v341), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v323));
  int8x16_t v354 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v344), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v326));
  int8x16_t v355 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v346), v337);
  int8x16_t v356 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v348), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v330));
  int8x16_t v357 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v349), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v331));
  int8x16_t v358 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v350), v336);
  int8x16_t v359 = vorrq_s8(v352, v335);
  int8x16_t v360 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v322), v334);
  int8x16_t v361 = vceqzq_s8(*(int8x16_t *)(v317 + 360));
  int16x8_t v362 = vmovl_s8(*(int8x8_t *)v361.i8);
  int32x4_t v363 = vmovl_high_s16(v362);
  int16x8_t v364 = vmovl_high_s8(v361);
  int32x4_t v365 = vmovl_high_s16(v364);
  int32x4_t v366 = vmovl_s16(*(int16x4_t *)v362.i8);
  int32x4_t v367 = vmovl_s16(*(int16x4_t *)v364.i8);
  v322.i64[0] = v366.i32[0];
  v322.i64[1] = v366.i32[1];
  int8x16_t v368 = v322;
  v322.i64[0] = v367.i32[0];
  v322.i64[1] = v367.i32[1];
  int8x16_t v369 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v322);
  int8x16_t v370 = vceqzq_s8(*(int8x16_t *)(v317 + 376));
  int16x8_t v371 = vmovl_high_s8(v370);
  int32x4_t v372 = vmovl_s16(*(int16x4_t *)v371.i8);
  v322.i64[0] = v372.i32[0];
  v322.i64[1] = v372.i32[1];
  int16x8_t v373 = vmovl_s8(*(int8x8_t *)v370.i8);
  int32x4_t v374 = vmovl_s16(*(int16x4_t *)v373.i8);
  int8x16_t v375 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v322), v369), v353);
  v322.i64[0] = v374.i32[0];
  v322.i64[1] = v374.i32[1];
  int8x16_t v376 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v322), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v368));
  v322.i64[0] = v365.i32[0];
  v322.i64[1] = v365.i32[1];
  int8x16_t v377 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v322);
  int32x4_t v378 = vmovl_high_s16(v371);
  int8x16_t v379 = vorrq_s8(v376, v354);
  v322.i64[0] = v378.i32[0];
  v322.i64[1] = v378.i32[1];
  int8x16_t v380 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v322), v377);
  v322.i64[0] = v363.i32[0];
  v322.i64[1] = v363.i32[1];
  int8x16_t v381 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v322);
  int32x4_t v382 = vmovl_high_s16(v373);
  v322.i64[0] = v382.i32[0];
  v322.i64[1] = v382.i32[1];
  int8x16_t v383 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v322), v381), v356);
  v322.i64[0] = v367.i32[2];
  v322.i64[1] = v367.i32[3];
  int8x16_t v384 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v322);
  v322.i64[0] = v372.i32[2];
  v322.i64[1] = v372.i32[3];
  int8x16_t v385 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v322), v384), v357);
  v322.i64[0] = v366.i32[2];
  v322.i64[1] = v366.i32[3];
  int8x16_t v386 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v322);
  v322.i64[0] = v374.i32[2];
  v322.i64[1] = v374.i32[3];
  int8x16_t v387 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v322), v386), v358);
  v322.i64[0] = v365.i32[2];
  v322.i64[1] = v365.i32[3];
  int8x16_t v388 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v322);
  v322.i64[0] = v378.i32[2];
  v322.i64[1] = v378.i32[3];
  int8x16_t v389 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v322), v388), v359);
  v322.i64[0] = v363.i32[2];
  v322.i64[1] = v363.i32[3];
  int8x16_t v390 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v322);
  v322.i64[0] = v382.i32[2];
  v322.i64[1] = v382.i32[3];
  *((void *)v317 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v379, v375), vorrq_s8(v383, vorrq_s8(v380, v355))), (int64x2_t)vorrq_s8(vorrq_s8(v387, v385), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v322), v390), v360), v389))));
  *((void *)v317 + 3) = &unk_1EF55ED68;
  v317[312] = 1;
  uint64_t v391 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v317 + 24;
  *((void *)this + 45) = v317;
  if (v391 && !atomic_fetch_add(&v391->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
    std::__shared_weak_count::__release_weak(v391);
  }
  if (*((void *)&v564 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v564 + 1) + 16))(*((void *)&v564 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v564 + 1));
  }
  uint64_t v392 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v393 = *(void *)(v392 + 2552);
  uint64_t v394 = *(void *)(v392 + 2560);
  *(void *)&long long v564 = v393;
  *((void *)&v564 + 1) = v394;
  if (v394) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v394 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v559[0] = 0;
  v395 = (char *)operator new(0x198uLL);
  *((void *)v395 + 1) = 0;
  *((void *)v395 + 2) = 0;
  *(void *)v395 = &unk_1EF587C98;
  *(_OWORD *)v629 = v575;
  *(void *)&v629[16] = v576;
  {
    if (v548)
    {
      {
        if (v548)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::StandardPostchain::BGBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1E9584730 = &ggl::StandardPostchain::pipelineDataBGBlurPipelineDeviceStructs(void)::ref;
          qword_1E9584738 = 0;
          {
            ggl::StandardPostchain::pipelineDataBGBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
          }
          qword_1E9584740 = (uint64_t)&ggl::StandardPostchain::pipelineDataBGBlurPipelineConstantStructs(void)::ref;
          *(int64x2_t *)algn_1E9584748 = vdupq_n_s64(1uLL);
        }
      }
      ggl::StandardPostchain::BGBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::BGBlurPipelineSetup::typedReflection(void)::ref;
      ggl::StandardPostchainBGBlurShader::typedReflection(v548);
      qword_1E9584768 = (uint64_t)&ggl::StandardPostchainBGBlurShader::typedReflection(void)::ref;
      {
        ggl::StandardPostchain::pipelineStateBGBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584D60 = 0;
        qword_1E9584D68 = (uint64_t)"";
        dword_1E9584D70 = 0;
        qword_1E9584D78 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineAttributeBinding_0(void)::attr;
        unk_1E9584D80 = 2;
      }
      qword_1E9584770 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9584778 = 1;
      qword_1E9584780 = 0;
      unk_1E9584788 = 1;
      qword_1E9584790 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineDeviceStructBinding(void)::ref;
      unk_1E9584798 = 0;
      {
        ggl::StandardPostchain::pipelineStateBGBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9584D00 = 0;
        qword_1E9584D08 = (uint64_t)"cameraProperties";
        dword_1E9584D10 = 3;
        qword_1E9584D18 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineConstantCameraPropertiesBinding(void)::reflection;
        unk_1E9584D20 = 5;
      }
      qword_1E95847A0 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineConstantStructBinding(void)::ref;
      unk_1E95847A8 = 1;
    }
  }
  long long v396 = v564;
  if (*((void *)&v564 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v395 + 4) = 0;
  *((void *)v395 + 5) = 0;
  *((_DWORD *)v395 + 14) = 0;
  *((void *)v395 + 6) = 0;
  *((void *)v395 + 3) = &unk_1EF55B208;
  *((void *)v395 + 8) = &ggl::StandardPostchain::BGBlurPipelineState::typedReflection(void)::ref;
  *(_OWORD *)(v395 + 72) = v396;
  if (*((void *)&v396 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v396 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v395[136] = 0;
  *(_OWORD *)(v395 + 140) = xmmword_1A28FC970;
  *(void *)(v395 + 156) = 0;
  *(void *)(v395 + 172) = 0;
  *(void *)(v395 + 164) = 0;
  v395[184] = 0;
  *(_OWORD *)(v395 + 188) = xmmword_1A28FC970;
  *(void *)(v395 + 204) = 0;
  *(void *)(v395 + 220) = 0;
  *(void *)(v395 + 212) = 0;
  v395[232] = 0;
  *(_OWORD *)(v395 + 236) = xmmword_1A28FC970;
  *(void *)(v395 + 252) = 0;
  *(void *)(v395 + 268) = 0;
  *(void *)(v395 + 260) = 0;
  *((void *)v395 + 37) = *(void *)&v629[16];
  *(_OWORD *)(v395 + 280) = *(_OWORD *)v629;
  *((void *)v395 + 38) = 1;
  v395[312] = 0;
  *((void *)v395 + 48) = 0;
  *((_OWORD *)v395 + 22) = 0u;
  *((_OWORD *)v395 + 23) = 0u;
  *((_OWORD *)v395 + 20) = 0u;
  *((_OWORD *)v395 + 21) = 0u;
  *((void *)v395 + 49) = 0x100000001;
  v395[400] = 0;
  v395[88] = 0;
  *(_WORD *)(v395 + 89) = v625;
  v395[91] = v626;
  *(_OWORD *)(v395 + 92) = xmmword_1A28FC970;
  *(void *)(v395 + 108) = *(void *)&v559[0];
  *((_DWORD *)v395 + 32) = 0;
  *((void *)v395 + 15) = 0;
  *((_DWORD *)v395 + 29) = 0;
  v395[132] = 15;
  if (*((void *)&v396 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v396 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v396 + 1) + 16))(*((void *)&v396 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v396 + 1));
  }
  v395[329] = 0;
  int8x16_t v397 = vceqzq_s8(*(int8x16_t *)(v395 + 328));
  int16x8_t v398 = vmovl_high_s8(v397);
  int32x4_t v399 = vmovl_s16(*(int16x4_t *)v398.i8);
  v400.i64[0] = v399.u32[0];
  v400.i64[1] = v399.u32[1];
  int8x16_t v401 = v400;
  int16x8_t v402 = vmovl_s8(*(int8x8_t *)v397.i8);
  int32x4_t v403 = vmovl_s16(*(int16x4_t *)v402.i8);
  v400.i64[0] = v403.u32[0];
  v400.i64[1] = v403.u32[1];
  int8x16_t v404 = v400;
  int32x4_t v405 = vmovl_high_s16(v398);
  v400.i64[0] = v405.u32[0];
  v400.i64[1] = v405.u32[1];
  int8x16_t v406 = v400;
  int32x4_t v407 = vmovl_high_s16(v402);
  v400.i64[0] = v407.u32[0];
  v400.i64[1] = v407.u32[1];
  int8x16_t v408 = v400;
  v400.i64[0] = v399.u32[2];
  v400.i64[1] = v399.u32[3];
  int8x16_t v409 = v400;
  v400.i64[0] = v403.u32[2];
  v400.i64[1] = v403.u32[3];
  int8x16_t v410 = v400;
  v400.i64[0] = v405.u32[2];
  v400.i64[1] = v405.u32[3];
  int8x16_t v411 = v400;
  v400.i64[0] = v407.u32[2];
  v400.i64[1] = v407.u32[3];
  int8x16_t v412 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v400);
  int8x16_t v413 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v411);
  int8x16_t v414 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v410);
  int8x16_t v415 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v406);
  int8x16_t v416 = vceqzq_s8(*(int8x16_t *)(v395 + 344));
  int16x8_t v417 = vmovl_high_s8(v416);
  int32x4_t v418 = vmovl_s16(*(int16x4_t *)v417.i8);
  v400.i64[0] = v418.u32[0];
  v400.i64[1] = v418.u32[1];
  int8x16_t v419 = v400;
  int16x8_t v420 = vmovl_s8(*(int8x8_t *)v416.i8);
  int32x4_t v421 = vmovl_s16(*(int16x4_t *)v420.i8);
  v400.i64[0] = v421.u32[0];
  v400.i64[1] = v421.u32[1];
  int8x16_t v422 = v400;
  int32x4_t v423 = vmovl_high_s16(v417);
  v400.i64[0] = v423.u32[0];
  v400.i64[1] = v423.u32[1];
  int8x16_t v424 = v400;
  int32x4_t v425 = vmovl_high_s16(v420);
  v400.i64[0] = v425.u32[0];
  v400.i64[1] = v425.u32[1];
  int8x16_t v426 = v400;
  v400.i64[0] = v418.u32[2];
  v400.i64[1] = v418.u32[3];
  int8x16_t v427 = v400;
  v400.i64[0] = v421.u32[2];
  v400.i64[1] = v421.u32[3];
  int8x16_t v428 = v400;
  v400.i64[0] = v423.u32[2];
  v400.i64[1] = v423.u32[3];
  int8x16_t v429 = v400;
  v400.i64[0] = v425.u32[2];
  v400.i64[1] = v425.u32[3];
  int8x16_t v430 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v429);
  int8x16_t v431 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v419), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v401));
  int8x16_t v432 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v422), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v404));
  int8x16_t v433 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v424), v415);
  int8x16_t v434 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v426), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v408));
  int8x16_t v435 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v427), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v409));
  int8x16_t v436 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v428), v414);
  int8x16_t v437 = vorrq_s8(v430, v413);
  int8x16_t v438 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v400), v412);
  int8x16_t v439 = vceqzq_s8(*(int8x16_t *)(v395 + 360));
  int16x8_t v440 = vmovl_s8(*(int8x8_t *)v439.i8);
  int32x4_t v441 = vmovl_high_s16(v440);
  int16x8_t v442 = vmovl_high_s8(v439);
  int32x4_t v443 = vmovl_high_s16(v442);
  int32x4_t v444 = vmovl_s16(*(int16x4_t *)v440.i8);
  int32x4_t v445 = vmovl_s16(*(int16x4_t *)v442.i8);
  v400.i64[0] = v444.i32[0];
  v400.i64[1] = v444.i32[1];
  int8x16_t v446 = v400;
  v400.i64[0] = v445.i32[0];
  v400.i64[1] = v445.i32[1];
  int8x16_t v447 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v400);
  int8x16_t v448 = vceqzq_s8(*(int8x16_t *)(v395 + 376));
  int16x8_t v449 = vmovl_high_s8(v448);
  int32x4_t v450 = vmovl_s16(*(int16x4_t *)v449.i8);
  v400.i64[0] = v450.i32[0];
  v400.i64[1] = v450.i32[1];
  int16x8_t v451 = vmovl_s8(*(int8x8_t *)v448.i8);
  int32x4_t v452 = vmovl_s16(*(int16x4_t *)v451.i8);
  int8x16_t v453 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v400), v447), v431);
  v400.i64[0] = v452.i32[0];
  v400.i64[1] = v452.i32[1];
  int8x16_t v454 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v400), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v446));
  v400.i64[0] = v443.i32[0];
  v400.i64[1] = v443.i32[1];
  int8x16_t v455 = vbicq_s8((int8x16_t)xmmword_1A28FCA90, v400);
  int32x4_t v456 = vmovl_high_s16(v449);
  int8x16_t v457 = vorrq_s8(v454, v432);
  v400.i64[0] = v456.i32[0];
  v400.i64[1] = v456.i32[1];
  int8x16_t v458 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v400), v455);
  v400.i64[0] = v441.i32[0];
  v400.i64[1] = v441.i32[1];
  int8x16_t v459 = vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v400);
  int32x4_t v460 = vmovl_high_s16(v451);
  v400.i64[0] = v460.i32[0];
  v400.i64[1] = v460.i32[1];
  int8x16_t v461 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v400), v459), v434);
  v400.i64[0] = v445.i32[2];
  v400.i64[1] = v445.i32[3];
  int8x16_t v462 = vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v400);
  v400.i64[0] = v450.i32[2];
  v400.i64[1] = v450.i32[3];
  int8x16_t v463 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v400), v462), v435);
  v400.i64[0] = v444.i32[2];
  v400.i64[1] = v444.i32[3];
  int8x16_t v464 = vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v400);
  v400.i64[0] = v452.i32[2];
  v400.i64[1] = v452.i32[3];
  int8x16_t v465 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v400), v464), v436);
  v400.i64[0] = v443.i32[2];
  v400.i64[1] = v443.i32[3];
  int8x16_t v466 = vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v400);
  v400.i64[0] = v456.i32[2];
  v400.i64[1] = v456.i32[3];
  int8x16_t v467 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v400), v466), v437);
  v400.i64[0] = v441.i32[2];
  v400.i64[1] = v441.i32[3];
  int8x16_t v468 = vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v400);
  v400.i64[0] = v460.i32[2];
  v400.i64[1] = v460.i32[3];
  *((void *)v395 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v457, v453), vorrq_s8(v461, vorrq_s8(v458, v433))), (int64x2_t)vorrq_s8(vorrq_s8(v465, v463), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v400), v468), v438), v467))));
  *((void *)v395 + 3) = &unk_1EF55ED18;
  v395[312] = 1;
  v469 = (std::__shared_weak_count *)*((void *)this + 47);
  *((void *)this + 46) = v395 + 24;
  *((void *)this + 47) = v395;
  if (v469 && !atomic_fetch_add(&v469->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
    std::__shared_weak_count::__release_weak(v469);
  }
  if (*((void *)&v564 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v564 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v564 + 1) + 16))(*((void *)&v564 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v564 + 1));
  }
  v470 = operator new(0x100uLL);
  v471 = v470;
  v470[1] = 0;
  v470[2] = 0;
  void *v470 = &unk_1EF587CD0;
  v472 = v470 + 3;
  uint64_t v473 = *((void *)this + 44);
  v474 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v474)
  {
    atomic_fetch_add_explicit(&v474->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v470 + 3, v473, (uint64_t)v474);
    if (!atomic_fetch_add(&v474->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
      std::__shared_weak_count::__release_weak(v474);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v470 + 3, v473, 0);
  }
  v471[3] = &unk_1EF55ED38;
  v475 = (std::__shared_weak_count *)*((void *)this + 49);
  *((void *)this + 48) = v472;
  *((void *)this + 49) = v471;
  if (v475 && !atomic_fetch_add(&v475->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
    std::__shared_weak_count::__release_weak(v475);
  }
  uint64_t v476 = *((void *)this + 48);
  v477 = *(void **)(v476 + 64);
  v477[1] = 0;
  uint64_t v478 = *((void *)this + 9);
  void *v477 = v478;
  v479 = *(void **)(v476 + 160);
  uint64_t v480 = *((void *)this + 10);
  if (v480) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v480 + 8), 1uLL, memory_order_relaxed);
  }
  v481 = (std::__shared_weak_count *)v479[1];
  void *v479 = v478;
  v479[1] = v480;
  if (v481 && !atomic_fetch_add(&v481->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
    std::__shared_weak_count::__release_weak(v481);
  }
  v482 = operator new(0x100uLL);
  v483 = v482;
  v482[1] = 0;
  v482[2] = 0;
  void *v482 = &unk_1EF587C60;
  v484 = v482 + 3;
  uint64_t v485 = *((void *)this + 46);
  v486 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v486)
  {
    atomic_fetch_add_explicit(&v486->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v482 + 3, v485, (uint64_t)v486);
    if (!atomic_fetch_add(&v486->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
      std::__shared_weak_count::__release_weak(v486);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v482 + 3, v485, 0);
  }
  v483[3] = &unk_1EF55ECE8;
  v487 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = v484;
  *((void *)this + 51) = v483;
  if (v487 && !atomic_fetch_add(&v487->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
    std::__shared_weak_count::__release_weak(v487);
  }
  uint64_t v488 = *((void *)this + 50);
  v489 = *(void **)(v488 + 64);
  v489[1] = 0;
  uint64_t v490 = *((void *)this + 9);
  void *v489 = v490;
  v491 = *(void **)(v488 + 160);
  uint64_t v492 = *((void *)this + 10);
  if (v492) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v492 + 8), 1uLL, memory_order_relaxed);
  }
  v493 = (std::__shared_weak_count *)v491[1];
  void *v491 = v490;
  v491[1] = v492;
  if (v493 && !atomic_fetch_add(&v493->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
    std::__shared_weak_count::__release_weak(v493);
  }
  uint64_t v494 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v495 = *(void *)(v494 + 2600);
  uint64_t v496 = *(void *)(v494 + 2608);
  *(void *)&v559[0] = v495;
  *((void *)&v559[0] + 1) = v496;
  if (v496) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v496 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v629[28] = 0;
  *(void *)&v629[20] = 0;
  uint64_t v630 = 0;
  v629[0] = 0;
  *(_OWORD *)&v629[4] = xmmword_1A28FC970;
  char v631 = 15;
  v497 = operator new(0x198uLL);
  v497[1] = 0;
  v497[2] = 0;
  void *v497 = &unk_1EF587DE8;
  long long v564 = v575;
  uint64_t v565 = v576;
  uint64_t v566 = 1;
  uint64_t v498 = ggl::StandardPostchain::TentBlurPipelineState::TentBlurPipelineState((uint64_t)(v497 + 3), v559, (uint64_t)v629, &v564);
  v499 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v498;
  *((void *)this + 57) = v497;
  if (v499 && !atomic_fetch_add(&v499->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
    std::__shared_weak_count::__release_weak(v499);
  }
  v500 = (std::__shared_weak_count *)*((void *)&v559[0] + 1);
  if (*((void *)&v559[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v559[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
    std::__shared_weak_count::__release_weak(v500);
  }
  uint64_t v501 = *(void *)([(VKSharedResources *)v558 shaderLibrary] + 80);
  uint64_t v502 = *(void *)(v501 + 2600);
  uint64_t v503 = *(void *)(v501 + 2608);
  *(void *)&v559[0] = v502;
  *((void *)&v559[0] + 1) = v503;
  if (v503) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v503 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v629[28] = 0;
  *(void *)&v629[20] = 0;
  uint64_t v630 = 0;
  v629[0] = 0;
  *(_OWORD *)&v629[4] = xmmword_1A28FC970;
  char v631 = 15;
  v504 = operator new(0x198uLL);
  v504[1] = 0;
  v504[2] = 0;
  void *v504 = &unk_1EF587DE8;
  long long v564 = v575;
  uint64_t v565 = v576;
  uint64_t v566 = 1;
  uint64_t v505 = ggl::StandardPostchain::TentBlurPipelineState::TentBlurPipelineState((uint64_t)(v504 + 3), v559, (uint64_t)v629, &v564);
  v506 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = v505;
  *((void *)this + 59) = v504;
  if (v506 && !atomic_fetch_add(&v506->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
    std::__shared_weak_count::__release_weak(v506);
  }
  v507 = (std::__shared_weak_count *)*((void *)&v559[0] + 1);
  if (*((void *)&v559[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v559[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
    std::__shared_weak_count::__release_weak(v507);
  }
  v508 = operator new(0x100uLL);
  v509 = v508;
  v508[1] = 0;
  v508[2] = 0;
  void *v508 = &unk_1EF587DB0;
  v510 = v508 + 3;
  uint64_t v511 = *((void *)this + 56);
  v512 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v512)
  {
    atomic_fetch_add_explicit(&v512->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v508 + 3, v511, (uint64_t)v512);
    if (!atomic_fetch_add(&v512->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
      std::__shared_weak_count::__release_weak(v512);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v508 + 3, v511, 0);
  }
  v509[3] = &unk_1EF55EDD8;
  v513 = (std::__shared_weak_count *)*((void *)this + 61);
  *((void *)this + 60) = v510;
  *((void *)this + 61) = v509;
  if (v513 && !atomic_fetch_add(&v513->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
    std::__shared_weak_count::__release_weak(v513);
  }
  v514 = operator new(0x100uLL);
  v515 = v514;
  v514[1] = 0;
  v514[2] = 0;
  void *v514 = &unk_1EF587DB0;
  v516 = v514 + 3;
  uint64_t v517 = *((void *)this + 58);
  v518 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v518)
  {
    atomic_fetch_add_explicit(&v518->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v514 + 3, v517, (uint64_t)v518);
    if (!atomic_fetch_add(&v518->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
      std::__shared_weak_count::__release_weak(v518);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v514 + 3, v517, 0);
  }
  v515[3] = &unk_1EF55EDD8;
  v519 = (std::__shared_weak_count *)*((void *)this + 63);
  *((void *)this + 62) = v516;
  *((void *)this + 63) = v515;
  if (v519 && !atomic_fetch_add(&v519->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
    std::__shared_weak_count::__release_weak(v519);
  }
  v520 = operator new(0xF0uLL);
  v520[1] = 0;
  v520[2] = 0;
  void *v520 = &unk_1EF583548;
  v520[5] = 0;
  v520[6] = 0;
  *((_DWORD *)v520 + 14) = 0;
  v520[3] = &unk_1EF55A890;
  v520[4] = 0;
  *(void *)((char *)v520 + 60) = 65537;
  *((_DWORD *)v520 + 17) = 0;
  v520[9] = 1;
  *((_WORD *)v520 + 40) = 0;
  *((unsigned char *)v520 + 82) = 3;
  *(void *)((char *)v520 + 91) = 0;
  *(void *)((char *)v520 + 83) = 0;
  *((unsigned char *)v520 + 99) = 0;
  *(void *)((char *)v520 + 156) = 0;
  *(void *)((char *)v520 + 148) = 0;
  *((_WORD *)v520 + 106) = 257;
  v520[27] = 0;
  v520[28] = 0;
  *((unsigned char *)v520 + 232) = 0;
  v521 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = v520 + 3;
  *((void *)this + 43) = v520;
  if (v521 && !atomic_fetch_add(&v521->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
    std::__shared_weak_count::__release_weak(v521);
  }
  *(unsigned char *)(*((void *)this + 42) + 58) = 3;
  v522 = operator new(0xA8uLL);
  v522[1] = 0;
  v522[2] = 0;
  void *v522 = &unk_1EF583078;
  v523 = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v522 + 3), "/Postchain/ScreenMesh");
  v524 = (std::__shared_weak_count *)*((void *)this + 26);
  *((void *)this + 25) = v523;
  *((void *)this + 26) = v522;
  if (v524 && !atomic_fetch_add(&v524->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
    std::__shared_weak_count::__release_weak(v524);
  }
  uint64_t v525 = **(void **)(*(void *)v549 + 64);
  unint64_t v526 = 4 * *(void *)(v525 + 8);
  uint64_t v527 = *(void *)(v525 + 72);
  unint64_t v528 = *(void *)(v525 + 80) - v527;
  if (v526 != v528)
  {
    if (v526 <= v528)
    {
      if (v526 < v528) {
        *(void *)(v525 + 80) = v527 + v526;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v525 + 72, v526 - v528);
    }
    v529 = *(std::__shared_weak_count **)(v525 + 32);
    *(void *)(v525 + 24) = 0;
    *(void *)(v525 + 32) = 0;
    if (v529 && !atomic_fetch_add(&v529->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
      std::__shared_weak_count::__release_weak(v529);
    }
    *(void *)(v525 + 120) = 0;
    *(_DWORD *)(v525 + 112) = 0;
    uint64_t v530 = *(void *)(v525 + 80) - *(void *)(v525 + 72);
    *(void *)(v525 + 40) = 0;
    *(void *)(v525 + 48) = v530;
    *(void *)(v525 + 56) = 0;
    *(void *)(v525 + 64) = v530;
    uint64_t v525 = **(void **)(*(void *)v549 + 64);
  }
  long long v564 = 0uLL;
  uint64_t v531 = 4 * *(void *)(v525 + 8);
  *(void *)&long long v532 = 0;
  *((void *)&v532 + 1) = v525;
  uint64_t v533 = *(void *)(v525 + 72);
  long long v564 = v532;
  uint64_t v565 = 0;
  uint64_t v566 = v531;
  uint64_t v568 = v533;
  __int16 v567 = 1;
  *(void *)uint64_t v533 = 0;
  *(void *)(v533 + 8) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v533 + 16) = xmmword_1A28FD280;
  *(_OWORD *)(v533 + 32) = _Q1;
  *(_OWORD *)(v533 + 48) = xmmword_1A28FD290;
  v539 = operator new(0xF8uLL);
  v539[1] = 0;
  v539[2] = 0;
  void *v539 = &unk_1EF583D28;
  uint64_t v540 = ggl::BufferData::BufferData((uint64_t)(v539 + 3), 2, 1, 0, 6, 6);
  *((_DWORD *)v539 + 60) = 0;
  v539[3] = &unk_1EF55B630;
  v539[4] = 2;
  v539[28] = &unk_1EF55B650;
  v539[29] = "index data";
  uint64_t v562 = v540;
  v563 = (std::__shared_weak_count *)v539;
  v559[0] = 0uLL;
  *(void *)&long long v541 = 0;
  *((void *)&v541 + 1) = v540;
  uint64_t v542 = v539[12];
  v559[0] = v541;
  v559[1] = xmmword_1A28FCD20;
  uint64_t v561 = v542;
  __int16 v560 = 1;
  *(void *)uint64_t v542 = 0x200010000;
  *(_DWORD *)(v542 + 8) = 196610;
  uint64_t v543 = *(void *)v549;
  uint64_t v544 = v562;
  v545 = v563;
  if (v563)
  {
    atomic_fetch_add_explicit(&v563->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v545->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v546 = *(std::__shared_weak_count **)(v543 + 104);
  *(void *)(v543 + 96) = v544;
  *(void *)(v543 + 104) = v545;
  if (v546 && !atomic_fetch_add(&v546->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
    std::__shared_weak_count::__release_weak(v546);
  }
  if (v545)
  {
    if (!atomic_fetch_add(&v545->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
      std::__shared_weak_count::__release_weak(v545);
    }
  }
  operator new();
}

void sub_1A1D56148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::StandardPostchain::TentBlurPipelineState::TentBlurPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    int8x16_t v82 = a4;
    int8x16_t v85 = a2;
    uint64_t v86 = a3;
    a2 = v85;
    a3 = v86;
    a4 = v82;
    if (v83)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1EB32B448 = 1;
        }
        ggl::StandardPostchain::TentBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        unk_1E95848E0 = &ggl::StandardPostchain::pipelineDataTentBlurPipelineDeviceStructs(void)::ref;
        qword_1E95848E8 = 0;
        unk_1E95848F0 = &ggl::StandardPostchain::pipelineDataTentBlurPipelineConstantStructs(void)::ref;
        xmmword_1E95848F8 = xmmword_1A28FC760;
      }
      ggl::StandardPostchain::TentBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::TentBlurPipelineSetup::typedReflection(void)::ref;
      {
        ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainTentBlurShader";
        {
          int v84 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
          qword_1EB31CF08 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1EB31CF10 = ggl::standardPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CF18 = 1;
          unk_1EB31CF20 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CF28 = 0;
          unk_1EB31CF30 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CF38 = 0;
          unk_1EB31CF40 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v84;
          *(_DWORD *)algn_1EB31CF04 = 0;
          qword_1EB31CF48 = 0;
          unk_1EB31CF50 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CF60 = 0;
          unk_1EB31CF68 = 0;
          qword_1EB31CF58 = 0;
        }
        qword_1EB31C1E8 = (uint64_t)&ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB31C1F0 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
        {
          ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x11C5A8EEELL;
          qword_1EB31D240 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1EB31D248 = 0;
          qword_1EB31D250 = 0;
          unk_1EB31D258 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D260 = 0;
          unk_1EB31D268 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D270 = 0;
          unk_1EB31D278 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D280 = 1;
          unk_1EB31D288 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D298 = 0;
          unk_1EB31D2A0 = 0;
          qword_1EB31D290 = 1;
        }
        qword_1EB31C1F8 = (uint64_t)&ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB31C200 = 475696878;
        qword_1EB31C208 = (uint64_t)&ggl::standardPostchainTentBlurShaderShaderConstants(void)::ref;
        unk_1EB31C210 = 0;
        qword_1EB31C218 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderTextures(void)::ref;
        unk_1EB31C220 = 1;
        qword_1EB31C228 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderSamplers(void)::ref;
        unk_1EB31C230 = 1;
      }
      qword_1E9584918 = (uint64_t)&ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref;
      {
        ggl::StandardPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584E60 = 0;
        qword_1E9584E68 = (uint64_t)"";
        dword_1E9584E70 = 0;
        qword_1E9584E78 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineAttributeBinding_0(void)::attr;
        unk_1E9584E80 = 2;
      }
      qword_1E9584920 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9584928 = 1;
      qword_1E9584930 = 0;
      unk_1E9584938 = 1;
      qword_1E9584940 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineDeviceStructBinding(void)::ref;
      unk_1E9584948 = 0;
      qword_1E9584950 = (uint64_t)&ggl::StandardPostchain::pipelineStateTentBlurPipelineConstantStructBinding(void)::ref;
      unk_1E9584958 = 0;
      a4 = v82;
      a2 = v85;
      a3 = v86;
    }
  }
  uint64_t v5 = *a2;
  __int16 v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int8x16_t v89 = *(_OWORD *)a3;
  *(_OWORD *)&v89[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v87 = *a4;
  long long v88 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::StandardPostchain::TentBlurPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v88;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v89;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v89[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55EE08;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::StandardPostchain::SSAOBlurPipelineState::SSAOBlurPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int v84 = a4;
    long long v87 = a2;
    uint64_t v88 = a3;
    a2 = v87;
    a3 = v88;
    a4 = v84;
    if (v85)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1EB32B448 = 1;
        }
        ggl::StandardPostchain::SSAOBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        unk_1E9584850 = &ggl::StandardPostchain::pipelineDataSSAOBlurPipelineDeviceStructs(void)::ref;
        qword_1E9584858 = 0;
        {
          ggl::StandardPostchain::pipelineDataSSAOBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::SsaoBlurParam::reflection(void)::reflection;
        }
        qword_1E9584860 = (uint64_t)&ggl::StandardPostchain::pipelineDataSSAOBlurPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1E9584868 = xmmword_1A28FC6E0;
      }
      ggl::StandardPostchain::SSAOBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::SSAOBlurPipelineSetup::typedReflection(void)::ref;
      {
        ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOBlurShader";
        {
          int v86 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
          qword_1EB31CE98 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1EB31CEA0 = ggl::standardPostchainSSAOBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CEA8 = 1;
          unk_1EB31CEB0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CEB8 = 0;
          unk_1EB31CEC0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CEC8 = 0;
          unk_1EB31CED0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref = v86;
          *(_DWORD *)algn_1EB31CE94 = 0;
          qword_1EB31CED8 = 0;
          unk_1EB31CEE0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CEF0 = 0;
          unk_1EB31CEF8 = 0;
          qword_1EB31CEE8 = 0;
        }
        qword_1EB31C188 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB31C190 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
        {
          ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1AAC07444;
          qword_1EB31D150 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1EB31D158 = 0;
          qword_1EB31D160 = 0;
          unk_1EB31D168 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D170 = 1;
          unk_1EB31D178 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D180 = 0;
          unk_1EB31D188 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D190 = 2;
          unk_1EB31D198 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D1A8 = 0;
          unk_1EB31D1B0 = 0;
          qword_1EB31D1A0 = 2;
        }
        qword_1EB31C198 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB31C1A0 = -1430227900;
        qword_1EB31C1A8 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderConstants(void)::ref;
        unk_1EB31C1B0 = 1;
        qword_1EB31C1B8 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderTextures(void)::ref;
        unk_1EB31C1C0 = 2;
        qword_1EB31C1C8 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderSamplers(void)::ref;
        unk_1EB31C1D0 = 2;
      }
      qword_1E9584888 = (uint64_t)&ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref;
      {
        ggl::StandardPostchain::pipelineStateSSAOBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9584E30 = 0;
        qword_1E9584E38 = (uint64_t)"";
        dword_1E9584E40 = 0;
        qword_1E9584E48 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineAttributeBinding_0(void)::attr;
        unk_1E9584E50 = 2;
      }
      qword_1E9584890 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9584898 = 1;
      qword_1E95848A0 = 0;
      unk_1E95848A8 = 2;
      qword_1E95848B0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineDeviceStructBinding(void)::ref;
      unk_1E95848B8 = 0;
      {
        ggl::StandardPostchain::pipelineStateSSAOBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9584DC0 = 0;
        qword_1E9584DC8 = (uint64_t)"ssaoBlurParam";
        dword_1E9584DD0 = 3;
        qword_1E9584DD8 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineConstantSsaoBlurParamBinding(void)::reflection;
        unk_1E9584DE0 = 4;
      }
      qword_1E95848C0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOBlurPipelineConstantStructBinding(void)::ref;
      unk_1E95848C8 = 1;
      a4 = v84;
      a2 = v87;
      a3 = v88;
    }
  }
  uint64_t v7 = *a2;
  char v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int8x16_t v91 = *(_OWORD *)a3;
  *(_OWORD *)&v91[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v89 = *a4;
  long long v90 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::StandardPostchain::SSAOBlurPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v89;
  *(_OWORD *)(a1 + 272) = v90;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v91;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v91[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 305) = (a5 & 2) != 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  *(void *)a1 = &unk_1EF55EDB8;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::StandardPostchain::SSAOPipelineState::SSAOPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    int v84 = a4;
    int v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1EB32B448 = 1;
          }
          ggl::StandardPostchain::SSAOPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1E95846A0 = &ggl::StandardPostchain::pipelineDataSSAOPipelineDeviceStructs(void)::ref;
          qword_1E95846A8 = 0;
          {
            ggl::StandardPostchain::pipelineDataSSAOPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::SSAOConstants::reflection(void)::reflection;
          }
          qword_1E95846B0 = (uint64_t)&ggl::StandardPostchain::pipelineDataSSAOPipelineConstantStructs(void)::ref;
          unk_1E95846B8 = xmmword_1A28FC6E0;
        }
      }
      ggl::StandardPostchain::SSAOPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::SSAOPipelineSetup::typedReflection(void)::ref;
      ggl::StandardPostchainSSAOShader::typedReflection(v85);
      qword_1E95846D8 = (uint64_t)&ggl::StandardPostchainSSAOShader::typedReflection(void)::ref;
      {
        ggl::StandardPostchain::pipelineStateSSAOPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9584CC8 = 0;
        qword_1E9584CD0 = (uint64_t)"";
        dword_1E9584CD8 = 0;
        qword_1E9584CE0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineAttributeBinding_0(void)::attr;
        unk_1E9584CE8 = 2;
      }
      qword_1E95846E0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E95846E8 = 1;
      qword_1E95846F0 = 0;
      unk_1E95846F8 = 2;
      qword_1E9584700 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineDeviceStructBinding(void)::ref;
      unk_1E9584708 = 0;
      {
        ggl::StandardPostchain::pipelineStateSSAOPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9584C88 = 0;
        qword_1E9584C90 = (uint64_t)"ssaoConstants";
        dword_1E9584C98 = 3;
        qword_1E9584CA0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineConstantSsaoConstantsBinding(void)::reflection;
        unk_1E9584CA8 = 11;
      }
      qword_1E9584710 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOPipelineConstantStructBinding(void)::ref;
      unk_1E9584718 = 1;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  char v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::StandardPostchain::SSAOPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 305) = (a5 & 2) != 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  *(void *)a1 = &unk_1EF55ECC8;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

void sub_1A1D5BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16)
{
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);

  _Unwind_Resume(a1);
}

void grl::IconManager::setConfigPackLocationCacheSize(grl::IconManager *this, uint64_t a2)
{
  BOOL v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  *((void *)this + 60) = a2;
  uint64_t v5 = *((void *)this + 12);
  if (v5)
  {
    __int16 v6 = (std::mutex *)(v5 + 304);
    std::mutex::lock((std::mutex *)(v5 + 304));
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = v7 + 152;
    for (uint64_t i = *(void *)(v7 + 160); i != v8; uint64_t i = *(void *)(i + 8))
      grl::codec::IconConfigPack::setLocationCacheSize(*(grl::codec::IconConfigPack **)(i + 48), a2);
    std::mutex::unlock(v6);
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

void grl::IconManager::setDataPackImageAtlasSize(grl::IconManager *this, uint64_t a2)
{
  BOOL v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  *((void *)this + 59) = a2;
  uint64_t v5 = *((void *)this + 12);
  if (v5)
  {
    __int16 v6 = (std::mutex *)(v5 + 240);
    std::mutex::lock((std::mutex *)(v5 + 240));
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = v7 + 80;
    for (uint64_t i = *(void *)(v7 + 88); i != v8; uint64_t i = *(void *)(i + 8))
      grl::codec::IconDataPack::setImageAtlasSize(*(grl::codec::IconDataPack **)(i + 48), a2);
    std::mutex::unlock(v6);
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

void grl::IconManager::setPackCacheSize(grl::IconManager *this, uint64_t a2)
{
  BOOL v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  *((void *)this + 61) = a2;
  uint64_t v5 = *((void *)this + 12);
  if (v5)
  {
    __int16 v6 = (std::mutex *)(v5 + 240);
    std::mutex::lock((std::mutex *)(v5 + 240));
    uint64_t v7 = *((void *)this + 12);
    *(void *)(v7 + 32) = a2;
    while (*(void *)(v7 + 96) > *(void *)(v7 + 32))
      geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop((void *)(v7 + 32));
    std::mutex::unlock(v6);
    uint64_t v8 = (std::mutex *)(*((void *)this + 12) + 304);
    std::mutex::lock(v8);
    uint64_t v9 = *((void *)this + 12);
    *(void *)(v9 + 104) = a2;
    while (*(void *)(v9 + 168) > *(void *)(v9 + 104))
      geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop((void *)(v9 + 104));
    std::mutex::unlock(v8);
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

void md::LabelClusterBuilder::createClusters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v127 = 0;
  int8x8_t v128 = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v129 = 0;
  uint64_t v130 = v4;
  uint64_t v5 = *(char **)a2;
  __int16 v6 = *(char **)(a2 + 8);
  uint64_t v7 = (uint64_t)&v6[-*(void *)a2];
  if (v7)
  {
    if (v7 < 0) {
      abort();
    }
    uint64_t v8 = v7 >> 3;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v127 = (unint64_t *)v7;
    uint64_t v129 = v7 + 8 * v8;
    do
    {
      if (v7) {
        *(void *)uint64_t v7 = *(void *)v5;
      }
      v5 += 8;
      v7 += 8;
    }
    while (v5 != v6);
    int8x8_t v128 = (unint64_t *)v7;
    uint64_t v9 = *(void *)(a2 + 24);
    char v10 = *(char **)a2;
    int8x16_t v11 = *(char **)(a2 + 8);
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = v9;
    uint64_t v12 = v11 - v10;
    if (v11 == v10)
    {
      int32x4_t v14 = 0;
    }
    else
    {
      if (v12 < 0) {
        abort();
      }
      int16x8_t v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v9 + 16))(v9, v11 - v10, 8);
      int32x4_t v14 = (unint64_t *)v13;
      uint64_t v15 = 0;
      uint64_t v123 = (unint64_t *)v13;
      uint64_t v125 = (unint64_t *)&v13[v12 >> 3];
      do
      {
        if (&v13[v15]) {
          v13[v15] = *(void *)&v10[v15 * 8];
        }
        ++v15;
      }
      while (&v10[v15 * 8] != v11);
      uint64_t v124 = (unint64_t *)&v13[v15];
      uint64_t v7 = (uint64_t)v128;
    }
  }
  else
  {
    int32x4_t v14 = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = v4;
  }
  unint64_t v16 = 126 - 2 * __clz((v7 - (uint64_t)v127) >> 3);
  if ((unint64_t *)v7 == v127) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **,false>(v127, (unint64_t *)v7, v17, 1);
  unint64_t v18 = 126 - 2 * __clz(v124 - v14);
  if (v124 == v14) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **,false>(v14, v124, v19, 1);
  int32x4_t v20 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    operator new();
  }
  uint64_t v106 = mdm::Allocator::instance(void)::alloc;
  uint64_t v21 = (char *)v128 - (char *)v127;
  if ((unint64_t)((char *)v128 - (char *)v127) >= 9)
  {
    int32x4_t v22 = 0;
    int8x16_t v23 = 0;
    unint64_t v24 = 0;
    double v25 = *(double *)(a1 + 8) * 0.001953125;
    double v26 = 0.0;
    while (1)
    {
      int8x16_t v118 = 0;
      int8x16_t v119 = 0;
      double v122 = 1.79769313e308;
      md::LabelClusterBuilder::findClosestPair(&v127, 0, v21 >> 3, &v122, &v118, (uint64_t **)&v123);
      if (v118) {
        BOOL v27 = v119 == 0;
      }
      else {
        BOOL v27 = 1;
      }
      if (v27) {
        goto LABEL_127;
      }
      double v28 = v122;
      if (v122 > v25) {
        goto LABEL_127;
      }
      if (v122 < v26)
      {
        double v122 = v26;
        double v28 = v26;
      }
      v131[0] = v28;
      uint64_t v29 = *(void *)(a3 + 24);
      if (!v29)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      unint64_t v117 = (*(uint64_t (**)(uint64_t, void **, double *))(*(void *)v29 + 48))(v29, &v118, v131);
      if ((unint64_t)v23 >= v24) {
        break;
      }
      if (v23) {
        *(void *)int8x16_t v23 = v117;
      }
      int8x16_t v30 = v23 + 8;
LABEL_55:
      int8x16_t v41 = v118;
      int8x16_t v42 = v119;
      int8x16_t v44 = v127;
      int8x16_t v43 = v128;
      {
        operator new();
      }
      uint64_t v45 = v43 - v44;
      unint64_t v46 = v45 - 1;
      unint64_t v113 = v24;
      int8x16_t v114 = v30;
      uint64_t v111 = *((void *)v20 + 91);
      if (v45 == 1)
      {
        int32x4_t v109 = 0;
        int8x16_t v48 = 0;
      }
      else
      {
        if (v46 >> 61) {
          goto LABEL_166;
        }
        uint64_t v47 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v20 + 91) + 16))(*((void *)v20 + 91), 8 * v46, 8);
        int8x16_t v48 = (unint64_t *)v47;
        uint64_t v49 = 0;
        int32x4_t v109 = (unint64_t *)(v47 + 8 * v46);
        do
        {
          if (v47 + v49) {
            *(void *)(v47 + v49) = 0;
          }
          v49 += 8;
        }
        while (8 * v45 - 8 != v49);
      }
      int8x16_t v50 = v127;
      int8x16_t v51 = v128;
      if (v127 == v128)
      {
        uint64_t v53 = 0;
LABEL_82:
        v48[v53] = v117;
        goto LABEL_83;
      }
      char v52 = 0;
      uint64_t v53 = 0;
      int8x16_t v54 = (md::LabelPoint *)(v117 + 16);
      do
      {
        unint64_t v55 = *v50;
        if ((void *)*v50 != v41 && v55 != (void)v42)
        {
          if ((v52 & 1) == 0)
          {
            double v57 = *(double *)md::LabelPoint::mercatorPoint(v54);
            if (v57 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v55 + 16)))
            {
              if (v55 <= v117)
              {
LABEL_78:
                char v52 = 0;
                goto LABEL_67;
              }
            }
            else
            {
              double v58 = *(double *)md::LabelPoint::mercatorPoint(v54);
              if (v58 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v55 + 16))) {
                goto LABEL_78;
              }
            }
            v48[v53++] = v117;
          }
          char v52 = 1;
LABEL_67:
          v48[v53++] = v55;
        }
        ++v50;
      }
      while (v50 != v51);
      int32x4_t v20 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      if ((v52 & 1) == 0) {
        goto LABEL_82;
      }
LABEL_83:
      int32x4_t v59 = v127;
      uint64_t v60 = v129;
      uint64_t v127 = v48;
      int8x8_t v128 = v109;
      uint64_t v129 = (uint64_t)v109;
      if (v59) {
        (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v111 + 40))(v111, v59, v60 - (void)v59);
      }
      int8x16_t v62 = v123;
      int32x4_t v61 = v124;
      {
        operator new();
      }
      uint64_t v63 = v61 - v62;
      uint64_t v64 = *((void *)v20 + 91);
      unint64_t v65 = v63 - 1;
      if (v63 == 1)
      {
        int8x16_t v112 = 0;
        int8x16_t v67 = 0;
        goto LABEL_93;
      }
      if (v65 >> 61) {
LABEL_166:
      }
        abort();
      uint64_t v66 = (*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v64 + 16))(*((void *)v20 + 91), 8 * v65, 8);
      int8x16_t v67 = (uint64_t *)v66;
      uint64_t v68 = 0;
      int8x16_t v112 = (unint64_t *)(v66 + 8 * v65);
      do
      {
        if (v66 + v68) {
          *(void *)(v66 + v68) = 0;
        }
        v68 += 8;
      }
      while (8 * v63 - 8 != v68);
LABEL_93:
      int8x16_t v69 = v124;
      int8x16_t v110 = v123;
      if (v123 == v124)
      {
        uint64_t v71 = 0;
LABEL_112:
        v67[v71] = v117;
        goto LABEL_113;
      }
      uint64_t v108 = v64;
      char v70 = 0;
      uint64_t v71 = 0;
      int8x16_t v72 = (md::LabelPoint *)(v117 + 16);
      int16x8_t v73 = v123;
      while (2)
      {
        unint64_t v74 = *v73;
        if ((void *)*v73 == v41 || v74 == (void)v42) {
          goto LABEL_98;
        }
        if (v70) {
          goto LABEL_96;
        }
        double v76 = *(double *)(md::LabelPoint::mercatorPoint(v72) + 8);
        if (v76 != *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v74 + 16)) + 8))
        {
          double v77 = *(double *)(md::LabelPoint::mercatorPoint(v72) + 8);
          if (v77 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v74 + 16)) + 8)) {
            goto LABEL_108;
          }
LABEL_95:
          v67[v71++] = v117;
LABEL_96:
          char v70 = 1;
          goto LABEL_97;
        }
        if (v74 > v117) {
          goto LABEL_95;
        }
LABEL_108:
        char v70 = 0;
LABEL_97:
        v67[v71++] = v74;
LABEL_98:
        if (++v73 != v69) {
          continue;
        }
        break;
      }
      int32x4_t v20 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      uint64_t v64 = v108;
      if ((v70 & 1) == 0) {
        goto LABEL_112;
      }
LABEL_113:
      uint64_t v123 = (unint64_t *)v67;
      uint64_t v124 = v112;
      int32x4_t v78 = v125;
      uint64_t v125 = v112;
      if (v110) {
        (*(void (**)(uint64_t, unint64_t *, int64_t))(*(void *)v64 + 40))(v64, v110, (char *)v78 - (char *)v110);
      }
      uint64_t v21 = (char *)v128 - (char *)v127;
      double v26 = v28;
      unint64_t v24 = v113;
      int8x16_t v23 = v114;
      if ((unint64_t)((char *)v128 - (char *)v127) <= 8) {
        goto LABEL_127;
      }
    }
    uint64_t v31 = (v23 - v22) >> 3;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61) {
      abort();
    }
    unint64_t v33 = v24 - (void)v22;
    if ((uint64_t)(v24 - (void)v22) >> 2 > v32) {
      unint64_t v32 = (uint64_t)(v24 - (void)v22) >> 2;
    }
    if (v33 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v34 = v32;
    }
    if (v34)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106 + 16))(v106, 8 * v34, 8);
      int32x4_t v36 = (char *)(v35 + 8 * v31);
      unint64_t v24 = v35 + 8 * v34;
      if (v35) {
        *(void *)int32x4_t v36 = v117;
      }
    }
    else
    {
      unint64_t v24 = 0;
      int32x4_t v36 = (char *)(8 * v31);
    }
    int8x16_t v37 = v36;
    if (v23 != v22)
    {
      unint64_t v38 = v23 - v22 - 8;
      if (v38 < 0x138
        || &v36[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v36 - 8
        || &v23[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v23 - 8
        || (unint64_t)(v23 - v36) < 0x20)
      {
        int8x16_t v39 = v23;
        int8x16_t v37 = v36;
      }
      else
      {
        uint64_t v79 = (v38 >> 3) + 1;
        int8x16_t v39 = &v23[-8 * (v79 & 0x3FFFFFFFFFFFFFFCLL)];
        int8x16_t v80 = v36 - 16;
        int8x16_t v81 = v23 - 16;
        uint64_t v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v83 = *(_OWORD *)v81;
          *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
          *(_OWORD *)int8x16_t v80 = v83;
          v80 -= 32;
          v81 -= 32;
          v82 -= 4;
        }
        while (v82);
        int8x16_t v37 = &v36[-8 * (v79 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_52;
        }
      }
      do
      {
        uint64_t v40 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v37 - 1) = v40;
        v37 -= 8;
      }
      while (v39 != v22);
    }
LABEL_52:
    int8x16_t v30 = v36 + 8;
    if (v22) {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v106 + 40))(v106, v22, v33);
    }
    int32x4_t v22 = v37;
    goto LABEL_55;
  }
  unint64_t v24 = 0;
  int8x16_t v23 = 0;
  int32x4_t v22 = 0;
LABEL_127:
  int v84 = (int)(float)(*(float *)a1 * 5.0);
  if ((v84 & 0x80000000) == 0)
  {
    unint64_t v85 = 0;
    int8x16_t v115 = v23;
    unint64_t v86 = (v23 - v22) >> 3;
    char v87 = 1;
    do
    {
      int64_t v89 = v85;
      double v90 = *(double *)(a1 + 8);
      double v91 = exp2(-(float)((float)v84 * 0.2)) * (0.001953125 * v90);
      if (v85 <= v86) {
        unint64_t v85 = v86;
      }
      int64_t v92 = v89;
      while (v85 != v92)
      {
        double v93 = (*(double (**)(void))(**(void **)&v22[8 * v92] + 48))(*(void *)&v22[8 * v92]);
        ++v92;
        if (v93 > v91)
        {
          unint64_t v85 = v92 - 1;
          break;
        }
      }
      for (int64_t i = v85; i > v89; --i)
      {
        int8x16_t v95 = *(unsigned char **)&v22[8 * i - 8];
        if (!v95[80]) {
          (*(void (**)(unsigned char *, void, float))(*(void *)v95 + 56))(v95, v87 & 1, (float)v84 * 0.2);
        }
      }
      char v87 = 0;
    }
    while (v84-- > 0);
    int32x4_t v20 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    int8x16_t v23 = v115;
  }
  if (v22 != v23)
  {
    int16x8_t v96 = v22;
    while (1)
    {
      if (!(*(unsigned int (**)(void))(**(void **)v96 + 40))()) {
        goto LABEL_145;
      }
      int8x16_t v118 = 0;
      int8x16_t v119 = 0;
      uint64_t v120 = 0;
      {
        operator new();
      }
      uint64_t v121 = *((void *)v20 + 91);
      (*(void (**)(void, void **, uint64_t, void))(**(void **)v96 + 16))(*(void *)v96, &v118, 2, 0);
      int32x4_t v97 = v118;
      int8x16_t v98 = v119;
      if (v118 == v119) {
        goto LABEL_155;
      }
      unint64_t v99 = (char *)v119 - (char *)v118 - 8;
      int32x4_t v100 = v118;
      if (v99 <= 7) {
        goto LABEL_154;
      }
      uint64_t v101 = (v99 >> 3) + 1;
      int16x8_t v102 = v118 + 1;
      uint64_t v103 = v101 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v104 = *v102;
        *(_DWORD *)(*(v102 - 1) + 8) = 1132199936;
        *(_DWORD *)(v104 + 8) = 1132199936;
        v102 += 2;
        v103 -= 2;
      }
      while (v103);
      if (v101 != (v101 & 0x3FFFFFFFFFFFFFFELL)) {
        break;
      }
LABEL_144:
      int8x16_t v119 = v97;
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v121 + 40))(v121, v97, v120 - (void)v97);
LABEL_145:
      v96 += 8;
      if (v96 == v23) {
        goto LABEL_159;
      }
    }
    int32x4_t v100 = &v97[v101 & 0x3FFFFFFFFFFFFFFELL];
    do
    {
LABEL_154:
      uint64_t v105 = *v100++;
      *(_DWORD *)(v105 + 8) = 1132199936;
    }
    while (v100 != v98);
LABEL_155:
    if (!v97) {
      goto LABEL_145;
    }
    goto LABEL_144;
  }
LABEL_159:
  if (v22) {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v106 + 40))(v106, v22, v24 - (void)v22);
  }
  if (v123)
  {
    uint64_t v124 = v123;
    (*(void (**)(uint64_t, unint64_t *, int64_t))(*(void *)v126 + 40))(v126, v123, (char *)v125 - (char *)v123);
  }
  if (v127)
  {
    int8x8_t v128 = v127;
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v130 + 40))(v130, v127, v129 - (void)v127);
  }
}

void sub_1A1D5CFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (!a27) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a30 + 40))(a30, a27, a29 - a27);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  double v6 = 0.5;
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v505 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  float64x2_t v510 = _Q0;
LABEL_2:
  uint64_t v12 = a2;
  int16x8_t v13 = a2 - 1;
  uint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v15 = (char *)v12 - (char *)j;
    uint64_t v16 = v12 - j;
    if (_ZF || !_CF)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return;
        case 2:
          unint64_t v243 = *v13;
          unint64_t v244 = *a1;
          int8x16_t v245 = (md::LabelPoint *)(*v13 + 16);
          double v246 = *(double *)(md::LabelPoint::mercatorPoint(v245) + 8);
          if (v246 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v244 + 16)) + 8))
          {
            int8x16_t v247 = a2 - 1;
            if (v243 >= v244) {
              return;
            }
          }
          else
          {
            double v462 = *(double *)(md::LabelPoint::mercatorPoint(v245) + 8);
            uint64_t v463 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v244 + 16));
            int8x16_t v247 = a2 - 1;
            if (v462 >= *(double *)(v463 + 8)) {
              return;
            }
          }
          unint64_t v464 = *a1;
          *a1 = *v247;
          *int8x16_t v247 = v464;
          break;
        case 3:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, v13);
          return;
        case 4:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, v13);
          return;
        case 5:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a1 + 3, v13);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 191) {
      break;
    }
    if (!a3)
    {
      if (a1 == v12) {
        return;
      }
      unint64_t v465 = v15;
      v500 = a1;
      int64_t v307 = (unint64_t)(v16 - 2) >> 1;
      int64_t v308 = v307;
      while (1)
      {
        int64_t v310 = v308;
        if (v307 < v308) {
          goto LABEL_207;
        }
        int64_t v468 = v308;
        uint64_t v311 = (2 * v308) | 1;
        uint64_t v312 = &v500[v311];
        if (2 * v308 + 2 < v16)
        {
          unint64_t v313 = *v312;
          unint64_t v314 = v312[1];
          uint64_t v315 = (md::LabelPoint *)(*v312 + 16);
          double v316 = *(double *)(md::LabelPoint::mercatorPoint(v315) + 8);
          if (v316 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v314 + 16)) + 8))
          {
            if (v313 >= v314) {
              goto LABEL_214;
            }
LABEL_213:
            ++v312;
            uint64_t v311 = 2 * v310 + 2;
            goto LABEL_214;
          }
          double v335 = *(double *)(md::LabelPoint::mercatorPoint(v315) + 8);
          if (v335 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v314 + 16)) + 8)) {
            goto LABEL_213;
          }
        }
LABEL_214:
        unint64_t v317 = *v312;
        unint64_t v318 = v500[v310];
        int8x16_t v319 = (md::LabelPoint *)(*v312 + 16);
        double v320 = *(double *)(md::LabelPoint::mercatorPoint(v319) + 8);
        if (v320 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v318 + 16)) + 8))
        {
          _CF = v317 >= v318;
          int64_t v307 = (unint64_t)(v16 - 2) >> 1;
          if (_CF) {
            goto LABEL_220;
          }
        }
        else
        {
          double v321 = *(double *)(md::LabelPoint::mercatorPoint(v319) + 8);
          int64_t v307 = (unint64_t)(v16 - 2) >> 1;
          if (v321 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v318 + 16)) + 8))
          {
LABEL_220:
            unint64_t v322 = v500[v468];
            v500[v468] = *v312;
            if (v307 >= v311)
            {
              v507 = (md::LabelPoint *)(v322 + 16);
              unint64_t v466 = v322;
              while (1)
              {
                uint64_t v324 = 2 * v311;
                uint64_t v311 = (2 * v311) | 1;
                uint64_t v309 = &v500[v311];
                uint64_t v325 = v324 + 2;
                if (v324 + 2 >= v16) {
                  goto LABEL_229;
                }
                unint64_t v326 = *v309;
                unint64_t v327 = v309[1];
                int8x16_t v328 = (md::LabelPoint *)(*v309 + 16);
                double v329 = *(double *)(md::LabelPoint::mercatorPoint(v328) + 8);
                if (v329 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v327 + 16)) + 8)) {
                  break;
                }
                double v333 = *(double *)(md::LabelPoint::mercatorPoint(v328) + 8);
                uint64_t v334 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v327 + 16));
                int64_t v307 = (unint64_t)(v16 - 2) >> 1;
                unint64_t v322 = v466;
                if (v333 < *(double *)(v334 + 8)) {
                  goto LABEL_228;
                }
LABEL_229:
                unint64_t v330 = *v309;
                int8x16_t v331 = (md::LabelPoint *)(*v309 + 16);
                double v332 = *(double *)(md::LabelPoint::mercatorPoint(v331) + 8);
                if (v332 == *(double *)(md::LabelPoint::mercatorPoint(v507) + 8))
                {
                  if (v330 < v322) {
                    goto LABEL_205;
                  }
                }
                else
                {
                  double v323 = *(double *)(md::LabelPoint::mercatorPoint(v331) + 8);
                  if (v323 < *(double *)(md::LabelPoint::mercatorPoint(v507) + 8)) {
                    goto LABEL_205;
                  }
                }
                *uint64_t v312 = *v309;
                uint64_t v312 = v309;
                if (v307 < v311) {
                  goto LABEL_206;
                }
              }
              _CF = v326 >= v327;
              int64_t v307 = (unint64_t)(v16 - 2) >> 1;
              unint64_t v322 = v466;
              if (_CF) {
                goto LABEL_229;
              }
LABEL_228:
              ++v309;
              uint64_t v311 = v325;
              goto LABEL_229;
            }
LABEL_205:
            uint64_t v309 = v312;
LABEL_206:
            *uint64_t v309 = v322;
            int64_t v310 = v468;
          }
        }
LABEL_207:
        int64_t v308 = v310 - 1;
        if (!v310)
        {
          int8x16_t v336 = v500;
          uint64_t v337 = v465 >> 3;
          float64x2_t v508 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          while (1)
          {
            uint64_t v339 = 0;
            unint64_t v469 = *v336;
            int32x4_t v340 = v336;
            do
            {
              int8x16_t v341 = v340;
              v340 += v339 + 1;
              uint64_t v342 = 2 * v339;
              uint64_t v339 = (2 * v339) | 1;
              uint64_t v343 = v342 + 2;
              if (v342 + 2 < v337)
              {
                unint64_t v344 = *v340;
                unint64_t v345 = v340[1];
                if (!*(unsigned char *)(*v340 + 61) && *(unsigned char *)(v344 + 62))
                {
                  long double v346 = *(double *)(v344 + 16);
                  long double v347 = *(double *)(v344 + 24);
                  long double v348 = *(double *)(v344 + 32);
                  double v349 = sqrt(v346 * v346 + v347 * v347);
                  double v350 = atan2(v348, v349 * 0.996647189);
                  long double v476 = atan2(v347, v346);
                  __double2 v351 = __sincos_stret(v350);
                  long double v352 = atan2(v348 + v351.__sinval * v351.__sinval * 42841.3115 * v351.__sinval, v349 + v351.__cosval * v351.__cosval * -42697.6727 * v351.__cosval);
                  long double v353 = tan(v352 * 0.5 + 0.785398163);
                  long double v354 = log(v353);
                  v355.f64[0] = v476;
                  v355.f64[1] = v354;
                  *(float64x2_t *)(v344 + 40) = vmlaq_f64(v510, v508, v355);
                  *(unsigned char *)(v344 + 61) = 1;
                }
                double v356 = *(double *)(v344 + 48);
                if (*(unsigned char *)(v345 + 61))
                {
                  int v357 = 1;
                }
                else
                {
                  int v357 = *(unsigned __int8 *)(v345 + 62);
                  if (*(unsigned char *)(v345 + 62))
                  {
                    long double v358 = *(double *)(v345 + 16);
                    long double v359 = *(double *)(v345 + 24);
                    long double v360 = *(double *)(v345 + 32);
                    double v361 = sqrt(v358 * v358 + v359 * v359);
                    double v362 = atan2(v360, v361 * 0.996647189);
                    long double v477 = atan2(v359, v358);
                    __double2 v363 = __sincos_stret(v362);
                    long double v364 = atan2(v360 + v363.__sinval * v363.__sinval * 42841.3115 * v363.__sinval, v361 + v363.__cosval * v363.__cosval * -42697.6727 * v363.__cosval);
                    long double v365 = tan(v364 * 0.5 + 0.785398163);
                    long double v366 = log(v365);
                    v367.f64[0] = v477;
                    v367.f64[1] = v366;
                    *(float64x2_t *)(v345 + 40) = vmlaq_f64(v510, v508, v367);
                    int v357 = 1;
                    *(unsigned char *)(v345 + 61) = 1;
                  }
                }
                if (v356 == *(double *)(v345 + 48))
                {
                  if (v344 < v345) {
                    goto LABEL_240;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v344 + 61) && *(unsigned char *)(v344 + 62))
                  {
                    long double v368 = *(double *)(v344 + 16);
                    long double v369 = *(double *)(v344 + 24);
                    long double v370 = *(double *)(v344 + 32);
                    double v371 = sqrt(v368 * v368 + v369 * v369);
                    double v372 = atan2(v370, v371 * 0.996647189);
                    long double v478 = atan2(v369, v368);
                    __double2 v373 = __sincos_stret(v372);
                    long double v374 = atan2(v370 + v373.__sinval * v373.__sinval * 42841.3115 * v373.__sinval, v371 + v373.__cosval * v373.__cosval * -42697.6727 * v373.__cosval);
                    long double v375 = tan(v374 * 0.5 + 0.785398163);
                    long double v376 = log(v375);
                    v377.f64[0] = v478;
                    v377.f64[1] = v376;
                    *(float64x2_t *)(v344 + 40) = vmlaq_f64(v510, v508, v377);
                    *(unsigned char *)(v344 + 61) = 1;
                    int v357 = *(unsigned __int8 *)(v345 + 61);
                  }
                  double v378 = *(double *)(v344 + 48);
                  if (!v357 && *(unsigned char *)(v345 + 62))
                  {
                    long double v379 = *(double *)(v345 + 16);
                    long double v380 = *(double *)(v345 + 24);
                    long double v381 = *(double *)(v345 + 32);
                    double v382 = sqrt(v379 * v379 + v380 * v380);
                    double v383 = atan2(v381, v382 * 0.996647189);
                    long double v479 = atan2(v380, v379);
                    __double2 v384 = __sincos_stret(v383);
                    long double v385 = atan2(v381 + v384.__sinval * v384.__sinval * 42841.3115 * v384.__sinval, v382 + v384.__cosval * v384.__cosval * -42697.6727 * v384.__cosval);
                    long double v386 = tan(v385 * 0.5 + 0.785398163);
                    long double v387 = log(v386);
                    v388.f64[0] = v479;
                    v388.f64[1] = v387;
                    *(float64x2_t *)(v345 + 40) = vmlaq_f64(v510, v508, v388);
                    *(unsigned char *)(v345 + 61) = 1;
                  }
                  if (v378 < *(double *)(v345 + 48))
                  {
LABEL_240:
                    ++v340;
                    uint64_t v339 = v343;
                  }
                }
              }
              unint64_t *v341 = *v340;
            }
            while (v339 <= (uint64_t)((unint64_t)(v337 - 2) >> 1));
            int8x16_t v389 = a2 - 1;
            _ZF = v340 == --a2;
            if (_ZF)
            {
              unint64_t *v340 = v469;
            }
            else
            {
              unint64_t *v340 = *v389;
              *int8x16_t v389 = v469;
              uint64_t v390 = (char *)v340 - (char *)v336 + 8;
              if (v390 >= 9)
              {
                unint64_t v391 = (v390 >> 3) - 2;
                unint64_t v392 = v391 >> 1;
                uint64_t v393 = &v336[v391 >> 1];
                unint64_t v394 = *v393;
                unint64_t v395 = *v340;
                long long v396 = (md::LabelPoint *)(*v393 + 16);
                double v397 = *(double *)(md::LabelPoint::mercatorPoint(v396) + 8);
                if (v397 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16)) + 8))
                {
                  _CF = v394 >= v395;
                  int8x16_t v336 = v500;
                  if (!_CF)
                  {
LABEL_267:
                    unint64_t v399 = *v340;
                    unint64_t *v340 = *v393;
                    if (v391 >= 2)
                    {
                      while (1)
                      {
                        unint64_t v401 = v392 - 1;
                        unint64_t v392 = (v392 - 1) >> 1;
                        int16x8_t v402 = &v500[v392];
                        unint64_t v403 = *v402;
                        int8x16_t v404 = (md::LabelPoint *)(*v402 + 16);
                        double v405 = *(double *)(md::LabelPoint::mercatorPoint(v404) + 8);
                        if (v405 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v399 + 16)) + 8))
                        {
                          if (v403 >= v399) {
                            break;
                          }
                        }
                        else
                        {
                          double v400 = *(double *)(md::LabelPoint::mercatorPoint(v404) + 8);
                          if (v400 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v399 + 16)) + 8)) {
                            break;
                          }
                        }
                        *uint64_t v393 = *v402;
                        uint64_t v393 = &v500[v392];
                        if (v401 <= 1) {
                          goto LABEL_274;
                        }
                      }
                    }
                    int16x8_t v402 = v393;
LABEL_274:
                    *int16x8_t v402 = v399;
                    int8x16_t v336 = v500;
                  }
                }
                else
                {
                  double v398 = *(double *)(md::LabelPoint::mercatorPoint(v396) + 8);
                  int8x16_t v336 = v500;
                  if (v398 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16)) + 8)) {
                    goto LABEL_267;
                  }
                }
              }
            }
            if (v337-- <= 2) {
              return;
            }
          }
        }
      }
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = &a1[(unint64_t)v16 >> 1];
    if ((unint64_t)v15 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(v18, a1, v13);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, v18, v13);
      uint64_t v19 = v17;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1 + 1, &a1[v19 - 1], a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1 + 2, &a1[v19 + 1], a2 - 3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(&a1[v19 - 1], v18, &a1[v19 + 1]);
      unint64_t v20 = *a1;
      *a1 = a1[v19];
      a1[v19] = v20;
    }
    uint64_t v21 = a3 - 1;
    if (a4) {
      goto LABEL_13;
    }
    unint64_t v22 = *(a1 - 1);
    unint64_t v23 = *a1;
    double v24 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)) + 8);
    if (v24 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v23 + 16)) + 8))
    {
      if (v22 >= v23) {
        goto LABEL_87;
      }
LABEL_13:
      double v25 = a1 + 1;
      unint64_t v26 = *a1;
      BOOL v27 = (md::LabelPoint *)(*a1 + 16);
      uint64_t v467 = v21;
      while (1)
      {
        unint64_t v29 = *v25;
        int8x16_t v30 = (md::LabelPoint *)(*v25 + 16);
        double v31 = *(double *)(md::LabelPoint::mercatorPoint(v30) + 8);
        if (v31 == *(double *)(md::LabelPoint::mercatorPoint(v27) + 8)) {
          break;
        }
        double v28 = *(double *)(md::LabelPoint::mercatorPoint(v30) + 8);
        if (v28 >= *(double *)(md::LabelPoint::mercatorPoint(v27) + 8)) {
          goto LABEL_18;
        }
LABEL_15:
        ++v25;
      }
      if (v29 < v26) {
        goto LABEL_15;
      }
LABEL_18:
      unint64_t v32 = v25 - 1;
      int64_t i = v13;
      if (v25 - 1 != a1)
      {
        while (1)
        {
          unint64_t v35 = *i;
          int32x4_t v36 = (md::LabelPoint *)(*i + 16);
          double v37 = *(double *)(md::LabelPoint::mercatorPoint(v36) + 8);
          if (v37 == *(double *)(md::LabelPoint::mercatorPoint(v27) + 8))
          {
            if (v35 < v26) {
              goto LABEL_37;
            }
          }
          else
          {
            double v34 = *(double *)(md::LabelPoint::mercatorPoint(v36) + 8);
            if (v34 < *(double *)(md::LabelPoint::mercatorPoint(v27) + 8)) {
              goto LABEL_37;
            }
          }
          --i;
        }
      }
      int64_t i = a2;
      if (v25 < a2)
      {
        for (int64_t i = v13; ; --i)
        {
          unint64_t v40 = *i;
          int8x16_t v41 = (md::LabelPoint *)(*i + 16);
          double v42 = *(double *)(md::LabelPoint::mercatorPoint(v41) + 8);
          if (v42 == *(double *)(md::LabelPoint::mercatorPoint(v27) + 8))
          {
            if (v40 < v26 || v25 >= i) {
              break;
            }
          }
          else
          {
            double v38 = *(double *)(md::LabelPoint::mercatorPoint(v41) + 8);
            if (v38 < *(double *)(md::LabelPoint::mercatorPoint(v27) + 8) || v25 >= i) {
              break;
            }
          }
        }
      }
LABEL_37:
      if (v25 < i)
      {
        unint64_t v44 = *v25;
        unint64_t v45 = *i;
        unint64_t v46 = v25;
        uint64_t v47 = i;
        do
        {
          *v46++ = v45;
          *uint64_t v47 = v44;
          while (1)
          {
            unint64_t v44 = *v46;
            if (!*(unsigned char *)(*v46 + 61) && *(unsigned char *)(v44 + 62))
            {
              long double v48 = *(double *)(v44 + 16);
              long double v49 = *(double *)(v44 + 24);
              long double v50 = *(double *)(v44 + 32);
              double v51 = sqrt(v48 * v48 + v49 * v49);
              double v52 = atan2(v50, v51 * 0.996647189);
              long double v480 = atan2(v49, v48);
              __double2 v53 = __sincos_stret(v52);
              long double v54 = atan2(v50 + v53.__sinval * v53.__sinval * 42841.3115 * v53.__sinval, v51 + v53.__cosval * v53.__cosval * -42697.6727 * v53.__cosval);
              long double v55 = tan(v54 * v6 + 0.785398163);
              long double v56 = log(v55);
              v57.f64[0] = v480;
              v57.f64[1] = v56;
              *(float64x2_t *)(v44 + 40) = vmlaq_f64(v510, v505, v57);
              *(unsigned char *)(v44 + 61) = 1;
            }
            double v58 = *(double *)(v44 + 48);
            if (*(unsigned char *)(v26 + 61))
            {
              int v59 = 1;
            }
            else
            {
              int v59 = *(unsigned __int8 *)(v26 + 62);
              if (*(unsigned char *)(v26 + 62))
              {
                long double v60 = *(double *)(v26 + 16);
                long double v61 = *(double *)(v26 + 24);
                long double v62 = *(double *)(v26 + 32);
                double v63 = sqrt(v60 * v60 + v61 * v61);
                double v64 = atan2(v62, v63 * 0.996647189);
                long double v481 = atan2(v61, v60);
                __double2 v65 = __sincos_stret(v64);
                long double v66 = v63 + v65.__cosval * v65.__cosval * -42697.6727 * v65.__cosval;
                double v6 = 0.5;
                long double v67 = atan2(v62 + v65.__sinval * v65.__sinval * 42841.3115 * v65.__sinval, v66);
                long double v68 = tan(v67 * 0.5 + 0.785398163);
                long double v69 = log(v68);
                v70.f64[0] = v481;
                v70.f64[1] = v69;
                *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v70);
                int v59 = 1;
                *(unsigned char *)(v26 + 61) = 1;
              }
            }
            if (v58 != *(double *)(v26 + 48)) {
              break;
            }
            if (v44 >= v26) {
              goto LABEL_59;
            }
LABEL_42:
            ++v46;
          }
          if (!*(unsigned char *)(v44 + 61) && *(unsigned char *)(v44 + 62))
          {
            long double v71 = *(double *)(v44 + 16);
            long double v72 = *(double *)(v44 + 24);
            long double v73 = *(double *)(v44 + 32);
            double v74 = sqrt(v71 * v71 + v72 * v72);
            double v75 = atan2(v73, v74 * 0.996647189);
            long double v482 = atan2(v72, v71);
            __double2 v76 = __sincos_stret(v75);
            long double v77 = atan2(v73 + v76.__sinval * v76.__sinval * 42841.3115 * v76.__sinval, v74 + v76.__cosval * v76.__cosval * -42697.6727 * v76.__cosval);
            long double v78 = tan(v77 * v6 + 0.785398163);
            long double v79 = log(v78);
            v80.f64[0] = v482;
            v80.f64[1] = v79;
            *(float64x2_t *)(v44 + 40) = vmlaq_f64(v510, v505, v80);
            *(unsigned char *)(v44 + 61) = 1;
            int v59 = *(unsigned __int8 *)(v26 + 61);
          }
          double v81 = *(double *)(v44 + 48);
          if (v59)
          {
            int v59 = 1;
          }
          else
          {
            int v59 = *(unsigned __int8 *)(v26 + 62);
            if (*(unsigned char *)(v26 + 62))
            {
              long double v82 = *(double *)(v26 + 16);
              long double v83 = *(double *)(v26 + 24);
              long double v84 = *(double *)(v26 + 32);
              double v85 = sqrt(v82 * v82 + v83 * v83);
              double v86 = atan2(v84, v85 * 0.996647189);
              long double v483 = atan2(v83, v82);
              __double2 v87 = __sincos_stret(v86);
              long double v88 = v85 + v87.__cosval * v87.__cosval * -42697.6727 * v87.__cosval;
              double v6 = 0.5;
              long double v89 = atan2(v84 + v87.__sinval * v87.__sinval * 42841.3115 * v87.__sinval, v88);
              long double v90 = tan(v89 * 0.5 + 0.785398163);
              long double v91 = log(v90);
              v92.f64[0] = v483;
              v92.f64[1] = v91;
              *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v92);
              int v59 = 1;
              *(unsigned char *)(v26 + 61) = 1;
            }
          }
          if (v81 < *(double *)(v26 + 48)) {
            goto LABEL_42;
          }
LABEL_59:
          unint64_t v32 = v46 - 1;
          --v47;
          int v93 = v59;
LABEL_62:
          unint64_t v45 = *v47;
          if (!*(unsigned char *)(*v47 + 61) && *(unsigned char *)(v45 + 62))
          {
            long double v94 = *(double *)(v45 + 16);
            long double v95 = *(double *)(v45 + 24);
            long double v96 = *(double *)(v45 + 32);
            double v97 = sqrt(v94 * v94 + v95 * v95);
            double v98 = atan2(v96, v97 * 0.996647189);
            long double v484 = atan2(v95, v94);
            __double2 v99 = __sincos_stret(v98);
            long double v100 = atan2(v96 + v99.__sinval * v99.__sinval * 42841.3115 * v99.__sinval, v97 + v99.__cosval * v99.__cosval * -42697.6727 * v99.__cosval);
            long double v101 = tan(v100 * v6 + 0.785398163);
            long double v102 = log(v101);
            v103.f64[0] = v484;
            v103.f64[1] = v102;
            *(float64x2_t *)(v45 + 40) = vmlaq_f64(v510, v505, v103);
            *(unsigned char *)(v45 + 61) = 1;
            int v59 = *(unsigned __int8 *)(v26 + 61);
            int v93 = v59;
          }
          double v104 = *(double *)(v45 + 48);
          if (v93)
          {
LABEL_68:
            int v93 = 1;
          }
          else
          {
            int v93 = *(unsigned __int8 *)(v26 + 62);
            if (*(unsigned char *)(v26 + 62))
            {
              long double v105 = *(double *)(v26 + 16);
              long double v106 = *(double *)(v26 + 24);
              long double v107 = *(double *)(v26 + 32);
              double v108 = sqrt(v105 * v105 + v106 * v106);
              double v109 = atan2(v107, v108 * 0.996647189);
              long double v485 = atan2(v106, v105);
              __double2 v110 = __sincos_stret(v109);
              long double v111 = v108 + v110.__cosval * v110.__cosval * -42697.6727 * v110.__cosval;
              double v6 = 0.5;
              long double v112 = atan2(v107 + v110.__sinval * v110.__sinval * 42841.3115 * v110.__sinval, v111);
              long double v113 = tan(v112 * 0.5 + 0.785398163);
              long double v114 = log(v113);
              v115.f64[0] = v485;
              v115.f64[1] = v114;
              *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v115);
              int v59 = 1;
              *(unsigned char *)(v26 + 61) = 1;
              goto LABEL_68;
            }
          }
          if (v104 == *(double *)(v26 + 48))
          {
            if (v45 < v26) {
              continue;
            }
LABEL_61:
            --v47;
            goto LABEL_62;
          }
          if (!*(unsigned char *)(v45 + 61) && *(unsigned char *)(v45 + 62))
          {
            long double v116 = *(double *)(v45 + 16);
            long double v117 = *(double *)(v45 + 24);
            long double v118 = *(double *)(v45 + 32);
            double v119 = sqrt(v116 * v116 + v117 * v117);
            double v120 = atan2(v118, v119 * 0.996647189);
            long double v486 = atan2(v117, v116);
            __double2 v121 = __sincos_stret(v120);
            long double v122 = atan2(v118 + v121.__sinval * v121.__sinval * 42841.3115 * v121.__sinval, v119 + v121.__cosval * v121.__cosval * -42697.6727 * v121.__cosval);
            long double v123 = tan(v122 * v6 + 0.785398163);
            long double v124 = log(v123);
            v125.f64[0] = v486;
            v125.f64[1] = v124;
            *(float64x2_t *)(v45 + 40) = vmlaq_f64(v510, v505, v125);
            *(unsigned char *)(v45 + 61) = 1;
            int v59 = *(unsigned __int8 *)(v26 + 61);
          }
          double v126 = *(double *)(v45 + 48);
          if (v59)
          {
            int v59 = 1;
          }
          else
          {
            int v59 = *(unsigned __int8 *)(v26 + 62);
            if (*(unsigned char *)(v26 + 62))
            {
              long double v127 = *(double *)(v26 + 16);
              long double v128 = *(double *)(v26 + 24);
              long double v129 = *(double *)(v26 + 32);
              double v130 = sqrt(v127 * v127 + v128 * v128);
              double v131 = atan2(v129, v130 * 0.996647189);
              long double v487 = atan2(v128, v127);
              __double2 v132 = __sincos_stret(v131);
              long double v133 = v130 + v132.__cosval * v132.__cosval * -42697.6727 * v132.__cosval;
              double v6 = 0.5;
              long double v134 = atan2(v129 + v132.__sinval * v132.__sinval * 42841.3115 * v132.__sinval, v133);
              long double v135 = tan(v134 * 0.5 + 0.785398163);
              long double v136 = log(v135);
              v137.f64[0] = v487;
              v137.f64[1] = v136;
              *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v137);
              int v59 = 1;
              *(unsigned char *)(v26 + 61) = 1;
            }
          }
          int v93 = v59;
          if (v126 >= *(double *)(v26 + 48)) {
            goto LABEL_61;
          }
        }
        while (v46 < v47);
      }
      if (v32 != a1) {
        *a1 = *v32;
      }
      *unint64_t v32 = v26;
      _CF = v25 >= i;
      a3 = v467;
      uint64_t v12 = a2;
      int16x8_t v13 = a2 - 1;
      if (_CF)
      {
        BOOL v138 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, v32);
        uint64_t j = v32 + 1;
        if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(v32 + 1, a2))
        {
          a2 = v32;
          if (v138) {
            return;
          }
          goto LABEL_2;
        }
        if (!v138) {
          goto LABEL_85;
        }
      }
      else
      {
LABEL_85:
        std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **,false>(a1, v32, v467, a4 & 1);
        a4 = 0;
        uint64_t j = v32 + 1;
      }
    }
    else
    {
      double v139 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)) + 8);
      if (v139 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v23 + 16)) + 8)) {
        goto LABEL_13;
      }
LABEL_87:
      unint64_t v140 = *a1;
      unint64_t v141 = *v13;
      int32x4_t v142 = (md::LabelPoint *)(*a1 + 16);
      double v143 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
      if (v143 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v141 + 16)) + 8))
      {
        if (v140 < v141) {
          goto LABEL_89;
        }
      }
      else
      {
        double v147 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
        if (v147 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v141 + 16)) + 8))
        {
LABEL_89:
          for (uint64_t j = a1 + 1; ; ++j)
          {
            unint64_t v145 = *j;
            double v146 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
            if (v146 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v145 + 16)) + 8))
            {
              if (v140 < v145) {
                goto LABEL_102;
              }
            }
            else
            {
              double v144 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
              if (v144 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v145 + 16)) + 8)) {
                goto LABEL_102;
              }
            }
          }
        }
      }
      for (uint64_t j = a1 + 1; ; ++j)
      {
        int8x16_t v149 = a2;
        if (j >= a2) {
          break;
        }
        unint64_t v150 = *j;
        double v151 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
        if (v151 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v150 + 16)) + 8))
        {
          if (v140 < v150)
          {
LABEL_102:
            int8x16_t v149 = a2;
            break;
          }
        }
        else
        {
          double v148 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
          if (v148 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v150 + 16)) + 8)) {
            goto LABEL_102;
          }
        }
      }
      uint64_t v152 = v21;
      uint64_t k = v149;
      if (j < v149)
      {
        for (uint64_t k = v13; ; --k)
        {
          unint64_t v155 = *k;
          double v156 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
          if (v156 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v155 + 16)) + 8))
          {
            if (v140 >= v155) {
              break;
            }
          }
          else
          {
            double v154 = *(double *)(md::LabelPoint::mercatorPoint(v142) + 8);
            if (v154 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v155 + 16)) + 8)) {
              break;
            }
          }
        }
      }
      if (j < k)
      {
        unint64_t v157 = *j;
        unint64_t v158 = *k;
        do
        {
          *j++ = v158;
          *uint64_t k = v157;
          while (1)
          {
            unint64_t v157 = *j;
            if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
            {
              long double v159 = *(double *)(v140 + 16);
              long double v160 = *(double *)(v140 + 24);
              long double v161 = *(double *)(v140 + 32);
              double v162 = sqrt(v159 * v159 + v160 * v160);
              double v163 = atan2(v161, v162 * 0.996647189);
              long double v488 = atan2(v160, v159);
              __double2 v164 = __sincos_stret(v163);
              long double v165 = atan2(v161 + v164.__sinval * v164.__sinval * 42841.3115 * v164.__sinval, v162 + v164.__cosval * v164.__cosval * -42697.6727 * v164.__cosval);
              long double v166 = tan(v165 * v6 + 0.785398163);
              long double v167 = log(v166);
              v168.f64[0] = v488;
              v168.f64[1] = v167;
              *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v168);
              *(unsigned char *)(v140 + 61) = 1;
            }
            double v169 = *(double *)(v140 + 48);
            if (*(unsigned char *)(v157 + 61))
            {
              int v170 = 1;
            }
            else
            {
              int v170 = *(unsigned __int8 *)(v157 + 62);
              if (*(unsigned char *)(v157 + 62))
              {
                long double v171 = *(double *)(v157 + 16);
                long double v172 = *(double *)(v157 + 24);
                long double v173 = *(double *)(v157 + 32);
                double v472 = sqrt(v171 * v171 + v172 * v172);
                double v174 = atan2(v173, v472 * 0.996647189);
                long double v489 = atan2(v172, v171);
                __double2 v175 = __sincos_stret(v174);
                long double v176 = atan2(v173 + v175.__sinval * v175.__sinval * 42841.3115 * v175.__sinval, v472 + v175.__cosval * v175.__cosval * -42697.6727 * v175.__cosval);
                long double v177 = tan(v176 * v6 + 0.785398163);
                long double v178 = log(v177);
                v179.f64[0] = v489;
                v179.f64[1] = v178;
                *(float64x2_t *)(v157 + 40) = vmlaq_f64(v510, v505, v179);
                int v170 = 1;
                *(unsigned char *)(v157 + 61) = 1;
              }
            }
            if (v169 != *(double *)(v157 + 48)) {
              break;
            }
            if (v140 < v157) {
              goto LABEL_132;
            }
LABEL_114:
            ++j;
          }
          if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
          {
            long double v180 = *(double *)(v140 + 16);
            long double v181 = *(double *)(v140 + 24);
            long double v182 = *(double *)(v140 + 32);
            double v183 = sqrt(v180 * v180 + v181 * v181);
            double v184 = atan2(v182, v183 * 0.996647189);
            long double v490 = atan2(v181, v180);
            __double2 v185 = __sincos_stret(v184);
            long double v186 = atan2(v182 + v185.__sinval * v185.__sinval * 42841.3115 * v185.__sinval, v183 + v185.__cosval * v185.__cosval * -42697.6727 * v185.__cosval);
            long double v187 = tan(v186 * v6 + 0.785398163);
            long double v188 = log(v187);
            v189.f64[0] = v490;
            v189.f64[1] = v188;
            *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v189);
            *(unsigned char *)(v140 + 61) = 1;
            int v170 = *(unsigned __int8 *)(v157 + 61);
          }
          double v190 = *(double *)(v140 + 48);
          if (!v170 && *(unsigned char *)(v157 + 62))
          {
            long double v191 = *(double *)(v157 + 16);
            long double v192 = *(double *)(v157 + 24);
            long double v193 = *(double *)(v157 + 32);
            double v473 = sqrt(v191 * v191 + v192 * v192);
            double v194 = atan2(v193, v473 * 0.996647189);
            long double v491 = atan2(v192, v191);
            __double2 v195 = __sincos_stret(v194);
            long double v196 = atan2(v193 + v195.__sinval * v195.__sinval * 42841.3115 * v195.__sinval, v473 + v195.__cosval * v195.__cosval * -42697.6727 * v195.__cosval);
            long double v197 = tan(v196 * v6 + 0.785398163);
            long double v198 = log(v197);
            v199.f64[0] = v491;
            v199.f64[1] = v198;
            *(float64x2_t *)(v157 + 40) = vmlaq_f64(v510, v505, v199);
            *(unsigned char *)(v157 + 61) = 1;
          }
          if (v190 >= *(double *)(v157 + 48)) {
            goto LABEL_114;
          }
          do
          {
            while (1)
            {
LABEL_132:
              unint64_t v200 = *--k;
              unint64_t v158 = v200;
              if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
              {
                long double v201 = *(double *)(v140 + 16);
                long double v202 = *(double *)(v140 + 24);
                long double v203 = *(double *)(v140 + 32);
                double v204 = sqrt(v201 * v201 + v202 * v202);
                double v205 = atan2(v203, v204 * 0.996647189);
                long double v492 = atan2(v202, v201);
                __double2 v206 = __sincos_stret(v205);
                long double v207 = atan2(v203 + v206.__sinval * v206.__sinval * 42841.3115 * v206.__sinval, v204 + v206.__cosval * v206.__cosval * -42697.6727 * v206.__cosval);
                long double v208 = tan(v207 * v6 + 0.785398163);
                long double v209 = log(v208);
                v210.f64[0] = v492;
                v210.f64[1] = v209;
                *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v210);
                *(unsigned char *)(v140 + 61) = 1;
              }
              double v211 = *(double *)(v140 + 48);
              if (*(unsigned char *)(v158 + 61))
              {
                int v212 = 1;
              }
              else
              {
                int v212 = *(unsigned __int8 *)(v158 + 62);
                if (*(unsigned char *)(v158 + 62))
                {
                  long double v213 = *(double *)(v158 + 16);
                  long double v214 = *(double *)(v158 + 24);
                  long double v215 = *(double *)(v158 + 32);
                  double v474 = sqrt(v213 * v213 + v214 * v214);
                  double v216 = atan2(v215, v474 * 0.996647189);
                  long double v493 = atan2(v214, v213);
                  __double2 v217 = __sincos_stret(v216);
                  long double v218 = atan2(v215 + v217.__sinval * v217.__sinval * 42841.3115 * v217.__sinval, v474 + v217.__cosval * v217.__cosval * -42697.6727 * v217.__cosval);
                  long double v219 = tan(v218 * v6 + 0.785398163);
                  long double v220 = log(v219);
                  v221.f64[0] = v493;
                  v221.f64[1] = v220;
                  *(float64x2_t *)(v158 + 40) = vmlaq_f64(v510, v505, v221);
                  int v212 = 1;
                  *(unsigned char *)(v158 + 61) = 1;
                }
              }
              if (v211 != *(double *)(v158 + 48)) {
                break;
              }
              if (v140 >= v158) {
                goto LABEL_111;
              }
            }
            if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
            {
              long double v222 = *(double *)(v140 + 16);
              long double v223 = *(double *)(v140 + 24);
              long double v224 = *(double *)(v140 + 32);
              double v225 = sqrt(v222 * v222 + v223 * v223);
              double v226 = atan2(v224, v225 * 0.996647189);
              long double v494 = atan2(v223, v222);
              __double2 v227 = __sincos_stret(v226);
              long double v228 = atan2(v224 + v227.__sinval * v227.__sinval * 42841.3115 * v227.__sinval, v225 + v227.__cosval * v227.__cosval * -42697.6727 * v227.__cosval);
              long double v229 = tan(v228 * v6 + 0.785398163);
              long double v230 = log(v229);
              v231.f64[0] = v494;
              v231.f64[1] = v230;
              *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v231);
              *(unsigned char *)(v140 + 61) = 1;
              int v212 = *(unsigned __int8 *)(v158 + 61);
            }
            double v232 = *(double *)(v140 + 48);
            if (!v212 && *(unsigned char *)(v158 + 62))
            {
              long double v233 = *(double *)(v158 + 16);
              long double v234 = *(double *)(v158 + 24);
              long double v235 = *(double *)(v158 + 32);
              double v475 = sqrt(v233 * v233 + v234 * v234);
              double v236 = atan2(v235, v475 * 0.996647189);
              long double v495 = atan2(v234, v233);
              __double2 v237 = __sincos_stret(v236);
              long double v238 = atan2(v235 + v237.__sinval * v237.__sinval * 42841.3115 * v237.__sinval, v475 + v237.__cosval * v237.__cosval * -42697.6727 * v237.__cosval);
              long double v239 = tan(v238 * v6 + 0.785398163);
              long double v240 = log(v239);
              v241.f64[0] = v495;
              v241.f64[1] = v240;
              *(float64x2_t *)(v158 + 40) = vmlaq_f64(v510, v505, v241);
              *(unsigned char *)(v158 + 61) = 1;
            }
          }
          while (v232 < *(double *)(v158 + 48));
LABEL_111:
          ;
        }
        while (j < k);
      }
      int8x16_t v242 = j - 1;
      _CF = j - 1 >= a1;
      _ZF = j - 1 == a1;
      uint64_t v12 = a2;
      int16x8_t v13 = a2 - 1;
      if (j - 1 != a1) {
        *a1 = *v242;
      }
      a4 = 0;
      *int8x16_t v242 = v140;
      a3 = v152;
    }
  }
  int8x16_t v248 = a1 + 1;
  BOOL v250 = a1 == v12 || v248 == v12;
  if (a4)
  {
    if (v250) {
      return;
    }
    uint64_t v251 = 0;
    float64x2_t v506 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    int8x16_t v252 = a1;
LABEL_178:
    int32x4_t v254 = a1;
    int8x16_t v255 = v252;
    int8x16_t v252 = v248;
    unint64_t v257 = *v255;
    unint64_t v256 = v255[1];
    double v258 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v256 + 16)) + 8);
    if (v258 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v257 + 16)) + 8))
    {
      _CF = v256 >= v257;
      a1 = v254;
      if (_CF) {
        goto LABEL_177;
      }
    }
    else
    {
      double v259 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v256 + 16)) + 8);
      uint64_t v260 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v257 + 16));
      a1 = v254;
      if (v259 >= *(double *)(v260 + 8)) {
        goto LABEL_177;
      }
    }
    unint64_t v261 = v255[1];
    v255[1] = *v255;
    int16x8_t v253 = a1;
    if (v255 == a1) {
      goto LABEL_176;
    }
    uint64_t v262 = v251;
    while (1)
    {
      unint64_t v263 = *(unint64_t *)((char *)a1 + v262 - 8);
      if (!*(unsigned char *)(v261 + 61) && *(unsigned char *)(v261 + 62))
      {
        long double v264 = *(double *)(v261 + 16);
        long double v265 = *(double *)(v261 + 24);
        long double v266 = *(double *)(v261 + 32);
        double v267 = sqrt(v264 * v264 + v265 * v265);
        double v268 = atan2(v266, v267 * 0.996647189);
        long double v496 = atan2(v265, v264);
        __double2 v269 = __sincos_stret(v268);
        long double v270 = atan2(v266 + v269.__sinval * v269.__sinval * 42841.3115 * v269.__sinval, v267 + v269.__cosval * v269.__cosval * -42697.6727 * v269.__cosval);
        long double v271 = tan(v270 * 0.5 + 0.785398163);
        long double v272 = log(v271);
        v273.f64[0] = v496;
        v273.f64[1] = v272;
        *(float64x2_t *)(v261 + 40) = vmlaq_f64(v510, v506, v273);
        *(unsigned char *)(v261 + 61) = 1;
      }
      double v274 = *(double *)(v261 + 48);
      if (*(unsigned char *)(v263 + 61))
      {
        int v275 = 1;
      }
      else
      {
        int v275 = *(unsigned __int8 *)(v263 + 62);
        if (*(unsigned char *)(v263 + 62))
        {
          long double v276 = *(double *)(v263 + 16);
          long double v277 = *(double *)(v263 + 24);
          long double v278 = *(double *)(v263 + 32);
          double v279 = sqrt(v276 * v276 + v277 * v277);
          double v280 = atan2(v278, v279 * 0.996647189);
          long double v497 = atan2(v277, v276);
          __double2 v281 = __sincos_stret(v280);
          long double v282 = atan2(v278 + v281.__sinval * v281.__sinval * 42841.3115 * v281.__sinval, v279 + v281.__cosval * v281.__cosval * -42697.6727 * v281.__cosval);
          long double v283 = tan(v282 * 0.5 + 0.785398163);
          long double v284 = log(v283);
          v285.f64[0] = v497;
          v285.f64[1] = v284;
          *(float64x2_t *)(v263 + 40) = vmlaq_f64(v510, v506, v285);
          int v275 = 1;
          *(unsigned char *)(v263 + 61) = 1;
        }
      }
      if (v274 == *(double *)(v263 + 48))
      {
        if (v261 >= v263)
        {
          int16x8_t v253 = v255;
LABEL_176:
          unint64_t *v253 = v261;
LABEL_177:
          int8x16_t v248 = v252 + 1;
          v251 += 8;
          if (v252 + 1 == a2) {
            return;
          }
          goto LABEL_178;
        }
      }
      else
      {
        if (!*(unsigned char *)(v261 + 61) && *(unsigned char *)(v261 + 62))
        {
          long double v286 = *(double *)(v261 + 16);
          long double v287 = *(double *)(v261 + 24);
          long double v288 = *(double *)(v261 + 32);
          double v289 = sqrt(v286 * v286 + v287 * v287);
          double v290 = atan2(v288, v289 * 0.996647189);
          long double v498 = atan2(v287, v286);
          __double2 v291 = __sincos_stret(v290);
          long double v292 = atan2(v288 + v291.__sinval * v291.__sinval * 42841.3115 * v291.__sinval, v289 + v291.__cosval * v291.__cosval * -42697.6727 * v291.__cosval);
          long double v293 = tan(v292 * 0.5 + 0.785398163);
          long double v294 = log(v293);
          v295.f64[0] = v498;
          v295.f64[1] = v294;
          *(float64x2_t *)(v261 + 40) = vmlaq_f64(v510, v506, v295);
          *(unsigned char *)(v261 + 61) = 1;
          int v275 = *(unsigned __int8 *)(v263 + 61);
        }
        double v296 = *(double *)(v261 + 48);
        if (!v275 && *(unsigned char *)(v263 + 62))
        {
          long double v297 = *(double *)(v263 + 16);
          long double v298 = *(double *)(v263 + 24);
          long double v299 = *(double *)(v263 + 32);
          double v300 = sqrt(v297 * v297 + v298 * v298);
          double v301 = atan2(v299, v300 * 0.996647189);
          long double v499 = atan2(v298, v297);
          __double2 v302 = __sincos_stret(v301);
          long double v303 = atan2(v299 + v302.__sinval * v302.__sinval * 42841.3115 * v302.__sinval, v300 + v302.__cosval * v302.__cosval * -42697.6727 * v302.__cosval);
          long double v304 = tan(v303 * 0.5 + 0.785398163);
          long double v305 = log(v304);
          v306.f64[0] = v499;
          v306.f64[1] = v305;
          *(float64x2_t *)(v263 + 40) = vmlaq_f64(v510, v506, v306);
          *(unsigned char *)(v263 + 61) = 1;
        }
        if (v296 >= *(double *)(v263 + 48))
        {
          int16x8_t v253 = (unint64_t *)((char *)a1 + v262);
          goto LABEL_176;
        }
      }
      --v255;
      *(unint64_t *)((char *)a1 + v262) = v263;
      v262 -= 8;
      if (!v262)
      {
        int16x8_t v253 = a1;
        goto LABEL_176;
      }
    }
  }
  if (!v250)
  {
    float64x2_t v509 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    do
    {
      int8x16_t v406 = a1;
      int32x4_t v407 = v248;
      int8x16_t v410 = a1;
      unint64_t v409 = *a1;
      unint64_t v408 = v410[1];
      double v411 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v408 + 16)) + 8);
      if (v411 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v409 + 16)) + 8))
      {
        _CF = v408 >= v409;
        a1 = v407;
        if (!_CF) {
          goto LABEL_284;
        }
      }
      else
      {
        double v412 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v408 + 16)) + 8);
        uint64_t v413 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v409 + 16));
        a1 = v407;
        if (v412 < *(double *)(v413 + 8))
        {
LABEL_284:
          unint64_t v414 = *a1;
          unint64_t v415 = *v406;
          do
          {
            while (1)
            {
              int8x16_t v416 = v406;
              unint64_t v417 = v415;
              unint64_t v418 = *--v406;
              unint64_t v415 = v418;
              v406[2] = v417;
              if (!*(unsigned char *)(v414 + 61) && *(unsigned char *)(v414 + 62))
              {
                long double v419 = *(double *)(v414 + 16);
                long double v420 = *(double *)(v414 + 24);
                long double v421 = *(double *)(v414 + 32);
                double v422 = sqrt(v419 * v419 + v420 * v420);
                double v423 = atan2(v421, v422 * 0.996647189);
                long double v501 = atan2(v420, v419);
                __double2 v424 = __sincos_stret(v423);
                long double v425 = atan2(v421 + v424.__sinval * v424.__sinval * 42841.3115 * v424.__sinval, v422 + v424.__cosval * v424.__cosval * -42697.6727 * v424.__cosval);
                long double v426 = tan(v425 * 0.5 + 0.785398163);
                long double v427 = log(v426);
                v428.f64[0] = v501;
                v428.f64[1] = v427;
                *(float64x2_t *)(v414 + 40) = vmlaq_f64(v510, v509, v428);
                *(unsigned char *)(v414 + 61) = 1;
              }
              double v429 = *(double *)(v414 + 48);
              if (*(unsigned char *)(v415 + 61))
              {
                int v430 = 1;
              }
              else
              {
                int v430 = *(unsigned __int8 *)(v415 + 62);
                if (*(unsigned char *)(v415 + 62))
                {
                  long double v431 = *(double *)(v415 + 16);
                  long double v432 = *(double *)(v415 + 24);
                  long double v433 = *(double *)(v415 + 32);
                  double v434 = sqrt(v431 * v431 + v432 * v432);
                  double v435 = atan2(v433, v434 * 0.996647189);
                  long double v502 = atan2(v432, v431);
                  __double2 v436 = __sincos_stret(v435);
                  long double v437 = atan2(v433 + v436.__sinval * v436.__sinval * 42841.3115 * v436.__sinval, v434 + v436.__cosval * v436.__cosval * -42697.6727 * v436.__cosval);
                  long double v438 = tan(v437 * 0.5 + 0.785398163);
                  long double v439 = log(v438);
                  v440.f64[0] = v502;
                  v440.f64[1] = v439;
                  *(float64x2_t *)(v415 + 40) = vmlaq_f64(v510, v509, v440);
                  int v430 = 1;
                  *(unsigned char *)(v415 + 61) = 1;
                }
              }
              if (v429 != *(double *)(v415 + 48)) {
                break;
              }
              if (v414 >= v415) {
                goto LABEL_277;
              }
            }
            if (!*(unsigned char *)(v414 + 61) && *(unsigned char *)(v414 + 62))
            {
              long double v441 = *(double *)(v414 + 16);
              long double v442 = *(double *)(v414 + 24);
              long double v443 = *(double *)(v414 + 32);
              double v444 = sqrt(v441 * v441 + v442 * v442);
              double v445 = atan2(v443, v444 * 0.996647189);
              long double v503 = atan2(v442, v441);
              __double2 v446 = __sincos_stret(v445);
              long double v447 = atan2(v443 + v446.__sinval * v446.__sinval * 42841.3115 * v446.__sinval, v444 + v446.__cosval * v446.__cosval * -42697.6727 * v446.__cosval);
              long double v448 = tan(v447 * 0.5 + 0.785398163);
              long double v449 = log(v448);
              v450.f64[0] = v503;
              v450.f64[1] = v449;
              *(float64x2_t *)(v414 + 40) = vmlaq_f64(v510, v509, v450);
              *(unsigned char *)(v414 + 61) = 1;
              int v430 = *(unsigned __int8 *)(v415 + 61);
            }
            double v451 = *(double *)(v414 + 48);
            if (!v430 && *(unsigned char *)(v415 + 62))
            {
              long double v452 = *(double *)(v415 + 16);
              long double v453 = *(double *)(v415 + 24);
              long double v454 = *(double *)(v415 + 32);
              double v455 = sqrt(v452 * v452 + v453 * v453);
              double v456 = atan2(v454, v455 * 0.996647189);
              long double v504 = atan2(v453, v452);
              __double2 v457 = __sincos_stret(v456);
              long double v458 = atan2(v454 + v457.__sinval * v457.__sinval * 42841.3115 * v457.__sinval, v455 + v457.__cosval * v457.__cosval * -42697.6727 * v457.__cosval);
              long double v459 = tan(v458 * 0.5 + 0.785398163);
              long double v460 = log(v459);
              v461.f64[0] = v504;
              v461.f64[1] = v460;
              *(float64x2_t *)(v415 + 40) = vmlaq_f64(v510, v509, v461);
              *(unsigned char *)(v415 + 61) = 1;
            }
          }
          while (v451 < *(double *)(v415 + 48));
LABEL_277:
          *int8x16_t v416 = v414;
        }
      }
      int8x16_t v248 = a1 + 1;
    }
    while (a1 + 1 != a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  double v6 = 0.5;
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v505 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  float64x2_t v510 = _Q0;
LABEL_2:
  uint64_t v12 = a2;
  int16x8_t v13 = a2 - 1;
  uint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v15 = (char *)v12 - (char *)j;
    uint64_t v16 = v12 - j;
    if (_ZF || !_CF)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return;
        case 2:
          unint64_t v243 = *v13;
          unint64_t v244 = *a1;
          int8x16_t v245 = (md::LabelPoint *)(*v13 + 16);
          double v246 = *(double *)md::LabelPoint::mercatorPoint(v245);
          if (v246 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v244 + 16)))
          {
            int8x16_t v247 = a2 - 1;
            if (v243 >= v244) {
              return;
            }
          }
          else
          {
            double v462 = *(double *)md::LabelPoint::mercatorPoint(v245);
            double v463 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v244 + 16));
            int8x16_t v247 = a2 - 1;
            if (v462 >= v463) {
              return;
            }
          }
          unint64_t v464 = *a1;
          *a1 = *v247;
          *int8x16_t v247 = v464;
          break;
        case 3:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, v13);
          return;
        case 4:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, v13);
          return;
        case 5:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a1 + 3, v13);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 191) {
      break;
    }
    if (!a3)
    {
      if (a1 == v12) {
        return;
      }
      unint64_t v465 = v15;
      v500 = a1;
      int64_t v307 = (unint64_t)(v16 - 2) >> 1;
      int64_t v308 = v307;
      while (1)
      {
        int64_t v310 = v308;
        if (v307 < v308) {
          goto LABEL_207;
        }
        int64_t v468 = v308;
        uint64_t v311 = (2 * v308) | 1;
        uint64_t v312 = &v500[v311];
        if (2 * v308 + 2 < v16)
        {
          unint64_t v313 = *v312;
          unint64_t v314 = v312[1];
          uint64_t v315 = (md::LabelPoint *)(*v312 + 16);
          double v316 = *(double *)md::LabelPoint::mercatorPoint(v315);
          if (v316 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v314 + 16)))
          {
            if (v313 >= v314) {
              goto LABEL_214;
            }
LABEL_213:
            ++v312;
            uint64_t v311 = 2 * v310 + 2;
            goto LABEL_214;
          }
          double v335 = *(double *)md::LabelPoint::mercatorPoint(v315);
          if (v335 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v314 + 16))) {
            goto LABEL_213;
          }
        }
LABEL_214:
        unint64_t v317 = *v312;
        unint64_t v318 = v500[v310];
        int8x16_t v319 = (md::LabelPoint *)(*v312 + 16);
        double v320 = *(double *)md::LabelPoint::mercatorPoint(v319);
        if (v320 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v318 + 16)))
        {
          _CF = v317 >= v318;
          int64_t v307 = (unint64_t)(v16 - 2) >> 1;
          if (_CF) {
            goto LABEL_220;
          }
        }
        else
        {
          double v321 = *(double *)md::LabelPoint::mercatorPoint(v319);
          int64_t v307 = (unint64_t)(v16 - 2) >> 1;
          if (v321 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v318 + 16)))
          {
LABEL_220:
            unint64_t v322 = v500[v468];
            v500[v468] = *v312;
            if (v307 >= v311)
            {
              v507 = (md::LabelPoint *)(v322 + 16);
              unint64_t v466 = v322;
              while (1)
              {
                uint64_t v324 = 2 * v311;
                uint64_t v311 = (2 * v311) | 1;
                uint64_t v309 = &v500[v311];
                uint64_t v325 = v324 + 2;
                if (v324 + 2 >= v16) {
                  goto LABEL_229;
                }
                unint64_t v326 = *v309;
                unint64_t v327 = v309[1];
                int8x16_t v328 = (md::LabelPoint *)(*v309 + 16);
                double v329 = *(double *)md::LabelPoint::mercatorPoint(v328);
                if (v329 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v327 + 16))) {
                  break;
                }
                double v333 = *(double *)md::LabelPoint::mercatorPoint(v328);
                uint64_t v334 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v327 + 16));
                int64_t v307 = (unint64_t)(v16 - 2) >> 1;
                unint64_t v322 = v466;
                if (v333 < *v334) {
                  goto LABEL_228;
                }
LABEL_229:
                unint64_t v330 = *v309;
                int8x16_t v331 = (md::LabelPoint *)(*v309 + 16);
                double v332 = *(double *)md::LabelPoint::mercatorPoint(v331);
                if (v332 == *(double *)md::LabelPoint::mercatorPoint(v507))
                {
                  if (v330 < v322) {
                    goto LABEL_205;
                  }
                }
                else
                {
                  double v323 = *(double *)md::LabelPoint::mercatorPoint(v331);
                  if (v323 < *(double *)md::LabelPoint::mercatorPoint(v507)) {
                    goto LABEL_205;
                  }
                }
                *uint64_t v312 = *v309;
                uint64_t v312 = v309;
                if (v307 < v311) {
                  goto LABEL_206;
                }
              }
              _CF = v326 >= v327;
              int64_t v307 = (unint64_t)(v16 - 2) >> 1;
              unint64_t v322 = v466;
              if (_CF) {
                goto LABEL_229;
              }
LABEL_228:
              ++v309;
              uint64_t v311 = v325;
              goto LABEL_229;
            }
LABEL_205:
            uint64_t v309 = v312;
LABEL_206:
            *uint64_t v309 = v322;
            int64_t v310 = v468;
          }
        }
LABEL_207:
        int64_t v308 = v310 - 1;
        if (!v310)
        {
          int8x16_t v336 = v500;
          uint64_t v337 = v465 >> 3;
          float64x2_t v508 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          while (1)
          {
            uint64_t v339 = 0;
            unint64_t v469 = *v336;
            int32x4_t v340 = v336;
            do
            {
              int8x16_t v341 = v340;
              v340 += v339 + 1;
              uint64_t v342 = 2 * v339;
              uint64_t v339 = (2 * v339) | 1;
              uint64_t v343 = v342 + 2;
              if (v342 + 2 < v337)
              {
                unint64_t v344 = *v340;
                unint64_t v345 = v340[1];
                if (!*(unsigned char *)(*v340 + 61) && *(unsigned char *)(v344 + 62))
                {
                  long double v346 = *(double *)(v344 + 16);
                  long double v347 = *(double *)(v344 + 24);
                  long double v348 = *(double *)(v344 + 32);
                  double v349 = sqrt(v346 * v346 + v347 * v347);
                  double v350 = atan2(v348, v349 * 0.996647189);
                  long double v476 = atan2(v347, v346);
                  __double2 v351 = __sincos_stret(v350);
                  long double v352 = atan2(v348 + v351.__sinval * v351.__sinval * 42841.3115 * v351.__sinval, v349 + v351.__cosval * v351.__cosval * -42697.6727 * v351.__cosval);
                  long double v353 = tan(v352 * 0.5 + 0.785398163);
                  long double v354 = log(v353);
                  v355.f64[0] = v476;
                  v355.f64[1] = v354;
                  *(float64x2_t *)(v344 + 40) = vmlaq_f64(v510, v508, v355);
                  *(unsigned char *)(v344 + 61) = 1;
                }
                double v356 = *(double *)(v344 + 40);
                if (*(unsigned char *)(v345 + 61))
                {
                  int v357 = 1;
                }
                else
                {
                  int v357 = *(unsigned __int8 *)(v345 + 62);
                  if (*(unsigned char *)(v345 + 62))
                  {
                    long double v358 = *(double *)(v345 + 16);
                    long double v359 = *(double *)(v345 + 24);
                    long double v360 = *(double *)(v345 + 32);
                    double v361 = sqrt(v358 * v358 + v359 * v359);
                    double v362 = atan2(v360, v361 * 0.996647189);
                    long double v477 = atan2(v359, v358);
                    __double2 v363 = __sincos_stret(v362);
                    long double v364 = atan2(v360 + v363.__sinval * v363.__sinval * 42841.3115 * v363.__sinval, v361 + v363.__cosval * v363.__cosval * -42697.6727 * v363.__cosval);
                    long double v365 = tan(v364 * 0.5 + 0.785398163);
                    long double v366 = log(v365);
                    v367.f64[0] = v477;
                    v367.f64[1] = v366;
                    *(float64x2_t *)(v345 + 40) = vmlaq_f64(v510, v508, v367);
                    int v357 = 1;
                    *(unsigned char *)(v345 + 61) = 1;
                  }
                }
                if (v356 == *(double *)(v345 + 40))
                {
                  if (v344 < v345) {
                    goto LABEL_240;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v344 + 61) && *(unsigned char *)(v344 + 62))
                  {
                    long double v368 = *(double *)(v344 + 16);
                    long double v369 = *(double *)(v344 + 24);
                    long double v370 = *(double *)(v344 + 32);
                    double v371 = sqrt(v368 * v368 + v369 * v369);
                    double v372 = atan2(v370, v371 * 0.996647189);
                    long double v478 = atan2(v369, v368);
                    __double2 v373 = __sincos_stret(v372);
                    long double v374 = atan2(v370 + v373.__sinval * v373.__sinval * 42841.3115 * v373.__sinval, v371 + v373.__cosval * v373.__cosval * -42697.6727 * v373.__cosval);
                    long double v375 = tan(v374 * 0.5 + 0.785398163);
                    long double v376 = log(v375);
                    v377.f64[0] = v478;
                    v377.f64[1] = v376;
                    *(float64x2_t *)(v344 + 40) = vmlaq_f64(v510, v508, v377);
                    *(unsigned char *)(v344 + 61) = 1;
                    int v357 = *(unsigned __int8 *)(v345 + 61);
                  }
                  double v378 = *(double *)(v344 + 40);
                  if (!v357 && *(unsigned char *)(v345 + 62))
                  {
                    long double v379 = *(double *)(v345 + 16);
                    long double v380 = *(double *)(v345 + 24);
                    long double v381 = *(double *)(v345 + 32);
                    double v382 = sqrt(v379 * v379 + v380 * v380);
                    double v383 = atan2(v381, v382 * 0.996647189);
                    long double v479 = atan2(v380, v379);
                    __double2 v384 = __sincos_stret(v383);
                    long double v385 = atan2(v381 + v384.__sinval * v384.__sinval * 42841.3115 * v384.__sinval, v382 + v384.__cosval * v384.__cosval * -42697.6727 * v384.__cosval);
                    long double v386 = tan(v385 * 0.5 + 0.785398163);
                    long double v387 = log(v386);
                    v388.f64[0] = v479;
                    v388.f64[1] = v387;
                    *(float64x2_t *)(v345 + 40) = vmlaq_f64(v510, v508, v388);
                    *(unsigned char *)(v345 + 61) = 1;
                  }
                  if (v378 < *(double *)(v345 + 40))
                  {
LABEL_240:
                    ++v340;
                    uint64_t v339 = v343;
                  }
                }
              }
              unint64_t *v341 = *v340;
            }
            while (v339 <= (uint64_t)((unint64_t)(v337 - 2) >> 1));
            int8x16_t v389 = a2 - 1;
            _ZF = v340 == --a2;
            if (_ZF)
            {
              unint64_t *v340 = v469;
            }
            else
            {
              unint64_t *v340 = *v389;
              *int8x16_t v389 = v469;
              uint64_t v390 = (char *)v340 - (char *)v336 + 8;
              if (v390 >= 9)
              {
                unint64_t v391 = (v390 >> 3) - 2;
                unint64_t v392 = v391 >> 1;
                uint64_t v393 = &v336[v391 >> 1];
                unint64_t v394 = *v393;
                unint64_t v395 = *v340;
                long long v396 = (md::LabelPoint *)(*v393 + 16);
                double v397 = *(double *)md::LabelPoint::mercatorPoint(v396);
                if (v397 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16)))
                {
                  _CF = v394 >= v395;
                  int8x16_t v336 = v500;
                  if (!_CF)
                  {
LABEL_267:
                    unint64_t v399 = *v340;
                    unint64_t *v340 = *v393;
                    if (v391 >= 2)
                    {
                      while (1)
                      {
                        unint64_t v401 = v392 - 1;
                        unint64_t v392 = (v392 - 1) >> 1;
                        int16x8_t v402 = &v500[v392];
                        unint64_t v403 = *v402;
                        int8x16_t v404 = (md::LabelPoint *)(*v402 + 16);
                        double v405 = *(double *)md::LabelPoint::mercatorPoint(v404);
                        if (v405 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v399 + 16)))
                        {
                          if (v403 >= v399) {
                            break;
                          }
                        }
                        else
                        {
                          double v400 = *(double *)md::LabelPoint::mercatorPoint(v404);
                          if (v400 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v399 + 16))) {
                            break;
                          }
                        }
                        *uint64_t v393 = *v402;
                        uint64_t v393 = &v500[v392];
                        if (v401 <= 1) {
                          goto LABEL_274;
                        }
                      }
                    }
                    int16x8_t v402 = v393;
LABEL_274:
                    *int16x8_t v402 = v399;
                    int8x16_t v336 = v500;
                  }
                }
                else
                {
                  double v398 = *(double *)md::LabelPoint::mercatorPoint(v396);
                  int8x16_t v336 = v500;
                  if (v398 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v395 + 16))) {
                    goto LABEL_267;
                  }
                }
              }
            }
            if (v337-- <= 2) {
              return;
            }
          }
        }
      }
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = &a1[(unint64_t)v16 >> 1];
    if ((unint64_t)v15 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(v18, a1, v13);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, v18, v13);
      uint64_t v19 = v17;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1 + 1, &a1[v19 - 1], a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1 + 2, &a1[v19 + 1], a2 - 3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(&a1[v19 - 1], v18, &a1[v19 + 1]);
      unint64_t v20 = *a1;
      *a1 = a1[v19];
      a1[v19] = v20;
    }
    uint64_t v21 = a3 - 1;
    if (a4) {
      goto LABEL_13;
    }
    unint64_t v22 = *(a1 - 1);
    unint64_t v23 = *a1;
    double v24 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
    if (v24 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v23 + 16)))
    {
      if (v22 >= v23) {
        goto LABEL_87;
      }
LABEL_13:
      double v25 = a1 + 1;
      unint64_t v26 = *a1;
      BOOL v27 = (md::LabelPoint *)(*a1 + 16);
      uint64_t v467 = v21;
      while (1)
      {
        unint64_t v29 = *v25;
        int8x16_t v30 = (md::LabelPoint *)(*v25 + 16);
        double v31 = *(double *)md::LabelPoint::mercatorPoint(v30);
        if (v31 == *(double *)md::LabelPoint::mercatorPoint(v27)) {
          break;
        }
        double v28 = *(double *)md::LabelPoint::mercatorPoint(v30);
        if (v28 >= *(double *)md::LabelPoint::mercatorPoint(v27)) {
          goto LABEL_18;
        }
LABEL_15:
        ++v25;
      }
      if (v29 < v26) {
        goto LABEL_15;
      }
LABEL_18:
      unint64_t v32 = v25 - 1;
      int64_t i = v13;
      if (v25 - 1 != a1)
      {
        while (1)
        {
          unint64_t v35 = *i;
          int32x4_t v36 = (md::LabelPoint *)(*i + 16);
          double v37 = *(double *)md::LabelPoint::mercatorPoint(v36);
          if (v37 == *(double *)md::LabelPoint::mercatorPoint(v27))
          {
            if (v35 < v26) {
              goto LABEL_37;
            }
          }
          else
          {
            double v34 = *(double *)md::LabelPoint::mercatorPoint(v36);
            if (v34 < *(double *)md::LabelPoint::mercatorPoint(v27)) {
              goto LABEL_37;
            }
          }
          --i;
        }
      }
      int64_t i = a2;
      if (v25 < a2)
      {
        for (int64_t i = v13; ; --i)
        {
          unint64_t v40 = *i;
          int8x16_t v41 = (md::LabelPoint *)(*i + 16);
          double v42 = *(double *)md::LabelPoint::mercatorPoint(v41);
          if (v42 == *(double *)md::LabelPoint::mercatorPoint(v27))
          {
            if (v40 < v26 || v25 >= i) {
              break;
            }
          }
          else
          {
            double v38 = *(double *)md::LabelPoint::mercatorPoint(v41);
            if (v38 < *(double *)md::LabelPoint::mercatorPoint(v27) || v25 >= i) {
              break;
            }
          }
        }
      }
LABEL_37:
      if (v25 < i)
      {
        unint64_t v44 = *v25;
        unint64_t v45 = *i;
        unint64_t v46 = v25;
        uint64_t v47 = i;
        do
        {
          *v46++ = v45;
          *uint64_t v47 = v44;
          while (1)
          {
            unint64_t v44 = *v46;
            if (!*(unsigned char *)(*v46 + 61) && *(unsigned char *)(v44 + 62))
            {
              long double v48 = *(double *)(v44 + 16);
              long double v49 = *(double *)(v44 + 24);
              long double v50 = *(double *)(v44 + 32);
              double v51 = sqrt(v48 * v48 + v49 * v49);
              double v52 = atan2(v50, v51 * 0.996647189);
              long double v480 = atan2(v49, v48);
              __double2 v53 = __sincos_stret(v52);
              long double v54 = atan2(v50 + v53.__sinval * v53.__sinval * 42841.3115 * v53.__sinval, v51 + v53.__cosval * v53.__cosval * -42697.6727 * v53.__cosval);
              long double v55 = tan(v54 * v6 + 0.785398163);
              long double v56 = log(v55);
              v57.f64[0] = v480;
              v57.f64[1] = v56;
              *(float64x2_t *)(v44 + 40) = vmlaq_f64(v510, v505, v57);
              *(unsigned char *)(v44 + 61) = 1;
            }
            double v58 = *(double *)(v44 + 40);
            if (*(unsigned char *)(v26 + 61))
            {
              int v59 = 1;
            }
            else
            {
              int v59 = *(unsigned __int8 *)(v26 + 62);
              if (*(unsigned char *)(v26 + 62))
              {
                long double v60 = *(double *)(v26 + 16);
                long double v61 = *(double *)(v26 + 24);
                long double v62 = *(double *)(v26 + 32);
                double v63 = sqrt(v60 * v60 + v61 * v61);
                double v64 = atan2(v62, v63 * 0.996647189);
                long double v481 = atan2(v61, v60);
                __double2 v65 = __sincos_stret(v64);
                long double v66 = v63 + v65.__cosval * v65.__cosval * -42697.6727 * v65.__cosval;
                double v6 = 0.5;
                long double v67 = atan2(v62 + v65.__sinval * v65.__sinval * 42841.3115 * v65.__sinval, v66);
                long double v68 = tan(v67 * 0.5 + 0.785398163);
                long double v69 = log(v68);
                v70.f64[0] = v481;
                v70.f64[1] = v69;
                *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v70);
                int v59 = 1;
                *(unsigned char *)(v26 + 61) = 1;
              }
            }
            if (v58 != *(double *)(v26 + 40)) {
              break;
            }
            if (v44 >= v26) {
              goto LABEL_59;
            }
LABEL_42:
            ++v46;
          }
          if (!*(unsigned char *)(v44 + 61) && *(unsigned char *)(v44 + 62))
          {
            long double v71 = *(double *)(v44 + 16);
            long double v72 = *(double *)(v44 + 24);
            long double v73 = *(double *)(v44 + 32);
            double v74 = sqrt(v71 * v71 + v72 * v72);
            double v75 = atan2(v73, v74 * 0.996647189);
            long double v482 = atan2(v72, v71);
            __double2 v76 = __sincos_stret(v75);
            long double v77 = atan2(v73 + v76.__sinval * v76.__sinval * 42841.3115 * v76.__sinval, v74 + v76.__cosval * v76.__cosval * -42697.6727 * v76.__cosval);
            long double v78 = tan(v77 * v6 + 0.785398163);
            long double v79 = log(v78);
            v80.f64[0] = v482;
            v80.f64[1] = v79;
            *(float64x2_t *)(v44 + 40) = vmlaq_f64(v510, v505, v80);
            *(unsigned char *)(v44 + 61) = 1;
            int v59 = *(unsigned __int8 *)(v26 + 61);
          }
          double v81 = *(double *)(v44 + 40);
          if (v59)
          {
            int v59 = 1;
          }
          else
          {
            int v59 = *(unsigned __int8 *)(v26 + 62);
            if (*(unsigned char *)(v26 + 62))
            {
              long double v82 = *(double *)(v26 + 16);
              long double v83 = *(double *)(v26 + 24);
              long double v84 = *(double *)(v26 + 32);
              double v85 = sqrt(v82 * v82 + v83 * v83);
              double v86 = atan2(v84, v85 * 0.996647189);
              long double v483 = atan2(v83, v82);
              __double2 v87 = __sincos_stret(v86);
              long double v88 = v85 + v87.__cosval * v87.__cosval * -42697.6727 * v87.__cosval;
              double v6 = 0.5;
              long double v89 = atan2(v84 + v87.__sinval * v87.__sinval * 42841.3115 * v87.__sinval, v88);
              long double v90 = tan(v89 * 0.5 + 0.785398163);
              long double v91 = log(v90);
              v92.f64[0] = v483;
              v92.f64[1] = v91;
              *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v92);
              int v59 = 1;
              *(unsigned char *)(v26 + 61) = 1;
            }
          }
          if (v81 < *(double *)(v26 + 40)) {
            goto LABEL_42;
          }
LABEL_59:
          unint64_t v32 = v46 - 1;
          --v47;
          int v93 = v59;
LABEL_62:
          unint64_t v45 = *v47;
          if (!*(unsigned char *)(*v47 + 61) && *(unsigned char *)(v45 + 62))
          {
            long double v94 = *(double *)(v45 + 16);
            long double v95 = *(double *)(v45 + 24);
            long double v96 = *(double *)(v45 + 32);
            double v97 = sqrt(v94 * v94 + v95 * v95);
            double v98 = atan2(v96, v97 * 0.996647189);
            long double v484 = atan2(v95, v94);
            __double2 v99 = __sincos_stret(v98);
            long double v100 = atan2(v96 + v99.__sinval * v99.__sinval * 42841.3115 * v99.__sinval, v97 + v99.__cosval * v99.__cosval * -42697.6727 * v99.__cosval);
            long double v101 = tan(v100 * v6 + 0.785398163);
            long double v102 = log(v101);
            v103.f64[0] = v484;
            v103.f64[1] = v102;
            *(float64x2_t *)(v45 + 40) = vmlaq_f64(v510, v505, v103);
            *(unsigned char *)(v45 + 61) = 1;
            int v59 = *(unsigned __int8 *)(v26 + 61);
            int v93 = v59;
          }
          double v104 = *(double *)(v45 + 40);
          if (v93)
          {
LABEL_68:
            int v93 = 1;
          }
          else
          {
            int v93 = *(unsigned __int8 *)(v26 + 62);
            if (*(unsigned char *)(v26 + 62))
            {
              long double v105 = *(double *)(v26 + 16);
              long double v106 = *(double *)(v26 + 24);
              long double v107 = *(double *)(v26 + 32);
              double v108 = sqrt(v105 * v105 + v106 * v106);
              double v109 = atan2(v107, v108 * 0.996647189);
              long double v485 = atan2(v106, v105);
              __double2 v110 = __sincos_stret(v109);
              long double v111 = v108 + v110.__cosval * v110.__cosval * -42697.6727 * v110.__cosval;
              double v6 = 0.5;
              long double v112 = atan2(v107 + v110.__sinval * v110.__sinval * 42841.3115 * v110.__sinval, v111);
              long double v113 = tan(v112 * 0.5 + 0.785398163);
              long double v114 = log(v113);
              v115.f64[0] = v485;
              v115.f64[1] = v114;
              *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v115);
              int v59 = 1;
              *(unsigned char *)(v26 + 61) = 1;
              goto LABEL_68;
            }
          }
          if (v104 == *(double *)(v26 + 40))
          {
            if (v45 < v26) {
              continue;
            }
LABEL_61:
            --v47;
            goto LABEL_62;
          }
          if (!*(unsigned char *)(v45 + 61) && *(unsigned char *)(v45 + 62))
          {
            long double v116 = *(double *)(v45 + 16);
            long double v117 = *(double *)(v45 + 24);
            long double v118 = *(double *)(v45 + 32);
            double v119 = sqrt(v116 * v116 + v117 * v117);
            double v120 = atan2(v118, v119 * 0.996647189);
            long double v486 = atan2(v117, v116);
            __double2 v121 = __sincos_stret(v120);
            long double v122 = atan2(v118 + v121.__sinval * v121.__sinval * 42841.3115 * v121.__sinval, v119 + v121.__cosval * v121.__cosval * -42697.6727 * v121.__cosval);
            long double v123 = tan(v122 * v6 + 0.785398163);
            long double v124 = log(v123);
            v125.f64[0] = v486;
            v125.f64[1] = v124;
            *(float64x2_t *)(v45 + 40) = vmlaq_f64(v510, v505, v125);
            *(unsigned char *)(v45 + 61) = 1;
            int v59 = *(unsigned __int8 *)(v26 + 61);
          }
          double v126 = *(double *)(v45 + 40);
          if (v59)
          {
            int v59 = 1;
          }
          else
          {
            int v59 = *(unsigned __int8 *)(v26 + 62);
            if (*(unsigned char *)(v26 + 62))
            {
              long double v127 = *(double *)(v26 + 16);
              long double v128 = *(double *)(v26 + 24);
              long double v129 = *(double *)(v26 + 32);
              double v130 = sqrt(v127 * v127 + v128 * v128);
              double v131 = atan2(v129, v130 * 0.996647189);
              long double v487 = atan2(v128, v127);
              __double2 v132 = __sincos_stret(v131);
              long double v133 = v130 + v132.__cosval * v132.__cosval * -42697.6727 * v132.__cosval;
              double v6 = 0.5;
              long double v134 = atan2(v129 + v132.__sinval * v132.__sinval * 42841.3115 * v132.__sinval, v133);
              long double v135 = tan(v134 * 0.5 + 0.785398163);
              long double v136 = log(v135);
              v137.f64[0] = v487;
              v137.f64[1] = v136;
              *(float64x2_t *)(v26 + 40) = vmlaq_f64(v510, v505, v137);
              int v59 = 1;
              *(unsigned char *)(v26 + 61) = 1;
            }
          }
          int v93 = v59;
          if (v126 >= *(double *)(v26 + 40)) {
            goto LABEL_61;
          }
        }
        while (v46 < v47);
      }
      if (v32 != a1) {
        *a1 = *v32;
      }
      *unint64_t v32 = v26;
      _CF = v25 >= i;
      a3 = v467;
      uint64_t v12 = a2;
      int16x8_t v13 = a2 - 1;
      if (_CF)
      {
        BOOL v138 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, v32);
        uint64_t j = v32 + 1;
        if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(v32 + 1, a2))
        {
          a2 = v32;
          if (v138) {
            return;
          }
          goto LABEL_2;
        }
        if (!v138) {
          goto LABEL_85;
        }
      }
      else
      {
LABEL_85:
        std::__introsort<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **,false>(a1, v32, v467, a4 & 1);
        a4 = 0;
        uint64_t j = v32 + 1;
      }
    }
    else
    {
      double v139 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
      if (v139 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v23 + 16))) {
        goto LABEL_13;
      }
LABEL_87:
      unint64_t v140 = *a1;
      unint64_t v141 = *v13;
      int32x4_t v142 = (md::LabelPoint *)(*a1 + 16);
      double v143 = *(double *)md::LabelPoint::mercatorPoint(v142);
      if (v143 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v141 + 16)))
      {
        if (v140 < v141) {
          goto LABEL_89;
        }
      }
      else
      {
        double v147 = *(double *)md::LabelPoint::mercatorPoint(v142);
        if (v147 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v141 + 16)))
        {
LABEL_89:
          for (uint64_t j = a1 + 1; ; ++j)
          {
            unint64_t v145 = *j;
            double v146 = *(double *)md::LabelPoint::mercatorPoint(v142);
            if (v146 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v145 + 16)))
            {
              if (v140 < v145) {
                goto LABEL_102;
              }
            }
            else
            {
              double v144 = *(double *)md::LabelPoint::mercatorPoint(v142);
              if (v144 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v145 + 16))) {
                goto LABEL_102;
              }
            }
          }
        }
      }
      for (uint64_t j = a1 + 1; ; ++j)
      {
        int8x16_t v149 = a2;
        if (j >= a2) {
          break;
        }
        unint64_t v150 = *j;
        double v151 = *(double *)md::LabelPoint::mercatorPoint(v142);
        if (v151 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v150 + 16)))
        {
          if (v140 < v150)
          {
LABEL_102:
            int8x16_t v149 = a2;
            break;
          }
        }
        else
        {
          double v148 = *(double *)md::LabelPoint::mercatorPoint(v142);
          if (v148 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v150 + 16))) {
            goto LABEL_102;
          }
        }
      }
      uint64_t v152 = v21;
      uint64_t k = v149;
      if (j < v149)
      {
        for (uint64_t k = v13; ; --k)
        {
          unint64_t v155 = *k;
          double v156 = *(double *)md::LabelPoint::mercatorPoint(v142);
          if (v156 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v155 + 16)))
          {
            if (v140 >= v155) {
              break;
            }
          }
          else
          {
            double v154 = *(double *)md::LabelPoint::mercatorPoint(v142);
            if (v154 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v155 + 16))) {
              break;
            }
          }
        }
      }
      if (j < k)
      {
        unint64_t v157 = *j;
        unint64_t v158 = *k;
        do
        {
          *j++ = v158;
          *uint64_t k = v157;
          while (1)
          {
            unint64_t v157 = *j;
            if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
            {
              long double v159 = *(double *)(v140 + 16);
              long double v160 = *(double *)(v140 + 24);
              long double v161 = *(double *)(v140 + 32);
              double v162 = sqrt(v159 * v159 + v160 * v160);
              double v163 = atan2(v161, v162 * 0.996647189);
              long double v488 = atan2(v160, v159);
              __double2 v164 = __sincos_stret(v163);
              long double v165 = atan2(v161 + v164.__sinval * v164.__sinval * 42841.3115 * v164.__sinval, v162 + v164.__cosval * v164.__cosval * -42697.6727 * v164.__cosval);
              long double v166 = tan(v165 * v6 + 0.785398163);
              long double v167 = log(v166);
              v168.f64[0] = v488;
              v168.f64[1] = v167;
              *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v168);
              *(unsigned char *)(v140 + 61) = 1;
            }
            double v169 = *(double *)(v140 + 40);
            if (*(unsigned char *)(v157 + 61))
            {
              int v170 = 1;
            }
            else
            {
              int v170 = *(unsigned __int8 *)(v157 + 62);
              if (*(unsigned char *)(v157 + 62))
              {
                long double v171 = *(double *)(v157 + 16);
                long double v172 = *(double *)(v157 + 24);
                long double v173 = *(double *)(v157 + 32);
                double v472 = sqrt(v171 * v171 + v172 * v172);
                double v174 = atan2(v173, v472 * 0.996647189);
                long double v489 = atan2(v172, v171);
                __double2 v175 = __sincos_stret(v174);
                long double v176 = atan2(v173 + v175.__sinval * v175.__sinval * 42841.3115 * v175.__sinval, v472 + v175.__cosval * v175.__cosval * -42697.6727 * v175.__cosval);
                long double v177 = tan(v176 * v6 + 0.785398163);
                long double v178 = log(v177);
                v179.f64[0] = v489;
                v179.f64[1] = v178;
                *(float64x2_t *)(v157 + 40) = vmlaq_f64(v510, v505, v179);
                int v170 = 1;
                *(unsigned char *)(v157 + 61) = 1;
              }
            }
            if (v169 != *(double *)(v157 + 40)) {
              break;
            }
            if (v140 < v157) {
              goto LABEL_132;
            }
LABEL_114:
            ++j;
          }
          if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
          {
            long double v180 = *(double *)(v140 + 16);
            long double v181 = *(double *)(v140 + 24);
            long double v182 = *(double *)(v140 + 32);
            double v183 = sqrt(v180 * v180 + v181 * v181);
            double v184 = atan2(v182, v183 * 0.996647189);
            long double v490 = atan2(v181, v180);
            __double2 v185 = __sincos_stret(v184);
            long double v186 = atan2(v182 + v185.__sinval * v185.__sinval * 42841.3115 * v185.__sinval, v183 + v185.__cosval * v185.__cosval * -42697.6727 * v185.__cosval);
            long double v187 = tan(v186 * v6 + 0.785398163);
            long double v188 = log(v187);
            v189.f64[0] = v490;
            v189.f64[1] = v188;
            *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v189);
            *(unsigned char *)(v140 + 61) = 1;
            int v170 = *(unsigned __int8 *)(v157 + 61);
          }
          double v190 = *(double *)(v140 + 40);
          if (!v170 && *(unsigned char *)(v157 + 62))
          {
            long double v191 = *(double *)(v157 + 16);
            long double v192 = *(double *)(v157 + 24);
            long double v193 = *(double *)(v157 + 32);
            double v473 = sqrt(v191 * v191 + v192 * v192);
            double v194 = atan2(v193, v473 * 0.996647189);
            long double v491 = atan2(v192, v191);
            __double2 v195 = __sincos_stret(v194);
            long double v196 = atan2(v193 + v195.__sinval * v195.__sinval * 42841.3115 * v195.__sinval, v473 + v195.__cosval * v195.__cosval * -42697.6727 * v195.__cosval);
            long double v197 = tan(v196 * v6 + 0.785398163);
            long double v198 = log(v197);
            v199.f64[0] = v491;
            v199.f64[1] = v198;
            *(float64x2_t *)(v157 + 40) = vmlaq_f64(v510, v505, v199);
            *(unsigned char *)(v157 + 61) = 1;
          }
          if (v190 >= *(double *)(v157 + 40)) {
            goto LABEL_114;
          }
          do
          {
            while (1)
            {
LABEL_132:
              unint64_t v200 = *--k;
              unint64_t v158 = v200;
              if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
              {
                long double v201 = *(double *)(v140 + 16);
                long double v202 = *(double *)(v140 + 24);
                long double v203 = *(double *)(v140 + 32);
                double v204 = sqrt(v201 * v201 + v202 * v202);
                double v205 = atan2(v203, v204 * 0.996647189);
                long double v492 = atan2(v202, v201);
                __double2 v206 = __sincos_stret(v205);
                long double v207 = atan2(v203 + v206.__sinval * v206.__sinval * 42841.3115 * v206.__sinval, v204 + v206.__cosval * v206.__cosval * -42697.6727 * v206.__cosval);
                long double v208 = tan(v207 * v6 + 0.785398163);
                long double v209 = log(v208);
                v210.f64[0] = v492;
                v210.f64[1] = v209;
                *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v210);
                *(unsigned char *)(v140 + 61) = 1;
              }
              double v211 = *(double *)(v140 + 40);
              if (*(unsigned char *)(v158 + 61))
              {
                int v212 = 1;
              }
              else
              {
                int v212 = *(unsigned __int8 *)(v158 + 62);
                if (*(unsigned char *)(v158 + 62))
                {
                  long double v213 = *(double *)(v158 + 16);
                  long double v214 = *(double *)(v158 + 24);
                  long double v215 = *(double *)(v158 + 32);
                  double v474 = sqrt(v213 * v213 + v214 * v214);
                  double v216 = atan2(v215, v474 * 0.996647189);
                  long double v493 = atan2(v214, v213);
                  __double2 v217 = __sincos_stret(v216);
                  long double v218 = atan2(v215 + v217.__sinval * v217.__sinval * 42841.3115 * v217.__sinval, v474 + v217.__cosval * v217.__cosval * -42697.6727 * v217.__cosval);
                  long double v219 = tan(v218 * v6 + 0.785398163);
                  long double v220 = log(v219);
                  v221.f64[0] = v493;
                  v221.f64[1] = v220;
                  *(float64x2_t *)(v158 + 40) = vmlaq_f64(v510, v505, v221);
                  int v212 = 1;
                  *(unsigned char *)(v158 + 61) = 1;
                }
              }
              if (v211 != *(double *)(v158 + 40)) {
                break;
              }
              if (v140 >= v158) {
                goto LABEL_111;
              }
            }
            if (!*(unsigned char *)(v140 + 61) && *(unsigned char *)(v140 + 62))
            {
              long double v222 = *(double *)(v140 + 16);
              long double v223 = *(double *)(v140 + 24);
              long double v224 = *(double *)(v140 + 32);
              double v225 = sqrt(v222 * v222 + v223 * v223);
              double v226 = atan2(v224, v225 * 0.996647189);
              long double v494 = atan2(v223, v222);
              __double2 v227 = __sincos_stret(v226);
              long double v228 = atan2(v224 + v227.__sinval * v227.__sinval * 42841.3115 * v227.__sinval, v225 + v227.__cosval * v227.__cosval * -42697.6727 * v227.__cosval);
              long double v229 = tan(v228 * v6 + 0.785398163);
              long double v230 = log(v229);
              v231.f64[0] = v494;
              v231.f64[1] = v230;
              *(float64x2_t *)(v140 + 40) = vmlaq_f64(v510, v505, v231);
              *(unsigned char *)(v140 + 61) = 1;
              int v212 = *(unsigned __int8 *)(v158 + 61);
            }
            double v232 = *(double *)(v140 + 40);
            if (!v212 && *(unsigned char *)(v158 + 62))
            {
              long double v233 = *(double *)(v158 + 16);
              long double v234 = *(double *)(v158 + 24);
              long double v235 = *(double *)(v158 + 32);
              double v475 = sqrt(v233 * v233 + v234 * v234);
              double v236 = atan2(v235, v475 * 0.996647189);
              long double v495 = atan2(v234, v233);
              __double2 v237 = __sincos_stret(v236);
              long double v238 = atan2(v235 + v237.__sinval * v237.__sinval * 42841.3115 * v237.__sinval, v475 + v237.__cosval * v237.__cosval * -42697.6727 * v237.__cosval);
              long double v239 = tan(v238 * v6 + 0.785398163);
              long double v240 = log(v239);
              v241.f64[0] = v495;
              v241.f64[1] = v240;
              *(float64x2_t *)(v158 + 40) = vmlaq_f64(v510, v505, v241);
              *(unsigned char *)(v158 + 61) = 1;
            }
          }
          while (v232 < *(double *)(v158 + 40));
LABEL_111:
          ;
        }
        while (j < k);
      }
      int8x16_t v242 = j - 1;
      _CF = j - 1 >= a1;
      _ZF = j - 1 == a1;
      uint64_t v12 = a2;
      int16x8_t v13 = a2 - 1;
      if (j - 1 != a1) {
        *a1 = *v242;
      }
      a4 = 0;
      *int8x16_t v242 = v140;
      a3 = v152;
    }
  }
  int8x16_t v248 = a1 + 1;
  BOOL v250 = a1 == v12 || v248 == v12;
  if (a4)
  {
    if (v250) {
      return;
    }
    uint64_t v251 = 0;
    float64x2_t v506 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    int8x16_t v252 = a1;
LABEL_178:
    int32x4_t v254 = a1;
    int8x16_t v255 = v252;
    int8x16_t v252 = v248;
    unint64_t v257 = *v255;
    unint64_t v256 = v255[1];
    double v258 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v256 + 16));
    if (v258 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v257 + 16)))
    {
      _CF = v256 >= v257;
      a1 = v254;
      if (_CF) {
        goto LABEL_177;
      }
    }
    else
    {
      double v259 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v256 + 16));
      double v260 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v257 + 16));
      a1 = v254;
      if (v259 >= v260) {
        goto LABEL_177;
      }
    }
    unint64_t v261 = v255[1];
    v255[1] = *v255;
    int16x8_t v253 = a1;
    if (v255 == a1) {
      goto LABEL_176;
    }
    uint64_t v262 = v251;
    while (1)
    {
      unint64_t v263 = *(unint64_t *)((char *)a1 + v262 - 8);
      if (!*(unsigned char *)(v261 + 61) && *(unsigned char *)(v261 + 62))
      {
        long double v264 = *(double *)(v261 + 16);
        long double v265 = *(double *)(v261 + 24);
        long double v266 = *(double *)(v261 + 32);
        double v267 = sqrt(v264 * v264 + v265 * v265);
        double v268 = atan2(v266, v267 * 0.996647189);
        long double v496 = atan2(v265, v264);
        __double2 v269 = __sincos_stret(v268);
        long double v270 = atan2(v266 + v269.__sinval * v269.__sinval * 42841.3115 * v269.__sinval, v267 + v269.__cosval * v269.__cosval * -42697.6727 * v269.__cosval);
        long double v271 = tan(v270 * 0.5 + 0.785398163);
        long double v272 = log(v271);
        v273.f64[0] = v496;
        v273.f64[1] = v272;
        *(float64x2_t *)(v261 + 40) = vmlaq_f64(v510, v506, v273);
        *(unsigned char *)(v261 + 61) = 1;
      }
      double v274 = *(double *)(v261 + 40);
      if (*(unsigned char *)(v263 + 61))
      {
        int v275 = 1;
      }
      else
      {
        int v275 = *(unsigned __int8 *)(v263 + 62);
        if (*(unsigned char *)(v263 + 62))
        {
          long double v276 = *(double *)(v263 + 16);
          long double v277 = *(double *)(v263 + 24);
          long double v278 = *(double *)(v263 + 32);
          double v279 = sqrt(v276 * v276 + v277 * v277);
          double v280 = atan2(v278, v279 * 0.996647189);
          long double v497 = atan2(v277, v276);
          __double2 v281 = __sincos_stret(v280);
          long double v282 = atan2(v278 + v281.__sinval * v281.__sinval * 42841.3115 * v281.__sinval, v279 + v281.__cosval * v281.__cosval * -42697.6727 * v281.__cosval);
          long double v283 = tan(v282 * 0.5 + 0.785398163);
          long double v284 = log(v283);
          v285.f64[0] = v497;
          v285.f64[1] = v284;
          *(float64x2_t *)(v263 + 40) = vmlaq_f64(v510, v506, v285);
          int v275 = 1;
          *(unsigned char *)(v263 + 61) = 1;
        }
      }
      if (v274 == *(double *)(v263 + 40))
      {
        if (v261 >= v263)
        {
          int16x8_t v253 = v255;
LABEL_176:
          unint64_t *v253 = v261;
LABEL_177:
          int8x16_t v248 = v252 + 1;
          v251 += 8;
          if (v252 + 1 == a2) {
            return;
          }
          goto LABEL_178;
        }
      }
      else
      {
        if (!*(unsigned char *)(v261 + 61) && *(unsigned char *)(v261 + 62))
        {
          long double v286 = *(double *)(v261 + 16);
          long double v287 = *(double *)(v261 + 24);
          long double v288 = *(double *)(v261 + 32);
          double v289 = sqrt(v286 * v286 + v287 * v287);
          double v290 = atan2(v288, v289 * 0.996647189);
          long double v498 = atan2(v287, v286);
          __double2 v291 = __sincos_stret(v290);
          long double v292 = atan2(v288 + v291.__sinval * v291.__sinval * 42841.3115 * v291.__sinval, v289 + v291.__cosval * v291.__cosval * -42697.6727 * v291.__cosval);
          long double v293 = tan(v292 * 0.5 + 0.785398163);
          long double v294 = log(v293);
          v295.f64[0] = v498;
          v295.f64[1] = v294;
          *(float64x2_t *)(v261 + 40) = vmlaq_f64(v510, v506, v295);
          *(unsigned char *)(v261 + 61) = 1;
          int v275 = *(unsigned __int8 *)(v263 + 61);
        }
        double v296 = *(double *)(v261 + 40);
        if (!v275 && *(unsigned char *)(v263 + 62))
        {
          long double v297 = *(double *)(v263 + 16);
          long double v298 = *(double *)(v263 + 24);
          long double v299 = *(double *)(v263 + 32);
          double v300 = sqrt(v297 * v297 + v298 * v298);
          double v301 = atan2(v299, v300 * 0.996647189);
          long double v499 = atan2(v298, v297);
          __double2 v302 = __sincos_stret(v301);
          long double v303 = atan2(v299 + v302.__sinval * v302.__sinval * 42841.3115 * v302.__sinval, v300 + v302.__cosval * v302.__cosval * -42697.6727 * v302.__cosval);
          long double v304 = tan(v303 * 0.5 + 0.785398163);
          long double v305 = log(v304);
          v306.f64[0] = v499;
          v306.f64[1] = v305;
          *(float64x2_t *)(v263 + 40) = vmlaq_f64(v510, v506, v306);
          *(unsigned char *)(v263 + 61) = 1;
        }
        if (v296 >= *(double *)(v263 + 40))
        {
          int16x8_t v253 = (unint64_t *)((char *)a1 + v262);
          goto LABEL_176;
        }
      }
      --v255;
      *(unint64_t *)((char *)a1 + v262) = v263;
      v262 -= 8;
      if (!v262)
      {
        int16x8_t v253 = a1;
        goto LABEL_176;
      }
    }
  }
  if (!v250)
  {
    float64x2_t v509 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    do
    {
      int8x16_t v406 = a1;
      int32x4_t v407 = v248;
      int8x16_t v410 = a1;
      unint64_t v409 = *a1;
      unint64_t v408 = v410[1];
      double v411 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v408 + 16));
      if (v411 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v409 + 16)))
      {
        _CF = v408 >= v409;
        a1 = v407;
        if (!_CF) {
          goto LABEL_284;
        }
      }
      else
      {
        double v412 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v408 + 16));
        uint64_t v413 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v409 + 16));
        a1 = v407;
        if (v412 < *v413)
        {
LABEL_284:
          unint64_t v414 = *a1;
          unint64_t v415 = *v406;
          do
          {
            while (1)
            {
              int8x16_t v416 = v406;
              unint64_t v417 = v415;
              unint64_t v418 = *--v406;
              unint64_t v415 = v418;
              v406[2] = v417;
              if (!*(unsigned char *)(v414 + 61) && *(unsigned char *)(v414 + 62))
              {
                long double v419 = *(double *)(v414 + 16);
                long double v420 = *(double *)(v414 + 24);
                long double v421 = *(double *)(v414 + 32);
                double v422 = sqrt(v419 * v419 + v420 * v420);
                double v423 = atan2(v421, v422 * 0.996647189);
                long double v501 = atan2(v420, v419);
                __double2 v424 = __sincos_stret(v423);
                long double v425 = atan2(v421 + v424.__sinval * v424.__sinval * 42841.3115 * v424.__sinval, v422 + v424.__cosval * v424.__cosval * -42697.6727 * v424.__cosval);
                long double v426 = tan(v425 * 0.5 + 0.785398163);
                long double v427 = log(v426);
                v428.f64[0] = v501;
                v428.f64[1] = v427;
                *(float64x2_t *)(v414 + 40) = vmlaq_f64(v510, v509, v428);
                *(unsigned char *)(v414 + 61) = 1;
              }
              double v429 = *(double *)(v414 + 40);
              if (*(unsigned char *)(v415 + 61))
              {
                int v430 = 1;
              }
              else
              {
                int v430 = *(unsigned __int8 *)(v415 + 62);
                if (*(unsigned char *)(v415 + 62))
                {
                  long double v431 = *(double *)(v415 + 16);
                  long double v432 = *(double *)(v415 + 24);
                  long double v433 = *(double *)(v415 + 32);
                  double v434 = sqrt(v431 * v431 + v432 * v432);
                  double v435 = atan2(v433, v434 * 0.996647189);
                  long double v502 = atan2(v432, v431);
                  __double2 v436 = __sincos_stret(v435);
                  long double v437 = atan2(v433 + v436.__sinval * v436.__sinval * 42841.3115 * v436.__sinval, v434 + v436.__cosval * v436.__cosval * -42697.6727 * v436.__cosval);
                  long double v438 = tan(v437 * 0.5 + 0.785398163);
                  long double v439 = log(v438);
                  v440.f64[0] = v502;
                  v440.f64[1] = v439;
                  *(float64x2_t *)(v415 + 40) = vmlaq_f64(v510, v509, v440);
                  int v430 = 1;
                  *(unsigned char *)(v415 + 61) = 1;
                }
              }
              if (v429 != *(double *)(v415 + 40)) {
                break;
              }
              if (v414 >= v415) {
                goto LABEL_277;
              }
            }
            if (!*(unsigned char *)(v414 + 61) && *(unsigned char *)(v414 + 62))
            {
              long double v441 = *(double *)(v414 + 16);
              long double v442 = *(double *)(v414 + 24);
              long double v443 = *(double *)(v414 + 32);
              double v444 = sqrt(v441 * v441 + v442 * v442);
              double v445 = atan2(v443, v444 * 0.996647189);
              long double v503 = atan2(v442, v441);
              __double2 v446 = __sincos_stret(v445);
              long double v447 = atan2(v443 + v446.__sinval * v446.__sinval * 42841.3115 * v446.__sinval, v444 + v446.__cosval * v446.__cosval * -42697.6727 * v446.__cosval);
              long double v448 = tan(v447 * 0.5 + 0.785398163);
              long double v449 = log(v448);
              v450.f64[0] = v503;
              v450.f64[1] = v449;
              *(float64x2_t *)(v414 + 40) = vmlaq_f64(v510, v509, v450);
              *(unsigned char *)(v414 + 61) = 1;
              int v430 = *(unsigned __int8 *)(v415 + 61);
            }
            double v451 = *(double *)(v414 + 40);
            if (!v430 && *(unsigned char *)(v415 + 62))
            {
              long double v452 = *(double *)(v415 + 16);
              long double v453 = *(double *)(v415 + 24);
              long double v454 = *(double *)(v415 + 32);
              double v455 = sqrt(v452 * v452 + v453 * v453);
              double v456 = atan2(v454, v455 * 0.996647189);
              long double v504 = atan2(v453, v452);
              __double2 v457 = __sincos_stret(v456);
              long double v458 = atan2(v454 + v457.__sinval * v457.__sinval * 42841.3115 * v457.__sinval, v455 + v457.__cosval * v457.__cosval * -42697.6727 * v457.__cosval);
              long double v459 = tan(v458 * 0.5 + 0.785398163);
              long double v460 = log(v459);
              v461.f64[0] = v504;
              v461.f64[1] = v460;
              *(float64x2_t *)(v415 + 40) = vmlaq_f64(v510, v509, v461);
              *(unsigned char *)(v415 + 61) = 1;
            }
          }
          while (v451 < *(double *)(v415 + 40));
LABEL_277:
          *int8x16_t v416 = v414;
        }
      }
      int8x16_t v248 = a1 + 1;
    }
    while (a1 + 1 != a2);
  }
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (char *)operator new(0x4F8uLL);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2 + 1272;
  unint64_t v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13HasMeshHandleENS4_35PositionScaleInfoConstantDataHandleENS4_22ViewConstantDataHandleENS4_27TransformConstantDataHandleENS4_18StyleDataKeyHandleENS4_26StyleEmissiveDataKeyHandleENS4_29StyleCameraConstantDataHandleENS4_15ColorDataHandleENS4_10IndexRangeENS4_38StyleGroundOcclusionConstantDataHandleENS4_26SharedMaterialZIndexHandleENS4_17AssociationHandleENS4_13NormalsHandleENS4_23InstanceTransformHandleENS4_9UVsHandleENS4_31StyleRouteLineMaskDataKeyHandleENS4_15ElevationHandleENS4_20TextureHandleForTypeIN7DaVinci14DiffuseTextureEEENS4_35LandCoverSettingsConstantDataHandleENS4_24ShadowConstantDataHandleENS4_25PrepassConstantDataHandleENS4_35ColorCorrectionFactorConstantHandleENS4_26ClippingConstantDataHandleENS4_24PlanarConstantDataHandleENSM_INSN_10TexTextureEEENSM_INSN_15EmissiveTextureEEENSM_INSN_14OverlayTextureEEENS4_29BlendRasterConstantDataHandleENS4_31RasterOverlayConstantDataHandleENS4_40FlyoverCommonTransformConstantDataHandleENS4_30FlyoverCommonS2TransformHandleENS4_28FlyoverCommonTexcoordsHandleENS4_27FlyoverCommonMaterialHandleENS4_29FlyoverClipConstantDataHandleENSM_IN7Flyover14DiffuseTextureEEENSM_INS19_12NightTextureEEENS4_26HasStyleAttributeRasterSetENS4_16NeedsClimateTintENS4_17CustomRenderStateENS4_19ColorRampDataHandleENS4_14SharedUniqueIDENS4_8IsOpaqueENS4_13IsTransparentENS4_10NeedsZBiasENS4_14PreserveHeightENS4_13InstanceCountENS4_7IsDecalENS4_10IsMaterialENS4_10IsMercatorENS4_15FlyoverInstanceENS4_12CustomZIndexENS4_14RenderableHashENS4_21PredefinedRenderStateEEEEZNS_18typelist_as_vectorIS1V_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS1Y_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52EEEEDaS26_(&v3);
}

void sub_1A1D61134(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13HasMeshHandleENS4_35PositionScaleInfoConstantDataHandleENS4_22ViewConstantDataHandleENS4_27TransformConstantDataHandleENS4_18StyleDataKeyHandleENS4_26StyleEmissiveDataKeyHandleENS4_29StyleCameraConstantDataHandleENS4_15ColorDataHandleENS4_10IndexRangeENS4_38StyleGroundOcclusionConstantDataHandleENS4_26SharedMaterialZIndexHandleENS4_17AssociationHandleENS4_13NormalsHandleENS4_23InstanceTransformHandleENS4_9UVsHandleENS4_31StyleRouteLineMaskDataKeyHandleENS4_15ElevationHandleENS4_20TextureHandleForTypeIN7DaVinci14DiffuseTextureEEENS4_35LandCoverSettingsConstantDataHandleENS4_24ShadowConstantDataHandleENS4_25PrepassConstantDataHandleENS4_35ColorCorrectionFactorConstantHandleENS4_26ClippingConstantDataHandleENS4_24PlanarConstantDataHandleENSM_INSN_10TexTextureEEENSM_INSN_15EmissiveTextureEEENSM_INSN_14OverlayTextureEEENS4_29BlendRasterConstantDataHandleENS4_31RasterOverlayConstantDataHandleENS4_40FlyoverCommonTransformConstantDataHandleENS4_30FlyoverCommonS2TransformHandleENS4_28FlyoverCommonTexcoordsHandleENS4_27FlyoverCommonMaterialHandleENS4_29FlyoverClipConstantDataHandleENSM_IN7Flyover14DiffuseTextureEEENSM_INS19_12NightTextureEEENS4_26HasStyleAttributeRasterSetENS4_16NeedsClimateTintENS4_17CustomRenderStateENS4_19ColorRampDataHandleENS4_14SharedUniqueIDENS4_8IsOpaqueENS4_13IsTransparentENS4_10NeedsZBiasENS4_14PreserveHeightENS4_13InstanceCountENS4_7IsDecalENS4_10IsMaterialENS4_10IsMercatorENS4_15FlyoverInstanceENS4_12CustomZIndexENS4_14RenderableHashENS4_21PredefinedRenderStateEEEEZNS_18typelist_as_vectorIS1V_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS1Y_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31ELm32ELm33ELm34ELm35ELm36ELm37ELm38ELm39ELm40ELm41ELm42ELm43ELm44ELm45ELm46ELm47ELm48ELm49ELm50ELm51ELm52EEEEDaS26_(char ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[1];
  unint64_t v3 = (unint64_t)(*a1)[2];
  if ((unint64_t)v4 >= v3)
  {
    double v6 = *v2;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *v2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      int8x16_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int8x16_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    *(void *)uint64_t v12 = 0xCD844FF303308290;
    *((void *)v12 + 1) = "md::ls::HasMeshHandle]";
    *((void *)v12 + 2) = 21;
    uint64_t v5 = v12 + 24;
    if (v4 != v6)
    {
      do
      {
        long long v13 = *(_OWORD *)(v4 - 24);
        *((void *)v12 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v4 -= 24;
      }
      while (v4 != v6);
      uint64_t v4 = *v2;
    }
    *uint64_t v2 = v12;
    v2[1] = v5;
    v2[2] = &v11[24 * v10];
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(void *)uint64_t v4 = 0xCD844FF303308290;
    *((void *)v4 + 1) = "md::ls::HasMeshHandle]";
    *((void *)v4 + 2) = 21;
    uint64_t v5 = v4 + 24;
  }
  v2[1] = v5;
  int32x4_t v14 = *a1;
  uint64_t v16 = (*a1)[1];
  unint64_t v15 = (unint64_t)(*a1)[2];
  if ((unint64_t)v16 >= v15)
  {
    unint64_t v18 = *v14;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v14) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v18) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      unint64_t v23 = (char *)operator new(24 * v22);
    }
    else
    {
      unint64_t v23 = 0;
    }
    double v24 = &v23[24 * v19];
    *(void *)double v24 = 0x6C7EE74910D42096;
    *((void *)v24 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
    *((void *)v24 + 2) = 43;
    unint64_t v17 = v24 + 24;
    if (v16 != v18)
    {
      do
      {
        long long v25 = *(_OWORD *)(v16 - 24);
        *((void *)v24 - 1) = *((void *)v16 - 1);
        *(_OWORD *)(v24 - 24) = v25;
        v24 -= 24;
        v16 -= 24;
      }
      while (v16 != v18);
      uint64_t v16 = *v14;
    }
    *int32x4_t v14 = v24;
    v14[1] = v17;
    v14[2] = &v23[24 * v22];
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)uint64_t v16 = 0x6C7EE74910D42096;
    *((void *)v16 + 1) = "md::ls::PositionScaleInfoConstantDataHandle]";
    *((void *)v16 + 2) = 43;
    unint64_t v17 = v16 + 24;
  }
  v14[1] = v17;
  unint64_t v26 = *a1;
  double v28 = (*a1)[1];
  unint64_t v27 = (unint64_t)(*a1)[2];
  if ((unint64_t)v28 >= v27)
  {
    int8x16_t v30 = *v26;
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v28 - *v26) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)v30) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      if (v34 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      unint64_t v35 = (char *)operator new(24 * v34);
    }
    else
    {
      unint64_t v35 = 0;
    }
    int32x4_t v36 = &v35[24 * v31];
    *(void *)int32x4_t v36 = 0xCFE242268B958ADALL;
    *((void *)v36 + 1) = "md::ls::ViewConstantDataHandle]";
    *((void *)v36 + 2) = 30;
    unint64_t v29 = v36 + 24;
    if (v28 != v30)
    {
      do
      {
        long long v37 = *(_OWORD *)(v28 - 24);
        *((void *)v36 - 1) = *((void *)v28 - 1);
        *(_OWORD *)(v36 - 24) = v37;
        v36 -= 24;
        v28 -= 24;
      }
      while (v28 != v30);
      double v28 = *v26;
    }
    *unint64_t v26 = v36;
    v26[1] = v29;
    v26[2] = &v35[24 * v34];
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *(void *)double v28 = 0xCFE242268B958ADALL;
    *((void *)v28 + 1) = "md::ls::ViewConstantDataHandle]";
    *((void *)v28 + 2) = 30;
    unint64_t v29 = v28 + 24;
  }
  v26[1] = v29;
  double v38 = *a1;
  unint64_t v40 = (*a1)[1];
  unint64_t v39 = (unint64_t)(*a1)[2];
  if ((unint64_t)v40 >= v39)
  {
    double v42 = *v38;
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v40 - *v38) >> 3);
    unint64_t v44 = v43 + 1;
    if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)v42) >> 3);
    if (2 * v45 > v44) {
      unint64_t v44 = 2 * v45;
    }
    if (v45 >= 0x555555555555555) {
      unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46)
    {
      if (v46 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v47 = (char *)operator new(24 * v46);
    }
    else
    {
      uint64_t v47 = 0;
    }
    long double v48 = &v47[24 * v43];
    *(void *)long double v48 = 0x74DC502726E97929;
    *((void *)v48 + 1) = "md::ls::TransformConstantDataHandle]";
    *((void *)v48 + 2) = 35;
    int8x16_t v41 = v48 + 24;
    if (v40 != v42)
    {
      do
      {
        long long v49 = *(_OWORD *)(v40 - 24);
        *((void *)v48 - 1) = *((void *)v40 - 1);
        *(_OWORD *)(v48 - 24) = v49;
        v48 -= 24;
        v40 -= 24;
      }
      while (v40 != v42);
      unint64_t v40 = *v38;
    }
    *double v38 = v48;
    v38[1] = v41;
    v38[2] = &v47[24 * v46];
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    *(void *)unint64_t v40 = 0x74DC502726E97929;
    *((void *)v40 + 1) = "md::ls::TransformConstantDataHandle]";
    *((void *)v40 + 2) = 35;
    int8x16_t v41 = v40 + 24;
  }
  v38[1] = v41;
  long double v50 = *a1;
  double v52 = (*a1)[1];
  unint64_t v51 = (unint64_t)(*a1)[2];
  if ((unint64_t)v52 >= v51)
  {
    long double v54 = *v50;
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v52 - *v50) >> 3);
    unint64_t v56 = v55 + 1;
    if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (void)v54) >> 3);
    if (2 * v57 > v56) {
      unint64_t v56 = 2 * v57;
    }
    if (v57 >= 0x555555555555555) {
      unint64_t v58 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58)
    {
      if (v58 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      int v59 = (char *)operator new(24 * v58);
    }
    else
    {
      int v59 = 0;
    }
    long double v60 = &v59[24 * v55];
    *(void *)long double v60 = 0x1BB343378E1EE5BLL;
    *((void *)v60 + 1) = "md::ls::StyleDataKeyHandle]";
    *((void *)v60 + 2) = 26;
    __double2 v53 = v60 + 24;
    if (v52 != v54)
    {
      do
      {
        long long v61 = *(_OWORD *)(v52 - 24);
        *((void *)v60 - 1) = *((void *)v52 - 1);
        *(_OWORD *)(v60 - 24) = v61;
        v60 -= 24;
        v52 -= 24;
      }
      while (v52 != v54);
      double v52 = *v50;
    }
    *long double v50 = v60;
    v50[1] = v53;
    v50[2] = &v59[24 * v58];
    if (v52) {
      operator delete(v52);
    }
  }
  else
  {
    *(void *)double v52 = 0x1BB343378E1EE5BLL;
    *((void *)v52 + 1) = "md::ls::StyleDataKeyHandle]";
    *((void *)v52 + 2) = 26;
    __double2 v53 = v52 + 24;
  }
  v50[1] = v53;
  long double v62 = *a1;
  double v64 = (*a1)[1];
  unint64_t v63 = (unint64_t)(*a1)[2];
  if ((unint64_t)v64 >= v63)
  {
    long double v66 = *v62;
    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v64 - *v62) >> 3);
    unint64_t v68 = v67 + 1;
    if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v66) >> 3);
    if (2 * v69 > v68) {
      unint64_t v68 = 2 * v69;
    }
    if (v69 >= 0x555555555555555) {
      unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v70 = v68;
    }
    if (v70)
    {
      if (v70 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v71 = (char *)operator new(24 * v70);
    }
    else
    {
      long double v71 = 0;
    }
    long double v72 = &v71[24 * v67];
    *(void *)long double v72 = 0xA50DD2A5BD75DBD6;
    *((void *)v72 + 1) = "md::ls::StyleEmissiveDataKeyHandle]";
    *((void *)v72 + 2) = 34;
    __double2 v65 = v72 + 24;
    if (v64 != v66)
    {
      do
      {
        long long v73 = *(_OWORD *)(v64 - 24);
        *((void *)v72 - 1) = *((void *)v64 - 1);
        *(_OWORD *)(v72 - 24) = v73;
        v72 -= 24;
        v64 -= 24;
      }
      while (v64 != v66);
      double v64 = *v62;
    }
    *long double v62 = v72;
    v62[1] = v65;
    v62[2] = &v71[24 * v70];
    if (v64) {
      operator delete(v64);
    }
  }
  else
  {
    *(void *)double v64 = 0xA50DD2A5BD75DBD6;
    *((void *)v64 + 1) = "md::ls::StyleEmissiveDataKeyHandle]";
    *((void *)v64 + 2) = 34;
    __double2 v65 = v64 + 24;
  }
  v62[1] = v65;
  double v74 = *a1;
  __double2 v76 = (*a1)[1];
  unint64_t v75 = (unint64_t)(*a1)[2];
  if ((unint64_t)v76 >= v75)
  {
    long double v78 = *v74;
    unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((v76 - *v74) >> 3);
    unint64_t v80 = v79 + 1;
    if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (void)v78) >> 3);
    if (2 * v81 > v80) {
      unint64_t v80 = 2 * v81;
    }
    if (v81 >= 0x555555555555555) {
      unint64_t v82 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v82 = v80;
    }
    if (v82)
    {
      if (v82 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v83 = (char *)operator new(24 * v82);
    }
    else
    {
      long double v83 = 0;
    }
    long double v84 = &v83[24 * v79];
    *(void *)long double v84 = 0x96F87A2692FE4013;
    *((void *)v84 + 1) = "md::ls::StyleCameraConstantDataHandle]";
    *((void *)v84 + 2) = 37;
    long double v77 = v84 + 24;
    if (v76 != v78)
    {
      do
      {
        long long v85 = *(_OWORD *)(v76 - 24);
        *((void *)v84 - 1) = *((void *)v76 - 1);
        *(_OWORD *)(v84 - 24) = v85;
        v84 -= 24;
        v76 -= 24;
      }
      while (v76 != v78);
      __double2 v76 = *v74;
    }
    *double v74 = v84;
    v74[1] = v77;
    v74[2] = &v83[24 * v82];
    if (v76) {
      operator delete(v76);
    }
  }
  else
  {
    *(void *)__double2 v76 = 0x96F87A2692FE4013;
    *((void *)v76 + 1) = "md::ls::StyleCameraConstantDataHandle]";
    *((void *)v76 + 2) = 37;
    long double v77 = v76 + 24;
  }
  v74[1] = v77;
  double v86 = *a1;
  long double v88 = (*a1)[1];
  unint64_t v87 = (unint64_t)(*a1)[2];
  if ((unint64_t)v88 >= v87)
  {
    long double v90 = *v86;
    unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v88 - *v86) >> 3);
    unint64_t v92 = v91 + 1;
    if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - (void)v90) >> 3);
    if (2 * v93 > v92) {
      unint64_t v92 = 2 * v93;
    }
    if (v93 >= 0x555555555555555) {
      unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v94 = v92;
    }
    if (v94)
    {
      if (v94 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v95 = (char *)operator new(24 * v94);
    }
    else
    {
      long double v95 = 0;
    }
    long double v96 = &v95[24 * v91];
    *(void *)long double v96 = 0xA3F884E4E2541296;
    *((void *)v96 + 1) = "md::ls::ColorDataHandle]";
    *((void *)v96 + 2) = 23;
    long double v89 = v96 + 24;
    if (v88 != v90)
    {
      do
      {
        long long v97 = *(_OWORD *)(v88 - 24);
        *((void *)v96 - 1) = *((void *)v88 - 1);
        *(_OWORD *)(v96 - 24) = v97;
        v96 -= 24;
        v88 -= 24;
      }
      while (v88 != v90);
      long double v88 = *v86;
    }
    *double v86 = v96;
    v86[1] = v89;
    v86[2] = &v95[24 * v94];
    if (v88) {
      operator delete(v88);
    }
  }
  else
  {
    *(void *)long double v88 = 0xA3F884E4E2541296;
    *((void *)v88 + 1) = "md::ls::ColorDataHandle]";
    *((void *)v88 + 2) = 23;
    long double v89 = v88 + 24;
  }
  v86[1] = v89;
  double v98 = *a1;
  long double v100 = (*a1)[1];
  unint64_t v99 = (unint64_t)(*a1)[2];
  if ((unint64_t)v100 >= v99)
  {
    long double v102 = *v98;
    unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((v100 - *v98) >> 3);
    unint64_t v104 = v103 + 1;
    if (v103 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - (void)v102) >> 3);
    if (2 * v105 > v104) {
      unint64_t v104 = 2 * v105;
    }
    if (v105 >= 0x555555555555555) {
      unint64_t v106 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v106 = v104;
    }
    if (v106)
    {
      if (v106 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v107 = (char *)operator new(24 * v106);
    }
    else
    {
      long double v107 = 0;
    }
    double v108 = &v107[24 * v103];
    *(void *)double v108 = 0x71CBA64B1A9CA230;
    *((void *)v108 + 1) = "md::ls::IndexRange]";
    *((void *)v108 + 2) = 18;
    long double v101 = v108 + 24;
    if (v100 != v102)
    {
      do
      {
        long long v109 = *(_OWORD *)(v100 - 24);
        *((void *)v108 - 1) = *((void *)v100 - 1);
        *(_OWORD *)(v108 - 24) = v109;
        v108 -= 24;
        v100 -= 24;
      }
      while (v100 != v102);
      long double v100 = *v98;
    }
    *double v98 = v108;
    v98[1] = v101;
    v98[2] = &v107[24 * v106];
    if (v100) {
      operator delete(v100);
    }
  }
  else
  {
    *(void *)long double v100 = 0x71CBA64B1A9CA230;
    *((void *)v100 + 1) = "md::ls::IndexRange]";
    *((void *)v100 + 2) = 18;
    long double v101 = v100 + 24;
  }
  v98[1] = v101;
  __double2 v110 = *a1;
  long double v112 = (*a1)[1];
  unint64_t v111 = (unint64_t)(*a1)[2];
  if ((unint64_t)v112 >= v111)
  {
    long double v114 = *v110;
    unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((v112 - *v110) >> 3);
    unint64_t v116 = v115 + 1;
    if (v115 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - (void)v114) >> 3);
    if (2 * v117 > v116) {
      unint64_t v116 = 2 * v117;
    }
    if (v117 >= 0x555555555555555) {
      unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v118 = v116;
    }
    if (v118)
    {
      if (v118 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v119 = (char *)operator new(24 * v118);
    }
    else
    {
      double v119 = 0;
    }
    double v120 = &v119[24 * v115];
    *(void *)double v120 = 0xD5AD9B8C3FE62EE8;
    *((void *)v120 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
    *((void *)v120 + 2) = 46;
    long double v113 = v120 + 24;
    if (v112 != v114)
    {
      do
      {
        long long v121 = *(_OWORD *)(v112 - 24);
        *((void *)v120 - 1) = *((void *)v112 - 1);
        *(_OWORD *)(v120 - 24) = v121;
        v120 -= 24;
        v112 -= 24;
      }
      while (v112 != v114);
      long double v112 = *v110;
    }
    *__double2 v110 = v120;
    v110[1] = v113;
    v110[2] = &v119[24 * v118];
    if (v112) {
      operator delete(v112);
    }
  }
  else
  {
    *(void *)long double v112 = 0xD5AD9B8C3FE62EE8;
    *((void *)v112 + 1) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
    *((void *)v112 + 2) = 46;
    long double v113 = v112 + 24;
  }
  v110[1] = v113;
  long double v122 = *a1;
  long double v124 = (*a1)[1];
  unint64_t v123 = (unint64_t)(*a1)[2];
  if ((unint64_t)v124 >= v123)
  {
    double v126 = *v122;
    unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *v122) >> 3);
    unint64_t v128 = v127 + 1;
    if (v127 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v126) >> 3);
    if (2 * v129 > v128) {
      unint64_t v128 = 2 * v129;
    }
    if (v129 >= 0x555555555555555) {
      unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v130 = v128;
    }
    if (v130)
    {
      if (v130 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v131 = (char *)operator new(24 * v130);
    }
    else
    {
      double v131 = 0;
    }
    __double2 v132 = &v131[24 * v127];
    *(void *)__double2 v132 = 0x9705908F280836EDLL;
    *((void *)v132 + 1) = "md::ls::SharedMaterialZIndexHandle]";
    *((void *)v132 + 2) = 34;
    float64x2_t v125 = v132 + 24;
    if (v124 != v126)
    {
      do
      {
        long long v133 = *(_OWORD *)(v124 - 24);
        *((void *)v132 - 1) = *((void *)v124 - 1);
        *(_OWORD *)(v132 - 24) = v133;
        v132 -= 24;
        v124 -= 24;
      }
      while (v124 != v126);
      long double v124 = *v122;
    }
    *long double v122 = v132;
    v122[1] = v125;
    v122[2] = &v131[24 * v130];
    if (v124) {
      operator delete(v124);
    }
  }
  else
  {
    *(void *)long double v124 = 0x9705908F280836EDLL;
    *((void *)v124 + 1) = "md::ls::SharedMaterialZIndexHandle]";
    *((void *)v124 + 2) = 34;
    float64x2_t v125 = v124 + 24;
  }
  v122[1] = v125;
  long double v134 = *a1;
  long double v136 = (*a1)[1];
  unint64_t v135 = (unint64_t)(*a1)[2];
  if ((unint64_t)v136 >= v135)
  {
    BOOL v138 = *v134;
    unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((v136 - *v134) >> 3);
    unint64_t v140 = v139 + 1;
    if (v139 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (void)v138) >> 3);
    if (2 * v141 > v140) {
      unint64_t v140 = 2 * v141;
    }
    if (v141 >= 0x555555555555555) {
      unint64_t v142 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v142 = v140;
    }
    if (v142)
    {
      if (v142 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v143 = (char *)operator new(24 * v142);
    }
    else
    {
      double v143 = 0;
    }
    double v144 = &v143[24 * v139];
    *(void *)double v144 = 0x523816724122CCE2;
    *((void *)v144 + 1) = "md::ls::AssociationHandle]";
    *((void *)v144 + 2) = 25;
    float64x2_t v137 = v144 + 24;
    if (v136 != v138)
    {
      do
      {
        long long v145 = *(_OWORD *)(v136 - 24);
        *((void *)v144 - 1) = *((void *)v136 - 1);
        *(_OWORD *)(v144 - 24) = v145;
        v144 -= 24;
        v136 -= 24;
      }
      while (v136 != v138);
      long double v136 = *v134;
    }
    std::__shared_weak_count *v134 = v144;
    v134[1] = v137;
    v134[2] = &v143[24 * v142];
    if (v136) {
      operator delete(v136);
    }
  }
  else
  {
    *(void *)long double v136 = 0x523816724122CCE2;
    *((void *)v136 + 1) = "md::ls::AssociationHandle]";
    *((void *)v136 + 2) = 25;
    float64x2_t v137 = v136 + 24;
  }
  v134[1] = v137;
  double v146 = *a1;
  double v148 = (*a1)[1];
  unint64_t v147 = (unint64_t)(*a1)[2];
  if ((unint64_t)v148 >= v147)
  {
    unint64_t v150 = *v146;
    unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((v148 - *v146) >> 3);
    unint64_t v152 = v151 + 1;
    if (v151 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - (void)v150) >> 3);
    if (2 * v153 > v152) {
      unint64_t v152 = 2 * v153;
    }
    if (v153 >= 0x555555555555555) {
      unint64_t v154 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v154 = v152;
    }
    if (v154)
    {
      if (v154 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      unint64_t v155 = (char *)operator new(24 * v154);
    }
    else
    {
      unint64_t v155 = 0;
    }
    double v156 = &v155[24 * v151];
    *(void *)double v156 = 0x3218EFD67197A145;
    *((void *)v156 + 1) = "md::ls::NormalsHandle]";
    *((void *)v156 + 2) = 21;
    int8x16_t v149 = v156 + 24;
    if (v148 != v150)
    {
      do
      {
        long long v157 = *(_OWORD *)(v148 - 24);
        *((void *)v156 - 1) = *((void *)v148 - 1);
        *(_OWORD *)(v156 - 24) = v157;
        v156 -= 24;
        v148 -= 24;
      }
      while (v148 != v150);
      double v148 = *v146;
    }
    *double v146 = v156;
    v146[1] = v149;
    v146[2] = &v155[24 * v154];
    if (v148) {
      operator delete(v148);
    }
  }
  else
  {
    *(void *)double v148 = 0x3218EFD67197A145;
    *((void *)v148 + 1) = "md::ls::NormalsHandle]";
    *((void *)v148 + 2) = 21;
    int8x16_t v149 = v148 + 24;
  }
  v146[1] = v149;
  unint64_t v158 = *a1;
  long double v160 = (*a1)[1];
  unint64_t v159 = (unint64_t)(*a1)[2];
  if ((unint64_t)v160 >= v159)
  {
    double v162 = *v158;
    unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((v160 - *v158) >> 3);
    unint64_t v164 = v163 + 1;
    if (v163 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (void)v162) >> 3);
    if (2 * v165 > v164) {
      unint64_t v164 = 2 * v165;
    }
    if (v165 >= 0x555555555555555) {
      unint64_t v166 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v166 = v164;
    }
    if (v166)
    {
      if (v166 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v167 = (char *)operator new(24 * v166);
    }
    else
    {
      long double v167 = 0;
    }
    float64x2_t v168 = &v167[24 * v163];
    *(void *)float64x2_t v168 = 0xAF179EFD8A4C83D4;
    *((void *)v168 + 1) = "md::ls::InstanceTransformHandle]";
    *((void *)v168 + 2) = 31;
    long double v161 = v168 + 24;
    if (v160 != v162)
    {
      do
      {
        long long v169 = *(_OWORD *)(v160 - 24);
        *((void *)v168 - 1) = *((void *)v160 - 1);
        *(_OWORD *)(v168 - 24) = v169;
        v168 -= 24;
        v160 -= 24;
      }
      while (v160 != v162);
      long double v160 = *v158;
    }
    id *v158 = v168;
    v158[1] = v161;
    v158[2] = &v167[24 * v166];
    if (v160) {
      operator delete(v160);
    }
  }
  else
  {
    *(void *)long double v160 = 0xAF179EFD8A4C83D4;
    *((void *)v160 + 1) = "md::ls::InstanceTransformHandle]";
    *((void *)v160 + 2) = 31;
    long double v161 = v160 + 24;
  }
  v158[1] = v161;
  int v170 = *a1;
  long double v172 = (*a1)[1];
  unint64_t v171 = (unint64_t)(*a1)[2];
  if ((unint64_t)v172 >= v171)
  {
    double v174 = *v170;
    unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * ((v172 - *v170) >> 3);
    unint64_t v176 = v175 + 1;
    if (v175 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - (void)v174) >> 3);
    if (2 * v177 > v176) {
      unint64_t v176 = 2 * v177;
    }
    if (v177 >= 0x555555555555555) {
      unint64_t v178 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v178 = v176;
    }
    if (v178)
    {
      if (v178 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      float64x2_t v179 = (char *)operator new(24 * v178);
    }
    else
    {
      float64x2_t v179 = 0;
    }
    long double v180 = &v179[24 * v175];
    *(void *)long double v180 = 0xCBB77B1CBD05D7C5;
    *((void *)v180 + 1) = "md::ls::UVsHandle]";
    *((void *)v180 + 2) = 17;
    long double v173 = v180 + 24;
    if (v172 != v174)
    {
      do
      {
        long long v181 = *(_OWORD *)(v172 - 24);
        *((void *)v180 - 1) = *((void *)v172 - 1);
        *(_OWORD *)(v180 - 24) = v181;
        v180 -= 24;
        v172 -= 24;
      }
      while (v172 != v174);
      long double v172 = *v170;
    }
    std::__shared_weak_count *v170 = v180;
    v170[1] = v173;
    v170[2] = &v179[24 * v178];
    if (v172) {
      operator delete(v172);
    }
  }
  else
  {
    *(void *)long double v172 = 0xCBB77B1CBD05D7C5;
    *((void *)v172 + 1) = "md::ls::UVsHandle]";
    *((void *)v172 + 2) = 17;
    long double v173 = v172 + 24;
  }
  v170[1] = v173;
  long double v182 = *a1;
  double v184 = (*a1)[1];
  unint64_t v183 = (unint64_t)(*a1)[2];
  if ((unint64_t)v184 >= v183)
  {
    long double v186 = *v182;
    unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((v184 - *v182) >> 3);
    unint64_t v188 = v187 + 1;
    if (v187 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v183 - (void)v186) >> 3);
    if (2 * v189 > v188) {
      unint64_t v188 = 2 * v189;
    }
    if (v189 >= 0x555555555555555) {
      unint64_t v190 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v190 = v188;
    }
    if (v190)
    {
      if (v190 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v191 = (char *)operator new(24 * v190);
    }
    else
    {
      long double v191 = 0;
    }
    long double v192 = &v191[24 * v187];
    *(void *)long double v192 = 0x8E45E81B6E5A8E0ELL;
    *((void *)v192 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((void *)v192 + 2) = 39;
    __double2 v185 = v192 + 24;
    if (v184 != v186)
    {
      do
      {
        long long v193 = *(_OWORD *)(v184 - 24);
        *((void *)v192 - 1) = *((void *)v184 - 1);
        *(_OWORD *)(v192 - 24) = v193;
        v192 -= 24;
        v184 -= 24;
      }
      while (v184 != v186);
      double v184 = *v182;
    }
    *long double v182 = v192;
    v182[1] = v185;
    v182[2] = &v191[24 * v190];
    if (v184) {
      operator delete(v184);
    }
  }
  else
  {
    *(void *)double v184 = 0x8E45E81B6E5A8E0ELL;
    *((void *)v184 + 1) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
    *((void *)v184 + 2) = 39;
    __double2 v185 = v184 + 24;
  }
  v182[1] = v185;
  double v194 = *a1;
  long double v196 = (*a1)[1];
  unint64_t v195 = (unint64_t)(*a1)[2];
  if ((unint64_t)v196 >= v195)
  {
    long double v198 = *v194;
    unint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((v196 - *v194) >> 3);
    unint64_t v200 = v199 + 1;
    if (v199 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - (void)v198) >> 3);
    if (2 * v201 > v200) {
      unint64_t v200 = 2 * v201;
    }
    if (v201 >= 0x555555555555555) {
      unint64_t v202 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v202 = v200;
    }
    if (v202)
    {
      if (v202 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v203 = (char *)operator new(24 * v202);
    }
    else
    {
      long double v203 = 0;
    }
    double v204 = &v203[24 * v199];
    *(void *)double v204 = 0xD443D3DCBB78491ALL;
    *((void *)v204 + 1) = "md::ls::ElevationHandle]";
    *((void *)v204 + 2) = 23;
    long double v197 = v204 + 24;
    if (v196 != v198)
    {
      do
      {
        long long v205 = *(_OWORD *)(v196 - 24);
        *((void *)v204 - 1) = *((void *)v196 - 1);
        *(_OWORD *)(v204 - 24) = v205;
        v204 -= 24;
        v196 -= 24;
      }
      while (v196 != v198);
      long double v196 = *v194;
    }
    *double v194 = v204;
    v194[1] = v197;
    v194[2] = &v203[24 * v202];
    if (v196) {
      operator delete(v196);
    }
  }
  else
  {
    *(void *)long double v196 = 0xD443D3DCBB78491ALL;
    *((void *)v196 + 1) = "md::ls::ElevationHandle]";
    *((void *)v196 + 2) = 23;
    long double v197 = v196 + 24;
  }
  v194[1] = v197;
  __double2 v206 = *a1;
  long double v208 = (*a1)[1];
  unint64_t v207 = (unint64_t)(*a1)[2];
  if ((unint64_t)v208 >= v207)
  {
    float64x2_t v210 = *v206;
    unint64_t v211 = 0xAAAAAAAAAAAAAAABLL * ((v208 - *v206) >> 3);
    unint64_t v212 = v211 + 1;
    if (v211 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v207 - (void)v210) >> 3);
    if (2 * v213 > v212) {
      unint64_t v212 = 2 * v213;
    }
    if (v213 >= 0x555555555555555) {
      unint64_t v214 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v214 = v212;
    }
    if (v214)
    {
      if (v214 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v215 = (char *)operator new(24 * v214);
    }
    else
    {
      long double v215 = 0;
    }
    double v216 = &v215[24 * v211];
    *(void *)double v216 = 0xDD9825BCFA7911B2;
    *((void *)v216 + 1) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
    *((void *)v216 + 2) = 53;
    long double v209 = v216 + 24;
    if (v208 != v210)
    {
      do
      {
        long long v217 = *(_OWORD *)(v208 - 24);
        *((void *)v216 - 1) = *((void *)v208 - 1);
        *(_OWORD *)(v216 - 24) = v217;
        v216 -= 24;
        v208 -= 24;
      }
      while (v208 != v210);
      long double v208 = *v206;
    }
    *__double2 v206 = v216;
    v206[1] = v209;
    v206[2] = &v215[24 * v214];
    if (v208) {
      operator delete(v208);
    }
  }
  else
  {
    *(void *)long double v208 = 0xDD9825BCFA7911B2;
    *((void *)v208 + 1) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
    *((void *)v208 + 2) = 53;
    long double v209 = v208 + 24;
  }
  v206[1] = v209;
  long double v218 = *a1;
  long double v220 = (*a1)[1];
  unint64_t v219 = (unint64_t)(*a1)[2];
  if ((unint64_t)v220 >= v219)
  {
    long double v222 = *v218;
    unint64_t v223 = 0xAAAAAAAAAAAAAAABLL * ((v220 - *v218) >> 3);
    unint64_t v224 = v223 + 1;
    if (v223 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v219 - (void)v222) >> 3);
    if (2 * v225 > v224) {
      unint64_t v224 = 2 * v225;
    }
    if (v225 >= 0x555555555555555) {
      unint64_t v226 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v226 = v224;
    }
    if (v226)
    {
      if (v226 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      __double2 v227 = (char *)operator new(24 * v226);
    }
    else
    {
      __double2 v227 = 0;
    }
    long double v228 = &v227[24 * v223];
    *(void *)long double v228 = 0xDC98991DB7473274;
    *((void *)v228 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
    *((void *)v228 + 2) = 43;
    float64x2_t v221 = v228 + 24;
    if (v220 != v222)
    {
      do
      {
        long long v229 = *(_OWORD *)(v220 - 24);
        *((void *)v228 - 1) = *((void *)v220 - 1);
        *(_OWORD *)(v228 - 24) = v229;
        v228 -= 24;
        v220 -= 24;
      }
      while (v220 != v222);
      long double v220 = *v218;
    }
    *long double v218 = v228;
    v218[1] = v221;
    v218[2] = &v227[24 * v226];
    if (v220) {
      operator delete(v220);
    }
  }
  else
  {
    *(void *)long double v220 = 0xDC98991DB7473274;
    *((void *)v220 + 1) = "md::ls::LandCoverSettingsConstantDataHandle]";
    *((void *)v220 + 2) = 43;
    float64x2_t v221 = v220 + 24;
  }
  v218[1] = v221;
  long double v230 = *a1;
  double v232 = (*a1)[1];
  unint64_t v231 = (unint64_t)(*a1)[2];
  if ((unint64_t)v232 >= v231)
  {
    long double v234 = *v230;
    unint64_t v235 = 0xAAAAAAAAAAAAAAABLL * ((v232 - *v230) >> 3);
    unint64_t v236 = v235 + 1;
    if (v235 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v237 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v231 - (void)v234) >> 3);
    if (2 * v237 > v236) {
      unint64_t v236 = 2 * v237;
    }
    if (v237 >= 0x555555555555555) {
      unint64_t v238 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v238 = v236;
    }
    if (v238)
    {
      if (v238 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v239 = (char *)operator new(24 * v238);
    }
    else
    {
      long double v239 = 0;
    }
    long double v240 = &v239[24 * v235];
    *(void *)long double v240 = 0xEAA0B82FC49F7277;
    *((void *)v240 + 1) = "md::ls::ShadowConstantDataHandle]";
    *((void *)v240 + 2) = 32;
    long double v233 = v240 + 24;
    if (v232 != v234)
    {
      do
      {
        long long v241 = *(_OWORD *)(v232 - 24);
        *((void *)v240 - 1) = *((void *)v232 - 1);
        *(_OWORD *)(v240 - 24) = v241;
        v240 -= 24;
        v232 -= 24;
      }
      while (v232 != v234);
      double v232 = *v230;
    }
    char *v230 = v240;
    v230[1] = v233;
    v230[2] = &v239[24 * v238];
    if (v232) {
      operator delete(v232);
    }
  }
  else
  {
    *(void *)double v232 = 0xEAA0B82FC49F7277;
    *((void *)v232 + 1) = "md::ls::ShadowConstantDataHandle]";
    *((void *)v232 + 2) = 32;
    long double v233 = v232 + 24;
  }
  v230[1] = v233;
  int8x16_t v242 = *a1;
  unint64_t v244 = (*a1)[1];
  unint64_t v243 = (unint64_t)(*a1)[2];
  if ((unint64_t)v244 >= v243)
  {
    double v246 = *v242;
    unint64_t v247 = 0xAAAAAAAAAAAAAAABLL * ((v244 - *v242) >> 3);
    unint64_t v248 = v247 + 1;
    if (v247 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v249 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v243 - (void)v246) >> 3);
    if (2 * v249 > v248) {
      unint64_t v248 = 2 * v249;
    }
    if (v249 >= 0x555555555555555) {
      unint64_t v250 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v250 = v248;
    }
    if (v250)
    {
      if (v250 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v251 = (char *)operator new(24 * v250);
    }
    else
    {
      uint64_t v251 = 0;
    }
    int8x16_t v252 = &v251[24 * v247];
    *(void *)int8x16_t v252 = 0x1EBB3E0519E8FF9DLL;
    *((void *)v252 + 1) = "md::ls::PrepassConstantDataHandle]";
    *((void *)v252 + 2) = 33;
    int8x16_t v245 = v252 + 24;
    if (v244 != v246)
    {
      do
      {
        long long v253 = *(_OWORD *)(v244 - 24);
        *((void *)v252 - 1) = *((void *)v244 - 1);
        *(_OWORD *)(v252 - 24) = v253;
        v252 -= 24;
        v244 -= 24;
      }
      while (v244 != v246);
      unint64_t v244 = *v242;
    }
    *int8x16_t v242 = v252;
    v242[1] = v245;
    v242[2] = &v251[24 * v250];
    if (v244) {
      operator delete(v244);
    }
  }
  else
  {
    *(void *)unint64_t v244 = 0x1EBB3E0519E8FF9DLL;
    *((void *)v244 + 1) = "md::ls::PrepassConstantDataHandle]";
    *((void *)v244 + 2) = 33;
    int8x16_t v245 = v244 + 24;
  }
  v242[1] = v245;
  int32x4_t v254 = *a1;
  unint64_t v256 = (*a1)[1];
  unint64_t v255 = (unint64_t)(*a1)[2];
  if ((unint64_t)v256 >= v255)
  {
    double v258 = *v254;
    unint64_t v259 = 0xAAAAAAAAAAAAAAABLL * ((v256 - *v254) >> 3);
    unint64_t v260 = v259 + 1;
    if (v259 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v261 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v255 - (void)v258) >> 3);
    if (2 * v261 > v260) {
      unint64_t v260 = 2 * v261;
    }
    if (v261 >= 0x555555555555555) {
      unint64_t v262 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v262 = v260;
    }
    if (v262)
    {
      if (v262 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      unint64_t v263 = (char *)operator new(24 * v262);
    }
    else
    {
      unint64_t v263 = 0;
    }
    long double v264 = &v263[24 * v259];
    *(void *)long double v264 = 0x65937AC5D2157F71;
    *((void *)v264 + 1) = "md::ls::ColorCorrectionFactorConstantHandle]";
    *((void *)v264 + 2) = 43;
    unint64_t v257 = v264 + 24;
    if (v256 != v258)
    {
      do
      {
        long long v265 = *(_OWORD *)(v256 - 24);
        *((void *)v264 - 1) = *((void *)v256 - 1);
        *(_OWORD *)(v264 - 24) = v265;
        v264 -= 24;
        v256 -= 24;
      }
      while (v256 != v258);
      unint64_t v256 = *v254;
    }
    *int32x4_t v254 = v264;
    v254[1] = v257;
    v254[2] = &v263[24 * v262];
    if (v256) {
      operator delete(v256);
    }
  }
  else
  {
    *(void *)unint64_t v256 = 0x65937AC5D2157F71;
    *((void *)v256 + 1) = "md::ls::ColorCorrectionFactorConstantHandle]";
    *((void *)v256 + 2) = 43;
    unint64_t v257 = v256 + 24;
  }
  v254[1] = v257;
  long double v266 = *a1;
  double v268 = (*a1)[1];
  unint64_t v267 = (unint64_t)(*a1)[2];
  if ((unint64_t)v268 >= v267)
  {
    long double v270 = *v266;
    unint64_t v271 = 0xAAAAAAAAAAAAAAABLL * ((v268 - *v266) >> 3);
    unint64_t v272 = v271 + 1;
    if (v271 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v273 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v267 - (void)v270) >> 3);
    if (2 * v273 > v272) {
      unint64_t v272 = 2 * v273;
    }
    if (v273 >= 0x555555555555555) {
      unint64_t v274 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v274 = v272;
    }
    if (v274)
    {
      if (v274 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      int v275 = (char *)operator new(24 * v274);
    }
    else
    {
      int v275 = 0;
    }
    long double v276 = &v275[24 * v271];
    *(void *)long double v276 = 0x9292F9031FE6DB5;
    *((void *)v276 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((void *)v276 + 2) = 34;
    __double2 v269 = v276 + 24;
    if (v268 != v270)
    {
      do
      {
        long long v277 = *(_OWORD *)(v268 - 24);
        *((void *)v276 - 1) = *((void *)v268 - 1);
        *(_OWORD *)(v276 - 24) = v277;
        v276 -= 24;
        v268 -= 24;
      }
      while (v268 != v270);
      double v268 = *v266;
    }
    *long double v266 = v276;
    v266[1] = v269;
    v266[2] = &v275[24 * v274];
    if (v268) {
      operator delete(v268);
    }
  }
  else
  {
    *(void *)double v268 = 0x9292F9031FE6DB5;
    *((void *)v268 + 1) = "md::ls::ClippingConstantDataHandle]";
    *((void *)v268 + 2) = 34;
    __double2 v269 = v268 + 24;
  }
  v266[1] = v269;
  long double v278 = *a1;
  double v280 = (*a1)[1];
  unint64_t v279 = (unint64_t)(*a1)[2];
  if ((unint64_t)v280 >= v279)
  {
    long double v282 = *v278;
    unint64_t v283 = 0xAAAAAAAAAAAAAAABLL * ((v280 - *v278) >> 3);
    unint64_t v284 = v283 + 1;
    if (v283 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v285 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v279 - (void)v282) >> 3);
    if (2 * v285 > v284) {
      unint64_t v284 = 2 * v285;
    }
    if (v285 >= 0x555555555555555) {
      unint64_t v286 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v286 = v284;
    }
    if (v286)
    {
      if (v286 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v287 = (char *)operator new(24 * v286);
    }
    else
    {
      long double v287 = 0;
    }
    long double v288 = &v287[24 * v283];
    *(void *)long double v288 = 0x32FFF5E924C6D657;
    *((void *)v288 + 1) = "md::ls::PlanarConstantDataHandle]";
    *((void *)v288 + 2) = 32;
    __double2 v281 = v288 + 24;
    if (v280 != v282)
    {
      do
      {
        long long v289 = *(_OWORD *)(v280 - 24);
        *((void *)v288 - 1) = *((void *)v280 - 1);
        *(_OWORD *)(v288 - 24) = v289;
        v288 -= 24;
        v280 -= 24;
      }
      while (v280 != v282);
      double v280 = *v278;
    }
    *long double v278 = v288;
    v278[1] = v281;
    v278[2] = &v287[24 * v286];
    if (v280) {
      operator delete(v280);
    }
  }
  else
  {
    *(void *)double v280 = 0x32FFF5E924C6D657;
    *((void *)v280 + 1) = "md::ls::PlanarConstantDataHandle]";
    *((void *)v280 + 2) = 32;
    __double2 v281 = v280 + 24;
  }
  v278[1] = v281;
  double v290 = *a1;
  long double v292 = (*a1)[1];
  unint64_t v291 = (unint64_t)(*a1)[2];
  if ((unint64_t)v292 >= v291)
  {
    long double v294 = *v290;
    unint64_t v295 = 0xAAAAAAAAAAAAAAABLL * ((v292 - *v290) >> 3);
    unint64_t v296 = v295 + 1;
    if (v295 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v297 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v291 - (void)v294) >> 3);
    if (2 * v297 > v296) {
      unint64_t v296 = 2 * v297;
    }
    if (v297 >= 0x555555555555555) {
      unint64_t v298 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v298 = v296;
    }
    if (v298)
    {
      if (v298 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v299 = (char *)operator new(24 * v298);
    }
    else
    {
      long double v299 = 0;
    }
    double v300 = &v299[24 * v295];
    *(void *)double v300 = 0x1D932F2BF291491;
    *((void *)v300 + 1) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
    *((void *)v300 + 2) = 49;
    long double v293 = v300 + 24;
    if (v292 != v294)
    {
      do
      {
        long long v301 = *(_OWORD *)(v292 - 24);
        *((void *)v300 - 1) = *((void *)v292 - 1);
        *(_OWORD *)(v300 - 24) = v301;
        v300 -= 24;
        v292 -= 24;
      }
      while (v292 != v294);
      long double v292 = *v290;
    }
    geo::codec::VectorTile *v290 = v300;
    v290[1] = v293;
    v290[2] = &v299[24 * v298];
    if (v292) {
      operator delete(v292);
    }
  }
  else
  {
    *(void *)long double v292 = 0x1D932F2BF291491;
    *((void *)v292 + 1) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
    *((void *)v292 + 2) = 49;
    long double v293 = v292 + 24;
  }
  v290[1] = v293;
  __double2 v302 = *a1;
  long double v304 = (*a1)[1];
  unint64_t v303 = (unint64_t)(*a1)[2];
  if ((unint64_t)v304 >= v303)
  {
    float64x2_t v306 = *v302;
    unint64_t v307 = 0xAAAAAAAAAAAAAAABLL * ((v304 - *v302) >> 3);
    unint64_t v308 = v307 + 1;
    if (v307 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v309 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303 - (void)v306) >> 3);
    if (2 * v309 > v308) {
      unint64_t v308 = 2 * v309;
    }
    if (v309 >= 0x555555555555555) {
      unint64_t v310 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v310 = v308;
    }
    if (v310)
    {
      if (v310 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v311 = (char *)operator new(24 * v310);
    }
    else
    {
      uint64_t v311 = 0;
    }
    uint64_t v312 = &v311[24 * v307];
    *(void *)uint64_t v312 = 0xCE03281732FA0019;
    *((void *)v312 + 1) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
    *((void *)v312 + 2) = 54;
    long double v305 = v312 + 24;
    if (v304 != v306)
    {
      do
      {
        long long v313 = *(_OWORD *)(v304 - 24);
        *((void *)v312 - 1) = *((void *)v304 - 1);
        *(_OWORD *)(v312 - 24) = v313;
        v312 -= 24;
        v304 -= 24;
      }
      while (v304 != v306);
      long double v304 = *v302;
    }
    *__double2 v302 = v312;
    v302[1] = v305;
    v302[2] = &v311[24 * v310];
    if (v304) {
      operator delete(v304);
    }
  }
  else
  {
    *(void *)long double v304 = 0xCE03281732FA0019;
    *((void *)v304 + 1) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
    *((void *)v304 + 2) = 54;
    long double v305 = v304 + 24;
  }
  v302[1] = v305;
  unint64_t v314 = *a1;
  double v316 = (*a1)[1];
  unint64_t v315 = (unint64_t)(*a1)[2];
  if ((unint64_t)v316 >= v315)
  {
    unint64_t v318 = *v314;
    unint64_t v319 = 0xAAAAAAAAAAAAAAABLL * ((v316 - *v314) >> 3);
    unint64_t v320 = v319 + 1;
    if (v319 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v321 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v315 - (void)v318) >> 3);
    if (2 * v321 > v320) {
      unint64_t v320 = 2 * v321;
    }
    if (v321 >= 0x555555555555555) {
      unint64_t v322 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v322 = v320;
    }
    if (v322)
    {
      if (v322 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v323 = (char *)operator new(24 * v322);
    }
    else
    {
      double v323 = 0;
    }
    uint64_t v324 = &v323[24 * v319];
    *(void *)uint64_t v324 = 0xD2D99CA7D5B116C8;
    *((void *)v324 + 1) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
    *((void *)v324 + 2) = 53;
    unint64_t v317 = v324 + 24;
    if (v316 != v318)
    {
      do
      {
        long long v325 = *(_OWORD *)(v316 - 24);
        *((void *)v324 - 1) = *((void *)v316 - 1);
        *(_OWORD *)(v324 - 24) = v325;
        v324 -= 24;
        v316 -= 24;
      }
      while (v316 != v318);
      double v316 = *v314;
    }
    void *v314 = v324;
    v314[1] = v317;
    v314[2] = &v323[24 * v322];
    if (v316) {
      operator delete(v316);
    }
  }
  else
  {
    *(void *)double v316 = 0xD2D99CA7D5B116C8;
    *((void *)v316 + 1) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
    *((void *)v316 + 2) = 53;
    unint64_t v317 = v316 + 24;
  }
  v314[1] = v317;
  unint64_t v326 = *a1;
  int8x16_t v328 = (*a1)[1];
  unint64_t v327 = (unint64_t)(*a1)[2];
  if ((unint64_t)v328 >= v327)
  {
    unint64_t v330 = *v326;
    unint64_t v331 = 0xAAAAAAAAAAAAAAABLL * ((v328 - *v326) >> 3);
    unint64_t v332 = v331 + 1;
    if (v331 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v333 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (void)v330) >> 3);
    if (2 * v333 > v332) {
      unint64_t v332 = 2 * v333;
    }
    if (v333 >= 0x555555555555555) {
      unint64_t v334 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v334 = v332;
    }
    if (v334)
    {
      if (v334 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v335 = (char *)operator new(24 * v334);
    }
    else
    {
      double v335 = 0;
    }
    int8x16_t v336 = &v335[24 * v331];
    *(void *)int8x16_t v336 = 0xDF0018B9242ADFDBLL;
    *((void *)v336 + 1) = "md::ls::BlendRasterConstantDataHandle]";
    *((void *)v336 + 2) = 37;
    double v329 = v336 + 24;
    if (v328 != v330)
    {
      do
      {
        long long v337 = *(_OWORD *)(v328 - 24);
        *((void *)v336 - 1) = *((void *)v328 - 1);
        *(_OWORD *)(v336 - 24) = v337;
        v336 -= 24;
        v328 -= 24;
      }
      while (v328 != v330);
      int8x16_t v328 = *v326;
    }
    *unint64_t v326 = v336;
    v326[1] = v329;
    v326[2] = &v335[24 * v334];
    if (v328) {
      operator delete(v328);
    }
  }
  else
  {
    *(void *)int8x16_t v328 = 0xDF0018B9242ADFDBLL;
    *((void *)v328 + 1) = "md::ls::BlendRasterConstantDataHandle]";
    *((void *)v328 + 2) = 37;
    double v329 = v328 + 24;
  }
  v326[1] = v329;
  int8x16_t v338 = *a1;
  int32x4_t v340 = (*a1)[1];
  unint64_t v339 = (unint64_t)(*a1)[2];
  if ((unint64_t)v340 >= v339)
  {
    uint64_t v342 = *v338;
    unint64_t v343 = 0xAAAAAAAAAAAAAAABLL * ((v340 - *v338) >> 3);
    unint64_t v344 = v343 + 1;
    if (v343 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v345 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v339 - (void)v342) >> 3);
    if (2 * v345 > v344) {
      unint64_t v344 = 2 * v345;
    }
    if (v345 >= 0x555555555555555) {
      unint64_t v346 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v346 = v344;
    }
    if (v346)
    {
      if (v346 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v347 = (char *)operator new(24 * v346);
    }
    else
    {
      long double v347 = 0;
    }
    long double v348 = &v347[24 * v343];
    *(void *)long double v348 = 0xDC66BF6D06F6D0BALL;
    *((void *)v348 + 1) = "md::ls::RasterOverlayConstantDataHandle]";
    *((void *)v348 + 2) = 39;
    int8x16_t v341 = v348 + 24;
    if (v340 != v342)
    {
      do
      {
        long long v349 = *(_OWORD *)(v340 - 24);
        *((void *)v348 - 1) = *((void *)v340 - 1);
        *(_OWORD *)(v348 - 24) = v349;
        v348 -= 24;
        v340 -= 24;
      }
      while (v340 != v342);
      int32x4_t v340 = *v338;
    }
    *int8x16_t v338 = v348;
    v338[1] = v341;
    v338[2] = &v347[24 * v346];
    if (v340) {
      operator delete(v340);
    }
  }
  else
  {
    *(void *)int32x4_t v340 = 0xDC66BF6D06F6D0BALL;
    *((void *)v340 + 1) = "md::ls::RasterOverlayConstantDataHandle]";
    *((void *)v340 + 2) = 39;
    int8x16_t v341 = v340 + 24;
  }
  v338[1] = v341;
  double v350 = *a1;
  long double v352 = (*a1)[1];
  unint64_t v351 = (unint64_t)(*a1)[2];
  if ((unint64_t)v352 >= v351)
  {
    long double v354 = *v350;
    unint64_t v355 = 0xAAAAAAAAAAAAAAABLL * ((v352 - *v350) >> 3);
    unint64_t v356 = v355 + 1;
    if (v355 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v357 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351 - (void)v354) >> 3);
    if (2 * v357 > v356) {
      unint64_t v356 = 2 * v357;
    }
    if (v357 >= 0x555555555555555) {
      unint64_t v358 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v358 = v356;
    }
    if (v358)
    {
      if (v358 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v359 = (char *)operator new(24 * v358);
    }
    else
    {
      long double v359 = 0;
    }
    long double v360 = &v359[24 * v355];
    *(void *)long double v360 = 0x7D9191A7B57B7B35;
    *((void *)v360 + 1) = "md::ls::FlyoverCommonTransformConstantDataHandle]";
    *((void *)v360 + 2) = 48;
    long double v353 = v360 + 24;
    if (v352 != v354)
    {
      do
      {
        long long v361 = *(_OWORD *)(v352 - 24);
        *((void *)v360 - 1) = *((void *)v352 - 1);
        *(_OWORD *)(v360 - 24) = v361;
        v360 -= 24;
        v352 -= 24;
      }
      while (v352 != v354);
      long double v352 = *v350;
    }
    *double v350 = v360;
    v350[1] = v353;
    v350[2] = &v359[24 * v358];
    if (v352) {
      operator delete(v352);
    }
  }
  else
  {
    *(void *)long double v352 = 0x7D9191A7B57B7B35;
    *((void *)v352 + 1) = "md::ls::FlyoverCommonTransformConstantDataHandle]";
    *((void *)v352 + 2) = 48;
    long double v353 = v352 + 24;
  }
  v350[1] = v353;
  double v362 = *a1;
  long double v364 = (*a1)[1];
  unint64_t v363 = (unint64_t)(*a1)[2];
  if ((unint64_t)v364 >= v363)
  {
    long double v366 = *v362;
    unint64_t v367 = 0xAAAAAAAAAAAAAAABLL * ((v364 - *v362) >> 3);
    unint64_t v368 = v367 + 1;
    if (v367 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v369 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v363 - (void)v366) >> 3);
    if (2 * v369 > v368) {
      unint64_t v368 = 2 * v369;
    }
    if (v369 >= 0x555555555555555) {
      unint64_t v370 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v370 = v368;
    }
    if (v370)
    {
      if (v370 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v371 = (char *)operator new(24 * v370);
    }
    else
    {
      double v371 = 0;
    }
    double v372 = &v371[24 * v367];
    *(void *)double v372 = 0x81BF69EEE736436;
    *((void *)v372 + 1) = "md::ls::FlyoverCommonS2TransformHandle]";
    *((void *)v372 + 2) = 38;
    long double v365 = v372 + 24;
    if (v364 != v366)
    {
      do
      {
        long long v373 = *(_OWORD *)(v364 - 24);
        *((void *)v372 - 1) = *((void *)v364 - 1);
        *(_OWORD *)(v372 - 24) = v373;
        v372 -= 24;
        v364 -= 24;
      }
      while (v364 != v366);
      long double v364 = *v362;
    }
    *double v362 = v372;
    v362[1] = v365;
    v362[2] = &v371[24 * v370];
    if (v364) {
      operator delete(v364);
    }
  }
  else
  {
    *(void *)long double v364 = 0x81BF69EEE736436;
    *((void *)v364 + 1) = "md::ls::FlyoverCommonS2TransformHandle]";
    *((void *)v364 + 2) = 38;
    long double v365 = v364 + 24;
  }
  v362[1] = v365;
  long double v374 = *a1;
  long double v376 = (*a1)[1];
  unint64_t v375 = (unint64_t)(*a1)[2];
  if ((unint64_t)v376 >= v375)
  {
    double v378 = *v374;
    unint64_t v379 = 0xAAAAAAAAAAAAAAABLL * ((v376 - *v374) >> 3);
    unint64_t v380 = v379 + 1;
    if (v379 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v381 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v375 - (void)v378) >> 3);
    if (2 * v381 > v380) {
      unint64_t v380 = 2 * v381;
    }
    if (v381 >= 0x555555555555555) {
      unint64_t v382 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v382 = v380;
    }
    if (v382)
    {
      if (v382 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v383 = (char *)operator new(24 * v382);
    }
    else
    {
      double v383 = 0;
    }
    __double2 v384 = &v383[24 * v379];
    *(void *)__double2 v384 = 0x5B12559DCF20DC9ALL;
    *((void *)v384 + 1) = "md::ls::FlyoverCommonTexcoordsHandle]";
    *((void *)v384 + 2) = 36;
    float64x2_t v377 = v384 + 24;
    if (v376 != v378)
    {
      do
      {
        long long v385 = *(_OWORD *)(v376 - 24);
        *((void *)v384 - 1) = *((void *)v376 - 1);
        *(_OWORD *)(v384 - 24) = v385;
        v384 -= 24;
        v376 -= 24;
      }
      while (v376 != v378);
      long double v376 = *v374;
    }
    *long double v374 = v384;
    v374[1] = v377;
    v374[2] = &v383[24 * v382];
    if (v376) {
      operator delete(v376);
    }
  }
  else
  {
    *(void *)long double v376 = 0x5B12559DCF20DC9ALL;
    *((void *)v376 + 1) = "md::ls::FlyoverCommonTexcoordsHandle]";
    *((void *)v376 + 2) = 36;
    float64x2_t v377 = v376 + 24;
  }
  v374[1] = v377;
  long double v386 = *a1;
  float64x2_t v388 = (*a1)[1];
  unint64_t v387 = (unint64_t)(*a1)[2];
  if ((unint64_t)v388 >= v387)
  {
    uint64_t v390 = *v386;
    unint64_t v391 = 0xAAAAAAAAAAAAAAABLL * ((v388 - *v386) >> 3);
    unint64_t v392 = v391 + 1;
    if (v391 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v393 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v387 - (void)v390) >> 3);
    if (2 * v393 > v392) {
      unint64_t v392 = 2 * v393;
    }
    if (v393 >= 0x555555555555555) {
      unint64_t v394 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v394 = v392;
    }
    if (v394)
    {
      if (v394 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      unint64_t v395 = (char *)operator new(24 * v394);
    }
    else
    {
      unint64_t v395 = 0;
    }
    long long v396 = &v395[24 * v391];
    *(void *)long long v396 = 0xB70B6DE024A5B9DALL;
    *((void *)v396 + 1) = "md::ls::FlyoverCommonMaterialHandle]";
    *((void *)v396 + 2) = 35;
    int8x16_t v389 = v396 + 24;
    if (v388 != v390)
    {
      do
      {
        long long v397 = *(_OWORD *)(v388 - 24);
        *((void *)v396 - 1) = *((void *)v388 - 1);
        *(_OWORD *)(v396 - 24) = v397;
        v396 -= 24;
        v388 -= 24;
      }
      while (v388 != v390);
      float64x2_t v388 = *v386;
    }
    *long double v386 = v396;
    v386[1] = v389;
    v386[2] = &v395[24 * v394];
    if (v388) {
      operator delete(v388);
    }
  }
  else
  {
    *(void *)float64x2_t v388 = 0xB70B6DE024A5B9DALL;
    *((void *)v388 + 1) = "md::ls::FlyoverCommonMaterialHandle]";
    *((void *)v388 + 2) = 35;
    int8x16_t v389 = v388 + 24;
  }
  v386[1] = v389;
  double v398 = *a1;
  double v400 = (*a1)[1];
  unint64_t v399 = (unint64_t)(*a1)[2];
  if ((unint64_t)v400 >= v399)
  {
    int16x8_t v402 = *v398;
    unint64_t v403 = 0xAAAAAAAAAAAAAAABLL * ((v400 - *v398) >> 3);
    unint64_t v404 = v403 + 1;
    if (v403 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v405 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v399 - (void)v402) >> 3);
    if (2 * v405 > v404) {
      unint64_t v404 = 2 * v405;
    }
    if (v405 >= 0x555555555555555) {
      unint64_t v406 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v406 = v404;
    }
    if (v406)
    {
      if (v406 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      int32x4_t v407 = (char *)operator new(24 * v406);
    }
    else
    {
      int32x4_t v407 = 0;
    }
    unint64_t v408 = &v407[24 * v403];
    *(void *)unint64_t v408 = 0x5E4DB6CB13CB5848;
    *((void *)v408 + 1) = "md::ls::FlyoverClipConstantDataHandle]";
    *((void *)v408 + 2) = 37;
    unint64_t v401 = v408 + 24;
    if (v400 != v402)
    {
      do
      {
        long long v409 = *(_OWORD *)(v400 - 24);
        *((void *)v408 - 1) = *((void *)v400 - 1);
        *(_OWORD *)(v408 - 24) = v409;
        v408 -= 24;
        v400 -= 24;
      }
      while (v400 != v402);
      double v400 = *v398;
    }
    *double v398 = v408;
    v398[1] = v401;
    v398[2] = &v407[24 * v406];
    if (v400) {
      operator delete(v400);
    }
  }
  else
  {
    *(void *)double v400 = 0x5E4DB6CB13CB5848;
    *((void *)v400 + 1) = "md::ls::FlyoverClipConstantDataHandle]";
    *((void *)v400 + 2) = 37;
    unint64_t v401 = v400 + 24;
  }
  v398[1] = v401;
  int8x16_t v410 = *a1;
  double v412 = (*a1)[1];
  unint64_t v411 = (unint64_t)(*a1)[2];
  if ((unint64_t)v412 >= v411)
  {
    unint64_t v414 = *v410;
    unint64_t v415 = 0xAAAAAAAAAAAAAAABLL * ((v412 - *v410) >> 3);
    unint64_t v416 = v415 + 1;
    if (v415 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v417 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v411 - (void)v414) >> 3);
    if (2 * v417 > v416) {
      unint64_t v416 = 2 * v417;
    }
    if (v417 >= 0x555555555555555) {
      unint64_t v418 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v418 = v416;
    }
    if (v418)
    {
      if (v418 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v419 = (char *)operator new(24 * v418);
    }
    else
    {
      long double v419 = 0;
    }
    long double v420 = &v419[24 * v415];
    *(void *)long double v420 = 0xBAA35DF429A7267FLL;
    *((void *)v420 + 1) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
    *((void *)v420 + 2) = 53;
    uint64_t v413 = v420 + 24;
    if (v412 != v414)
    {
      do
      {
        long long v421 = *(_OWORD *)(v412 - 24);
        *((void *)v420 - 1) = *((void *)v412 - 1);
        *(_OWORD *)(v420 - 24) = v421;
        v420 -= 24;
        v412 -= 24;
      }
      while (v412 != v414);
      double v412 = *v410;
    }
    *int8x16_t v410 = v420;
    v410[1] = v413;
    v410[2] = &v419[24 * v418];
    if (v412) {
      operator delete(v412);
    }
  }
  else
  {
    *(void *)double v412 = 0xBAA35DF429A7267FLL;
    *((void *)v412 + 1) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
    *((void *)v412 + 2) = 53;
    uint64_t v413 = v412 + 24;
  }
  v410[1] = v413;
  double v422 = *a1;
  __double2 v424 = (*a1)[1];
  unint64_t v423 = (unint64_t)(*a1)[2];
  if ((unint64_t)v424 >= v423)
  {
    long double v426 = *v422;
    unint64_t v427 = 0xAAAAAAAAAAAAAAABLL * ((v424 - *v422) >> 3);
    unint64_t v428 = v427 + 1;
    if (v427 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v429 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v423 - (void)v426) >> 3);
    if (2 * v429 > v428) {
      unint64_t v428 = 2 * v429;
    }
    if (v429 >= 0x555555555555555) {
      unint64_t v430 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v430 = v428;
    }
    if (v430)
    {
      if (v430 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v431 = (char *)operator new(24 * v430);
    }
    else
    {
      long double v431 = 0;
    }
    long double v432 = &v431[24 * v427];
    *(void *)long double v432 = 0xD49B968135FE1A73;
    *((void *)v432 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
    *((void *)v432 + 2) = 51;
    long double v425 = v432 + 24;
    if (v424 != v426)
    {
      do
      {
        long long v433 = *(_OWORD *)(v424 - 24);
        *((void *)v432 - 1) = *((void *)v424 - 1);
        *(_OWORD *)(v432 - 24) = v433;
        v432 -= 24;
        v424 -= 24;
      }
      while (v424 != v426);
      __double2 v424 = *v422;
    }
    *double v422 = v432;
    v422[1] = v425;
    v422[2] = &v431[24 * v430];
    if (v424) {
      operator delete(v424);
    }
  }
  else
  {
    *(void *)__double2 v424 = 0xD49B968135FE1A73;
    *((void *)v424 + 1) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
    *((void *)v424 + 2) = 51;
    long double v425 = v424 + 24;
  }
  v422[1] = v425;
  double v434 = *a1;
  __double2 v436 = (*a1)[1];
  unint64_t v435 = (unint64_t)(*a1)[2];
  if ((unint64_t)v436 >= v435)
  {
    long double v438 = *v434;
    unint64_t v439 = 0xAAAAAAAAAAAAAAABLL * ((v436 - *v434) >> 3);
    unint64_t v440 = v439 + 1;
    if (v439 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v441 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v435 - (void)v438) >> 3);
    if (2 * v441 > v440) {
      unint64_t v440 = 2 * v441;
    }
    if (v441 >= 0x555555555555555) {
      unint64_t v442 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v442 = v440;
    }
    if (v442)
    {
      if (v442 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v443 = (char *)operator new(24 * v442);
    }
    else
    {
      long double v443 = 0;
    }
    double v444 = &v443[24 * v439];
    *(void *)double v444 = 0x985FB09D9DF9959FLL;
    *((void *)v444 + 1) = "md::ls::HasStyleAttributeRasterSet]";
    *((void *)v444 + 2) = 34;
    long double v437 = v444 + 24;
    if (v436 != v438)
    {
      do
      {
        long long v445 = *(_OWORD *)(v436 - 24);
        *((void *)v444 - 1) = *((void *)v436 - 1);
        *(_OWORD *)(v444 - 24) = v445;
        v444 -= 24;
        v436 -= 24;
      }
      while (v436 != v438);
      __double2 v436 = *v434;
    }
    *double v434 = v444;
    v434[1] = v437;
    v434[2] = &v443[24 * v442];
    if (v436) {
      operator delete(v436);
    }
  }
  else
  {
    *(void *)__double2 v436 = 0x985FB09D9DF9959FLL;
    *((void *)v436 + 1) = "md::ls::HasStyleAttributeRasterSet]";
    *((void *)v436 + 2) = 34;
    long double v437 = v436 + 24;
  }
  v434[1] = v437;
  __double2 v446 = *a1;
  long double v448 = (*a1)[1];
  unint64_t v447 = (unint64_t)(*a1)[2];
  if ((unint64_t)v448 >= v447)
  {
    float64x2_t v450 = *v446;
    unint64_t v451 = 0xAAAAAAAAAAAAAAABLL * ((v448 - *v446) >> 3);
    unint64_t v452 = v451 + 1;
    if (v451 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v453 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v447 - (void)v450) >> 3);
    if (2 * v453 > v452) {
      unint64_t v452 = 2 * v453;
    }
    if (v453 >= 0x555555555555555) {
      unint64_t v454 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v454 = v452;
    }
    if (v454)
    {
      if (v454 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      double v455 = (char *)operator new(24 * v454);
    }
    else
    {
      double v455 = 0;
    }
    double v456 = &v455[24 * v451];
    *(void *)double v456 = 0x11BB47B172EB0B40;
    *((void *)v456 + 1) = "md::ls::NeedsClimateTint]";
    *((void *)v456 + 2) = 24;
    long double v449 = v456 + 24;
    if (v448 != v450)
    {
      do
      {
        long long v457 = *(_OWORD *)(v448 - 24);
        *((void *)v456 - 1) = *((void *)v448 - 1);
        *(_OWORD *)(v456 - 24) = v457;
        v456 -= 24;
        v448 -= 24;
      }
      while (v448 != v450);
      long double v448 = *v446;
    }
    *__double2 v446 = v456;
    v446[1] = v449;
    v446[2] = &v455[24 * v454];
    if (v448) {
      operator delete(v448);
    }
  }
  else
  {
    *(void *)long double v448 = 0x11BB47B172EB0B40;
    *((void *)v448 + 1) = "md::ls::NeedsClimateTint]";
    *((void *)v448 + 2) = 24;
    long double v449 = v448 + 24;
  }
  v446[1] = v449;
  long double v458 = *a1;
  long double v460 = (*a1)[1];
  unint64_t v459 = (unint64_t)(*a1)[2];
  if ((unint64_t)v460 >= v459)
  {
    double v462 = *v458;
    unint64_t v463 = 0xAAAAAAAAAAAAAAABLL * ((v460 - *v458) >> 3);
    unint64_t v464 = v463 + 1;
    if (v463 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v465 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v459 - (void)v462) >> 3);
    if (2 * v465 > v464) {
      unint64_t v464 = 2 * v465;
    }
    if (v465 >= 0x555555555555555) {
      unint64_t v466 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v466 = v464;
    }
    if (v466)
    {
      if (v466 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v467 = (char *)operator new(24 * v466);
    }
    else
    {
      uint64_t v467 = 0;
    }
    int64_t v468 = &v467[24 * v463];
    *(void *)int64_t v468 = 0xA0C97F52893883B7;
    *((void *)v468 + 1) = "md::ls::CustomRenderState]";
    *((void *)v468 + 2) = 25;
    float64x2_t v461 = v468 + 24;
    if (v460 != v462)
    {
      do
      {
        long long v469 = *(_OWORD *)(v460 - 24);
        *((void *)v468 - 1) = *((void *)v460 - 1);
        *(_OWORD *)(v468 - 24) = v469;
        v468 -= 24;
        v460 -= 24;
      }
      while (v460 != v462);
      long double v460 = *v458;
    }
    *long double v458 = v468;
    v458[1] = v461;
    v458[2] = &v467[24 * v466];
    if (v460) {
      operator delete(v460);
    }
  }
  else
  {
    *(void *)long double v460 = 0xA0C97F52893883B7;
    *((void *)v460 + 1) = "md::ls::CustomRenderState]";
    *((void *)v460 + 2) = 25;
    float64x2_t v461 = v460 + 24;
  }
  v458[1] = v461;
  v470 = *a1;
  double v472 = (*a1)[1];
  unint64_t v471 = (unint64_t)(*a1)[2];
  if ((unint64_t)v472 >= v471)
  {
    double v474 = *v470;
    unint64_t v475 = 0xAAAAAAAAAAAAAAABLL * ((v472 - *v470) >> 3);
    unint64_t v476 = v475 + 1;
    if (v475 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v477 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v471 - (void)v474) >> 3);
    if (2 * v477 > v476) {
      unint64_t v476 = 2 * v477;
    }
    if (v477 >= 0x555555555555555) {
      unint64_t v478 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v478 = v476;
    }
    if (v478)
    {
      if (v478 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v479 = (char *)operator new(24 * v478);
    }
    else
    {
      long double v479 = 0;
    }
    long double v480 = &v479[24 * v475];
    *(void *)long double v480 = 0xE103B5C60804137ELL;
    *((void *)v480 + 1) = "md::ls::ColorRampDataHandle]";
    *((void *)v480 + 2) = 27;
    double v473 = v480 + 24;
    if (v472 != v474)
    {
      do
      {
        long long v481 = *(_OWORD *)(v472 - 24);
        *((void *)v480 - 1) = *((void *)v472 - 1);
        *(_OWORD *)(v480 - 24) = v481;
        v480 -= 24;
        v472 -= 24;
      }
      while (v472 != v474);
      double v472 = *v470;
    }
    void *v470 = v480;
    v470[1] = v473;
    v470[2] = &v479[24 * v478];
    if (v472) {
      operator delete(v472);
    }
  }
  else
  {
    *(void *)double v472 = 0xE103B5C60804137ELL;
    *((void *)v472 + 1) = "md::ls::ColorRampDataHandle]";
    *((void *)v472 + 2) = 27;
    double v473 = v472 + 24;
  }
  v470[1] = v473;
  long double v482 = *a1;
  long double v484 = (*a1)[1];
  unint64_t v483 = (unint64_t)(*a1)[2];
  if ((unint64_t)v484 >= v483)
  {
    long double v486 = *v482;
    unint64_t v487 = 0xAAAAAAAAAAAAAAABLL * ((v484 - *v482) >> 3);
    unint64_t v488 = v487 + 1;
    if (v487 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v489 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v483 - (void)v486) >> 3);
    if (2 * v489 > v488) {
      unint64_t v488 = 2 * v489;
    }
    if (v489 >= 0x555555555555555) {
      unint64_t v490 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v490 = v488;
    }
    if (v490)
    {
      if (v490 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v491 = (char *)operator new(24 * v490);
    }
    else
    {
      long double v491 = 0;
    }
    long double v492 = &v491[24 * v487];
    *(void *)long double v492 = 0x7931433C9A6EB2C6;
    *((void *)v492 + 1) = "md::ls::SharedUniqueID]";
    *((void *)v492 + 2) = 22;
    long double v485 = v492 + 24;
    if (v484 != v486)
    {
      do
      {
        long long v493 = *(_OWORD *)(v484 - 24);
        *((void *)v492 - 1) = *((void *)v484 - 1);
        *(_OWORD *)(v492 - 24) = v493;
        v492 -= 24;
        v484 -= 24;
      }
      while (v484 != v486);
      long double v484 = *v482;
    }
    void *v482 = v492;
    v482[1] = v485;
    v482[2] = &v491[24 * v490];
    if (v484) {
      operator delete(v484);
    }
  }
  else
  {
    *(void *)long double v484 = 0x7931433C9A6EB2C6;
    *((void *)v484 + 1) = "md::ls::SharedUniqueID]";
    *((void *)v484 + 2) = 22;
    long double v485 = v484 + 24;
  }
  v482[1] = v485;
  long double v494 = *a1;
  long double v496 = (*a1)[1];
  unint64_t v495 = (unint64_t)(*a1)[2];
  if ((unint64_t)v496 >= v495)
  {
    long double v498 = *v494;
    unint64_t v499 = 0xAAAAAAAAAAAAAAABLL * ((v496 - *v494) >> 3);
    unint64_t v500 = v499 + 1;
    if (v499 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v501 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v495 - (void)v498) >> 3);
    if (2 * v501 > v500) {
      unint64_t v500 = 2 * v501;
    }
    if (v501 >= 0x555555555555555) {
      unint64_t v502 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v502 = v500;
    }
    if (v502)
    {
      if (v502 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long double v503 = (char *)operator new(24 * v502);
    }
    else
    {
      long double v503 = 0;
    }
    long double v504 = &v503[24 * v499];
    *(void *)long double v504 = 0x7087983DEF28DBFELL;
    *((void *)v504 + 1) = "md::ls::IsOpaque]";
    *((void *)v504 + 2) = 16;
    long double v497 = v504 + 24;
    if (v496 != v498)
    {
      do
      {
        long long v505 = *(_OWORD *)(v496 - 24);
        *((void *)v504 - 1) = *((void *)v496 - 1);
        *(_OWORD *)(v504 - 24) = v505;
        v504 -= 24;
        v496 -= 24;
      }
      while (v496 != v498);
      long double v496 = *v494;
    }
    *long double v494 = v504;
    v494[1] = v497;
    v494[2] = &v503[24 * v502];
    if (v496) {
      operator delete(v496);
    }
  }
  else
  {
    *(void *)long double v496 = 0x7087983DEF28DBFELL;
    *((void *)v496 + 1) = "md::ls::IsOpaque]";
    *((void *)v496 + 2) = 16;
    long double v497 = v496 + 24;
  }
  v494[1] = v497;
  float64x2_t v506 = *a1;
  float64x2_t v508 = (*a1)[1];
  unint64_t v507 = (unint64_t)(*a1)[2];
  if ((unint64_t)v508 >= v507)
  {
    float64x2_t v510 = *v506;
    unint64_t v511 = 0xAAAAAAAAAAAAAAABLL * ((v508 - *v506) >> 3);
    unint64_t v512 = v511 + 1;
    if (v511 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v513 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v507 - (void)v510) >> 3);
    if (2 * v513 > v512) {
      unint64_t v512 = 2 * v513;
    }
    if (v513 >= 0x555555555555555) {
      unint64_t v514 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v514 = v512;
    }
    if (v514)
    {
      if (v514 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      v515 = (char *)operator new(24 * v514);
    }
    else
    {
      v515 = 0;
    }
    v516 = &v515[24 * v511];
    *(void *)v516 = 0x73F0259EC1934FB1;
    *((void *)v516 + 1) = "md::ls::IsTransparent]";
    *((void *)v516 + 2) = 21;
    float64x2_t v509 = v516 + 24;
    if (v508 != v510)
    {
      do
      {
        long long v517 = *(_OWORD *)(v508 - 24);
        *((void *)v516 - 1) = *((void *)v508 - 1);
        *(_OWORD *)(v516 - 24) = v517;
        v516 -= 24;
        v508 -= 24;
      }
      while (v508 != v510);
      float64x2_t v508 = *v506;
    }
    std::__shared_weak_count *v506 = v516;
    v506[1] = v509;
    v506[2] = &v515[24 * v514];
    if (v508) {
      operator delete(v508);
    }
  }
  else
  {
    *(void *)float64x2_t v508 = 0x73F0259EC1934FB1;
    *((void *)v508 + 1) = "md::ls::IsTransparent]";
    *((void *)v508 + 2) = 21;
    float64x2_t v509 = v508 + 24;
  }
  v506[1] = v509;
  v518 = *a1;
  v520 = (*a1)[1];
  unint64_t v519 = (unint64_t)(*a1)[2];
  if ((unint64_t)v520 >= v519)
  {
    v522 = *v518;
    unint64_t v523 = 0xAAAAAAAAAAAAAAABLL * ((v520 - *v518) >> 3);
    unint64_t v524 = v523 + 1;
    if (v523 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v525 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v519 - (void)v522) >> 3);
    if (2 * v525 > v524) {
      unint64_t v524 = 2 * v525;
    }
    if (v525 >= 0x555555555555555) {
      unint64_t v526 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v526 = v524;
    }
    if (v526)
    {
      if (v526 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v527 = (char *)operator new(24 * v526);
    }
    else
    {
      uint64_t v527 = 0;
    }
    unint64_t v528 = &v527[24 * v523];
    *(void *)unint64_t v528 = 0x499CE17DBD9A1615;
    *((void *)v528 + 1) = "md::ls::NeedsZBias]";
    *((void *)v528 + 2) = 18;
    v521 = v528 + 24;
    if (v520 != v522)
    {
      do
      {
        long long v529 = *(_OWORD *)(v520 - 24);
        *((void *)v528 - 1) = *((void *)v520 - 1);
        *(_OWORD *)(v528 - 24) = v529;
        v528 -= 24;
        v520 -= 24;
      }
      while (v520 != v522);
      v520 = *v518;
    }
    std::__shared_weak_count *v518 = v528;
    v518[1] = v521;
    v518[2] = &v527[24 * v526];
    if (v520) {
      operator delete(v520);
    }
  }
  else
  {
    *(void *)v520 = 0x499CE17DBD9A1615;
    *((void *)v520 + 1) = "md::ls::NeedsZBias]";
    *((void *)v520 + 2) = 18;
    v521 = v520 + 24;
  }
  v518[1] = v521;
  uint64_t v530 = *a1;
  long long v532 = (*a1)[1];
  unint64_t v531 = (unint64_t)(*a1)[2];
  if ((unint64_t)v532 >= v531)
  {
    v534 = *v530;
    unint64_t v535 = 0xAAAAAAAAAAAAAAABLL * ((v532 - *v530) >> 3);
    unint64_t v536 = v535 + 1;
    if (v535 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v531 - (void)v534) >> 3);
    if (2 * v537 > v536) {
      unint64_t v536 = 2 * v537;
    }
    if (v537 >= 0x555555555555555) {
      unint64_t v538 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v538 = v536;
    }
    if (v538)
    {
      if (v538 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      v539 = (char *)operator new(24 * v538);
    }
    else
    {
      v539 = 0;
    }
    uint64_t v540 = &v539[24 * v535];
    *(void *)uint64_t v540 = 0x98A9F01DBB8BCCCELL;
    *((void *)v540 + 1) = "md::ls::PreserveHeight]";
    *((void *)v540 + 2) = 22;
    uint64_t v533 = v540 + 24;
    if (v532 != v534)
    {
      do
      {
        long long v541 = *(_OWORD *)(v532 - 24);
        *((void *)v540 - 1) = *((void *)v532 - 1);
        *(_OWORD *)(v540 - 24) = v541;
        v540 -= 24;
        v532 -= 24;
      }
      while (v532 != v534);
      long long v532 = *v530;
    }
    *uint64_t v530 = v540;
    v530[1] = v533;
    v530[2] = &v539[24 * v538];
    if (v532) {
      operator delete(v532);
    }
  }
  else
  {
    *(void *)long long v532 = 0x98A9F01DBB8BCCCELL;
    *((void *)v532 + 1) = "md::ls::PreserveHeight]";
    *((void *)v532 + 2) = 22;
    uint64_t v533 = v532 + 24;
  }
  v530[1] = v533;
  uint64_t v542 = *a1;
  uint64_t v544 = (*a1)[1];
  unint64_t v543 = (unint64_t)(*a1)[2];
  if ((unint64_t)v544 >= v543)
  {
    v546 = *v542;
    unint64_t v547 = 0xAAAAAAAAAAAAAAABLL * ((v544 - *v542) >> 3);
    unint64_t v548 = v547 + 1;
    if (v547 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v549 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v543 - (void)v546) >> 3);
    if (2 * v549 > v548) {
      unint64_t v548 = 2 * v549;
    }
    if (v549 >= 0x555555555555555) {
      unint64_t v550 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v550 = v548;
    }
    if (v550)
    {
      if (v550 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      __int16 v551 = (char *)operator new(24 * v550);
    }
    else
    {
      __int16 v551 = 0;
    }
    __int16 v552 = &v551[24 * v547];
    *(void *)__int16 v552 = 0xE53EF176130D7769;
    *((void *)v552 + 1) = "md::ls::InstanceCount]";
    *((void *)v552 + 2) = 21;
    v545 = v552 + 24;
    if (v544 != v546)
    {
      do
      {
        long long v553 = *(_OWORD *)(v544 - 24);
        *((void *)v552 - 1) = *((void *)v544 - 1);
        *(_OWORD *)(v552 - 24) = v553;
        v552 -= 24;
        v544 -= 24;
      }
      while (v544 != v546);
      uint64_t v544 = *v542;
    }
    *uint64_t v542 = v552;
    v542[1] = v545;
    v542[2] = &v551[24 * v550];
    if (v544) {
      operator delete(v544);
    }
  }
  else
  {
    *(void *)uint64_t v544 = 0xE53EF176130D7769;
    *((void *)v544 + 1) = "md::ls::InstanceCount]";
    *((void *)v544 + 2) = 21;
    v545 = v544 + 24;
  }
  v542[1] = v545;
  __int16 v554 = *a1;
  __int16 v556 = (*a1)[1];
  unint64_t v555 = (unint64_t)(*a1)[2];
  if ((unint64_t)v556 >= v555)
  {
    v558 = *v554;
    unint64_t v559 = 0xAAAAAAAAAAAAAAABLL * ((v556 - *v554) >> 3);
    unint64_t v560 = v559 + 1;
    if (v559 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v561 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v555 - (void)v558) >> 3);
    if (2 * v561 > v560) {
      unint64_t v560 = 2 * v561;
    }
    if (v561 >= 0x555555555555555) {
      unint64_t v562 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v562 = v560;
    }
    if (v562)
    {
      if (v562 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      v563 = (char *)operator new(24 * v562);
    }
    else
    {
      v563 = 0;
    }
    long long v564 = &v563[24 * v559];
    *(void *)long long v564 = 0x76B9BA390004E44ELL;
    *((void *)v564 + 1) = "md::ls::IsDecal]";
    *((void *)v564 + 2) = 15;
    v557 = v564 + 24;
    if (v556 != v558)
    {
      do
      {
        long long v565 = *(_OWORD *)(v556 - 24);
        *((void *)v564 - 1) = *((void *)v556 - 1);
        *(_OWORD *)(v564 - 24) = v565;
        v564 -= 24;
        v556 -= 24;
      }
      while (v556 != v558);
      __int16 v556 = *v554;
    }
    *__int16 v554 = v564;
    v554[1] = v557;
    v554[2] = &v563[24 * v562];
    if (v556) {
      operator delete(v556);
    }
  }
  else
  {
    *(void *)__int16 v556 = 0x76B9BA390004E44ELL;
    *((void *)v556 + 1) = "md::ls::IsDecal]";
    *((void *)v556 + 2) = 15;
    v557 = v556 + 24;
  }
  v554[1] = v557;
  uint64_t v566 = *a1;
  uint64_t v568 = (*a1)[1];
  unint64_t v567 = (unint64_t)(*a1)[2];
  if ((unint64_t)v568 >= v567)
  {
    __int16 v570 = *v566;
    unint64_t v571 = 0xAAAAAAAAAAAAAAABLL * ((v568 - *v566) >> 3);
    unint64_t v572 = v571 + 1;
    if (v571 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v573 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v567 - (void)v570) >> 3);
    if (2 * v573 > v572) {
      unint64_t v572 = 2 * v573;
    }
    if (v573 >= 0x555555555555555) {
      unint64_t v574 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v574 = v572;
    }
    if (v574)
    {
      if (v574 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      long long v575 = (char *)operator new(24 * v574);
    }
    else
    {
      long long v575 = 0;
    }
    uint64_t v576 = &v575[24 * v571];
    *(void *)uint64_t v576 = 0x3E8485C60908F920;
    *((void *)v576 + 1) = "md::ls::IsMaterial]";
    *((void *)v576 + 2) = 18;
    uint64_t v569 = v576 + 24;
    if (v568 != v570)
    {
      do
      {
        long long v577 = *(_OWORD *)(v568 - 24);
        *((void *)v576 - 1) = *((void *)v568 - 1);
        *(_OWORD *)(v576 - 24) = v577;
        v576 -= 24;
        v568 -= 24;
      }
      while (v568 != v570);
      uint64_t v568 = *v566;
    }
    *uint64_t v566 = v576;
    v566[1] = v569;
    v566[2] = &v575[24 * v574];
    if (v568) {
      operator delete(v568);
    }
  }
  else
  {
    *(void *)uint64_t v568 = 0x3E8485C60908F920;
    *((void *)v568 + 1) = "md::ls::IsMaterial]";
    *((void *)v568 + 2) = 18;
    uint64_t v569 = v568 + 24;
  }
  v566[1] = v569;
  v578 = *a1;
  v580 = (*a1)[1];
  unint64_t v579 = (unint64_t)(*a1)[2];
  if ((unint64_t)v580 >= v579)
  {
    v582 = *v578;
    unint64_t v583 = 0xAAAAAAAAAAAAAAABLL * ((v580 - *v578) >> 3);
    unint64_t v584 = v583 + 1;
    if (v583 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v585 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v579 - (void)v582) >> 3);
    if (2 * v585 > v584) {
      unint64_t v584 = 2 * v585;
    }
    if (v585 >= 0x555555555555555) {
      unint64_t v586 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v586 = v584;
    }
    if (v586)
    {
      if (v586 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v587 = (char *)operator new(24 * v586);
    }
    else
    {
      uint64_t v587 = 0;
    }
    v588 = &v587[24 * v583];
    *(void *)v588 = 0x237F9D3BCC905318;
    *((void *)v588 + 1) = "md::ls::IsMercator]";
    *((void *)v588 + 2) = 18;
    uint64_t v581 = v588 + 24;
    if (v580 != v582)
    {
      do
      {
        long long v589 = *(_OWORD *)(v580 - 24);
        *((void *)v588 - 1) = *((void *)v580 - 1);
        *(_OWORD *)(v588 - 24) = v589;
        v588 -= 24;
        v580 -= 24;
      }
      while (v580 != v582);
      v580 = *v578;
    }
    std::__shared_weak_count *v578 = v588;
    v578[1] = v581;
    v578[2] = &v587[24 * v586];
    if (v580) {
      operator delete(v580);
    }
  }
  else
  {
    *(void *)v580 = 0x237F9D3BCC905318;
    *((void *)v580 + 1) = "md::ls::IsMercator]";
    *((void *)v580 + 2) = 18;
    uint64_t v581 = v580 + 24;
  }
  v578[1] = v581;
  v590 = *a1;
  v592 = (*a1)[1];
  unint64_t v591 = (unint64_t)(*a1)[2];
  if ((unint64_t)v592 >= v591)
  {
    v594 = *v590;
    unint64_t v595 = 0xAAAAAAAAAAAAAAABLL * ((v592 - *v590) >> 3);
    unint64_t v596 = v595 + 1;
    if (v595 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v597 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v591 - (void)v594) >> 3);
    if (2 * v597 > v596) {
      unint64_t v596 = 2 * v597;
    }
    if (v597 >= 0x555555555555555) {
      unint64_t v598 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v598 = v596;
    }
    if (v598)
    {
      if (v598 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v599 = (char *)operator new(24 * v598);
    }
    else
    {
      uint64_t v599 = 0;
    }
    v600 = &v599[24 * v595];
    *(void *)v600 = 0x69465F3BE0BF85FBLL;
    *((void *)v600 + 1) = "md::ls::FlyoverInstance]";
    *((void *)v600 + 2) = 23;
    uint64_t v593 = v600 + 24;
    if (v592 != v594)
    {
      do
      {
        long long v601 = *(_OWORD *)(v592 - 24);
        *((void *)v600 - 1) = *((void *)v592 - 1);
        *(_OWORD *)(v600 - 24) = v601;
        v600 -= 24;
        v592 -= 24;
      }
      while (v592 != v594);
      v592 = *v590;
    }
    std::__shared_weak_count *v590 = v600;
    v590[1] = v593;
    v590[2] = &v599[24 * v598];
    if (v592) {
      operator delete(v592);
    }
  }
  else
  {
    *(void *)v592 = 0x69465F3BE0BF85FBLL;
    *((void *)v592 + 1) = "md::ls::FlyoverInstance]";
    *((void *)v592 + 2) = 23;
    uint64_t v593 = v592 + 24;
  }
  v590[1] = v593;
  v602 = *a1;
  v604 = (*a1)[1];
  unint64_t v603 = (unint64_t)(*a1)[2];
  if ((unint64_t)v604 >= v603)
  {
    v606 = *v602;
    unint64_t v607 = 0xAAAAAAAAAAAAAAABLL * ((v604 - *v602) >> 3);
    unint64_t v608 = v607 + 1;
    if (v607 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v609 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v603 - (void)v606) >> 3);
    if (2 * v609 > v608) {
      unint64_t v608 = 2 * v609;
    }
    if (v609 >= 0x555555555555555) {
      unint64_t v610 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v610 = v608;
    }
    if (v610)
    {
      if (v610 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v611 = (char *)operator new(24 * v610);
    }
    else
    {
      uint64_t v611 = 0;
    }
    v612 = &v611[24 * v607];
    *(void *)v612 = 0x3EAAB620EAA88EC8;
    *((void *)v612 + 1) = "md::ls::CustomZIndex]";
    *((void *)v612 + 2) = 20;
    uint64_t v605 = v612 + 24;
    if (v604 != v606)
    {
      do
      {
        long long v613 = *(_OWORD *)(v604 - 24);
        *((void *)v612 - 1) = *((void *)v604 - 1);
        *(_OWORD *)(v612 - 24) = v613;
        v612 -= 24;
        v604 -= 24;
      }
      while (v604 != v606);
      v604 = *v602;
    }
    std::__shared_weak_count *v602 = v612;
    v602[1] = v605;
    v602[2] = &v611[24 * v610];
    if (v604) {
      operator delete(v604);
    }
  }
  else
  {
    *(void *)v604 = 0x3EAAB620EAA88EC8;
    *((void *)v604 + 1) = "md::ls::CustomZIndex]";
    *((void *)v604 + 2) = 20;
    uint64_t v605 = v604 + 24;
  }
  v602[1] = v605;
  v614 = *a1;
  v616 = (*a1)[1];
  unint64_t v615 = (unint64_t)(*a1)[2];
  if ((unint64_t)v616 >= v615)
  {
    v618 = *v614;
    unint64_t v619 = 0xAAAAAAAAAAAAAAABLL * ((v616 - *v614) >> 3);
    unint64_t v620 = v619 + 1;
    if (v619 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_903;
    }
    unint64_t v621 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v615 - (void)v618) >> 3);
    if (2 * v621 > v620) {
      unint64_t v620 = 2 * v621;
    }
    if (v621 >= 0x555555555555555) {
      unint64_t v622 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v622 = v620;
    }
    if (v622)
    {
      if (v622 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_904;
      }
      uint64_t v623 = (char *)operator new(24 * v622);
    }
    else
    {
      uint64_t v623 = 0;
    }
    v624 = &v623[24 * v619];
    *(void *)v624 = 0x763953A644184BA9;
    *((void *)v624 + 1) = "md::ls::RenderableHash]";
    *((void *)v624 + 2) = 22;
    uint64_t v617 = v624 + 24;
    if (v616 != v618)
    {
      do
      {
        long long v625 = *(_OWORD *)(v616 - 24);
        *((void *)v624 - 1) = *((void *)v616 - 1);
        *(_OWORD *)(v624 - 24) = v625;
        v624 -= 24;
        v616 -= 24;
      }
      while (v616 != v618);
      v616 = *v614;
    }
    std::__shared_weak_count *v614 = v624;
    v614[1] = v617;
    v614[2] = &v623[24 * v622];
    if (v616) {
      operator delete(v616);
    }
  }
  else
  {
    *(void *)v616 = 0x763953A644184BA9;
    *((void *)v616 + 1) = "md::ls::RenderableHash]";
    *((void *)v616 + 2) = 22;
    uint64_t v617 = v616 + 24;
  }
  v614[1] = v617;
  char v626 = *a1;
  int v628 = (*a1)[1];
  unint64_t v627 = (unint64_t)v626[2];
  if ((unint64_t)v628 < v627)
  {
    *(void *)int v628 = 0xCB8AA7FBA6BCD25CLL;
    *((void *)v628 + 1) = "md::ls::PredefinedRenderState]";
    *((void *)v628 + 2) = 29;
    v629 = v628 + 24;
    goto LABEL_902;
  }
  uint64_t v630 = *v626;
  unint64_t v631 = 0xAAAAAAAAAAAAAAABLL * ((v628 - *v626) >> 3);
  unint64_t v632 = v631 + 1;
  if (v631 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_903:
  }
    abort();
  unint64_t v633 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v627 - (void)v630) >> 3);
  if (2 * v633 > v632) {
    unint64_t v632 = 2 * v633;
  }
  if (v633 >= 0x555555555555555) {
    unint64_t v634 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v634 = v632;
  }
  if (!v634)
  {
    v635 = 0;
    goto LABEL_897;
  }
  if (v634 > 0xAAAAAAAAAAAAAAALL) {
LABEL_904:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  v635 = (char *)operator new(24 * v634);
LABEL_897:
  v636 = &v635[24 * v631];
  *(void *)v636 = 0xCB8AA7FBA6BCD25CLL;
  *((void *)v636 + 1) = "md::ls::PredefinedRenderState]";
  *((void *)v636 + 2) = 29;
  v629 = v636 + 24;
  if (v628 != v630)
  {
    do
    {
      long long v637 = *(_OWORD *)(v628 - 24);
      *((void *)v636 - 1) = *((void *)v628 - 1);
      *(_OWORD *)(v636 - 24) = v637;
      v636 -= 24;
      v628 -= 24;
    }
    while (v628 != v630);
    int v628 = *v626;
  }
  *char v626 = v636;
  v626[1] = v629;
  v626[2] = &v635[24 * v634];
  if (v628) {
    operator delete(v628);
  }
LABEL_902:
  v626[1] = v629;
}

uint64_t gss::GlobalProperties::loadFromStylChapterBitstream(uint64_t a1, geo::ibitstream *this, uint64_t a3, void *a4)
{
  uint64_t v702 = *MEMORY[0x1E4F143B8];
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    uint64_t v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 20;
      __int16 v700 = 2082;
      v701 = "Could not read indication of raster polygon changeover z existing.";
      _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    unint64_t v18 = (void *)std::ostream::operator<<();
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read indication of raster polygon changeover z existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    uint64_t v8 = *((unsigned __int8 *)this + 24);
    unint64_t v10 = *((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    unint64_t v11 = v9 + ((unint64_t)(v8 + 8) >> 3);
    char v12 = v8 & 7;
    unint64_t v13 = v9 + 1;
    if (v11 >= v9 + 1)
    {
      if (v8 <= 8) {
        unint64_t v21 = v9 + 1;
      }
      else {
        unint64_t v21 = v9 + 2;
      }
      if (v10 >= v21)
      {
        uint64_t v27 = *(void *)this;
        if (*((unsigned char *)this + 24))
        {
          int v28 = *(unsigned __int8 *)(v27 + v9);
          if (v13 >= v10) {
            int v29 = 0;
          }
          else {
            int v29 = *(unsigned __int8 *)(v27 + v13);
          }
          unsigned int v15 = ((v29 & (0xFFFF << (8 - v8))) >> (8 - v8)) | ((((1 << (8 - v8)) + 255) & v28) << v8);
        }
        else
        {
          LOBYTE(v15) = *(unsigned char *)(v27 + v9);
        }
        goto LABEL_34;
      }
    }
    else
    {
      if (*((unsigned char *)this + 24)) {
        unint64_t v14 = v9 + 1;
      }
      else {
        unint64_t v14 = *((void *)this + 2);
      }
      if (v10 < v14) {
        goto LABEL_21;
      }
      if (*((unsigned char *)this + 24))
      {
        if (v10 >= v13)
        {
          unsigned int v15 = (((1 << (8 - v8)) - 1) & *(unsigned __int8 *)(*(void *)this + v9)) << v8;
LABEL_34:
          *((void *)this + 2) = v11;
          *((unsigned char *)this + 24) = v12;
          *(float *)(a1 + 36) = (float)((float)((float)v15 / 255.0) * 31.875) + 0.0;
          goto LABEL_35;
        }
      }
      else if (v10 >= v13)
      {
        LOBYTE(v15) = *(unsigned char *)(*(void *)this + v9);
        goto LABEL_34;
      }
    }
    *((void *)this + 2) = v11;
    *((unsigned char *)this + 24) = v12;
LABEL_21:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v22 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 22;
      __int16 v700 = 2082;
      v701 = "Could not read raster polygon changeover z.";
      _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)":", 1);
    double v24 = (void *)std::ostream::operator<<();
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not read raster polygon changeover z.", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    return 0;
  }
LABEL_35:
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v39 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 24;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min triangle width existing.";
      _os_log_impl(&dword_1A1780000, v39, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)":", 1);
    int8x16_t v41 = (void *)std::ostream::operator<<();
    double v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Could not read indication of min triangle width existing.", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    *(_DWORD *)buf = 0;
    unint64_t v30 = *((void *)this + 1);
    uint64_t v31 = *((void *)this + 2);
    char v32 = *((unsigned char *)this + 24);
    unint64_t v33 = v31 + 5;
    if (!v32) {
      unint64_t v33 = v31 + 4;
    }
    if (v30 < v33)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v34 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 26;
        __int16 v700 = 2082;
        v701 = "Could not read min line triangle width.";
        _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)":", 1);
      int32x4_t v36 = (void *)std::ostream::operator<<();
      long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" STYL Parse Error Here: ", 24);
      double v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Could not read min line triangle width.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
      return 0;
    }
    uint64_t v44 = *(void *)this;
    if (*((unsigned char *)this + 24))
    {
      uint64_t v45 = 0;
      uint64_t v46 = v44 + v31;
      uint64_t v47 = v31 + 1;
      do
      {
        if (v47 + v45 >= v30) {
          int v48 = 0;
        }
        else {
          int v48 = *(unsigned __int8 *)(v46 + v45 + 1);
        }
        unsigned int v49 = ((v48 & (0xFFFF << (8 - v32))) >> (8 - v32)) | ((((1 << (8 - v32)) + 255) & *(unsigned __int8 *)(v46 + v45)) << v32);
        *((void *)this + 2) = v47 + v45;
        buf[v45++] = v49;
      }
      while (v45 != 4);
      int v50 = *(_DWORD *)buf;
    }
    else
    {
      int v50 = *(_DWORD *)(v44 + v31);
      *((void *)this + 2) = v31 + 4;
    }
    *(_DWORD *)(a1 + 40) = v50;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    int v59 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 28;
      __int16 v700 = 2082;
      v701 = "Could not read indication of building changeover z existing.";
      _os_log_impl(&dword_1A1780000, v59, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)":", 1);
    long long v61 = (void *)std::ostream::operator<<();
    long double v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Could not read indication of building changeover z existing.", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    uint64_t v51 = *((unsigned __int8 *)this + 24);
    unint64_t v53 = *((void *)this + 1);
    uint64_t v52 = *((void *)this + 2);
    unint64_t v54 = v52 + ((unint64_t)(v51 + 8) >> 3);
    char v55 = v51 & 7;
    unint64_t v56 = v52 + 1;
    if (v54 >= v52 + 1)
    {
      if (v51 <= 8) {
        unint64_t v64 = v52 + 1;
      }
      else {
        unint64_t v64 = v52 + 2;
      }
      if (v53 >= v64)
      {
        uint64_t v70 = *(void *)this;
        if (*((unsigned char *)this + 24))
        {
          int v71 = *(unsigned __int8 *)(v70 + v52);
          if (v56 >= v53) {
            int v72 = 0;
          }
          else {
            int v72 = *(unsigned __int8 *)(v70 + v56);
          }
          unsigned int v58 = ((v72 & (0xFFFF << (8 - v51))) >> (8 - v51)) | ((((1 << (8 - v51)) + 255) & v71) << v51);
        }
        else
        {
          LOBYTE(v58) = *(unsigned char *)(v70 + v52);
        }
        goto LABEL_92;
      }
    }
    else
    {
      if (*((unsigned char *)this + 24)) {
        unint64_t v57 = v52 + 1;
      }
      else {
        unint64_t v57 = *((void *)this + 2);
      }
      if (v53 < v57) {
        goto LABEL_79;
      }
      if (*((unsigned char *)this + 24))
      {
        if (v53 >= v56)
        {
          unsigned int v58 = (((1 << (8 - v51)) - 1) & *(unsigned __int8 *)(*(void *)this + v52)) << v51;
LABEL_92:
          *((void *)this + 2) = v54;
          *((unsigned char *)this + 24) = v55;
          *(float *)(a1 + 44) = (float)((float)((float)v58 / 255.0) * 31.875) + 0.0;
          *(unsigned char *)a1 = 1;
          goto LABEL_93;
        }
      }
      else if (v53 >= v56)
      {
        LOBYTE(v58) = *(unsigned char *)(*(void *)this + v52);
        goto LABEL_92;
      }
    }
    *((void *)this + 2) = v54;
    *((unsigned char *)this + 24) = v55;
LABEL_79:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    __double2 v65 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 30;
      __int16 v700 = 2082;
      v701 = "Could not read building changeover z.";
      _os_log_impl(&dword_1A1780000, v65, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)":", 1);
    unint64_t v67 = (void *)std::ostream::operator<<();
    unint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Could not read building changeover z.", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
    return 0;
  }
LABEL_93:
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v81 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 33;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (unknown) z existing.";
      _os_log_impl(&dword_1A1780000, v81, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)":", 1);
    long double v83 = (void *)std::ostream::operator<<();
    long double v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not read indication of min traffic type (unknown) z existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    uint64_t v73 = *((unsigned __int8 *)this + 24);
    unint64_t v75 = *((void *)this + 1);
    uint64_t v74 = *((void *)this + 2);
    unint64_t v76 = v74 + ((unint64_t)(v73 + 8) >> 3);
    char v77 = v73 & 7;
    unint64_t v78 = v74 + 1;
    if (v76 >= v74 + 1)
    {
      if (v73 <= 8) {
        unint64_t v86 = v74 + 1;
      }
      else {
        unint64_t v86 = v74 + 2;
      }
      if (v75 >= v86)
      {
        uint64_t v92 = *(void *)this;
        if (*((unsigned char *)this + 24))
        {
          int v93 = *(unsigned __int8 *)(v92 + v74);
          if (v78 >= v75) {
            int v94 = 0;
          }
          else {
            int v94 = *(unsigned __int8 *)(v92 + v78);
          }
          unsigned int v80 = ((v94 & (0xFFFF << (8 - v73))) >> (8 - v73)) | ((((1 << (8 - v73)) + 255) & v93) << v73);
        }
        else
        {
          LOBYTE(v80) = *(unsigned char *)(v92 + v74);
        }
        goto LABEL_126;
      }
    }
    else
    {
      if (*((unsigned char *)this + 24)) {
        unint64_t v79 = v74 + 1;
      }
      else {
        unint64_t v79 = *((void *)this + 2);
      }
      if (v75 < v79) {
        goto LABEL_113;
      }
      if (*((unsigned char *)this + 24))
      {
        if (v75 >= v78)
        {
          unsigned int v80 = (((1 << (8 - v73)) - 1) & *(unsigned __int8 *)(*(void *)this + v74)) << v73;
LABEL_126:
          *((void *)this + 2) = v76;
          *((unsigned char *)this + 24) = v77;
          *(float *)(a1 + 48) = (float)((float)((float)v80 / 255.0) * 31.875) + 0.0;
          goto LABEL_127;
        }
      }
      else if (v75 >= v78)
      {
        LOBYTE(v80) = *(unsigned char *)(*(void *)this + v74);
        goto LABEL_126;
      }
    }
    *((void *)this + 2) = v76;
    *((unsigned char *)this + 24) = v77;
LABEL_113:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v87 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 35;
      __int16 v700 = 2082;
      v701 = "Could not read min traffic type (unknown) z.";
      _os_log_impl(&dword_1A1780000, v87, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)":", 1);
    long double v89 = (void *)std::ostream::operator<<();
    long double v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Could not read min traffic type (unknown) z.", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"\n", 1);
    return 0;
  }
LABEL_127:
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long double v100 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 37;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (accident) z existing.";
      _os_log_impl(&dword_1A1780000, v100, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)":", 1);
    long double v102 = (void *)std::ostream::operator<<();
    unint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Could not read indication of min traffic type (accident) z existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      __double2 v110 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 39;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (accident) z.";
        _os_log_impl(&dword_1A1780000, v110, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)":", 1);
      long double v112 = (void *)std::ostream::operator<<();
      long double v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"Could not read min traffic type (accident) z.", 45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 52) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v105 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 41;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (construction) z existing.";
      _os_log_impl(&dword_1A1780000, v105, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)":", 1);
    long double v107 = (void *)std::ostream::operator<<();
    double v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Could not read indication of min traffic type (construction) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      double v120 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 43;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (construction) z.";
        _os_log_impl(&dword_1A1780000, v120, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long long v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)":", 1);
      long double v122 = (void *)std::ostream::operator<<();
      unint64_t v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"Could not read min traffic type (construction) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 56) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v115 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 45;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (road closure) z existing.";
      _os_log_impl(&dword_1A1780000, v115, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)":", 1);
    unint64_t v117 = (void *)std::ostream::operator<<();
    unint64_t v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" STYL Parse Error Here: ", 24);
    double v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Could not read indication of min traffic type (road closure) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v130 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 47;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (road closure) z.";
        _os_log_impl(&dword_1A1780000, v130, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      double v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)":", 1);
      __double2 v132 = (void *)std::ostream::operator<<();
      long long v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"Could not read min traffic type (road closure) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 60) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    float64x2_t v125 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 49;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (event) z existing.";
      _os_log_impl(&dword_1A1780000, v125, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    double v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)":", 1);
    unint64_t v127 = (void *)std::ostream::operator<<();
    unint64_t v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Could not read indication of min traffic type (event) z existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v140 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 51;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (event) z.";
        _os_log_impl(&dword_1A1780000, v140, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)":", 1);
      unint64_t v142 = (void *)std::ostream::operator<<();
      double v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)" STYL Parse Error Here: ", 24);
      double v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Could not read min traffic type (event) z.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 64) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v135 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 53;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (hazard) z existing.";
      _os_log_impl(&dword_1A1780000, v135, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)":", 1);
    float64x2_t v137 = (void *)std::ostream::operator<<();
    BOOL v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Could not read indication of min traffic type (hazard) z existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v150 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 55;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (hazard) z.";
        _os_log_impl(&dword_1A1780000, v150, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)":", 1);
      unint64_t v152 = (void *)std::ostream::operator<<();
      unint64_t v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"Could not read min traffic type (hazard) z.", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 68) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long long v145 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 57;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (lane closure) z existing.";
      _os_log_impl(&dword_1A1780000, v145, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    double v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)":", 1);
    unint64_t v147 = (void *)std::ostream::operator<<();
    double v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)" STYL Parse Error Here: ", 24);
    int8x16_t v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"Could not read indication of min traffic type (lane closure) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v160 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 59;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (lane closure) z.";
        _os_log_impl(&dword_1A1780000, v160, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)":", 1);
      double v162 = (void *)std::ostream::operator<<();
      unint64_t v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Could not read min traffic type (lane closure) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 72) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v155 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 61;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (ramp closure) z existing.";
      _os_log_impl(&dword_1A1780000, v155, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    double v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)":", 1);
    long long v157 = (void *)std::ostream::operator<<();
    unint64_t v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Could not read indication of min traffic type (ramp closure) z existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      int v170 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 63;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (ramp closure) z.";
        _os_log_impl(&dword_1A1780000, v170, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)":", 1);
      long double v172 = (void *)std::ostream::operator<<();
      long double v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)" STYL Parse Error Here: ", 24);
      double v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"Could not read min traffic type (ramp closure) z.", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 76) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v165 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 65;
      __int16 v700 = 2082;
      v701 = "Could not read indication of realistic night brightness existing.";
      _os_log_impl(&dword_1A1780000, v165, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)":", 1);
    long double v167 = (void *)std::ostream::operator<<();
    float64x2_t v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"Could not read indication of realistic night brightness existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 0xAu, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v180 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 67;
        __int16 v700 = 2082;
        v701 = "Could not read realistic night brightness.";
        _os_log_impl(&dword_1A1780000, v180, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long long v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)":", 1);
      long double v182 = (void *)std::ostream::operator<<();
      unint64_t v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)" STYL Parse Error Here: ", 24);
      double v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"Could not read realistic night brightness.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 84) = (float)v697 / 1023.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v175 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 69;
      __int16 v700 = 2082;
      v701 = "Could not read indication of shield night brightness existing.";
      _os_log_impl(&dword_1A1780000, v175, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)":", 1);
    unint64_t v177 = (void *)std::ostream::operator<<();
    unint64_t v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" STYL Parse Error Here: ", 24);
    float64x2_t v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"Could not read indication of shield night brightness existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 0xAu, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v190 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 71;
        __int16 v700 = 2082;
        v701 = "Could not read shield night brightness.";
        _os_log_impl(&dword_1A1780000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)":", 1);
      long double v192 = (void *)std::ostream::operator<<();
      long long v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)" STYL Parse Error Here: ", 24);
      double v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"Could not read shield night brightness.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 88) = (float)v697 / 1023.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    __double2 v185 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 73;
      __int16 v700 = 2082;
      v701 = "Could not read indication of realistic shield night brightness existing.";
      _os_log_impl(&dword_1A1780000, v185, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)":", 1);
    unint64_t v187 = (void *)std::ostream::operator<<();
    unint64_t v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read indication of realistic shield night brightness existing.", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 0xAu, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v200 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 75;
        __int16 v700 = 2082;
        v701 = "Could not read realistic shieldnight brightness.";
        _os_log_impl(&dword_1A1780000, v200, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)":", 1);
      unint64_t v202 = (void *)std::ostream::operator<<();
      long double v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)" STYL Parse Error Here: ", 24);
      double v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)"Could not read realistic shieldnight brightness.", 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 92) = (float)v697 / 1023.0;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v195 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 77;
      __int16 v700 = 2082;
      v701 = "Could not read indication of background rasters zoom range existing.";
      _os_log_impl(&dword_1A1780000, v195, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)":", 1);
    long double v197 = (void *)std::ostream::operator<<();
    long double v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Could not read indication of background rasters zoom range existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long long v205 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 79;
        __int16 v700 = 2082;
        v701 = "Could not read background rasters min zoom.";
        _os_log_impl(&dword_1A1780000, v205, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      __double2 v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)":", 1);
      unint64_t v207 = (void *)std::ostream::operator<<();
      long double v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"Could not read background rasters min zoom.", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 96) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v215 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 80;
        __int16 v700 = 2082;
        v701 = "Could not read background rasters max zoom.";
        _os_log_impl(&dword_1A1780000, v215, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      double v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)":", 1);
      long long v217 = (void *)std::ostream::operator<<();
      long double v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)"Could not read background rasters max zoom.", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 100) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 1) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    float64x2_t v210 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 83;
      __int16 v700 = 2082;
      v701 = "Could not read indication of standard rasters zoom range existing.";
      _os_log_impl(&dword_1A1780000, v210, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)":", 1);
    unint64_t v212 = (void *)std::ostream::operator<<();
    unint64_t v213 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)"Could not read indication of standard rasters zoom range existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v220 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 85;
        __int16 v700 = 2082;
        v701 = "Could not read standard rasters min zoom.";
        _os_log_impl(&dword_1A1780000, v220, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      float64x2_t v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)":", 1);
      long double v222 = (void *)std::ostream::operator<<();
      unint64_t v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"Could not read standard rasters min zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 104) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v230 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 86;
        __int16 v700 = 2082;
        v701 = "Could not read standard rasters max zoom.";
        _os_log_impl(&dword_1A1780000, v230, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v231 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, (uint64_t)":", 1);
      double v232 = (void *)std::ostream::operator<<();
      long double v233 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v234 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"Could not read standard rasters max zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 108) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 2) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v225 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 89;
      __int16 v700 = 2082;
      v701 = "Could not read indication of satellite rasters zoom range existing.";
      _os_log_impl(&dword_1A1780000, v225, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)":", 1);
    __double2 v227 = (void *)std::ostream::operator<<();
    long double v228 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, (uint64_t)"Could not read indication of satellite rasters zoom range existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v235 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 91;
        __int16 v700 = 2082;
        v701 = "Could not read satellite rasters min zoom.";
        _os_log_impl(&dword_1A1780000, v235, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v236 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236, (uint64_t)":", 1);
      unint64_t v237 = (void *)std::ostream::operator<<();
      unint64_t v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v237, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v239 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)"Could not read satellite rasters min zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 112) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      int8x16_t v245 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 92;
        __int16 v700 = 2082;
        v701 = "Could not read satellite rasters max zoom.";
        _os_log_impl(&dword_1A1780000, v245, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      double v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)":", 1);
      unint64_t v247 = (void *)std::ostream::operator<<();
      unint64_t v248 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v247, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v248, (uint64_t)"Could not read satellite rasters max zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 116) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 3) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long double v240 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 95;
      __int16 v700 = 2082;
      v701 = "Could not read indication of hybrid rasters zoom range existing.";
      _os_log_impl(&dword_1A1780000, v240, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long long v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)":", 1);
    int8x16_t v242 = (void *)std::ostream::operator<<();
    unint64_t v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)"Could not read indication of hybrid rasters zoom range existing.", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v250 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 97;
        __int16 v700 = 2082;
        v701 = "Could not read hybrid rasters min zoom.";
        _os_log_impl(&dword_1A1780000, v250, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      uint64_t v251 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v251, (uint64_t)":", 1);
      int8x16_t v252 = (void *)std::ostream::operator<<();
      long long v253 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v252, (uint64_t)" STYL Parse Error Here: ", 24);
      int32x4_t v254 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)"Could not read hybrid rasters min zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 120) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v260 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 98;
        __int16 v700 = 2082;
        v701 = "Could not read hybrid rasters max zoom.";
        _os_log_impl(&dword_1A1780000, v260, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v261 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)":", 1);
      unint64_t v262 = (void *)std::ostream::operator<<();
      unint64_t v263 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v264 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, (uint64_t)"Could not read hybrid rasters max zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 124) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 4) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v255 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 101;
      __int16 v700 = 2082;
      v701 = "Could not read indication of ground cover zoom range existing.";
      _os_log_impl(&dword_1A1780000, v255, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)":", 1);
    unint64_t v257 = (void *)std::ostream::operator<<();
    double v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v259 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)"Could not read indication of ground cover zoom range existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long long v265 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 103;
        __int16 v700 = 2082;
        v701 = "Could not read ground cover min zoom.";
        _os_log_impl(&dword_1A1780000, v265, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)":", 1);
      unint64_t v267 = (void *)std::ostream::operator<<();
      double v268 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
      __double2 v269 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not read ground cover min zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 128) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      int v275 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 104;
        __int16 v700 = 2082;
        v701 = "Could not read ground cover max zoom.";
        _os_log_impl(&dword_1A1780000, v275, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)":", 1);
      long long v277 = (void *)std::ostream::operator<<();
      long double v278 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v279 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)"Could not read ground cover max zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 132) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 5) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long double v270 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 107;
      __int16 v700 = 2082;
      v701 = "Could not read indication of raster traffic zoom range existing.";
      _os_log_impl(&dword_1A1780000, v270, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v271 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)":", 1);
    unint64_t v272 = (void *)std::ostream::operator<<();
    unint64_t v273 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v274 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)"Could not read indication of raster traffic zoom range existing.", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      double v280 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 109;
        __int16 v700 = 2082;
        v701 = "Could not read raster traffic min zoom.";
        _os_log_impl(&dword_1A1780000, v280, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      __double2 v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)":", 1);
      long double v282 = (void *)std::ostream::operator<<();
      unint64_t v283 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v284 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"Could not read raster traffic min zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 136) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      double v290 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 110;
        __int16 v700 = 2082;
        v701 = "Could not read raster traffic max zoom.";
        _os_log_impl(&dword_1A1780000, v290, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v291 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)":", 1);
      long double v292 = (void *)std::ostream::operator<<();
      long double v293 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v294 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)"Could not read raster traffic max zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 140) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 6) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v285 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 113;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector polygons zoom range existing.";
      _os_log_impl(&dword_1A1780000, v285, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v286 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)":", 1);
    long double v287 = (void *)std::ostream::operator<<();
    long double v288 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v289 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)"Could not read indication of vector polygons zoom range existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v295 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 115;
        __int16 v700 = 2082;
        v701 = "Could not read vector polygons min zoom.";
        _os_log_impl(&dword_1A1780000, v295, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v296 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)":", 1);
      unint64_t v297 = (void *)std::ostream::operator<<();
      unint64_t v298 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v298, (uint64_t)"Could not read vector polygons min zoom.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 144) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v305 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 116;
        __int16 v700 = 2082;
        v701 = "Could not read vector polygons max zoom.";
        _os_log_impl(&dword_1A1780000, v305, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      float64x2_t v306 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v306, (uint64_t)":", 1);
      unint64_t v307 = (void *)std::ostream::operator<<();
      unint64_t v308 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v309 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)"Could not read vector polygons max zoom.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v309, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 148) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 7) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    double v300 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 119;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector roads zoom range existing.";
      _os_log_impl(&dword_1A1780000, v300, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long long v301 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v301, (uint64_t)":", 1);
    __double2 v302 = (void *)std::ostream::operator<<();
    unint64_t v303 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v302, (uint64_t)" STYL Parse Error Here: ", 24);
    long double v304 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v303, (uint64_t)"Could not read indication of vector roads zoom range existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v310 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 121;
        __int16 v700 = 2082;
        v701 = "Could not read vector roads min zoom.";
        _os_log_impl(&dword_1A1780000, v310, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      uint64_t v311 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v311, (uint64_t)":", 1);
      uint64_t v312 = (void *)std::ostream::operator<<();
      long long v313 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v312, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v314 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v313, (uint64_t)"Could not read vector roads min zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v314, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 152) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v320 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 122;
        __int16 v700 = 2082;
        v701 = "Could not read vector roads max zoom.";
        _os_log_impl(&dword_1A1780000, v320, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v321 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v321, (uint64_t)":", 1);
      unint64_t v322 = (void *)std::ostream::operator<<();
      double v323 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v322, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v324 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v323, (uint64_t)"Could not read vector roads max zoom.", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v324, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 156) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v315 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 125;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector land cover zoom range existing.";
      _os_log_impl(&dword_1A1780000, v315, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    double v316 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v316, (uint64_t)":", 1);
    unint64_t v317 = (void *)std::ostream::operator<<();
    unint64_t v318 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v317, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v319 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v318, (uint64_t)"Could not read indication of vector land cover zoom range existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long long v325 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 127;
        __int16 v700 = 2082;
        v701 = "Could not read vector land cover min zoom.";
        _os_log_impl(&dword_1A1780000, v325, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v326 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)":", 1);
      unint64_t v327 = (void *)std::ostream::operator<<();
      int8x16_t v328 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v327, (uint64_t)" STYL Parse Error Here: ", 24);
      double v329 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v328, (uint64_t)"Could not read vector land cover min zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v329, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 160) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      double v335 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 128;
        __int16 v700 = 2082;
        v701 = "Could not read vector land cover max zoom.";
        _os_log_impl(&dword_1A1780000, v335, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      int8x16_t v336 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v336, (uint64_t)":", 1);
      long long v337 = (void *)std::ostream::operator<<();
      int8x16_t v338 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v337, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v339 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v338, (uint64_t)"Could not read vector land cover max zoom.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v339, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 164) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 9) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v330 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 131;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector buildings zoom range existing.";
      _os_log_impl(&dword_1A1780000, v330, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v331 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v331, (uint64_t)":", 1);
    unint64_t v332 = (void *)std::ostream::operator<<();
    unint64_t v333 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v332, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v334 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v333, (uint64_t)"Could not read indication of vector buildings zoom range existing.", 66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v334, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      int32x4_t v340 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 133;
        __int16 v700 = 2082;
        v701 = "Could not read vector buildings min zoom.";
        _os_log_impl(&dword_1A1780000, v340, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      int8x16_t v341 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v341, (uint64_t)":", 1);
      uint64_t v342 = (void *)std::ostream::operator<<();
      unint64_t v343 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v342, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v344 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v343, (uint64_t)"Could not read vector buildings min zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v344, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 168) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      double v350 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 134;
        __int16 v700 = 2082;
        v701 = "Could not read vector buildings max zoom.";
        _os_log_impl(&dword_1A1780000, v350, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v351 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v351, (uint64_t)":", 1);
      long double v352 = (void *)std::ostream::operator<<();
      long double v353 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v352, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v354 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v353, (uint64_t)"Could not read vector buildings max zoom.", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v354, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 172) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 10) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v345 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 137;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector PoIs zoom range existing.";
      _os_log_impl(&dword_1A1780000, v345, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v346 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v346, (uint64_t)":", 1);
    long double v347 = (void *)std::ostream::operator<<();
    long double v348 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v347, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v349 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v348, (uint64_t)"Could not read indication of vector PoIs zoom range existing.", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v349, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v355 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 139;
        __int16 v700 = 2082;
        v701 = "Could not read vector PoIs min zoom.";
        _os_log_impl(&dword_1A1780000, v355, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v356 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v356, (uint64_t)":", 1);
      unint64_t v357 = (void *)std::ostream::operator<<();
      unint64_t v358 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v357, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v359 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v358, (uint64_t)"Could not read vector PoIs min zoom.", 36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v359, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 176) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v365 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 140;
        __int16 v700 = 2082;
        v701 = "Could not read vector PoIs max zoom.";
        _os_log_impl(&dword_1A1780000, v365, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v366 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v366, (uint64_t)":", 1);
      unint64_t v367 = (void *)std::ostream::operator<<();
      unint64_t v368 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v367, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v368, (uint64_t)"Could not read vector PoIs max zoom.", 36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 180) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 11) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long double v360 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 143;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector traffic zoom range existing.";
      _os_log_impl(&dword_1A1780000, v360, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long long v361 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v361, (uint64_t)":", 1);
    double v362 = (void *)std::ostream::operator<<();
    unint64_t v363 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v362, (uint64_t)" STYL Parse Error Here: ", 24);
    long double v364 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v363, (uint64_t)"Could not read indication of vector traffic zoom range existing.", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v364, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v370 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 145;
        __int16 v700 = 2082;
        v701 = "Could not read vector traffic min zoom.";
        _os_log_impl(&dword_1A1780000, v370, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      goto LABEL_632;
    }
    *(float *)(a1 + 184) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v380 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 146;
        __int16 v700 = 2082;
        v701 = "Could not read vector traffic max zoom.";
        _os_log_impl(&dword_1A1780000, v380, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
LABEL_642:
      unint64_t v381 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v381, (uint64_t)":", 1);
      unint64_t v382 = (void *)std::ostream::operator<<();
      double v383 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)" STYL Parse Error Here: ", 24);
      __double2 v384 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v383, (uint64_t)"Could not read vector traffic max zoom.", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v384, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 188) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 12) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v375 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 149;
      __int16 v700 = 2082;
      v701 = "Could not read indication of tile limit satellite scale existing.";
      _os_log_impl(&dword_1A1780000, v375, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v376 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v376, (uint64_t)":", 1);
    float64x2_t v377 = (void *)std::ostream::operator<<();
    double v378 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v377, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v379 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v378, (uint64_t)"Could not read indication of tile limit satellite scale existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      uint64_t v390 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 151;
        __int16 v700 = 2082;
        v701 = "Could not read tile limit satellite scale.";
        _os_log_impl(&dword_1A1780000, v390, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v391 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v391, (uint64_t)":", 1);
      unint64_t v392 = (void *)std::ostream::operator<<();
      unint64_t v393 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v392, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v394 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v393, (uint64_t)"Could not read tile limit satellite scale.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v394, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 200) = v694;
    *(unsigned char *)(a1 + 14) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long long v385 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 154;
      __int16 v700 = 2082;
      v701 = "Could not read indication of global LoD scale existing.";
      _os_log_impl(&dword_1A1780000, v385, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v386 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)":", 1);
    unint64_t v387 = (void *)std::ostream::operator<<();
    float64x2_t v388 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v387, (uint64_t)" STYL Parse Error Here: ", 24);
    int8x16_t v389 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v388, (uint64_t)"Could not read indication of global LoD scale existing.", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v389, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      double v400 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 156;
        __int16 v700 = 2082;
        v701 = "Could not read global LoD scale.";
        _os_log_impl(&dword_1A1780000, v400, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v401 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v401, (uint64_t)":", 1);
      int16x8_t v402 = (void *)std::ostream::operator<<();
      unint64_t v403 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v402, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v404 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v403, (uint64_t)"Could not read global LoD scale.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v404, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 204) = v694;
    *(unsigned char *)(a1 + 15) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v395 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 159;
      __int16 v700 = 2082;
      v701 = "Could not read indication of LoD offset existing.";
      _os_log_impl(&dword_1A1780000, v395, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long long v396 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v396, (uint64_t)":", 1);
    long long v397 = (void *)std::ostream::operator<<();
    double v398 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v397, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v399 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v398, (uint64_t)"Could not read indication of LoD offset existing.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v399, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      int8x16_t v410 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 161;
        __int16 v700 = 2082;
        v701 = "Could not read LoD offset.";
        _os_log_impl(&dword_1A1780000, v410, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v411 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v411, (uint64_t)":", 1);
      double v412 = (void *)std::ostream::operator<<();
      uint64_t v413 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v412, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v414 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v413, (uint64_t)"Could not read LoD offset.", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v414, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 208) = v694;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v405 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 163;
      __int16 v700 = 2082;
      v701 = "Could not read indication of label icon scale existing.";
      _os_log_impl(&dword_1A1780000, v405, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v406 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v406, (uint64_t)":", 1);
    int32x4_t v407 = (void *)std::ostream::operator<<();
    unint64_t v408 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v407, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v409 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v408, (uint64_t)"Could not read indication of label icon scale existing.", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v409, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v420 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 165;
        __int16 v700 = 2082;
        v701 = "Could not read label icon scale.";
        _os_log_impl(&dword_1A1780000, v420, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long long v421 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v421, (uint64_t)":", 1);
      double v422 = (void *)std::ostream::operator<<();
      unint64_t v423 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v422, (uint64_t)" STYL Parse Error Here: ", 24);
      __double2 v424 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v423, (uint64_t)"Could not read label icon scale.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v424, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 216) = v694;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v415 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 167;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label road sign height existing.";
      _os_log_impl(&dword_1A1780000, v415, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v416 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v416, (uint64_t)":", 1);
    unint64_t v417 = (void *)std::ostream::operator<<();
    unint64_t v418 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v417, (uint64_t)" STYL Parse Error Here: ", 24);
    long double v419 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v418, (uint64_t)"Could not read indication of nav label road sign height existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v419, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v430 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 169;
        __int16 v700 = 2082;
        v701 = "Could not read nav label road sign height.";
        _os_log_impl(&dword_1A1780000, v430, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v431 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v431, (uint64_t)":", 1);
      long double v432 = (void *)std::ostream::operator<<();
      long long v433 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v432, (uint64_t)" STYL Parse Error Here: ", 24);
      double v434 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v433, (uint64_t)"Could not read nav label road sign height.", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v434, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 220) = v694;
    *(unsigned char *)(a1 + 16) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long double v425 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 172;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (small) existing.";
      _os_log_impl(&dword_1A1780000, v425, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v426 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v426, (uint64_t)":", 1);
    unint64_t v427 = (void *)std::ostream::operator<<();
    unint64_t v428 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v427, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v429 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v428, (uint64_t)"Could not read indication of nav label road sign height (small) existing.", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v429, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v440 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 174;
        __int16 v700 = 2082;
        v701 = "Could not read nav label road sign height (small).";
        _os_log_impl(&dword_1A1780000, v440, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v441 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v441, (uint64_t)":", 1);
      unint64_t v442 = (void *)std::ostream::operator<<();
      long double v443 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v442, (uint64_t)" STYL Parse Error Here: ", 24);
      double v444 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v443, (uint64_t)"Could not read nav label road sign height (small).", 50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v444, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 224) = v694;
    *(unsigned char *)(a1 + 17) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v435 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 177;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (medium) existing.";
      _os_log_impl(&dword_1A1780000, v435, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    __double2 v436 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v436, (uint64_t)":", 1);
    long double v437 = (void *)std::ostream::operator<<();
    long double v438 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v437, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v439 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v438, (uint64_t)"Could not read indication of nav label road sign height (medium) existing.", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v439, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      float64x2_t v450 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 179;
        __int16 v700 = 2082;
        v701 = "Could not read nav label road sign height (medium).";
        _os_log_impl(&dword_1A1780000, v450, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v451 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v451, (uint64_t)":", 1);
      unint64_t v452 = (void *)std::ostream::operator<<();
      unint64_t v453 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v452, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v454 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v453, (uint64_t)"Could not read nav label road sign height (medium).", 51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v454, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 228) = v694;
    *(unsigned char *)(a1 + 18) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long long v445 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 182;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (large) existing.";
      _os_log_impl(&dword_1A1780000, v445, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    __double2 v446 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v446, (uint64_t)":", 1);
    unint64_t v447 = (void *)std::ostream::operator<<();
    long double v448 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v447, (uint64_t)" STYL Parse Error Here: ", 24);
    long double v449 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v448, (uint64_t)"Could not read indication of nav label road sign height (large) existing.", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v449, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v460 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 184;
        __int16 v700 = 2082;
        v701 = "Could not read nav label road sign height (large).";
        _os_log_impl(&dword_1A1780000, v460, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      float64x2_t v461 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v461, (uint64_t)":", 1);
      double v462 = (void *)std::ostream::operator<<();
      unint64_t v463 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v462, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v464 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v463, (uint64_t)"Could not read nav label road sign height (large).", 50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v464, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 232) = v694;
    *(unsigned char *)(a1 + 19) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    double v455 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 187;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (extra large) existing.";
      _os_log_impl(&dword_1A1780000, v455, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    double v456 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v456, (uint64_t)":", 1);
    long long v457 = (void *)std::ostream::operator<<();
    long double v458 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v457, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v459 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v458, (uint64_t)"Could not read indication of nav label road sign height (extra large) existing.", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v459, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      v470 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 189;
        __int16 v700 = 2082;
        v701 = "Could not read nav label road sign height (extra large).";
        _os_log_impl(&dword_1A1780000, v470, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v471 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v471, (uint64_t)":", 1);
      double v472 = (void *)std::ostream::operator<<();
      double v473 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v472, (uint64_t)" STYL Parse Error Here: ", 24);
      double v474 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v473, (uint64_t)"Could not read nav label road sign height (extra large).", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v474, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 236) = v694;
    *(unsigned char *)(a1 + 20) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v465 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 192;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label road sign height (extra extra large) existing.";
      _os_log_impl(&dword_1A1780000, v465, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v466 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v466, (uint64_t)":", 1);
    uint64_t v467 = (void *)std::ostream::operator<<();
    int64_t v468 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v469 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v468, (uint64_t)"Could not read indication of nav label road sign height (extra extra large) existing.", 85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v469, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long double v480 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 194;
        __int16 v700 = 2082;
        v701 = "Could not read nav label road sign height (extra extra large).";
        _os_log_impl(&dword_1A1780000, v480, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long long v481 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v481, (uint64_t)":", 1);
      long double v482 = (void *)std::ostream::operator<<();
      unint64_t v483 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v482, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v484 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v483, (uint64_t)"Could not read nav label road sign height (extra extra large).", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v484, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 240) = v694;
    *(unsigned char *)(a1 + 21) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v475 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 197;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav label max road signs existing.";
      _os_log_impl(&dword_1A1780000, v475, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v476 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v476, (uint64_t)":", 1);
    unint64_t v477 = (void *)std::ostream::operator<<();
    unint64_t v478 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v477, (uint64_t)" STYL Parse Error Here: ", 24);
    long double v479 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v478, (uint64_t)"Could not read indication of nav label max road signs existing.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v479, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readVarInt((uint64_t)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v490 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 199;
        __int16 v700 = 2082;
        v701 = "Could not read nav label max road signs.";
        _os_log_impl(&dword_1A1780000, v490, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      long double v491 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v491, (uint64_t)":", 1);
      long double v492 = (void *)std::ostream::operator<<();
      long long v493 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v492, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v494 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v493, (uint64_t)"Could not read nav label max road signs.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v494, (uint64_t)"\n", 1);
      return 0;
    }
    *(void *)(a1 + 248) = v695;
    *(unsigned char *)(a1 + 22) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long double v485 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 203;
      __int16 v700 = 2082;
      v701 = "Could not read label disable alternate text positions.";
      _os_log_impl(&dword_1A1780000, v485, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v486 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v486, (uint64_t)":", 1);
    unint64_t v487 = (void *)std::ostream::operator<<();
    unint64_t v488 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v487, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v489 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v488, (uint64_t)"Could not read label disable alternate text positions.", 54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v489, (uint64_t)"\n", 1);
    return 0;
  }
  *(unsigned char *)(a1 + 256) = v694 != 0;
  if (*(_DWORD *)(a3 + 8) < 2u) {
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v495 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 207;
      __int16 v700 = 2082;
      v701 = "Could not read indication of min traffic type (traffic) z existing.";
      _os_log_impl(&dword_1A1780000, v495, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long double v496 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v496, (uint64_t)":", 1);
    long double v497 = (void *)std::ostream::operator<<();
    long double v498 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v497, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v499 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v498, (uint64_t)"Could not read indication of min traffic type (traffic) z existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v499, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v500 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 209;
        __int16 v700 = 2082;
        v701 = "Could not read min traffic type (traffic) z.";
        _os_log_impl(&dword_1A1780000, v500, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v501 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v501, (uint64_t)":", 1);
      unint64_t v502 = (void *)std::ostream::operator<<();
      long double v503 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v502, (uint64_t)" STYL Parse Error Here: ", 24);
      long double v504 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v503, (uint64_t)"Could not read min traffic type (traffic) z.", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v504, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 80) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
  }
  if (*(_DWORD *)(a3 + 8) < 4u) {
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long long v505 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 214;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (immediate) existing.";
      _os_log_impl(&dword_1A1780000, v505, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    float64x2_t v506 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v506, (uint64_t)":", 1);
    unint64_t v507 = (void *)std::ostream::operator<<();
    float64x2_t v508 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v507, (uint64_t)" STYL Parse Error Here: ", 24);
    float64x2_t v509 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v508, (uint64_t)"Could not read indication of maneuver distance (immediate) existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v509, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      v515 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 216;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (immediate).";
        _os_log_impl(&dword_1A1780000, v515, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v516 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v516, (uint64_t)":", 1);
      long long v517 = (void *)std::ostream::operator<<();
      v518 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v517, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v519 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v518, (uint64_t)"Could not read maneuver distance (immediate).", 45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v519, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 260) = v694;
    *(unsigned char *)(a1 + 23) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    float64x2_t v510 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 220;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (extremely near) existing.";
      _os_log_impl(&dword_1A1780000, v510, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v511 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)":", 1);
    unint64_t v512 = (void *)std::ostream::operator<<();
    unint64_t v513 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v512, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v514 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v513, (uint64_t)"Could not read indication of maneuver distance (extremely near) existing.", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v514, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v525 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 222;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (extremely near).";
        _os_log_impl(&dword_1A1780000, v525, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v526 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v526, (uint64_t)":", 1);
      uint64_t v527 = (void *)std::ostream::operator<<();
      unint64_t v528 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v527, (uint64_t)" STYL Parse Error Here: ", 24);
      long long v529 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v528, (uint64_t)"Could not read maneuver distance (extremely near).", 50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v529, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 264) = v694;
    *(unsigned char *)(a1 + 24) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    v520 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 226;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (very near) existing.";
      _os_log_impl(&dword_1A1780000, v520, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v521 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v521, (uint64_t)":", 1);
    v522 = (void *)std::ostream::operator<<();
    unint64_t v523 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v522, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v524 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v523, (uint64_t)"Could not read indication of maneuver distance (very near) existing.", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v524, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v535 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 228;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (very near).";
        _os_log_impl(&dword_1A1780000, v535, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v536 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v536, (uint64_t)":", 1);
      unint64_t v537 = (void *)std::ostream::operator<<();
      unint64_t v538 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v537, (uint64_t)" STYL Parse Error Here: ", 24);
      v539 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v538, (uint64_t)"Could not read maneuver distance (very near).", 45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v539, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 268) = v694;
    *(unsigned char *)(a1 + 25) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    uint64_t v530 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 232;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (near) existing.";
      _os_log_impl(&dword_1A1780000, v530, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v531 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v531, (uint64_t)":", 1);
    long long v532 = (void *)std::ostream::operator<<();
    uint64_t v533 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v532, (uint64_t)" STYL Parse Error Here: ", 24);
    v534 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v533, (uint64_t)"Could not read indication of maneuver distance (near) existing.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v534, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      v545 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 234;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (near).";
        _os_log_impl(&dword_1A1780000, v545, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v546 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v546, (uint64_t)":", 1);
      unint64_t v547 = (void *)std::ostream::operator<<();
      unint64_t v548 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v547, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v549 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v548, (uint64_t)"Could not read maneuver distance (near).", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v549, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 272) = v694;
    *(unsigned char *)(a1 + 26) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    uint64_t v540 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 238;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (medium) existing.";
      _os_log_impl(&dword_1A1780000, v540, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long long v541 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v541, (uint64_t)":", 1);
    uint64_t v542 = (void *)std::ostream::operator<<();
    unint64_t v543 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v542, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v544 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v543, (uint64_t)"Could not read indication of maneuver distance (medium) existing.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v544, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v555 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 240;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (medium).";
        _os_log_impl(&dword_1A1780000, v555, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      __int16 v556 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v556, (uint64_t)":", 1);
      v557 = (void *)std::ostream::operator<<();
      v558 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v557, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v559 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v558, (uint64_t)"Could not read maneuver distance (medium).", 42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v559, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 276) = v694;
    *(unsigned char *)(a1 + 27) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v550 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 244;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (far) existing.";
      _os_log_impl(&dword_1A1780000, v550, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    __int16 v551 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v551, (uint64_t)":", 1);
    __int16 v552 = (void *)std::ostream::operator<<();
    long long v553 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v552, (uint64_t)" STYL Parse Error Here: ", 24);
    __int16 v554 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v553, (uint64_t)"Could not read indication of maneuver distance (far) existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v554, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      long long v565 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 246;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (far).";
        _os_log_impl(&dword_1A1780000, v565, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      uint64_t v566 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v566, (uint64_t)":", 1);
      unint64_t v567 = (void *)std::ostream::operator<<();
      uint64_t v568 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v567, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v569 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v568, (uint64_t)"Could not read maneuver distance (far).", 39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v569, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 280) = v694;
    *(unsigned char *)(a1 + 28) = 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v560 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 250;
      __int16 v700 = 2082;
      v701 = "Could not read indication of maneuver distance (very far) existing.";
      _os_log_impl(&dword_1A1780000, v560, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v561 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v561, (uint64_t)":", 1);
    unint64_t v562 = (void *)std::ostream::operator<<();
    v563 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v562, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v564 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v563, (uint64_t)"Could not read indication of maneuver distance (very far) existing.", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v564, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
    if (!v692)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      __int16 v570 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 252;
        __int16 v700 = 2082;
        v701 = "Could not read maneuver distance (very far).";
        _os_log_impl(&dword_1A1780000, v570, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v571 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v571, (uint64_t)":", 1);
      unint64_t v572 = (void *)std::ostream::operator<<();
      unint64_t v573 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v572, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v574 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v573, (uint64_t)"Could not read maneuver distance (very far).", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v574, (uint64_t)"\n", 1);
      return 0;
    }
    *(_DWORD *)(a1 + 284) = v694;
    *(unsigned char *)(a1 + 29) = 1;
  }
  if (*(_DWORD *)(a3 + 8) < 5u) {
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    long long v575 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 258;
      __int16 v700 = 2082;
      v701 = "Could not read indication of nav map zoom level transition z existing.";
      _os_log_impl(&dword_1A1780000, v575, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    uint64_t v576 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v576, (uint64_t)":", 1);
    long long v577 = (void *)std::ostream::operator<<();
    v578 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v577, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v579 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v578, (uint64_t)"Could not read indication of nav map zoom level transition z existing.", 70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v579, (uint64_t)"\n", 1);
    return 0;
  }
  if (v694)
  {
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (!buf[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      v580 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
        __int16 v698 = 1024;
        int v699 = 260;
        __int16 v700 = 2082;
        v701 = "Could not read nav map zoom level transition z.";
        _os_log_impl(&dword_1A1780000, v580, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      uint64_t v581 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v581, (uint64_t)":", 1);
      v582 = (void *)std::ostream::operator<<();
      unint64_t v583 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v582, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v584 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v583, (uint64_t)"Could not read nav map zoom level transition z.", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v584, (uint64_t)"\n", 1);
      return 0;
    }
    *(float *)(a1 + 288) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    *(unsigned char *)(a1 + 30) = 1;
  }
  if (*(_DWORD *)(a3 + 8) < 6u) {
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v585 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 267;
      __int16 v700 = 2082;
      v701 = "Could not read suppress oppositie carriageway signs.";
      _os_log_impl(&dword_1A1780000, v585, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v586 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v586, (uint64_t)":", 1);
    uint64_t v587 = (void *)std::ostream::operator<<();
    v588 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v587, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v589 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v588, (uint64_t)"Could not read suppress oppositie carriageway signs.", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v589, (uint64_t)"\n", 1);
    return 0;
  }
  *(unsigned char *)(a1 + 257) = v694 != 0;
  if (*(_DWORD *)(a3 + 8) < 7u) {
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
  if (!v692)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    v590 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 272;
      __int16 v700 = 2082;
      v701 = "Could not read indication of vector venue zoom range existing.";
      _os_log_impl(&dword_1A1780000, v590, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v591 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v591, (uint64_t)":", 1);
    v592 = (void *)std::ostream::operator<<();
    uint64_t v593 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v592, (uint64_t)" STYL Parse Error Here: ", 24);
    v594 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v593, (uint64_t)"Could not read indication of vector venue zoom range existing.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)"\n", 1);
    return 0;
  }
  if (!v694)
  {
LABEL_319:
    if (*(_DWORD *)(a3 + 8) >= 8u)
    {
      geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
      if (!v692)
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        }
        unint64_t v597 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
          __int16 v698 = 1024;
          int v699 = 281;
          __int16 v700 = 2082;
          v701 = "Could not read building shadow color existing.";
          _os_log_impl(&dword_1A1780000, v597, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        unint64_t v598 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v598, (uint64_t)":", 1);
        uint64_t v599 = (void *)std::ostream::operator<<();
        v600 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v599, (uint64_t)" STYL Parse Error Here: ", 24);
        long long v601 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v600, (uint64_t)"Could not read building shadow color existing.", 46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v601, (uint64_t)"\n", 1);
        return 0;
      }
      if (v694)
      {
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          }
          v602 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            __int16 v698 = 1024;
            int v699 = 284;
            __int16 v700 = 2082;
            v701 = "Could not read building shadow red";
            _os_log_impl(&dword_1A1780000, v602, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          unint64_t v603 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v603, (uint64_t)":", 1);
          v604 = (void *)std::ostream::operator<<();
          uint64_t v605 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v604, (uint64_t)" STYL Parse Error Here: ", 24);
          v606 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v605, (uint64_t)"Could not read building shadow red", 34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v606, (uint64_t)"\n", 1);
          return 0;
        }
        unsigned int v95 = v693;
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          }
          unint64_t v607 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            __int16 v698 = 1024;
            int v699 = 285;
            __int16 v700 = 2082;
            v701 = "Could not read building shadow green";
            _os_log_impl(&dword_1A1780000, v607, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          unint64_t v608 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v608, (uint64_t)":", 1);
          unint64_t v609 = (void *)std::ostream::operator<<();
          unint64_t v610 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v609, (uint64_t)" STYL Parse Error Here: ", 24);
          uint64_t v611 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v610, (uint64_t)"Could not read building shadow green", 36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v611, (uint64_t)"\n", 1);
          return 0;
        }
        unsigned int v96 = v693;
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          }
          v612 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            __int16 v698 = 1024;
            int v699 = 286;
            __int16 v700 = 2082;
            v701 = "Could not read building shadow blue";
            _os_log_impl(&dword_1A1780000, v612, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          long long v613 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v613, (uint64_t)":", 1);
          v614 = (void *)std::ostream::operator<<();
          unint64_t v615 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v614, (uint64_t)" STYL Parse Error Here: ", 24);
          v616 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v615, (uint64_t)"Could not read building shadow blue", 35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v616, (uint64_t)"\n", 1);
          return 0;
        }
        unsigned int v97 = v693;
        geo::ibitstream::readByte((uint64_t)this, &v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          }
          uint64_t v617 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            __int16 v698 = 1024;
            int v699 = 287;
            __int16 v700 = 2082;
            v701 = "Could not read building shadow alpha";
            _os_log_impl(&dword_1A1780000, v617, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v618 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v618, (uint64_t)":", 1);
          unint64_t v619 = (void *)std::ostream::operator<<();
          unint64_t v620 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v619, (uint64_t)" STYL Parse Error Here: ", 24);
          unint64_t v621 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v620, (uint64_t)"Could not read building shadow alpha", 36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v621, (uint64_t)"\n", 1);
          return 0;
        }
        LOBYTE(v98) = v693;
        *(float *)(a1 + 300) = (float)v95 / 255.0;
        *(float *)(a1 + 304) = (float)v96 / 255.0;
        *(float *)(a1 + 308) = (float)v97 / 255.0;
        *(float *)(a1 + 312) = (float)v98 / 255.0;
      }
      if (*(_DWORD *)(a3 + 8) >= 9u)
      {
        geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
        if (!v692)
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          }
          unint64_t v622 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
            __int16 v698 = 1024;
            int v699 = 293;
            __int16 v700 = 2082;
            v701 = "Could not read venue dimming factor existing.";
            _os_log_impl(&dword_1A1780000, v622, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          uint64_t v623 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v623, (uint64_t)":", 1);
          v624 = (void *)std::ostream::operator<<();
          long long v625 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v624, (uint64_t)" STYL Parse Error Here: ", 24);
          char v626 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v625, (uint64_t)"Could not read venue dimming factor existing.", 45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v626, (uint64_t)"\n", 1);
          return 0;
        }
        if (v694)
        {
          geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
          if (!buf[0])
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            }
            unint64_t v627 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
              __int16 v698 = 1024;
              int v699 = 295;
              __int16 v700 = 2082;
              v701 = "Could not read venue dimming factor";
              _os_log_impl(&dword_1A1780000, v627, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            int v628 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v628, (uint64_t)":", 1);
            v629 = (void *)std::ostream::operator<<();
            uint64_t v630 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v629, (uint64_t)" STYL Parse Error Here: ", 24);
            unint64_t v631 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v630, (uint64_t)"Could not read venue dimming factor", 35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v631, (uint64_t)"\n", 1);
            return 0;
          }
          *(float *)(a1 + 316) = (float)v697 / 255.0;
        }
        if (*(_DWORD *)(a3 + 8) >= 0xBu)
        {
          geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
          if (!v692)
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            }
            unint64_t v632 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
              __int16 v698 = 1024;
              int v699 = 300;
              __int16 v700 = 2082;
              v701 = "Could not read value standard map zoom level transition z existing.";
              _os_log_impl(&dword_1A1780000, v632, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            unint64_t v633 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v633, (uint64_t)":", 1);
            unint64_t v634 = (void *)std::ostream::operator<<();
            v635 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v634, (uint64_t)" STYL Parse Error Here: ", 24);
            v636 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v635, (uint64_t)"Could not read value standard map zoom level transition z existing.", 67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v636, (uint64_t)"\n", 1);
            return 0;
          }
          if (v694)
          {
            geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
            if (!buf[0])
            {
              if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
              }
              long long v637 = GEOGetGeoCSSStyleSheetLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                __int16 v698 = 1024;
                int v699 = 302;
                __int16 v700 = 2082;
                v701 = "Could not read standard map zoom level transition z.";
                _os_log_impl(&dword_1A1780000, v637, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }
              v638 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v638, (uint64_t)":", 1);
              v639 = (void *)std::ostream::operator<<();
              v640 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v639, (uint64_t)" STYL Parse Error Here: ", 24);
              v641 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v640, (uint64_t)"Could not read standard map zoom level transition z.", 52);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v641, (uint64_t)"\n", 1);
              return 0;
            }
            *(float *)(a1 + 292) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
            *(unsigned char *)(a1 + 31) = 1;
          }
          if (*(_DWORD *)(a3 + 8) >= 0xBu)
          {
            geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
            if (!v692)
            {
              if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
              }
              v642 = GEOGetGeoCSSStyleSheetLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                __int16 v698 = 1024;
                int v699 = 309;
                __int16 v700 = 2082;
                v701 = "Could not read value force 3d buildings";
                _os_log_impl(&dword_1A1780000, v642, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }
              v643 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v643, (uint64_t)":", 1);
              v644 = (void *)std::ostream::operator<<();
              v645 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v644, (uint64_t)" STYL Parse Error Here: ", 24);
              v646 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v645, (uint64_t)"Could not read value force 3d buildings", 39);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v646, (uint64_t)"\n", 1);
              return 0;
            }
            *(unsigned char *)(a1 + 296) = v694 != 0;
            if (*(_DWORD *)(a3 + 8) >= 0xCu)
            {
              geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
              if (!v692)
              {
                if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                  dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                }
                v647 = GEOGetGeoCSSStyleSheetLog_log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                  __int16 v698 = 1024;
                  int v699 = 315;
                  __int16 v700 = 2082;
                  v701 = "Could not read value round buildings";
                  _os_log_impl(&dword_1A1780000, v647, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }
                v648 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v648, (uint64_t)":", 1);
                v649 = (void *)std::ostream::operator<<();
                v650 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v649, (uint64_t)" STYL Parse Error Here: ", 24);
                v651 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v650, (uint64_t)"Could not read value round buildings", 36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v651, (uint64_t)"\n", 1);
                return 0;
              }
              *(unsigned char *)(a1 + 297) = v694 != 0;
              if (*(_DWORD *)(a3 + 8) >= 0xEu)
              {
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  }
                  v652 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    __int16 v698 = 1024;
                    int v699 = 320;
                    __int16 v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (straight) existing.";
                    _os_log_impl(&dword_1A1780000, v652, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v653 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v653, (uint64_t)":", 1);
                  v654 = (void *)std::ostream::operator<<();
                  v655 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v654, (uint64_t)" STYL Parse Error Here: ", 24);
                  v656 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v655, (uint64_t)"Could not read indication of route sinuosity (straight) existing.", 65);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v656, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (!v692)
                  {
                    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                    }
                    v657 = GEOGetGeoCSSStyleSheetLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                      __int16 v698 = 1024;
                      int v699 = 322;
                      __int16 v700 = 2082;
                      v701 = "Could not read route sinuosity (straight).";
                      _os_log_impl(&dword_1A1780000, v657, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }
                    v658 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v658, (uint64_t)":", 1);
                    v659 = (void *)std::ostream::operator<<();
                    v660 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v659, (uint64_t)" STYL Parse Error Here: ", 24);
                    v661 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v660, (uint64_t)"Could not read route sinuosity (straight).", 42);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v661, (uint64_t)"\n", 1);
                    return 0;
                  }
                  *(_DWORD *)(a1 + 320) = v694;
                  *(unsigned char *)(a1 + 32) = 1;
                }
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  }
                  v662 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    __int16 v698 = 1024;
                    int v699 = 326;
                    __int16 v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (low) existing.";
                    _os_log_impl(&dword_1A1780000, v662, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v663 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v663, (uint64_t)":", 1);
                  v664 = (void *)std::ostream::operator<<();
                  v665 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v664, (uint64_t)" STYL Parse Error Here: ", 24);
                  v666 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v665, (uint64_t)"Could not read indication of route sinuosity (low) existing.", 60);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v666, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (!v692)
                  {
                    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                    }
                    v667 = GEOGetGeoCSSStyleSheetLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                      __int16 v698 = 1024;
                      int v699 = 328;
                      __int16 v700 = 2082;
                      v701 = "Could not read route sinuosity (low).";
                      _os_log_impl(&dword_1A1780000, v667, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }
                    v668 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v668, (uint64_t)":", 1);
                    v669 = (void *)std::ostream::operator<<();
                    v670 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v669, (uint64_t)" STYL Parse Error Here: ", 24);
                    v671 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v670, (uint64_t)"Could not read route sinuosity (low).", 37);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v671, (uint64_t)"\n", 1);
                    return 0;
                  }
                  *(_DWORD *)(a1 + 324) = v694;
                  *(unsigned char *)(a1 + 33) = 1;
                }
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  }
                  v672 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    __int16 v698 = 1024;
                    int v699 = 332;
                    __int16 v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (medium) existing.";
                    _os_log_impl(&dword_1A1780000, v672, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v673 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v673, (uint64_t)":", 1);
                  v674 = (void *)std::ostream::operator<<();
                  v675 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v674, (uint64_t)" STYL Parse Error Here: ", 24);
                  v676 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v675, (uint64_t)"Could not read indication of route sinuosity (medium) existing.", 63);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v676, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (!v692)
                  {
                    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                    }
                    v677 = GEOGetGeoCSSStyleSheetLog_log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                      __int16 v698 = 1024;
                      int v699 = 334;
                      __int16 v700 = 2082;
                      v701 = "Could not read route sinuosity (medium).";
                      _os_log_impl(&dword_1A1780000, v677, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                    }
                    v678 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v678, (uint64_t)":", 1);
                    v679 = (void *)std::ostream::operator<<();
                    v680 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v679, (uint64_t)" STYL Parse Error Here: ", 24);
                    v681 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v680, (uint64_t)"Could not read route sinuosity (medium).", 40);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v681, (uint64_t)"\n", 1);
                    return 0;
                  }
                  *(_DWORD *)(a1 + 328) = v694;
                  *(unsigned char *)(a1 + 34) = 1;
                }
                geo::ibitstream::readUIntBits((uint64_t)this, 1u, (uint64_t)&v692);
                if (!v692)
                {
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  }
                  v682 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    __int16 v698 = 1024;
                    int v699 = 338;
                    __int16 v700 = 2082;
                    v701 = "Could not read indication of route sinuosity (high) existing.";
                    _os_log_impl(&dword_1A1780000, v682, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v683 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v683, (uint64_t)":", 1);
                  v684 = (void *)std::ostream::operator<<();
                  v685 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v684, (uint64_t)" STYL Parse Error Here: ", 24);
                  v686 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v685, (uint64_t)"Could not read indication of route sinuosity (high) existing.", 61);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v686, (uint64_t)"\n", 1);
                  return 0;
                }
                if (v694)
                {
                  geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v692);
                  if (v692)
                  {
                    *(_DWORD *)(a1 + 332) = v694;
                    uint64_t result = 1;
                    *(unsigned char *)(a1 + 35) = 1;
                    return result;
                  }
                  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
                    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
                  }
                  v687 = GEOGetGeoCSSStyleSheetLog_log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
                    __int16 v698 = 1024;
                    int v699 = 340;
                    __int16 v700 = 2082;
                    v701 = "Could not read route sinuosity (high).";
                    _os_log_impl(&dword_1A1780000, v687, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                  }
                  v688 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v688, (uint64_t)":", 1);
                  v689 = (void *)std::ostream::operator<<();
                  v690 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v689, (uint64_t)" STYL Parse Error Here: ", 24);
                  v691 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v690, (uint64_t)"Could not read route sinuosity (high).", 38);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v691, (uint64_t)"\n", 1);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
  if (buf[0])
  {
    *(float *)(a1 + 192) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
    geo::ibitstream::readUIntBits((uint64_t)this, 8u, (uint64_t)buf);
    if (buf[0])
    {
      *(float *)(a1 + 196) = (float)((float)((float)v697 / 255.0) * 31.875) + 0.0;
      *(unsigned char *)(a1 + 13) = 1;
      goto LABEL_319;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v596 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
      __int16 v698 = 1024;
      int v699 = 275;
      __int16 v700 = 2082;
      v701 = "Could not read vector traffic max zoom.";
      _os_log_impl(&dword_1A1780000, v596, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    goto LABEL_642;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  }
  unint64_t v595 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v697 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp";
    __int16 v698 = 1024;
    int v699 = 274;
    __int16 v700 = 2082;
    v701 = "Could not read vector traffic min zoom.";
    _os_log_impl(&dword_1A1780000, v595, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
LABEL_632:
  double v371 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/GlobalProperties.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v371, (uint64_t)":", 1);
  double v372 = (void *)std::ostream::operator<<();
  long long v373 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v372, (uint64_t)" STYL Parse Error Here: ", 24);
  long double v374 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v373, (uint64_t)"Could not read vector traffic min zoom.", 39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v374, (uint64_t)"\n", 1);
  return 0;
}

void md::SharedDeviceResources::SharedDeviceResources(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
    *(void *)(a1 + 64) = v2;
    *(void *)(a1 + 72) = v3;
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *(void *)(a1 + 64) = v2;
    *(void *)(a1 + 72) = 0;
  }
  operator new();
}

uint64_t ggl::StandardLibrary::StandardLibrary(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  {
    uint64_t v2 = a2;
    if (v5)
    {
      ggl::StandardLibrary::typedReflection(void)::desc = (uint64_t)"StandardLibrary";
      dword_1EB32C840 = ggl::crc32::compute<16ul>("StandardLibrary");
      {
        {
          ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
          *(_DWORD *)algn_1EB34D1BC = 0;
          qword_1EB34D1C0 = (uint64_t)"AnimatableTextureShader";
          unk_1EB34D1C8 = ggl::animatableTextureShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB34D1D0 = 1;
          unk_1EB34D1D8 = &ggl::animatableTextureShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB34D1E0 = 1;
          unk_1EB34D1E8 = &ggl::animatableTextureShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB34D1F0 = 0;
          unk_1EB34D1F8 = &ggl::animatableTextureShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB34D200 = 0;
          unk_1EB34D208 = &ggl::animatableTextureShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB34D218 = 0;
          unk_1EB34D220 = 0;
          qword_1EB34D210 = 0;
        }
        StandardLibraryShaderFunctions(void)::desc = (uint64_t)&ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
          *(_DWORD *)algn_1EB32CCA4 = 1;
          qword_1EB32CCA8 = (uint64_t)"AnimatableTextureShader";
          unk_1EB32CCB0 = 0;
          qword_1EB32CCB8 = 0;
          unk_1EB32CCC0 = &ggl::animatableTextureShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32CCC8 = 1;
          unk_1EB32CCD0 = &ggl::animatableTextureShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32CCD8 = 0;
          unk_1EB32CCE0 = &ggl::animatableTextureShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32CCE8 = 2;
          unk_1EB32CCF0 = &ggl::animatableTextureShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32CD00 = 0;
          unk_1EB32CD08 = 0;
          qword_1EB32CCF8 = 2;
        }
        qword_1EB31DAC8 = (uint64_t)&ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v128 = ggl::crc32::compute<19ul>("ARMeshShaderVertex");
          qword_1EB31E460 = (uint64_t)"ARMeshShader";
          unk_1EB31E468 = ggl::aRMeshShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31E470 = 2;
          unk_1EB31E478 = &ggl::aRMeshShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31E480 = 3;
          unk_1EB31E488 = &ggl::aRMeshShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31E490 = 1;
          unk_1EB31E498 = &ggl::aRMeshShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::aRMeshShaderVertexFunctionDescriptor(void)::ref = v128;
          *(_DWORD *)algn_1EB31E45C = 0;
          qword_1EB31E4A0 = 0;
          unk_1EB31E4A8 = &ggl::aRMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31E4B8 = 0;
          unk_1EB31E4C0 = 0;
          qword_1EB31E4B0 = 0;
        }
        qword_1EB31DAD0 = (uint64_t)&ggl::aRMeshShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::aRMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("ARMeshShaderFragment");
          *(_DWORD *)algn_1EB31A6DC = 1;
          qword_1EB31A6E0 = (uint64_t)"ARMeshShader";
          unk_1EB31A6E8 = 0;
          qword_1EB31A6F0 = 0;
          unk_1EB31A6F8 = &ggl::aRMeshShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A700 = 4;
          unk_1EB31A708 = &ggl::aRMeshShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A710 = 0;
          unk_1EB31A718 = &ggl::aRMeshShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A720 = 2;
          unk_1EB31A728 = &ggl::aRMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A738 = 0;
          unk_1EB31A740 = 0;
          qword_1EB31A730 = 2;
        }
        qword_1EB31DAD8 = (uint64_t)&ggl::aRMeshShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v129 = ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
          qword_1EB31EB18 = (uint64_t)"ARDepthMeshShader";
          unk_1EB31EB20 = ggl::aRDepthMeshShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31EB28 = 2;
          unk_1EB31EB30 = &ggl::aRDepthMeshShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31EB38 = 3;
          unk_1EB31EB40 = &ggl::aRDepthMeshShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31EB48 = 1;
          unk_1EB31EB50 = &ggl::aRDepthMeshShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref = v129;
          *(_DWORD *)algn_1EB31EB14 = 0;
          qword_1EB31EB58 = 0;
          unk_1EB31EB60 = &ggl::aRDepthMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31EB70 = 0;
          unk_1EB31EB78 = 0;
          qword_1EB31EB68 = 0;
        }
        qword_1EB31DAE0 = (uint64_t)&ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
          *(_DWORD *)algn_1EB31A754 = 1;
          qword_1EB31A768 = 0;
          unk_1EB31A770 = &ggl::aRDepthMeshShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A778 = 0;
          unk_1EB31A780 = &ggl::aRDepthMeshShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A788 = 0;
          unk_1EB31A790 = &ggl::aRDepthMeshShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A758 = (uint64_t)"ARDepthMeshShader";
          unk_1EB31A760 = 0;
          qword_1EB31A798 = 0;
          unk_1EB31A7A0 = &ggl::aRDepthMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A7B0 = 0;
          unk_1EB31A7B8 = 0;
          qword_1EB31A7A8 = 0;
        }
        qword_1EB31DAE8 = (uint64_t)&ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v130 = ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
          qword_1EB31A7D0 = (uint64_t)"ARGroundShadowShader";
          unk_1EB31A7D8 = ggl::aRGroundShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31A7E0 = 2;
          unk_1EB31A7E8 = &ggl::aRGroundShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A7F0 = 3;
          unk_1EB31A7F8 = &ggl::aRGroundShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A800 = 1;
          unk_1EB31A808 = &ggl::aRGroundShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref = v130;
          *(_DWORD *)algn_1EB31A7CC = 0;
          qword_1EB31A810 = 0;
          unk_1EB31A818 = &ggl::aRGroundShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A828 = 0;
          unk_1EB31A830 = 0;
          qword_1EB31A820 = 0;
        }
        qword_1EB31DAF0 = (uint64_t)&ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
          *(_DWORD *)algn_1EB31A8BC = 1;
          qword_1EB31A8C0 = (uint64_t)"ARGroundShadowShader";
          unk_1EB31A8C8 = 0;
          qword_1EB31A8D0 = 0;
          unk_1EB31A8D8 = &ggl::aRGroundShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A8E0 = 1;
          unk_1EB31A8E8 = &ggl::aRGroundShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A8F0 = 0;
          unk_1EB31A8F8 = &ggl::aRGroundShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A900 = 0;
          unk_1EB31A908 = &ggl::aRGroundShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A918 = 0;
          unk_1EB31A920 = 0;
          qword_1EB31A910 = 0;
        }
        qword_1EB31DAF8 = (uint64_t)&ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
          *(_DWORD *)algn_1EB32BFCC = 0;
          qword_1EB32BFD0 = (uint64_t)"ARCameraImageShader";
          unk_1EB32BFD8 = ggl::aRCameraImageShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32BFE0 = 1;
          unk_1EB32BFE8 = &ggl::aRCameraImageShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32BFF0 = 1;
          unk_1EB32BFF8 = &ggl::aRCameraImageShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C000 = 0;
          unk_1EB32C008 = &ggl::aRCameraImageShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C010 = 0;
          unk_1EB32C018 = &ggl::aRCameraImageShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C028 = 0;
          unk_1EB32C030 = 0;
          qword_1EB32C020 = 0;
        }
        qword_1EB31DB00 = (uint64_t)&ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref;
        {
          int v131 = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
          qword_1EB32C298 = 0;
          unk_1EB32C2A0 = &ggl::aRCameraImageShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C2A8 = 0;
          unk_1EB32C2B0 = &ggl::aRCameraImageShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref = v131;
          *(_DWORD *)algn_1EB32C284 = 1;
          qword_1EB32C2B8 = 0;
          unk_1EB32C2C0 = &ggl::aRCameraImageShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C288 = (uint64_t)"ARCameraImageShader";
          unk_1EB32C290 = 0;
          qword_1EB32C2C8 = 1;
          unk_1EB32C2D0 = &ggl::aRCameraImageShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C2E0 = 0;
          unk_1EB32C2E8 = 0;
          qword_1EB32C2D8 = 1;
        }
        qword_1EB31DB08 = (uint64_t)&ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v132 = ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
          qword_1EB32CD20 = (uint64_t)"BuildingFacadeDepthShader";
          unk_1EB32CD28 = ggl::buildingFacadeDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32CD30 = 1;
          unk_1EB32CD38 = &ggl::buildingFacadeDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32CD40 = 2;
          unk_1EB32CD48 = &ggl::buildingFacadeDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32CD50 = 0;
          unk_1EB32CD58 = &ggl::buildingFacadeDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref = v132;
          *(_DWORD *)algn_1EB32CD1C = 0;
          qword_1EB32CD60 = 0;
          unk_1EB32CD68 = &ggl::buildingFacadeDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32CD78 = 0;
          unk_1EB32CD80 = 0;
          qword_1EB32CD70 = 0;
        }
        qword_1EB31DB10 = (uint64_t)&ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
          *(_DWORD *)algn_1EB329014 = 1;
          qword_1EB329028 = 0;
          unk_1EB329030 = &ggl::buildingFacadeDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329038 = 0;
          unk_1EB329040 = &ggl::buildingFacadeDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB329048 = 0;
          unk_1EB329050 = &ggl::buildingFacadeDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329018 = (uint64_t)"BuildingFacadeDepthShader";
          unk_1EB329020 = 0;
          qword_1EB329058 = 0;
          unk_1EB329060 = &ggl::buildingFacadeDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329070 = 0;
          unk_1EB329078 = 0;
          qword_1EB329068 = 0;
        }
        qword_1EB31DB18 = (uint64_t)&ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v133 = ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
          qword_1EB325678 = (uint64_t)"BuildingFlatShader";
          unk_1EB325680 = ggl::buildingFlatShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325688 = 1;
          unk_1EB325690 = &ggl::buildingFlatShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325698 = 2;
          unk_1EB3256A0 = &ggl::buildingFlatShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3256A8 = 0;
          unk_1EB3256B0 = &ggl::buildingFlatShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref = v133;
          *(_DWORD *)algn_1EB325674 = 0;
          qword_1EB3256B8 = 0;
          unk_1EB3256C0 = &ggl::buildingFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3256D0 = 0;
          unk_1EB3256D8 = 0;
          qword_1EB3256C8 = 0;
        }
        qword_1EB31DB20 = (uint64_t)&ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
          *(_DWORD *)algn_1EB3261AC = 1;
          qword_1EB3261C0 = 0;
          unk_1EB3261C8 = &ggl::buildingFlatShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3261D0 = 0;
          unk_1EB3261D8 = &ggl::buildingFlatShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3261E0 = 0;
          unk_1EB3261E8 = &ggl::buildingFlatShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3261B0 = (uint64_t)"BuildingFlatShader";
          unk_1EB3261B8 = 0;
          qword_1EB3261F0 = 0;
          unk_1EB3261F8 = &ggl::buildingFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326208 = 0;
          unk_1EB326210 = 0;
          qword_1EB326200 = 0;
        }
        qword_1EB31DB28 = (uint64_t)&ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v134 = ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
          qword_1EB327E80 = (uint64_t)"BuildingFlatStrokeShader";
          unk_1EB327E88 = ggl::buildingFlatStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327E90 = 1;
          unk_1EB327E98 = &ggl::buildingFlatStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327EA0 = 2;
          unk_1EB327EA8 = &ggl::buildingFlatStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327EB0 = 0;
          unk_1EB327EB8 = &ggl::buildingFlatStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref = v134;
          *(_DWORD *)algn_1EB327E7C = 0;
          qword_1EB327EC0 = 0;
          unk_1EB327EC8 = &ggl::buildingFlatStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327ED8 = 0;
          unk_1EB327EE0 = 0;
          qword_1EB327ED0 = 0;
        }
        qword_1EB31DB30 = (uint64_t)&ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          int v135 = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
          qword_1EB328C08 = 0;
          unk_1EB328C10 = &ggl::buildingFlatStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328C18 = 0;
          unk_1EB328C20 = &ggl::buildingFlatStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref = v135;
          *(_DWORD *)algn_1EB328BF4 = 1;
          qword_1EB328C28 = 0;
          unk_1EB328C30 = &ggl::buildingFlatStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328BF8 = (uint64_t)"BuildingFlatStrokeShader";
          unk_1EB328C00 = 0;
          qword_1EB328C38 = 1;
          unk_1EB328C40 = &ggl::buildingFlatStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328C50 = 0;
          unk_1EB328C58 = 0;
          qword_1EB328C48 = 1;
        }
        qword_1EB31DB38 = (uint64_t)&ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v136 = ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
          qword_1EB329918 = (uint64_t)"BuildingPointyRoofDepthShader";
          unk_1EB329920 = ggl::buildingPointyRoofDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329928 = 1;
          unk_1EB329930 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329938 = 2;
          unk_1EB329940 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329948 = 0;
          unk_1EB329950 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref = v136;
          *(_DWORD *)algn_1EB329914 = 0;
          qword_1EB329958 = 0;
          unk_1EB329960 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329970 = 0;
          unk_1EB329978 = 0;
          qword_1EB329968 = 0;
        }
        qword_1EB31DB40 = (uint64_t)&ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
          *(_DWORD *)algn_1EB32A13C = 1;
          qword_1EB32A150 = 0;
          unk_1EB32A158 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A160 = 0;
          unk_1EB32A168 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A170 = 0;
          unk_1EB32A178 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A140 = (uint64_t)"BuildingPointyRoofDepthShader";
          unk_1EB32A148 = 0;
          qword_1EB32A180 = 0;
          unk_1EB32A188 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A198 = 0;
          unk_1EB32A1A0 = 0;
          qword_1EB32A190 = 0;
        }
        qword_1EB31DB48 = (uint64_t)&ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v137 = ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
          qword_1EB326220 = (uint64_t)"BuildingShadowShader";
          unk_1EB326228 = ggl::buildingShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326230 = 1;
          unk_1EB326238 = &ggl::buildingShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326240 = 2;
          unk_1EB326248 = &ggl::buildingShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB326250 = 0;
          unk_1EB326258 = &ggl::buildingShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref = v137;
          *(_DWORD *)algn_1EB32621C = 0;
          qword_1EB326260 = 0;
          unk_1EB326268 = &ggl::buildingShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326278 = 0;
          unk_1EB326280 = 0;
          qword_1EB326270 = 0;
        }
        qword_1EB31DB50 = (uint64_t)&ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref;
        {
          int v138 = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
          qword_1EB327138 = 0;
          unk_1EB327140 = &ggl::buildingShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327148 = 1;
          unk_1EB327150 = &ggl::buildingShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref = v138;
          *(_DWORD *)algn_1EB327124 = 1;
          qword_1EB327158 = 0;
          unk_1EB327160 = &ggl::buildingShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327128 = (uint64_t)"BuildingShadowShader";
          unk_1EB327130 = 0;
          qword_1EB327168 = 1;
          unk_1EB327170 = &ggl::buildingShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327180 = 0;
          unk_1EB327188 = 0;
          qword_1EB327178 = 1;
        }
        qword_1EB31DB58 = (uint64_t)&ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v139 = ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
          qword_1EB327198 = (uint64_t)"BuildingTopDepthShader";
          unk_1EB3271A0 = ggl::buildingTopDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3271A8 = 1;
          unk_1EB3271B0 = &ggl::buildingTopDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3271B8 = 2;
          unk_1EB3271C0 = &ggl::buildingTopDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3271C8 = 0;
          unk_1EB3271D0 = &ggl::buildingTopDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref = v139;
          *(_DWORD *)algn_1EB327194 = 0;
          qword_1EB3271D8 = 0;
          unk_1EB3271E0 = &ggl::buildingTopDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3271F0 = 0;
          unk_1EB3271F8 = 0;
          qword_1EB3271E8 = 0;
        }
        qword_1EB31DB60 = (uint64_t)&ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
          *(_DWORD *)algn_1EB327EEC = 1;
          qword_1EB327F00 = 0;
          unk_1EB327F08 = &ggl::buildingTopDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327F10 = 0;
          unk_1EB327F18 = &ggl::buildingTopDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB327F20 = 0;
          unk_1EB327F28 = &ggl::buildingTopDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327EF0 = (uint64_t)"BuildingTopDepthShader";
          unk_1EB327EF8 = 0;
          qword_1EB327F30 = 0;
          unk_1EB327F38 = &ggl::buildingTopDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327F48 = 0;
          unk_1EB327F50 = 0;
          qword_1EB327F40 = 0;
        }
        qword_1EB31DB68 = (uint64_t)&ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v140 = ggl::crc32::compute<19ul>("CircleShaderVertex");
          qword_1EB3242C8 = (uint64_t)"CircleShader";
          unk_1EB3242D0 = ggl::circleShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3242D8 = 1;
          unk_1EB3242E0 = &ggl::circleShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3242E8 = 2;
          unk_1EB3242F0 = &ggl::circleShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3242F8 = 0;
          unk_1EB324300 = &ggl::circleShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::circleShaderVertexFunctionDescriptor(void)::ref = v140;
          *(_DWORD *)algn_1EB3242C4 = 0;
          qword_1EB324308 = 0;
          unk_1EB324310 = &ggl::circleShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324320 = 0;
          unk_1EB324328 = 0;
          qword_1EB324318 = 0;
        }
        qword_1EB31DB70 = (uint64_t)&ggl::circleShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::circleShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("CircleShaderFragment");
          *(_DWORD *)algn_1EB32498C = 1;
          qword_1EB3249A0 = 0;
          unk_1EB3249A8 = &ggl::circleShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3249B0 = 2;
          unk_1EB3249B8 = &ggl::circleShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3249C0 = 0;
          unk_1EB3249C8 = &ggl::circleShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324990 = (uint64_t)"CircleShader";
          unk_1EB324998 = 0;
          qword_1EB3249D0 = 0;
          unk_1EB3249D8 = &ggl::circleShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3249E8 = 0;
          unk_1EB3249F0 = 0;
          qword_1EB3249E0 = 0;
        }
        qword_1EB31DB78 = (uint64_t)&ggl::circleShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v141 = ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
          qword_1EB317FB0 = (uint64_t)"CircleMultiStrokeShader";
          unk_1EB317FB8 = ggl::circleMultiStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB317FC0 = 1;
          unk_1EB317FC8 = &ggl::circleMultiStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB317FD0 = 4;
          unk_1EB317FD8 = &ggl::circleMultiStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB317FE0 = 0;
          unk_1EB317FE8 = &ggl::circleMultiStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref = v141;
          *(_DWORD *)algn_1EB317FAC = 0;
          qword_1EB317FF0 = 0;
          unk_1EB317FF8 = &ggl::circleMultiStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318008 = 0;
          unk_1EB318010 = 0;
          qword_1EB318000 = 0;
        }
        qword_1EB31DB80 = (uint64_t)&ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
          *(_DWORD *)algn_1EB318264 = 1;
          qword_1EB318268 = (uint64_t)"CircleMultiStrokeShader";
          unk_1EB318270 = 0;
          qword_1EB318278 = 0;
          unk_1EB318280 = &ggl::circleMultiStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB318288 = 1;
          unk_1EB318290 = &ggl::circleMultiStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB318298 = 0;
          unk_1EB3182A0 = &ggl::circleMultiStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3182A8 = 0;
          unk_1EB3182B0 = &ggl::circleMultiStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3182C0 = 0;
          unk_1EB3182C8 = 0;
          qword_1EB3182B8 = 0;
        }
        qword_1EB31DB88 = (uint64_t)&ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v142 = ggl::crc32::compute<17ul>("ClutShaderVertex");
          qword_1EB323CE0 = (uint64_t)"ClutShader";
          unk_1EB323CE8 = ggl::clutShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323CF0 = 1;
          unk_1EB323CF8 = &ggl::clutShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323D00 = 3;
          unk_1EB323D08 = &ggl::clutShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323D10 = 0;
          unk_1EB323D18 = &ggl::clutShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::clutShaderVertexFunctionDescriptor(void)::ref = v142;
          *(_DWORD *)algn_1EB323CDC = 0;
          qword_1EB323D20 = 0;
          unk_1EB323D28 = &ggl::clutShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323D38 = 0;
          unk_1EB323D40 = 0;
          qword_1EB323D30 = 0;
        }
        qword_1EB31DB90 = (uint64_t)&ggl::clutShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::clutShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ClutShaderFragment");
          *(_DWORD *)algn_1EB3243A4 = 1;
          qword_1EB3243A8 = (uint64_t)"ClutShader";
          unk_1EB3243B0 = 0;
          qword_1EB3243B8 = 0;
          unk_1EB3243C0 = &ggl::clutShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3243C8 = 1;
          unk_1EB3243D0 = &ggl::clutShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3243D8 = 0;
          unk_1EB3243E0 = &ggl::clutShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3243E8 = 2;
          unk_1EB3243F0 = &ggl::clutShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324400 = 0;
          unk_1EB324408 = 0;
          qword_1EB3243F8 = 2;
        }
        qword_1EB31DB98 = (uint64_t)&ggl::clutShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v143 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
          qword_1EB329E80 = (uint64_t)"ColorGlyphWithNormalHaloShader";
          unk_1EB329E88 = ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329E90 = 1;
          unk_1EB329E98 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329EA0 = 3;
          unk_1EB329EA8 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329EB0 = 0;
          unk_1EB329EB8 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v143;
          *(_DWORD *)algn_1EB329E7C = 0;
          qword_1EB329EC0 = 1;
          unk_1EB329EC8 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329ED8 = 0;
          unk_1EB329EE0 = 0;
          qword_1EB329ED0 = 1;
        }
        qword_1EB31DBA0 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = 0x101385EE6;
          qword_1EB32A648 = (uint64_t)"ColorGlyphWithNormalHaloShader";
          unk_1EB32A650 = 0;
          qword_1EB32A658 = 0;
          unk_1EB32A660 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A668 = 2;
          unk_1EB32A670 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A678 = 0;
          unk_1EB32A680 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A688 = 1;
          unk_1EB32A690 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A6A0 = 0;
          unk_1EB32A6A8 = 0;
          qword_1EB32A698 = 1;
        }
        qword_1EB31DBA8 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v144 = ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
          qword_1EB32C218 = (uint64_t)"InstancedDebugShader";
          unk_1EB32C220 = ggl::instancedDebugShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32C228 = 2;
          unk_1EB32C230 = &ggl::instancedDebugShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C238 = 3;
          unk_1EB32C240 = &ggl::instancedDebugShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C248 = 1;
          unk_1EB32C250 = &ggl::instancedDebugShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref = v144;
          *(_DWORD *)algn_1EB32C214 = 0;
          qword_1EB32C258 = 0;
          unk_1EB32C260 = &ggl::instancedDebugShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C270 = 0;
          unk_1EB32C278 = 0;
          qword_1EB32C268 = 0;
        }
        qword_1EB31DBB0 = (uint64_t)&ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
          *(_DWORD *)algn_1EB32C464 = 1;
          qword_1EB32C468 = (uint64_t)"InstancedDebugShader";
          unk_1EB32C470 = 0;
          qword_1EB32C478 = 0;
          unk_1EB32C480 = &ggl::instancedDebugShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C488 = 1;
          unk_1EB32C490 = &ggl::instancedDebugShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C498 = 0;
          unk_1EB32C4A0 = &ggl::instancedDebugShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C4A8 = 0;
          unk_1EB32C4B0 = &ggl::instancedDebugShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C4C0 = 0;
          unk_1EB32C4C8 = 0;
          qword_1EB32C4B8 = 0;
        }
        qword_1EB31DBB8 = (uint64_t)&ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v145 = ggl::crc32::compute<18ul>("DebugShaderVertex");
          qword_1EB324088 = (uint64_t)"DebugShader";
          unk_1EB324090 = ggl::debugShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324098 = 1;
          unk_1EB3240A0 = &ggl::debugShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3240A8 = 3;
          unk_1EB3240B0 = &ggl::debugShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3240B8 = 0;
          unk_1EB3240C0 = &ggl::debugShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::debugShaderVertexFunctionDescriptor(void)::ref = v145;
          *(_DWORD *)algn_1EB324084 = 0;
          qword_1EB3240C8 = 0;
          unk_1EB3240D0 = &ggl::debugShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3240E0 = 0;
          unk_1EB3240E8 = 0;
          qword_1EB3240D8 = 0;
        }
        qword_1EB31DBC0 = (uint64_t)&ggl::debugShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::debugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("DebugShaderFragment");
          *(_DWORD *)algn_1EB32474C = 1;
          qword_1EB324750 = (uint64_t)"DebugShader";
          unk_1EB324758 = 0;
          qword_1EB324760 = 0;
          unk_1EB324768 = &ggl::debugShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324770 = 1;
          unk_1EB324778 = &ggl::debugShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB324780 = 0;
          unk_1EB324788 = &ggl::debugShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324790 = 0;
          unk_1EB324798 = &ggl::debugShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3247A8 = 0;
          unk_1EB3247B0 = 0;
          qword_1EB3247A0 = 0;
        }
        qword_1EB31DBC8 = (uint64_t)&ggl::debugShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v146 = ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
          qword_1EB325AF8 = (uint64_t)"DebugExtendedShader";
          unk_1EB325B00 = ggl::debugExtendedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325B08 = 1;
          unk_1EB325B10 = &ggl::debugExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325B18 = 3;
          unk_1EB325B20 = &ggl::debugExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325B28 = 0;
          unk_1EB325B30 = &ggl::debugExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref = v146;
          *(_DWORD *)algn_1EB325AF4 = 0;
          qword_1EB325B38 = 0;
          unk_1EB325B40 = &ggl::debugExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325B50 = 0;
          unk_1EB325B58 = 0;
          qword_1EB325B48 = 0;
        }
        qword_1EB31DBD0 = (uint64_t)&ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
          *(_DWORD *)algn_1EB32688C = 1;
          qword_1EB326890 = (uint64_t)"DebugExtendedShader";
          unk_1EB326898 = 0;
          qword_1EB3268A0 = 0;
          unk_1EB3268A8 = &ggl::debugExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3268B0 = 1;
          unk_1EB3268B8 = &ggl::debugExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3268C0 = 0;
          unk_1EB3268C8 = &ggl::debugExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3268D0 = 0;
          unk_1EB3268D8 = &ggl::debugExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3268E8 = 0;
          unk_1EB3268F0 = 0;
          qword_1EB3268E0 = 0;
        }
        qword_1EB31DBD8 = (uint64_t)&ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v147 = ggl::crc32::compute<22ul>("DebugLineShaderVertex");
          qword_1EB31C608 = (uint64_t)"DebugLineShader";
          unk_1EB31C610 = ggl::debugLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31C618 = 1;
          unk_1EB31C620 = &ggl::debugLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C628 = 4;
          unk_1EB31C630 = &ggl::debugLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C638 = 0;
          unk_1EB31C640 = &ggl::debugLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::debugLineShaderVertexFunctionDescriptor(void)::ref = v147;
          *(_DWORD *)algn_1EB31C604 = 0;
          qword_1EB31C648 = 0;
          unk_1EB31C650 = &ggl::debugLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C660 = 0;
          unk_1EB31C668 = 0;
          qword_1EB31C658 = 0;
        }
        qword_1EB31DBE0 = (uint64_t)&ggl::debugLineShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::debugLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("DebugLineShaderFragment");
          *(_DWORD *)algn_1EB31C6EC = 1;
          qword_1EB31C6F0 = (uint64_t)"DebugLineShader";
          unk_1EB31C6F8 = 0;
          qword_1EB31C700 = 0;
          unk_1EB31C708 = &ggl::debugLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C710 = 1;
          unk_1EB31C718 = &ggl::debugLineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C720 = 0;
          unk_1EB31C728 = &ggl::debugLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31C730 = 0;
          unk_1EB31C738 = &ggl::debugLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C748 = 0;
          unk_1EB31C750 = 0;
          qword_1EB31C740 = 0;
        }
        qword_1EB31DBE8 = (uint64_t)&ggl::debugLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v148 = ggl::crc32::compute<22ul>("HillshadeShaderVertex");
          qword_1EB317D70 = (uint64_t)"HillshadeShader";
          unk_1EB317D78 = ggl::hillshadeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB317D80 = 1;
          unk_1EB317D88 = &ggl::hillshadeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB317D90 = 2;
          unk_1EB317D98 = &ggl::hillshadeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB317DA0 = 0;
          unk_1EB317DA8 = &ggl::hillshadeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref = v148;
          *(_DWORD *)algn_1EB317D6C = 0;
          qword_1EB317DB0 = 0;
          unk_1EB317DB8 = &ggl::hillshadeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317DC8 = 0;
          unk_1EB317DD0 = 0;
          qword_1EB317DC0 = 0;
        }
        qword_1EB31DBF0 = (uint64_t)&ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref;
        {
          int v149 = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
          qword_1EB317E68 = 0;
          unk_1EB317E70 = &ggl::hillshadeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB317E78 = 1;
          unk_1EB317E80 = &ggl::hillshadeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref = v149;
          *(_DWORD *)algn_1EB317E54 = 1;
          qword_1EB317E88 = 0;
          unk_1EB317E90 = &ggl::hillshadeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB317E58 = (uint64_t)"HillshadeShader";
          unk_1EB317E60 = 0;
          qword_1EB317E98 = 1;
          unk_1EB317EA0 = &ggl::hillshadeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317EB0 = 0;
          unk_1EB317EB8 = 0;
          qword_1EB317EA8 = 1;
        }
        qword_1EB31DBF8 = (uint64_t)&ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v150 = ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
          qword_1EB326900 = (uint64_t)"DiffuseBuildingShader";
          unk_1EB326908 = ggl::diffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326910 = 1;
          unk_1EB326918 = &ggl::diffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326920 = 6;
          unk_1EB326928 = &ggl::diffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB326930 = 0;
          unk_1EB326938 = &ggl::diffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref = v150;
          *(_DWORD *)algn_1EB3268FC = 0;
          qword_1EB326940 = 0;
          unk_1EB326948 = &ggl::diffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326958 = 0;
          unk_1EB326960 = 0;
          qword_1EB326950 = 0;
        }
        qword_1EB31DC00 = (uint64_t)&ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
        {
          int v151 = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
          qword_1EB327828 = 0;
          unk_1EB327830 = &ggl::diffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327838 = 3;
          unk_1EB327840 = &ggl::diffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = v151;
          *(_DWORD *)algn_1EB327814 = 1;
          qword_1EB327848 = 0;
          unk_1EB327850 = &ggl::diffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327818 = (uint64_t)"DiffuseBuildingShader";
          unk_1EB327820 = 0;
          qword_1EB327858 = 1;
          unk_1EB327860 = &ggl::diffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327870 = 0;
          unk_1EB327878 = 0;
          qword_1EB327868 = 1;
        }
        qword_1EB31DC08 = (uint64_t)&ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v152 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
          qword_1EB32A1B8 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1EB32A1C0 = ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A1C8 = 1;
          unk_1EB32A1D0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A1D8 = 6;
          unk_1EB32A1E0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A1E8 = 0;
          unk_1EB32A1F0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = v152;
          *(_DWORD *)algn_1EB32A1B4 = 0;
          qword_1EB32A1F8 = 0;
          unk_1EB32A200 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A210 = 0;
          unk_1EB32A218 = 0;
          qword_1EB32A208 = 0;
        }
        qword_1EB31DC10 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32A8A0 = 0;
          unk_1EB32A8A8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A8B0 = 3;
          unk_1EB32A8B8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x19F819965;
          qword_1EB32A8C0 = 0;
          unk_1EB32A8C8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A890 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1EB32A898 = 0;
          qword_1EB32A8D0 = 0;
          unk_1EB32A8D8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A8E8 = 0;
          unk_1EB32A8F0 = 0;
          qword_1EB32A8E0 = 0;
        }
        qword_1EB31DC18 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v153 = ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
          qword_1EB327F68 = (uint64_t)"DiffuseBuildingTopShader";
          unk_1EB327F70 = ggl::diffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327F78 = 1;
          unk_1EB327F80 = &ggl::diffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327F88 = 6;
          unk_1EB327F90 = &ggl::diffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327F98 = 0;
          unk_1EB327FA0 = &ggl::diffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v153;
          *(_DWORD *)algn_1EB327F64 = 0;
          qword_1EB327FA8 = 0;
          unk_1EB327FB0 = &ggl::diffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327FC0 = 0;
          unk_1EB327FC8 = 0;
          qword_1EB327FB8 = 0;
        }
        qword_1EB31DC20 = (uint64_t)&ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
          *(_DWORD *)algn_1EB328C6C = 1;
          qword_1EB328C80 = 0;
          unk_1EB328C88 = &ggl::diffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328C90 = 3;
          unk_1EB328C98 = &ggl::diffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB328CA0 = 0;
          unk_1EB328CA8 = &ggl::diffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328C70 = (uint64_t)"DiffuseBuildingTopShader";
          unk_1EB328C78 = 0;
          qword_1EB328CB0 = 0;
          unk_1EB328CB8 = &ggl::diffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328CC8 = 0;
          unk_1EB328CD0 = 0;
          qword_1EB328CC0 = 0;
        }
        qword_1EB31DC28 = (uint64_t)&ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v154 = ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
          qword_1EB326978 = (uint64_t)"DiffuseLandmarkShader";
          unk_1EB326980 = ggl::diffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326988 = 1;
          unk_1EB326990 = &ggl::diffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326998 = 6;
          unk_1EB3269A0 = &ggl::diffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3269A8 = 0;
          unk_1EB3269B0 = &ggl::diffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = v154;
          *(_DWORD *)algn_1EB326974 = 0;
          qword_1EB3269B8 = 0;
          unk_1EB3269C0 = &ggl::diffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3269D0 = 0;
          unk_1EB3269D8 = 0;
          qword_1EB3269C8 = 0;
        }
        qword_1EB31DC30 = (uint64_t)&ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
        {
          int v155 = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
          qword_1EB3278A0 = 0;
          unk_1EB3278A8 = &ggl::diffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3278B0 = 3;
          unk_1EB3278B8 = &ggl::diffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = v155;
          *(_DWORD *)algn_1EB32788C = 1;
          qword_1EB3278C0 = 0;
          unk_1EB3278C8 = &ggl::diffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327890 = (uint64_t)"DiffuseLandmarkShader";
          unk_1EB327898 = 0;
          qword_1EB3278D0 = 1;
          unk_1EB3278D8 = &ggl::diffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3278E8 = 0;
          unk_1EB3278F0 = 0;
          qword_1EB3278E0 = 1;
        }
        qword_1EB31DC38 = (uint64_t)&ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v156 = ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
          qword_1EB31C848 = (uint64_t)"ElevatedFillColorShader";
          unk_1EB31C850 = ggl::elevatedFillColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31C858 = 1;
          unk_1EB31C860 = &ggl::elevatedFillColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C868 = 4;
          unk_1EB31C870 = &ggl::elevatedFillColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C878 = 0;
          unk_1EB31C880 = &ggl::elevatedFillColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref = v156;
          *(_DWORD *)algn_1EB31C844 = 0;
          qword_1EB31C888 = 0;
          unk_1EB31C890 = &ggl::elevatedFillColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C8A0 = 0;
          unk_1EB31C8A8 = 0;
          qword_1EB31C898 = 0;
        }
        qword_1EB31DC40 = (uint64_t)&ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
          *(_DWORD *)algn_1EB31C8BC = 1;
          qword_1EB31C8D0 = 0;
          unk_1EB31C8D8 = &ggl::elevatedFillColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C8E0 = 2;
          unk_1EB31C8E8 = &ggl::elevatedFillColorShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C8F0 = 0;
          unk_1EB31C8F8 = &ggl::elevatedFillColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31C8C0 = (uint64_t)"ElevatedFillColorShader";
          unk_1EB31C8C8 = 0;
          qword_1EB31C900 = 0;
          unk_1EB31C908 = &ggl::elevatedFillColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C918 = 0;
          unk_1EB31C920 = 0;
          qword_1EB31C910 = 0;
        }
        qword_1EB31DC48 = (uint64_t)&ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D2B8 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
          unk_1EB31D2C0 = ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D2C8 = 1;
          unk_1EB31D2D0 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D2D8 = 4;
          unk_1EB31D2E0 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D2E8 = 0;
          unk_1EB31D2F0 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref = 2431374733;
          qword_1EB31D2F8 = 0;
          unk_1EB31D300 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D310 = 0;
          unk_1EB31D318 = 0;
          qword_1EB31D308 = 0;
        }
        qword_1EB31DC50 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB31D580 = 0;
          unk_1EB31D588 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D590 = 2;
          unk_1EB31D598 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref = 0x138D1A785;
          qword_1EB31D5A0 = 0;
          unk_1EB31D5A8 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D570 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
          unk_1EB31D578 = 0;
          qword_1EB31D5B0 = 0;
          unk_1EB31D5B8 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D5C8 = 0;
          unk_1EB31D5D0 = 0;
          qword_1EB31D5C0 = 0;
        }
        qword_1EB31DC58 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v157 = ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
          qword_1EB31AA80 = (uint64_t)"ElevatedStrokeColorShader";
          unk_1EB31AA88 = ggl::elevatedStrokeColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AA90 = 1;
          unk_1EB31AA98 = &ggl::elevatedStrokeColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AAA0 = 4;
          unk_1EB31AAA8 = &ggl::elevatedStrokeColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AAB0 = 0;
          unk_1EB31AAB8 = &ggl::elevatedStrokeColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref = v157;
          *(_DWORD *)algn_1EB31AA7C = 0;
          qword_1EB31AAC0 = 0;
          unk_1EB31AAC8 = &ggl::elevatedStrokeColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AAD8 = 0;
          unk_1EB31AAE0 = 0;
          qword_1EB31AAD0 = 0;
        }
        qword_1EB31DC60 = (uint64_t)&ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref;
        {
          int v158 = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
          qword_1EB31AC58 = 0;
          unk_1EB31AC60 = &ggl::elevatedStrokeColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AC68 = 3;
          unk_1EB31AC70 = &ggl::elevatedStrokeColorShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref = v158;
          *(_DWORD *)algn_1EB31AC44 = 1;
          qword_1EB31AC78 = 0;
          unk_1EB31AC80 = &ggl::elevatedStrokeColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AC48 = (uint64_t)"ElevatedStrokeColorShader";
          unk_1EB31AC50 = 0;
          qword_1EB31AC88 = 1;
          unk_1EB31AC90 = &ggl::elevatedStrokeColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31ACA0 = 0;
          unk_1EB31ACA8 = 0;
          qword_1EB31AC98 = 1;
        }
        qword_1EB31DC68 = (uint64_t)&ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D660 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
          unk_1EB31D668 = ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D670 = 1;
          unk_1EB31D678 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D680 = 4;
          unk_1EB31D688 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D690 = 0;
          unk_1EB31D698 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref = 1731713468;
          qword_1EB31D6A0 = 0;
          unk_1EB31D6A8 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D6B8 = 0;
          unk_1EB31D6C0 = 0;
          qword_1EB31D6B0 = 0;
        }
        qword_1EB31DC70 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref = 0x1F73A1BC0;
          qword_1EB31D898 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
          unk_1EB31D8A0 = 0;
          qword_1EB31D8A8 = 0;
          unk_1EB31D8B0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D8B8 = 3;
          unk_1EB31D8C0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D8C8 = 0;
          unk_1EB31D8D0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D8D8 = 1;
          unk_1EB31D8E0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D8F0 = 0;
          unk_1EB31D8F8 = 0;
          qword_1EB31D8E8 = 1;
        }
        qword_1EB31DC78 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v159 = ggl::crc32::compute<16ul>("FogShaderVertex");
          qword_1EB323BF8 = (uint64_t)"FogShader";
          unk_1EB323C00 = ggl::fogShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323C08 = 1;
          unk_1EB323C10 = &ggl::fogShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323C18 = 2;
          unk_1EB323C20 = &ggl::fogShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323C28 = 0;
          unk_1EB323C30 = &ggl::fogShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::fogShaderVertexFunctionDescriptor(void)::ref = v159;
          *(_DWORD *)algn_1EB323BF4 = 0;
          qword_1EB323C38 = 0;
          unk_1EB323C40 = &ggl::fogShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323C50 = 0;
          unk_1EB323C58 = 0;
          qword_1EB323C48 = 0;
        }
        qword_1EB31DC80 = (uint64_t)&ggl::fogShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::fogShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("FogShaderFragment");
          *(_DWORD *)algn_1EB3240FC = 1;
          qword_1EB324110 = 0;
          unk_1EB324118 = &ggl::fogShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324120 = 0;
          unk_1EB324128 = &ggl::fogShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB324130 = 0;
          unk_1EB324138 = &ggl::fogShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324100 = (uint64_t)"FogShader";
          unk_1EB324108 = 0;
          qword_1EB324140 = 0;
          unk_1EB324148 = &ggl::fogShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324158 = 0;
          unk_1EB324160 = 0;
          qword_1EB324150 = 0;
        }
        qword_1EB31DC88 = (uint64_t)&ggl::fogShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v160 = ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
          qword_1EB329100 = (uint64_t)"FoggedDiffuseBuildingShader";
          unk_1EB329108 = ggl::foggedDiffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329110 = 1;
          unk_1EB329118 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329120 = 6;
          unk_1EB329128 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329130 = 0;
          unk_1EB329138 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref = v160;
          *(_DWORD *)algn_1EB3290FC = 0;
          qword_1EB329140 = 0;
          unk_1EB329148 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329158 = 0;
          unk_1EB329160 = 0;
          qword_1EB329150 = 0;
        }
        qword_1EB31DC90 = (uint64_t)&ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
        {
          int v161 = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
          qword_1EB329A18 = 0;
          unk_1EB329A20 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329A28 = 3;
          unk_1EB329A30 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = v161;
          *(_DWORD *)algn_1EB329A04 = 1;
          qword_1EB329A38 = 0;
          unk_1EB329A40 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329A08 = (uint64_t)"FoggedDiffuseBuildingShader";
          unk_1EB329A10 = 0;
          qword_1EB329A48 = 1;
          unk_1EB329A50 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329A60 = 0;
          unk_1EB329A68 = 0;
          qword_1EB329A58 = 1;
        }
        qword_1EB31DC98 = (uint64_t)&ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v162 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
          qword_1EB329EF8 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1EB329F00 = ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329F08 = 1;
          unk_1EB329F10 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329F18 = 6;
          unk_1EB329F20 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329F28 = 0;
          unk_1EB329F30 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v162;
          *(_DWORD *)algn_1EB329EF4 = 0;
          qword_1EB329F38 = 0;
          unk_1EB329F40 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329F50 = 0;
          unk_1EB329F58 = 0;
          qword_1EB329F48 = 0;
        }
        qword_1EB31DCA0 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32A6D0 = 0;
          unk_1EB32A6D8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A6E0 = 3;
          unk_1EB32A6E8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x1AC1081B8;
          qword_1EB32A6F0 = 0;
          unk_1EB32A6F8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A6C0 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1EB32A6C8 = 0;
          qword_1EB32A700 = 0;
          unk_1EB32A708 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A718 = 0;
          unk_1EB32A720 = 0;
          qword_1EB32A710 = 0;
        }
        qword_1EB31DCA8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v163 = ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
          qword_1EB329170 = (uint64_t)"FoggedDiffuseLandmarkShader";
          unk_1EB329178 = ggl::foggedDiffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329180 = 1;
          unk_1EB329188 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329190 = 6;
          unk_1EB329198 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3291A0 = 0;
          unk_1EB3291A8 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = v163;
          *(_DWORD *)algn_1EB32916C = 0;
          qword_1EB3291B0 = 0;
          unk_1EB3291B8 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3291C8 = 0;
          unk_1EB3291D0 = 0;
          qword_1EB3291C0 = 0;
        }
        qword_1EB31DCB0 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
        {
          int v164 = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
          qword_1EB329A88 = 0;
          unk_1EB329A90 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329A98 = 3;
          unk_1EB329AA0 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = v164;
          *(_DWORD *)algn_1EB329A74 = 1;
          qword_1EB329AA8 = 0;
          unk_1EB329AB0 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329A78 = (uint64_t)"FoggedDiffuseLandmarkShader";
          unk_1EB329A80 = 0;
          qword_1EB329AB8 = 1;
          unk_1EB329AC0 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329AD0 = 0;
          unk_1EB329AD8 = 0;
          qword_1EB329AC8 = 1;
        }
        qword_1EB31DCB8 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v165 = ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
          qword_1EB3296D8 = (uint64_t)"FoggedSpecularBuildingShader";
          unk_1EB3296E0 = ggl::foggedSpecularBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3296E8 = 1;
          unk_1EB3296F0 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3296F8 = 6;
          unk_1EB329700 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329708 = 0;
          unk_1EB329710 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref = v165;
          *(_DWORD *)algn_1EB3296D4 = 0;
          qword_1EB329718 = 0;
          unk_1EB329720 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329730 = 0;
          unk_1EB329738 = 0;
          qword_1EB329728 = 0;
        }
        qword_1EB31DCC0 = (uint64_t)&ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref;
        {
          int v166 = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
          qword_1EB329F80 = 0;
          unk_1EB329F88 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329F90 = 4;
          unk_1EB329F98 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref = v166;
          *(_DWORD *)algn_1EB329F6C = 1;
          qword_1EB329FA0 = 0;
          unk_1EB329FA8 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329F70 = (uint64_t)"FoggedSpecularBuildingShader";
          unk_1EB329F78 = 0;
          qword_1EB329FB0 = 1;
          unk_1EB329FB8 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329FC8 = 0;
          unk_1EB329FD0 = 0;
          qword_1EB329FC0 = 1;
        }
        qword_1EB31DCC8 = (uint64_t)&ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v167 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
          qword_1EB32A390 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1EB32A398 = ggl::foggedSpecularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A3A0 = 1;
          unk_1EB32A3A8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A3B0 = 6;
          unk_1EB32A3B8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A3C0 = 0;
          unk_1EB32A3C8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v167;
          *(_DWORD *)algn_1EB32A38C = 0;
          qword_1EB32A3D0 = 0;
          unk_1EB32A3D8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A3E8 = 0;
          unk_1EB32A3F0 = 0;
          qword_1EB32A3E0 = 0;
        }
        qword_1EB31DCD0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32AA78 = 0;
          unk_1EB32AA80 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AA88 = 4;
          unk_1EB32AA90 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x113B913CCLL;
          qword_1EB32AA98 = 0;
          unk_1EB32AAA0 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AA68 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1EB32AA70 = 0;
          qword_1EB32AAA8 = 0;
          unk_1EB32AAB0 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AAC0 = 0;
          unk_1EB32AAC8 = 0;
          qword_1EB32AAB8 = 0;
        }
        qword_1EB31DCD8 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v168 = ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
          qword_1EB329750 = (uint64_t)"FoggedSpecularLandmarkShader";
          unk_1EB329758 = ggl::foggedSpecularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329760 = 1;
          unk_1EB329768 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329770 = 6;
          unk_1EB329778 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329780 = 0;
          unk_1EB329788 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref = v168;
          *(_DWORD *)algn_1EB32974C = 0;
          qword_1EB329790 = 0;
          unk_1EB329798 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3297A8 = 0;
          unk_1EB3297B0 = 0;
          qword_1EB3297A0 = 0;
        }
        qword_1EB31DCE0 = (uint64_t)&ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref;
        {
          int v169 = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
          qword_1EB329FF8 = 0;
          unk_1EB32A000 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A008 = 4;
          unk_1EB32A010 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref = v169;
          *(_DWORD *)algn_1EB329FE4 = 1;
          qword_1EB32A018 = 0;
          unk_1EB32A020 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329FE8 = (uint64_t)"FoggedSpecularLandmarkShader";
          unk_1EB329FF0 = 0;
          qword_1EB32A028 = 1;
          unk_1EB32A030 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A040 = 0;
          unk_1EB32A048 = 0;
          qword_1EB32A038 = 1;
        }
        qword_1EB31DCE8 = (uint64_t)&ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v170 = ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
          qword_1EB32B810 = (uint64_t)"GlobeAtmosphereShader";
          unk_1EB32B818 = ggl::globeAtmosphereShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32B820 = 1;
          unk_1EB32B828 = &ggl::globeAtmosphereShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32B830 = 2;
          unk_1EB32B838 = &ggl::globeAtmosphereShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32B840 = 0;
          unk_1EB32B848 = &ggl::globeAtmosphereShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref = v170;
          *(_DWORD *)algn_1EB32B80C = 0;
          qword_1EB32B850 = 0;
          unk_1EB32B858 = &ggl::globeAtmosphereShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B868 = 0;
          unk_1EB32B870 = 0;
          qword_1EB32B860 = 0;
        }
        qword_1EB31DCF0 = (uint64_t)&ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
          *(_DWORD *)algn_1EB32C4D4 = 1;
          qword_1EB32C4E8 = 0;
          unk_1EB32C4F0 = &ggl::globeAtmosphereShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C4F8 = 2;
          unk_1EB32C500 = &ggl::globeAtmosphereShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C508 = 0;
          unk_1EB32C510 = &ggl::globeAtmosphereShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C4D8 = (uint64_t)"GlobeAtmosphereShader";
          unk_1EB32C4E0 = 0;
          qword_1EB32C518 = 0;
          unk_1EB32C520 = &ggl::globeAtmosphereShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C530 = 0;
          unk_1EB32C538 = 0;
          qword_1EB32C528 = 0;
        }
        qword_1EB31DCF8 = (uint64_t)&ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
          *(_DWORD *)algn_1EB32BE6C = 0;
          qword_1EB32BE70 = (uint64_t)"GlobeStarsShader";
          unk_1EB32BE78 = ggl::globeStarsShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32BE80 = 1;
          unk_1EB32BE88 = &ggl::globeStarsShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32BE90 = 1;
          unk_1EB32BE98 = &ggl::globeStarsShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32BEA0 = 0;
          unk_1EB32BEA8 = &ggl::globeStarsShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB32BEB0 = 0;
          unk_1EB32BEB8 = &ggl::globeStarsShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32BEC8 = 0;
          unk_1EB32BED0 = 0;
          qword_1EB32BEC0 = 0;
        }
        qword_1EB31DD00 = (uint64_t)&ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
          *(_DWORD *)algn_1EB32BF54 = 1;
          qword_1EB32BF68 = 0;
          unk_1EB32BF70 = &ggl::globeStarsShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32BF78 = 0;
          unk_1EB32BF80 = &ggl::globeStarsShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32BF88 = 0;
          unk_1EB32BF90 = &ggl::globeStarsShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32BF58 = (uint64_t)"GlobeStarsShader";
          unk_1EB32BF60 = 0;
          qword_1EB32BF98 = 0;
          unk_1EB32BFA0 = &ggl::globeStarsShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32BFB0 = 0;
          unk_1EB32BFB8 = 0;
          qword_1EB32BFA8 = 0;
        }
        qword_1EB31DD08 = (uint64_t)&ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v171 = ggl::crc32::compute<17ul>("GlowShaderVertex");
          qword_1EB323D50 = (uint64_t)"GlowShader";
          unk_1EB323D58 = ggl::glowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323D60 = 1;
          unk_1EB323D68 = &ggl::glowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323D70 = 3;
          unk_1EB323D78 = &ggl::glowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323D80 = 0;
          unk_1EB323D88 = &ggl::glowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::glowShaderVertexFunctionDescriptor(void)::ref = v171;
          *(_DWORD *)algn_1EB323D4C = 0;
          qword_1EB323D90 = 0;
          unk_1EB323D98 = &ggl::glowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323DA8 = 0;
          unk_1EB323DB0 = 0;
          qword_1EB323DA0 = 0;
        }
        qword_1EB31DD10 = (uint64_t)&ggl::glowShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::glowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GlowShaderFragment");
          *(_DWORD *)algn_1EB324414 = 1;
          qword_1EB324418 = (uint64_t)"GlowShader";
          unk_1EB324420 = 0;
          qword_1EB324428 = 0;
          unk_1EB324430 = &ggl::glowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324438 = 1;
          unk_1EB324440 = &ggl::glowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB324448 = 0;
          unk_1EB324450 = &ggl::glowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324458 = 0;
          unk_1EB324460 = &ggl::glowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324470 = 0;
          unk_1EB324478 = 0;
          qword_1EB324468 = 0;
        }
        qword_1EB31DD18 = (uint64_t)&ggl::glowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v172 = ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
          qword_1EB324CA8 = (uint64_t)"GlowAlphaShader";
          unk_1EB324CB0 = ggl::glowAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324CB8 = 1;
          unk_1EB324CC0 = &ggl::glowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324CC8 = 3;
          unk_1EB324CD0 = &ggl::glowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324CD8 = 0;
          unk_1EB324CE0 = &ggl::glowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref = v172;
          *(_DWORD *)algn_1EB324CA4 = 0;
          qword_1EB324CE8 = 0;
          unk_1EB324CF0 = &ggl::glowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324D00 = 0;
          unk_1EB324D08 = 0;
          qword_1EB324CF8 = 0;
        }
        qword_1EB31DD20 = (uint64_t)&ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
          *(_DWORD *)algn_1EB32526C = 1;
          qword_1EB325280 = 0;
          unk_1EB325288 = &ggl::glowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB325290 = 0;
          unk_1EB325298 = &ggl::glowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3252A0 = 0;
          unk_1EB3252A8 = &ggl::glowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB325270 = (uint64_t)"GlowAlphaShader";
          unk_1EB325278 = 0;
          qword_1EB3252B0 = 0;
          unk_1EB3252B8 = &ggl::glowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3252C8 = 0;
          unk_1EB3252D0 = 0;
          qword_1EB3252C0 = 0;
        }
        qword_1EB31DD28 = (uint64_t)&ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::glyph3dShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("Glyph3dShaderVertex");
          *(_DWORD *)algn_1EB32482C = 0;
          qword_1EB324830 = (uint64_t)"Glyph3dShader";
          unk_1EB324838 = ggl::glyph3dShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324840 = 1;
          unk_1EB324848 = &ggl::glyph3dShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324850 = 4;
          unk_1EB324858 = &ggl::glyph3dShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324860 = 0;
          unk_1EB324868 = &ggl::glyph3dShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB324870 = 2;
          unk_1EB324878 = &ggl::glyph3dShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324888 = 0;
          unk_1EB324890 = 0;
          qword_1EB324880 = 2;
        }
        qword_1EB31DD30 = (uint64_t)&ggl::glyph3dShaderVertexFunctionDescriptor(void)::ref;
        {
          int v173 = ggl::crc32::compute<22ul>("Glyph3dShaderFragment");
          qword_1EB324D28 = 0;
          unk_1EB324D30 = &ggl::glyph3dShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324D38 = 2;
          unk_1EB324D40 = &ggl::glyph3dShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dShaderFragmentFunctionDescriptor(void)::ref = v173;
          *(_DWORD *)algn_1EB324D14 = 1;
          qword_1EB324D48 = 0;
          unk_1EB324D50 = &ggl::glyph3dShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324D18 = (uint64_t)"Glyph3dShader";
          unk_1EB324D20 = 0;
          qword_1EB324D58 = 1;
          unk_1EB324D60 = &ggl::glyph3dShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324D70 = 0;
          unk_1EB324D78 = 0;
          qword_1EB324D68 = 1;
        }
        qword_1EB31DD38 = (uint64_t)&ggl::glyph3dShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
          *(_DWORD *)algn_1EB32868C = 0;
          qword_1EB328690 = (uint64_t)"Glyph3dLowPrecisionShader";
          unk_1EB328698 = ggl::glyph3dLowPrecisionShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3286A0 = 1;
          unk_1EB3286A8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3286B0 = 4;
          unk_1EB3286B8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3286C0 = 0;
          unk_1EB3286C8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB3286D0 = 2;
          unk_1EB3286D8 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3286E8 = 0;
          unk_1EB3286F0 = 0;
          qword_1EB3286E0 = 2;
        }
        qword_1EB31DD40 = (uint64_t)&ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref;
        {
          int v174 = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
          qword_1EB3291F8 = 0;
          unk_1EB329200 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329208 = 2;
          unk_1EB329210 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref = v174;
          *(_DWORD *)algn_1EB3291E4 = 1;
          qword_1EB329218 = 0;
          unk_1EB329220 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3291E8 = (uint64_t)"Glyph3dLowPrecisionShader";
          unk_1EB3291F0 = 0;
          qword_1EB329228 = 1;
          unk_1EB329230 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329240 = 0;
          unk_1EB329248 = 0;
          qword_1EB329238 = 1;
        }
        qword_1EB31DD48 = (uint64_t)&ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
          *(_DWORD *)algn_1EB329AEC = 0;
          qword_1EB329AF0 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
          unk_1EB329AF8 = ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329B00 = 1;
          unk_1EB329B08 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329B10 = 4;
          unk_1EB329B18 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329B20 = 0;
          unk_1EB329B28 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB329B30 = 2;
          unk_1EB329B38 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329B48 = 0;
          unk_1EB329B50 = 0;
          qword_1EB329B40 = 2;
        }
        qword_1EB31DD50 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref;
        {
          int v175 = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
          qword_1EB32A418 = 0;
          unk_1EB32A420 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A428 = 2;
          unk_1EB32A430 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref = v175;
          *(_DWORD *)algn_1EB32A404 = 1;
          qword_1EB32A438 = 0;
          unk_1EB32A440 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A408 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
          unk_1EB32A410 = 0;
          qword_1EB32A448 = 1;
          unk_1EB32A450 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A460 = 0;
          unk_1EB32A468 = 0;
          qword_1EB32A458 = 1;
        }
        qword_1EB31DD58 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
          *(_DWORD *)algn_1EB32C3EC = 0;
          qword_1EB32C3F0 = (uint64_t)"Glyph3dRaymarchShader";
          unk_1EB32C3F8 = ggl::glyph3dRaymarchShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32C400 = 1;
          unk_1EB32C408 = &ggl::glyph3dRaymarchShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C410 = 4;
          unk_1EB32C418 = &ggl::glyph3dRaymarchShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C420 = 0;
          unk_1EB32C428 = &ggl::glyph3dRaymarchShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C430 = 2;
          unk_1EB32C438 = &ggl::glyph3dRaymarchShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C448 = 0;
          unk_1EB32C450 = 0;
          qword_1EB32C440 = 2;
        }
        qword_1EB31DD60 = (uint64_t)&ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref;
        {
          int v176 = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
          qword_1EB32C558 = 0;
          unk_1EB32C560 = &ggl::glyph3dRaymarchShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C568 = 2;
          unk_1EB32C570 = &ggl::glyph3dRaymarchShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref = v176;
          *(_DWORD *)algn_1EB32C544 = 1;
          qword_1EB32C578 = 0;
          unk_1EB32C580 = &ggl::glyph3dRaymarchShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C548 = (uint64_t)"Glyph3dRaymarchShader";
          unk_1EB32C550 = 0;
          qword_1EB32C588 = 1;
          unk_1EB32C590 = &ggl::glyph3dRaymarchShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C5A0 = 0;
          unk_1EB32C5A8 = 0;
          qword_1EB32C598 = 1;
        }
        qword_1EB31DD68 = (uint64_t)&ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v177 = ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
          qword_1EB328700 = (uint64_t)"GlyphWithNormalHaloShader";
          unk_1EB328708 = ggl::glyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB328710 = 1;
          unk_1EB328718 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328720 = 2;
          unk_1EB328728 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328730 = 0;
          unk_1EB328738 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v177;
          *(_DWORD *)algn_1EB3286FC = 0;
          qword_1EB328740 = 1;
          unk_1EB328748 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328758 = 0;
          unk_1EB328760 = 0;
          qword_1EB328750 = 1;
        }
        qword_1EB31DD70 = (uint64_t)&ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
        {
          int v178 = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
          qword_1EB329268 = 0;
          unk_1EB329270 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329278 = 2;
          unk_1EB329280 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = v178;
          *(_DWORD *)algn_1EB329254 = 1;
          qword_1EB329288 = 0;
          unk_1EB329290 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329258 = (uint64_t)"GlyphWithNormalHaloShader";
          unk_1EB329260 = 0;
          qword_1EB329298 = 1;
          unk_1EB3292A0 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3292B0 = 0;
          unk_1EB3292B8 = 0;
          qword_1EB3292A8 = 1;
        }
        qword_1EB31DD78 = (uint64_t)&ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32AAE0 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1EB32AAE8 = ggl::gradientPolylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32AAF0 = 1;
          unk_1EB32AAF8 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AB00 = 3;
          unk_1EB32AB08 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AB10 = 0;
          unk_1EB32AB18 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = 878884475;
          qword_1EB32AB20 = 0;
          unk_1EB32AB28 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AB38 = 0;
          unk_1EB32AB40 = 0;
          qword_1EB32AB30 = 0;
        }
        qword_1EB31DD80 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = 0x1AE8C75D5;
          qword_1EB32AE78 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1EB32AE80 = 0;
          qword_1EB32AE88 = 0;
          unk_1EB32AE90 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AE98 = 2;
          unk_1EB32AEA0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AEA8 = 0;
          unk_1EB32AEB0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AEB8 = 1;
          unk_1EB32AEC0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AED0 = 0;
          unk_1EB32AED8 = 0;
          qword_1EB32AEC8 = 1;
        }
        qword_1EB31DD88 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32ACA0 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1EB32ACA8 = ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32ACB0 = 1;
          unk_1EB32ACB8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32ACC0 = 3;
          unk_1EB32ACC8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32ACD0 = 0;
          unk_1EB32ACD8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = 1527713323;
          qword_1EB32ACE0 = 0;
          unk_1EB32ACE8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32ACF8 = 0;
          unk_1EB32AD00 = 0;
          qword_1EB32ACF0 = 0;
        }
        qword_1EB31DD90 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x1D18D7C52;
          qword_1EB32AFC8 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1EB32AFD0 = 0;
          qword_1EB32AFD8 = 0;
          unk_1EB32AFE0 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AFE8 = 2;
          unk_1EB32AFF0 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AFF8 = 0;
          unk_1EB32B000 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32B008 = 1;
          unk_1EB32B010 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B020 = 0;
          unk_1EB32B028 = 0;
          qword_1EB32B018 = 1;
        }
        qword_1EB31DD98 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32B040 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1EB32B048 = ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32B050 = 1;
          unk_1EB32B058 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32B060 = 3;
          unk_1EB32B068 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32B070 = 0;
          unk_1EB32B078 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = 503820842;
          qword_1EB32B080 = 0;
          unk_1EB32B088 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B098 = 0;
          unk_1EB32B0A0 = 0;
          qword_1EB32B090 = 0;
        }
        qword_1EB31DDA0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x10A41F7BCLL;
          qword_1EB32B0B8 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1EB32B0C0 = 0;
          qword_1EB32B0C8 = 0;
          unk_1EB32B0D0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32B0D8 = 2;
          unk_1EB32B0E0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32B0E8 = 0;
          unk_1EB32B0F0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32B0F8 = 1;
          unk_1EB32B100 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B110 = 0;
          unk_1EB32B118 = 0;
          qword_1EB32B108 = 1;
        }
        qword_1EB31DDA8 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v179 = ggl::crc32::compute<17ul>("GridShaderVertex");
          qword_1EB323DC8 = (uint64_t)"GridShader";
          unk_1EB323DD0 = ggl::gridShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323DD8 = 1;
          unk_1EB323DE0 = &ggl::gridShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323DE8 = 4;
          unk_1EB323DF0 = &ggl::gridShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323DF8 = 0;
          unk_1EB323E00 = &ggl::gridShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gridShaderVertexFunctionDescriptor(void)::ref = v179;
          *(_DWORD *)algn_1EB323DC4 = 0;
          qword_1EB323E08 = 0;
          unk_1EB323E10 = &ggl::gridShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323E20 = 0;
          unk_1EB323E28 = 0;
          qword_1EB323E18 = 0;
        }
        qword_1EB31DDB0 = (uint64_t)&ggl::gridShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::gridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GridShaderFragment");
          *(_DWORD *)algn_1EB32448C = 1;
          qword_1EB3244A0 = 0;
          unk_1EB3244A8 = &ggl::gridShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3244B0 = 2;
          unk_1EB3244B8 = &ggl::gridShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3244C0 = 0;
          unk_1EB3244C8 = &ggl::gridShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324490 = (uint64_t)"GridShader";
          unk_1EB324498 = 0;
          qword_1EB3244D0 = 0;
          unk_1EB3244D8 = &ggl::gridShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3244E8 = 0;
          unk_1EB3244F0 = 0;
          qword_1EB3244E0 = 0;
        }
        qword_1EB31DDB8 = (uint64_t)&ggl::gridShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v180 = ggl::crc32::compute<19ul>("GridUVShaderVertex");
          qword_1E958BF38 = (uint64_t)"GridUVShader";
          unk_1E958BF40 = ggl::gridUVShaderVertShaderFunctionAttributes(void)::ref;
          qword_1E958BF48 = 1;
          unk_1E958BF50 = &ggl::gridUVShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1E958BF58 = 4;
          unk_1E958BF60 = &ggl::gridUVShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1E958BF68 = 0;
          unk_1E958BF70 = &ggl::gridUVShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gridUVShaderVertexFunctionDescriptor(void)::ref = v180;
          *(_DWORD *)algn_1E958BF34 = 0;
          qword_1E958BF78 = 0;
          unk_1E958BF80 = &ggl::gridUVShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1E958BF90 = 0;
          unk_1E958BF98 = 0;
          qword_1E958BF88 = 0;
        }
        qword_1EB31DDC0 = (uint64_t)&ggl::gridUVShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::gridUVShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("GridUVShaderFragment");
          *(_DWORD *)algn_1E958C01C = 1;
          qword_1E958C030 = 0;
          unk_1E958C038 = &ggl::gridUVShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1E958C040 = 2;
          unk_1E958C048 = &ggl::gridUVShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1E958C050 = 0;
          unk_1E958C058 = &ggl::gridUVShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1E958C020 = (uint64_t)"GridUVShader";
          unk_1E958C028 = 0;
          qword_1E958C060 = 0;
          unk_1E958C068 = &ggl::gridUVShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C078 = 0;
          unk_1E958C080 = 0;
          qword_1E958C070 = 0;
        }
        qword_1EB31DDC8 = (uint64_t)&ggl::gridUVShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v181 = ggl::crc32::compute<17ul>("IconShaderVertex");
          qword_1EB323E40 = (uint64_t)"IconShader";
          unk_1EB323E48 = ggl::iconShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323E50 = 1;
          unk_1EB323E58 = &ggl::iconShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323E60 = 2;
          unk_1EB323E68 = &ggl::iconShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323E70 = 0;
          unk_1EB323E78 = &ggl::iconShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::iconShaderVertexFunctionDescriptor(void)::ref = v181;
          *(_DWORD *)algn_1EB323E3C = 0;
          qword_1EB323E80 = 1;
          unk_1EB323E88 = &ggl::iconShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323E98 = 0;
          unk_1EB323EA0 = 0;
          qword_1EB323E90 = 1;
        }
        qword_1EB31DDD0 = (uint64_t)&ggl::iconShaderVertexFunctionDescriptor(void)::ref;
        {
          int v182 = ggl::crc32::compute<19ul>("IconShaderFragment");
          qword_1EB324518 = 0;
          unk_1EB324520 = &ggl::iconShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324528 = 1;
          unk_1EB324530 = &ggl::iconShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::iconShaderFragmentFunctionDescriptor(void)::ref = v182;
          *(_DWORD *)algn_1EB324504 = 1;
          qword_1EB324538 = 0;
          unk_1EB324540 = &ggl::iconShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324508 = (uint64_t)"IconShader";
          unk_1EB324510 = 0;
          qword_1EB324548 = 1;
          unk_1EB324550 = &ggl::iconShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324560 = 0;
          unk_1EB324568 = 0;
          qword_1EB324558 = 1;
        }
        qword_1EB31DDD8 = (uint64_t)&ggl::iconShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
          *(_DWORD *)algn_1EB317DDC = 0;
          qword_1EB317DE0 = (uint64_t)"MaskedIconShader";
          unk_1EB317DE8 = ggl::maskedIconShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB317DF0 = 1;
          unk_1EB317DF8 = &ggl::maskedIconShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB317E00 = 4;
          unk_1EB317E08 = &ggl::maskedIconShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB317E10 = 0;
          unk_1EB317E18 = &ggl::maskedIconShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB317E20 = 2;
          unk_1EB317E28 = &ggl::maskedIconShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317E38 = 0;
          unk_1EB317E40 = 0;
          qword_1EB317E30 = 2;
        }
        qword_1EB31DDE0 = (uint64_t)&ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref;
        {
          int v183 = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
          qword_1EB317ED8 = 0;
          unk_1EB317EE0 = &ggl::maskedIconShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB317EE8 = 1;
          unk_1EB317EF0 = &ggl::maskedIconShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref = v183;
          *(_DWORD *)algn_1EB317EC4 = 1;
          qword_1EB317EF8 = 0;
          unk_1EB317F00 = &ggl::maskedIconShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB317EC8 = (uint64_t)"MaskedIconShader";
          unk_1EB317ED0 = 0;
          qword_1EB317F08 = 1;
          unk_1EB317F10 = &ggl::maskedIconShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317F20 = 0;
          unk_1EB317F28 = 0;
          qword_1EB317F18 = 1;
        }
        qword_1EB31DDE8 = (uint64_t)&ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::waypointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("WaypointShaderVertex");
          *(_DWORD *)algn_1EB31C58C = 0;
          qword_1EB31C590 = (uint64_t)"WaypointShader";
          unk_1EB31C598 = ggl::waypointShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31C5A0 = 1;
          unk_1EB31C5A8 = &ggl::waypointShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C5B0 = 4;
          unk_1EB31C5B8 = &ggl::waypointShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C5C0 = 0;
          unk_1EB31C5C8 = &ggl::waypointShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB31C5D0 = 2;
          unk_1EB31C5D8 = &ggl::waypointShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C5E8 = 0;
          unk_1EB31C5F0 = 0;
          qword_1EB31C5E0 = 2;
        }
        qword_1EB31DDF0 = (uint64_t)&ggl::waypointShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::waypointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("WaypointShaderFragment");
          *(_DWORD *)algn_1EB31C674 = 1;
          qword_1EB31C678 = (uint64_t)"WaypointShader";
          unk_1EB31C680 = 0;
          qword_1EB31C688 = 0;
          unk_1EB31C690 = &ggl::waypointShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C698 = 1;
          unk_1EB31C6A0 = &ggl::waypointShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C6A8 = 0;
          unk_1EB31C6B0 = &ggl::waypointShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31C6B8 = 0;
          unk_1EB31C6C0 = &ggl::waypointShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C6D0 = 0;
          unk_1EB31C6D8 = 0;
          qword_1EB31C6C8 = 0;
        }
        qword_1EB31DDF8 = (uint64_t)&ggl::waypointShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::shadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ShadowShaderVertex");
          *(_DWORD *)algn_1E958BFAC = 0;
          qword_1E958BFB0 = (uint64_t)"ShadowShader";
          unk_1E958BFB8 = ggl::shadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1E958BFC0 = 1;
          unk_1E958BFC8 = &ggl::shadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1E958BFD0 = 3;
          unk_1E958BFD8 = &ggl::shadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1E958BFE0 = 0;
          unk_1E958BFE8 = &ggl::shadowShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1E958BFF0 = 2;
          unk_1E958BFF8 = &ggl::shadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C008 = 0;
          unk_1E958C010 = 0;
          qword_1E958C000 = 2;
        }
        qword_1EB31DE00 = (uint64_t)&ggl::shadowShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::shadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("ShadowShaderFragment");
          *(_DWORD *)algn_1E958C094 = 1;
          qword_1E958C098 = (uint64_t)"ShadowShader";
          unk_1E958C0A0 = 0;
          qword_1E958C0A8 = 0;
          unk_1E958C0B0 = &ggl::shadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1E958C0B8 = 1;
          unk_1E958C0C0 = &ggl::shadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1E958C0C8 = 0;
          unk_1E958C0D0 = &ggl::shadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1E958C0D8 = 0;
          unk_1E958C0E0 = &ggl::shadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C0F0 = 0;
          unk_1E958C0F8 = 0;
          qword_1E958C0E8 = 0;
        }
        qword_1EB31DE08 = (uint64_t)&ggl::shadowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v184 = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
          qword_1EB324D90 = (uint64_t)"ImageCopyShader";
          unk_1EB324D98 = ggl::imageCopyShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324DA0 = 1;
          unk_1EB324DA8 = &ggl::imageCopyShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324DB0 = 0;
          unk_1EB324DB8 = &ggl::imageCopyShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324DC0 = 0;
          unk_1EB324DC8 = &ggl::imageCopyShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref = v184;
          *(_DWORD *)algn_1EB324D8C = 0;
          qword_1EB324DD0 = 0;
          unk_1EB324DD8 = &ggl::imageCopyShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324DE8 = 0;
          unk_1EB324DF0 = 0;
          qword_1EB324DE0 = 0;
        }
        qword_1EB31DE10 = (uint64_t)&ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref;
        {
          int v185 = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
          qword_1EB3252F8 = 0;
          unk_1EB325300 = &ggl::imageCopyShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB325308 = 0;
          unk_1EB325310 = &ggl::imageCopyShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref = v185;
          *(_DWORD *)algn_1EB3252E4 = 1;
          qword_1EB325318 = 0;
          unk_1EB325320 = &ggl::imageCopyShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3252E8 = (uint64_t)"ImageCopyShader";
          unk_1EB3252F0 = 0;
          qword_1EB325328 = 1;
          unk_1EB325330 = &ggl::imageCopyShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325340 = 0;
          unk_1EB325348 = 0;
          qword_1EB325338 = 1;
        }
        qword_1EB31DE18 = (uint64_t)&ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v186 = ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
          qword_1EB325CC0 = (uint64_t)"LandmarkDepthShader";
          unk_1EB325CC8 = ggl::landmarkDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325CD0 = 1;
          unk_1EB325CD8 = &ggl::landmarkDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325CE0 = 2;
          unk_1EB325CE8 = &ggl::landmarkDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325CF0 = 0;
          unk_1EB325CF8 = &ggl::landmarkDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref = v186;
          *(_DWORD *)algn_1EB325CBC = 0;
          qword_1EB325D00 = 0;
          unk_1EB325D08 = &ggl::landmarkDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325D18 = 0;
          unk_1EB325D20 = 0;
          qword_1EB325D10 = 0;
        }
        qword_1EB31DE20 = (uint64_t)&ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
          *(_DWORD *)algn_1EB326BB4 = 1;
          qword_1EB326BC8 = 0;
          unk_1EB326BD0 = &ggl::landmarkDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326BD8 = 0;
          unk_1EB326BE0 = &ggl::landmarkDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB326BE8 = 0;
          unk_1EB326BF0 = &ggl::landmarkDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326BB8 = (uint64_t)"LandmarkDepthShader";
          unk_1EB326BC0 = 0;
          qword_1EB326BF8 = 0;
          unk_1EB326C00 = &ggl::landmarkDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326C10 = 0;
          unk_1EB326C18 = 0;
          qword_1EB326C08 = 0;
        }
        qword_1EB31DE28 = (uint64_t)&ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v187 = ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
          qword_1EB3258B0 = (uint64_t)"LandmarkFlatShader";
          unk_1EB3258B8 = ggl::landmarkFlatShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3258C0 = 1;
          unk_1EB3258C8 = &ggl::landmarkFlatShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3258D0 = 4;
          unk_1EB3258D8 = &ggl::landmarkFlatShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3258E0 = 0;
          unk_1EB3258E8 = &ggl::landmarkFlatShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref = v187;
          *(_DWORD *)algn_1EB3258AC = 0;
          qword_1EB3258F0 = 0;
          unk_1EB3258F8 = &ggl::landmarkFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325908 = 0;
          unk_1EB325910 = 0;
          qword_1EB325900 = 0;
        }
        qword_1EB31DE30 = (uint64_t)&ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref;
        {
          int v188 = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
          qword_1EB3264E8 = 0;
          unk_1EB3264F0 = &ggl::landmarkFlatShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3264F8 = 1;
          unk_1EB326500 = &ggl::landmarkFlatShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref = v188;
          *(_DWORD *)algn_1EB3264D4 = 1;
          qword_1EB326508 = 0;
          unk_1EB326510 = &ggl::landmarkFlatShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3264D8 = (uint64_t)"LandmarkFlatShader";
          unk_1EB3264E0 = 0;
          qword_1EB326518 = 1;
          unk_1EB326520 = &ggl::landmarkFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326530 = 0;
          unk_1EB326538 = 0;
          qword_1EB326528 = 1;
        }
        qword_1EB31DE38 = (uint64_t)&ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::lineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("LineShaderVertex");
          *(_DWORD *)algn_1EB323EB4 = 0;
          qword_1EB323EB8 = (uint64_t)"LineShader";
          unk_1EB323EC0 = ggl::lineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323EC8 = 1;
          unk_1EB323ED0 = &ggl::lineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323ED8 = 1;
          unk_1EB323EE0 = &ggl::lineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323EE8 = 0;
          unk_1EB323EF0 = &ggl::lineShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB323EF8 = 0;
          unk_1EB323F00 = &ggl::lineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323F10 = 0;
          unk_1EB323F18 = 0;
          qword_1EB323F08 = 0;
        }
        qword_1EB31DE40 = (uint64_t)&ggl::lineShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::lineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("LineShaderFragment");
          *(_DWORD *)algn_1EB32457C = 1;
          qword_1EB324580 = (uint64_t)"LineShader";
          unk_1EB324588 = 0;
          qword_1EB324590 = 0;
          unk_1EB324598 = &ggl::lineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3245A0 = 1;
          unk_1EB3245A8 = &ggl::lineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3245B0 = 0;
          unk_1EB3245B8 = &ggl::lineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3245C0 = 0;
          unk_1EB3245C8 = &ggl::lineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3245D8 = 0;
          unk_1EB3245E0 = 0;
          qword_1EB3245D0 = 0;
        }
        qword_1EB31DE48 = (uint64_t)&ggl::lineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v189 = ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
          qword_1EB325D30 = (uint64_t)"ManeuverPointShader";
          unk_1EB325D38 = ggl::maneuverPointShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325D40 = 1;
          unk_1EB325D48 = &ggl::maneuverPointShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325D50 = 2;
          unk_1EB325D58 = &ggl::maneuverPointShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325D60 = 0;
          unk_1EB325D68 = &ggl::maneuverPointShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref = v189;
          *(_DWORD *)algn_1EB325D2C = 0;
          qword_1EB325D70 = 0;
          unk_1EB325D78 = &ggl::maneuverPointShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325D88 = 0;
          unk_1EB325D90 = 0;
          qword_1EB325D80 = 0;
        }
        qword_1EB31DE50 = (uint64_t)&ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref;
        {
          int v190 = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
          qword_1EB326C38 = 0;
          unk_1EB326C40 = &ggl::maneuverPointShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326C48 = 1;
          unk_1EB326C50 = &ggl::maneuverPointShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref = v190;
          *(_DWORD *)algn_1EB326C24 = 1;
          qword_1EB326C58 = 0;
          unk_1EB326C60 = &ggl::maneuverPointShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326C28 = (uint64_t)"ManeuverPointShader";
          unk_1EB326C30 = 0;
          qword_1EB326C68 = 1;
          unk_1EB326C70 = &ggl::maneuverPointShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326C80 = 0;
          unk_1EB326C88 = 0;
          qword_1EB326C78 = 1;
        }
        qword_1EB31DE58 = (uint64_t)&ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
          *(_DWORD *)algn_1EB325DA4 = 0;
          qword_1EB325DA8 = (uint64_t)"OcclusionLineShader";
          unk_1EB325DB0 = ggl::occlusionLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325DB8 = 1;
          unk_1EB325DC0 = &ggl::occlusionLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325DC8 = 1;
          unk_1EB325DD0 = &ggl::occlusionLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325DD8 = 0;
          unk_1EB325DE0 = &ggl::occlusionLineShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB325DE8 = 0;
          unk_1EB325DF0 = &ggl::occlusionLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325E00 = 0;
          unk_1EB325E08 = 0;
          qword_1EB325DF8 = 0;
        }
        qword_1EB31DE60 = (uint64_t)&ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
          *(_DWORD *)algn_1EB326C9C = 1;
          qword_1EB326CA0 = (uint64_t)"OcclusionLineShader";
          unk_1EB326CA8 = 0;
          qword_1EB326CB0 = 0;
          unk_1EB326CB8 = &ggl::occlusionLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326CC0 = 1;
          unk_1EB326CC8 = &ggl::occlusionLineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB326CD0 = 0;
          unk_1EB326CD8 = &ggl::occlusionLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326CE0 = 0;
          unk_1EB326CE8 = &ggl::occlusionLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326CF8 = 0;
          unk_1EB326D00 = 0;
          qword_1EB326CF0 = 0;
        }
        qword_1EB31DE68 = (uint64_t)&ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v191 = ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
          qword_1EB3272F8 = (uint64_t)"OptimizedTrafficShader";
          unk_1EB327300 = ggl::optimizedTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327308 = 1;
          unk_1EB327310 = &ggl::optimizedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327318 = 3;
          unk_1EB327320 = &ggl::optimizedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327328 = 0;
          unk_1EB327330 = &ggl::optimizedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref = v191;
          *(_DWORD *)algn_1EB3272F4 = 0;
          qword_1EB327338 = 0;
          unk_1EB327340 = &ggl::optimizedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327350 = 0;
          unk_1EB327358 = 0;
          qword_1EB327348 = 0;
        }
        qword_1EB31DE70 = (uint64_t)&ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
          *(_DWORD *)algn_1EB32804C = 1;
          qword_1EB328050 = (uint64_t)"OptimizedTrafficShader";
          unk_1EB328058 = 0;
          qword_1EB328060 = 0;
          unk_1EB328068 = &ggl::optimizedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328070 = 1;
          unk_1EB328078 = &ggl::optimizedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB328080 = 0;
          unk_1EB328088 = &ggl::optimizedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328090 = 0;
          unk_1EB328098 = &ggl::optimizedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3280A8 = 0;
          unk_1EB3280B0 = 0;
          qword_1EB3280A0 = 0;
        }
        qword_1EB31DE78 = (uint64_t)&ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v192 = ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
          qword_1EB327A70 = (uint64_t)"OuterShadowRibbonShader";
          unk_1EB327A78 = ggl::outerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327A80 = 1;
          unk_1EB327A88 = &ggl::outerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327A90 = 3;
          unk_1EB327A98 = &ggl::outerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327AA0 = 0;
          unk_1EB327AA8 = &ggl::outerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v192;
          *(_DWORD *)algn_1EB327A6C = 0;
          qword_1EB327AB0 = 0;
          unk_1EB327AB8 = &ggl::outerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327AC8 = 0;
          unk_1EB327AD0 = 0;
          qword_1EB327AC0 = 0;
        }
        qword_1EB31DE80 = (uint64_t)&ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          int v193 = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
          qword_1EB328788 = 0;
          unk_1EB328790 = &ggl::outerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328798 = 1;
          unk_1EB3287A0 = &ggl::outerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = v193;
          *(_DWORD *)algn_1EB328774 = 1;
          qword_1EB3287A8 = 0;
          unk_1EB3287B0 = &ggl::outerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328778 = (uint64_t)"OuterShadowRibbonShader";
          unk_1EB328780 = 0;
          qword_1EB3287B8 = 1;
          unk_1EB3287C0 = &ggl::outerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3287D0 = 0;
          unk_1EB3287D8 = 0;
          qword_1EB3287C8 = 1;
        }
        qword_1EB31DE88 = (uint64_t)&ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v194 = ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
          qword_1EB328138 = (uint64_t)"PolygonOverlayFillShader";
          unk_1EB328140 = ggl::polygonOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB328148 = 1;
          unk_1EB328150 = &ggl::polygonOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328158 = 3;
          unk_1EB328160 = &ggl::polygonOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328168 = 0;
          unk_1EB328170 = &ggl::polygonOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref = v194;
          *(_DWORD *)algn_1EB328134 = 0;
          qword_1EB328178 = 0;
          unk_1EB328180 = &ggl::polygonOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328190 = 0;
          unk_1EB328198 = 0;
          qword_1EB328188 = 0;
        }
        qword_1EB31DE90 = (uint64_t)&ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
          *(_DWORD *)algn_1EB328DCC = 1;
          qword_1EB328DE0 = 0;
          unk_1EB328DE8 = &ggl::polygonOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328DF0 = 2;
          unk_1EB328DF8 = &ggl::polygonOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB328E00 = 0;
          unk_1EB328E08 = &ggl::polygonOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328DD0 = (uint64_t)"PolygonOverlayFillShader";
          unk_1EB328DD8 = 0;
          qword_1EB328E10 = 0;
          unk_1EB328E18 = &ggl::polygonOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328E28 = 0;
          unk_1EB328E30 = 0;
          qword_1EB328E20 = 0;
        }
        qword_1EB31DE98 = (uint64_t)&ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v195 = ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
          qword_1EB329CB8 = (uint64_t)"PolygonOverlayAntialiasShader";
          unk_1EB329CC0 = ggl::polygonOverlayAntialiasShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329CC8 = 1;
          unk_1EB329CD0 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329CD8 = 3;
          unk_1EB329CE0 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329CE8 = 0;
          unk_1EB329CF0 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref = v195;
          *(_DWORD *)algn_1EB329CB4 = 0;
          qword_1EB329CF8 = 0;
          unk_1EB329D00 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329D10 = 0;
          unk_1EB329D18 = 0;
          qword_1EB329D08 = 0;
        }
        qword_1EB31DEA0 = (uint64_t)&ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref;
        {
          int v196 = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
          qword_1EB32A570 = 0;
          unk_1EB32A578 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A580 = 2;
          unk_1EB32A588 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref = v196;
          *(_DWORD *)algn_1EB32A55C = 1;
          qword_1EB32A590 = 0;
          unk_1EB32A598 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A560 = (uint64_t)"PolygonOverlayAntialiasShader";
          unk_1EB32A568 = 0;
          qword_1EB32A5A0 = 1;
          unk_1EB32A5A8 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A5B8 = 0;
          unk_1EB32A5C0 = 0;
          qword_1EB32A5B0 = 1;
        }
        qword_1EB31DEA8 = (uint64_t)&ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v197 = ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
          qword_1EB318178 = (uint64_t)"MaskingOverlayFillShader";
          unk_1EB318180 = ggl::maskingOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB318188 = 1;
          unk_1EB318190 = &ggl::maskingOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB318198 = 3;
          unk_1EB3181A0 = &ggl::maskingOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3181A8 = 0;
          unk_1EB3181B0 = &ggl::maskingOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref = v197;
          *(_DWORD *)algn_1EB318174 = 0;
          qword_1EB3181B8 = 0;
          unk_1EB3181C0 = &ggl::maskingOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3181D0 = 0;
          unk_1EB3181D8 = 0;
          qword_1EB3181C8 = 0;
        }
        qword_1EB31DEB0 = (uint64_t)&ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        {
          int v198 = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
          qword_1EB3183D0 = 0;
          unk_1EB3183D8 = &ggl::maskingOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3183E0 = 1;
          unk_1EB3183E8 = &ggl::maskingOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref = v198;
          *(_DWORD *)algn_1EB3183BC = 1;
          qword_1EB3183F0 = 0;
          unk_1EB3183F8 = &ggl::maskingOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3183C0 = (uint64_t)"MaskingOverlayFillShader";
          unk_1EB3183C8 = 0;
          qword_1EB318400 = 1;
          unk_1EB318408 = &ggl::maskingOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318418 = 0;
          unk_1EB318420 = 0;
          qword_1EB318410 = 1;
        }
        qword_1EB31DEB8 = (uint64_t)&ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v199 = ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
          qword_1EB3184A8 = (uint64_t)"MaskingOverlayMaskingShader";
          unk_1EB3184B0 = ggl::maskingOverlayMaskingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3184B8 = 1;
          unk_1EB3184C0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3184C8 = 2;
          unk_1EB3184D0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3184D8 = 0;
          unk_1EB3184E0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref = v199;
          *(_DWORD *)algn_1EB3184A4 = 0;
          qword_1EB3184E8 = 0;
          unk_1EB3184F0 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318500 = 0;
          unk_1EB318508 = 0;
          qword_1EB3184F8 = 0;
        }
        qword_1EB31DEC0 = (uint64_t)&ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
          *(_DWORD *)algn_1EB31851C = 1;
          qword_1EB318520 = (uint64_t)"MaskingOverlayMaskingShader";
          unk_1EB318528 = 0;
          qword_1EB318530 = 0;
          unk_1EB318538 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB318540 = 1;
          unk_1EB318548 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB318550 = 0;
          unk_1EB318558 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB318560 = 0;
          unk_1EB318568 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318578 = 0;
          unk_1EB318580 = 0;
          qword_1EB318570 = 0;
        }
        qword_1EB31DEC8 = (uint64_t)&ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v200 = ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
          qword_1EB326D10 = (uint64_t)"PatternedRibbonShader";
          unk_1EB326D18 = ggl::patternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326D20 = 1;
          unk_1EB326D28 = &ggl::patternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326D30 = 4;
          unk_1EB326D38 = &ggl::patternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB326D40 = 0;
          unk_1EB326D48 = &ggl::patternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref = v200;
          *(_DWORD *)algn_1EB326D0C = 0;
          qword_1EB326D50 = 0;
          unk_1EB326D58 = &ggl::patternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326D68 = 0;
          unk_1EB326D70 = 0;
          qword_1EB326D60 = 0;
        }
        qword_1EB31DED0 = (uint64_t)&ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          int v201 = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
          qword_1EB327AF8 = 0;
          unk_1EB327B00 = &ggl::patternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327B08 = 2;
          unk_1EB327B10 = &ggl::patternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref = v201;
          *(_DWORD *)algn_1EB327AE4 = 1;
          qword_1EB327B18 = 0;
          unk_1EB327B20 = &ggl::patternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327AE8 = (uint64_t)"PatternedRibbonShader";
          unk_1EB327AF0 = 0;
          qword_1EB327B28 = 1;
          unk_1EB327B30 = &ggl::patternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327B40 = 0;
          unk_1EB327B48 = 0;
          qword_1EB327B38 = 1;
        }
        qword_1EB31DED8 = (uint64_t)&ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32AC30 = (uint64_t)"WriteStencilPatternedRibbonShader";
          unk_1EB32AC38 = ggl::writeStencilPatternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32AC40 = 1;
          unk_1EB32AC48 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AC50 = 3;
          unk_1EB32AC58 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AC60 = 0;
          unk_1EB32AC68 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref = 3294471237;
          qword_1EB32AC70 = 0;
          unk_1EB32AC78 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AC88 = 0;
          unk_1EB32AC90 = 0;
          qword_1EB32AC80 = 0;
        }
        qword_1EB31DEE0 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32AF68 = 0;
          unk_1EB32AF70 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AF78 = 1;
          unk_1EB32AF80 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x11CF0EFDFLL;
          qword_1EB32AF88 = 0;
          unk_1EB32AF90 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AF58 = (uint64_t)"WriteStencilPatternedRibbonShader";
          unk_1EB32AF60 = 0;
          qword_1EB32AF98 = 0;
          unk_1EB32AFA0 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AFB0 = 0;
          unk_1EB32AFB8 = 0;
          qword_1EB32AFA8 = 0;
        }
        qword_1EB31DEE8 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v202 = ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
          qword_1EB3292C8 = (uint64_t)"PolygonAnimatableFillShader";
          unk_1EB3292D0 = ggl::polygonAnimatableFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3292D8 = 1;
          unk_1EB3292E0 = &ggl::polygonAnimatableFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3292E8 = 3;
          unk_1EB3292F0 = &ggl::polygonAnimatableFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3292F8 = 0;
          unk_1EB329300 = &ggl::polygonAnimatableFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref = v202;
          *(_DWORD *)algn_1EB3292C4 = 0;
          qword_1EB329308 = 0;
          unk_1EB329310 = &ggl::polygonAnimatableFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329320 = 0;
          unk_1EB329328 = 0;
          qword_1EB329318 = 0;
        }
        qword_1EB31DEF0 = (uint64_t)&ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
          *(_DWORD *)algn_1EB329BCC = 1;
          qword_1EB329BE0 = 0;
          unk_1EB329BE8 = &ggl::polygonAnimatableFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329BF0 = 2;
          unk_1EB329BF8 = &ggl::polygonAnimatableFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB329C00 = 0;
          unk_1EB329C08 = &ggl::polygonAnimatableFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329BD0 = (uint64_t)"PolygonAnimatableFillShader";
          unk_1EB329BD8 = 0;
          qword_1EB329C10 = 2;
          unk_1EB329C18 = &ggl::polygonAnimatableFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329C28 = 0;
          unk_1EB329C30 = 0;
          qword_1EB329C20 = 2;
        }
        qword_1EB31DEF8 = (uint64_t)&ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v203 = ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
          qword_1EB329C40 = (uint64_t)"PolygonAnimatableStrokeShader";
          unk_1EB329C48 = ggl::polygonAnimatableStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329C50 = 1;
          unk_1EB329C58 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329C60 = 3;
          unk_1EB329C68 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329C70 = 0;
          unk_1EB329C78 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref = v203;
          *(_DWORD *)algn_1EB329C3C = 0;
          qword_1EB329C80 = 0;
          unk_1EB329C88 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329C98 = 0;
          unk_1EB329CA0 = 0;
          qword_1EB329C90 = 0;
        }
        qword_1EB31DF00 = (uint64_t)&ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
          *(_DWORD *)algn_1EB32A4E4 = 1;
          qword_1EB32A4F8 = 0;
          unk_1EB32A500 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A508 = 3;
          unk_1EB32A510 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A518 = 0;
          unk_1EB32A520 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A4E8 = (uint64_t)"PolygonAnimatableStrokeShader";
          unk_1EB32A4F0 = 0;
          qword_1EB32A528 = 3;
          unk_1EB32A530 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A540 = 0;
          unk_1EB32A548 = 0;
          qword_1EB32A538 = 3;
        }
        qword_1EB31DF08 = (uint64_t)&ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v204 = ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
          qword_1EB325358 = (uint64_t)"PolygonFillShader";
          unk_1EB325360 = ggl::polygonFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325368 = 1;
          unk_1EB325370 = &ggl::polygonFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325378 = 3;
          unk_1EB325380 = &ggl::polygonFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325388 = 0;
          unk_1EB325390 = &ggl::polygonFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref = v204;
          *(_DWORD *)algn_1EB325354 = 0;
          qword_1EB325398 = 0;
          unk_1EB3253A0 = &ggl::polygonFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3253B0 = 0;
          unk_1EB3253B8 = 0;
          qword_1EB3253A8 = 0;
        }
        qword_1EB31DF10 = (uint64_t)&ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref;
        {
          int v205 = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
          qword_1EB325EA0 = 0;
          unk_1EB325EA8 = &ggl::polygonFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB325EB0 = 1;
          unk_1EB325EB8 = &ggl::polygonFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref = v205;
          *(_DWORD *)algn_1EB325E8C = 1;
          qword_1EB325EC0 = 0;
          unk_1EB325EC8 = &ggl::polygonFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB325E90 = (uint64_t)"PolygonFillShader";
          unk_1EB325E98 = 0;
          qword_1EB325ED0 = 1;
          unk_1EB325ED8 = &ggl::polygonFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325EE8 = 0;
          unk_1EB325EF0 = 0;
          qword_1EB325EE0 = 1;
        }
        qword_1EB31DF18 = (uint64_t)&ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v206 = ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
          qword_1EB329340 = (uint64_t)"PolygonShadowedStrokeShader";
          unk_1EB329348 = ggl::polygonShadowedStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329350 = 1;
          unk_1EB329358 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329360 = 3;
          unk_1EB329368 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329370 = 0;
          unk_1EB329378 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref = v206;
          *(_DWORD *)algn_1EB32933C = 0;
          qword_1EB329380 = 0;
          unk_1EB329388 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329398 = 0;
          unk_1EB3293A0 = 0;
          qword_1EB329390 = 0;
        }
        qword_1EB31DF20 = (uint64_t)&ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
          *(_DWORD *)algn_1EB329D24 = 1;
          qword_1EB329D28 = (uint64_t)"PolygonShadowedStrokeShader";
          unk_1EB329D30 = 0;
          qword_1EB329D38 = 0;
          unk_1EB329D40 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329D48 = 1;
          unk_1EB329D50 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB329D58 = 0;
          unk_1EB329D60 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329D68 = 0;
          unk_1EB329D70 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329D80 = 0;
          unk_1EB329D88 = 0;
          qword_1EB329D78 = 0;
        }
        qword_1EB31DF28 = (uint64_t)&ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v207 = ggl::crc32::compute<29ul>("PolygonSolidFillShaderVertex");
          qword_1EB327370 = (uint64_t)"PolygonSolidFillShader";
          unk_1EB327378 = ggl::polygonSolidFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327380 = 1;
          unk_1EB327388 = &ggl::polygonSolidFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327390 = 3;
          unk_1EB327398 = &ggl::polygonSolidFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3273A0 = 0;
          unk_1EB3273A8 = &ggl::polygonSolidFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonSolidFillShaderVertexFunctionDescriptor(void)::ref = v207;
          *(_DWORD *)algn_1EB32736C = 0;
          qword_1EB3273B0 = 0;
          unk_1EB3273B8 = &ggl::polygonSolidFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3273C8 = 0;
          unk_1EB3273D0 = 0;
          qword_1EB3273C0 = 0;
        }
        qword_1EB31DF30 = (uint64_t)&ggl::polygonSolidFillShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonSolidFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PolygonSolidFillShaderFragment");
          *(_DWORD *)algn_1EB3281A4 = 1;
          qword_1EB3281A8 = (uint64_t)"PolygonSolidFillShader";
          unk_1EB3281B0 = 0;
          qword_1EB3281B8 = 0;
          unk_1EB3281C0 = &ggl::polygonSolidFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3281C8 = 1;
          unk_1EB3281D0 = &ggl::polygonSolidFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3281D8 = 0;
          unk_1EB3281E0 = &ggl::polygonSolidFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3281E8 = 0;
          unk_1EB3281F0 = &ggl::polygonSolidFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328200 = 0;
          unk_1EB328208 = 0;
          qword_1EB3281F8 = 0;
        }
        qword_1EB31DF38 = (uint64_t)&ggl::polygonSolidFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v208 = ggl::crc32::compute<31ul>("PolygonSolidFillS2ShaderVertex");
          qword_1EB31AA10 = (uint64_t)"PolygonSolidFillS2Shader";
          unk_1EB31AA18 = ggl::polygonSolidFillS2ShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AA20 = 1;
          unk_1EB31AA28 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AA30 = 3;
          unk_1EB31AA38 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AA40 = 0;
          unk_1EB31AA48 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(void)::ref = v208;
          *(_DWORD *)algn_1EB31AA0C = 0;
          qword_1EB31AA50 = 0;
          unk_1EB31AA58 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AA68 = 0;
          unk_1EB31AA70 = 0;
          qword_1EB31AA60 = 0;
        }
        qword_1EB31DF40 = (uint64_t)&ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonSolidFillS2ShaderFragment");
          *(_DWORD *)algn_1EB31ABD4 = 1;
          qword_1EB31ABD8 = (uint64_t)"PolygonSolidFillS2Shader";
          unk_1EB31ABE0 = 0;
          qword_1EB31ABE8 = 0;
          unk_1EB31ABF0 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31ABF8 = 1;
          unk_1EB31AC00 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AC08 = 0;
          unk_1EB31AC10 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AC18 = 0;
          unk_1EB31AC20 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AC30 = 0;
          unk_1EB31AC38 = 0;
          qword_1EB31AC28 = 0;
        }
        qword_1EB31DF48 = (uint64_t)&ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v209 = ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
          qword_1EB325F00 = (uint64_t)"PolygonStrokeShader";
          unk_1EB325F08 = ggl::polygonStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325F10 = 1;
          unk_1EB325F18 = &ggl::polygonStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325F20 = 3;
          unk_1EB325F28 = &ggl::polygonStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325F30 = 0;
          unk_1EB325F38 = &ggl::polygonStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref = v209;
          *(_DWORD *)algn_1EB325EFC = 0;
          qword_1EB325F40 = 0;
          unk_1EB325F48 = &ggl::polygonStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325F58 = 0;
          unk_1EB325F60 = 0;
          qword_1EB325F50 = 0;
        }
        qword_1EB31DF50 = (uint64_t)&ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
          *(_DWORD *)algn_1EB326DF4 = 1;
          qword_1EB326DF8 = (uint64_t)"PolygonStrokeShader";
          unk_1EB326E00 = 0;
          qword_1EB326E08 = 0;
          unk_1EB326E10 = &ggl::polygonStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326E18 = 1;
          unk_1EB326E20 = &ggl::polygonStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB326E28 = 0;
          unk_1EB326E30 = &ggl::polygonStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326E38 = 2;
          unk_1EB326E40 = &ggl::polygonStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326E50 = 0;
          unk_1EB326E58 = 0;
          qword_1EB326E48 = 2;
        }
        qword_1EB31DF58 = (uint64_t)&ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v210 = ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
          qword_1EB318100 = (uint64_t)"PolygonStrokeMaskShader";
          unk_1EB318108 = ggl::polygonStrokeMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB318110 = 1;
          unk_1EB318118 = &ggl::polygonStrokeMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB318120 = 3;
          unk_1EB318128 = &ggl::polygonStrokeMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB318130 = 0;
          unk_1EB318138 = &ggl::polygonStrokeMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref = v210;
          *(_DWORD *)algn_1EB3180FC = 0;
          qword_1EB318140 = 0;
          unk_1EB318148 = &ggl::polygonStrokeMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318158 = 0;
          unk_1EB318160 = 0;
          qword_1EB318150 = 0;
        }
        qword_1EB31DF60 = (uint64_t)&ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref;
        {
          int v211 = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
          qword_1EB318358 = 0;
          unk_1EB318360 = &ggl::polygonStrokeMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB318368 = 0;
          unk_1EB318370 = &ggl::polygonStrokeMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref = v211;
          *(_DWORD *)algn_1EB318344 = 1;
          qword_1EB318378 = 0;
          unk_1EB318380 = &ggl::polygonStrokeMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB318348 = (uint64_t)"PolygonStrokeMaskShader";
          unk_1EB318350 = 0;
          qword_1EB318388 = 1;
          unk_1EB318390 = &ggl::polygonStrokeMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3183A0 = 0;
          unk_1EB3183A8 = 0;
          qword_1EB318398 = 1;
        }
        qword_1EB31DF68 = (uint64_t)&ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v212 = ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
          qword_1E958D5C8 = (uint64_t)"HillshadeFillMaskShader";
          unk_1E958D5D0 = ggl::hillshadeFillMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1E958D5D8 = 1;
          unk_1E958D5E0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1E958D5E8 = 3;
          unk_1E958D5F0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1E958D5F8 = 0;
          unk_1E958D600 = &ggl::hillshadeFillMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref = v212;
          *(_DWORD *)algn_1E958D5C4 = 0;
          qword_1E958D608 = 0;
          unk_1E958D610 = &ggl::hillshadeFillMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1E958D620 = 0;
          unk_1E958D628 = 0;
          qword_1E958D618 = 0;
        }
        qword_1EB31DF70 = (uint64_t)&ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
          *(_DWORD *)algn_1E958D63C = 1;
          qword_1E958D650 = 0;
          unk_1E958D658 = &ggl::hillshadeFillMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1E958D660 = 0;
          unk_1E958D668 = &ggl::hillshadeFillMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1E958D670 = 0;
          unk_1E958D678 = &ggl::hillshadeFillMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1E958D640 = (uint64_t)"HillshadeFillMaskShader";
          unk_1E958D648 = 0;
          qword_1E958D680 = 0;
          unk_1E958D688 = &ggl::hillshadeFillMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1E958D698 = 0;
          unk_1E958D6A0 = 0;
          qword_1E958D690 = 0;
        }
        qword_1EB31DF78 = (uint64_t)&ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v213 = ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
          qword_1EB3287E8 = (uint64_t)"PolylineOverlayFillShader";
          unk_1EB3287F0 = ggl::polylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3287F8 = 1;
          unk_1EB328800 = &ggl::polylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328808 = 3;
          unk_1EB328810 = &ggl::polylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328818 = 0;
          unk_1EB328820 = &ggl::polylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = v213;
          *(_DWORD *)algn_1EB3287E4 = 0;
          qword_1EB328828 = 0;
          unk_1EB328830 = &ggl::polylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328840 = 0;
          unk_1EB328848 = 0;
          qword_1EB328838 = 0;
        }
        qword_1EB31DF80 = (uint64_t)&ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        {
          int v214 = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
          qword_1EB3293C0 = 0;
          unk_1EB3293C8 = &ggl::polylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3293D0 = 1;
          unk_1EB3293D8 = &ggl::polylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = v214;
          *(_DWORD *)algn_1EB3293AC = 1;
          qword_1EB3293E0 = 0;
          unk_1EB3293E8 = &ggl::polylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3293B0 = (uint64_t)"PolylineOverlayFillShader";
          unk_1EB3293B8 = 0;
          qword_1EB3293F0 = 1;
          unk_1EB3293F8 = &ggl::polylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329408 = 0;
          unk_1EB329410 = 0;
          qword_1EB329400 = 1;
        }
        qword_1EB31DF88 = (uint64_t)&ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v215 = ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
          qword_1EB328E48 = (uint64_t)"PolylineOverlayAlphaShader";
          unk_1EB328E50 = ggl::polylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB328E58 = 1;
          unk_1EB328E60 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328E68 = 3;
          unk_1EB328E70 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328E78 = 0;
          unk_1EB328E80 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = v215;
          *(_DWORD *)algn_1EB328E44 = 0;
          qword_1EB328E88 = 0;
          unk_1EB328E90 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328EA0 = 0;
          unk_1EB328EA8 = 0;
          qword_1EB328E98 = 0;
        }
        qword_1EB31DF90 = (uint64_t)&ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
        {
          int v216 = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
          qword_1EB3297D0 = 0;
          unk_1EB3297D8 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3297E0 = 1;
          unk_1EB3297E8 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = v216;
          *(_DWORD *)algn_1EB3297BC = 1;
          qword_1EB3297F0 = 0;
          unk_1EB3297F8 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3297C0 = (uint64_t)"PolylineOverlayAlphaShader";
          unk_1EB3297C8 = 0;
          qword_1EB329800 = 1;
          unk_1EB329808 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329818 = 0;
          unk_1EB329820 = 0;
          qword_1EB329810 = 1;
        }
        qword_1EB31DF98 = (uint64_t)&ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v217 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
          qword_1EB32A058 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1EB32A060 = ggl::polylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A068 = 1;
          unk_1EB32A070 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A078 = 3;
          unk_1EB32A080 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A088 = 0;
          unk_1EB32A090 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = v217;
          *(_DWORD *)algn_1EB32A054 = 0;
          qword_1EB32A098 = 0;
          unk_1EB32A0A0 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A0B0 = 0;
          unk_1EB32A0B8 = 0;
          qword_1EB32A0A8 = 0;
        }
        qword_1EB31DFA0 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32A7C0 = 0;
          unk_1EB32A7C8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A7D0 = 1;
          unk_1EB32A7D8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x17E32C928;
          qword_1EB32A7E0 = 0;
          unk_1EB32A7E8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A7B0 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1EB32A7B8 = 0;
          qword_1EB32A7F0 = 1;
          unk_1EB32A7F8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A808 = 0;
          unk_1EB32A810 = 0;
          qword_1EB32A800 = 1;
        }
        qword_1EB31DFA8 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v218 = ggl::crc32::compute<18ul>("PointShaderVertex");
          qword_1EB324170 = (uint64_t)"PointShader";
          unk_1EB324178 = ggl::pointShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324180 = 1;
          unk_1EB324188 = &ggl::pointShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324190 = 2;
          unk_1EB324198 = &ggl::pointShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3241A0 = 0;
          unk_1EB3241A8 = &ggl::pointShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::pointShaderVertexFunctionDescriptor(void)::ref = v218;
          *(_DWORD *)algn_1EB32416C = 0;
          qword_1EB3241B0 = 0;
          unk_1EB3241B8 = &ggl::pointShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3241C8 = 0;
          unk_1EB3241D0 = 0;
          qword_1EB3241C0 = 0;
        }
        qword_1EB31DFB0 = (uint64_t)&ggl::pointShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::pointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("PointShaderFragment");
          *(_DWORD *)algn_1EB3248A4 = 1;
          qword_1EB3248A8 = (uint64_t)"PointShader";
          unk_1EB3248B0 = 0;
          qword_1EB3248B8 = 0;
          unk_1EB3248C0 = &ggl::pointShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3248C8 = 1;
          unk_1EB3248D0 = &ggl::pointShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3248D8 = 0;
          unk_1EB3248E0 = &ggl::pointShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3248E8 = 0;
          unk_1EB3248F0 = &ggl::pointShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324900 = 0;
          unk_1EB324908 = 0;
          qword_1EB3248F8 = 0;
        }
        qword_1EB31DFB8 = (uint64_t)&ggl::pointShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v219 = ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
          qword_1EB325E20 = (uint64_t)"PointExtendedShader";
          unk_1EB325E28 = ggl::pointExtendedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325E30 = 1;
          unk_1EB325E38 = &ggl::pointExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325E40 = 2;
          unk_1EB325E48 = &ggl::pointExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325E50 = 0;
          unk_1EB325E58 = &ggl::pointExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref = v219;
          *(_DWORD *)algn_1EB325E1C = 0;
          qword_1EB325E60 = 0;
          unk_1EB325E68 = &ggl::pointExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325E78 = 0;
          unk_1EB325E80 = 0;
          qword_1EB325E70 = 0;
        }
        qword_1EB31DFC0 = (uint64_t)&ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
          *(_DWORD *)algn_1EB326D84 = 1;
          qword_1EB326D88 = (uint64_t)"PointExtendedShader";
          unk_1EB326D90 = 0;
          qword_1EB326D98 = 0;
          unk_1EB326DA0 = &ggl::pointExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326DA8 = 1;
          unk_1EB326DB0 = &ggl::pointExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB326DB8 = 0;
          unk_1EB326DC0 = &ggl::pointExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326DC8 = 0;
          unk_1EB326DD0 = &ggl::pointExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326DE0 = 0;
          unk_1EB326DE8 = 0;
          qword_1EB326DD8 = 0;
        }
        qword_1EB31DFC8 = (uint64_t)&ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v220 = ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
          qword_1EB326E70 = (uint64_t)"PrefilteredLineShader";
          unk_1EB326E78 = ggl::prefilteredLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326E80 = 1;
          unk_1EB326E88 = &ggl::prefilteredLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326E90 = 3;
          unk_1EB326E98 = &ggl::prefilteredLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB326EA0 = 0;
          unk_1EB326EA8 = &ggl::prefilteredLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref = v220;
          *(_DWORD *)algn_1EB326E6C = 0;
          qword_1EB326EB0 = 0;
          unk_1EB326EB8 = &ggl::prefilteredLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326EC8 = 0;
          unk_1EB326ED0 = 0;
          qword_1EB326EC0 = 0;
        }
        qword_1EB31DFD0 = (uint64_t)&ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref;
        {
          int v221 = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
          qword_1EB327B68 = 0;
          unk_1EB327B70 = &ggl::prefilteredLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327B78 = 0;
          unk_1EB327B80 = &ggl::prefilteredLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref = v221;
          *(_DWORD *)algn_1EB327B54 = 1;
          qword_1EB327B88 = 0;
          unk_1EB327B90 = &ggl::prefilteredLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327B58 = (uint64_t)"PrefilteredLineShader";
          unk_1EB327B60 = 0;
          qword_1EB327B98 = 1;
          unk_1EB327BA0 = &ggl::prefilteredLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327BB0 = 0;
          unk_1EB327BB8 = 0;
          qword_1EB327BA8 = 1;
        }
        qword_1EB31DFD8 = (uint64_t)&ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v222 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
          qword_1EB327BD0 = (uint64_t)"RenderTargetBlendShader";
          unk_1EB327BD8 = ggl::renderTargetBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327BE0 = 1;
          unk_1EB327BE8 = &ggl::renderTargetBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327BF0 = 0;
          unk_1EB327BF8 = &ggl::renderTargetBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327C00 = 0;
          unk_1EB327C08 = &ggl::renderTargetBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref = v222;
          *(_DWORD *)algn_1EB327BCC = 0;
          qword_1EB327C10 = 0;
          unk_1EB327C18 = &ggl::renderTargetBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327C28 = 0;
          unk_1EB327C30 = 0;
          qword_1EB327C20 = 0;
        }
        qword_1EB31DFE0 = (uint64_t)&ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref;
        {
          int v223 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
          qword_1EB328868 = 0;
          unk_1EB328870 = &ggl::renderTargetBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328878 = 1;
          unk_1EB328880 = &ggl::renderTargetBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref = v223;
          *(_DWORD *)algn_1EB328854 = 1;
          qword_1EB328888 = 0;
          unk_1EB328890 = &ggl::renderTargetBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328858 = (uint64_t)"RenderTargetBlendShader";
          unk_1EB328860 = 0;
          qword_1EB328898 = 1;
          unk_1EB3288A0 = &ggl::renderTargetBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3288B0 = 0;
          unk_1EB3288B8 = 0;
          qword_1EB3288A8 = 1;
        }
        qword_1EB31DFE8 = (uint64_t)&ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v224 = ggl::crc32::compute<22ul>("RouteLineShaderVertex");
          qword_1EB324E00 = (uint64_t)"RouteLineShader";
          unk_1EB324E08 = ggl::routeLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324E10 = 1;
          unk_1EB324E18 = &ggl::routeLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324E20 = 3;
          unk_1EB324E28 = &ggl::routeLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324E30 = 0;
          unk_1EB324E38 = &ggl::routeLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineShaderVertexFunctionDescriptor(void)::ref = v224;
          *(_DWORD *)algn_1EB324DFC = 0;
          qword_1EB324E40 = 0;
          unk_1EB324E48 = &ggl::routeLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324E58 = 0;
          unk_1EB324E60 = 0;
          qword_1EB324E50 = 0;
        }
        qword_1EB31DFF0 = (uint64_t)&ggl::routeLineShaderVertexFunctionDescriptor(void)::ref;
        {
          int v225 = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
          qword_1EB3253D8 = 0;
          unk_1EB3253E0 = &ggl::routeLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3253E8 = 1;
          unk_1EB3253F0 = &ggl::routeLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref = v225;
          *(_DWORD *)algn_1EB3253C4 = 1;
          qword_1EB3253F8 = 0;
          unk_1EB325400 = &ggl::routeLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3253C8 = (uint64_t)"RouteLineShader";
          unk_1EB3253D0 = 0;
          qword_1EB325408 = 1;
          unk_1EB325410 = &ggl::routeLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325420 = 0;
          unk_1EB325428 = 0;
          qword_1EB325418 = 1;
        }
        qword_1EB31DFF8 = (uint64_t)&ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v226 = ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
          qword_1EB3280C0 = (uint64_t)"PatternedRouteLineShader";
          unk_1EB3280C8 = ggl::patternedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3280D0 = 1;
          unk_1EB3280D8 = &ggl::patternedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3280E0 = 3;
          unk_1EB3280E8 = &ggl::patternedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3280F0 = 0;
          unk_1EB3280F8 = &ggl::patternedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref = v226;
          *(_DWORD *)algn_1EB3280BC = 0;
          qword_1EB328100 = 0;
          unk_1EB328108 = &ggl::patternedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328118 = 0;
          unk_1EB328120 = 0;
          qword_1EB328110 = 0;
        }
        qword_1EB31E000 = (uint64_t)&ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref;
        {
          int v227 = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
          qword_1EB328D68 = 0;
          unk_1EB328D70 = &ggl::patternedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328D78 = 1;
          unk_1EB328D80 = &ggl::patternedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref = v227;
          *(_DWORD *)algn_1EB328D54 = 1;
          qword_1EB328D88 = 0;
          unk_1EB328D90 = &ggl::patternedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328D58 = (uint64_t)"PatternedRouteLineShader";
          unk_1EB328D60 = 0;
          qword_1EB328D98 = 1;
          unk_1EB328DA0 = &ggl::patternedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328DB0 = 0;
          unk_1EB328DB8 = 0;
          qword_1EB328DA8 = 1;
        }
        qword_1EB31E008 = (uint64_t)&ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v228 = ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
          qword_1EB32C130 = (uint64_t)"RouteLineMaskShader";
          unk_1EB32C138 = ggl::routeLineMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32C140 = 1;
          unk_1EB32C148 = &ggl::routeLineMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C150 = 3;
          unk_1EB32C158 = &ggl::routeLineMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C160 = 0;
          unk_1EB32C168 = &ggl::routeLineMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref = v228;
          *(_DWORD *)algn_1EB32C12C = 0;
          qword_1EB32C170 = 0;
          unk_1EB32C178 = &ggl::routeLineMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C188 = 0;
          unk_1EB32C190 = 0;
          qword_1EB32C180 = 0;
        }
        qword_1EB31E010 = (uint64_t)&ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
          *(_DWORD *)algn_1EB32CE34 = 1;
          qword_1EB32CE38 = (uint64_t)"RouteLineMaskShader";
          unk_1EB32CE40 = 0;
          qword_1EB32CE48 = 0;
          unk_1EB32CE50 = &ggl::routeLineMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32CE58 = 1;
          unk_1EB32CE60 = &ggl::routeLineMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32CE68 = 0;
          unk_1EB32CE70 = &ggl::routeLineMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32CE78 = 0;
          unk_1EB32CE80 = &ggl::routeLineMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32CE90 = 0;
          unk_1EB32CE98 = 0;
          qword_1EB32CE88 = 0;
        }
        qword_1EB31E018 = (uint64_t)&ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v229 = ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
          qword_1EB3288D0 = (uint64_t)"RouteLineAlphaResetShader";
          unk_1EB3288D8 = ggl::routeLineAlphaResetShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3288E0 = 1;
          unk_1EB3288E8 = &ggl::routeLineAlphaResetShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3288F0 = 3;
          unk_1EB3288F8 = &ggl::routeLineAlphaResetShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328900 = 0;
          unk_1EB328908 = &ggl::routeLineAlphaResetShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref = v229;
          *(_DWORD *)algn_1EB3288CC = 0;
          qword_1EB328910 = 0;
          unk_1EB328918 = &ggl::routeLineAlphaResetShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328928 = 0;
          unk_1EB328930 = 0;
          qword_1EB328920 = 0;
        }
        qword_1EB31E020 = (uint64_t)&ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
          *(_DWORD *)algn_1EB329424 = 1;
          qword_1EB329428 = (uint64_t)"RouteLineAlphaResetShader";
          unk_1EB329430 = 0;
          qword_1EB329438 = 0;
          unk_1EB329440 = &ggl::routeLineAlphaResetShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329448 = 1;
          unk_1EB329450 = &ggl::routeLineAlphaResetShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB329458 = 0;
          unk_1EB329460 = &ggl::routeLineAlphaResetShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329468 = 0;
          unk_1EB329470 = &ggl::routeLineAlphaResetShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329480 = 0;
          unk_1EB329488 = 0;
          qword_1EB329478 = 0;
        }
        qword_1EB31E028 = (uint64_t)&ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v230 = ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
          qword_1EB326550 = (uint64_t)"RouteLineArrowShader";
          unk_1EB326558 = ggl::routeLineArrowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326560 = 1;
          unk_1EB326568 = &ggl::routeLineArrowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326570 = 3;
          unk_1EB326578 = &ggl::routeLineArrowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB326580 = 0;
          unk_1EB326588 = &ggl::routeLineArrowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref = v230;
          *(_DWORD *)algn_1EB32654C = 0;
          qword_1EB326590 = 0;
          unk_1EB326598 = &ggl::routeLineArrowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3265A8 = 0;
          unk_1EB3265B0 = 0;
          qword_1EB3265A0 = 0;
        }
        qword_1EB31E030 = (uint64_t)&ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref;
        {
          int v231 = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
          qword_1EB3273F8 = 0;
          unk_1EB327400 = &ggl::routeLineArrowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327408 = 1;
          unk_1EB327410 = &ggl::routeLineArrowShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref = v231;
          *(_DWORD *)algn_1EB3273E4 = 1;
          qword_1EB327418 = 0;
          unk_1EB327420 = &ggl::routeLineArrowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3273E8 = (uint64_t)"RouteLineArrowShader";
          unk_1EB3273F0 = 0;
          qword_1EB327428 = 1;
          unk_1EB327430 = &ggl::routeLineArrowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327440 = 0;
          unk_1EB327448 = 0;
          qword_1EB327438 = 1;
        }
        qword_1EB31E038 = (uint64_t)&ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v232 = ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
          qword_1EB327460 = (uint64_t)"RouteLineTrafficShader";
          unk_1EB327468 = ggl::routeLineTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327470 = 1;
          unk_1EB327478 = &ggl::routeLineTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327480 = 3;
          unk_1EB327488 = &ggl::routeLineTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327490 = 0;
          unk_1EB327498 = &ggl::routeLineTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref = v232;
          *(_DWORD *)algn_1EB32745C = 0;
          qword_1EB3274A0 = 0;
          unk_1EB3274A8 = &ggl::routeLineTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3274B8 = 0;
          unk_1EB3274C0 = 0;
          qword_1EB3274B0 = 0;
        }
        qword_1EB31E040 = (uint64_t)&ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref;
        {
          int v233 = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
          qword_1EB328228 = 0;
          unk_1EB328230 = &ggl::routeLineTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328238 = 1;
          unk_1EB328240 = &ggl::routeLineTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref = v233;
          *(_DWORD *)algn_1EB328214 = 1;
          qword_1EB328248 = 0;
          unk_1EB328250 = &ggl::routeLineTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328218 = (uint64_t)"RouteLineTrafficShader";
          unk_1EB328220 = 0;
          qword_1EB328258 = 1;
          unk_1EB328260 = &ggl::routeLineTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328270 = 0;
          unk_1EB328278 = 0;
          qword_1EB328268 = 1;
        }
        qword_1EB31E048 = (uint64_t)&ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v234 = ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
          qword_1EB31AAF8 = (uint64_t)"SinglePassRouteLineShader";
          unk_1EB31AB00 = ggl::singlePassRouteLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AB08 = 1;
          unk_1EB31AB10 = &ggl::singlePassRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AB18 = 4;
          unk_1EB31AB20 = &ggl::singlePassRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AB28 = 0;
          unk_1EB31AB30 = &ggl::singlePassRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref = v234;
          *(_DWORD *)algn_1EB31AAF4 = 0;
          qword_1EB31AB38 = 0;
          unk_1EB31AB40 = &ggl::singlePassRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AB50 = 0;
          unk_1EB31AB58 = 0;
          qword_1EB31AB48 = 0;
        }
        qword_1EB31E050 = (uint64_t)&ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref;
        {
          int v235 = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
          qword_1EB31ACD0 = 0;
          unk_1EB31ACD8 = &ggl::singlePassRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31ACE0 = 2;
          unk_1EB31ACE8 = &ggl::singlePassRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref = v235;
          *(_DWORD *)algn_1EB31ACBC = 1;
          qword_1EB31ACF0 = 0;
          unk_1EB31ACF8 = &ggl::singlePassRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31ACC0 = (uint64_t)"SinglePassRouteLineShader";
          unk_1EB31ACC8 = 0;
          qword_1EB31AD00 = 1;
          unk_1EB31AD08 = &ggl::singlePassRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AD18 = 0;
          unk_1EB31AD20 = 0;
          qword_1EB31AD10 = 1;
        }
        qword_1EB31E058 = (uint64_t)&ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v236 = ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
          qword_1EB317F38 = (uint64_t)"DottedRouteLineShader";
          unk_1EB317F40 = ggl::dottedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB317F48 = 1;
          unk_1EB317F50 = &ggl::dottedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB317F58 = 3;
          unk_1EB317F60 = &ggl::dottedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB317F68 = 0;
          unk_1EB317F70 = &ggl::dottedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref = v236;
          *(_DWORD *)algn_1EB317F34 = 0;
          qword_1EB317F78 = 0;
          unk_1EB317F80 = &ggl::dottedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317F90 = 0;
          unk_1EB317F98 = 0;
          qword_1EB317F88 = 0;
        }
        qword_1EB31E060 = (uint64_t)&ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
          *(_DWORD *)algn_1EB31801C = 1;
          qword_1EB318030 = 0;
          unk_1EB318038 = &ggl::dottedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB318040 = 2;
          unk_1EB318048 = &ggl::dottedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB318050 = 0;
          unk_1EB318058 = &ggl::dottedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB318020 = (uint64_t)"DottedRouteLineShader";
          unk_1EB318028 = 0;
          qword_1EB318060 = 0;
          unk_1EB318068 = &ggl::dottedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318078 = 0;
          unk_1EB318080 = 0;
          qword_1EB318070 = 0;
        }
        qword_1EB31E068 = (uint64_t)&ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
          *(_DWORD *)algn_1EB324ADC = 0;
          qword_1EB324AE0 = (uint64_t)"SDFGlyphShader";
          unk_1EB324AE8 = ggl::sDFGlyphShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324AF0 = 1;
          unk_1EB324AF8 = &ggl::sDFGlyphShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324B00 = 4;
          unk_1EB324B08 = &ggl::sDFGlyphShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324B10 = 0;
          unk_1EB324B18 = &ggl::sDFGlyphShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB324B20 = 2;
          unk_1EB324B28 = &ggl::sDFGlyphShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324B38 = 0;
          unk_1EB324B40 = 0;
          qword_1EB324B30 = 2;
        }
        qword_1EB31E070 = (uint64_t)&ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref;
        {
          int v237 = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
          qword_1EB324FD8 = 0;
          unk_1EB324FE0 = &ggl::sDFGlyphShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324FE8 = 2;
          unk_1EB324FF0 = &ggl::sDFGlyphShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref = v237;
          *(_DWORD *)algn_1EB324FC4 = 1;
          qword_1EB324FF8 = 0;
          unk_1EB325000 = &ggl::sDFGlyphShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324FC8 = (uint64_t)"SDFGlyphShader";
          unk_1EB324FD0 = 0;
          qword_1EB325008 = 1;
          unk_1EB325010 = &ggl::sDFGlyphShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325020 = 0;
          unk_1EB325028 = 0;
          qword_1EB325018 = 1;
        }
        qword_1EB31E078 = (uint64_t)&ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
          *(_DWORD *)algn_1EB32591C = 0;
          qword_1EB325920 = (uint64_t)"SDFGlyphHaloShader";
          unk_1EB325928 = ggl::sDFGlyphHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325930 = 1;
          unk_1EB325938 = &ggl::sDFGlyphHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325940 = 4;
          unk_1EB325948 = &ggl::sDFGlyphHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325950 = 0;
          unk_1EB325958 = &ggl::sDFGlyphHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB325960 = 2;
          unk_1EB325968 = &ggl::sDFGlyphHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325978 = 0;
          unk_1EB325980 = 0;
          qword_1EB325970 = 2;
        }
        qword_1EB31E080 = (uint64_t)&ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref;
        {
          int v238 = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
          qword_1EB3265D8 = 0;
          unk_1EB3265E0 = &ggl::sDFGlyphHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3265E8 = 2;
          unk_1EB3265F0 = &ggl::sDFGlyphHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref = v238;
          *(_DWORD *)algn_1EB3265C4 = 1;
          qword_1EB3265F8 = 0;
          unk_1EB326600 = &ggl::sDFGlyphHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3265C8 = (uint64_t)"SDFGlyphHaloShader";
          unk_1EB3265D0 = 0;
          qword_1EB326608 = 1;
          unk_1EB326610 = &ggl::sDFGlyphHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326620 = 0;
          unk_1EB326628 = 0;
          qword_1EB326618 = 1;
        }
        qword_1EB31E088 = (uint64_t)&ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
          *(_DWORD *)algn_1EB32893C = 0;
          qword_1EB328940 = (uint64_t)"SDFGlyphSuperSampleShader";
          unk_1EB328948 = ggl::sDFGlyphSuperSampleShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB328950 = 1;
          unk_1EB328958 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328960 = 4;
          unk_1EB328968 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328970 = 0;
          unk_1EB328978 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB328980 = 2;
          unk_1EB328988 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328998 = 0;
          unk_1EB3289A0 = 0;
          qword_1EB328990 = 2;
        }
        qword_1EB31E090 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref;
        {
          int v239 = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
          qword_1EB3294A8 = 0;
          unk_1EB3294B0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3294B8 = 2;
          unk_1EB3294C0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref = v239;
          *(_DWORD *)algn_1EB329494 = 1;
          qword_1EB3294C8 = 0;
          unk_1EB3294D0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329498 = (uint64_t)"SDFGlyphSuperSampleShader";
          unk_1EB3294A0 = 0;
          qword_1EB3294D8 = 1;
          unk_1EB3294E0 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3294F0 = 0;
          unk_1EB3294F8 = 0;
          qword_1EB3294E8 = 1;
        }
        qword_1EB31E098 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v240 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
          qword_1EB325038 = (uint64_t)"SimpleGridShader";
          unk_1EB325040 = ggl::simpleGridShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325048 = 1;
          unk_1EB325050 = &ggl::simpleGridShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325058 = 3;
          unk_1EB325060 = &ggl::simpleGridShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325068 = 0;
          unk_1EB325070 = &ggl::simpleGridShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref = v240;
          *(_DWORD *)algn_1EB325034 = 0;
          qword_1EB325078 = 0;
          unk_1EB325080 = &ggl::simpleGridShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325090 = 0;
          unk_1EB325098 = 0;
          qword_1EB325088 = 0;
        }
        qword_1EB31E0A0 = (uint64_t)&ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
          *(_DWORD *)algn_1EB32CACC = 1;
          qword_1EB32CAE0 = 0;
          unk_1EB32CAE8 = &ggl::simpleGridShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32CAF0 = 2;
          unk_1EB32CAF8 = &ggl::simpleGridShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32CB00 = 0;
          unk_1EB32CB08 = &ggl::simpleGridShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32CAD0 = (uint64_t)"SimpleGridShader";
          unk_1EB32CAD8 = 0;
          qword_1EB32CB10 = 0;
          unk_1EB32CB18 = &ggl::simpleGridShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32CB28 = 0;
          unk_1EB32CB30 = 0;
          qword_1EB32CB20 = 0;
        }
        qword_1EB31E0A8 = (uint64_t)&ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::skyShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<16ul>("SkyShaderVertex");
          *(_DWORD *)algn_1EB323C64 = 0;
          qword_1EB323C68 = (uint64_t)"SkyShader";
          unk_1EB323C70 = ggl::skyShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB323C78 = 1;
          unk_1EB323C80 = &ggl::skyShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB323C88 = 1;
          unk_1EB323C90 = &ggl::skyShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB323C98 = 0;
          unk_1EB323CA0 = &ggl::skyShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB323CA8 = 0;
          unk_1EB323CB0 = &ggl::skyShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB323CC0 = 0;
          unk_1EB323CC8 = 0;
          qword_1EB323CB8 = 0;
        }
        qword_1EB31E0B0 = (uint64_t)&ggl::skyShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::skyShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("SkyShaderFragment");
          *(_DWORD *)algn_1EB3241DC = 1;
          qword_1EB3241E0 = (uint64_t)"SkyShader";
          unk_1EB3241E8 = 0;
          qword_1EB3241F0 = 0;
          unk_1EB3241F8 = &ggl::skyShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB324200 = 1;
          unk_1EB324208 = &ggl::skyShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB324210 = 0;
          unk_1EB324218 = &ggl::skyShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB324220 = 0;
          unk_1EB324228 = &ggl::skyShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324238 = 0;
          unk_1EB324240 = 0;
          qword_1EB324230 = 0;
        }
        qword_1EB31E0B8 = (uint64_t)&ggl::skyShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v241 = ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
          qword_1EB3254B0 = (uint64_t)"SolidRibbonShader";
          unk_1EB3254B8 = ggl::solidRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3254C0 = 1;
          unk_1EB3254C8 = &ggl::solidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3254D0 = 4;
          unk_1EB3254D8 = &ggl::solidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3254E0 = 0;
          unk_1EB3254E8 = &ggl::solidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref = v241;
          *(_DWORD *)algn_1EB3254AC = 0;
          qword_1EB3254F0 = 0;
          unk_1EB3254F8 = &ggl::solidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325508 = 0;
          unk_1EB325510 = 0;
          qword_1EB325500 = 0;
        }
        qword_1EB31E0C0 = (uint64_t)&ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
          *(_DWORD *)algn_1EB325F74 = 1;
          qword_1EB325F88 = 0;
          unk_1EB325F90 = &ggl::solidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB325F98 = 2;
          unk_1EB325FA0 = &ggl::solidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB325FA8 = 0;
          unk_1EB325FB0 = &ggl::solidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB325F78 = (uint64_t)"SolidRibbonShader";
          unk_1EB325F80 = 0;
          qword_1EB325FB8 = 2;
          unk_1EB325FC0 = &ggl::solidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325FD0 = 0;
          unk_1EB325FD8 = 0;
          qword_1EB325FC8 = 2;
        }
        qword_1EB31E0C8 = (uint64_t)&ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v242 = ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
          qword_1EB325A10 = (uint64_t)"SolidTrafficShader";
          unk_1EB325A18 = ggl::solidTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325A20 = 1;
          unk_1EB325A28 = &ggl::solidTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325A30 = 3;
          unk_1EB325A38 = &ggl::solidTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325A40 = 0;
          unk_1EB325A48 = &ggl::solidTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref = v242;
          *(_DWORD *)algn_1EB325A0C = 0;
          qword_1EB325A50 = 0;
          unk_1EB325A58 = &ggl::solidTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325A68 = 0;
          unk_1EB325A70 = 0;
          qword_1EB325A60 = 0;
        }
        qword_1EB31E0D0 = (uint64_t)&ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref;
        {
          int v243 = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
          qword_1EB3266C8 = 0;
          unk_1EB3266D0 = &ggl::solidTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3266D8 = 1;
          unk_1EB3266E0 = &ggl::solidTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref = v243;
          *(_DWORD *)algn_1EB3266B4 = 1;
          qword_1EB3266E8 = 0;
          unk_1EB3266F0 = &ggl::solidTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3266B8 = (uint64_t)"SolidTrafficShader";
          unk_1EB3266C0 = 0;
          qword_1EB3266F8 = 1;
          unk_1EB326700 = &ggl::solidTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326710 = 0;
          unk_1EB326718 = 0;
          qword_1EB326708 = 1;
        }
        qword_1EB31E0D8 = (uint64_t)&ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v244 = ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
          qword_1EB328290 = (uint64_t)"SolidMaskedTrafficShader";
          unk_1EB328298 = ggl::solidMaskedTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3282A0 = 1;
          unk_1EB3282A8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3282B0 = 3;
          unk_1EB3282B8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3282C0 = 0;
          unk_1EB3282C8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref = v244;
          *(_DWORD *)algn_1EB32828C = 0;
          qword_1EB3282D0 = 0;
          unk_1EB3282D8 = &ggl::solidMaskedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3282E8 = 0;
          unk_1EB3282F0 = 0;
          qword_1EB3282E0 = 0;
        }
        qword_1EB31E0E0 = (uint64_t)&ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref;
        {
          int v245 = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
          qword_1EB328EC8 = 0;
          unk_1EB328ED0 = &ggl::solidMaskedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328ED8 = 1;
          unk_1EB328EE0 = &ggl::solidMaskedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref = v245;
          *(_DWORD *)algn_1EB328EB4 = 1;
          qword_1EB328EE8 = 0;
          unk_1EB328EF0 = &ggl::solidMaskedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328EB8 = (uint64_t)"SolidMaskedTrafficShader";
          unk_1EB328EC0 = 0;
          qword_1EB328EF8 = 1;
          unk_1EB328F00 = &ggl::solidMaskedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328F10 = 0;
          unk_1EB328F18 = 0;
          qword_1EB328F08 = 1;
        }
        qword_1EB31E0E8 = (uint64_t)&ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v246 = ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
          qword_1EB3274D8 = (uint64_t)"SpecularBuildingShader";
          unk_1EB3274E0 = ggl::specularBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3274E8 = 1;
          unk_1EB3274F0 = &ggl::specularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3274F8 = 6;
          unk_1EB327500 = &ggl::specularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327508 = 0;
          unk_1EB327510 = &ggl::specularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref = v246;
          *(_DWORD *)algn_1EB3274D4 = 0;
          qword_1EB327518 = 0;
          unk_1EB327520 = &ggl::specularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327530 = 0;
          unk_1EB327538 = 0;
          qword_1EB327528 = 0;
        }
        qword_1EB31E0F0 = (uint64_t)&ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref;
        {
          int v247 = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
          qword_1EB328310 = 0;
          unk_1EB328318 = &ggl::specularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328320 = 4;
          unk_1EB328328 = &ggl::specularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref = v247;
          *(_DWORD *)algn_1EB3282FC = 1;
          qword_1EB328330 = 0;
          unk_1EB328338 = &ggl::specularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328300 = (uint64_t)"SpecularBuildingShader";
          unk_1EB328308 = 0;
          qword_1EB328340 = 1;
          unk_1EB328348 = &ggl::specularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328358 = 0;
          unk_1EB328360 = 0;
          qword_1EB328350 = 1;
        }
        qword_1EB31E0F8 = (uint64_t)&ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32A820 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1EB32A828 = ggl::specularBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A830 = 1;
          unk_1EB32A838 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A840 = 6;
          unk_1EB32A848 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A850 = 0;
          unk_1EB32A858 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = 1075938269;
          qword_1EB32A860 = 0;
          unk_1EB32A868 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A878 = 0;
          unk_1EB32A880 = 0;
          qword_1EB32A870 = 0;
        }
        qword_1EB31E100 = (uint64_t)&ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32AD98 = 0;
          unk_1EB32ADA0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32ADA8 = 4;
          unk_1EB32ADB0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x10062DEDALL;
          qword_1EB32ADB8 = 0;
          unk_1EB32ADC0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AD88 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1EB32AD90 = 0;
          qword_1EB32ADC8 = 0;
          unk_1EB32ADD0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32ADE0 = 0;
          unk_1EB32ADE8 = 0;
          qword_1EB32ADD8 = 0;
        }
        qword_1EB31E108 = (uint64_t)&ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v248 = ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
          qword_1EB3289B0 = (uint64_t)"SpecularBuildingTopShader";
          unk_1EB3289B8 = ggl::specularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3289C0 = 1;
          unk_1EB3289C8 = &ggl::specularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3289D0 = 6;
          unk_1EB3289D8 = &ggl::specularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3289E0 = 0;
          unk_1EB3289E8 = &ggl::specularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v248;
          *(_DWORD *)algn_1EB3289AC = 0;
          qword_1EB3289F0 = 0;
          unk_1EB3289F8 = &ggl::specularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328A08 = 0;
          unk_1EB328A10 = 0;
          qword_1EB328A00 = 0;
        }
        qword_1EB31E110 = (uint64_t)&ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
          *(_DWORD *)algn_1EB329504 = 1;
          qword_1EB329518 = 0;
          unk_1EB329520 = &ggl::specularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329528 = 4;
          unk_1EB329530 = &ggl::specularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB329538 = 0;
          unk_1EB329540 = &ggl::specularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329508 = (uint64_t)"SpecularBuildingTopShader";
          unk_1EB329510 = 0;
          qword_1EB329548 = 0;
          unk_1EB329550 = &ggl::specularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329560 = 0;
          unk_1EB329568 = 0;
          qword_1EB329558 = 0;
        }
        qword_1EB31E118 = (uint64_t)&ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v249 = ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
          qword_1EB327550 = (uint64_t)"SpecularLandmarkShader";
          unk_1EB327558 = ggl::specularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327560 = 1;
          unk_1EB327568 = &ggl::specularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327570 = 6;
          unk_1EB327578 = &ggl::specularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327580 = 0;
          unk_1EB327588 = &ggl::specularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref = v249;
          *(_DWORD *)algn_1EB32754C = 0;
          qword_1EB327590 = 0;
          unk_1EB327598 = &ggl::specularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3275A8 = 0;
          unk_1EB3275B0 = 0;
          qword_1EB3275A0 = 0;
        }
        qword_1EB31E120 = (uint64_t)&ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref;
        {
          int v250 = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
          qword_1EB328388 = 0;
          unk_1EB328390 = &ggl::specularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328398 = 4;
          unk_1EB3283A0 = &ggl::specularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref = v250;
          *(_DWORD *)algn_1EB328374 = 1;
          qword_1EB3283A8 = 0;
          unk_1EB3283B0 = &ggl::specularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328378 = (uint64_t)"SpecularLandmarkShader";
          unk_1EB328380 = 0;
          qword_1EB3283B8 = 1;
          unk_1EB3283C0 = &ggl::specularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3283D0 = 0;
          unk_1EB3283D8 = 0;
          qword_1EB3283C8 = 1;
        }
        qword_1EB31E128 = (uint64_t)&ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D068 = (uint64_t)"StandardPostchainCompositeShader";
          unk_1EB31D070 = ggl::standardPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D078 = 1;
          unk_1EB31D080 = &ggl::standardPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D088 = 0;
          unk_1EB31D090 = &ggl::standardPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D098 = 0;
          unk_1EB31D0A0 = &ggl::standardPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = 3269181341;
          qword_1EB31D0A8 = 0;
          unk_1EB31D0B0 = &ggl::standardPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D0C0 = 0;
          unk_1EB31D0C8 = 0;
          qword_1EB31D0B8 = 0;
        }
        qword_1EB31E130 = (uint64_t)&ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x1DF746FA2;
          qword_1EB31D3A0 = (uint64_t)"StandardPostchainCompositeShader";
          unk_1EB31D3A8 = 0;
          qword_1EB31D3B0 = 0;
          unk_1EB31D3B8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D3C0 = 1;
          unk_1EB31D3C8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D3D0 = 0;
          unk_1EB31D3D8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D3E0 = 4;
          unk_1EB31D3E8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D3F8 = 0;
          unk_1EB31D400 = 0;
          qword_1EB31D3F0 = 4;
        }
        qword_1EB31E138 = (uint64_t)&ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D1C8 = (uint64_t)"StandardPostchainSplitFrameShader";
          unk_1EB31D1D0 = ggl::standardPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D1D8 = 1;
          unk_1EB31D1E0 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D1E8 = 0;
          unk_1EB31D1F0 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D1F8 = 0;
          unk_1EB31D200 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 1892780714;
          qword_1EB31D208 = 0;
          unk_1EB31D210 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D220 = 0;
          unk_1EB31D228 = 0;
          qword_1EB31D218 = 0;
        }
        qword_1EB31E140 = (uint64_t)&ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x119C0B9BFLL;
          qword_1EB31D500 = (uint64_t)"StandardPostchainSplitFrameShader";
          unk_1EB31D508 = 0;
          qword_1EB31D510 = 0;
          unk_1EB31D518 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D520 = 1;
          unk_1EB31D528 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D530 = 0;
          unk_1EB31D538 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D540 = 2;
          unk_1EB31D548 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D558 = 0;
          unk_1EB31D560 = 0;
          qword_1EB31D550 = 2;
        }
        qword_1EB31E148 = (uint64_t)&ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D5E8 = (uint64_t)"StandardPostchainDownsampleCoCShader";
          unk_1EB31D5F0 = ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D5F8 = 1;
          unk_1EB31D600 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D608 = 0;
          unk_1EB31D610 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D618 = 0;
          unk_1EB31D620 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 579759095;
          qword_1EB31D628 = 0;
          unk_1EB31D630 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D640 = 0;
          unk_1EB31D648 = 0;
          qword_1EB31D638 = 0;
        }
        qword_1EB31E150 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1C1D81A17;
          qword_1EB31D7B0 = (uint64_t)"StandardPostchainDownsampleCoCShader";
          unk_1EB31D7B8 = 0;
          qword_1EB31D7C0 = 0;
          unk_1EB31D7C8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D7D0 = 0;
          unk_1EB31D7D8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D7E0 = 0;
          unk_1EB31D7E8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D7F0 = 1;
          unk_1EB31D7F8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D808 = 0;
          unk_1EB31D810 = 0;
          qword_1EB31D800 = 1;
        }
        qword_1EB31E158 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v251 = ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
          qword_1EB31CA88 = (uint64_t)"StandardPostchainBGBlurShader";
          unk_1EB31CA90 = ggl::standardPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CA98 = 1;
          unk_1EB31CAA0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CAA8 = 0;
          unk_1EB31CAB0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CAB8 = 0;
          unk_1EB31CAC0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = v251;
          *(_DWORD *)algn_1EB31CA84 = 0;
          qword_1EB31CAC8 = 0;
          unk_1EB31CAD0 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CAE0 = 0;
          unk_1EB31CAE8 = 0;
          qword_1EB31CAD8 = 0;
        }
        qword_1EB31E160 = (uint64_t)&ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
        {
          int v252 = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
          qword_1EB31CDC0 = 0;
          unk_1EB31CDC8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CDD0 = 1;
          unk_1EB31CDD8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = v252;
          *(_DWORD *)algn_1EB31CDAC = 1;
          qword_1EB31CDE0 = 0;
          unk_1EB31CDE8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31CDB0 = (uint64_t)"StandardPostchainBGBlurShader";
          unk_1EB31CDB8 = 0;
          qword_1EB31CDF0 = 1;
          unk_1EB31CDF8 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CE08 = 0;
          unk_1EB31CE10 = 0;
          qword_1EB31CE00 = 1;
        }
        qword_1EB31E168 = (uint64_t)&ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v253 = ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
          qword_1EB31CAF8 = (uint64_t)"StandardPostchainFGBlurShader";
          unk_1EB31CB00 = ggl::standardPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CB08 = 1;
          unk_1EB31CB10 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CB18 = 0;
          unk_1EB31CB20 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CB28 = 0;
          unk_1EB31CB30 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = v253;
          *(_DWORD *)algn_1EB31CAF4 = 0;
          qword_1EB31CB38 = 0;
          unk_1EB31CB40 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CB50 = 0;
          unk_1EB31CB58 = 0;
          qword_1EB31CB48 = 0;
        }
        qword_1EB31E170 = (uint64_t)&ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
          *(_DWORD *)algn_1EB31CE1C = 1;
          qword_1EB31CE20 = (uint64_t)"StandardPostchainFGBlurShader";
          unk_1EB31CE28 = 0;
          qword_1EB31CE30 = 0;
          unk_1EB31CE38 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CE40 = 1;
          unk_1EB31CE48 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CE50 = 0;
          unk_1EB31CE58 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31CE60 = 2;
          unk_1EB31CE68 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CE78 = 0;
          unk_1EB31CE80 = 0;
          qword_1EB31CE70 = 2;
        }
        qword_1EB31E178 = (uint64_t)&ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v254 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
          qword_1EB31CF08 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1EB31CF10 = ggl::standardPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CF18 = 1;
          unk_1EB31CF20 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CF28 = 0;
          unk_1EB31CF30 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CF38 = 0;
          unk_1EB31CF40 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v254;
          *(_DWORD *)algn_1EB31CF04 = 0;
          qword_1EB31CF48 = 0;
          unk_1EB31CF50 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CF60 = 0;
          unk_1EB31CF68 = 0;
          qword_1EB31CF58 = 0;
        }
        qword_1EB31E180 = (uint64_t)&ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x11C5A8EEELL;
          qword_1EB31D240 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1EB31D248 = 0;
          qword_1EB31D250 = 0;
          unk_1EB31D258 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D260 = 0;
          unk_1EB31D268 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D270 = 0;
          unk_1EB31D278 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D280 = 1;
          unk_1EB31D288 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D298 = 0;
          unk_1EB31D2A0 = 0;
          qword_1EB31D290 = 1;
        }
        qword_1EB31E188 = (uint64_t)&ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D828 = (uint64_t)"StandardPostchainDownsampleDepthShader";
          unk_1EB31D830 = ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D838 = 1;
          unk_1EB31D840 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D848 = 0;
          unk_1EB31D850 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D858 = 0;
          unk_1EB31D860 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref = 2938732211;
          qword_1EB31D868 = 0;
          unk_1EB31D870 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D880 = 0;
          unk_1EB31D888 = 0;
          qword_1EB31D878 = 0;
        }
        qword_1EB31E190 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref = 0x13810F95ALL;
          qword_1EB31D910 = (uint64_t)"StandardPostchainDownsampleDepthShader";
          unk_1EB31D918 = 0;
          qword_1EB31D920 = 0;
          unk_1EB31D928 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D930 = 0;
          unk_1EB31D938 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D940 = 0;
          unk_1EB31D948 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D950 = 1;
          unk_1EB31D958 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D968 = 0;
          unk_1EB31D970 = 0;
          qword_1EB31D960 = 1;
        }
        qword_1EB31E198 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v255 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
          qword_1EB31CE98 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1EB31CEA0 = ggl::standardPostchainSSAOBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CEA8 = 1;
          unk_1EB31CEB0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CEB8 = 0;
          unk_1EB31CEC0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CEC8 = 0;
          unk_1EB31CED0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref = v255;
          *(_DWORD *)algn_1EB31CE94 = 0;
          qword_1EB31CED8 = 0;
          unk_1EB31CEE0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CEF0 = 0;
          unk_1EB31CEF8 = 0;
          qword_1EB31CEE8 = 0;
        }
        qword_1EB31E1A0 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1AAC07444;
          qword_1EB31D150 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1EB31D158 = 0;
          qword_1EB31D160 = 0;
          unk_1EB31D168 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D170 = 1;
          unk_1EB31D178 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D180 = 0;
          unk_1EB31D188 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D190 = 2;
          unk_1EB31D198 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D1A8 = 0;
          unk_1EB31D1B0 = 0;
          qword_1EB31D1A0 = 2;
        }
        qword_1EB31E1A8 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31D488 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
          unk_1EB31D490 = ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31D498 = 1;
          unk_1EB31D4A0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D4A8 = 0;
          unk_1EB31D4B0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D4B8 = 0;
          unk_1EB31D4C0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref = 1285258797;
          qword_1EB31D4C8 = 0;
          unk_1EB31D4D0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D4E0 = 0;
          unk_1EB31D4E8 = 0;
          qword_1EB31D4D8 = 0;
        }
        qword_1EB31E1B0 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref = 0x1D7D2BD7CLL;
          qword_1EB31D740 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
          unk_1EB31D748 = 0;
          qword_1EB31D750 = 0;
          unk_1EB31D758 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D760 = 1;
          unk_1EB31D768 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D770 = 0;
          unk_1EB31D778 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D780 = 3;
          unk_1EB31D788 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D798 = 0;
          unk_1EB31D7A0 = 0;
          qword_1EB31D790 = 3;
        }
        qword_1EB31E1B8 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v256 = ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
          qword_1EB31C938 = (uint64_t)"StandardPostchainSSAOShader";
          unk_1EB31C940 = ggl::standardPostchainSSAOShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31C948 = 1;
          unk_1EB31C950 = &ggl::standardPostchainSSAOShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C958 = 0;
          unk_1EB31C960 = &ggl::standardPostchainSSAOShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C968 = 0;
          unk_1EB31C970 = &ggl::standardPostchainSSAOShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref = v256;
          *(_DWORD *)algn_1EB31C934 = 0;
          qword_1EB31C978 = 0;
          unk_1EB31C980 = &ggl::standardPostchainSSAOShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C990 = 0;
          unk_1EB31C998 = 0;
          qword_1EB31C988 = 0;
        }
        qword_1EB31E1C0 = (uint64_t)&ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
          *(_DWORD *)algn_1EB31CB6C = 1;
          qword_1EB31CB70 = (uint64_t)"StandardPostchainSSAOShader";
          unk_1EB31CB78 = 0;
          qword_1EB31CB80 = 0;
          unk_1EB31CB88 = &ggl::standardPostchainSSAOShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CB90 = 1;
          unk_1EB31CB98 = &ggl::standardPostchainSSAOShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CBA0 = 0;
          unk_1EB31CBA8 = &ggl::standardPostchainSSAOShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31CBB0 = 2;
          unk_1EB31CBB8 = &ggl::standardPostchainSSAOShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CBC8 = 0;
          unk_1EB31CBD0 = 0;
          qword_1EB31CBC0 = 2;
        }
        qword_1EB31E1C8 = (uint64_t)&ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v257 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
          qword_1EB3283E8 = (uint64_t)"StyleTextureRibbonShader";
          unk_1EB3283F0 = ggl::styleTextureRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3283F8 = 1;
          unk_1EB328400 = &ggl::styleTextureRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328408 = 2;
          unk_1EB328410 = &ggl::styleTextureRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328418 = 0;
          unk_1EB328420 = &ggl::styleTextureRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref = v257;
          *(_DWORD *)algn_1EB3283E4 = 0;
          qword_1EB328428 = 1;
          unk_1EB328430 = &ggl::styleTextureRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328440 = 0;
          unk_1EB328448 = 0;
          qword_1EB328438 = 1;
        }
        qword_1EB31E1D0 = (uint64_t)&ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          int v258 = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
          qword_1EB328F40 = 0;
          unk_1EB328F48 = &ggl::styleTextureRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328F50 = 1;
          unk_1EB328F58 = &ggl::styleTextureRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref = v258;
          *(_DWORD *)algn_1EB328F2C = 1;
          qword_1EB328F60 = 0;
          unk_1EB328F68 = &ggl::styleTextureRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328F30 = (uint64_t)"StyleTextureRibbonShader";
          unk_1EB328F38 = 0;
          qword_1EB328F70 = 1;
          unk_1EB328F78 = &ggl::styleTextureRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328F88 = 0;
          unk_1EB328F90 = 0;
          qword_1EB328F80 = 1;
        }
        qword_1EB31E1D8 = (uint64_t)&ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
          *(_DWORD *)algn_1EB32763C = 0;
          qword_1EB327640 = (uint64_t)"TextureAlphaMaskShader";
          unk_1EB327648 = ggl::textureAlphaMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327650 = 1;
          unk_1EB327658 = &ggl::textureAlphaMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327660 = 1;
          unk_1EB327668 = &ggl::textureAlphaMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327670 = 0;
          unk_1EB327678 = &ggl::textureAlphaMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB327680 = 0;
          unk_1EB327688 = &ggl::textureAlphaMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327698 = 0;
          unk_1EB3276A0 = 0;
          qword_1EB327690 = 0;
        }
        qword_1EB31E1E0 = (uint64_t)&ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref;
        {
          int v259 = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
          qword_1EB328468 = 0;
          unk_1EB328470 = &ggl::textureAlphaMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328478 = 1;
          unk_1EB328480 = &ggl::textureAlphaMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref = v259;
          *(_DWORD *)algn_1EB328454 = 1;
          qword_1EB328488 = 0;
          unk_1EB328490 = &ggl::textureAlphaMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328458 = (uint64_t)"TextureAlphaMaskShader";
          unk_1EB328460 = 0;
          qword_1EB328498 = 1;
          unk_1EB3284A0 = &ggl::textureAlphaMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3284B0 = 0;
          unk_1EB3284B8 = 0;
          qword_1EB3284A8 = 1;
        }
        qword_1EB31E1E8 = (uint64_t)&ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v260 = ggl::crc32::compute<21ul>("TexturedShaderVertex");
          qword_1EB324B50 = (uint64_t)"TexturedShader";
          unk_1EB324B58 = ggl::texturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324B60 = 1;
          unk_1EB324B68 = &ggl::texturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324B70 = 3;
          unk_1EB324B78 = &ggl::texturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324B80 = 0;
          unk_1EB324B88 = &ggl::texturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedShaderVertexFunctionDescriptor(void)::ref = v260;
          *(_DWORD *)algn_1EB324B4C = 0;
          qword_1EB324B90 = 0;
          unk_1EB324B98 = &ggl::texturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324BA8 = 0;
          unk_1EB324BB0 = 0;
          qword_1EB324BA0 = 0;
        }
        qword_1EB31E1F0 = (uint64_t)&ggl::texturedShaderVertexFunctionDescriptor(void)::ref;
        {
          int v261 = ggl::crc32::compute<23ul>("TexturedShaderFragment");
          qword_1EB3250B8 = 0;
          unk_1EB3250C0 = &ggl::texturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3250C8 = 0;
          unk_1EB3250D0 = &ggl::texturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedShaderFragmentFunctionDescriptor(void)::ref = v261;
          *(_DWORD *)algn_1EB3250A4 = 1;
          qword_1EB3250D8 = 0;
          unk_1EB3250E0 = &ggl::texturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3250A8 = (uint64_t)"TexturedShader";
          unk_1EB3250B0 = 0;
          qword_1EB3250E8 = 1;
          unk_1EB3250F0 = &ggl::texturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325100 = 0;
          unk_1EB325108 = 0;
          qword_1EB3250F8 = 1;
        }
        qword_1EB31E1F8 = (uint64_t)&ggl::texturedShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v262 = ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
          qword_1E958C3D0 = (uint64_t)"TexturedDrapedSRGBBlendShader";
          unk_1E958C3D8 = ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1E958C3E0 = 1;
          unk_1E958C3E8 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1E958C3F0 = 3;
          unk_1E958C3F8 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1E958C400 = 0;
          unk_1E958C408 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = v262;
          *(_DWORD *)algn_1E958C3CC = 0;
          qword_1E958C410 = 0;
          unk_1E958C418 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C428 = 0;
          unk_1E958C430 = 0;
          qword_1E958C420 = 0;
        }
        qword_1EB31E200 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
        {
          int v263 = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
          qword_1E958C458 = 0;
          unk_1E958C460 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1E958C468 = 2;
          unk_1E958C470 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = v263;
          *(_DWORD *)algn_1E958C444 = 1;
          qword_1E958C478 = 0;
          unk_1E958C480 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1E958C448 = (uint64_t)"TexturedDrapedSRGBBlendShader";
          unk_1E958C450 = 0;
          qword_1E958C488 = 1;
          unk_1E958C490 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C4A0 = 0;
          unk_1E958C4A8 = 0;
          qword_1E958C498 = 1;
        }
        qword_1EB31E208 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v264 = ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
          qword_1EB327C40 = (uint64_t)"TexturedSRGBBlendShader";
          unk_1EB327C48 = ggl::texturedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327C50 = 1;
          unk_1EB327C58 = &ggl::texturedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327C60 = 3;
          unk_1EB327C68 = &ggl::texturedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327C70 = 0;
          unk_1EB327C78 = &ggl::texturedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = v264;
          *(_DWORD *)algn_1EB327C3C = 0;
          qword_1EB327C80 = 0;
          unk_1EB327C88 = &ggl::texturedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327C98 = 0;
          unk_1EB327CA0 = 0;
          qword_1EB327C90 = 0;
        }
        qword_1EB31E210 = (uint64_t)&ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
        {
          int v265 = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
          qword_1EB328AA8 = 0;
          unk_1EB328AB0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328AB8 = 2;
          unk_1EB328AC0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = v265;
          *(_DWORD *)algn_1EB328A94 = 1;
          qword_1EB328AC8 = 0;
          unk_1EB328AD0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328A98 = (uint64_t)"TexturedSRGBBlendShader";
          unk_1EB328AA0 = 0;
          qword_1EB328AD8 = 1;
          unk_1EB328AE0 = &ggl::texturedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328AF0 = 0;
          unk_1EB328AF8 = 0;
          qword_1EB328AE8 = 1;
        }
        qword_1EB31E218 = (uint64_t)&ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB31AF10 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1EB31AF18 = ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AF20 = 1;
          unk_1EB31AF28 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AF30 = 3;
          unk_1EB31AF38 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AF40 = 0;
          unk_1EB31AF48 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref = 103723494;
          qword_1EB31AF50 = 0;
          unk_1EB31AF58 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AF68 = 0;
          unk_1EB31AF70 = 0;
          qword_1EB31AF60 = 0;
        }
        qword_1EB31E220 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB31AF98 = 0;
          unk_1EB31AFA0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AFA8 = 2;
          unk_1EB31AFB0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1F407266DLL;
          qword_1EB31AFB8 = 0;
          unk_1EB31AFC0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AF88 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1EB31AF90 = 0;
          qword_1EB31AFC8 = 2;
          unk_1EB31AFD0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AFE0 = 0;
          unk_1EB31AFE8 = 0;
          qword_1EB31AFD8 = 2;
        }
        qword_1EB31E228 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v266 = ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
          qword_1EB3276B0 = (uint64_t)"TexturedExtendedShader";
          unk_1EB3276B8 = ggl::texturedExtendedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3276C0 = 1;
          unk_1EB3276C8 = &ggl::texturedExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3276D0 = 3;
          unk_1EB3276D8 = &ggl::texturedExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3276E0 = 0;
          unk_1EB3276E8 = &ggl::texturedExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref = v266;
          *(_DWORD *)algn_1EB3276AC = 0;
          qword_1EB3276F0 = 0;
          unk_1EB3276F8 = &ggl::texturedExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327708 = 0;
          unk_1EB327710 = 0;
          qword_1EB327700 = 0;
        }
        qword_1EB31E230 = (uint64_t)&ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref;
        {
          int v267 = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
          qword_1EB3284D8 = 0;
          unk_1EB3284E0 = &ggl::texturedExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3284E8 = 1;
          unk_1EB3284F0 = &ggl::texturedExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref = v267;
          *(_DWORD *)algn_1EB3284C4 = 1;
          qword_1EB3284F8 = 0;
          unk_1EB328500 = &ggl::texturedExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3284C8 = (uint64_t)"TexturedExtendedShader";
          unk_1EB3284D0 = 0;
          qword_1EB328508 = 1;
          unk_1EB328510 = &ggl::texturedExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328520 = 0;
          unk_1EB328528 = 0;
          qword_1EB328518 = 1;
        }
        qword_1EB31E238 = (uint64_t)&ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v268 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
          qword_1EB326730 = (uint64_t)"StyledTexturedShader";
          unk_1EB326738 = ggl::styledTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326740 = 1;
          unk_1EB326748 = &ggl::styledTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB326750 = 2;
          unk_1EB326758 = &ggl::styledTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB326760 = 0;
          unk_1EB326768 = &ggl::styledTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref = v268;
          *(_DWORD *)algn_1EB32672C = 0;
          qword_1EB326770 = 0;
          unk_1EB326778 = &ggl::styledTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326788 = 0;
          unk_1EB326790 = 0;
          qword_1EB326780 = 0;
        }
        qword_1EB31E240 = (uint64_t)&ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
          *(_DWORD *)algn_1EB3275C4 = 1;
          qword_1EB3275C8 = (uint64_t)"StyledTexturedShader";
          unk_1EB3275D0 = 0;
          qword_1EB3275D8 = 0;
          unk_1EB3275E0 = &ggl::styledTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3275E8 = 0;
          unk_1EB3275F0 = &ggl::styledTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB3275F8 = 0;
          unk_1EB327600 = &ggl::styledTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327608 = 2;
          unk_1EB327610 = &ggl::styledTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327620 = 0;
          unk_1EB327628 = 0;
          qword_1EB327618 = 2;
        }
        qword_1EB31E248 = (uint64_t)&ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
          *(_DWORD *)algn_1EB3181EC = 0;
          qword_1EB3181F0 = (uint64_t)"ScreenTexturedQuadShader";
          unk_1EB3181F8 = ggl::screenTexturedQuadShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB318200 = 1;
          unk_1EB318208 = &ggl::screenTexturedQuadShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB318210 = 1;
          unk_1EB318218 = &ggl::screenTexturedQuadShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB318220 = 0;
          unk_1EB318228 = &ggl::screenTexturedQuadShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB318230 = 0;
          unk_1EB318238 = &ggl::screenTexturedQuadShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318248 = 0;
          unk_1EB318250 = 0;
          qword_1EB318240 = 0;
        }
        qword_1EB31E250 = (uint64_t)&ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref;
        {
          int v269 = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
          qword_1EB318448 = 0;
          unk_1EB318450 = &ggl::screenTexturedQuadShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB318458 = 0;
          unk_1EB318460 = &ggl::screenTexturedQuadShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref = v269;
          *(_DWORD *)algn_1EB318434 = 1;
          qword_1EB318468 = 0;
          unk_1EB318470 = &ggl::screenTexturedQuadShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB318438 = (uint64_t)"ScreenTexturedQuadShader";
          unk_1EB318440 = 0;
          qword_1EB318478 = 1;
          unk_1EB318480 = &ggl::screenTexturedQuadShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318490 = 0;
          unk_1EB318498 = 0;
          qword_1EB318488 = 1;
        }
        qword_1EB31E258 = (uint64_t)&ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v270 = ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
          qword_1E958C270 = (uint64_t)"PoleTexturedBlendShader";
          unk_1E958C278 = ggl::poleTexturedBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1E958C280 = 1;
          unk_1E958C288 = &ggl::poleTexturedBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1E958C290 = 3;
          unk_1E958C298 = &ggl::poleTexturedBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1E958C2A0 = 0;
          unk_1E958C2A8 = &ggl::poleTexturedBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref = v270;
          *(_DWORD *)algn_1E958C26C = 0;
          qword_1E958C2B0 = 0;
          unk_1E958C2B8 = &ggl::poleTexturedBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C2C8 = 0;
          unk_1E958C2D0 = 0;
          qword_1E958C2C0 = 0;
        }
        qword_1EB31E260 = (uint64_t)&ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref;
        {
          int v271 = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
          qword_1E958C368 = 0;
          unk_1E958C370 = &ggl::poleTexturedBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1E958C378 = 1;
          unk_1E958C380 = &ggl::poleTexturedBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref = v271;
          *(_DWORD *)algn_1E958C354 = 1;
          qword_1E958C388 = 0;
          unk_1E958C390 = &ggl::poleTexturedBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1E958C358 = (uint64_t)"PoleTexturedBlendShader";
          unk_1E958C360 = 0;
          qword_1E958C398 = 1;
          unk_1E958C3A0 = &ggl::poleTexturedBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1E958C3B0 = 0;
          unk_1E958C3B8 = 0;
          qword_1E958C3A8 = 1;
        }
        qword_1EB31E268 = (uint64_t)&ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v272 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
          qword_1EB32CD98 = (uint64_t)"TexturedInnerShadowRibbonShader";
          unk_1EB32CDA0 = ggl::texturedInnerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32CDA8 = 1;
          unk_1EB32CDB0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32CDB8 = 4;
          unk_1EB32CDC0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32CDC8 = 0;
          unk_1EB32CDD0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v272;
          *(_DWORD *)algn_1EB32CD94 = 0;
          qword_1EB32CDD8 = 0;
          unk_1EB32CDE0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32CDF0 = 0;
          unk_1EB32CDF8 = 0;
          qword_1EB32CDE8 = 0;
        }
        qword_1EB31E270 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32AB60 = 0;
          unk_1EB32AB68 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AB70 = 3;
          unk_1EB32AB78 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x17C729238;
          qword_1EB32AB80 = 0;
          unk_1EB32AB88 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AB50 = (uint64_t)"TexturedInnerShadowRibbonShader";
          unk_1EB32AB58 = 0;
          qword_1EB32AB90 = 3;
          unk_1EB32AB98 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32ABA8 = 0;
          unk_1EB32ABB0 = 0;
          qword_1EB32ABA0 = 3;
        }
        qword_1EB31E278 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v273 = ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
          qword_1EB328B08 = (uint64_t)"TexturedSolidRibbonShader";
          unk_1EB328B10 = ggl::texturedSolidRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB328B18 = 1;
          unk_1EB328B20 = &ggl::texturedSolidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328B28 = 4;
          unk_1EB328B30 = &ggl::texturedSolidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328B38 = 0;
          unk_1EB328B40 = &ggl::texturedSolidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref = v273;
          *(_DWORD *)algn_1EB328B04 = 0;
          qword_1EB328B48 = 0;
          unk_1EB328B50 = &ggl::texturedSolidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328B60 = 0;
          unk_1EB328B68 = 0;
          qword_1EB328B58 = 0;
        }
        qword_1EB31E280 = (uint64_t)&ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
          *(_DWORD *)algn_1EB3295EC = 1;
          qword_1EB3295F0 = (uint64_t)"TexturedSolidRibbonShader";
          unk_1EB3295F8 = 0;
          qword_1EB329600 = 0;
          unk_1EB329608 = &ggl::texturedSolidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329610 = 1;
          unk_1EB329618 = &ggl::texturedSolidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB329620 = 0;
          unk_1EB329628 = &ggl::texturedSolidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329630 = 2;
          unk_1EB329638 = &ggl::texturedSolidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329648 = 0;
          unk_1EB329650 = 0;
          qword_1EB329640 = 2;
        }
        qword_1EB31E288 = (uint64_t)&ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v274 = ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
          qword_1EB329D98 = (uint64_t)"TextureWithReverseAlphaShader";
          unk_1EB329DA0 = ggl::textureWithReverseAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329DA8 = 1;
          unk_1EB329DB0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329DB8 = 2;
          unk_1EB329DC0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329DC8 = 0;
          unk_1EB329DD0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref = v274;
          *(_DWORD *)algn_1EB329D94 = 0;
          qword_1EB329DD8 = 0;
          unk_1EB329DE0 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329DF0 = 0;
          unk_1EB329DF8 = 0;
          qword_1EB329DE8 = 0;
        }
        qword_1EB31E290 = (uint64_t)&ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref;
        {
          int v275 = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
          qword_1EB32A5E0 = 0;
          unk_1EB32A5E8 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A5F0 = 1;
          unk_1EB32A5F8 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref = v275;
          *(_DWORD *)algn_1EB32A5CC = 1;
          qword_1EB32A600 = 0;
          unk_1EB32A608 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A5D0 = (uint64_t)"TextureWithReverseAlphaShader";
          unk_1EB32A5D8 = 0;
          qword_1EB32A610 = 1;
          unk_1EB32A618 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A628 = 0;
          unk_1EB32A630 = 0;
          qword_1EB32A620 = 1;
        }
        qword_1EB31E298 = (uint64_t)&ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v276 = ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
          qword_1EB325590 = (uint64_t)"TrafficGlowShader";
          unk_1EB325598 = ggl::trafficGlowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3255A0 = 1;
          unk_1EB3255A8 = &ggl::trafficGlowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3255B0 = 3;
          unk_1EB3255B8 = &ggl::trafficGlowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3255C0 = 0;
          unk_1EB3255C8 = &ggl::trafficGlowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref = v276;
          *(_DWORD *)algn_1EB32558C = 0;
          qword_1EB3255D0 = 0;
          unk_1EB3255D8 = &ggl::trafficGlowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3255E8 = 0;
          unk_1EB3255F0 = 0;
          qword_1EB3255E0 = 0;
        }
        qword_1EB31E2A0 = (uint64_t)&ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
          *(_DWORD *)algn_1EB326054 = 1;
          qword_1EB326058 = (uint64_t)"TrafficGlowShader";
          unk_1EB326060 = 0;
          qword_1EB326068 = 0;
          unk_1EB326070 = &ggl::trafficGlowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326078 = 1;
          unk_1EB326080 = &ggl::trafficGlowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB326088 = 0;
          unk_1EB326090 = &ggl::trafficGlowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326098 = 0;
          unk_1EB3260A0 = &ggl::trafficGlowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3260B0 = 0;
          unk_1EB3260B8 = 0;
          qword_1EB3260A8 = 0;
        }
        qword_1EB31E2A8 = (uint64_t)&ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v277 = ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
          qword_1EB327D28 = (uint64_t)"TransitLineRibbonShader";
          unk_1EB327D30 = ggl::transitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327D38 = 1;
          unk_1EB327D40 = &ggl::transitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327D48 = 5;
          unk_1EB327D50 = &ggl::transitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327D58 = 0;
          unk_1EB327D60 = &ggl::transitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref = v277;
          *(_DWORD *)algn_1EB327D24 = 0;
          qword_1EB327D68 = 1;
          unk_1EB327D70 = &ggl::transitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327D80 = 0;
          unk_1EB327D88 = 0;
          qword_1EB327D78 = 1;
        }
        qword_1EB31E2B0 = (uint64_t)&ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          int v278 = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
          qword_1EB328B90 = 0;
          unk_1EB328B98 = &ggl::transitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB328BA0 = 1;
          unk_1EB328BA8 = &ggl::transitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = v278;
          *(_DWORD *)algn_1EB328B7C = 1;
          qword_1EB328BB0 = 0;
          unk_1EB328BB8 = &ggl::transitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB328B80 = (uint64_t)"TransitLineRibbonShader";
          unk_1EB328B88 = 0;
          qword_1EB328BC0 = 1;
          unk_1EB328BC8 = &ggl::transitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB328BD8 = 0;
          unk_1EB328BE0 = 0;
          qword_1EB328BD0 = 1;
        }
        qword_1EB31E2B8 = (uint64_t)&ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32A738 = (uint64_t)"PatternedTransitLineRibbonShader";
          unk_1EB32A740 = ggl::patternedTransitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A748 = 1;
          unk_1EB32A750 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A758 = 6;
          unk_1EB32A760 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A768 = 0;
          unk_1EB32A770 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref = 1746350796;
          qword_1EB32A778 = 1;
          unk_1EB32A780 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A790 = 0;
          unk_1EB32A798 = 0;
          qword_1EB32A788 = 1;
        }
        qword_1EB31E2C0 = (uint64_t)&ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x1EFDD56E6;
          qword_1EB32AD10 = (uint64_t)"PatternedTransitLineRibbonShader";
          unk_1EB32AD18 = 0;
          qword_1EB32AD20 = 0;
          unk_1EB32AD28 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AD30 = 1;
          unk_1EB32AD38 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AD40 = 0;
          unk_1EB32AD48 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AD50 = 2;
          unk_1EB32AD58 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AD68 = 0;
          unk_1EB32AD70 = 0;
          qword_1EB32AD60 = 2;
        }
        qword_1EB31E2C8 = (uint64_t)&ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
          *(_DWORD *)algn_1EB328FA4 = 0;
          qword_1EB328FA8 = (uint64_t)"TransitNodeColorizedShader";
          unk_1EB328FB0 = ggl::transitNodeColorizedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB328FB8 = 1;
          unk_1EB328FC0 = &ggl::transitNodeColorizedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB328FC8 = 1;
          unk_1EB328FD0 = &ggl::transitNodeColorizedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB328FD8 = 0;
          unk_1EB328FE0 = &ggl::transitNodeColorizedShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB328FE8 = 0;
          unk_1EB328FF0 = &ggl::transitNodeColorizedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329000 = 0;
          unk_1EB329008 = 0;
          qword_1EB328FF8 = 0;
        }
        qword_1EB31E2D0 = (uint64_t)&ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref;
        {
          int v279 = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
          qword_1EB329840 = 0;
          unk_1EB329848 = &ggl::transitNodeColorizedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329850 = 0;
          unk_1EB329858 = &ggl::transitNodeColorizedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref = v279;
          *(_DWORD *)algn_1EB32982C = 1;
          qword_1EB329860 = 0;
          unk_1EB329868 = &ggl::transitNodeColorizedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329830 = (uint64_t)"TransitNodeColorizedShader";
          unk_1EB329838 = 0;
          qword_1EB329870 = 1;
          unk_1EB329878 = &ggl::transitNodeColorizedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329888 = 0;
          unk_1EB329890 = 0;
          qword_1EB329880 = 1;
        }
        qword_1EB31E2D8 = (uint64_t)&ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
          *(_DWORD *)algn_1EB32679C = 0;
          qword_1EB3267A0 = (uint64_t)"TransitNodeRGBShader";
          unk_1EB3267A8 = ggl::transitNodeRGBShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3267B0 = 1;
          unk_1EB3267B8 = &ggl::transitNodeRGBShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3267C0 = 1;
          unk_1EB3267C8 = &ggl::transitNodeRGBShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3267D0 = 0;
          unk_1EB3267D8 = &ggl::transitNodeRGBShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB3267E0 = 0;
          unk_1EB3267E8 = &ggl::transitNodeRGBShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3267F8 = 0;
          unk_1EB326800 = 0;
          qword_1EB3267F0 = 0;
        }
        qword_1EB31E2E0 = (uint64_t)&ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref;
        {
          int v280 = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
          qword_1EB327738 = 0;
          unk_1EB327740 = &ggl::transitNodeRGBShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327748 = 0;
          unk_1EB327750 = &ggl::transitNodeRGBShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref = v280;
          *(_DWORD *)algn_1EB327724 = 1;
          qword_1EB327758 = 0;
          unk_1EB327760 = &ggl::transitNodeRGBShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327728 = (uint64_t)"TransitNodeRGBShader";
          unk_1EB327730 = 0;
          qword_1EB327768 = 1;
          unk_1EB327770 = &ggl::transitNodeRGBShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327780 = 0;
          unk_1EB327788 = 0;
          qword_1EB327778 = 1;
        }
        qword_1EB31E2E8 = (uint64_t)&ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v281 = ggl::crc32::compute<22ul>("VenueWallShaderVertex");
          qword_1EB324EE0 = (uint64_t)"VenueWallShader";
          unk_1EB324EE8 = ggl::venueWallShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB324EF0 = 1;
          unk_1EB324EF8 = &ggl::venueWallShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB324F00 = 4;
          unk_1EB324F08 = &ggl::venueWallShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB324F10 = 0;
          unk_1EB324F18 = &ggl::venueWallShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallShaderVertexFunctionDescriptor(void)::ref = v281;
          *(_DWORD *)algn_1EB324EDC = 0;
          qword_1EB324F20 = 0;
          unk_1EB324F28 = &ggl::venueWallShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB324F38 = 0;
          unk_1EB324F40 = 0;
          qword_1EB324F30 = 0;
        }
        qword_1EB31E2F0 = (uint64_t)&ggl::venueWallShaderVertexFunctionDescriptor(void)::ref;
        {
          int v282 = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
          qword_1EB325618 = 0;
          unk_1EB325620 = &ggl::venueWallShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB325628 = 0;
          unk_1EB325630 = &ggl::venueWallShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref = v282;
          *(_DWORD *)algn_1EB325604 = 1;
          qword_1EB325638 = 0;
          unk_1EB325640 = &ggl::venueWallShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB325608 = (uint64_t)"VenueWallShader";
          unk_1EB325610 = 0;
          qword_1EB325648 = 1;
          unk_1EB325650 = &ggl::venueWallShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325660 = 0;
          unk_1EB325668 = 0;
          qword_1EB325658 = 1;
        }
        qword_1EB31E2F8 = (uint64_t)&ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v283 = ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
          qword_1EB325A80 = (uint64_t)"VenueWallTopShader";
          unk_1EB325A88 = ggl::venueWallTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB325A90 = 1;
          unk_1EB325A98 = &ggl::venueWallTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB325AA0 = 3;
          unk_1EB325AA8 = &ggl::venueWallTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB325AB0 = 0;
          unk_1EB325AB8 = &ggl::venueWallTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref = v283;
          *(_DWORD *)algn_1EB325A7C = 0;
          qword_1EB325AC0 = 0;
          unk_1EB325AC8 = &ggl::venueWallTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB325AD8 = 0;
          unk_1EB325AE0 = 0;
          qword_1EB325AD0 = 0;
        }
        qword_1EB31E300 = (uint64_t)&ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref;
        {
          int v284 = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
          qword_1EB326828 = 0;
          unk_1EB326830 = &ggl::venueWallTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB326838 = 0;
          unk_1EB326840 = &ggl::venueWallTopShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref = v284;
          *(_DWORD *)algn_1EB326814 = 1;
          qword_1EB326848 = 0;
          unk_1EB326850 = &ggl::venueWallTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB326818 = (uint64_t)"VenueWallTopShader";
          unk_1EB326820 = 0;
          qword_1EB326858 = 1;
          unk_1EB326860 = &ggl::venueWallTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB326870 = 0;
          unk_1EB326878 = 0;
          qword_1EB326868 = 1;
        }
        qword_1EB31E308 = (uint64_t)&ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v285 = ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
          qword_1EB327040 = (uint64_t)"VenueWallEndCapShader";
          unk_1EB327048 = ggl::venueWallEndCapShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB327050 = 1;
          unk_1EB327058 = &ggl::venueWallEndCapShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB327060 = 4;
          unk_1EB327068 = &ggl::venueWallEndCapShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB327070 = 0;
          unk_1EB327078 = &ggl::venueWallEndCapShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref = v285;
          *(_DWORD *)algn_1EB32703C = 0;
          qword_1EB327080 = 0;
          unk_1EB327088 = &ggl::venueWallEndCapShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327098 = 0;
          unk_1EB3270A0 = 0;
          qword_1EB327090 = 0;
        }
        qword_1EB31E310 = (uint64_t)&ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref;
        {
          int v286 = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
          qword_1EB327DA8 = 0;
          unk_1EB327DB0 = &ggl::venueWallEndCapShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327DB8 = 0;
          unk_1EB327DC0 = &ggl::venueWallEndCapShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref = v286;
          *(_DWORD *)algn_1EB327D94 = 1;
          qword_1EB327DC8 = 0;
          unk_1EB327DD0 = &ggl::venueWallEndCapShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327D98 = (uint64_t)"VenueWallEndCapShader";
          unk_1EB327DA0 = 0;
          qword_1EB327DD8 = 1;
          unk_1EB327DE0 = &ggl::venueWallEndCapShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327DF0 = 0;
          unk_1EB327DF8 = 0;
          qword_1EB327DE8 = 1;
        }
        qword_1EB31E318 = (uint64_t)&ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v287 = ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
          qword_1EB3270B8 = (uint64_t)"VenueWallShadowShader";
          unk_1EB3270C0 = ggl::venueWallShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3270C8 = 1;
          unk_1EB3270D0 = &ggl::venueWallShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3270D8 = 2;
          unk_1EB3270E0 = &ggl::venueWallShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3270E8 = 0;
          unk_1EB3270F0 = &ggl::venueWallShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref = v287;
          *(_DWORD *)algn_1EB3270B4 = 0;
          qword_1EB3270F8 = 0;
          unk_1EB327100 = &ggl::venueWallShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327110 = 0;
          unk_1EB327118 = 0;
          qword_1EB327108 = 0;
        }
        qword_1EB31E320 = (uint64_t)&ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
          *(_DWORD *)algn_1EB327E0C = 1;
          qword_1EB327E20 = 0;
          unk_1EB327E28 = &ggl::venueWallShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327E30 = 0;
          unk_1EB327E38 = &ggl::venueWallShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB327E40 = 0;
          unk_1EB327E48 = &ggl::venueWallShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327E10 = (uint64_t)"VenueWallShadowShader";
          unk_1EB327E18 = 0;
          qword_1EB327E50 = 0;
          unk_1EB327E58 = &ggl::venueWallShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327E68 = 0;
          unk_1EB327E70 = 0;
          qword_1EB327E60 = 0;
        }
        qword_1EB31E328 = (uint64_t)&ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v288 = ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
          qword_1EB329B60 = (uint64_t)"HorizontalVenue3DStrokeShader";
          unk_1EB329B68 = ggl::horizontalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329B70 = 1;
          unk_1EB329B78 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329B80 = 2;
          unk_1EB329B88 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329B90 = 0;
          unk_1EB329B98 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = v288;
          *(_DWORD *)algn_1EB329B5C = 0;
          qword_1EB329BA0 = 0;
          unk_1EB329BA8 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329BB8 = 0;
          unk_1EB329BC0 = 0;
          qword_1EB329BB0 = 0;
        }
        qword_1EB31E330 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          int v289 = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
          qword_1EB32A488 = 0;
          unk_1EB32A490 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A498 = 0;
          unk_1EB32A4A0 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = v289;
          *(_DWORD *)algn_1EB32A474 = 1;
          qword_1EB32A4A8 = 0;
          unk_1EB32A4B0 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A478 = (uint64_t)"HorizontalVenue3DStrokeShader";
          unk_1EB32A480 = 0;
          qword_1EB32A4B8 = 1;
          unk_1EB32A4C0 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A4D0 = 0;
          unk_1EB32A4D8 = 0;
          qword_1EB32A4C8 = 1;
        }
        qword_1EB31E338 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v290 = ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
          qword_1EB329660 = (uint64_t)"VerticalVenue3DStrokeShader";
          unk_1EB329668 = ggl::verticalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB329670 = 1;
          unk_1EB329678 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB329680 = 2;
          unk_1EB329688 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB329690 = 0;
          unk_1EB329698 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = v290;
          *(_DWORD *)algn_1EB32965C = 0;
          qword_1EB3296A0 = 0;
          unk_1EB3296A8 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3296B8 = 0;
          unk_1EB3296C0 = 0;
          qword_1EB3296B0 = 0;
        }
        qword_1EB31E340 = (uint64_t)&ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
        {
          int v291 = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
          qword_1EB329E18 = 0;
          unk_1EB329E20 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB329E28 = 0;
          unk_1EB329E30 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = v291;
          *(_DWORD *)algn_1EB329E04 = 1;
          qword_1EB329E38 = 0;
          unk_1EB329E40 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB329E08 = (uint64_t)"VerticalVenue3DStrokeShader";
          unk_1EB329E10 = 0;
          qword_1EB329E48 = 1;
          unk_1EB329E50 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB329E60 = 0;
          unk_1EB329E68 = 0;
          qword_1EB329E58 = 1;
        }
        qword_1EB31E348 = (uint64_t)&ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
        {
          qword_1EB32ABC0 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1EB32ABC8 = ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32ABD0 = 1;
          unk_1EB32ABD8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32ABE0 = 2;
          unk_1EB32ABE8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32ABF0 = 0;
          unk_1EB32ABF8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref = 1346813876;
          qword_1EB32AC00 = 0;
          unk_1EB32AC08 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AC18 = 0;
          unk_1EB32AC20 = 0;
          qword_1EB32AC10 = 0;
        }
        qword_1EB31E350 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref;
        {
          qword_1EB32AEF8 = 0;
          unk_1EB32AF00 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AF08 = 0;
          unk_1EB32AF10 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x19B3262D4;
          qword_1EB32AF18 = 0;
          unk_1EB32AF20 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AEE8 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1EB32AEF0 = 0;
          qword_1EB32AF28 = 0;
          unk_1EB32AF30 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AF40 = 0;
          unk_1EB32AF48 = 0;
          qword_1EB32AF38 = 0;
        }
        qword_1EB31E358 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v292 = ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
          qword_1EB3298A0 = (uint64_t)"VenueOpenToBelowShadowShader";
          unk_1EB3298A8 = ggl::venueOpenToBelowShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3298B0 = 1;
          unk_1EB3298B8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3298C0 = 2;
          unk_1EB3298C8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3298D0 = 0;
          unk_1EB3298D8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref = v292;
          *(_DWORD *)algn_1EB32989C = 0;
          qword_1EB3298E0 = 0;
          unk_1EB3298E8 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3298F8 = 0;
          unk_1EB329900 = 0;
          qword_1EB3298F0 = 0;
        }
        qword_1EB31E360 = (uint64_t)&ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
          *(_DWORD *)algn_1EB32A0C4 = 1;
          qword_1EB32A0C8 = (uint64_t)"VenueOpenToBelowShadowShader";
          unk_1EB32A0D0 = 0;
          qword_1EB32A0D8 = 0;
          unk_1EB32A0E0 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A0E8 = 1;
          unk_1EB32A0F0 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A0F8 = 0;
          unk_1EB32A100 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A108 = 0;
          unk_1EB32A110 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A120 = 0;
          unk_1EB32A128 = 0;
          qword_1EB32A118 = 0;
        }
        qword_1EB31E368 = (uint64_t)&ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v293 = ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
          qword_1EB31A848 = (uint64_t)"DaVinciTrafficShader";
          unk_1EB31A850 = ggl::daVinciTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31A858 = 1;
          unk_1EB31A860 = &ggl::daVinciTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A868 = 4;
          unk_1EB31A870 = &ggl::daVinciTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A878 = 0;
          unk_1EB31A880 = &ggl::daVinciTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref = v293;
          *(_DWORD *)algn_1EB31A844 = 0;
          qword_1EB31A888 = 0;
          unk_1EB31A890 = &ggl::daVinciTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A8A0 = 0;
          unk_1EB31A8A8 = 0;
          qword_1EB31A898 = 0;
        }
        qword_1EB31E370 = (uint64_t)&ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
          *(_DWORD *)algn_1EB31A92C = 1;
          qword_1EB31A940 = 0;
          unk_1EB31A948 = &ggl::daVinciTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A950 = 2;
          unk_1EB31A958 = &ggl::daVinciTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A960 = 0;
          unk_1EB31A968 = &ggl::daVinciTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A930 = (uint64_t)"DaVinciTrafficShader";
          unk_1EB31A938 = 0;
          qword_1EB31A970 = 2;
          unk_1EB31A978 = &ggl::daVinciTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A988 = 0;
          unk_1EB31A990 = 0;
          qword_1EB31A980 = 2;
        }
        qword_1EB31E378 = (uint64_t)&ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v294 = ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
          qword_1EB32BEE8 = (uint64_t)"DaVinciDecalShader";
          unk_1EB32BEF0 = ggl::daVinciDecalShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32BEF8 = 2;
          unk_1EB32BF00 = &ggl::daVinciDecalShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32BF08 = 4;
          unk_1EB32BF10 = &ggl::daVinciDecalShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32BF18 = 1;
          unk_1EB32BF20 = &ggl::daVinciDecalShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref = v294;
          *(_DWORD *)algn_1EB32BEE4 = 0;
          qword_1EB32BF28 = 0;
          unk_1EB32BF30 = &ggl::daVinciDecalShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32BF40 = 0;
          unk_1EB32BF48 = 0;
          qword_1EB32BF38 = 0;
        }
        qword_1EB31E380 = (uint64_t)&ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
          *(_DWORD *)algn_1EB32C1A4 = 1;
          qword_1EB32C1A8 = (uint64_t)"DaVinciDecalShader";
          unk_1EB32C1B0 = 0;
          qword_1EB32C1B8 = 0;
          unk_1EB32C1C0 = &ggl::daVinciDecalShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C1C8 = 5;
          unk_1EB32C1D0 = &ggl::daVinciDecalShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C1D8 = 0;
          unk_1EB32C1E0 = &ggl::daVinciDecalShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C1E8 = 4;
          unk_1EB32C1F0 = &ggl::daVinciDecalShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C200 = 0;
          unk_1EB32C208 = 0;
          qword_1EB32C1F8 = 4;
        }
        qword_1EB31E388 = (uint64_t)&ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
          *(_DWORD *)algn_1EB32C044 = 0;
          qword_1EB32C048 = (uint64_t)"DaVinciGroundShader";
          unk_1EB32C050 = ggl::daVinciGroundShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32C058 = 5;
          unk_1EB32C060 = &ggl::daVinciGroundShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C068 = 12;
          unk_1EB32C070 = &ggl::daVinciGroundShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C078 = 4;
          unk_1EB32C080 = &ggl::daVinciGroundShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C088 = 1;
          unk_1EB32C090 = &ggl::daVinciGroundShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C0A0 = 0;
          unk_1EB32C0A8 = 0;
          qword_1EB32C098 = 1;
        }
        qword_1EB31E390 = (uint64_t)&ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
          *(_DWORD *)algn_1EB32C2FC = 1;
          qword_1EB32C300 = (uint64_t)"DaVinciGroundShader";
          unk_1EB32C308 = 0;
          qword_1EB32C310 = 0;
          unk_1EB32C318 = &ggl::daVinciGroundShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C320 = 21;
          unk_1EB32C328 = &ggl::daVinciGroundShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C330 = 0;
          unk_1EB32C338 = &ggl::daVinciGroundShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C340 = 12;
          unk_1EB32C348 = &ggl::daVinciGroundShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C358 = 0;
          unk_1EB32C360 = 0;
          qword_1EB32C350 = 12;
        }
        qword_1EB31E398 = (uint64_t)&ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref = 2461507574;
          qword_1EB31AE28 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1EB31AE30 = ggl::daVinciGroundNotCompressedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AE38 = 5;
          unk_1EB31AE40 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AE48 = 12;
          unk_1EB31AE50 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AE58 = 4;
          unk_1EB31AE60 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AE68 = 1;
          unk_1EB31AE70 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AE80 = 0;
          unk_1EB31AE88 = 0;
          qword_1EB31AE78 = 1;
        }
        qword_1EB31E3A0 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref = 0x16213AD6ALL;
          qword_1EB31AEA0 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1EB31AEA8 = 0;
          qword_1EB31AEB0 = 0;
          unk_1EB31AEB8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AEC0 = 21;
          unk_1EB31AEC8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AED0 = 0;
          unk_1EB31AED8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31AEE0 = 12;
          unk_1EB31AEE8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AEF8 = 0;
          unk_1EB31AF00 = 0;
          qword_1EB31AEF0 = 12;
        }
        qword_1EB31E3A8 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v295 = ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
          qword_1EB31A9A0 = (uint64_t)"DaVinciGroundDepthShader";
          unk_1EB31A9A8 = ggl::daVinciGroundDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31A9B0 = 3;
          unk_1EB31A9B8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A9C0 = 4;
          unk_1EB31A9C8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A9D0 = 2;
          unk_1EB31A9D8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref = v295;
          *(_DWORD *)algn_1EB31A99C = 0;
          qword_1EB31A9E0 = 0;
          unk_1EB31A9E8 = &ggl::daVinciGroundDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A9F8 = 0;
          unk_1EB31AA00 = 0;
          qword_1EB31A9F0 = 0;
        }
        qword_1EB31E3B0 = (uint64_t)&ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
          *(_DWORD *)algn_1EB31AB64 = 1;
          qword_1EB31AB68 = (uint64_t)"DaVinciGroundDepthShader";
          unk_1EB31AB70 = 0;
          qword_1EB31AB78 = 0;
          unk_1EB31AB80 = &ggl::daVinciGroundDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AB88 = 1;
          unk_1EB31AB90 = &ggl::daVinciGroundDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AB98 = 0;
          unk_1EB31ABA0 = &ggl::daVinciGroundDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31ABA8 = 0;
          unk_1EB31ABB0 = &ggl::daVinciGroundDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31ABC0 = 0;
          unk_1EB31ABC8 = 0;
          qword_1EB31ABB8 = 0;
        }
        qword_1EB31E3B8 = (uint64_t)&ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v296 = ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
          qword_1EB32C0C0 = (uint64_t)"DaVinciRibbonShader";
          unk_1EB32C0C8 = ggl::daVinciRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32C0D0 = 1;
          unk_1EB32C0D8 = &ggl::daVinciRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C0E0 = 8;
          unk_1EB32C0E8 = &ggl::daVinciRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C0F0 = 0;
          unk_1EB32C0F8 = &ggl::daVinciRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref = v296;
          *(_DWORD *)algn_1EB32C0BC = 0;
          qword_1EB32C100 = 1;
          unk_1EB32C108 = &ggl::daVinciRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C118 = 0;
          unk_1EB32C120 = 0;
          qword_1EB32C110 = 1;
        }
        qword_1EB31E3C0 = (uint64_t)&ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
          *(_DWORD *)algn_1EB32C374 = 1;
          qword_1EB32C378 = (uint64_t)"DaVinciRibbonShader";
          unk_1EB32C380 = 0;
          qword_1EB32C388 = 0;
          unk_1EB32C390 = &ggl::daVinciRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C398 = 4;
          unk_1EB32C3A0 = &ggl::daVinciRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C3A8 = 0;
          unk_1EB32C3B0 = &ggl::daVinciRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C3B8 = 3;
          unk_1EB32C3C0 = &ggl::daVinciRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C3D0 = 0;
          unk_1EB32C3D8 = 0;
          qword_1EB32C3C8 = 3;
        }
        qword_1EB31E3C8 = (uint64_t)&ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v297 = ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
          qword_1EB32C5C0 = (uint64_t)"DaVinciGroundShadowMapShader";
          unk_1EB32C5C8 = ggl::daVinciGroundShadowMapShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32C5D0 = 3;
          unk_1EB32C5D8 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C5E0 = 6;
          unk_1EB32C5E8 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C5F0 = 2;
          unk_1EB32C5F8 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref = v297;
          *(_DWORD *)algn_1EB32C5BC = 0;
          qword_1EB32C600 = 0;
          unk_1EB32C608 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C618 = 0;
          unk_1EB32C620 = 0;
          qword_1EB32C610 = 0;
        }
        qword_1EB31E3D0 = (uint64_t)&ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
          *(_DWORD *)algn_1EB32C634 = 1;
          qword_1EB32C648 = 0;
          unk_1EB32C650 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32C658 = 2;
          unk_1EB32C660 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32C668 = 0;
          unk_1EB32C670 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32C638 = (uint64_t)"DaVinciGroundShadowMapShader";
          unk_1EB32C640 = 0;
          qword_1EB32C678 = 0;
          unk_1EB32C680 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32C690 = 0;
          unk_1EB32C698 = 0;
          qword_1EB32C688 = 0;
        }
        qword_1EB31E3D8 = (uint64_t)&ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v298 = ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
          qword_1EB31C760 = (uint64_t)"LinearDepthShader";
          unk_1EB31C768 = ggl::linearDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31C770 = 3;
          unk_1EB31C778 = &ggl::linearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C780 = 6;
          unk_1EB31C788 = &ggl::linearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C790 = 2;
          unk_1EB31C798 = &ggl::linearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref = v298;
          *(_DWORD *)algn_1EB31C75C = 0;
          qword_1EB31C7A0 = 0;
          unk_1EB31C7A8 = &ggl::linearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C7B8 = 0;
          unk_1EB31C7C0 = 0;
          qword_1EB31C7B0 = 0;
        }
        qword_1EB31E3E0 = (uint64_t)&ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
          *(_DWORD *)algn_1EB31C7D4 = 1;
          qword_1EB31C7E8 = 0;
          unk_1EB31C7F0 = &ggl::linearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31C7F8 = 2;
          unk_1EB31C800 = &ggl::linearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31C808 = 0;
          unk_1EB31C810 = &ggl::linearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31C7D8 = (uint64_t)"LinearDepthShader";
          unk_1EB31C7E0 = 0;
          qword_1EB31C818 = 0;
          unk_1EB31C820 = &ggl::linearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31C830 = 0;
          unk_1EB31C838 = 0;
          qword_1EB31C828 = 0;
        }
        qword_1EB31E3E8 = (uint64_t)&ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v299 = ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
          qword_1EB318090 = (uint64_t)"PackedLinearDepthShader";
          unk_1EB318098 = ggl::packedLinearDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB3180A0 = 3;
          unk_1EB3180A8 = &ggl::packedLinearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3180B0 = 5;
          unk_1EB3180B8 = &ggl::packedLinearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3180C0 = 2;
          unk_1EB3180C8 = &ggl::packedLinearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref = v299;
          *(_DWORD *)algn_1EB31808C = 0;
          qword_1EB3180D0 = 0;
          unk_1EB3180D8 = &ggl::packedLinearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3180E8 = 0;
          unk_1EB3180F0 = 0;
          qword_1EB3180E0 = 0;
        }
        qword_1EB31E3F0 = (uint64_t)&ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
          *(_DWORD *)algn_1EB3182D4 = 1;
          qword_1EB3182E8 = 0;
          unk_1EB3182F0 = &ggl::packedLinearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB3182F8 = 2;
          unk_1EB318300 = &ggl::packedLinearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB318308 = 0;
          unk_1EB318310 = &ggl::packedLinearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB3182D8 = (uint64_t)"PackedLinearDepthShader";
          unk_1EB3182E0 = 0;
          qword_1EB318318 = 0;
          unk_1EB318320 = &ggl::packedLinearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB318330 = 0;
          unk_1EB318338 = 0;
          qword_1EB318328 = 0;
        }
        qword_1EB31E3F8 = (uint64_t)&ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v300 = ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
          qword_1EB31AD38 = (uint64_t)"TexturedAnimatedRibbonShader";
          unk_1EB31AD40 = ggl::texturedAnimatedRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31AD48 = 1;
          unk_1EB31AD50 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31AD58 = 3;
          unk_1EB31AD60 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31AD68 = 0;
          unk_1EB31AD70 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref = v300;
          *(_DWORD *)algn_1EB31AD34 = 0;
          qword_1EB31AD78 = 0;
          unk_1EB31AD80 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AD90 = 0;
          unk_1EB31AD98 = 0;
          qword_1EB31AD88 = 0;
        }
        qword_1EB31E400 = (uint64_t)&ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref;
        {
          ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
          *(_DWORD *)algn_1EB31ADAC = 1;
          qword_1EB31ADB0 = (uint64_t)"TexturedAnimatedRibbonShader";
          unk_1EB31ADB8 = 0;
          qword_1EB31ADC0 = 0;
          unk_1EB31ADC8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31ADD0 = 1;
          unk_1EB31ADD8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31ADE0 = 0;
          unk_1EB31ADE8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31ADF0 = 2;
          unk_1EB31ADF8 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31AE08 = 0;
          unk_1EB31AE10 = 0;
          qword_1EB31AE00 = 2;
        }
        qword_1EB31E408 = (uint64_t)&ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v301 = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
          qword_1EB326380 = (uint64_t)"FlyoverOverlayShader";
          unk_1EB326388 = ggl::flyoverOverlayShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB326390 = 1;
          unk_1EB326398 = &ggl::flyoverOverlayShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB3263A0 = 3;
          unk_1EB3263A8 = &ggl::flyoverOverlayShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB3263B0 = 0;
          unk_1EB3263B8 = &ggl::flyoverOverlayShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref = v301;
          *(_DWORD *)algn_1EB32637C = 0;
          qword_1EB3263C0 = 0;
          unk_1EB3263C8 = &ggl::flyoverOverlayShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB3263D8 = 0;
          unk_1EB3263E0 = 0;
          qword_1EB3263D0 = 0;
        }
        qword_1EB31E410 = (uint64_t)&ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref;
        {
          int v302 = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
          qword_1EB327218 = 0;
          unk_1EB327220 = &ggl::flyoverOverlayShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB327228 = 2;
          unk_1EB327230 = &ggl::flyoverOverlayShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref = v302;
          *(_DWORD *)algn_1EB327204 = 1;
          qword_1EB327238 = 0;
          unk_1EB327240 = &ggl::flyoverOverlayShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB327208 = (uint64_t)"FlyoverOverlayShader";
          unk_1EB327210 = 0;
          qword_1EB327248 = 1;
          unk_1EB327250 = &ggl::flyoverOverlayShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB327260 = 0;
          unk_1EB327268 = 0;
          qword_1EB327258 = 1;
        }
        qword_1EB31E418 = (uint64_t)&ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref;
        {
          int v303 = ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
          qword_1E958CC68 = (uint64_t)"GlobeTexturedShader";
          unk_1E958CC70 = ggl::globeTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1E958CC78 = 1;
          unk_1E958CC80 = &ggl::globeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1E958CC88 = 3;
          unk_1E958CC90 = &ggl::globeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1E958CC98 = 0;
          unk_1E958CCA0 = &ggl::globeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref = v303;
          *(_DWORD *)algn_1E958CC64 = 0;
          qword_1E958CCA8 = 1;
          unk_1E958CCB0 = &ggl::globeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1E958CCC0 = 0;
          unk_1E958CCC8 = 0;
          qword_1E958CCB8 = 1;
        }
        qword_1EB31E420 = (uint64_t)&ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref;
        {
          int v304 = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
          qword_1E958CCF0 = 0;
          unk_1E958CCF8 = &ggl::globeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1E958CD00 = 1;
          unk_1E958CD08 = &ggl::globeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref = v304;
          *(_DWORD *)algn_1E958CCDC = 1;
          qword_1E958CD10 = 0;
          unk_1E958CD18 = &ggl::globeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1E958CCE0 = (uint64_t)"GlobeTexturedShader";
          unk_1E958CCE8 = 0;
          qword_1E958CD20 = 1;
          unk_1E958CD28 = &ggl::globeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1E958CD38 = 0;
          unk_1E958CD40 = 0;
          qword_1E958CD30 = 1;
        }
        qword_1EB31E428 = (uint64_t)&ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref;
        {
          ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ClearTextureComputeShaderKernel");
          *(_DWORD *)algn_1EB31A58C = 2;
          qword_1EB31A590 = (uint64_t)"ClearTextureComputeShader";
          unk_1EB31A598 = 0;
          qword_1EB31A5A0 = 0;
          unk_1EB31A5A8 = &ggl::clearTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A5B0 = 0;
          unk_1EB31A5B8 = &ggl::clearTextureComputeShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A5C0 = 0;
          unk_1EB31A5C8 = &ggl::clearTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A5D0 = 1;
          unk_1EB31A5D8 = &ggl::clearTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A5E8 = 0;
          unk_1EB31A5F0 = 0;
          qword_1EB31A5E0 = 1;
        }
        qword_1EB31E430 = (uint64_t)&ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref;
        {
          int v305 = ggl::crc32::compute<36ul>("DownscaleTextureComputeShaderKernel");
          qword_1EB31A618 = 0;
          unk_1EB31A620 = &ggl::downscaleTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A628 = 0;
          unk_1EB31A630 = &ggl::downscaleTextureComputeShaderFunctionBufferMapping(void)::ref;
          ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref = v305;
          *(_DWORD *)algn_1EB31A604 = 2;
          qword_1EB31A638 = 0;
          unk_1EB31A640 = &ggl::downscaleTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A608 = (uint64_t)"DownscaleTextureComputeShader";
          unk_1EB31A610 = 0;
          qword_1EB31A648 = 2;
          unk_1EB31A650 = &ggl::downscaleTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A660 = 0;
          unk_1EB31A668 = 0;
          qword_1EB31A658 = 2;
        }
        qword_1EB31E438 = (uint64_t)&ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref;
        {
          ggl::resetTileShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("ResetTileShaderKernel");
          *(_DWORD *)algn_1EB317CFC = 3;
          qword_1EB317D10 = 0;
          unk_1EB317D18 = &ggl::resetTileShaderFunctionConstantMapping(void)::ref;
          qword_1EB317D20 = 0;
          unk_1EB317D28 = &ggl::resetTileShaderFunctionBufferMapping(void)::ref;
          qword_1EB317D30 = 0;
          unk_1EB317D38 = &ggl::resetTileShaderFunctionTextureMapping(void)::ref;
          qword_1EB317D00 = (uint64_t)"ResetTileShader";
          unk_1EB317D08 = 0;
          qword_1EB317D40 = 0;
          unk_1EB317D48 = &ggl::resetTileShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317D58 = 0;
          unk_1EB317D60 = 0;
          qword_1EB317D50 = 0;
        }
        qword_1EB31E440 = (uint64_t)&ggl::resetTileShaderFunctionDescriptor(void)::ref;
      }
      qword_1EB32C848 = (uint64_t)&StandardLibraryShaderFunctions(void)::desc;
      unk_1EB32C850 = 305;
      {
        if (v6)
        {
          {
            if (v6)
            {
              ggl::AnimatableTextureShader::typedReflection(void)::ref = (uint64_t)"AnimatableTextureShader";
              {
                ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
                *(_DWORD *)algn_1EB34D1BC = 0;
                qword_1EB34D1C0 = (uint64_t)"AnimatableTextureShader";
                unk_1EB34D1C8 = ggl::animatableTextureShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB34D1D0 = 1;
                unk_1EB34D1D8 = &ggl::animatableTextureShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB34D1E0 = 1;
                unk_1EB34D1E8 = &ggl::animatableTextureShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB34D1F0 = 0;
                unk_1EB34D1F8 = &ggl::animatableTextureShaderVertShaderFunctionTextureMapping(void)::ref;
                qword_1EB34D200 = 0;
                unk_1EB34D208 = &ggl::animatableTextureShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB34D218 = 0;
                unk_1EB34D220 = 0;
                qword_1EB34D210 = 0;
              }
              qword_1EB3223A0 = (uint64_t)&ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB3223A8 = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
              {
                ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
                *(_DWORD *)algn_1EB32CCA4 = 1;
                qword_1EB32CCA8 = (uint64_t)"AnimatableTextureShader";
                unk_1EB32CCB0 = 0;
                qword_1EB32CCB8 = 0;
                unk_1EB32CCC0 = &ggl::animatableTextureShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32CCC8 = 1;
                unk_1EB32CCD0 = &ggl::animatableTextureShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32CCD8 = 0;
                unk_1EB32CCE0 = &ggl::animatableTextureShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32CCE8 = 2;
                unk_1EB32CCF0 = &ggl::animatableTextureShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32CD00 = 0;
                unk_1EB32CD08 = 0;
                qword_1EB32CCF8 = 2;
              }
              qword_1EB3223B0 = (uint64_t)&ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB3223B8 = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
              qword_1EB3223C0 = (uint64_t)ggl::animatableTextureShaderShaderConstants(void)::ref;
              unk_1EB3223C8 = 2;
              qword_1EB3223D0 = (uint64_t)ggl::animatableTextureShaderShaderTextures(void)::ref;
              unk_1EB3223D8 = 2;
              qword_1EB3223E0 = (uint64_t)ggl::animatableTextureShaderShaderSamplers(void)::ref;
              unk_1EB3223E8 = 2;
            }
          }
          StandardLibraryShaders(void)::desc = (uint64_t)&ggl::AnimatableTextureShader::typedReflection(void)::ref;
          ggl::ARMeshShader::typedReflection(v6);
          qword_1EB31E5B8 = (uint64_t)&ggl::ARMeshShader::typedReflection(void)::ref;
          ggl::ARDepthMeshShader::typedReflection(v7);
          qword_1EB31E5C0 = (uint64_t)&ggl::ARDepthMeshShader::typedReflection(void)::ref;
          ggl::ARGroundShadowShader::typedReflection(v8);
          qword_1EB31E5C8 = (uint64_t)&ggl::ARGroundShadowShader::typedReflection(void)::ref;
          ggl::ARCameraImageShader::typedReflection(v9);
          qword_1EB31E5D0 = (uint64_t)&ggl::ARCameraImageShader::typedReflection(void)::ref;
          ggl::BuildingFacadeDepthShader::typedReflection(v10);
          qword_1EB31E5D8 = (uint64_t)&ggl::BuildingFacadeDepthShader::typedReflection(void)::ref;
          ggl::BuildingFlatShader::typedReflection(v11);
          qword_1EB31E5E0 = (uint64_t)&ggl::BuildingFlatShader::typedReflection(void)::ref;
          ggl::BuildingFlatStrokeShader::typedReflection(v12);
          qword_1EB31E5E8 = (uint64_t)&ggl::BuildingFlatStrokeShader::typedReflection(void)::ref;
          ggl::BuildingPointyRoofDepthShader::typedReflection(v13);
          qword_1EB31E5F0 = (uint64_t)&ggl::BuildingPointyRoofDepthShader::typedReflection(void)::ref;
          ggl::BuildingShadowShader::typedReflection(v14);
          qword_1EB31E5F8 = (uint64_t)&ggl::BuildingShadowShader::typedReflection(void)::ref;
          ggl::BuildingTopDepthShader::typedReflection(v15);
          qword_1EB31E600 = (uint64_t)&ggl::BuildingTopDepthShader::typedReflection(void)::ref;
          ggl::CircleShader::typedReflection(v16);
          qword_1EB31E608 = (uint64_t)&ggl::CircleShader::typedReflection(void)::ref;
          ggl::CircleMultiStrokeShader::typedReflection(v17);
          qword_1EB31E610 = (uint64_t)&ggl::CircleMultiStrokeShader::typedReflection(void)::ref;
          ggl::ClutShader::typedReflection(v18);
          qword_1EB31E618 = (uint64_t)&ggl::ClutShader::typedReflection(void)::ref;
          {
            if (v19)
            {
              ggl::ColorGlyphWithNormalHaloShader::typedReflection(void)::ref = (uint64_t)"ColorGlyphWithNormalHaloShader";
              {
                int v306 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
                qword_1EB329E80 = (uint64_t)"ColorGlyphWithNormalHaloShader";
                unk_1EB329E88 = ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB329E90 = 1;
                unk_1EB329E98 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB329EA0 = 3;
                unk_1EB329EA8 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB329EB0 = 0;
                unk_1EB329EB8 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v306;
                *(_DWORD *)algn_1EB329E7C = 0;
                qword_1EB329EC0 = 1;
                unk_1EB329EC8 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB329ED8 = 0;
                unk_1EB329EE0 = 0;
                qword_1EB329ED0 = 1;
              }
              qword_1EB323310 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323318 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
              {
                ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = 0x101385EE6;
                qword_1EB32A648 = (uint64_t)"ColorGlyphWithNormalHaloShader";
                unk_1EB32A650 = 0;
                qword_1EB32A658 = 0;
                unk_1EB32A660 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A668 = 2;
                unk_1EB32A670 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A678 = 0;
                unk_1EB32A680 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32A688 = 1;
                unk_1EB32A690 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A6A0 = 0;
                unk_1EB32A6A8 = 0;
                qword_1EB32A698 = 1;
              }
              qword_1EB323320 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323328 = 20471526;
              qword_1EB323330 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderConstants(void)::ref;
              unk_1EB323338 = 5;
              qword_1EB323340 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderTextures(void)::ref;
              unk_1EB323348 = 2;
              qword_1EB323350 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderSamplers(void)::ref;
              unk_1EB323358 = 2;
            }
          }
          qword_1EB31E620 = (uint64_t)&ggl::ColorGlyphWithNormalHaloShader::typedReflection(void)::ref;
          ggl::InstancedDebugShader::typedReflection(v19);
          qword_1EB31E628 = (uint64_t)&ggl::InstancedDebugShader::typedReflection(void)::ref;
          ggl::DebugShader::typedReflection(v20);
          qword_1EB31E630 = (uint64_t)&ggl::DebugShader::typedReflection(void)::ref;
          ggl::DebugExtendedShader::typedReflection(v21);
          qword_1EB31E638 = (uint64_t)&ggl::DebugExtendedShader::typedReflection(void)::ref;
          ggl::DebugLineShader::typedReflection(v22);
          qword_1EB31E640 = (uint64_t)&ggl::DebugLineShader::typedReflection(void)::ref;
          ggl::HillshadeShader::typedReflection(v23);
          qword_1EB31E648 = (uint64_t)&ggl::HillshadeShader::typedReflection(void)::ref;
          ggl::DiffuseBuildingShader::typedReflection(v24);
          qword_1EB31E650 = (uint64_t)&ggl::DiffuseBuildingShader::typedReflection(void)::ref;
          {
            if (v25)
            {
              ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingPointyRoofShader";
              {
                int v307 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
                qword_1EB32A1B8 = (uint64_t)"DiffuseBuildingPointyRoofShader";
                unk_1EB32A1C0 = ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32A1C8 = 1;
                unk_1EB32A1D0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A1D8 = 6;
                unk_1EB32A1E0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A1E8 = 0;
                unk_1EB32A1F0 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = v307;
                *(_DWORD *)algn_1EB32A1B4 = 0;
                qword_1EB32A1F8 = 0;
                unk_1EB32A200 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A210 = 0;
                unk_1EB32A218 = 0;
                qword_1EB32A208 = 0;
              }
              qword_1EB323428 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323430 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
              {
                ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x19F819965;
                qword_1EB32A890 = (uint64_t)"DiffuseBuildingPointyRoofShader";
                unk_1EB32A898 = 0;
                qword_1EB32A8A0 = 0;
                unk_1EB32A8A8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A8B0 = 3;
                unk_1EB32A8B8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A8C0 = 0;
                unk_1EB32A8C8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32A8D0 = 0;
                unk_1EB32A8D8 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A8E8 = 0;
                unk_1EB32A8F0 = 0;
                qword_1EB32A8E0 = 0;
              }
              qword_1EB323438 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323440 = -1618896539;
              qword_1EB323448 = (uint64_t)ggl::diffuseBuildingPointyRoofShaderShaderConstants(void)::ref;
              unk_1EB323450 = 7;
              qword_1EB323458 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderTextures(void)::ref;
              unk_1EB323460 = 0;
              qword_1EB323468 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderSamplers(void)::ref;
              unk_1EB323470 = 0;
            }
          }
          qword_1EB31E658 = (uint64_t)&ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref;
          ggl::DiffuseBuildingTopShader::typedReflection(v25);
          qword_1EB31E660 = (uint64_t)&ggl::DiffuseBuildingTopShader::typedReflection(void)::ref;
          ggl::DiffuseLandmarkShader::typedReflection(v26);
          qword_1EB31E668 = (uint64_t)&ggl::DiffuseLandmarkShader::typedReflection(void)::ref;
          ggl::ElevatedFillColorShader::typedReflection(v27);
          qword_1EB31E670 = (uint64_t)&ggl::ElevatedFillColorShader::typedReflection(void)::ref;
          {
            if (v28)
            {
              ggl::ElevatedFillNoWidthClipColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedFillNoWidthClipColorShader";
              {
                qword_1EB31D2B8 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
                unk_1EB31D2C0 = ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D2C8 = 1;
                unk_1EB31D2D0 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D2D8 = 4;
                unk_1EB31D2E0 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D2E8 = 0;
                unk_1EB31D2F0 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref = 2431374733;
                qword_1EB31D2F8 = 0;
                unk_1EB31D300 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D310 = 0;
                unk_1EB31D318 = 0;
                qword_1EB31D308 = 0;
              }
              qword_1EB31C368 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C370 = -1863592563;
              {
                ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref = 0x138D1A785;
                qword_1EB31D570 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
                unk_1EB31D578 = 0;
                qword_1EB31D580 = 0;
                unk_1EB31D588 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D590 = 2;
                unk_1EB31D598 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D5A0 = 0;
                unk_1EB31D5A8 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D5B0 = 0;
                unk_1EB31D5B8 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D5C8 = 0;
                unk_1EB31D5D0 = 0;
                qword_1EB31D5C0 = 0;
              }
              qword_1EB31C378 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C380 = 953264005;
              qword_1EB31C388 = (uint64_t)ggl::elevatedFillNoWidthClipColorShaderShaderConstants(void)::ref;
              unk_1EB31C390 = 4;
              qword_1EB31C398 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderShaderTextures(void)::ref;
              unk_1EB31C3A0 = 0;
              qword_1EB31C3A8 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderShaderSamplers(void)::ref;
              unk_1EB31C3B0 = 0;
            }
          }
          qword_1EB31E678 = (uint64_t)&ggl::ElevatedFillNoWidthClipColorShader::typedReflection(void)::ref;
          ggl::ElevatedStrokeColorShader::typedReflection(v28);
          qword_1EB31E680 = (uint64_t)&ggl::ElevatedStrokeColorShader::typedReflection(void)::ref;
          {
            if (v29)
            {
              ggl::ElevatedStrokeColorWithDistanceShader::typedReflection(void)::ref = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
              {
                qword_1EB31D660 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
                unk_1EB31D668 = ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D670 = 1;
                unk_1EB31D678 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D680 = 4;
                unk_1EB31D688 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D690 = 0;
                unk_1EB31D698 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref = 1731713468;
                qword_1EB31D6A0 = 0;
                unk_1EB31D6A8 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D6B8 = 0;
                unk_1EB31D6C0 = 0;
                qword_1EB31D6B0 = 0;
              }
              qword_1EB31C4E0 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C4E8 = 1731713468;
              {
                ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref = 0x1F73A1BC0;
                qword_1EB31D898 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
                unk_1EB31D8A0 = 0;
                qword_1EB31D8A8 = 0;
                unk_1EB31D8B0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D8B8 = 3;
                unk_1EB31D8C0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D8C8 = 0;
                unk_1EB31D8D0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D8D8 = 1;
                unk_1EB31D8E0 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D8F0 = 0;
                unk_1EB31D8F8 = 0;
                qword_1EB31D8E8 = 1;
              }
              qword_1EB31C4F0 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C4F8 = -147186752;
              qword_1EB31C500 = (uint64_t)ggl::elevatedStrokeColorWithDistanceShaderShaderConstants(void)::ref;
              unk_1EB31C508 = 5;
              qword_1EB31C510 = (uint64_t)ggl::elevatedStrokeColorWithDistanceShaderShaderTextures(void)::ref;
              unk_1EB31C518 = 1;
              qword_1EB31C520 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderShaderSamplers(void)::ref;
              unk_1EB31C528 = 1;
            }
          }
          qword_1EB31E688 = (uint64_t)&ggl::ElevatedStrokeColorWithDistanceShader::typedReflection(void)::ref;
          ggl::FogShader::typedReflection(v29);
          qword_1EB31E690 = (uint64_t)&ggl::FogShader::typedReflection(void)::ref;
          ggl::FoggedDiffuseBuildingShader::typedReflection(v30);
          qword_1EB31E698 = (uint64_t)&ggl::FoggedDiffuseBuildingShader::typedReflection(void)::ref;
          {
            if (v31)
            {
              ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseBuildingTopShader";
              {
                int v308 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
                qword_1EB329EF8 = (uint64_t)"FoggedDiffuseBuildingTopShader";
                unk_1EB329F00 = ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB329F08 = 1;
                unk_1EB329F10 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB329F18 = 6;
                unk_1EB329F20 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB329F28 = 0;
                unk_1EB329F30 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v308;
                *(_DWORD *)algn_1EB329EF4 = 0;
                qword_1EB329F38 = 0;
                unk_1EB329F40 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB329F50 = 0;
                unk_1EB329F58 = 0;
                qword_1EB329F48 = 0;
              }
              qword_1EB323368 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323370 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
              {
                ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x1AC1081B8;
                qword_1EB32A6C0 = (uint64_t)"FoggedDiffuseBuildingTopShader";
                unk_1EB32A6C8 = 0;
                qword_1EB32A6D0 = 0;
                unk_1EB32A6D8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A6E0 = 3;
                unk_1EB32A6E8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A6F0 = 0;
                unk_1EB32A6F8 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32A700 = 0;
                unk_1EB32A708 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A718 = 0;
                unk_1EB32A720 = 0;
                qword_1EB32A710 = 0;
              }
              qword_1EB323378 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323380 = -1408204360;
              qword_1EB323388 = (uint64_t)ggl::foggedDiffuseBuildingTopShaderShaderConstants(void)::ref;
              unk_1EB323390 = 7;
              qword_1EB323398 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderTextures(void)::ref;
              unk_1EB3233A0 = 0;
              qword_1EB3233A8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderSamplers(void)::ref;
              unk_1EB3233B0 = 0;
            }
          }
          qword_1EB31E6A0 = (uint64_t)&ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref;
          ggl::FoggedDiffuseLandmarkShader::typedReflection(v31);
          qword_1EB31E6A8 = (uint64_t)&ggl::FoggedDiffuseLandmarkShader::typedReflection(void)::ref;
          ggl::FoggedSpecularBuildingShader::typedReflection(v32);
          qword_1EB31E6B0 = (uint64_t)&ggl::FoggedSpecularBuildingShader::typedReflection(void)::ref;
          {
            if (v33)
            {
              ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularBuildingTopShader";
              {
                int v309 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
                qword_1EB32A390 = (uint64_t)"FoggedSpecularBuildingTopShader";
                unk_1EB32A398 = ggl::foggedSpecularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32A3A0 = 1;
                unk_1EB32A3A8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A3B0 = 6;
                unk_1EB32A3B8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A3C0 = 0;
                unk_1EB32A3C8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v309;
                *(_DWORD *)algn_1EB32A38C = 0;
                qword_1EB32A3D0 = 0;
                unk_1EB32A3D8 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A3E8 = 0;
                unk_1EB32A3F0 = 0;
                qword_1EB32A3E0 = 0;
              }
              qword_1EB323530 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323538 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
              {
                ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x113B913CCLL;
                qword_1EB32AA68 = (uint64_t)"FoggedSpecularBuildingTopShader";
                unk_1EB32AA70 = 0;
                qword_1EB32AA78 = 0;
                unk_1EB32AA80 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AA88 = 4;
                unk_1EB32AA90 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AA98 = 0;
                unk_1EB32AAA0 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32AAA8 = 0;
                unk_1EB32AAB0 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AAC0 = 0;
                unk_1EB32AAC8 = 0;
                qword_1EB32AAB8 = 0;
              }
              qword_1EB323540 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323548 = 330896332;
              qword_1EB323550 = (uint64_t)ggl::foggedSpecularBuildingTopShaderShaderConstants(void)::ref;
              unk_1EB323558 = 7;
              qword_1EB323560 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderTextures(void)::ref;
              unk_1EB323568 = 0;
              qword_1EB323570 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderSamplers(void)::ref;
              unk_1EB323578 = 0;
            }
          }
          qword_1EB31E6B8 = (uint64_t)&ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref;
          ggl::FoggedSpecularLandmarkShader::typedReflection(v33);
          qword_1EB31E6C0 = (uint64_t)&ggl::FoggedSpecularLandmarkShader::typedReflection(void)::ref;
          ggl::GlobeAtmosphereShader::typedReflection(v34);
          qword_1EB31E6C8 = (uint64_t)&ggl::GlobeAtmosphereShader::typedReflection(void)::ref;
          ggl::GlobeStarsShader::typedReflection(v35);
          qword_1EB31E6D0 = (uint64_t)&ggl::GlobeStarsShader::typedReflection(void)::ref;
          ggl::GlowShader::typedReflection(v36);
          qword_1EB31E6D8 = (uint64_t)&ggl::GlowShader::typedReflection(void)::ref;
          ggl::GlowAlphaShader::typedReflection(v37);
          qword_1EB31E6E0 = (uint64_t)&ggl::GlowAlphaShader::typedReflection(void)::ref;
          ggl::Glyph3dShader::typedReflection(v38);
          qword_1EB31E6E8 = (uint64_t)&ggl::Glyph3dShader::typedReflection(void)::ref;
          ggl::Glyph3dLowPrecisionShader::typedReflection(v39);
          qword_1EB31E6F0 = (uint64_t)&ggl::Glyph3dLowPrecisionShader::typedReflection(void)::ref;
          ggl::Glyph3dLowPrecisionHaloShader::typedReflection(v40);
          qword_1EB31E6F8 = (uint64_t)&ggl::Glyph3dLowPrecisionHaloShader::typedReflection(void)::ref;
          ggl::Glyph3dRaymarchShader::typedReflection(v41);
          qword_1EB31E700 = (uint64_t)&ggl::Glyph3dRaymarchShader::typedReflection(void)::ref;
          ggl::GlyphWithNormalHaloShader::typedReflection(v42);
          qword_1EB31E708 = (uint64_t)&ggl::GlyphWithNormalHaloShader::typedReflection(void)::ref;
          {
            if (v43)
            {
              ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayFillShader";
              {
                qword_1EB32AAE0 = (uint64_t)"GradientPolylineOverlayFillShader";
                unk_1EB32AAE8 = ggl::gradientPolylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32AAF0 = 1;
                unk_1EB32AAF8 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AB00 = 3;
                unk_1EB32AB08 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AB10 = 0;
                unk_1EB32AB18 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = 878884475;
                qword_1EB32AB20 = 0;
                unk_1EB32AB28 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AB38 = 0;
                unk_1EB32AB40 = 0;
                qword_1EB32AB30 = 0;
              }
              qword_1EB3236F0 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB3236F8 = 878884475;
              {
                ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = 0x1AE8C75D5;
                qword_1EB32AE78 = (uint64_t)"GradientPolylineOverlayFillShader";
                unk_1EB32AE80 = 0;
                qword_1EB32AE88 = 0;
                unk_1EB32AE90 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AE98 = 2;
                unk_1EB32AEA0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AEA8 = 0;
                unk_1EB32AEB0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32AEB8 = 1;
                unk_1EB32AEC0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AED0 = 0;
                unk_1EB32AED8 = 0;
                qword_1EB32AEC8 = 1;
              }
              qword_1EB323700 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323708 = -1366526507;
              qword_1EB323710 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderConstants(void)::ref;
              unk_1EB323718 = 4;
              qword_1EB323720 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderTextures(void)::ref;
              unk_1EB323728 = 1;
              qword_1EB323730 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderSamplers(void)::ref;
              unk_1EB323738 = 1;
            }
          }
          qword_1EB31E710 = (uint64_t)&ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref;
          {
            if (v43)
            {
              ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaShader";
              {
                qword_1EB32ACA0 = (uint64_t)"GradientPolylineOverlayAlphaShader";
                unk_1EB32ACA8 = ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32ACB0 = 1;
                unk_1EB32ACB8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32ACC0 = 3;
                unk_1EB32ACC8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32ACD0 = 0;
                unk_1EB32ACD8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = 1527713323;
                qword_1EB32ACE0 = 0;
                unk_1EB32ACE8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32ACF8 = 0;
                unk_1EB32AD00 = 0;
                qword_1EB32ACF0 = 0;
              }
              qword_1EB323810 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323818 = 1527713323;
              {
                ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x1D18D7C52;
                qword_1EB32AFC8 = (uint64_t)"GradientPolylineOverlayAlphaShader";
                unk_1EB32AFD0 = 0;
                qword_1EB32AFD8 = 0;
                unk_1EB32AFE0 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AFE8 = 2;
                unk_1EB32AFF0 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AFF8 = 0;
                unk_1EB32B000 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32B008 = 1;
                unk_1EB32B010 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32B020 = 0;
                unk_1EB32B028 = 0;
                qword_1EB32B018 = 1;
              }
              qword_1EB323820 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323828 = -779256750;
              qword_1EB323830 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderConstants(void)::ref;
              unk_1EB323838 = 4;
              qword_1EB323840 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderTextures(void)::ref;
              unk_1EB323848 = 1;
              qword_1EB323850 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderSamplers(void)::ref;
              unk_1EB323858 = 1;
            }
          }
          qword_1EB31E718 = (uint64_t)&ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref;
          {
            if (v43)
            {
              ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
              {
                qword_1EB32B040 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
                unk_1EB32B048 = ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32B050 = 1;
                unk_1EB32B058 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32B060 = 3;
                unk_1EB32B068 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32B070 = 0;
                unk_1EB32B078 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = 503820842;
                qword_1EB32B080 = 0;
                unk_1EB32B088 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32B098 = 0;
                unk_1EB32B0A0 = 0;
                qword_1EB32B090 = 0;
              }
              qword_1EB323870 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323878 = 503820842;
              {
                ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x10A41F7BCLL;
                qword_1EB32B0B8 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
                unk_1EB32B0C0 = 0;
                qword_1EB32B0C8 = 0;
                unk_1EB32B0D0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32B0D8 = 2;
                unk_1EB32B0E0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32B0E8 = 0;
                unk_1EB32B0F0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32B0F8 = 1;
                unk_1EB32B100 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32B110 = 0;
                unk_1EB32B118 = 0;
                qword_1EB32B108 = 1;
              }
              qword_1EB323880 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323888 = 172095420;
              qword_1EB323890 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderConstants(void)::ref;
              unk_1EB323898 = 4;
              qword_1EB3238A0 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderTextures(void)::ref;
              unk_1EB3238A8 = 1;
              qword_1EB3238B0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
              unk_1EB3238B8 = 1;
            }
          }
          qword_1EB31E720 = (uint64_t)&ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref;
          ggl::GridShader::typedReflection(v43);
          qword_1EB31E728 = (uint64_t)&ggl::GridShader::typedReflection(void)::ref;
          ggl::GridUVShader::typedReflection(v44);
          qword_1EB31E730 = (uint64_t)&ggl::GridUVShader::typedReflection(void)::ref;
          ggl::IconShader::typedReflection(v45);
          qword_1EB31E738 = (uint64_t)&ggl::IconShader::typedReflection(void)::ref;
          ggl::MaskedIconShader::typedReflection(v46);
          qword_1EB31E740 = (uint64_t)&ggl::MaskedIconShader::typedReflection(void)::ref;
          ggl::WaypointShader::typedReflection(v47);
          qword_1EB31E748 = (uint64_t)&ggl::WaypointShader::typedReflection(void)::ref;
          ggl::ShadowShader::typedReflection(v48);
          qword_1EB31E750 = (uint64_t)&ggl::ShadowShader::typedReflection(void)::ref;
          ggl::ImageCopyShader::typedReflection(v49);
          qword_1EB31E758 = (uint64_t)&ggl::ImageCopyShader::typedReflection(void)::ref;
          ggl::LandmarkDepthShader::typedReflection(v50);
          qword_1EB31E760 = (uint64_t)&ggl::LandmarkDepthShader::typedReflection(void)::ref;
          ggl::LandmarkFlatShader::typedReflection(v51);
          qword_1EB31E768 = (uint64_t)&ggl::LandmarkFlatShader::typedReflection(void)::ref;
          ggl::LineShader::typedReflection(v52);
          qword_1EB31E770 = (uint64_t)&ggl::LineShader::typedReflection(void)::ref;
          ggl::ManeuverPointShader::typedReflection(v53);
          qword_1EB31E778 = (uint64_t)&ggl::ManeuverPointShader::typedReflection(void)::ref;
          ggl::OcclusionLineShader::typedReflection(v54);
          qword_1EB31E780 = (uint64_t)&ggl::OcclusionLineShader::typedReflection(void)::ref;
          ggl::OptimizedTrafficShader::typedReflection(v55);
          qword_1EB31E788 = (uint64_t)&ggl::OptimizedTrafficShader::typedReflection(void)::ref;
          ggl::OuterShadowRibbonShader::typedReflection(v56);
          qword_1EB31E790 = (uint64_t)&ggl::OuterShadowRibbonShader::typedReflection(void)::ref;
          ggl::PolygonOverlayFillShader::typedReflection(v57);
          qword_1EB31E798 = (uint64_t)&ggl::PolygonOverlayFillShader::typedReflection(void)::ref;
          ggl::PolygonOverlayAntialiasShader::typedReflection(v58);
          qword_1EB31E7A0 = (uint64_t)&ggl::PolygonOverlayAntialiasShader::typedReflection(void)::ref;
          ggl::MaskingOverlayFillShader::typedReflection(v59);
          qword_1EB31E7A8 = (uint64_t)&ggl::MaskingOverlayFillShader::typedReflection(void)::ref;
          ggl::MaskingOverlayMaskingShader::typedReflection(v60);
          qword_1EB31E7B0 = (uint64_t)&ggl::MaskingOverlayMaskingShader::typedReflection(void)::ref;
          ggl::PatternedRibbonShader::typedReflection(v61);
          qword_1EB31E7B8 = (uint64_t)&ggl::PatternedRibbonShader::typedReflection(void)::ref;
          {
            if (v62)
            {
              ggl::WriteStencilPatternedRibbonShader::typedReflection(void)::ref = (uint64_t)"WriteStencilPatternedRibbonShader";
              {
                qword_1EB32AC30 = (uint64_t)"WriteStencilPatternedRibbonShader";
                unk_1EB32AC38 = ggl::writeStencilPatternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32AC40 = 1;
                unk_1EB32AC48 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AC50 = 3;
                unk_1EB32AC58 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AC60 = 0;
                unk_1EB32AC68 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref = 3294471237;
                qword_1EB32AC70 = 0;
                unk_1EB32AC78 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AC88 = 0;
                unk_1EB32AC90 = 0;
                qword_1EB32AC80 = 0;
              }
              qword_1EB3237B0 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB3237B8 = -1000496059;
              {
                ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x11CF0EFDFLL;
                qword_1EB32AF58 = (uint64_t)"WriteStencilPatternedRibbonShader";
                unk_1EB32AF60 = 0;
                qword_1EB32AF68 = 0;
                unk_1EB32AF70 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AF78 = 1;
                unk_1EB32AF80 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AF88 = 0;
                unk_1EB32AF90 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32AF98 = 0;
                unk_1EB32AFA0 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AFB0 = 0;
                unk_1EB32AFB8 = 0;
                qword_1EB32AFA8 = 0;
              }
              qword_1EB3237C0 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB3237C8 = 485552095;
              qword_1EB3237D0 = (uint64_t)ggl::writeStencilPatternedRibbonShaderShaderConstants(void)::ref;
              unk_1EB3237D8 = 3;
              qword_1EB3237E0 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderShaderTextures(void)::ref;
              unk_1EB3237E8 = 0;
              qword_1EB3237F0 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderShaderSamplers(void)::ref;
              unk_1EB3237F8 = 0;
            }
          }
          qword_1EB31E7C0 = (uint64_t)&ggl::WriteStencilPatternedRibbonShader::typedReflection(void)::ref;
          ggl::PolygonAnimatableFillShader::typedReflection(v62);
          qword_1EB31E7C8 = (uint64_t)&ggl::PolygonAnimatableFillShader::typedReflection(void)::ref;
          ggl::PolygonAnimatableStrokeShader::typedReflection(v63);
          qword_1EB31E7D0 = (uint64_t)&ggl::PolygonAnimatableStrokeShader::typedReflection(void)::ref;
          ggl::PolygonFillShader::typedReflection(v64);
          qword_1EB31E7D8 = (uint64_t)&ggl::PolygonFillShader::typedReflection(void)::ref;
          ggl::PolygonShadowedStrokeShader::typedReflection(v65);
          qword_1EB31E7E0 = (uint64_t)&ggl::PolygonShadowedStrokeShader::typedReflection(void)::ref;
          ggl::PolygonSolidFillShader::typedReflection(v66);
          qword_1EB31E7E8 = (uint64_t)&ggl::PolygonSolidFillShader::typedReflection(void)::ref;
          ggl::PolygonSolidFillS2Shader::typedReflection(v67);
          qword_1EB31E7F0 = (uint64_t)&ggl::PolygonSolidFillS2Shader::typedReflection(void)::ref;
          ggl::PolygonStrokeShader::typedReflection(v68);
          qword_1EB31E7F8 = (uint64_t)&ggl::PolygonStrokeShader::typedReflection(void)::ref;
          ggl::PolygonStrokeMaskShader::typedReflection(v69);
          qword_1EB31E800 = (uint64_t)&ggl::PolygonStrokeMaskShader::typedReflection(void)::ref;
          ggl::HillshadeFillMaskShader::typedReflection(v70);
          qword_1EB31E808 = (uint64_t)&ggl::HillshadeFillMaskShader::typedReflection(void)::ref;
          ggl::PolylineOverlayFillShader::typedReflection(v71);
          qword_1EB31E810 = (uint64_t)&ggl::PolylineOverlayFillShader::typedReflection(void)::ref;
          ggl::PolylineOverlayAlphaShader::typedReflection(v72);
          qword_1EB31E818 = (uint64_t)&ggl::PolylineOverlayAlphaShader::typedReflection(void)::ref;
          {
            if (v73)
            {
              ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayAlphaFillShader";
              {
                int v310 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
                qword_1EB32A058 = (uint64_t)"PolylineOverlayAlphaFillShader";
                unk_1EB32A060 = ggl::polylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32A068 = 1;
                unk_1EB32A070 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A078 = 3;
                unk_1EB32A080 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A088 = 0;
                unk_1EB32A090 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = v310;
                *(_DWORD *)algn_1EB32A054 = 0;
                qword_1EB32A098 = 0;
                unk_1EB32A0A0 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A0B0 = 0;
                unk_1EB32A0B8 = 0;
                qword_1EB32A0A8 = 0;
              }
              qword_1EB3233C8 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB3233D0 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
              {
                qword_1EB32A7C0 = 0;
                unk_1EB32A7C8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A7D0 = 1;
                unk_1EB32A7D8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x17E32C928;
                qword_1EB32A7E0 = 0;
                unk_1EB32A7E8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32A7B0 = (uint64_t)"PolylineOverlayAlphaFillShader";
                unk_1EB32A7B8 = 0;
                qword_1EB32A7F0 = 1;
                unk_1EB32A7F8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A808 = 0;
                unk_1EB32A810 = 0;
                qword_1EB32A800 = 1;
              }
              qword_1EB3233D8 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB3233E0 = 2117257512;
              qword_1EB3233E8 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderConstants(void)::ref;
              unk_1EB3233F0 = 3;
              qword_1EB3233F8 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderTextures(void)::ref;
              unk_1EB323400 = 1;
              qword_1EB323408 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
              unk_1EB323410 = 1;
            }
          }
          qword_1EB31E820 = (uint64_t)&ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref;
          ggl::PointShader::typedReflection(v73);
          qword_1EB31E828 = (uint64_t)&ggl::PointShader::typedReflection(void)::ref;
          ggl::PointExtendedShader::typedReflection(v74);
          qword_1EB31E830 = (uint64_t)&ggl::PointExtendedShader::typedReflection(void)::ref;
          ggl::PrefilteredLineShader::typedReflection(v75);
          qword_1EB31E838 = (uint64_t)&ggl::PrefilteredLineShader::typedReflection(void)::ref;
          {
            if (v76)
            {
              ggl::RenderTargetBlendShader::typedReflection(void)::ref = (uint64_t)"RenderTargetBlendShader";
              {
                int v311 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
                qword_1EB327BD0 = (uint64_t)"RenderTargetBlendShader";
                unk_1EB327BD8 = ggl::renderTargetBlendShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB327BE0 = 1;
                unk_1EB327BE8 = &ggl::renderTargetBlendShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB327BF0 = 0;
                unk_1EB327BF8 = &ggl::renderTargetBlendShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB327C00 = 0;
                unk_1EB327C08 = &ggl::renderTargetBlendShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref = v311;
                *(_DWORD *)algn_1EB327BCC = 0;
                qword_1EB327C10 = 0;
                unk_1EB327C18 = &ggl::renderTargetBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB327C28 = 0;
                unk_1EB327C30 = 0;
                qword_1EB327C20 = 0;
              }
              qword_1EB322520 = (uint64_t)&ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB322528 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
              {
                int v312 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
                qword_1EB328868 = 0;
                unk_1EB328870 = &ggl::renderTargetBlendShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB328878 = 1;
                unk_1EB328880 = &ggl::renderTargetBlendShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref = v312;
                *(_DWORD *)algn_1EB328854 = 1;
                qword_1EB328888 = 0;
                unk_1EB328890 = &ggl::renderTargetBlendShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB328858 = (uint64_t)"RenderTargetBlendShader";
                unk_1EB328860 = 0;
                qword_1EB328898 = 1;
                unk_1EB3288A0 = &ggl::renderTargetBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB3288B0 = 0;
                unk_1EB3288B8 = 0;
                qword_1EB3288A8 = 1;
              }
              qword_1EB322530 = (uint64_t)&ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB322538 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
              qword_1EB322540 = (uint64_t)ggl::renderTargetBlendShaderShaderConstants(void)::ref;
              unk_1EB322548 = 1;
              qword_1EB322550 = (uint64_t)ggl::renderTargetBlendShaderShaderTextures(void)::ref;
              unk_1EB322558 = 1;
              qword_1EB322560 = (uint64_t)&ggl::renderTargetBlendShaderShaderSamplers(void)::ref;
              unk_1EB322568 = 1;
            }
          }
          qword_1EB31E840 = (uint64_t)&ggl::RenderTargetBlendShader::typedReflection(void)::ref;
          ggl::RouteLineShader::typedReflection(v76);
          qword_1EB31E848 = (uint64_t)&ggl::RouteLineShader::typedReflection(void)::ref;
          ggl::PatternedRouteLineShader::typedReflection(v77);
          qword_1EB31E850 = (uint64_t)&ggl::PatternedRouteLineShader::typedReflection(void)::ref;
          ggl::RouteLineMaskShader::typedReflection(v78);
          qword_1EB31E858 = (uint64_t)&ggl::RouteLineMaskShader::typedReflection(void)::ref;
          ggl::RouteLineAlphaResetShader::typedReflection(v79);
          qword_1EB31E860 = (uint64_t)&ggl::RouteLineAlphaResetShader::typedReflection(void)::ref;
          ggl::RouteLineArrowShader::typedReflection(v80);
          qword_1EB31E868 = (uint64_t)&ggl::RouteLineArrowShader::typedReflection(void)::ref;
          ggl::RouteLineTrafficShader::typedReflection(v81);
          qword_1EB31E870 = (uint64_t)&ggl::RouteLineTrafficShader::typedReflection(void)::ref;
          ggl::SinglePassRouteLineShader::typedReflection(v82);
          qword_1EB31E878 = (uint64_t)&ggl::SinglePassRouteLineShader::typedReflection(void)::ref;
          ggl::DottedRouteLineShader::typedReflection(v83);
          qword_1EB31E880 = (uint64_t)&ggl::DottedRouteLineShader::typedReflection(void)::ref;
          ggl::SDFGlyphShader::typedReflection(v84);
          qword_1EB31E888 = (uint64_t)&ggl::SDFGlyphShader::typedReflection(void)::ref;
          ggl::SDFGlyphHaloShader::typedReflection(v85);
          qword_1EB31E890 = (uint64_t)&ggl::SDFGlyphHaloShader::typedReflection(void)::ref;
          ggl::SDFGlyphSuperSampleShader::typedReflection(v86);
          qword_1EB31E898 = (uint64_t)&ggl::SDFGlyphSuperSampleShader::typedReflection(void)::ref;
          {
            if (v87)
            {
              ggl::SimpleGridShader::typedReflection(void)::ref = (uint64_t)"SimpleGridShader";
              {
                int v313 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
                qword_1EB325038 = (uint64_t)"SimpleGridShader";
                unk_1EB325040 = ggl::simpleGridShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB325048 = 1;
                unk_1EB325050 = &ggl::simpleGridShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB325058 = 3;
                unk_1EB325060 = &ggl::simpleGridShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB325068 = 0;
                unk_1EB325070 = &ggl::simpleGridShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref = v313;
                *(_DWORD *)algn_1EB325034 = 0;
                qword_1EB325078 = 0;
                unk_1EB325080 = &ggl::simpleGridShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB325090 = 0;
                unk_1EB325098 = 0;
                qword_1EB325088 = 0;
              }
              qword_1EB320FE8 = (uint64_t)&ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB320FF0 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
              {
                ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
                *(_DWORD *)algn_1EB32CACC = 1;
                qword_1EB32CAD0 = (uint64_t)"SimpleGridShader";
                unk_1EB32CAD8 = 0;
                qword_1EB32CAE0 = 0;
                unk_1EB32CAE8 = &ggl::simpleGridShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32CAF0 = 2;
                unk_1EB32CAF8 = &ggl::simpleGridShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32CB00 = 0;
                unk_1EB32CB08 = &ggl::simpleGridShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32CB10 = 0;
                unk_1EB32CB18 = &ggl::simpleGridShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32CB28 = 0;
                unk_1EB32CB30 = 0;
                qword_1EB32CB20 = 0;
              }
              qword_1EB320FF8 = (uint64_t)&ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB321000 = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
              qword_1EB321008 = (uint64_t)ggl::simpleGridShaderShaderConstants(void)::ref;
              unk_1EB321010 = 3;
              qword_1EB321018 = (uint64_t)&ggl::simpleGridShaderShaderTextures(void)::ref;
              unk_1EB321020 = 0;
              qword_1EB321028 = (uint64_t)&ggl::simpleGridShaderShaderSamplers(void)::ref;
              unk_1EB321030 = 0;
            }
          }
          qword_1EB31E8A0 = (uint64_t)&ggl::SimpleGridShader::typedReflection(void)::ref;
          ggl::SkyShader::typedReflection(v87);
          qword_1EB31E8A8 = (uint64_t)&ggl::SkyShader::typedReflection(void)::ref;
          ggl::SolidRibbonShader::typedReflection(v88);
          qword_1EB31E8B0 = (uint64_t)&ggl::SolidRibbonShader::typedReflection(void)::ref;
          ggl::SolidTrafficShader::typedReflection(v89);
          qword_1EB31E8B8 = (uint64_t)&ggl::SolidTrafficShader::typedReflection(void)::ref;
          ggl::SolidMaskedTrafficShader::typedReflection(v90);
          qword_1EB31E8C0 = (uint64_t)&ggl::SolidMaskedTrafficShader::typedReflection(void)::ref;
          ggl::SpecularBuildingShader::typedReflection(v91);
          qword_1EB31E8C8 = (uint64_t)&ggl::SpecularBuildingShader::typedReflection(void)::ref;
          {
            if (v92)
            {
              ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingPointyRoofShader";
              {
                qword_1EB32A820 = (uint64_t)"SpecularBuildingPointyRoofShader";
                unk_1EB32A828 = ggl::specularBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32A830 = 1;
                unk_1EB32A838 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A840 = 6;
                unk_1EB32A848 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A850 = 0;
                unk_1EB32A858 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = 1075938269;
                qword_1EB32A860 = 0;
                unk_1EB32A868 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A878 = 0;
                unk_1EB32A880 = 0;
                qword_1EB32A870 = 0;
              }
              qword_1EB323640 = (uint64_t)&ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323648 = 1075938269;
              {
                ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x10062DEDALL;
                qword_1EB32AD88 = (uint64_t)"SpecularBuildingPointyRoofShader";
                unk_1EB32AD90 = 0;
                qword_1EB32AD98 = 0;
                unk_1EB32ADA0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32ADA8 = 4;
                unk_1EB32ADB0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32ADB8 = 0;
                unk_1EB32ADC0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32ADC8 = 0;
                unk_1EB32ADD0 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32ADE0 = 0;
                unk_1EB32ADE8 = 0;
                qword_1EB32ADD8 = 0;
              }
              qword_1EB323650 = (uint64_t)&ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323658 = 6479578;
              qword_1EB323660 = (uint64_t)ggl::specularBuildingPointyRoofShaderShaderConstants(void)::ref;
              unk_1EB323668 = 7;
              qword_1EB323670 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderTextures(void)::ref;
              unk_1EB323678 = 0;
              qword_1EB323680 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderSamplers(void)::ref;
              unk_1EB323688 = 0;
            }
          }
          qword_1EB31E8D0 = (uint64_t)&ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref;
          ggl::SpecularBuildingTopShader::typedReflection(v92);
          qword_1EB31E8D8 = (uint64_t)&ggl::SpecularBuildingTopShader::typedReflection(void)::ref;
          ggl::SpecularLandmarkShader::typedReflection(v93);
          qword_1EB31E8E0 = (uint64_t)&ggl::SpecularLandmarkShader::typedReflection(void)::ref;
          {
            if (v94)
            {
              ggl::StandardPostchainCompositeShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainCompositeShader";
              {
                qword_1EB31D068 = (uint64_t)"StandardPostchainCompositeShader";
                unk_1EB31D070 = ggl::standardPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D078 = 1;
                unk_1EB31D080 = &ggl::standardPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D088 = 0;
                unk_1EB31D090 = &ggl::standardPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D098 = 0;
                unk_1EB31D0A0 = &ggl::standardPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = 3269181341;
                qword_1EB31D0A8 = 0;
                unk_1EB31D0B0 = &ggl::standardPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D0C0 = 0;
                unk_1EB31D0C8 = 0;
                qword_1EB31D0B8 = 0;
              }
              qword_1EB31C2A8 = (uint64_t)&ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C2B0 = -1025785955;
              {
                ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x1DF746FA2;
                qword_1EB31D3A0 = (uint64_t)"StandardPostchainCompositeShader";
                unk_1EB31D3A8 = 0;
                qword_1EB31D3B0 = 0;
                unk_1EB31D3B8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D3C0 = 1;
                unk_1EB31D3C8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D3D0 = 0;
                unk_1EB31D3D8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D3E0 = 4;
                unk_1EB31D3E8 = &ggl::standardPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D3F8 = 0;
                unk_1EB31D400 = 0;
                qword_1EB31D3F0 = 4;
              }
              qword_1EB31C2B8 = (uint64_t)&ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C2C0 = -546017374;
              qword_1EB31C2C8 = (uint64_t)ggl::standardPostchainCompositeShaderShaderConstants(void)::ref;
              unk_1EB31C2D0 = 1;
              qword_1EB31C2D8 = (uint64_t)ggl::standardPostchainCompositeShaderShaderTextures(void)::ref;
              unk_1EB31C2E0 = 4;
              qword_1EB31C2E8 = (uint64_t)ggl::standardPostchainCompositeShaderShaderSamplers(void)::ref;
              unk_1EB31C2F0 = 4;
            }
          }
          qword_1EB31E8E8 = (uint64_t)&ggl::StandardPostchainCompositeShader::typedReflection(void)::ref;
          {
            if (v94)
            {
              ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSplitFrameShader";
              {
                qword_1EB31D1C8 = (uint64_t)"StandardPostchainSplitFrameShader";
                unk_1EB31D1D0 = ggl::standardPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D1D8 = 1;
                unk_1EB31D1E0 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D1E8 = 0;
                unk_1EB31D1F0 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D1F8 = 0;
                unk_1EB31D200 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 1892780714;
                qword_1EB31D208 = 0;
                unk_1EB31D210 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D220 = 0;
                unk_1EB31D228 = 0;
                qword_1EB31D218 = 0;
              }
              qword_1EB31C308 = (uint64_t)&ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C310 = 1892780714;
              {
                ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x119C0B9BFLL;
                qword_1EB31D500 = (uint64_t)"StandardPostchainSplitFrameShader";
                unk_1EB31D508 = 0;
                qword_1EB31D510 = 0;
                unk_1EB31D518 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D520 = 1;
                unk_1EB31D528 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D530 = 0;
                unk_1EB31D538 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D540 = 2;
                unk_1EB31D548 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D558 = 0;
                unk_1EB31D560 = 0;
                qword_1EB31D550 = 2;
              }
              qword_1EB31C318 = (uint64_t)&ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C320 = 432060863;
              qword_1EB31C328 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderConstants(void)::ref;
              unk_1EB31C330 = 1;
              qword_1EB31C338 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderTextures(void)::ref;
              unk_1EB31C340 = 2;
              qword_1EB31C348 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderSamplers(void)::ref;
              unk_1EB31C350 = 2;
            }
          }
          qword_1EB31E8F0 = (uint64_t)&ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref;
          {
            if (v94)
            {
              ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleCoCShader";
              {
                qword_1EB31D5E8 = (uint64_t)"StandardPostchainDownsampleCoCShader";
                unk_1EB31D5F0 = ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D5F8 = 1;
                unk_1EB31D600 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D608 = 0;
                unk_1EB31D610 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D618 = 0;
                unk_1EB31D620 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 579759095;
                qword_1EB31D628 = 0;
                unk_1EB31D630 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D640 = 0;
                unk_1EB31D648 = 0;
                qword_1EB31D638 = 0;
              }
              qword_1EB31C488 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C490 = 579759095;
              {
                ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1C1D81A17;
                qword_1EB31D7B0 = (uint64_t)"StandardPostchainDownsampleCoCShader";
                unk_1EB31D7B8 = 0;
                qword_1EB31D7C0 = 0;
                unk_1EB31D7C8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D7D0 = 0;
                unk_1EB31D7D8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D7E0 = 0;
                unk_1EB31D7E8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D7F0 = 1;
                unk_1EB31D7F8 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D808 = 0;
                unk_1EB31D810 = 0;
                qword_1EB31D800 = 1;
              }
              qword_1EB31C498 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C4A0 = -1042802153;
              qword_1EB31C4A8 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderShaderConstants(void)::ref;
              unk_1EB31C4B0 = 0;
              qword_1EB31C4B8 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderTextures(void)::ref;
              unk_1EB31C4C0 = 1;
              qword_1EB31C4C8 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderSamplers(void)::ref;
              unk_1EB31C4D0 = 1;
            }
          }
          qword_1EB31E8F8 = (uint64_t)&ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref;
          ggl::StandardPostchainBGBlurShader::typedReflection(v94);
          qword_1EB31E900 = (uint64_t)&ggl::StandardPostchainBGBlurShader::typedReflection(void)::ref;
          ggl::StandardPostchainFGBlurShader::typedReflection(v95);
          qword_1EB31E908 = (uint64_t)&ggl::StandardPostchainFGBlurShader::typedReflection(void)::ref;
          {
            if (v96)
            {
              ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainTentBlurShader";
              {
                int v314 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
                qword_1EB31CF08 = (uint64_t)"StandardPostchainTentBlurShader";
                unk_1EB31CF10 = ggl::standardPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31CF18 = 1;
                unk_1EB31CF20 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31CF28 = 0;
                unk_1EB31CF30 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31CF38 = 0;
                unk_1EB31CF40 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v314;
                *(_DWORD *)algn_1EB31CF04 = 0;
                qword_1EB31CF48 = 0;
                unk_1EB31CF50 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31CF60 = 0;
                unk_1EB31CF68 = 0;
                qword_1EB31CF58 = 0;
              }
              qword_1EB31C1E8 = (uint64_t)&ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C1F0 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
              {
                ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x11C5A8EEELL;
                qword_1EB31D240 = (uint64_t)"StandardPostchainTentBlurShader";
                unk_1EB31D248 = 0;
                qword_1EB31D250 = 0;
                unk_1EB31D258 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D260 = 0;
                unk_1EB31D268 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D270 = 0;
                unk_1EB31D278 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D280 = 1;
                unk_1EB31D288 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D298 = 0;
                unk_1EB31D2A0 = 0;
                qword_1EB31D290 = 1;
              }
              qword_1EB31C1F8 = (uint64_t)&ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C200 = 475696878;
              qword_1EB31C208 = (uint64_t)&ggl::standardPostchainTentBlurShaderShaderConstants(void)::ref;
              unk_1EB31C210 = 0;
              qword_1EB31C218 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderTextures(void)::ref;
              unk_1EB31C220 = 1;
              qword_1EB31C228 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderSamplers(void)::ref;
              unk_1EB31C230 = 1;
            }
          }
          qword_1EB31E910 = (uint64_t)&ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref;
          {
            if (v96)
            {
              ggl::StandardPostchainDownsampleDepthShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleDepthShader";
              {
                qword_1EB31D828 = (uint64_t)"StandardPostchainDownsampleDepthShader";
                unk_1EB31D830 = ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D838 = 1;
                unk_1EB31D840 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D848 = 0;
                unk_1EB31D850 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D858 = 0;
                unk_1EB31D860 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref = 2938732211;
                qword_1EB31D868 = 0;
                unk_1EB31D870 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D880 = 0;
                unk_1EB31D888 = 0;
                qword_1EB31D878 = 0;
              }
              qword_1EB31C538 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C540 = -1356235085;
              {
                ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref = 0x13810F95ALL;
                qword_1EB31D910 = (uint64_t)"StandardPostchainDownsampleDepthShader";
                unk_1EB31D918 = 0;
                qword_1EB31D920 = 0;
                unk_1EB31D928 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D930 = 0;
                unk_1EB31D938 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D940 = 0;
                unk_1EB31D948 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D950 = 1;
                unk_1EB31D958 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D968 = 0;
                unk_1EB31D970 = 0;
                qword_1EB31D960 = 1;
              }
              qword_1EB31C548 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C550 = 940636506;
              qword_1EB31C558 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderShaderConstants(void)::ref;
              unk_1EB31C560 = 0;
              qword_1EB31C568 = (uint64_t)ggl::standardPostchainDownsampleDepthShaderShaderTextures(void)::ref;
              unk_1EB31C570 = 1;
              qword_1EB31C578 = (uint64_t)ggl::standardPostchainDownsampleDepthShaderShaderSamplers(void)::ref;
              unk_1EB31C580 = 1;
            }
          }
          qword_1EB31E918 = (uint64_t)&ggl::StandardPostchainDownsampleDepthShader::typedReflection(void)::ref;
          {
            if (v96)
            {
              ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOBlurShader";
              {
                int v315 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
                qword_1EB31CE98 = (uint64_t)"StandardPostchainSSAOBlurShader";
                unk_1EB31CEA0 = ggl::standardPostchainSSAOBlurShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31CEA8 = 1;
                unk_1EB31CEB0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31CEB8 = 0;
                unk_1EB31CEC0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31CEC8 = 0;
                unk_1EB31CED0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref = v315;
                *(_DWORD *)algn_1EB31CE94 = 0;
                qword_1EB31CED8 = 0;
                unk_1EB31CEE0 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31CEF0 = 0;
                unk_1EB31CEF8 = 0;
                qword_1EB31CEE8 = 0;
              }
              qword_1EB31C188 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C190 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
              {
                ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1AAC07444;
                qword_1EB31D150 = (uint64_t)"StandardPostchainSSAOBlurShader";
                unk_1EB31D158 = 0;
                qword_1EB31D160 = 0;
                unk_1EB31D168 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D170 = 1;
                unk_1EB31D178 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D180 = 0;
                unk_1EB31D188 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D190 = 2;
                unk_1EB31D198 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D1A8 = 0;
                unk_1EB31D1B0 = 0;
                qword_1EB31D1A0 = 2;
              }
              qword_1EB31C198 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C1A0 = -1430227900;
              qword_1EB31C1A8 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderConstants(void)::ref;
              unk_1EB31C1B0 = 1;
              qword_1EB31C1B8 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderTextures(void)::ref;
              unk_1EB31C1C0 = 2;
              qword_1EB31C1C8 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderSamplers(void)::ref;
              unk_1EB31C1D0 = 2;
            }
          }
          qword_1EB31E920 = (uint64_t)&ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref;
          {
            if (v96)
            {
              ggl::StandardPostchainSSAOUpsampleShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOUpsampleShader";
              {
                qword_1EB31D488 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
                unk_1EB31D490 = ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31D498 = 1;
                unk_1EB31D4A0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D4A8 = 0;
                unk_1EB31D4B0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D4B8 = 0;
                unk_1EB31D4C0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref = 1285258797;
                qword_1EB31D4C8 = 0;
                unk_1EB31D4D0 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D4E0 = 0;
                unk_1EB31D4E8 = 0;
                qword_1EB31D4D8 = 0;
              }
              qword_1EB31C428 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31C430 = 1285258797;
              {
                ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref = 0x1D7D2BD7CLL;
                qword_1EB31D740 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
                unk_1EB31D748 = 0;
                qword_1EB31D750 = 0;
                unk_1EB31D758 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31D760 = 1;
                unk_1EB31D768 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31D770 = 0;
                unk_1EB31D778 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31D780 = 3;
                unk_1EB31D788 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31D798 = 0;
                unk_1EB31D7A0 = 0;
                qword_1EB31D790 = 3;
              }
              qword_1EB31C438 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31C440 = -674054788;
              qword_1EB31C448 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderConstants(void)::ref;
              unk_1EB31C450 = 1;
              qword_1EB31C458 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderTextures(void)::ref;
              unk_1EB31C460 = 3;
              qword_1EB31C468 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderSamplers(void)::ref;
              unk_1EB31C470 = 3;
            }
          }
          qword_1EB31E928 = (uint64_t)&ggl::StandardPostchainSSAOUpsampleShader::typedReflection(void)::ref;
          ggl::StandardPostchainSSAOShader::typedReflection(v96);
          qword_1EB31E930 = (uint64_t)&ggl::StandardPostchainSSAOShader::typedReflection(void)::ref;
          {
            if (v97)
            {
              ggl::StyleTextureRibbonShader::typedReflection(void)::ref = (uint64_t)"StyleTextureRibbonShader";
              {
                int v316 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
                qword_1EB3283E8 = (uint64_t)"StyleTextureRibbonShader";
                unk_1EB3283F0 = ggl::styleTextureRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB3283F8 = 1;
                unk_1EB328400 = &ggl::styleTextureRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB328408 = 2;
                unk_1EB328410 = &ggl::styleTextureRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB328418 = 0;
                unk_1EB328420 = &ggl::styleTextureRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref = v316;
                *(_DWORD *)algn_1EB3283E4 = 0;
                qword_1EB328428 = 1;
                unk_1EB328430 = &ggl::styleTextureRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB328440 = 0;
                unk_1EB328448 = 0;
                qword_1EB328438 = 1;
              }
              qword_1EB322898 = (uint64_t)&ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB3228A0 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
              {
                int v317 = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
                qword_1EB328F40 = 0;
                unk_1EB328F48 = &ggl::styleTextureRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB328F50 = 1;
                unk_1EB328F58 = &ggl::styleTextureRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref = v317;
                *(_DWORD *)algn_1EB328F2C = 1;
                qword_1EB328F60 = 0;
                unk_1EB328F68 = &ggl::styleTextureRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB328F30 = (uint64_t)"StyleTextureRibbonShader";
                unk_1EB328F38 = 0;
                qword_1EB328F70 = 1;
                unk_1EB328F78 = &ggl::styleTextureRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB328F88 = 0;
                unk_1EB328F90 = 0;
                qword_1EB328F80 = 1;
              }
              qword_1EB3228A8 = (uint64_t)&ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB3228B0 = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
              qword_1EB3228B8 = (uint64_t)ggl::styleTextureRibbonShaderShaderConstants(void)::ref;
              unk_1EB3228C0 = 2;
              qword_1EB3228C8 = (uint64_t)ggl::styleTextureRibbonShaderShaderTextures(void)::ref;
              unk_1EB3228D0 = 2;
              qword_1EB3228D8 = (uint64_t)ggl::styleTextureRibbonShaderShaderSamplers(void)::ref;
              unk_1EB3228E0 = 2;
            }
          }
          qword_1EB31E938 = (uint64_t)&ggl::StyleTextureRibbonShader::typedReflection(void)::ref;
          ggl::TextureAlphaMaskShader::typedReflection(v97);
          qword_1EB31E940 = (uint64_t)&ggl::TextureAlphaMaskShader::typedReflection(void)::ref;
          ggl::TexturedShader::typedReflection(v98);
          qword_1EB31E948 = (uint64_t)&ggl::TexturedShader::typedReflection(void)::ref;
          ggl::TexturedDrapedSRGBBlendShader::typedReflection(v99);
          qword_1EB31E950 = (uint64_t)&ggl::TexturedDrapedSRGBBlendShader::typedReflection(void)::ref;
          ggl::TexturedSRGBBlendShader::typedReflection(v100);
          qword_1EB31E958 = (uint64_t)&ggl::TexturedSRGBBlendShader::typedReflection(void)::ref;
          {
            if (v101)
            {
              ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref = (uint64_t)"TexturedColormappedSRGBTexturedShader";
              {
                qword_1EB31AF10 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
                unk_1EB31AF18 = ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31AF20 = 1;
                unk_1EB31AF28 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31AF30 = 3;
                unk_1EB31AF38 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31AF40 = 0;
                unk_1EB31AF48 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref = 103723494;
                qword_1EB31AF50 = 0;
                unk_1EB31AF58 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31AF68 = 0;
                unk_1EB31AF70 = 0;
                qword_1EB31AF60 = 0;
              }
              qword_1EB31A530 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31A538 = 103723494;
              {
                qword_1EB31AF98 = 0;
                unk_1EB31AFA0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31AFA8 = 2;
                unk_1EB31AFB0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1F407266DLL;
                qword_1EB31AFB8 = 0;
                unk_1EB31AFC0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31AF88 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
                unk_1EB31AF90 = 0;
                qword_1EB31AFC8 = 2;
                unk_1EB31AFD0 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31AFE0 = 0;
                unk_1EB31AFE8 = 0;
                qword_1EB31AFD8 = 2;
              }
              qword_1EB31A540 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31A548 = -200858003;
              qword_1EB31A550 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderConstants(void)::ref;
              unk_1EB31A558 = 5;
              qword_1EB31A560 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderTextures(void)::ref;
              unk_1EB31A568 = 2;
              qword_1EB31A570 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderSamplers(void)::ref;
              unk_1EB31A578 = 2;
            }
          }
          qword_1EB31E960 = (uint64_t)&ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref;
          ggl::TexturedExtendedShader::typedReflection(v101);
          qword_1EB31E968 = (uint64_t)&ggl::TexturedExtendedShader::typedReflection(void)::ref;
          {
            if (v102)
            {
              ggl::StyledTexturedShader::typedReflection(void)::ref = (uint64_t)"StyledTexturedShader";
              {
                int v318 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
                qword_1EB326730 = (uint64_t)"StyledTexturedShader";
                unk_1EB326738 = ggl::styledTexturedShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB326740 = 1;
                unk_1EB326748 = &ggl::styledTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB326750 = 2;
                unk_1EB326758 = &ggl::styledTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB326760 = 0;
                unk_1EB326768 = &ggl::styledTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref = v318;
                *(_DWORD *)algn_1EB32672C = 0;
                qword_1EB326770 = 0;
                unk_1EB326778 = &ggl::styledTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB326788 = 0;
                unk_1EB326790 = 0;
                qword_1EB326780 = 0;
              }
              qword_1EB321C60 = (uint64_t)&ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB321C68 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
              {
                ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
                *(_DWORD *)algn_1EB3275C4 = 1;
                qword_1EB3275C8 = (uint64_t)"StyledTexturedShader";
                unk_1EB3275D0 = 0;
                qword_1EB3275D8 = 0;
                unk_1EB3275E0 = &ggl::styledTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB3275E8 = 0;
                unk_1EB3275F0 = &ggl::styledTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB3275F8 = 0;
                unk_1EB327600 = &ggl::styledTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB327608 = 2;
                unk_1EB327610 = &ggl::styledTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB327620 = 0;
                unk_1EB327628 = 0;
                qword_1EB327618 = 2;
              }
              qword_1EB321C70 = (uint64_t)&ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB321C78 = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
              qword_1EB321C80 = (uint64_t)ggl::styledTexturedShaderShaderConstants(void)::ref;
              unk_1EB321C88 = 2;
              qword_1EB321C90 = (uint64_t)ggl::styledTexturedShaderShaderTextures(void)::ref;
              unk_1EB321C98 = 2;
              qword_1EB321CA0 = (uint64_t)ggl::styledTexturedShaderShaderSamplers(void)::ref;
              unk_1EB321CA8 = 2;
            }
          }
          qword_1EB31E970 = (uint64_t)&ggl::StyledTexturedShader::typedReflection(void)::ref;
          ggl::ScreenTexturedQuadShader::typedReflection(v102);
          qword_1EB31E978 = (uint64_t)&ggl::ScreenTexturedQuadShader::typedReflection(void)::ref;
          ggl::PoleTexturedBlendShader::typedReflection(v103);
          qword_1EB31E980 = (uint64_t)&ggl::PoleTexturedBlendShader::typedReflection(void)::ref;
          {
            if (v104)
            {
              ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedInnerShadowRibbonShader";
              {
                int v319 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
                qword_1EB32CD98 = (uint64_t)"TexturedInnerShadowRibbonShader";
                unk_1EB32CDA0 = ggl::texturedInnerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32CDA8 = 1;
                unk_1EB32CDB0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32CDB8 = 4;
                unk_1EB32CDC0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32CDC8 = 0;
                unk_1EB32CDD0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v319;
                *(_DWORD *)algn_1EB32CD94 = 0;
                qword_1EB32CDD8 = 0;
                unk_1EB32CDE0 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32CDF0 = 0;
                unk_1EB32CDF8 = 0;
                qword_1EB32CDE8 = 0;
              }
              qword_1EB323588 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323590 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
              {
                qword_1EB32AB60 = 0;
                unk_1EB32AB68 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AB70 = 3;
                unk_1EB32AB78 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x17C729238;
                qword_1EB32AB80 = 0;
                unk_1EB32AB88 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32AB50 = (uint64_t)"TexturedInnerShadowRibbonShader";
                unk_1EB32AB58 = 0;
                qword_1EB32AB90 = 3;
                unk_1EB32AB98 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32ABA8 = 0;
                unk_1EB32ABB0 = 0;
                qword_1EB32ABA0 = 3;
              }
              qword_1EB323598 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB3235A0 = 2087883320;
              qword_1EB3235A8 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderConstants(void)::ref;
              unk_1EB3235B0 = 5;
              qword_1EB3235B8 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderTextures(void)::ref;
              unk_1EB3235C0 = 3;
              qword_1EB3235C8 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderSamplers(void)::ref;
              unk_1EB3235D0 = 3;
            }
          }
          qword_1EB31E988 = (uint64_t)&ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref;
          ggl::TexturedSolidRibbonShader::typedReflection(v104);
          qword_1EB31E990 = (uint64_t)&ggl::TexturedSolidRibbonShader::typedReflection(void)::ref;
          ggl::TextureWithReverseAlphaShader::typedReflection(v105);
          qword_1EB31E998 = (uint64_t)&ggl::TextureWithReverseAlphaShader::typedReflection(void)::ref;
          ggl::TrafficGlowShader::typedReflection(v106);
          qword_1EB31E9A0 = (uint64_t)&ggl::TrafficGlowShader::typedReflection(void)::ref;
          ggl::TransitLineRibbonShader::typedReflection(v107);
          qword_1EB31E9A8 = (uint64_t)&ggl::TransitLineRibbonShader::typedReflection(void)::ref;
          {
            if (v108)
            {
              ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref = (uint64_t)"PatternedTransitLineRibbonShader";
              {
                qword_1EB32A738 = (uint64_t)"PatternedTransitLineRibbonShader";
                unk_1EB32A740 = ggl::patternedTransitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32A748 = 1;
                unk_1EB32A750 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32A758 = 6;
                unk_1EB32A760 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32A768 = 0;
                unk_1EB32A770 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref = 1746350796;
                qword_1EB32A778 = 1;
                unk_1EB32A780 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32A790 = 0;
                unk_1EB32A798 = 0;
                qword_1EB32A788 = 1;
              }
              qword_1EB3235E8 = (uint64_t)&ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB3235F0 = 1746350796;
              {
                ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x1EFDD56E6;
                qword_1EB32AD10 = (uint64_t)"PatternedTransitLineRibbonShader";
                unk_1EB32AD18 = 0;
                qword_1EB32AD20 = 0;
                unk_1EB32AD28 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AD30 = 1;
                unk_1EB32AD38 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AD40 = 0;
                unk_1EB32AD48 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32AD50 = 2;
                unk_1EB32AD58 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AD68 = 0;
                unk_1EB32AD70 = 0;
                qword_1EB32AD60 = 2;
              }
              qword_1EB3235F8 = (uint64_t)&ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323600 = -270706970;
              qword_1EB323608 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderConstants(void)::ref;
              unk_1EB323610 = 6;
              qword_1EB323618 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderTextures(void)::ref;
              unk_1EB323620 = 3;
              qword_1EB323628 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderSamplers(void)::ref;
              unk_1EB323630 = 3;
            }
          }
          qword_1EB31E9B0 = (uint64_t)&ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref;
          ggl::TransitNodeColorizedShader::typedReflection(v108);
          qword_1EB31E9B8 = (uint64_t)&ggl::TransitNodeColorizedShader::typedReflection(void)::ref;
          ggl::TransitNodeRGBShader::typedReflection(v109);
          qword_1EB31E9C0 = (uint64_t)&ggl::TransitNodeRGBShader::typedReflection(void)::ref;
          ggl::VenueWallShader::typedReflection(v110);
          qword_1EB31E9C8 = (uint64_t)&ggl::VenueWallShader::typedReflection(void)::ref;
          ggl::VenueWallTopShader::typedReflection(v111);
          qword_1EB31E9D0 = (uint64_t)&ggl::VenueWallTopShader::typedReflection(void)::ref;
          ggl::VenueWallEndCapShader::typedReflection(v112);
          qword_1EB31E9D8 = (uint64_t)&ggl::VenueWallEndCapShader::typedReflection(void)::ref;
          ggl::VenueWallShadowShader::typedReflection(v113);
          qword_1EB31E9E0 = (uint64_t)&ggl::VenueWallShadowShader::typedReflection(void)::ref;
          ggl::HorizontalVenue3DStrokeShader::typedReflection(v114);
          qword_1EB31E9E8 = (uint64_t)&ggl::HorizontalVenue3DStrokeShader::typedReflection(void)::ref;
          ggl::VerticalVenue3DStrokeShader::typedReflection(v115);
          qword_1EB31E9F0 = (uint64_t)&ggl::VerticalVenue3DStrokeShader::typedReflection(void)::ref;
          {
            if (v116)
            {
              ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
              {
                qword_1EB32ABC0 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
                unk_1EB32ABC8 = ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB32ABD0 = 1;
                unk_1EB32ABD8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB32ABE0 = 2;
                unk_1EB32ABE8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB32ABF0 = 0;
                unk_1EB32ABF8 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref = 1346813876;
                qword_1EB32AC00 = 0;
                unk_1EB32AC08 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AC18 = 0;
                unk_1EB32AC20 = 0;
                qword_1EB32AC10 = 0;
              }
              qword_1EB323750 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB323758 = 1346813876;
              {
                ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x19B3262D4;
                qword_1EB32AEE8 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
                unk_1EB32AEF0 = 0;
                qword_1EB32AEF8 = 0;
                unk_1EB32AF00 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB32AF08 = 0;
                unk_1EB32AF10 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB32AF18 = 0;
                unk_1EB32AF20 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB32AF28 = 0;
                unk_1EB32AF30 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB32AF40 = 0;
                unk_1EB32AF48 = 0;
                qword_1EB32AF38 = 0;
              }
              qword_1EB323760 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB323768 = -1691196716;
              qword_1EB323770 = (uint64_t)ggl::venueOpenToBelowShadowAlphaShaderShaderConstants(void)::ref;
              unk_1EB323778 = 2;
              qword_1EB323780 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderTextures(void)::ref;
              unk_1EB323788 = 0;
              qword_1EB323790 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderSamplers(void)::ref;
              unk_1EB323798 = 0;
            }
          }
          qword_1EB31E9F8 = (uint64_t)&ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref;
          ggl::VenueOpenToBelowShadowShader::typedReflection(v116);
          qword_1EB31EA00 = (uint64_t)&ggl::VenueOpenToBelowShadowShader::typedReflection(void)::ref;
          ggl::DaVinciTrafficShader::typedReflection(v117);
          qword_1EB31EA08 = (uint64_t)&ggl::DaVinciTrafficShader::typedReflection(void)::ref;
          ggl::DaVinciDecalShader::typedReflection(v118);
          qword_1EB31EA10 = (uint64_t)&ggl::DaVinciDecalShader::typedReflection(void)::ref;
          ggl::DaVinciGroundShader::typedReflection(v119);
          qword_1EB31EA18 = (uint64_t)&ggl::DaVinciGroundShader::typedReflection(void)::ref;
          {
            if (v120)
            {
              ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundNotCompressedShader";
              {
                ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref = 2461507574;
                qword_1EB31AE28 = (uint64_t)"DaVinciGroundNotCompressedShader";
                unk_1EB31AE30 = ggl::daVinciGroundNotCompressedShaderVertShaderFunctionAttributes(void)::ref;
                qword_1EB31AE38 = 5;
                unk_1EB31AE40 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1EB31AE48 = 12;
                unk_1EB31AE50 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1EB31AE58 = 4;
                unk_1EB31AE60 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionTextureMapping(void)::ref;
                qword_1EB31AE68 = 1;
                unk_1EB31AE70 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31AE80 = 0;
                unk_1EB31AE88 = 0;
                qword_1EB31AE78 = 1;
              }
              qword_1EB31A490 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref;
              dword_1EB31A498 = -1833459722;
              {
                ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref = 0x16213AD6ALL;
                qword_1EB31AEA0 = (uint64_t)"DaVinciGroundNotCompressedShader";
                unk_1EB31AEA8 = 0;
                qword_1EB31AEB0 = 0;
                unk_1EB31AEB8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1EB31AEC0 = 21;
                unk_1EB31AEC8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1EB31AED0 = 0;
                unk_1EB31AED8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1EB31AEE0 = 12;
                unk_1EB31AEE8 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1EB31AEF8 = 0;
                unk_1EB31AF00 = 0;
                qword_1EB31AEF0 = 12;
              }
              qword_1EB31A4A0 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref;
              dword_1EB31A4A8 = 1645456746;
              qword_1EB31A4B0 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderConstants(void)::ref;
              unk_1EB31A4B8 = 30;
              qword_1EB31A4C0 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderTextures(void)::ref;
              unk_1EB31A4C8 = 13;
              qword_1EB31A4D0 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderSamplers(void)::ref;
              unk_1EB31A4D8 = 13;
            }
          }
          qword_1EB31EA20 = (uint64_t)&ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref;
          ggl::DaVinciGroundDepthShader::typedReflection(v120);
          qword_1EB31EA28 = (uint64_t)&ggl::DaVinciGroundDepthShader::typedReflection(void)::ref;
          ggl::DaVinciRibbonShader::typedReflection(v121);
          qword_1EB31EA30 = (uint64_t)&ggl::DaVinciRibbonShader::typedReflection(void)::ref;
          ggl::DaVinciGroundShadowMapShader::typedReflection(v122);
          qword_1EB31EA38 = (uint64_t)&ggl::DaVinciGroundShadowMapShader::typedReflection(void)::ref;
          ggl::LinearDepthShader::typedReflection(v123);
          qword_1EB31EA40 = (uint64_t)&ggl::LinearDepthShader::typedReflection(void)::ref;
          ggl::PackedLinearDepthShader::typedReflection(v124);
          qword_1EB31EA48 = (uint64_t)&ggl::PackedLinearDepthShader::typedReflection(void)::ref;
          ggl::TexturedAnimatedRibbonShader::typedReflection(v125);
          qword_1EB31EA50 = (uint64_t)&ggl::TexturedAnimatedRibbonShader::typedReflection(void)::ref;
          ggl::FlyoverOverlayShader::typedReflection(v126);
          qword_1EB31EA58 = (uint64_t)&ggl::FlyoverOverlayShader::typedReflection(void)::ref;
          ggl::GlobeTexturedShader::typedReflection(v127);
          qword_1EB31EA60 = (uint64_t)&ggl::GlobeTexturedShader::typedReflection(void)::ref;
        }
      }
      qword_1EB32C858 = (uint64_t)&StandardLibraryShaders(void)::desc;
      unk_1EB32C860 = 151;
      {
        {
          ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ClearTextureComputeShaderKernel");
          *(_DWORD *)algn_1EB31A58C = 2;
          qword_1EB31A590 = (uint64_t)"ClearTextureComputeShader";
          unk_1EB31A598 = 0;
          qword_1EB31A5A0 = 0;
          unk_1EB31A5A8 = &ggl::clearTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A5B0 = 0;
          unk_1EB31A5B8 = &ggl::clearTextureComputeShaderFunctionBufferMapping(void)::ref;
          qword_1EB31A5C0 = 0;
          unk_1EB31A5C8 = &ggl::clearTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A5D0 = 1;
          unk_1EB31A5D8 = &ggl::clearTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A5E8 = 0;
          unk_1EB31A5F0 = 0;
          qword_1EB31A5E0 = 1;
        }
        StandardLibraryComputeShaders(void)::desc = ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref;
        {
          int v320 = ggl::crc32::compute<36ul>("DownscaleTextureComputeShaderKernel");
          qword_1EB31A618 = 0;
          unk_1EB31A620 = &ggl::downscaleTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1EB31A628 = 0;
          unk_1EB31A630 = &ggl::downscaleTextureComputeShaderFunctionBufferMapping(void)::ref;
          ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref = v320;
          *(_DWORD *)algn_1EB31A604 = 2;
          qword_1EB31A638 = 0;
          unk_1EB31A640 = &ggl::downscaleTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1EB31A608 = (uint64_t)"DownscaleTextureComputeShader";
          unk_1EB31A610 = 0;
          qword_1EB31A648 = 2;
          unk_1EB31A650 = &ggl::downscaleTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31A660 = 0;
          unk_1EB31A668 = 0;
          qword_1EB31A658 = 2;
        }
        dword_1EB31BD74 = ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref;
      }
      qword_1EB32C868 = (uint64_t)&StandardLibraryComputeShaders(void)::desc;
      unk_1EB32C870 = 2;
      {
        {
          ggl::resetTileShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("ResetTileShaderKernel");
          *(_DWORD *)algn_1EB317CFC = 3;
          qword_1EB317D10 = 0;
          unk_1EB317D18 = &ggl::resetTileShaderFunctionConstantMapping(void)::ref;
          qword_1EB317D20 = 0;
          unk_1EB317D28 = &ggl::resetTileShaderFunctionBufferMapping(void)::ref;
          qword_1EB317D30 = 0;
          unk_1EB317D38 = &ggl::resetTileShaderFunctionTextureMapping(void)::ref;
          qword_1EB317D00 = (uint64_t)"ResetTileShader";
          unk_1EB317D08 = 0;
          qword_1EB317D40 = 0;
          unk_1EB317D48 = &ggl::resetTileShaderFunctionSamplerMapping(void)::ref;
          qword_1EB317D58 = 0;
          unk_1EB317D60 = 0;
          qword_1EB317D50 = 0;
        }
        StandardLibraryTileShaders(void)::desc = ggl::resetTileShaderFunctionDescriptor(void)::ref;
      }
      qword_1EB32C878 = (uint64_t)&StandardLibraryTileShaders(void)::desc;
      unk_1EB32C880 = 1;
      qword_1EB32C888 = 0;
      unk_1EB32C890 = 0;
      uint64_t v2 = a2;
    }
  }
  uint64_t result = ggl::ShaderLibrary::ShaderLibrary((uint64_t)a1, &ggl::StandardLibrary::typedReflection(void)::desc, v2);
  *a1 = &unk_1EF55BE88;
  return result;
}

void ___ZZN2md9MapEngineC1Efffb16VKMapViewPurposeRKNSt3__110shared_ptrINS_11TaskContextEEE12VKMapPurposeNS2_10unique_ptrINS_16AnimationManagerENS2_14default_deleteISA_EEEERKN3geo10linear_mapINS_16MapEngineSettingExNS2_8equal_toISG_EENS2_9allocatorINS2_4pairISG_xEEEENS2_6vectorISL_SM_EEEEyP24GEOApplicationAuditTokenENK4__24clE19VKMuninAvailability_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    uint64_t v3 = [WeakRetained cameraDelegate];
    [v3 mapLayerMuninAvailabilityDidChange:*(void *)(a1 + 40)];

    id WeakRetained = v4;
  }
}

void sub_1A1D83F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZNK2md18TextDataStringInfo24getBreakingCharacterSetsERPKNSt3__13setItNS1_4lessItEENS1_9allocatorItEEEESA__block_invoke_4()
{
}

void sub_1A1D83FE8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_1A1D840EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((long long *)a1, (long long *)a2, (long long *)a3).n128_u64[0];
  if (*(_DWORD *)(*(void *)a4 + 44) - *(_DWORD *)(*(void *)a4 + 36) > (*(_DWORD *)(*(void *)a3 + 44)
                                                                                            - *(_DWORD *)(*(void *)a3 + 36)))
  {
    long long v10 = *(_OWORD *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    unint64_t v11 = (__n128 *)(a3 + 48);
    long long v12 = *(_OWORD *)(a3 + 32);
    __n128 v47 = *(__n128 *)(a3 + 48);
    char v50 = *(unsigned char *)(a3 + 64);
    long long v13 = *a4;
    *(void *)a4 = 0;
    *((void *)a4 + 1) = 0;
    unint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v35 = v12;
      long long v41 = v9;
      long long v32 = v10;
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      long long v10 = v32;
      long long v12 = v35;
      long long v9 = v41;
    }
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a4 + 4);
    *(_DWORD *)(a3 + 20) = *((_DWORD *)a4 + 5);
    *(_DWORD *)(a3 + 24) = *((_DWORD *)a4 + 6);
    *(_DWORD *)(a3 + 28) = *((_DWORD *)a4 + 7);
    *(_DWORD *)(a3 + 32) = *((_DWORD *)a4 + 8);
    *(_DWORD *)(a3 + 36) = *((_DWORD *)a4 + 9);
    *(_DWORD *)(a3 + 40) = *((_DWORD *)a4 + 10);
    *(_DWORD *)(a3 + 44) = *((_DWORD *)a4 + 11);
    __n128 v15 = (__n128)a4[3];
    *(unsigned char *)(a3 + 64) = *((unsigned char *)a4 + 64);
    *unint64_t v11 = v15;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)a4 + 1);
    *a4 = v10;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v36 = v12;
      long long v42 = v9;
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      long long v12 = v36;
      long long v9 = v42;
    }
    a4[1] = v9;
    a4[2] = v12;
    __n128 result = v47;
    a4[3] = (__int128)v47;
    *((unsigned char *)a4 + 64) = v50;
    if (*(_DWORD *)(*(void *)a3 + 44) - *(_DWORD *)(*(void *)a3 + 36) > (*(_DWORD *)(*(void *)a2 + 44)
                                                                                              - *(_DWORD *)(*(void *)a2 + 36)))
    {
      long long v18 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      unint64_t v19 = (__n128 *)(a2 + 48);
      long long v20 = *(_OWORD *)(a2 + 32);
      __n128 v48 = *(__n128 *)(a2 + 48);
      char v51 = *(unsigned char *)(a2 + 64);
      long long v21 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      unint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v21;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v37 = v20;
        long long v43 = v17;
        long long v33 = v18;
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        long long v18 = v33;
        long long v20 = v37;
        long long v17 = v43;
      }
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
      __n128 v23 = *v11;
      *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
      *unint64_t v19 = v23;
      double v24 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v18;
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v38 = v20;
        long long v44 = v17;
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        long long v20 = v38;
        long long v17 = v44;
      }
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v20;
      __n128 result = v48;
      *unint64_t v11 = v48;
      *(unsigned char *)(a3 + 64) = v51;
      if (*(_DWORD *)(*(void *)a2 + 44) - *(_DWORD *)(*(void *)a2 + 36) > (*(_DWORD *)(*(void *)a1 + 44)
                                                                                                - *(_DWORD *)(*(void *)a1 + 36)))
      {
        long long v26 = *(_OWORD *)a1;
        long long v25 = *(_OWORD *)(a1 + 16);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v27 = *(_OWORD *)(a1 + 32);
        __n128 v49 = *(__n128 *)(a1 + 48);
        char v52 = *(unsigned char *)(a1 + 64);
        long long v28 = *(_OWORD *)a2;
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        int v29 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v28;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v39 = v27;
          long long v45 = v25;
          long long v34 = v26;
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          long long v26 = v34;
          long long v27 = v39;
          long long v25 = v45;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
        __n128 v30 = *v19;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(__n128 *)(a1 + 48) = v30;
        uint64_t v31 = *(std::__shared_weak_count **)(a2 + 8);
        *(_OWORD *)a2 = v26;
        if (v31)
        {
          if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v40 = v27;
            long long v46 = v25;
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
            long long v27 = v40;
            long long v25 = v46;
          }
        }
        *(_OWORD *)(a2 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v27;
        __n128 result = v49;
        *unint64_t v19 = v49;
        *(unsigned char *)(a2 + 64) = v52;
      }
    }
  }
  return result;
}

void std::vector<md::DaVinciMetaTileData::PackedElevationRange>::__append(uint64_t a1, unint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  double v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      double v6 = &v5[2 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      abort();
    }
    unint64_t v11 = v4 - (void)v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      long long v13 = operator new(2 * v12);
    }
    else
    {
      long long v13 = 0;
    }
    unint64_t v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    uint64_t v16 = &v13[2 * v12];
    bzero(v14, v15);
    long long v17 = &v14[v15];
    if (v5 == v7)
    {
      unint64_t v7 = v5;
    }
    else
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_33;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      double v6 = &v5[-2 * (v19 & 0xFFFFFFFFFFFFFFF0)];
      long long v20 = &v13[2 * v9 - 16];
      long long v21 = v5 - 16;
      unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *long long v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 16;
      }
      while (v22);
      v14 -= 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_33:
        do
        {
          __int16 v24 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v24;
          v14 -= 2;
        }
        while (v6 != v7);
        unint64_t v7 = *(char **)a1;
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t **std::set<unsigned short>::set[abi:nn180100]<unsigned short *>(uint64_t **a1, _WORD *a2, _WORD *a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a2 != a3)
  {
    double v6 = a2;
    unint64_t v7 = 0;
    uint64_t v8 = a1 + 1;
    while (1)
    {
      uint64_t v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      uint64_t v10 = v7;
      unint64_t v11 = v4;
      if (v7)
      {
        do
        {
          uint64_t v9 = v10;
          uint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unint64_t v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = (unsigned __int16)*v6;
      if (*((unsigned __int16 *)v9 + 13) < v13)
      {
LABEL_9:
        unint64_t v14 = v7 ? v9 : v4;
        size_t v15 = v7 ? v9 + 1 : v4;
      }
      else
      {
        unint64_t v14 = v4;
        size_t v15 = v4;
        if (v7)
        {
          size_t v15 = v4;
          while (1)
          {
            while (1)
            {
              unint64_t v14 = v7;
              unsigned int v18 = *((unsigned __int16 *)v7 + 13);
              if (v13 >= v18) {
                break;
              }
              unint64_t v7 = (uint64_t *)*v14;
              size_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            size_t v15 = v14 + 1;
            unint64_t v7 = (uint64_t *)v14[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = operator new(0x20uLL);
        v16[13] = *v6;
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        *size_t v15 = (uint64_t)v16;
        long long v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = (_WORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v6 == a3) {
        break;
      }
      uint64_t v8 = (uint64_t **)*a1;
      unint64_t v7 = a1[1];
    }
  }
  return a1;
}

void sub_1A1D848B4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v1);
  _Unwind_Resume(a1);
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, a2, a3, (long long *)a4).n128_u64[0];
  if (*(_DWORD *)(*(void *)a5 + 44) - *(_DWORD *)(*(void *)a5 + 36) > (*(_DWORD *)(*(void *)a4 + 44)
                                                                                            - *(_DWORD *)(*(void *)a4 + 36)))
  {
    long long v12 = *(_OWORD *)a4;
    long long v11 = *(_OWORD *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    unsigned int v13 = (__n128 *)(a4 + 48);
    long long v14 = *(_OWORD *)(a4 + 32);
    __n128 v62 = *(__n128 *)(a4 + 48);
    char v66 = *(unsigned char *)(a4 + 64);
    long long v15 = *a5;
    *(void *)a5 = 0;
    *((void *)a5 + 1) = 0;
    uint64_t v16 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v46 = v14;
      long long v54 = v11;
      long long v42 = v12;
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      long long v12 = v42;
      long long v14 = v46;
      long long v11 = v54;
    }
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *(_DWORD *)(a4 + 20) = *((_DWORD *)a5 + 5);
    *(_DWORD *)(a4 + 24) = *((_DWORD *)a5 + 6);
    *(_DWORD *)(a4 + 28) = *((_DWORD *)a5 + 7);
    *(_DWORD *)(a4 + 32) = *((_DWORD *)a5 + 8);
    *(_DWORD *)(a4 + 36) = *((_DWORD *)a5 + 9);
    *(_DWORD *)(a4 + 40) = *((_DWORD *)a5 + 10);
    *(_DWORD *)(a4 + 44) = *((_DWORD *)a5 + 11);
    __n128 v17 = (__n128)a5[3];
    *(unsigned char *)(a4 + 64) = *((unsigned char *)a5 + 64);
    *unsigned int v13 = v17;
    unsigned int v18 = (std::__shared_weak_count *)*((void *)a5 + 1);
    *a5 = v12;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v47 = v14;
      long long v55 = v11;
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v14 = v47;
      long long v11 = v55;
    }
    a5[1] = v11;
    a5[2] = v14;
    __n128 result = v62;
    a5[3] = (__int128)v62;
    *((unsigned char *)a5 + 64) = v66;
    if (*(_DWORD *)(*(void *)a4 + 44) - *(_DWORD *)(*(void *)a4 + 36) > (*(_DWORD *)(*(void *)a3 + 44)
                                                                                              - *(_DWORD *)(*(void *)a3 + 36)))
    {
      long long v20 = *(_OWORD *)a3;
      long long v19 = *(_OWORD *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v21 = (__n128 *)(a3 + 48);
      long long v22 = *(_OWORD *)(a3 + 32);
      __n128 v63 = *(__n128 *)(a3 + 48);
      char v67 = *(unsigned char *)(a3 + 64);
      long long v23 = *(_OWORD *)a4;
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      __int16 v24 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v23;
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v48 = v22;
        long long v56 = v19;
        long long v43 = v20;
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        long long v20 = v43;
        long long v22 = v48;
        long long v19 = v56;
      }
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(a4 + 20);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      *(_DWORD *)(a3 + 36) = *(_DWORD *)(a4 + 36);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(a4 + 44);
      __n128 v25 = *v13;
      *(unsigned char *)(a3 + 64) = *(unsigned char *)(a4 + 64);
      *long long v21 = v25;
      long long v26 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v20;
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v49 = v22;
        long long v57 = v19;
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        long long v22 = v49;
        long long v19 = v57;
      }
      *(_OWORD *)(a4 + 16) = v19;
      *(_OWORD *)(a4 + 32) = v22;
      __n128 result = v63;
      *unsigned int v13 = v63;
      *(unsigned char *)(a4 + 64) = v67;
      if (*(_DWORD *)(*(void *)a3 + 44) - *(_DWORD *)(*(void *)a3 + 36) > (*(_DWORD *)(*(void *)a2 + 44)
                                                                                                - *(_DWORD *)(*(void *)a2 + 36)))
      {
        long long v28 = *(_OWORD *)a2;
        long long v27 = *(_OWORD *)(a2 + 16);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        int v29 = (__n128 *)(a2 + 48);
        long long v30 = *(_OWORD *)(a2 + 32);
        __n128 v64 = *(__n128 *)(a2 + 48);
        char v68 = *(unsigned char *)(a2 + 64);
        long long v31 = *(_OWORD *)a3;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        long long v32 = *(std::__shared_weak_count **)(a2 + 8);
        *(_OWORD *)a2 = v31;
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v50 = v30;
          long long v58 = v27;
          long long v44 = v28;
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          long long v28 = v44;
          long long v30 = v50;
          long long v27 = v58;
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
        __n128 v33 = *v21;
        *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
        *int v29 = v33;
        long long v34 = *(std::__shared_weak_count **)(a3 + 8);
        *(_OWORD *)a3 = v28;
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v51 = v30;
          long long v59 = v27;
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          long long v30 = v51;
          long long v27 = v59;
        }
        *(_OWORD *)(a3 + 16) = v27;
        *(_OWORD *)(a3 + 32) = v30;
        __n128 result = v64;
        *long long v21 = v64;
        *(unsigned char *)(a3 + 64) = v68;
        if (*(_DWORD *)(*(void *)a2 + 44) - *(_DWORD *)(*(void *)a2 + 36) > (*(_DWORD *)(*(void *)a1 + 44)
                                                                                                  - *(_DWORD *)(*(void *)a1 + 36)))
        {
          long long v36 = *(_OWORD *)a1;
          long long v35 = *(_OWORD *)(a1 + 16);
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          long long v37 = *(_OWORD *)(a1 + 32);
          __n128 v65 = *(__n128 *)(a1 + 48);
          char v69 = *(unsigned char *)(a1 + 64);
          long long v38 = *(_OWORD *)a2;
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          long long v39 = *(std::__shared_weak_count **)(a1 + 8);
          *(_OWORD *)a1 = v38;
          if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v52 = v37;
            long long v60 = v35;
            long long v45 = v36;
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
            long long v36 = v45;
            long long v37 = v52;
            long long v35 = v60;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
          __n128 v40 = *v29;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(__n128 *)(a1 + 48) = v40;
          long long v41 = *(std::__shared_weak_count **)(a2 + 8);
          *(_OWORD *)a2 = v36;
          if (v41)
          {
            if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v53 = v37;
              long long v61 = v35;
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
              long long v37 = v53;
              long long v35 = v61;
            }
          }
          *(_OWORD *)(a2 + 16) = v35;
          *(_OWORD *)(a2 + 32) = v37;
          __n128 result = v65;
          *int v29 = v65;
          *(unsigned char *)(a2 + 64) = v69;
        }
      }
    }
  }
  return result;
}

void *std::__compressed_pair_elem<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0 const&,0ul>(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  uint64_t v5 = a2[4];
  a1[3] = 0;
  a1[4] = v5;
  double v6 = (char *)a2[1];
  unint64_t v7 = (char *)a2[2];
  uint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0) {
      abort();
    }
    uint64_t v9 = v8 >> 4;
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    a1[1] = v10;
    a1[2] = v10;
    a1[3] = &v10[2 * v9];
    do
    {
      if (v10)
      {
        uint64_t v11 = *((void *)v6 + 1);
        *uint64_t v10 = *(void *)v6;
        v10[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v6 += 16;
      v10 += 2;
    }
    while (v6 != v7);
    a1[2] = v10;
  }
  uint64_t v12 = a2[6];
  a1[5] = a2[5];
  a1[6] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2[8];
  a1[7] = a2[7];
  a1[8] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = operator new(0x50uLL);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = &unk_1EF5801E0;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = a3;
  *((_DWORD *)v5 + 12) = 0;
  v5[7] = 0;
  long long v44 = 0;
  uint64_t v45 = 0;
  long long v43 = &v44;
  if (a2)
  {
    double v6 = 0;
    unint64_t v7 = &v44;
    while (1)
    {
      uint64_t v8 = &v44;
      if (v7 == &v44) {
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = &v44;
      if (v6)
      {
        do
        {
          uint64_t v8 = (uint64_t **)v9;
          uint64_t v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          uint64_t v10 = v8;
        }
        while (v11);
      }
      float v12 = *((float *)a2 + 4);
      if (*((float *)v8 + 7) < v12)
      {
LABEL_9:
        uint64_t v13 = v6 ? v8 : &v44;
        long long v14 = v6 ? v8 + 1 : &v44;
      }
      else
      {
        uint64_t v13 = &v44;
        long long v14 = &v44;
        if (v6)
        {
          long long v14 = &v44;
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v6;
              float v17 = *((float *)v6 + 7);
              if (v12 >= v17) {
                break;
              }
              double v6 = (uint64_t *)*v6;
              long long v14 = v13;
              if (!*v13) {
                goto LABEL_16;
              }
            }
            if (v17 >= v12) {
              break;
            }
            long long v14 = (uint64_t **)(v6 + 1);
            double v6 = (uint64_t *)v6[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        long long v15 = operator new(0x30uLL);
        v15[7] = *((_DWORD *)a2 + 4);
        uint64_t v16 = *(uint64_t *)((char *)a2 + 20);
        v15[10] = *((_DWORD *)a2 + 7);
        *((void *)v15 + 4) = v16;
        *(void *)long long v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = v13;
        *long long v14 = (uint64_t *)v15;
        if (*v43)
        {
          long long v43 = (uint64_t **)*v43;
          long long v15 = *v14;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v44, (uint64_t *)v15);
        ++v45;
      }
      a2 = (uint64_t *)*a2;
      if (!a2) {
        break;
      }
      unint64_t v7 = v43;
      double v6 = v44;
    }
  }
  unsigned int v18 = operator new(0x60uLL);
  v18[1] = 0;
  v18[2] = 0;
  *unsigned int v18 = &unk_1EF583AF8;
  long long v19 = ggl::TextureData2D::TextureData2D((uint64_t)(v18 + 3), 256, 1, 1u, 12, 1);
  long long v20 = (unsigned char *)(*(uint64_t (**)(void *, void))(v18[3] + 16))(v19, 0);
  long long v21 = v44;
  if (v44)
  {
    do
    {
      long long v22 = v21;
      long long v21 = (uint64_t *)v21[1];
    }
    while (v21);
  }
  else
  {
    long long v23 = &v44;
    do
    {
      long long v22 = v23[2];
      BOOL v11 = *v22 == (void)v23;
      long long v23 = (uint64_t **)v22;
    }
    while (v11);
  }
  float v24 = *((float *)v22 + 7);
  *((_DWORD *)v5 + 16) = 1008981770;
  *((float *)v5 + 17) = v24;
  float v25 = log2f(v24);
  unint64_t v26 = 0;
  *((_DWORD *)v5 + 18) = -1059808648;
  *((float *)v5 + 19) = v25;
  while (1)
  {
    float v32 = exp2f(*((float *)v5 + 18)+ (float)((float)((float)(*((float *)v5 + 19) - *((float *)v5 + 18)) * (float)v26) * 0.0039216));
    __n128 v33 = v44;
    long long v34 = &v44;
    if (!v44) {
      goto LABEL_43;
    }
    long long v34 = &v44;
    do
    {
      long long v35 = v33 + 1;
      if (v32 < *((float *)v33 + 7))
      {
        long long v35 = v33;
        long long v34 = (uint64_t **)v33;
      }
      __n128 v33 = (uint64_t *)*v35;
    }
    while (*v35);
    long long v36 = *v34;
    if (*v34)
    {
      do
      {
        long long v37 = (uint64_t **)v36;
        long long v36 = (uint64_t *)v36[1];
      }
      while (v36);
    }
    else
    {
LABEL_43:
      long long v37 = v34;
      do
      {
        long long v38 = (uint64_t *)v37;
        long long v37 = (uint64_t **)v37[2];
      }
      while (*v37 == v38);
    }
    float v27 = (float)(v32 - *((float *)v37 + 7)) / (float)(*((float *)v34 + 7) - *((float *)v37 + 7));
    float v28 = *((float *)v37 + 8) + (float)((float)(*((float *)v34 + 8) - *((float *)v37 + 8)) * v27);
    float v29 = *((float *)v37 + 9) + (float)((float)(*((float *)v34 + 9) - *((float *)v37 + 9)) * v27);
    float v30 = *((float *)v37 + 10) + (float)((float)(*((float *)v34 + 10) - *((float *)v37 + 10)) * v27);
    long long v31 = &v20[4 * v26];
    *long long v31 = (int)(float)(v28 * 255.0);
    v31[1] = (int)(float)(v29 * 255.0);
    v31[2] = (int)(float)(v30 * 255.0);
    v31[3] = 1;
    if (++v26 == 255)
    {
      float v39 = *((float *)v22 + 9) * 255.0;
      float v40 = *((float *)v22 + 10) * 255.0;
      v20[1020] = (int)(float)(*((float *)v22 + 8) * 255.0);
      v20[1021] = (int)v39;
      v20[1022] = (int)v40;
      v20[1023] = 1;
      long long v41 = (char *)operator new(0x58uLL);
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = 0;
      *(void *)long long v41 = &unk_1EF583858;
      *((void *)v41 + 5) = 0;
      *((void *)v41 + 6) = 0;
      *((_DWORD *)v41 + 14) = 0;
      *((void *)v41 + 3) = &unk_1EF55AE58;
      *((void *)v41 + 4) = 0;
      *(void *)&long long v42 = 0x100000001;
      *((void *)&v42 + 1) = 0x100000001;
      *(_OWORD *)(v41 + 60) = v42;
      *(void *)(v41 + 76) = 1;
      *((_DWORD *)v41 + 21) = 0;
      operator new();
    }
  }
}

void sub_1A1D85684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a19);
  uint64_t shared_owners = v19[2].__shared_owners_;
  v19[2].__shared_owners_ = 0;
  if (shared_owners) {
    (*(void (**)(uint64_t))(*(void *)shared_owners + 8))(shared_owners);
  }
  long long v22 = (std::__shared_weak_count *)v19[1].__shared_owners_;
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::operator()()
{
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = **(void **)(*(void *)(a1 + 8) + 136);
  if (v1)
  {
    char v2 = 8;
    md::MapEngine::setNeedsTick(v1, &v2);
  }
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::operator()()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::operator()()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  char v2 = operator new(0x50uLL);
  *char v2 = &unk_1EF575630;
  std::__compressed_pair_elem<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1A1D85A34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::colorRampRGB@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 224);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 720))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 720))();
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::getProperty@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  if (*(unsigned char *)(result + 8))
  {
    uint64_t result = std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)(a2 + 8), result + 16);
    *a2 = 1;
  }
  return result;
}

void md::AttributesLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = (unsigned __int16 *)*a3;
  uint64_t v8 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*v7 != *(unsigned __int16 *)(a1 + 584))
    {
      v7 += 24;
      if (v7 == v8) {
        goto LABEL_12;
      }
    }
  }
  if (v7 == v8 || *((void *)v7 + 4) != 1)
  {
LABEL_12:
    uint64_t v10 = 0;
LABEL_13:
    uint64_t v26 = v10;
    float v27 = 0;
    if (v10) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *((void *)v7 + 3);
  uint64_t v10 = *(void *)(v9 + 112);
  BOOL v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = v10;
  float v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v10 = v26;
    if (v26) {
      goto LABEL_14;
    }
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    float v12 = v27;
    if (!v27) {
      return;
    }
    goto LABEL_28;
  }
  uint64_t v10 = v26;
  if (!v26) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v13 = *(geo::codec::VectorTile **)(v10 + 144);
  long long v14 = *(std::__shared_weak_count **)(v10 + 152);
  v25[0] = (uint64_t)v13;
  v25[1] = (uint64_t)v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13
    && (uint64_t v15 = *(void *)geo::codec::VectorTile::attributes(v13)) != 0
    && (uint64_t v16 = *(unsigned __int8 *)(v15 + 33), *(unsigned char *)(v15 + 33)))
  {
    uint64_t v17 = 0;
    unsigned int v18 = *(int **)v15;
    long long v19 = v18;
    while (1)
    {
      int v20 = *v19;
      v19 += 2;
      if (v20 == 41) {
        break;
      }
      if (v16 == ++v17) {
        goto LABEL_22;
      }
    }
    int v21 = v18[2 * v17 + 1];
  }
  else
  {
LABEL_22:
    int v21 = -1;
  }
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  long long v22 = operator new(0x2E8uLL);
  v22[1] = 0;
  v22[2] = 0;
  *long long v22 = &unk_1EF5806B0;
  uint64_t v23 = md::MapTileData::MapTileData((uint64_t)(v22 + 3), a2, (uint64_t)__p, v25, 1);
  v22[3] = &unk_1EF538758;
  v22[82] = &unk_1EF538798;
  *((_DWORD *)v22 + 185) = v21;
  *a4 = v23;
  a4[1] = (uint64_t)v22;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    float v12 = v27;
    if (!v27) {
      return;
    }
  }
  else
  {
    float v12 = v27;
    if (!v27) {
      return;
    }
  }
LABEL_28:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A1D85DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
}

uint64_t md::PolylineLabelPlacement::ensureValidIterator(uint64_t this, double a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (!v2 || *(_DWORD *)(this + 88) != *(_DWORD *)(v2 + 252) || !*(void *)(this + 72) || *(__int16 *)(this + 82) < 0) {
    return md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(this + 48), *(unsigned __int8 *)(this + 212), a2);
  }
  return this;
}

uint64_t gss::FeatureAttributeSet::eraseKeyValuePair(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v4 = 0;
  while (*(_DWORD *)(v3 + v4) != a2)
  {
    v4 += 8;
    if (v3 + v4 == v2) {
      return 0;
    }
  }
  uint64_t v6 = v3 + v4;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 != v2)
  {
    do
    {
      *(_DWORD *)(v7 - 8) = *(_DWORD *)v7;
      *(_WORD *)(v7 - 4) = *(_WORD *)(v7 + 4);
      v7 += 8;
    }
    while (v7 != v2);
    uint64_t v6 = v7 - 8;
  }
  a1[1] = v6;
  return 1;
}

uint64_t geo::codec::VectorTile::attributes(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 16;
}

uint64_t esl::QuartzPath::moveToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if (v8)
  {
    if (a2)
    {
      uint64_t v9 = (const CGAffineTransform *)(a2 + 8);
      double v10 = a3;
      double v11 = a4;
    }
    else
    {
      double v10 = a3;
      double v11 = a4;
      uint64_t v9 = 0;
    }
    CGPathMoveToPoint(a1[1], v9, v10, v11);
  }
  return v8;
}

uint64_t md::MultipleShieldLabelPart::MultipleShieldLabelPart(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  uint64_t v4 = a1 + 280;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1;
  long long v5 = 0uLL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1A28FC750;
  *(void *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(a1 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(a1 + 312) = xmmword_1A28FC750;
  *(void *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(void *)a1 = &unk_1EF538820;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 592) = 0;
  uint64_t v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    long long v5 = 0uLL;
    uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v14) {
      operator new();
    }
  }
  *(void *)(a1 + 600) = *((void *)v6 + 91);
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(_WORD *)(a1 + 628) = 1;
  *(unsigned char *)(a1 + 630) = 0;
  *(void *)a1 = &unk_1EF5435A0;
  *(_OWORD *)(a1 + 632) = v5;
  *(_DWORD *)(a1 + 648) = 1065353216;
  *(_DWORD *)(a1 + 659) = 0;
  *(void *)(a1 + 652) = 0;
  *(void *)(v4 + 384) = 0;
  *(void *)(v4 + 392) = 0;
  *(_DWORD *)(a1 + 680) = 1065353216;
  *(_DWORD *)(a1 + 691) = 0;
  *(void *)(a1 + 684) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 640);
    *(void *)(a1 + 632) = v7;
    *(void *)(a1 + 640) = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *(void *)(a1 + 632) = v7;
    *(void *)(a1 + 640) = 0;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 16))(&v15);
  long long v10 = v15;
  long long v15 = 0uLL;
  double v11 = *(std::__shared_weak_count **)(a1 + 672);
  *(_OWORD *)(v4 + 384) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  float v12 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return a1;
}

void sub_1A1D862EC(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 84);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 80);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

BOOL md::PolylineLabelPlacement::lock@<W0>(md::PolylineLabelPlacement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (std::mutex *)(*((void *)this + 6) + 160);
  BOOL result = std::mutex::try_lock(v3);
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = result;
  return result;
}

md::BorderLabelPart *md::UniLineLabelFeature::newTextPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, void *a6)
{
  float v12 = *(float **)(a4 + 280);
  if (v12)
  {
    if (vabds_f32(v12[2], *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)a4, (uint64_t)v12, 0);
      float v12 = *(float **)(a4 + 280);
    }
  }
  else
  {
    float v12 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(void *)(a4 + 280) = v12;
  }
  uint64_t v13 = *(void *)v12;
  if (*(float *)(*(void *)v12 + 100) == 0.0) {
    return 0;
  }
  uint64_t v16 = *((void *)a1 + 48);
  uint64_t v17 = *((void *)a1 + 49);
  if (v16 == v17) {
    return 0;
  }
  char v18 = *(unsigned char *)(a3 + 404);
  if (*((unsigned char *)a1 + 449) == 1)
  {
    if ((unint64_t)(v17 - v16) < 0x80) {
      return 0;
    }
    char v70 = *(unsigned char *)(a3 + 404);
    uint64_t v19 = *(void *)v12;
    if (vabds_f32(v12[2], *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)a4, (uint64_t)v12, 0);
      uint64_t v19 = **(void **)(a4 + 280);
    }
    unint64_t v20 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 488))(a1);
    int v21 = (unsigned __int8 *)*((void *)a1 + 20);
    long long v22 = (unsigned __int8 *)*((void *)a1 + 21);
    if (v20 > 0x6DB6DB6DB6DB6DB7 * ((v22 - v21) >> 3))
    {
      md::LabelFeature::updateTextVector(a1);
      int v21 = (unsigned __int8 *)*((void *)a1 + 20);
      long long v22 = (unsigned __int8 *)*((void *)a1 + 21);
    }
    uint64_t v23 = v19 + 72;
    md::TextDataStore::textDataForZoom(&v78, v21, v22, 0, v19 + 72);
    uint64_t v24 = v78;
    if (!v78)
    {
      int v14 = 0;
      int v42 = 1;
      goto LABEL_71;
    }
    unint64_t v25 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 488))(a1);
    uint64_t v26 = (unsigned __int8 *)*((void *)a1 + 20);
    float v27 = (unsigned __int8 *)*((void *)a1 + 21);
    if (v25 > 0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 3))
    {
      md::LabelFeature::updateTextVector(a1);
      uint64_t v26 = (unsigned __int8 *)*((void *)a1 + 20);
      float v27 = (unsigned __int8 *)*((void *)a1 + 21);
    }
    md::TextDataStore::textDataForZoom(&v76, v26, v27, 1, v23);
    uint64_t v28 = v76;
    if (!v76)
    {
      int v14 = 0;
      int v42 = 1;
LABEL_68:
      char v68 = v77;
      if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
LABEL_71:
      char v69 = v79;
      if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      if (!v42) {
        return v14;
      }
      return 0;
    }
    float v29 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v74 = md::LabelText::LabelText((uint64_t)&v29[1], v24, (uint64_t)v79, v70);
    unint64_t v75 = v29;
    float v30 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v30->__shared_owners_ = 0;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    long long v31 = (mdm::Allocator *)md::LabelText::LabelText((uint64_t)&v30[1], v28, (uint64_t)v77, v70);
    v73[0] = v31;
    v73[1] = v30;
    if (*a5)
    {
      char v32 = 0;
      char v33 = 0;
      __int16 v34 = 9;
    }
    else
    {
      char v32 = *(unsigned char *)(a3 + 317);
      char v33 = *(unsigned char *)(a3 + 318);
      __int16 v34 = *(_WORD *)(a3 + 320);
    }
    __int16 v72 = v34;
    v71[0] = v32;
    v71[1] = v33;
    v71[2] = 0;
    float v55 = *(float *)(a4 + 152);
    float v56 = *(float *)(v13 + 100);
    uint64_t v57 = mdm::Allocator::instance(v31);
    long long v58 = (md::TextLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 16))(v57, 1488, 8);
    int v59 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 264))(a1);
    float v60 = (float)(v56 + v55) * 0.5;
    long long v61 = (mdm::Allocator *)md::CurvedTextLabelPart::CurvedTextLabelPart((uint64_t)v58, v59, &v74, a2, a3, a4, a6, (uint64_t)v71, -v60, a5, 0);
    if (v58)
    {
      uint64_t v62 = mdm::Allocator::instance(v61);
      __n128 v63 = (md::TextLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 16))(v62, 1488, 8);
      int v64 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 264))(a1);
      __n128 v65 = (mdm::Allocator *)md::CurvedTextLabelPart::CurvedTextLabelPart((uint64_t)v63, v64, v73, a2, a3, a4, a6, (uint64_t)v71, v60, a5, 0);
      uint64_t v66 = mdm::Allocator::instance(v65);
      int v14 = (md::BorderLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66 + 16))(v66, 632, 8);
      md::BorderLabelPart::BorderLabelPart(v14, v58, v63);
      if (v14)
      {
        int v42 = 0;
LABEL_63:
        if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        char v67 = v75;
        if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
        goto LABEL_68;
      }
      (*(void (**)(md::TextLabelPart *))(*(void *)v58 + 8))(v58);
      if (v63) {
        (*(void (**)(md::TextLabelPart *))(*(void *)v63 + 8))(v63);
      }
    }
    int v14 = 0;
    int v42 = 1;
    goto LABEL_63;
  }
  if ((*(uint64_t (**)(void))(*(void *)*a6 + 200))())
  {
    uint64_t v35 = (*(uint64_t (**)(void))(*(void *)*a6 + 200))();
    uint64_t v37 = v35;
    if (!*(void *)v35
      || *(_DWORD *)(v35 + 40) != *(_DWORD *)(*(void *)v35 + 252)
      || (long long v38 = *(uint64_t **)(v35 + 24)) == 0
      || *(__int16 *)(v35 + 34) < 0)
    {
      md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v35, *(unsigned __int8 *)(v35 + 164), v36);
      if (!*(void *)v37) {
        return 0;
      }
      if (*(_DWORD *)(v37 + 40) != *(_DWORD *)(*(void *)v37 + 252)) {
        return 0;
      }
      long long v38 = *(uint64_t **)(v37 + 24);
      if (!v38) {
        return 0;
      }
    }
    if (*(__int16 *)(v37 + 34) < 0) {
      return 0;
    }
    uint64_t v39 = *v38;
    if (!v39) {
      return 0;
    }
    int v40 = *(unsigned __int8 *)(v39 + 38);
    if (v40 == 255) {
      return 0;
    }
  }
  else
  {
    int v40 = 0;
  }
  uint64_t v41 = *(void *)(a4 + 280);
  if (v41)
  {
    if (vabds_f32(*(float *)(v41 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)a4, v41, 0);
      uint64_t v41 = *(void *)(a4 + 280);
    }
  }
  else
  {
    uint64_t v41 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(void *)(a4 + 280) = v41;
  }
  uint64_t v43 = *(void *)v41;
  unint64_t v44 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 488))(a1);
  uint64_t v45 = (unsigned __int8 *)*((void *)a1 + 20);
  long long v46 = (unsigned __int8 *)*((void *)a1 + 21);
  if (v44 > 0x6DB6DB6DB6DB6DB7 * ((v46 - v45) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    uint64_t v45 = (unsigned __int8 *)*((void *)a1 + 20);
    long long v46 = (unsigned __int8 *)*((void *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v78, v45, v46, v40, v43 + 72);
  uint64_t v47 = v78;
  if (v78)
  {
    long long v48 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v48->__shared_owners_ = 0;
    v48->__shared_weak_owners_ = 0;
    v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v76 = md::LabelText::LabelText((uint64_t)&v48[1], v47, (uint64_t)v79, v18);
    char v77 = v48;
    {
      operator new();
    }
    int v14 = (md::BorderLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 1488, 8);
    int v49 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 264))(a1);
    if (*a5)
    {
      char v50 = 0;
      unsigned __int8 v51 = 0;
      __int16 v52 = 9;
    }
    else
    {
      char v50 = *(unsigned char *)(a3 + 317);
      unsigned __int8 v51 = *(unsigned char *)(a3 + 318);
      __int16 v52 = *(_WORD *)(a3 + 320);
    }
    *(_WORD *)((char *)&v74 + 3) = v52;
    LOBYTE(v74) = v50;
    *(_WORD *)((char *)&v74 + 1) = v51;
    md::CurvedTextLabelPart::CurvedTextLabelPart((uint64_t)v14, v49, &v76, a2, a3, a4, a6, (uint64_t)&v74, 0.0, a5, 0);
    (*(void (**)(md::BorderLabelPart *, uint64_t))(*(void *)v14 + 176))(v14, 5);
    long long v53 = v77;
    if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  else
  {
    int v14 = 0;
  }
  long long v54 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  if (!v47) {
    return 0;
  }
  return v14;
}

void sub_1A1D86DAC(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v9 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 40))(v9, v7, 632);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va3);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5A8B350, MEMORY[0x1E4FBA1C8]);
}

void sub_1A1D87608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5A8B358, MEMORY[0x1E4FBA1D0]);
}

void sub_1A1D876C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t esl::QuartzImage::dimensions(esl::QuartzImage *this)
{
  unsigned __int16 v2 = (*(uint64_t (**)(esl::QuartzImage *))(*(void *)this + 24))(this);
  return v2 | ((*(unsigned __int16 (**)(esl::QuartzImage *))(*(void *)this + 32))(this) << 16);
}

void esl::QuartzImage::asPNG(CGImageRef *this@<X0>, void *a2@<X8>)
{
  if ((*((uint64_t (**)(CGImageRef *))*this + 5))(this))
  {
    DataProvider = CGImageGetDataProvider(this[2]);
    CFDataRef v5 = CGDataProviderCopyData(DataProvider);
    CFIndex Length = CFDataGetLength(v5);
    uint64_t v7 = (UInt8 *)malloc_type_malloc(Length, 0x9ED7DE0AuLL);
    CFIndex v8 = CFDataGetLength(v5);
    v10.location = 0;
    v10.length = v8;
    CFDataGetBytes(v5, v10, v7);
    CFRelease(v5);
    std::string::basic_string[abi:ne180100](a2, v7, v8);
    free(v7);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

BOOL esl::QuartzImage::writeAsPNG(CGImageRef *this, const char *a2)
{
  if (!(*((unsigned int (**)(CGImageRef *))*this + 5))(this)) {
    return 0;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, a2, 0x600u);
  CFURLRef v5 = CFURLCreateWithFileSystemPath(0, v4, kCFURLPOSIXPathStyle, 0);
  uint64_t v6 = CGImageDestinationCreateWithURL(v5, @"public.png", 1uLL, 0);
  CFRelease(v5);
  CFRelease(v4);
  if (!v6)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to write image to %s\n", a2);
    return 0;
  }
  CGImageDestinationAddImage(v6, this[2], 0);
  BOOL v7 = CGImageDestinationFinalize(v6);
  if (!v7) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to write image to %s\n", a2);
  }
  CFRelease(v6);
  return v7;
}

CGImageRef esl::QuartzImage::byteData(CGImageRef *this)
{
  if (!(*((unsigned int (**)(CGImageRef *))*this + 5))(this)) {
    return 0;
  }
  DataProvider = CGImageGetDataProvider(this[2]);
  CFDataRef v3 = CGDataProviderCopyData(DataProvider);
  CFIndex Length = CFDataGetLength(v3);
  this[4] = (CGImageRef)Length;
  CGImageRef v5 = this[3];
  if (v5) {
    uint64_t v6 = (UInt8 *)malloc_type_realloc(v5, Length, 0x604897BEuLL);
  }
  else {
    uint64_t v6 = (UInt8 *)malloc_type_malloc(Length, 0x29C68BB0uLL);
  }
  this[3] = (CGImageRef)v6;
  v8.length = (CFIndex)this[4];
  v8.location = 0;
  CFDataGetBytes(v3, v8, v6);
  CFRelease(v3);
  return this[3];
}

CGImageRef esl::QuartzImage::byteLength(CGImageRef *this)
{
  if (!(*((unsigned int (**)(CGImageRef *))*this + 5))(this)) {
    return 0;
  }
  DataProvider = CGImageGetDataProvider(this[2]);
  CFDataRef v3 = CGDataProviderCopyData(DataProvider);
  this[4] = (CGImageRef)CFDataGetLength(v3);
  CFRelease(v3);
  return this[4];
}

size_t esl::QuartzImage::bytesPerRow(CGImage **this)
{
  if (!(*((unsigned int (**)(CGImage **))*this + 5))(this)) {
    return 0;
  }
  unsigned __int16 v2 = this[2];
  return CGImageGetBytesPerRow(v2);
}

void esl::__Image::clone(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t esl::__Image::drawOverlayColor(esl::__Image *this, const esl::QuartzColor *a2)
{
  return 0;
}

void esl::__Image::imageWithOverlayColor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t esl::__Image::applyBrightness(esl::__Image *this, float a2)
{
  return 0;
}

void esl::__Image::imageWithBrightness(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<esl::QuartzContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<esl::QuartzImage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzImage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void *geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559118;
  unsigned __int16 v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void *geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559138;
  unsigned __int16 v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *,void>@<X0>(CGImageRef *a1@<X1>, void *a2@<X8>)
{
  CFStringRef v4 = operator new(0x40uLL);
  BOOL result = std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *,std::allocator<esl::QuartzImage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A1D87E40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *,std::allocator<esl::QuartzImage>,0>(void *a1, CGImageRef *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF582BE0;
  esl::QuartzImage::QuartzImage((esl::QuartzImage *)(a1 + 3), *a2);
  return a1;
}

void sub_1A1D87EA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void esl::QuartzContext::translate(esl::QuartzContext *this, float a2, float a3)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    uint64_t v6 = (CGContext *)*((void *)this + 1);
    CGContextTranslateCTM(v6, a2, a3);
  }
}

void esl::QuartzContext::scale(esl::QuartzContext *this, float a2, float a3)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    uint64_t v6 = (CGContext *)*((void *)this + 1);
    CGContextScaleCTM(v6, a2, a3);
  }
}

void esl::QuartzContext::rotate(esl::QuartzContext *this, float a2)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    CFStringRef v4 = (CGContext *)*((void *)this + 1);
    CGContextRotateCTM(v4, a2);
  }
}

void esl::QuartzContext::concat(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (a2)
  {
    if (v4)
    {
      CGImageRef v5 = (CGContext *)a1[1];
      long long v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v7.a = *(_OWORD *)(a2 + 8);
      *(_OWORD *)&v7.c = v6;
      *(_OWORD *)&v7.tx = *(_OWORD *)(a2 + 40);
      CGContextConcatCTM(v5, &v7);
    }
  }
}

size_t esl::QuartzContext::bytesPerRow(CGContext **this)
{
  if (!(*((unsigned int (**)(CGContext **))*this + 3))(this)) {
    return 0;
  }
  unsigned __int16 v2 = this[1];
  return CGBitmapContextGetBytesPerRow(v2);
}

BOOL esl::QuartzContext::writeToPNG(CGContextRef *this, const char *a2)
{
  if (!(*((unsigned int (**)(CGContextRef *))*this + 3))(this)) {
    return 0;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, a2, 0x600u);
  CFURLRef v5 = CFURLCreateWithFileSystemPath(0, v4, kCFURLPOSIXPathStyle, 0);
  long long v6 = CGImageDestinationCreateWithURL(v5, @"public.png", 1uLL, 0);
  CFRelease(v5);
  CFRelease(v4);
  if (!v6)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to write image to %s\n", a2);
    return 0;
  }
  Image = CGBitmapContextCreateImage(this[1]);
  CGImageDestinationAddImage(v6, Image, 0);
  BOOL v8 = CGImageDestinationFinalize(v6);
  if (!v8) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to write image to %s\n", a2);
  }
  CFRelease(Image);
  CFRelease(v6);
  return v8;
}

uint64_t esl::QuartzContext::write(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 != 1) {
    esl::QuartzContext::write();
  }
  CFDataRef v3 = *(uint64_t (**)(void))(*(void *)a1 + 464);
  return v3();
}

void esl::QuartzContext::flip(esl::QuartzContext *this, float a2)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    CFStringRef v4 = (CGContext *)*((void *)this + 1);
    v5.b = 0.0;
    v5.c = 0.0;
    v5.a = 1.0;
    *(_OWORD *)&v5.d = xmmword_1A28FB030;
    v5.ty = a2;
    CGContextConcatCTM(v4, &v5);
  }
}

uint64_t esl::QuartzContext::flipIfNecessary(esl::QuartzContext *this, float a2)
{
  return 1;
}

uint64_t esl::QuartzContext::fillWithColor(CGContextRef *this, const esl::QuartzColor *a2)
{
  uint64_t result = (*((uint64_t (**)(CGContextRef *))*this + 3))(this);
  if (result)
  {
    uint64_t result = (*((uint64_t (**)(CGContextRef *, const esl::QuartzColor *))*this + 29))(this, a2);
    if (result)
    {
      CGFloat v5 = (double)(*((unsigned int (**)(CGContextRef *))*this + 14))(this);
      v6.size.height = (double)(*((unsigned int (**)(CGContextRef *))*this + 15))(this);
      v6.origin.x = 0.0;
      v6.origin.y = 0.0;
      v6.size.width = v5;
      CGContextFillRect(this[1], v6);
      return 1;
    }
  }
  return result;
}

void esl::QuartzContext::setLineCapStyle(void *a1, CGLineCap a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1)) {
    BOOL v4 = a2 > kCGLineCapSquare;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    CGFloat v5 = (CGContext *)a1[1];
    CGContextSetLineCap(v5, a2);
  }
}

void esl::QuartzContext::setLineJoinStyle(void *a1, CGLineJoin a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1)) {
    BOOL v4 = a2 > kCGLineJoinBevel;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    CGFloat v5 = (CGContext *)a1[1];
    CGContextSetLineJoin(v5, a2);
  }
}

void esl::QuartzContext::strokeEllipseInRect(void *a1, float *a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    BOOL v4 = (CGContext *)a1[1];
    float v5 = a2[1];
    double v6 = *a2;
    double v7 = v5;
    float v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0) {
      float v9 = a2[2] - *a2;
    }
    else {
      float v9 = 0.0;
    }
    double v10 = v9;
    if (v8 >= 0.0) {
      float v11 = v8;
    }
    else {
      float v11 = 0.0;
    }
    double v12 = v11;
    CGContextStrokeEllipseInRect(v4, *(CGRect *)&v6);
  }
}

void esl::QuartzContext::fillEllipseInRect(void *a1, float *a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    BOOL v4 = (CGContext *)a1[1];
    float v5 = a2[1];
    double v6 = *a2;
    double v7 = v5;
    float v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0) {
      float v9 = a2[2] - *a2;
    }
    else {
      float v9 = 0.0;
    }
    double v10 = v9;
    if (v8 >= 0.0) {
      float v11 = v8;
    }
    else {
      float v11 = 0.0;
    }
    double v12 = v11;
    CGContextFillEllipseInRect(v4, *(CGRect *)&v6);
  }
}

void esl::QuartzContext::addEllipseInRect(void *a1, float *a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    BOOL v4 = (CGContext *)a1[1];
    float v5 = a2[1];
    double v6 = *a2;
    double v7 = v5;
    float v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0) {
      float v9 = a2[2] - *a2;
    }
    else {
      float v9 = 0.0;
    }
    double v10 = v9;
    if (v8 >= 0.0) {
      float v11 = v8;
    }
    else {
      float v11 = 0.0;
    }
    double v12 = v11;
    CGContextAddEllipseInRect(v4, *(CGRect *)&v6);
  }
}

void esl::QuartzContext::addArc(esl::QuartzContext *this, float a2, float a3, float a4, float a5, float a6, int a7)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    int v14 = (CGContext *)*((void *)this + 1);
    CGContextAddArc(v14, a2, a3, a4, a5, a6, a7);
  }
}

void esl::QuartzContext::replacePathWithStrokedPath(esl::QuartzContext *this)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    unsigned __int16 v2 = (CGContext *)*((void *)this + 1);
    CGContextReplacePathWithStrokedPath(v2);
  }
}

void esl::QuartzContext::clearRect(void *a1, float *a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    BOOL v4 = (CGContext *)a1[1];
    float v5 = a2[1];
    double v6 = *a2;
    double v7 = v5;
    float v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0) {
      float v9 = a2[2] - *a2;
    }
    else {
      float v9 = 0.0;
    }
    double v10 = v9;
    if (v8 >= 0.0) {
      float v11 = v8;
    }
    else {
      float v11 = 0.0;
    }
    double v12 = v11;
    CGContextClearRect(v4, *(CGRect *)&v6);
  }
}

void esl::QuartzContext::evenOddClip(esl::QuartzContext *this)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    unsigned __int16 v2 = (CGContext *)*((void *)this + 1);
    CGContextEOClip(v2);
  }
}

void esl::QuartzContext::closePath(esl::QuartzContext *this)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    unsigned __int16 v2 = (CGContext *)*((void *)this + 1);
    CGContextClosePath(v2);
  }
}

void esl::QuartzContext::moveTo(esl::QuartzContext *this, float a2, float a3)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    double v6 = (CGContext *)*((void *)this + 1);
    CGContextMoveToPoint(v6, a2, a3);
  }
}

uint64_t esl::QuartzContext::drawLinearGradient(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void *))(*a2 + 48))(a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a4 + 48))(a4);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      if (result)
      {
        std::string __p = &unk_1EF554AE8;
        unint64_t v20 = &unk_1EF5590F8;
        float v11 = (const void *)a2[2];
        if (v11) {
          CFRetain(v11);
        }
        int v21 = v11;
        long long v22 = &unk_1EF554AE8;
        v23[0] = &unk_1EF5590F8;
        double v12 = (const void *)a4[2];
        if (v12) {
          CFRetain(v12);
        }
        v23[1] = v12;
        uint64_t v16 = 0;
        v17[0] = 0;
        uint64_t v15 = 0;
        v17[1] = &v15;
        char v18 = 0;
        uint64_t v15 = (char *)operator new(0x40uLL);
        uint64_t v16 = (uint64_t)v15;
        v17[0] = v15 + 64;
        uint64_t v13 = 0;
        uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>((uint64_t)v17, (uint64_t)&__p, (uint64_t)&v24, (uint64_t)v15);
        do
        {
          v23[v13 - 1] = &unk_1EF554AE8;
          geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v23[v13]);
          v13 -= 4;
        }
        while (v13 != -8);
        int v14 = operator new(8uLL);
        std::string __p = v14;
        *int v14 = 0x3F80000000000000;
        unint64_t v20 = v14 + 1;
        int v21 = v14 + 1;
        (*(void (**)(uint64_t, char **, void **, uint64_t, uint64_t))(*(void *)a1 + 360))(a1, &v15, &__p, a3, a5);
        if (__p)
        {
          unint64_t v20 = __p;
          operator delete(__p);
        }
        std::string __p = &v15;
        std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return 1;
      }
    }
  }
  return result;
}

void sub_1A1D88DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v15);
  _Unwind_Resume(a1);
}

BOOL esl::QuartzContext::drawRadialGradient(CGContextRef *a1, void *a2, float *a3, void *a4, float *a5, float a6, float a7)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(void *))(*a2 + 48))(a2)
    || !(*(unsigned int (**)(void *))(*a4 + 48))(a4)
    || !(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    return 0;
  }
  std::string __p = &unk_1EF554AE8;
  uint64_t v45 = (double *)&unk_1EF5590F8;
  int v14 = (char *)a2[2];
  if (v14) {
    CFRetain(v14);
  }
  long long v46 = (double *)v14;
  uint64_t v47 = &unk_1EF554AE8;
  v48[0] = &unk_1EF5590F8;
  uint64_t v15 = (const void *)a4[2];
  if (v15) {
    CFRetain(v15);
  }
  v48[1] = v15;
  int v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = (void **)&v41;
  LOBYTE(colors) = 0;
  uint64_t v41 = (char *)operator new(0x40uLL);
  int v42 = v41;
  uint64_t v43 = v41 + 64;
  uint64_t v16 = 0;
  int v42 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>((uint64_t)&v43, (uint64_t)&__p, (uint64_t)&v49, (uint64_t)v41);
  do
  {
    v48[v16 - 1] = &unk_1EF554AE8;
    geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v48[v16]);
    v16 -= 4;
  }
  while (v16 != -8);
  uint64_t v17 = (float *)operator new(8uLL);
  *(void *)uint64_t v17 = 0x3F80000000000000;
  std::string __p = 0;
  uint64_t v45 = 0;
  long long v46 = 0;
  std::vector<double>::reserve(&__p, 2uLL);
  uint64_t v18 = 0;
  uint64_t v19 = v45;
  do
  {
    double v20 = v17[v18];
    if (v19 >= v46)
    {
      long long v22 = (double *)__p;
      uint64_t v23 = ((char *)v19 - (unsigned char *)__p) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = (char *)v46 - (unsigned char *)__p;
      if (((char *)v46 - (unsigned char *)__p) >> 2 > v24) {
        unint64_t v24 = v25 >> 2;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        float v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, v26);
        long long v22 = (double *)__p;
        uint64_t v19 = v45;
      }
      else
      {
        float v27 = 0;
      }
      uint64_t v28 = (double *)&v27[8 * v23];
      *uint64_t v28 = v20;
      int v21 = v28 + 1;
      while (v19 != v22)
      {
        uint64_t v29 = *((void *)v19-- - 1);
        *((void *)v28-- - 1) = v29;
      }
      std::string __p = v28;
      uint64_t v45 = v21;
      long long v46 = (double *)&v27[8 * v26];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *uint64_t v19 = v20;
      int v21 = v19 + 1;
    }
    uint64_t v45 = v21;
    ++v18;
    uint64_t v19 = v21;
  }
  while (v18 != 2);
  uint64_t v39 = (void **)&unk_1EF559158;
  CFArrayRef colors = CFArrayCreateMutable(0, (v42 - v41) >> 5, 0);
  if (colors)
  {
    float v30 = v41;
    long long v31 = v42;
    if (v41 != v42)
    {
      do
      {
        char v32 = colors;
        esl::QuartzColor::color(v30, &v37);
        CFArrayAppendValue(v32, value);
        geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v37);
        v30 += 32;
      }
      while (v30 != v31);
      float v30 = v41;
    }
    esl::QuartzColor::cgColorSpace((CGColorRef *)v30, &v37);
    if (value)
    {
      char v33 = CGGradientCreateWithColors((CGColorSpaceRef)value, colors, (const CGFloat *)__p);
      v36[0] = &unk_1EF558FD8;
      v36[1] = v33;
      BOOL v34 = v33 != 0;
      if (v33)
      {
        v50.x = *a3;
        v50.y = a3[1];
        v51.x = *a5;
        v51.y = a5[1];
        CGContextDrawRadialGradient(a1[1], v33, v50, a6, v51, a7, 3u);
      }
      geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v36);
    }
    else
    {
      BOOL v34 = 0;
    }
    geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v37);
  }
  else
  {
    BOOL v34 = 0;
  }
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v39);
  if (__p)
  {
    uint64_t v45 = (double *)__p;
    operator delete(__p);
  }
  operator delete(v17);
  std::string __p = &v41;
  std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v34;
}

void sub_1A1D8934C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *__p,char *a23)
{
  geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a10);
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a13);
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&a16);
  if (__p)
  {
    a23 = __p;
    operator delete(__p);
  }
  operator delete(v23);
  std::string __p = &a19;
  std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void esl::QuartzContext::imageInRect(uint64_t a1@<X0>, float *a2@<X1>, void *a3@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  (*(void (**)(CGImageRef *__return_ptr, uint64_t))(*(void *)a1 + 392))(&image, a1);
  CGImageRef v7 = image;
  double v6 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  if (!v7)
  {
    *a3 = 0;
    a3[1] = 0;
    if (!v6) {
      return;
    }
    goto LABEL_16;
  }
  float v8 = a2[1];
  double v10 = v8;
  float v11 = a2[3] - v8;
  if ((float)(a2[2] - *a2) >= 0.0) {
    float v12 = a2[2] - *a2;
  }
  else {
    float v12 = 0.0;
  }
  double v13 = v12;
  if (v11 >= 0.0) {
    float v14 = v11;
  }
  else {
    float v14 = 0.0;
  }
  double v15 = v14;
  double v9 = *a2;
  CGImageRef image = CGImageCreateWithImageInRect(*((CGImageRef *)v7 + 2), *(CGRect *)(&v10 - 1));
  std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>(&image, a3);
  CGImageRelease(image);
  if (v6) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1A1D89584(_Unwind_Exception *exception_object)
{
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *esl::QuartzContext::byteData(CGContext **this)
{
  if (!(*((unsigned int (**)(CGContext **))*this + 3))(this)) {
    return 0;
  }
  uint64_t v2 = this[1];
  return CGBitmapContextGetData(v2);
}

size_t esl::QuartzContext::byteLength(CGContextRef *this)
{
  if (!(*((unsigned int (**)(CGContextRef *))*this + 3))(this)) {
    return 0;
  }
  size_t BytesPerRow = CGBitmapContextGetBytesPerRow(this[1]);
  return CGBitmapContextGetHeight(this[1]) * BytesPerRow;
}

uint64_t esl::QuartzContext::bitmapData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    *(void *)a2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    *(_DWORD *)(a2 + 8) = (__int16)v5;
    *(_DWORD *)(a2 + 12) = v5 >> 16;
    *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  }
  return v4;
}

void esl::QuartzContext::pngData()
{
}

uint64_t esl::QuartzContext::dimensions(esl::QuartzContext *this)
{
  if (!(*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this)) {
    return 0;
  }
  unsigned __int16 v2 = (*(uint64_t (**)(esl::QuartzContext *))(*(void *)this + 112))(this);
  return v2 | ((*(unsigned __int16 (**)(esl::QuartzContext *))(*(void *)this + 120))(this) << 16);
}

void esl::QuartzContext::beginTransparencyLayer(CGContextRef *this)
{
}

void esl::QuartzContext::endTransparencyLayer(CGContextRef *this)
{
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      float v8 = (void *)(a4 + v7);
      *float v8 = &unk_1EF554AE8;
      v8[1] = &unk_1EF5590F8;
      uint64_t v9 = *(void *)(a2 + v7 + 16);
      if (v9) {
        CFRetain(*(CFTypeRef *)(a2 + v7 + 16));
      }
      v8[2] = v9;
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1A1D89950(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>((uint64_t)v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::__throw_length_error[abi:ne180100]()
{
}

void geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void esl::QuartzContext::isValid()
{
}

void esl::QuartzContext::write()
{
  __assert_rtn("write", "context.cpp", 2046, "(ImageFormat::PNG == format) && \"Only PNG is supported for writing thus far\"");
}

void esl::QuartzContext::setAlpha()
{
  __assert_rtn("setAlpha", "context.cpp", 2275, "(0.0f <= alpha && 1.0f >= alpha) && \"Alpha values are expected to be 0.0 <= alpha <= 1.0\"");
}

void esl::QuartzContext::setShadowWithColor()
{
  __assert_rtn("setShadowWithColor", "context.cpp", 2423, "(0 <= radius) && \"Can not set shadow with negative blur radius\"");
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<esl::QuartzColor>,esl::QuartzColor const*,esl::QuartzColor const*,esl::QuartzColor*>(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 32;
  uint64_t v4 = (uint64_t (***)(void))(a1 - 32);
  int v5 = (uint64_t (***)(void))(a1 - 32);
  do
  {
    double v6 = *v5;
    v5 -= 4;
    uint64_t result = (*v6)(v4);
    v3 -= 32;
    BOOL v8 = v4 == a2;
    uint64_t v4 = v5;
  }
  while (!v8);
  return result;
}

double esl::AffineTransformMake@<D0>(float a1@<S0>, float a2@<S1>, float a3@<S2>, float a4@<S3>, float a5@<S4>, float a6@<S5>, uint64_t a7@<X8>)
{
  *(void *)a7 = &unk_1EF554DC8;
  *(double *)(a7 + 8) = a1;
  *(double *)(a7 + 16) = a2;
  *(double *)(a7 + 24) = a3;
  *(double *)(a7 + 32) = a4;
  double result = a6;
  *(double *)(a7 + 4CGContextBeginTransparencyLayer(this[1], 0) = a5;
  *(double *)(a7 + 48) = a6;
  return result;
}

__n128 esl::QuartzAffineTransform::QuartzAffineTransform(esl::QuartzAffineTransform *this)
{
  *(void *)this = &unk_1EF554DC8;
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DAB8];
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)((char *)this + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)((char *)this + 24) = v2;
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

CGFloat esl::QuartzAffineTransform::scale(esl::QuartzAffineTransform *this, float a2, float a3)
{
  long long v4 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v7.c = v4;
  *(_OWORD *)&v7.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformScale(&v8, &v7, a2, a3);
  long long v5 = *(_OWORD *)&v8.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v8.a;
  *(_OWORD *)((char *)this + 24) = v5;
  CGFloat result = v8.tx;
  *(_OWORD *)((char *)this + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)&v8.tx;
  return result;
}

CGFloat esl::QuartzAffineTransform::translate(esl::QuartzAffineTransform *this, float a2, float a3)
{
  long long v4 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v7.c = v4;
  *(_OWORD *)&v7.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformTranslate(&v8, &v7, a2, a3);
  long long v5 = *(_OWORD *)&v8.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v8.a;
  *(_OWORD *)((char *)this + 24) = v5;
  CGFloat result = v8.tx;
  *(_OWORD *)((char *)this + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)&v8.tx;
  return result;
}

CGFloat esl::QuartzAffineTransform::rotate(esl::QuartzAffineTransform *this, float a2)
{
  long long v3 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v6.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v6.c = v3;
  *(_OWORD *)&v6.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformRotate(&v7, &v6, a2);
  long long v4 = *(_OWORD *)&v7.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v7.a;
  *(_OWORD *)((char *)this + 24) = v4;
  CGFloat result = v7.tx;
  *(_OWORD *)((char *)this + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)&v7.tx;
  return result;
}

double esl::AffineTransformConcat@<D0>(esl *this@<X0>, const esl::QuartzAffineTransform *a2@<X1>, const esl::QuartzAffineTransform *a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = (*(double (**)(esl *, const esl::QuartzAffineTransform *, const esl::QuartzAffineTransform *))(*(void *)this + 80))(this, a2, a3);
  double v8 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 80))(a2);
  double v9 = (*(double (**)(esl *))(*(void *)this + 88))(this);
  float v10 = v9 * (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 96))(a2) + v7 * v8;
  double v11 = (*(double (**)(esl *))(*(void *)this + 80))(this);
  double v12 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 88))(a2);
  double v13 = (*(double (**)(esl *))(*(void *)this + 88))(this);
  float v14 = v13 * (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 104))(a2) + v11 * v12;
  double v15 = (*(double (**)(esl *))(*(void *)this + 96))(this);
  double v16 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 80))(a2);
  double v17 = (*(double (**)(esl *))(*(void *)this + 104))(this);
  float v18 = v17 * (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 96))(a2) + v15 * v16;
  double v19 = (*(double (**)(esl *))(*(void *)this + 96))(this);
  double v20 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 88))(a2);
  double v21 = (*(double (**)(esl *))(*(void *)this + 104))(this);
  float v22 = v21 * (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 104))(a2) + v19 * v20;
  double v23 = (*(double (**)(esl *))(*(void *)this + 112))(this);
  double v24 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 80))(a2);
  double v25 = (*(double (**)(esl *))(*(void *)this + 120))(this);
  double v26 = v25 * (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 96))(a2) + v23 * v24;
  float v27 = v26 + (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 112))(a2);
  double v28 = (*(double (**)(esl *))(*(void *)this + 112))(this);
  double v29 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 88))(a2);
  double v30 = (*(double (**)(esl *))(*(void *)this + 120))(this);
  double v31 = v30 * (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 104))(a2) + v28 * v29;
  double v32 = (*(double (**)(const esl::QuartzAffineTransform *))(*(void *)a2 + 120))(a2);
  *(void *)a4 = &unk_1EF554DC8;
  *(float *)&double v32 = v31 + v32;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v14;
  *(double *)(a4 + 24) = v18;
  *(double *)(a4 + 32) = v22;
  double result = *(float *)&v32;
  *(double *)(a4 + 4CGContextBeginTransparencyLayer(this[1], 0) = v27;
  *(double *)(a4 + 48) = result;
  return result;
}

uint64_t esl::QuartzAffineTransform::invert(esl::QuartzAffineTransform *this)
{
  long long v2 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v5.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v5.c = v2;
  *(_OWORD *)&v5.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformInvert(&v6, &v5);
  long long v3 = *(_OWORD *)&v6.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v6.a;
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)&v6.tx;
  return 1;
}

BOOL esl::QuartzAffineTransform::equalToTransform(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 40);
  long long v5 = *(_OWORD *)(v3 + 8);
  long long v6 = *(_OWORD *)(v3 + 40);
  *(_OWORD *)&v8.c = *(_OWORD *)(v3 + 24);
  *(_OWORD *)&v8.tx = v6;
  *(_OWORD *)&v8.a = v5;
  return CGAffineTransformEqualToTransform(&t1, &v8);
}

BOOL esl::QuartzAffineTransform::isIdentity(esl::QuartzAffineTransform *this)
{
  long long v1 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&t1.c = v1;
  *(_OWORD *)&t1.tx = *(_OWORD *)((char *)this + 40);
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v4.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v4.c = v2;
  *(_OWORD *)&v4.tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  return CGAffineTransformEqualToTransform(&t1, &v4);
}

float32x2_t esl::QuartzAffineTransform::applyToPoint(uint64_t a1, float *a2)
{
  return vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(a1 + 40), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 24), a2[1]), *(float64x2_t *)(a1 + 8), *a2)));
}

float esl::QuartzAffineTransform::applyToRect(uint64_t a1, float *a2)
{
  float v2 = a2[1];
  float v3 = 0.0;
  if ((float)(a2[2] - *a2) >= 0.0) {
    float v4 = a2[2] - *a2;
  }
  else {
    float v4 = 0.0;
  }
  if ((float)(a2[3] - v2) >= 0.0) {
    float v3 = a2[3] - v2;
  }
  v8.origin.x = *a2;
  v8.origin.y = v2;
  v8.size.width = v4;
  v8.size.height = v3;
  long long v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v7.c = v5;
  *(_OWORD *)&v7.tx = *(_OWORD *)(a1 + 40);
  return COERCE_DOUBLE(CGRectApplyAffineTransform(v8, &v7));
}

double esl::QuartzAffineTransform::a(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 1);
}

double esl::QuartzAffineTransform::b(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 2);
}

double esl::QuartzAffineTransform::c(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 3);
}

double esl::QuartzAffineTransform::d(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 4);
}

double esl::QuartzAffineTransform::tx(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 5);
}

double esl::QuartzAffineTransform::ty(esl::QuartzAffineTransform *this)
{
  return *((double *)this + 6);
}

void esl::QuartzAffineTransform::~QuartzAffineTransform(esl::QuartzAffineTransform *this)
{
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void esl::FontKey::parseStylisticAlternates(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = 0;
  uint64_t v33 = a2;
  unint64_t v34 = a3;
  long long v5 = (void **)(a1 + 12);
  uint64_t v28 = (uint64_t)(a1 + 14);
  do
  {
    uint64_t v6 = std::string_view::find_first_of[abi:ne180100](&v33, "+-", v4 + 1);
    if (v34 < v4) {
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    }
    uint64_t v7 = v6;
    unint64_t v8 = v6 - v4;
    if (v6 == -1) {
      unint64_t v8 = -1;
    }
    if (v34 - v4 >= v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v34 - v4;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v33;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      size_t v31 = v9;
      unint64_t v32 = v13 | 0x8000000000000000;
      __dst = p_dst;
LABEL_15:
      memmove(p_dst, (const void *)(v10 + v4), v9);
      goto LABEL_16;
    }
    HIBYTE(v32) = v9;
    p_dst = (void **)&__dst;
    if (v9) {
      goto LABEL_15;
    }
LABEL_16:
    *((unsigned char *)p_dst + v9) = 0;
    if (SHIBYTE(v32) < 0)
    {
      if (!v31) {
        goto LABEL_40;
      }
      __endptr = 0;
      float v14 = (const char *)__dst;
    }
    else
    {
      if (!HIBYTE(v32)) {
        goto LABEL_41;
      }
      __endptr = 0;
      float v14 = (const char *)&__dst;
    }
    int v15 = strtol(v14, &__endptr, 10);
    if (!*__endptr)
    {
      int v16 = v15;
      float v18 = (char *)a1[13];
      unint64_t v17 = a1[14];
      if ((unint64_t)v18 >= v17)
      {
        double v20 = (char *)*v5;
        uint64_t v21 = (v18 - (unsigned char *)*v5) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          double v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v28, v24);
          double v20 = (char *)a1[12];
          float v18 = (char *)a1[13];
        }
        else
        {
          double v25 = 0;
        }
        double v26 = &v25[4 * v21];
        *(_DWORD *)double v26 = v16;
        double v19 = v26 + 4;
        while (v18 != v20)
        {
          int v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        a1[12] = v26;
        a1[13] = v19;
        a1[14] = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)float v18 = v15;
        double v19 = v18 + 4;
      }
      a1[13] = v19;
    }
    if (SHIBYTE(v32) < 0) {
LABEL_40:
    }
      operator delete(__dst);
LABEL_41:
    unint64_t v4 = v7;
  }
  while (v7 != -1);
}

void sub_1A1D8A708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A62391A0](a1 + 120);
  return a1;
}

uint64_t std::string_view::find_first_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  size_t v7 = strlen(__s);
  if (v6 <= a3 || v7 == 0) {
    return -1;
  }
  uint64_t v10 = (unsigned __int8 *)(v5 + a3);
  double v11 = (unsigned __int8 *)(v5 + v6);
LABEL_7:
  size_t v12 = v7;
  uint64_t v13 = __s;
  while (*v10 != *v13)
  {
    ++v13;
    if (!--v12)
    {
      if (++v10 != v11) {
        goto LABEL_7;
      }
      uint64_t v10 = (unsigned __int8 *)(v5 + v6);
      break;
    }
  }
  if (v10 == v11) {
    return -1;
  }
  else {
    return (uint64_t)&v10[-v5];
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t esl::QuartzColor::colorSpace@<X0>(CGColorRef *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*((uint64_t (**)(CGColorRef *))*this + 6))(this);
  if ((result & 1) == 0)
  {
    *a2 = 0;
    return result;
  }
  CGColorSpaceRef ColorSpace = CGColorGetColorSpace(this[2]);
  size_t v12 = &unk_1EF559018;
  if (ColorSpace)
  {
    unint64_t v6 = ColorSpace;
    CFRetain(ColorSpace);
    uint64_t v13 = v6;
    CFStringRef Name = CGColorSpaceGetName(v6);
    CFStringRef v8 = Name;
    uint64_t v10 = &unk_1EF5591D8;
    if (Name)
    {
      CFRetain(Name);
      CFTypeRef cf1 = v8;
      if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E4F1DC98]))
      {
        __int16 v9 = 513;
LABEL_18:
        *(_WORD *)a2 = v9;
        goto LABEL_19;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1DC88]))
      {
        __int16 v9 = 1;
        goto LABEL_18;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1DC10]))
      {
        __int16 v9 = 257;
        goto LABEL_18;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1DB90]))
      {
        __int16 v9 = 769;
        goto LABEL_18;
      }
      if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1DB88]))
      {
        __int16 v9 = 1025;
        goto LABEL_18;
      }
    }
    else
    {
      CFTypeRef cf1 = 0;
    }
    *a2 = 0;
LABEL_19:
    geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v10);
    return (uint64_t)geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v12);
  }
  uint64_t v13 = 0;
  *a2 = 0;
  return (uint64_t)geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v12);
}

void sub_1A1D8AADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

float esl::QuartzColor::alpha(CGColorRef *this)
{
  return CGColorGetAlpha(this[2]);
}

const CGFloat *esl::QuartzColor::sRGBComponents@<X0>(CGColorRef *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CGColorGetComponents(this[2]);
  if (result)
  {
    uint64_t v5 = (float64x2_t *)result;
    float v6 = 1.0;
    if ((*((uint64_t (**)(CGColorRef *))*this + 5))(this) == 4) {
      float v6 = v5[1].f64[1];
    }
    (*((void (**)(unsigned char *__return_ptr, CGColorRef *))*this + 2))(v43, this);
    int v7 = v43[0];
    *(unsigned char *)a2 = 0;
    if (v7)
    {
      switch(*geo::optional<esl::FontWeight>::value(v43))
      {
        case 0:
          float v8 = v5[1].f64[0];
          float32x2_t v44 = vcvt_f32_f64(*v5);
          float v45 = v8;
          float v46 = v6;
          float v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          int v11 = v10;
          int v13 = v12;
          int v15 = v14;
          if (!*(unsigned char *)a2) {
            goto LABEL_17;
          }
          geo::optional<int>::value((unsigned char *)a2);
          goto LABEL_18;
        case 1:
          float v16 = v5[1].f64[0];
          float32x2_t v40 = vcvt_f32_f64(*v5);
          float v41 = v16;
          float v42 = v6;
          v44.i32[0] = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseDisplayRGBGammaCorrection, (float *)&v40);
          v44.i32[1] = v17;
          float v45 = v18;
          float v46 = v19;
          float v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          int v11 = v20;
          int v13 = v21;
          int v15 = v22;
          if (*(unsigned char *)a2) {
            goto LABEL_16;
          }
          goto LABEL_17;
        case 2:
          float64x2_t v39 = *v5;
          double v23 = v5[1].f64[0];
          if (*(unsigned char *)a2) {
            geo::optional<int>::value((unsigned char *)a2);
          }
          else {
            *(unsigned char *)a2 = 1;
          }
          *(float32x2_t *)(a2 + 4) = vcvt_f32_f64(v39);
          float v38 = v23;
          *(float *)(a2 + 12) = v38;
          *(float *)(a2 + 16) = v6;
          return (const CGFloat *)geo::optional<geo::ColorSpace>::~optional(v43);
        case 3:
          float v24 = v5[1].f64[0];
          float32x2_t v40 = vcvt_f32_f64(*v5);
          float v41 = v24;
          float v42 = v6;
          v44.i32[0] = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseDisplayP3GammaCorrection, (float *)&v40);
          v44.i32[1] = v25;
          float v45 = v26;
          float v46 = v27;
          float v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          int v11 = v28;
          int v13 = v29;
          int v15 = v30;
          if (*(unsigned char *)a2) {
            goto LABEL_16;
          }
          goto LABEL_17;
        case 4:
          float v31 = v5[1].f64[0];
          float32x2_t v40 = vcvt_f32_f64(*v5);
          float v41 = v31;
          float v42 = v6;
          v44.i32[0] = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseDCI_P3GammaCorrection, (float *)&v40);
          v44.i32[1] = v32;
          float v45 = v33;
          float v46 = v34;
          float v9 = geo::colorTransform<geo::GammaCorrection>(geo::sRGBGammaCorrection, (float *)&v44);
          int v11 = v35;
          int v13 = v36;
          int v15 = v37;
          if (*(unsigned char *)a2) {
LABEL_16:
          }
            geo::optional<int>::value((unsigned char *)a2);
          else {
LABEL_17:
          }
            *(unsigned char *)a2 = 1;
LABEL_18:
          *(float *)(a2 + 4) = v9;
          *(_DWORD *)(a2 + 8) = v11;
          *(_DWORD *)(a2 + 12) = v13;
          *(_DWORD *)(a2 + 16) = v15;
          break;
        default:
          return (const CGFloat *)geo::optional<geo::ColorSpace>::~optional(v43);
      }
    }
    return (const CGFloat *)geo::optional<geo::ColorSpace>::~optional(v43);
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void sub_1A1D8ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16)
{
  geo::optional<geo::Color<float,4,(geo::ColorSpace)2>>::~optional(v16);
  geo::optional<geo::ColorSpace>::~optional(&a16);
  _Unwind_Resume(a1);
}

size_t esl::QuartzColor::numberOfComponents(CGColorRef *this)
{
  size_t NumberOfComponents = CGColorGetNumberOfComponents(this[2]);
  if (NumberOfComponents) {
    return NumberOfComponents - 1;
  }
  else {
    return 0;
  }
}

BOOL esl::QuartzColor::operator!=(uint64_t a1, uint64_t a2)
{
  return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) == 0;
}

unsigned char *geo::optional<geo::ColorSpace>::~optional(unsigned char *a1)
{
  if (*a1)
  {
    geo::optional<esl::FontWeight>::value(a1);
    *a1 = 0;
  }
  return a1;
}

void geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(a1);
  JUMPOUT(0x1A6239270);
}

void *geo::_retain_ptr<__CFString const*,geo::_retain_cf<__CFString const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF5591D8;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unsigned char *geo::optional<geo::Color<float,4,(geo::ColorSpace)2>>::~optional(unsigned char *a1)
{
  if (*a1)
  {
    geo::optional<int>::value(a1);
    *a1 = 0;
  }
  return a1;
}

float geo::colorTransform<geo::GammaCorrection>(float *a1, float *a2)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = a1[3];
  if (*a2 >= v6)
  {
    float v8 = *a1;
    float v9 = *a1 + 1.0;
    float v7 = -(float)(v8 - (float)(v9 * powf(v3, 1.0 / a1[1])));
  }
  else
  {
    float v7 = v3 * a1[2];
  }
  if (v4 >= v6) {
    powf(v4, 1.0 / a1[1]);
  }
  if (v5 >= v6) {
    powf(v5, 1.0 / a1[1]);
  }
  return v7;
}

uint64_t esl::QuartzPath::addLineToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if (v8)
  {
    if (a2) {
      float v9 = (const CGAffineTransform *)(a2 + 8);
    }
    else {
      float v9 = 0;
    }
    CGPathAddLineToPoint(a1[1], v9, a3, a4);
  }
  return v8;
}

uint64_t esl::QuartzPath::addCurveToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if (v16)
  {
    if (a2) {
      __int32 v17 = (const CGAffineTransform *)(a2 + 8);
    }
    else {
      __int32 v17 = 0;
    }
    CGPathAddCurveToPoint(a1[1], v17, a3, a4, a5, a6, a7, a8);
  }
  return v16;
}

uint64_t esl::QuartzPath::addQuadCurveToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if (v12)
  {
    if (a2) {
      int v13 = (const CGAffineTransform *)(a2 + 8);
    }
    else {
      int v13 = 0;
    }
    CGPathAddQuadCurveToPoint(a1[1], v13, a3, a4, a5, a6);
  }
  return v12;
}

uint64_t esl::QuartzPath::addPath(CGMutablePathRef *a1, uint64_t *a2, uint64_t a3)
{
  if (!(*((unsigned int (**)(CGMutablePathRef *))*a1 + 2))(a1)) {
    return 0;
  }
  if (a3) {
    float v6 = (const CGAffineTransform *)(a3 + 8);
  }
  else {
    float v6 = 0;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    float v9 = *(const CGPath **)(v7 + 8);
    if (v9)
    {
      CGPathAddPath(a1[1], v6, v9);
      uint64_t v10 = 1;
      if (!v8) {
        return v10;
      }
      goto LABEL_13;
    }
  }
  uint64_t v10 = 0;
  if (v8) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v10;
}

void sub_1A1D8B39C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t esl::QuartzPath::addRect(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if (v12)
  {
    if (a2) {
      int v13 = (const CGAffineTransform *)(a2 + 8);
    }
    else {
      int v13 = 0;
    }
    if ((float)(a5 - a3) >= 0.0) {
      float v14 = a5 - a3;
    }
    else {
      float v14 = 0.0;
    }
    if ((float)(a6 - a4) >= 0.0) {
      float v15 = a6 - a4;
    }
    else {
      float v15 = 0.0;
    }
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = v14;
    v17.size.height = v15;
    CGPathAddRect(a1[1], v13, v17);
  }
  return v12;
}

float esl::QuartzPath::currentPoint(esl::QuartzPath *this)
{
  return CGPathGetCurrentPoint((CGPathRef)*((void *)this + 1)).x;
}

float esl::QuartzPath::boundingBox(esl::QuartzPath *this)
{
  return COERCE_DOUBLE(CGPathGetBoundingBox((CGPathRef)*((void *)this + 1)));
}

void std::__shared_ptr_emplace<esl::QuartzPath>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzPath>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void Flyover::GetDataIDs(Flyover *this)
{
  {
    uint64_t v1 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>();
    uint64_t v2 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>();
    uint64_t v3 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>();
    uint64_t v4 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>();
    uint64_t v5 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>();
    uint64_t v6 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>();
    uint64_t v7 = gdc::typeIndex<Flyover::AtmosphereTexture>();
    uint64_t v8 = gdc::typeIndex<Flyover::DiffuseTexture>();
    uint64_t v9 = gdc::typeIndex<Flyover::NightTexture>();
    Flyover::GetDataIDs(void)::kDataIDs = 0u;
    unk_1E957E6E0 = 0u;
    dword_1E957E6F0 = 1065353216;
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v1, v1);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v2, v2);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v3, v3);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v4, v4);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v5, v5);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v6, v6);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v7, v7);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v8, v8);
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&Flyover::GetDataIDs(void)::kDataIDs, v9, v9);
    __cxa_atexit((void (*)(void *))std::unordered_set<unsigned long>::~unordered_set[abi:nn180100], &Flyover::GetDataIDs(void)::kDataIDs, &dword_1A1780000);
  }
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>()
{
  {
    if (v2)
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[37];
}

os_log_t __GEOGetGeoCSSStyleSheetLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoCSS", "StyleSheet");
  GEOGetGeoCSSStyleSheetLog_log = (uint64_t)result;
  return result;
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>()
{
  uint64_t v0 = &unk_1E9581000;
  {
    uint64_t v0 = &unk_1E9581000;
    if (v2)
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      uint64_t v0 = (void *)&unk_1E9581000;
    }
  }
  return v0[323];
}

uint64_t GEOGetGeoCSSMaterialSystemLog()
{
  if (qword_1EB34D2F8 != -1) {
    dispatch_once(&qword_1EB34D2F8, &__block_literal_global_5);
  }
  return _MergedGlobals;
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>()
{
  {
    if (v2)
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[29];
}

os_log_t __GEOGetGeoCSSMaterialSystemLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoCSS", "MaterialSystem");
  _MergedGlobals = (uint64_t)result;
  return result;
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>()
{
  {
    if (v2)
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[35];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>()
{
  {
    if (v2)
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[31];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>()
{
  {
    if (v2)
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[33];
}

uint64_t gdc::typeIndex<Flyover::AtmosphereTexture>()
{
  {
    if (v2)
    {
      gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[125];
}

uint64_t gdc::typeIndex<Flyover::DiffuseTexture>()
{
  {
    if (v2)
    {
      gdc::typeIndex<Flyover::DiffuseTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[123];
}

uint64_t gdc::typeIndex<Flyover::NightTexture>()
{
  {
    if (v2)
    {
      gdc::typeIndex<Flyover::NightTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
  }
  return v0[121];
}

uint64_t std::unordered_set<unsigned long>::~unordered_set[abi:nn180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    char v7 = *(void **)(a1 + 32);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0) {
          operator delete(*(void **)(v6 - 32));
        }
        v6 -= 64;
      }
      while (v6 != v5);
      char v7 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v8 = *(void **)a1;
    operator delete(v8);
  }
}

void ***std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void **)*(v3 - 3);
        if (v5)
        {
          uint64_t v6 = (void **)*(v3 - 2);
          char v7 = *(v3 - 3);
          if (v6 != v5)
          {
            do
            {
              uint64_t v8 = (void **)*(v6 - 3);
              if (v8)
              {
                char v9 = (void **)*(v6 - 2);
                uint64_t v10 = *(v6 - 3);
                if (v9 != v8)
                {
                  do
                  {
                    if (*((char *)v9 - 1) < 0) {
                      operator delete(*(v9 - 3));
                    }
                    v9 -= 3;
                  }
                  while (v9 != v8);
                  uint64_t v10 = *(v6 - 3);
                }
                *(v6 - 2) = v8;
                operator delete(v10);
              }
              int v11 = (void **)*(v6 - 6);
              if (v11)
              {
                uint64_t v12 = (void **)*(v6 - 5);
                uint64_t v13 = *(v6 - 6);
                if (v12 != v11)
                {
                  do
                  {
                    if (*((char *)v12 - 9) < 0) {
                      operator delete(*(v12 - 4));
                    }
                    v12 -= 8;
                  }
                  while (v12 != v11);
                  uint64_t v13 = *(v6 - 6);
                }
                *(v6 - 5) = v11;
                operator delete(v13);
              }
              float v14 = v6 - 10;
              if (*((char *)v6 - 57) < 0) {
                operator delete(*v14);
              }
              v6 -= 10;
            }
            while (v14 != v5);
            char v7 = *(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v3 - 6);
        if (*((char *)v3 - 49) < 0) {
          operator delete(*(v3 - 9));
        }
        float v15 = v3 - 12;
        if (*((char *)v3 - 73) < 0) {
          operator delete(*v15);
        }
        v3 -= 12;
      }
      while (v15 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void gdc::DebugTreeNode::~DebugTreeNode(gdc::DebugTreeNode *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v4 = (void *)*((void *)this + 9);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 9);
    }
    *((void *)this + 1CGContextBeginTransparencyLayer(this[1], 0) = v2;
    operator delete(v4);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)this + 6);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_10;
  }
}

void *std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF52DFC8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF52DF80;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
}

void *std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF52E010;
  result[1] = v3;
  return result;
}

void std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[3];
      v2[3] = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  float v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    float v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::remove(void *a1, unint64_t a2)
{
  unint64_t v44 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          float v14 = (void *)(v13 + 104 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v15 = a1[11];
          *float v14 = *(void *)(v15 - 104);
          uint64_t v16 = v14 + 1;
          uint64_t v18 = *(void *)(v15 - 96);
          uint64_t v17 = *(void *)(v15 - 88);
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
          }
          *uint64_t v16 = v18;
          uint64_t v19 = v13 + 104 * v7;
          int v20 = *(std::__shared_weak_count **)(v19 + 16);
          *(void *)(v19 + 16) = v17;
          if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          uint64_t v22 = *(void *)(v15 - 80);
          uint64_t v21 = *(void *)(v15 - 72);
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v13 + 104 * v7 + 24) = v22;
          uint64_t v23 = v13 + 104 * v7;
          float v24 = *(std::__shared_weak_count **)(v23 + 32);
          *(void *)(v23 + 32) = v21;
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          uint64_t v26 = *(void *)(v15 - 64);
          uint64_t v25 = *(void *)(v15 - 56);
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v13 + 104 * v7 + 4CGContextBeginTransparencyLayer(this[1], 0) = v26;
          uint64_t v27 = v13 + 104 * v7;
          int v28 = *(std::__shared_weak_count **)(v27 + 48);
          *(void *)(v27 + 48) = v25;
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          uint64_t v30 = *(void *)(v15 - 48);
          uint64_t v29 = *(void *)(v15 - 40);
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v13 + 104 * v7 + 56) = v30;
          uint64_t v31 = v13 + 104 * v7;
          __int32 v32 = *(std::__shared_weak_count **)(v31 + 64);
          *(void *)(v31 + 64) = v29;
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          uint64_t v34 = *(void *)(v15 - 32);
          uint64_t v33 = *(void *)(v15 - 24);
          if (v33) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v13 + 104 * v7 + 72) = v34;
          uint64_t v35 = v13 + 104 * v7;
          int v36 = *(std::__shared_weak_count **)(v35 + 80);
          *(void *)(v35 + 8CGContextBeginTransparencyLayer(this[1], 0) = v33;
          if (v36)
          {
            if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          uint64_t v37 = v13 + 104 * v7;
          uint64_t v38 = *(void *)(v15 - 16);
          *(unsigned char *)(v37 + 96) = *(unsigned char *)(v15 - 8);
          *(void *)(v37 + 88) = v38;
          md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(a1[11] - 104));
          a1[11] = v39;
          float32x2_t v40 = (void *)a1[28];
          if (v40)
          {
            uint64_t v41 = a1[31];
            while (1)
            {
              v46[0] = &v44;
              v46[1] = 1;
              uint64_t v45 = v41;
              uint64_t v42 = v40[6];
              if (!v42) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v42 + 48))(v42, &v45, v46);
              float32x2_t v40 = (void *)*v40;
              if (!v40) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            md::overlayComponents::VectorOverlay::~VectorOverlay(v43);
          }
        }
      }
    }
  }
}

void md::overlayComponents::VectorOverlay::~VectorOverlay(md::overlayComponents::VectorOverlay *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 104));
      while (v3 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    unint64_t v7 = (void *)a1[5];
    uint64_t v8 = (void *)a1[4];
    if (v7 != v6)
    {
      do
      {
        uint64_t v10 = *--v7;
        uint64_t v9 = v10;
        *unint64_t v7 = 0;
        if (v10) {
          MEMORY[0x1A6239270](v9, 0x1000C40104B78CFLL);
        }
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[4];
    }
    a1[5] = v6;
    operator delete(v8);
  }
  return a1;
}

void _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__1clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource10RasterTileEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, unint64_t **a5)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  int v198 = (int8x8_t *)gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(**(int8x8_t ***)a1, a2);
  uint64_t v10 = (void *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(**(int8x8_t ***)a1);
  unint64_t v11 = a2 >> 39;
  uint64_t v12 = v10[4];
  if (a2 >> 39 < (v10[5] - v12) >> 3
    && (uint64_t v13 = *(void *)(v12 + 8 * v11)) != 0
    && (unint64_t v14 = *(unsigned __int16 *)(v13 + 2 * (HIDWORD(a2) & 0x7F)), v16 = v10[7], v15 = v10[8], v14 < (v15 - v16) >> 3)
    && ((uint64_t v17 = v16 + 8 * v14, v17 != v15) ? (v18 = *(_DWORD *)(v17 + 4) == HIDWORD(a2)) : (v18 = 0), v18))
  {
    unint64_t v19 = v10[11];
    unint64_t v20 = v10[10] + v14;
  }
  else
  {
    unint64_t v19 = v10[11];
    unint64_t v20 = v19;
  }
  BOOL v22 = v20 == v19 || v20 == 0;
  CanDisable = (void *)gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(**(int8x8_t ***)a1);
  uint64_t v24 = CanDisable[4];
  if (v11 >= (CanDisable[5] - v24) >> 3) {
    goto LABEL_28;
  }
  uint64_t v25 = *(void *)(v24 + 8 * v11);
  if (!v25) {
    goto LABEL_28;
  }
  unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v28 = CanDisable[7];
  uint64_t v27 = CanDisable[8];
  if (v26 >= (v27 - v28) >> 3) {
    goto LABEL_28;
  }
  uint64_t v29 = v28 + 8 * v26;
  BOOL v30 = v29 != v27 && *(_DWORD *)(v29 + 4) == HIDWORD(a2);
  if (!v30
    || ((uint64_t v31 = CanDisable[10], v32 = v31 + v26, v31) ? (v33 = v32 == CanDisable[11]) : (v33 = 1),
        v33 || !**(unsigned char **)(a1 + 8)))
  {
LABEL_28:
    if (v22)
    {
      uint64_t v34 = *a5;
      uint64_t v190 = a4;
      int v191 = a5[1];
      if (*a5 != v191)
      {
        while (1)
        {
          int v193 = v34;
          uint64_t v35 = (int8x8_t *)*v34;
          gdc::components::RegistryBridgeMap<gdc::Entity>::entities(buf, v198, *v34);
          int v36 = *(uint64_t **)&buf[8];
          std::string __p = *(void **)buf;
          if (*(void *)buf != *(void *)&buf[8]) {
            break;
          }
LABEL_86:
          if (__p) {
            operator delete(__p);
          }
          uint64_t v34 = v193 + 1;
          if (v193 + 1 == v191) {
            goto LABEL_191;
          }
        }
        uint64_t v37 = *(uint64_t **)buf;
        while (1)
        {
          uint64_t v38 = *v37;
          uint64_t v39 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v35);
          uint64_t v199 = v38;
          float32x2_t v40 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v39 + 4, (uint64_t)&v199);
          if (v41)
          {
            float v46 = (unsigned char *)v39[11];
            unint64_t v45 = v39[12];
            if ((unint64_t)v46 >= v45)
            {
              long long v48 = (char *)v39[10];
              uint64_t v49 = v46 - v48;
              uint64_t v50 = v46 - v48 + 1;
              if (v50 < 0) {
                goto LABEL_254;
              }
              unint64_t v51 = v45 - (void)v48;
              if (2 * v51 > v50) {
                uint64_t v50 = 2 * v51;
              }
              if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v52 = v50;
              }
              if (v52) {
                long long v53 = (char *)operator new(v52);
              }
              else {
                long long v53 = 0;
              }
              long long v54 = &v53[v49];
              uint64_t v47 = (uint64_t)&v53[v49 + 1];
              float v55 = (char *)(v48 - v46);
              if (v48 == v46) {
                float v55 = 0;
              }
              v39[10] = &v55[(void)v54];
              v39[11] = v47;
              v39[12] = &v53[v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              uint64_t v47 = (uint64_t)(v46 + 1);
            }
            v39[11] = v47;
            uint64_t v42 = v39[31];
          }
          else
          {
            uint64_t v42 = v39[31];
            if (v39[10] + (((uint64_t)v40 - v39[7]) >> 3) != v39[11])
            {
              for (int64_t i = (void *)v39[16]; i; int64_t i = (void *)*i)
              {
                int v201 = &v199;
                uint64_t v202 = 1;
                uint64_t v200 = v42;
                uint64_t v44 = i[6];
                if (!v44) {
                  goto LABEL_252;
                }
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v44 + 48))(v44, &v200, &v201);
              }
              goto LABEL_60;
            }
          }
          for (uint64_t j = (void *)v39[22]; j; uint64_t j = (void *)*j)
          {
            int v201 = &v199;
            uint64_t v202 = 1;
            uint64_t v200 = v42;
            uint64_t v57 = j[6];
            if (!v57) {
              goto LABEL_252;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v57 + 48))(v57, &v200, &v201);
          }
LABEL_60:
          uint64_t v58 = *v37;
          int v59 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v35);
          uint64_t v199 = v58;
          float v60 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v59 + 4, (uint64_t)&v199);
          if (v61)
          {
            uint64_t v66 = (unsigned char *)v59[11];
            unint64_t v65 = v59[12];
            if ((unint64_t)v66 >= v65)
            {
              char v68 = (char *)v59[10];
              uint64_t v69 = v66 - v68;
              uint64_t v70 = v66 - v68 + 1;
              if (v70 < 0) {
LABEL_254:
              }
                abort();
              unint64_t v71 = v65 - (void)v68;
              if (2 * v71 > v70) {
                uint64_t v70 = 2 * v71;
              }
              if (v71 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v72 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v72 = v70;
              }
              if (v72) {
                uint64_t v73 = (char *)operator new(v72);
              }
              else {
                uint64_t v73 = 0;
              }
              uint64_t v74 = &v73[v69];
              uint64_t v67 = (uint64_t)&v73[v69 + 1];
              unint64_t v75 = (char *)(v68 - v66);
              if (v68 == v66) {
                unint64_t v75 = 0;
              }
              v59[10] = &v75[(void)v74];
              v59[11] = v67;
              v59[12] = &v73[v72];
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t v67 = (uint64_t)(v66 + 1);
            }
            v59[11] = v67;
            uint64_t v62 = v59[31];
LABEL_82:
            for (uint64_t k = (void *)v59[22]; k; uint64_t k = (void *)*k)
            {
              int v201 = &v199;
              uint64_t v202 = 1;
              uint64_t v200 = v62;
              uint64_t v77 = k[6];
              if (!v77) {
                goto LABEL_252;
              }
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v77 + 48))(v77, &v200, &v201);
            }
            goto LABEL_34;
          }
          uint64_t v62 = v59[31];
          if (v59[10] + (((uint64_t)v60 - v59[7]) >> 3) == v59[11]) {
            goto LABEL_82;
          }
          for (uint64_t m = (void *)v59[16]; m; uint64_t m = (void *)*m)
          {
            int v201 = &v199;
            uint64_t v202 = 1;
            uint64_t v200 = v62;
            uint64_t v64 = m[6];
            if (!v64) {
              goto LABEL_252;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v64 + 48))(v64, &v200, &v201);
          }
LABEL_34:
          if (++v37 == v36) {
            goto LABEL_86;
          }
        }
      }
LABEL_191:
      uint64_t v146 = *(void *)(v190 + 16);
      if (v146)
      {
        while (1)
        {
          int v195 = (uint64_t *)v146;
          int v147 = *(int8x8_t **)(v146 + 16);
          gdc::components::RegistryBridgeMap<gdc::Entity>::entities(buf, v198, (unint64_t)v147);
          int v148 = *(uint64_t **)&buf[8];
          __pa = *(void **)buf;
          if (*(void *)buf != *(void *)&buf[8]) {
            break;
          }
LABEL_248:
          if (__pa) {
            operator delete(__pa);
          }
          uint64_t v146 = *v195;
          if (!*v195) {
            return;
          }
        }
        int v149 = *(uint64_t **)buf;
        while (1)
        {
          uint64_t v150 = *v149;
          int v151 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v147);
          uint64_t v199 = v150;
          int v152 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v151 + 4, (uint64_t)&v199);
          if (v153)
          {
            int v158 = (unsigned char *)v151[11];
            unint64_t v157 = v151[12];
            if ((unint64_t)v158 >= v157)
            {
              int v160 = (char *)v151[10];
              uint64_t v161 = v158 - v160;
              uint64_t v162 = v158 - v160 + 1;
              if (v162 < 0) {
                goto LABEL_255;
              }
              unint64_t v163 = v157 - (void)v160;
              if (2 * v163 > v162) {
                uint64_t v162 = 2 * v163;
              }
              if (v163 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v164 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v164 = v162;
              }
              if (v164) {
                int v165 = (char *)operator new(v164);
              }
              else {
                int v165 = 0;
              }
              int v166 = &v165[v161];
              uint64_t v159 = (uint64_t)&v165[v161 + 1];
              int v167 = (char *)(v160 - v158);
              if (v160 == v158) {
                int v167 = 0;
              }
              v151[10] = &v167[(void)v166];
              v151[11] = v159;
              v151[12] = &v165[v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              uint64_t v159 = (uint64_t)(v158 + 1);
            }
            v151[11] = v159;
            uint64_t v154 = v151[31];
          }
          else
          {
            uint64_t v154 = v151[31];
            if (v151[10] + (((uint64_t)v152 - v151[7]) >> 3) != v151[11])
            {
              int v155 = (void *)v151[16];
              if (v155)
              {
                while (1)
                {
                  int v201 = &v199;
                  uint64_t v202 = 1;
                  uint64_t v200 = v154;
                  uint64_t v156 = v155[6];
                  if (!v156) {
                    goto LABEL_252;
                  }
                  (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v156 + 48))(v156, &v200, &v201);
                  int v155 = (void *)*v155;
                  if (!v155) {
                    goto LABEL_222;
                  }
                }
              }
              goto LABEL_222;
            }
          }
          int v168 = (void *)v151[22];
          if (v168)
          {
            while (1)
            {
              int v201 = &v199;
              uint64_t v202 = 1;
              uint64_t v200 = v154;
              uint64_t v169 = v168[6];
              if (!v169) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v169 + 48))(v169, &v200, &v201);
              int v168 = (void *)*v168;
              if (!v168) {
                goto LABEL_222;
              }
            }
LABEL_252:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
LABEL_222:
          uint64_t v170 = *v149;
          int v171 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v147);
          uint64_t v199 = v170;
          int v172 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v171 + 4, (uint64_t)&v199);
          if (v173)
          {
            int v178 = (unsigned char *)v171[11];
            unint64_t v177 = v171[12];
            if ((unint64_t)v178 >= v177)
            {
              int v180 = (char *)v171[10];
              uint64_t v181 = v178 - v180;
              uint64_t v182 = v178 - v180 + 1;
              if (v182 < 0) {
LABEL_255:
              }
                abort();
              unint64_t v183 = v177 - (void)v180;
              if (2 * v183 > v182) {
                uint64_t v182 = 2 * v183;
              }
              if (v183 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v184 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v184 = v182;
              }
              if (v184) {
                int v185 = (char *)operator new(v184);
              }
              else {
                int v185 = 0;
              }
              int v186 = &v185[v181];
              uint64_t v179 = (uint64_t)&v185[v181 + 1];
              int v187 = (char *)(v180 - v178);
              if (v180 == v178) {
                int v187 = 0;
              }
              v171[10] = &v187[(void)v186];
              v171[11] = v179;
              v171[12] = &v185[v184];
              if (v180) {
                operator delete(v180);
              }
            }
            else
            {
              uint64_t v179 = (uint64_t)(v178 + 1);
            }
            v171[11] = v179;
            uint64_t v174 = v171[31];
          }
          else
          {
            uint64_t v174 = v171[31];
            if (v171[10] + (((uint64_t)v172 - v171[7]) >> 3) != v171[11])
            {
              int v175 = (void *)v171[16];
              if (v175)
              {
                while (1)
                {
                  int v201 = &v199;
                  uint64_t v202 = 1;
                  uint64_t v200 = v174;
                  uint64_t v176 = v175[6];
                  if (!v176) {
                    goto LABEL_252;
                  }
                  (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v176 + 48))(v176, &v200, &v201);
                  int v175 = (void *)*v175;
                  if (!v175) {
                    goto LABEL_196;
                  }
                }
              }
              goto LABEL_196;
            }
          }
          for (n = (void *)v171[22]; n; n = (void *)*n)
          {
            int v201 = &v199;
            uint64_t v202 = 1;
            uint64_t v200 = v174;
            uint64_t v189 = n[6];
            if (!v189) {
              goto LABEL_252;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v189 + 48))(v189, &v200, &v201);
          }
LABEL_196:
          if (++v149 == v148) {
            goto LABEL_248;
          }
        }
      }
    }
    else
    {
      uint64_t v78 = *(void **)(a4 + 16);
      if (v78)
      {
        int v192 = a3;
        while (1)
        {
          unsigned int v80 = (unint64_t *)v78[3];
          unint64_t v79 = (unint64_t *)v78[4];
          if (v80 != v79) {
            break;
          }
LABEL_90:
          uint64_t v78 = (void *)*v78;
          if (!v78) {
            return;
          }
        }
        unint64_t v81 = (int8x8_t *)v78[2];
        unint64_t v82 = 0x9DDFEA08EB382D69 * (((8 * v81) + 8) ^ ((unint64_t)v81 >> 32));
        unint64_t v83 = 0x9DDFEA08EB382D69 * (((unint64_t)v81 >> 32) ^ (v82 >> 47) ^ v82);
        unint64_t v84 = 0x9DDFEA08EB382D69 * (v83 ^ (v83 >> 47));
        int v194 = v78;
LABEL_94:
        unint64_t v85 = *v80;
        int v201 = (uint64_t *)*v80;
        int8x8_t v86 = v198[2];
        if (!*(void *)&v86) {
          goto LABEL_138;
        }
        uint8x8_t v87 = (uint8x8_t)vcnt_s8(v86);
        v87.i16[0] = vaddlv_u8(v87);
        if (v87.u32[0] > 1uLL)
        {
          unint64_t v88 = v84;
          if (v84 >= *(void *)&v86) {
            unint64_t v88 = v84 % *(void *)&v86;
          }
        }
        else
        {
          unint64_t v88 = (*(void *)&v86 - 1) & v84;
        }
        long double v89 = *(void **)(*(void *)&v198[1] + 8 * v88);
        if (!v89) {
          goto LABEL_138;
        }
        long double v90 = (void *)*v89;
        if (!v90) {
          goto LABEL_138;
        }
        if (v87.u32[0] < 2uLL)
        {
          uint64_t v91 = *(void *)&v86 - 1;
          while (1)
          {
            uint64_t v93 = v90[1];
            if (v84 == v93)
            {
              if ((int8x8_t *)v90[2] == v81) {
                goto LABEL_115;
              }
            }
            else if ((v93 & v91) != v88)
            {
              goto LABEL_138;
            }
            long double v90 = (void *)*v90;
            if (!v90) {
              goto LABEL_138;
            }
          }
        }
        while (1)
        {
          unint64_t v92 = v90[1];
          if (v84 == v92)
          {
            if ((int8x8_t *)v90[2] == v81)
            {
LABEL_115:
              int8x8_t v94 = (int8x8_t)v90[4];
              if (v94)
              {
                uint8x8_t v95 = (uint8x8_t)vcnt_s8(v94);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  unint64_t v96 = v85;
                  if (v85 >= *(void *)&v94) {
                    unint64_t v96 = v85 % *(void *)&v94;
                  }
                }
                else
                {
                  unint64_t v96 = (*(void *)&v94 - 1) & v85;
                }
                unsigned int v97 = *(uint64_t ***)(v90[3] + 8 * v96);
                if (v97)
                {
                  unsigned int v98 = *v97;
                  if (v98)
                  {
                    if (v95.u32[0] >= 2uLL)
                    {
                      while (1)
                      {
                        unint64_t v100 = v98[1];
                        if (v85 == v100)
                        {
                          if (__PAIR64__(*((unsigned __int16 *)v98 + 9), *((unsigned __int16 *)v98 + 8)) == __PAIR64__(WORD1(v85), (unsigned __int16)v85)
                            && *((_DWORD *)v98 + 5) == HIDWORD(v85))
                          {
                            goto LABEL_93;
                          }
                        }
                        else
                        {
                          if (v100 >= *(void *)&v94) {
                            v100 %= *(void *)&v94;
                          }
                          if (v100 != v96) {
                            goto LABEL_138;
                          }
                        }
                        unsigned int v98 = (uint64_t *)*v98;
                        if (!v98) {
                          goto LABEL_138;
                        }
                      }
                    }
                    uint64_t v99 = *(void *)&v94 - 1;
                    do
                    {
                      uint64_t v101 = v98[1];
                      if (v85 == v101)
                      {
                        if (__PAIR64__(*((unsigned __int16 *)v98 + 9), *((unsigned __int16 *)v98 + 8)) == __PAIR64__(WORD1(v85), (unsigned __int16)v85)
                          && *((_DWORD *)v98 + 5) == HIDWORD(v85))
                        {
                          goto LABEL_93;
                        }
                      }
                      else if ((v101 & v99) != v96)
                      {
                        break;
                      }
                      unsigned int v98 = (uint64_t *)*v98;
                    }
                    while (v98);
                  }
                }
              }
LABEL_138:
              long double v102 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v81);
              uint64_t v103 = v102[4];
              if (v85 >> 39 >= (v102[5] - v103) >> 3) {
                goto LABEL_145;
              }
              uint64_t v104 = *(void *)(v103 + 8 * (v85 >> 39));
              if (!v104) {
                goto LABEL_145;
              }
              unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * (HIDWORD(v85) & 0x7F));
              uint64_t v107 = v102[7];
              uint64_t v106 = v102[8];
              if (v105 >= (v106 - v107) >> 3) {
                goto LABEL_145;
              }
              uint64_t v108 = v107 + 8 * v105;
              BOOL v109 = v108 != v106 && *(_DWORD *)(v108 + 4) == HIDWORD(v85);
              if (!v109
                || (uint64_t v111 = v102[10]) == 0
                || (long double v112 = (_OWORD *)(v111 + 112 * v105), v112 == (_OWORD *)v102[11]))
              {
LABEL_145:
                if (GEOGetVectorKitDrapingLogicLog(void)::onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitDrapingLogicLog(void)::onceToken, &__block_literal_global_0);
                }
                __double2 v110 = GEOGetVectorKitDrapingLogicLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitDrapingLogicLog(void)::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "false";
                  *(_WORD *)&buf[12] = 2080;
                  *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/DrapingLogic.mm";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 307;
                  _os_log_impl(&dword_1A1780000, v110, OS_LOG_TYPE_ERROR, "Entity MUST have a mesh instance: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
                goto LABEL_93;
              }
              uint64_t v113 = *(void *)(gdc::components::RegistryBridgeMap<gdc::Entity>::nodeForRegistryAndKey((uint64_t)v198, (gdc::Registry *)v81, (unint64_t *)&v201)+ 16);
              long double v114 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v81);
              long long v205 = v112[3];
              long long v206 = v112[4];
              v207[0] = v112[5];
              *(_OWORD *)((char *)v207 + 12) = *(_OWORD *)((char *)v112 + 92);
              *(_OWORD *)buf = *v112;
              *(_OWORD *)&buf[16] = v112[1];
              long long v204 = v112[2];
              gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(v114, v113, (long long *)buf);
              unint64_t v115 = (void *)gdc::Registry::storage<md::components::Visibility>(v81);
              buf[0] = 1;
              gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v115, v113, buf);
              unint64_t v116 = (char *)operator new(0x50uLL);
              *((void *)v116 + 1) = 0;
              *((void *)v116 + 2) = 0;
              *(void *)unint64_t v116 = &unk_1EF581328;
              v116[32] = 1;
              *(_OWORD *)(v116 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0u;
              *(_OWORD *)(v116 + 56) = 0u;
              *((void *)v116 + 9) = &md::ZeroBlendFactor;
              *((void *)v116 + 3) = &unk_1EF540218;
              *(void *)buf = v116 + 24;
              *(void *)&buf[8] = v116;
              unint64_t v117 = (void *)gdc::Registry::storage<md::components::Material>(v81);
              gdc::ComponentStorageWrapper<md::components::Material>::emplace<int,std::shared_ptr<gms::Material<ggl::Texture2D>>>(v117, v113, 0, (uint64_t *)buf);
              unint64_t v118 = *(std::__shared_weak_count **)&buf[8];
              if (*(void *)&buf[8]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
              double v119 = (void *)gdc::Registry::storage<md::components::Collapsible>(v81);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v119, v113);
              double v120 = (void *)gdc::Registry::storage<md::components::IntendedSceneLayer>(v81);
              buf[0] = 4;
              gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v120, v113, buf);
              int8x8_t v121 = v81[1];
              if (!*(void *)&v121) {
                goto LABEL_177;
              }
              uint8x8_t v122 = (uint8x8_t)vcnt_s8(v121);
              v122.i16[0] = vaddlv_u8(v122);
              if (v122.u32[0] > 1uLL)
              {
                uint64_t v123 = 0x64A448A5CD5D38DBLL;
                if (*(void *)&v121 <= 0x64A448A5CD5D38DBuLL) {
                  uint64_t v123 = 0x64A448A5CD5D38DBuLL % *(void *)&v121;
                }
              }
              else
              {
                uint64_t v123 = (*(void *)&v121 - 1) & 0x64A448A5CD5D38DBLL;
              }
              long double v124 = *(void **)(*(void *)v81 + 8 * v123);
              if (!v124) {
                goto LABEL_177;
              }
              float64x2_t v125 = (void *)*v124;
              if (!v125) {
                goto LABEL_177;
              }
              if (v122.u32[0] < 2uLL)
              {
                uint64_t v126 = *(void *)&v121 - 1;
                while (1)
                {
                  uint64_t v128 = v125[1];
                  if (v128 == 0x64A448A5CD5D38DBLL)
                  {
                    if (v125[2] == 0x64A448A5CD5D38DBLL) {
                      goto LABEL_175;
                    }
                  }
                  else if ((v128 & v126) != v123)
                  {
                    goto LABEL_177;
                  }
                  float64x2_t v125 = (void *)*v125;
                  if (!v125) {
                    goto LABEL_177;
                  }
                }
              }
              while (2)
              {
                unint64_t v127 = v125[1];
                if (v127 != 0x64A448A5CD5D38DBLL)
                {
                  if (v127 >= *(void *)&v121) {
                    v127 %= *(void *)&v121;
                  }
                  if (v127 != v123) {
                    goto LABEL_177;
                  }
                  goto LABEL_164;
                }
                if (v125[2] != 0x64A448A5CD5D38DBLL)
                {
LABEL_164:
                  float64x2_t v125 = (void *)*v125;
                  if (!v125) {
                    goto LABEL_177;
                  }
                  continue;
                }
                break;
              }
LABEL_175:
              uint64_t v129 = v125[5];
              if (*(void *)(v129 + 8) == 0x64A448A5CD5D38DBLL)
              {
                uint64_t v130 = *(void *)(v129 + 32);
                goto LABEL_178;
              }
LABEL_177:
              uint64_t v130 = 0;
LABEL_178:
              uint64_t v131 = *a3;
              uint64_t v132 = *(void *)(*a3 + 24);
              *(void *)buf = *(void *)(*a3 + 16);
              *(void *)&buf[8] = v132;
              uint64_t v133 = v131;
              if (v132)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
                uint64_t v133 = *a3;
              }
              buf[28] = 1;
              uint64_t v135 = *(void *)(v133 + 112);
              uint64_t v134 = *(void *)(v133 + 120);
              *(void *)&long long v204 = v135;
              *((void *)&v204 + 1) = v134;
              if (v134) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
              }
              unsigned int v136 = *(unsigned __int8 *)(v131 + 33);
              unsigned int v137 = *(unsigned __int8 *)(v130 + 1);
              char v138 = v136 - v137;
              __powidf2();
              float v140 = v139;
              *(float *)&buf[24] = v140;
              if (v136 >= v137)
              {
                float v141 = (float)(*(_DWORD *)(v131 + 40) - (*(_DWORD *)(v130 + 8) << v138)) / v140;
                float v142 = 1.0 - (float)((float)(*(_DWORD *)(v131 + 36) - (*(_DWORD *)(v130 + 4) << v138) + 1) / v140);
                *(float *)&buf[16] = v141;
                *(float *)&buf[20] = v142;
              }
              int v143 = (void *)gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(v81);
              gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::emplace(v143, v113, (long long *)buf);
              int v144 = (std::__shared_weak_count *)*((void *)&v204 + 1);
              a3 = v192;
              uint64_t v78 = v194;
              if (*((void *)&v204 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v204 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
                int v145 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8]) {
                  goto LABEL_187;
                }
              }
              else
              {
                int v145 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8])
                {
LABEL_187:
                  if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
              }
LABEL_93:
              if (++v80 == v79) {
                goto LABEL_90;
              }
              goto LABEL_94;
            }
          }
          else
          {
            if (v92 >= *(void *)&v86) {
              v92 %= *(void *)&v86;
            }
            if (v92 != v88) {
              goto LABEL_138;
            }
          }
          long double v90 = (void *)*v90;
          if (!v90) {
            goto LABEL_138;
          }
        }
      }
    }
  }
}

void sub_1A1D8D914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1D8D928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  md::overlayComponents::DrapedRasterOverlay::~DrapedRasterOverlay((md::overlayComponents::DrapedRasterOverlay *)va);
  _Unwind_Resume(a1);
}

void sub_1A1D8D93C(_Unwind_Exception *exception_object)
{
}

void sub_1A1D8D948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__2clENS5_6EntityERNS_17overlayComponents17RasterOverlayBaseINS_15OverlayTileData19OverlayTileResource7TextureEEERNSt3__113unordered_mapIPNS5_8RegistryENSS_6vectorISK_NSS_9allocatorISK_EEEENSS_4hashISV_EENSS_8equal_toISV_EENSX_INSS_4pairIKSV_SZ_EEEEEERNSW_ISV_NSX_ISV_EEEE(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, unint64_t **a5)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  int v197 = (int8x8_t *)gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(**(int8x8_t ***)a1, a2);
  uint64_t v10 = (void *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(**(int8x8_t ***)a1);
  unint64_t v11 = a2 >> 39;
  uint64_t v12 = v10[4];
  if (a2 >> 39 < (v10[5] - v12) >> 3
    && (uint64_t v13 = *(void *)(v12 + 8 * v11)) != 0
    && (unint64_t v14 = *(unsigned __int16 *)(v13 + 2 * (HIDWORD(a2) & 0x7F)), v16 = v10[7], v15 = v10[8], v14 < (v15 - v16) >> 3)
    && ((uint64_t v17 = v16 + 8 * v14, v17 != v15) ? (v18 = *(_DWORD *)(v17 + 4) == HIDWORD(a2)) : (v18 = 0), v18))
  {
    unint64_t v19 = v10[11];
    unint64_t v20 = v10[10] + v14;
  }
  else
  {
    unint64_t v19 = v10[11];
    unint64_t v20 = v19;
  }
  BOOL v22 = v20 == v19 || v20 == 0;
  CanDisable = (void *)gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(**(int8x8_t ***)a1);
  uint64_t v24 = CanDisable[4];
  if (v11 >= (CanDisable[5] - v24) >> 3) {
    goto LABEL_28;
  }
  uint64_t v25 = *(void *)(v24 + 8 * v11);
  if (!v25) {
    goto LABEL_28;
  }
  unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v28 = CanDisable[7];
  uint64_t v27 = CanDisable[8];
  if (v26 >= (v27 - v28) >> 3) {
    goto LABEL_28;
  }
  uint64_t v29 = v28 + 8 * v26;
  BOOL v30 = v29 != v27 && *(_DWORD *)(v29 + 4) == HIDWORD(a2);
  if (!v30
    || ((uint64_t v31 = CanDisable[10], v32 = v31 + v26, v31) ? (v33 = v32 == CanDisable[11]) : (v33 = 1),
        v33 || !**(unsigned char **)(a1 + 8)))
  {
LABEL_28:
    if (v22)
    {
      uint64_t v34 = *a5;
      uint64_t v189 = a4;
      uint64_t v190 = a5[1];
      if (*a5 != v190)
      {
        while (1)
        {
          int v192 = v34;
          uint64_t v35 = (int8x8_t *)*v34;
          gdc::components::RegistryBridgeMap<gdc::Entity>::entities(buf, v197, *v34);
          int v36 = *(uint64_t **)&buf[8];
          std::string __p = *(void **)buf;
          if (*(void *)buf != *(void *)&buf[8]) {
            break;
          }
LABEL_86:
          if (__p) {
            operator delete(__p);
          }
          uint64_t v34 = v192 + 1;
          if (v192 + 1 == v190) {
            goto LABEL_191;
          }
        }
        uint64_t v37 = *(uint64_t **)buf;
        while (1)
        {
          uint64_t v38 = *v37;
          uint64_t v39 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v35);
          uint64_t v198 = v38;
          float32x2_t v40 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v39 + 4, (uint64_t)&v198);
          if (v41)
          {
            float v46 = (unsigned char *)v39[11];
            unint64_t v45 = v39[12];
            if ((unint64_t)v46 >= v45)
            {
              long long v48 = (char *)v39[10];
              uint64_t v49 = v46 - v48;
              uint64_t v50 = v46 - v48 + 1;
              if (v50 < 0) {
                goto LABEL_254;
              }
              unint64_t v51 = v45 - (void)v48;
              if (2 * v51 > v50) {
                uint64_t v50 = 2 * v51;
              }
              if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v52 = v50;
              }
              if (v52) {
                long long v53 = (char *)operator new(v52);
              }
              else {
                long long v53 = 0;
              }
              long long v54 = &v53[v49];
              uint64_t v47 = (uint64_t)&v53[v49 + 1];
              float v55 = (char *)(v48 - v46);
              if (v48 == v46) {
                float v55 = 0;
              }
              v39[10] = &v55[(void)v54];
              v39[11] = v47;
              v39[12] = &v53[v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              uint64_t v47 = (uint64_t)(v46 + 1);
            }
            v39[11] = v47;
            uint64_t v42 = v39[31];
          }
          else
          {
            uint64_t v42 = v39[31];
            if (v39[10] + (((uint64_t)v40 - v39[7]) >> 3) != v39[11])
            {
              for (int64_t i = (void *)v39[16]; i; int64_t i = (void *)*i)
              {
                uint64_t v200 = &v198;
                uint64_t v201 = 1;
                uint64_t v199 = v42;
                uint64_t v44 = i[6];
                if (!v44) {
                  goto LABEL_252;
                }
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v44 + 48))(v44, &v199, &v200);
              }
              goto LABEL_60;
            }
          }
          for (uint64_t j = (void *)v39[22]; j; uint64_t j = (void *)*j)
          {
            uint64_t v200 = &v198;
            uint64_t v201 = 1;
            uint64_t v199 = v42;
            uint64_t v57 = j[6];
            if (!v57) {
              goto LABEL_252;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v57 + 48))(v57, &v199, &v200);
          }
LABEL_60:
          uint64_t v58 = *v37;
          int v59 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v35);
          uint64_t v198 = v58;
          float v60 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v59 + 4, (uint64_t)&v198);
          if (v61)
          {
            uint64_t v66 = (unsigned char *)v59[11];
            unint64_t v65 = v59[12];
            if ((unint64_t)v66 >= v65)
            {
              char v68 = (char *)v59[10];
              uint64_t v69 = v66 - v68;
              uint64_t v70 = v66 - v68 + 1;
              if (v70 < 0) {
LABEL_254:
              }
                abort();
              unint64_t v71 = v65 - (void)v68;
              if (2 * v71 > v70) {
                uint64_t v70 = 2 * v71;
              }
              if (v71 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v72 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v72 = v70;
              }
              if (v72) {
                uint64_t v73 = (char *)operator new(v72);
              }
              else {
                uint64_t v73 = 0;
              }
              uint64_t v74 = &v73[v69];
              uint64_t v67 = (uint64_t)&v73[v69 + 1];
              unint64_t v75 = (char *)(v68 - v66);
              if (v68 == v66) {
                unint64_t v75 = 0;
              }
              v59[10] = &v75[(void)v74];
              v59[11] = v67;
              v59[12] = &v73[v72];
              if (v68) {
                operator delete(v68);
              }
            }
            else
            {
              uint64_t v67 = (uint64_t)(v66 + 1);
            }
            v59[11] = v67;
            uint64_t v62 = v59[31];
LABEL_82:
            for (uint64_t k = (void *)v59[22]; k; uint64_t k = (void *)*k)
            {
              uint64_t v200 = &v198;
              uint64_t v201 = 1;
              uint64_t v199 = v62;
              uint64_t v77 = k[6];
              if (!v77) {
                goto LABEL_252;
              }
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v77 + 48))(v77, &v199, &v200);
            }
            goto LABEL_34;
          }
          uint64_t v62 = v59[31];
          if (v59[10] + (((uint64_t)v60 - v59[7]) >> 3) == v59[11]) {
            goto LABEL_82;
          }
          for (uint64_t m = (void *)v59[16]; m; uint64_t m = (void *)*m)
          {
            uint64_t v200 = &v198;
            uint64_t v201 = 1;
            uint64_t v199 = v62;
            uint64_t v64 = m[6];
            if (!v64) {
              goto LABEL_252;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v64 + 48))(v64, &v199, &v200);
          }
LABEL_34:
          if (++v37 == v36) {
            goto LABEL_86;
          }
        }
      }
LABEL_191:
      uint64_t v145 = *(void *)(v189 + 16);
      if (v145)
      {
        while (1)
        {
          int v194 = (uint64_t *)v145;
          uint64_t v146 = *(int8x8_t **)(v145 + 16);
          gdc::components::RegistryBridgeMap<gdc::Entity>::entities(buf, v197, (unint64_t)v146);
          int v147 = *(uint64_t **)&buf[8];
          __pa = *(void **)buf;
          if (*(void *)buf != *(void *)&buf[8]) {
            break;
          }
LABEL_248:
          if (__pa) {
            operator delete(__pa);
          }
          uint64_t v145 = *v194;
          if (!*v194) {
            return;
          }
        }
        int v148 = *(uint64_t **)buf;
        while (1)
        {
          uint64_t v149 = *v148;
          uint64_t v150 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v146);
          uint64_t v198 = v149;
          int v151 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v150 + 4, (uint64_t)&v198);
          if (v152)
          {
            unint64_t v157 = (unsigned char *)v150[11];
            unint64_t v156 = v150[12];
            if ((unint64_t)v157 >= v156)
            {
              uint64_t v159 = (char *)v150[10];
              uint64_t v160 = v157 - v159;
              uint64_t v161 = v157 - v159 + 1;
              if (v161 < 0) {
                goto LABEL_255;
              }
              unint64_t v162 = v156 - (void)v159;
              if (2 * v162 > v161) {
                uint64_t v161 = 2 * v162;
              }
              if (v162 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v163 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v163 = v161;
              }
              if (v163) {
                size_t v164 = (char *)operator new(v163);
              }
              else {
                size_t v164 = 0;
              }
              int v165 = &v164[v160];
              uint64_t v158 = (uint64_t)&v164[v160 + 1];
              int v166 = (char *)(v159 - v157);
              if (v159 == v157) {
                int v166 = 0;
              }
              v150[10] = &v166[(void)v165];
              v150[11] = v158;
              v150[12] = &v164[v163];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              uint64_t v158 = (uint64_t)(v157 + 1);
            }
            v150[11] = v158;
            uint64_t v153 = v150[31];
          }
          else
          {
            uint64_t v153 = v150[31];
            if (v150[10] + (((uint64_t)v151 - v150[7]) >> 3) != v150[11])
            {
              uint64_t v154 = (void *)v150[16];
              if (v154)
              {
                while (1)
                {
                  uint64_t v200 = &v198;
                  uint64_t v201 = 1;
                  uint64_t v199 = v153;
                  uint64_t v155 = v154[6];
                  if (!v155) {
                    goto LABEL_252;
                  }
                  (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v155 + 48))(v155, &v199, &v200);
                  uint64_t v154 = (void *)*v154;
                  if (!v154) {
                    goto LABEL_222;
                  }
                }
              }
              goto LABEL_222;
            }
          }
          int v167 = (void *)v150[22];
          if (v167)
          {
            while (1)
            {
              uint64_t v200 = &v198;
              uint64_t v201 = 1;
              uint64_t v199 = v153;
              uint64_t v168 = v167[6];
              if (!v168) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v168 + 48))(v168, &v199, &v200);
              int v167 = (void *)*v167;
              if (!v167) {
                goto LABEL_222;
              }
            }
LABEL_252:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
LABEL_222:
          uint64_t v169 = *v148;
          uint64_t v170 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v146);
          uint64_t v198 = v169;
          int v171 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v170 + 4, (uint64_t)&v198);
          if (v172)
          {
            unint64_t v177 = (unsigned char *)v170[11];
            unint64_t v176 = v170[12];
            if ((unint64_t)v177 >= v176)
            {
              uint64_t v179 = (char *)v170[10];
              uint64_t v180 = v177 - v179;
              uint64_t v181 = v177 - v179 + 1;
              if (v181 < 0) {
LABEL_255:
              }
                abort();
              unint64_t v182 = v176 - (void)v179;
              if (2 * v182 > v181) {
                uint64_t v181 = 2 * v182;
              }
              if (v182 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v183 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v183 = v181;
              }
              if (v183) {
                size_t v184 = (char *)operator new(v183);
              }
              else {
                size_t v184 = 0;
              }
              int v185 = &v184[v180];
              uint64_t v178 = (uint64_t)&v184[v180 + 1];
              int v186 = (char *)(v179 - v177);
              if (v179 == v177) {
                int v186 = 0;
              }
              v170[10] = &v186[(void)v185];
              v170[11] = v178;
              v170[12] = &v184[v183];
              if (v179) {
                operator delete(v179);
              }
            }
            else
            {
              uint64_t v178 = (uint64_t)(v177 + 1);
            }
            v170[11] = v178;
            uint64_t v173 = v170[31];
          }
          else
          {
            uint64_t v173 = v170[31];
            if (v170[10] + (((uint64_t)v171 - v170[7]) >> 3) != v170[11])
            {
              uint64_t v174 = (void *)v170[16];
              if (v174)
              {
                while (1)
                {
                  uint64_t v200 = &v198;
                  uint64_t v201 = 1;
                  uint64_t v199 = v173;
                  uint64_t v175 = v174[6];
                  if (!v175) {
                    goto LABEL_252;
                  }
                  (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v175 + 48))(v175, &v199, &v200);
                  uint64_t v174 = (void *)*v174;
                  if (!v174) {
                    goto LABEL_196;
                  }
                }
              }
              goto LABEL_196;
            }
          }
          for (n = (void *)v170[22]; n; n = (void *)*n)
          {
            uint64_t v200 = &v198;
            uint64_t v201 = 1;
            uint64_t v199 = v173;
            uint64_t v188 = n[6];
            if (!v188) {
              goto LABEL_252;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v188 + 48))(v188, &v199, &v200);
          }
LABEL_196:
          if (++v148 == v147) {
            goto LABEL_248;
          }
        }
      }
    }
    else
    {
      uint64_t v78 = *(void **)(a4 + 16);
      if (v78)
      {
        int v191 = a3;
        while (1)
        {
          unsigned int v80 = (unint64_t *)v78[3];
          unint64_t v79 = (unint64_t *)v78[4];
          if (v80 != v79) {
            break;
          }
LABEL_90:
          uint64_t v78 = (void *)*v78;
          if (!v78) {
            return;
          }
        }
        unint64_t v81 = (int8x8_t *)v78[2];
        unint64_t v82 = 0x9DDFEA08EB382D69 * (((8 * v81) + 8) ^ ((unint64_t)v81 >> 32));
        unint64_t v83 = 0x9DDFEA08EB382D69 * (((unint64_t)v81 >> 32) ^ (v82 >> 47) ^ v82);
        unint64_t v84 = 0x9DDFEA08EB382D69 * (v83 ^ (v83 >> 47));
        int v193 = v78;
LABEL_94:
        unint64_t v85 = *v80;
        uint64_t v200 = (uint64_t *)*v80;
        int8x8_t v86 = v197[2];
        if (!*(void *)&v86) {
          goto LABEL_138;
        }
        uint8x8_t v87 = (uint8x8_t)vcnt_s8(v86);
        v87.i16[0] = vaddlv_u8(v87);
        if (v87.u32[0] > 1uLL)
        {
          unint64_t v88 = v84;
          if (v84 >= *(void *)&v86) {
            unint64_t v88 = v84 % *(void *)&v86;
          }
        }
        else
        {
          unint64_t v88 = (*(void *)&v86 - 1) & v84;
        }
        long double v89 = *(void **)(*(void *)&v197[1] + 8 * v88);
        if (!v89) {
          goto LABEL_138;
        }
        long double v90 = (void *)*v89;
        if (!v90) {
          goto LABEL_138;
        }
        if (v87.u32[0] < 2uLL)
        {
          uint64_t v91 = *(void *)&v86 - 1;
          while (1)
          {
            uint64_t v93 = v90[1];
            if (v84 == v93)
            {
              if ((int8x8_t *)v90[2] == v81) {
                goto LABEL_115;
              }
            }
            else if ((v93 & v91) != v88)
            {
              goto LABEL_138;
            }
            long double v90 = (void *)*v90;
            if (!v90) {
              goto LABEL_138;
            }
          }
        }
        while (1)
        {
          unint64_t v92 = v90[1];
          if (v84 == v92)
          {
            if ((int8x8_t *)v90[2] == v81)
            {
LABEL_115:
              int8x8_t v94 = (int8x8_t)v90[4];
              if (v94)
              {
                uint8x8_t v95 = (uint8x8_t)vcnt_s8(v94);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  unint64_t v96 = v85;
                  if (v85 >= *(void *)&v94) {
                    unint64_t v96 = v85 % *(void *)&v94;
                  }
                }
                else
                {
                  unint64_t v96 = (*(void *)&v94 - 1) & v85;
                }
                unsigned int v97 = *(uint64_t ***)(v90[3] + 8 * v96);
                if (v97)
                {
                  unsigned int v98 = *v97;
                  if (v98)
                  {
                    if (v95.u32[0] >= 2uLL)
                    {
                      while (1)
                      {
                        unint64_t v100 = v98[1];
                        if (v85 == v100)
                        {
                          if (__PAIR64__(*((unsigned __int16 *)v98 + 9), *((unsigned __int16 *)v98 + 8)) == __PAIR64__(WORD1(v85), (unsigned __int16)v85)
                            && *((_DWORD *)v98 + 5) == HIDWORD(v85))
                          {
                            goto LABEL_93;
                          }
                        }
                        else
                        {
                          if (v100 >= *(void *)&v94) {
                            v100 %= *(void *)&v94;
                          }
                          if (v100 != v96) {
                            goto LABEL_138;
                          }
                        }
                        unsigned int v98 = (uint64_t *)*v98;
                        if (!v98) {
                          goto LABEL_138;
                        }
                      }
                    }
                    uint64_t v99 = *(void *)&v94 - 1;
                    do
                    {
                      uint64_t v101 = v98[1];
                      if (v85 == v101)
                      {
                        if (__PAIR64__(*((unsigned __int16 *)v98 + 9), *((unsigned __int16 *)v98 + 8)) == __PAIR64__(WORD1(v85), (unsigned __int16)v85)
                          && *((_DWORD *)v98 + 5) == HIDWORD(v85))
                        {
                          goto LABEL_93;
                        }
                      }
                      else if ((v101 & v99) != v96)
                      {
                        break;
                      }
                      unsigned int v98 = (uint64_t *)*v98;
                    }
                    while (v98);
                  }
                }
              }
LABEL_138:
              long double v102 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v81);
              uint64_t v103 = v102[4];
              if (v85 >> 39 >= (v102[5] - v103) >> 3) {
                goto LABEL_145;
              }
              uint64_t v104 = *(void *)(v103 + 8 * (v85 >> 39));
              if (!v104) {
                goto LABEL_145;
              }
              unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * (HIDWORD(v85) & 0x7F));
              uint64_t v107 = v102[7];
              uint64_t v106 = v102[8];
              if (v105 >= (v106 - v107) >> 3) {
                goto LABEL_145;
              }
              uint64_t v108 = v107 + 8 * v105;
              BOOL v109 = v108 != v106 && *(_DWORD *)(v108 + 4) == HIDWORD(v85);
              if (!v109
                || (uint64_t v111 = v102[10]) == 0
                || (long double v112 = (_OWORD *)(v111 + 112 * v105), v112 == (_OWORD *)v102[11]))
              {
LABEL_145:
                if (GEOGetVectorKitDrapingLogicLog(void)::onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitDrapingLogicLog(void)::onceToken, &__block_literal_global_0);
                }
                __double2 v110 = GEOGetVectorKitDrapingLogicLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitDrapingLogicLog(void)::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "false";
                  *(_WORD *)&buf[12] = 2080;
                  *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/DrapingLogic.mm";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 307;
                  _os_log_impl(&dword_1A1780000, v110, OS_LOG_TYPE_ERROR, "Entity MUST have a mesh instance: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
                goto LABEL_93;
              }
              uint64_t v113 = *(void *)(gdc::components::RegistryBridgeMap<gdc::Entity>::nodeForRegistryAndKey((uint64_t)v197, (gdc::Registry *)v81, (unint64_t *)&v200)+ 16);
              long double v114 = (void *)gdc::Registry::storage<md::components::MeshInstance>(v81);
              long long v204 = v112[3];
              long long v205 = v112[4];
              v206[0] = v112[5];
              *(_OWORD *)((char *)v206 + 12) = *(_OWORD *)((char *)v112 + 92);
              *(_OWORD *)buf = *v112;
              *(_OWORD *)&buf[16] = v112[1];
              long long v203 = v112[2];
              gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(v114, v113, (long long *)buf);
              unint64_t v115 = (void *)gdc::Registry::storage<md::components::Visibility>(v81);
              buf[0] = 1;
              gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v115, v113, buf);
              unint64_t v116 = (char *)operator new(0x50uLL);
              *((void *)v116 + 1) = 0;
              *((void *)v116 + 2) = 0;
              *(void *)unint64_t v116 = &unk_1EF581328;
              v116[32] = 1;
              *(_OWORD *)(v116 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0u;
              *(_OWORD *)(v116 + 56) = 0u;
              *((void *)v116 + 9) = &md::ZeroBlendFactor;
              *((void *)v116 + 3) = &unk_1EF540218;
              *(void *)buf = v116 + 24;
              *(void *)&buf[8] = v116;
              unint64_t v117 = (void *)gdc::Registry::storage<md::components::Material>(v81);
              gdc::ComponentStorageWrapper<md::components::Material>::emplace<int,std::shared_ptr<gms::Material<ggl::Texture2D>>>(v117, v113, 0, (uint64_t *)buf);
              unint64_t v118 = *(std::__shared_weak_count **)&buf[8];
              if (*(void *)&buf[8]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
              double v119 = (void *)gdc::Registry::storage<md::components::Collapsible>(v81);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v119, v113);
              double v120 = (void *)gdc::Registry::storage<md::components::IntendedSceneLayer>(v81);
              buf[0] = 4;
              gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v120, v113, buf);
              int8x8_t v121 = v81[1];
              if (!*(void *)&v121) {
                goto LABEL_177;
              }
              uint8x8_t v122 = (uint8x8_t)vcnt_s8(v121);
              v122.i16[0] = vaddlv_u8(v122);
              if (v122.u32[0] > 1uLL)
              {
                uint64_t v123 = 0x64A448A5CD5D38DBLL;
                if (*(void *)&v121 <= 0x64A448A5CD5D38DBuLL) {
                  uint64_t v123 = 0x64A448A5CD5D38DBuLL % *(void *)&v121;
                }
              }
              else
              {
                uint64_t v123 = (*(void *)&v121 - 1) & 0x64A448A5CD5D38DBLL;
              }
              long double v124 = *(void **)(*(void *)v81 + 8 * v123);
              if (!v124) {
                goto LABEL_177;
              }
              float64x2_t v125 = (void *)*v124;
              if (!v125) {
                goto LABEL_177;
              }
              if (v122.u32[0] < 2uLL)
              {
                uint64_t v126 = *(void *)&v121 - 1;
                while (1)
                {
                  uint64_t v128 = v125[1];
                  if (v128 == 0x64A448A5CD5D38DBLL)
                  {
                    if (v125[2] == 0x64A448A5CD5D38DBLL) {
                      goto LABEL_175;
                    }
                  }
                  else if ((v128 & v126) != v123)
                  {
                    goto LABEL_177;
                  }
                  float64x2_t v125 = (void *)*v125;
                  if (!v125) {
                    goto LABEL_177;
                  }
                }
              }
              while (2)
              {
                unint64_t v127 = v125[1];
                if (v127 != 0x64A448A5CD5D38DBLL)
                {
                  if (v127 >= *(void *)&v121) {
                    v127 %= *(void *)&v121;
                  }
                  if (v127 != v123) {
                    goto LABEL_177;
                  }
                  goto LABEL_164;
                }
                if (v125[2] != 0x64A448A5CD5D38DBLL)
                {
LABEL_164:
                  float64x2_t v125 = (void *)*v125;
                  if (!v125) {
                    goto LABEL_177;
                  }
                  continue;
                }
                break;
              }
LABEL_175:
              uint64_t v129 = v125[5];
              if (*(void *)(v129 + 8) == 0x64A448A5CD5D38DBLL)
              {
                uint64_t v130 = *(void *)(v129 + 32);
                goto LABEL_178;
              }
LABEL_177:
              uint64_t v130 = 0;
LABEL_178:
              uint64_t v131 = *a3;
              uint64_t v132 = *(void *)(*a3 + 32);
              *(void *)buf = *(void *)(*a3 + 24);
              *(void *)&buf[8] = v132;
              uint64_t v133 = v131;
              if (v132)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
                uint64_t v133 = *a3;
              }
              buf[28] = 1;
              uint64_t v135 = *(void *)(v133 + 56);
              uint64_t v134 = *(void *)(v133 + 64);
              *(void *)&long long v203 = v135;
              *((void *)&v203 + 1) = v134;
              if (v134) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
              }
              unsigned int v136 = *(unsigned __int8 *)(v131 + 1);
              unsigned int v137 = *(unsigned __int8 *)(v130 + 1);
              char v138 = v136 - v137;
              __powidf2();
              float v140 = v139;
              *(float *)&buf[24] = v140;
              if (v136 >= v137)
              {
                int v141 = *(_DWORD *)(v130 + 4) << v138;
                *(float *)&buf[16] = (float)(*(_DWORD *)(v131 + 8) - (*(_DWORD *)(v130 + 8) << v138)) / v140;
                *(float *)&buf[20] = 1.0 - (float)((float)(*(_DWORD *)(v131 + 4) - v141 + 1) / v140);
              }
              float v142 = (void *)gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(v81);
              gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::emplace(v142, v113, (long long *)buf);
              int v143 = (std::__shared_weak_count *)*((void *)&v203 + 1);
              a3 = v191;
              uint64_t v78 = v193;
              if (*((void *)&v203 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
                int v144 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8]) {
                  goto LABEL_187;
                }
              }
              else
              {
                int v144 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8])
                {
LABEL_187:
                  if (!atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
              }
LABEL_93:
              if (++v80 == v79) {
                goto LABEL_90;
              }
              goto LABEL_94;
            }
          }
          else
          {
            if (v92 >= *(void *)&v86) {
              v92 %= *(void *)&v86;
            }
            if (v92 != v88) {
              goto LABEL_138;
            }
          }
          long double v90 = (void *)*v90;
          if (!v90) {
            goto LABEL_138;
          }
        }
      }
    }
  }
}

void sub_1A1D8E95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1D8E970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  md::overlayComponents::DrapedRasterOverlay::~DrapedRasterOverlay((md::overlayComponents::DrapedRasterOverlay *)va);
  _Unwind_Resume(a1);
}

void sub_1A1D8E984(_Unwind_Exception *exception_object)
{
}

void sub_1A1D8E990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::FoundationOverlayPair::~FoundationOverlayPair(md::FoundationOverlayPair *this)
{
  if (*((unsigned char *)this + 208)) {
    *((unsigned char *)this + 208) = 0;
  }
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2 != *((void **)this + 18)) {
    free(v2);
  }
  if (*((unsigned char *)this + 96)) {
    *((unsigned char *)this + 96) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3 != *((void **)this + 4)) {
    free(v3);
  }
}

void md::DrapingLogic::_fixUpHoles(uint64_t a1, void *a2, void *a3, char **a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = (int64x2_t *)a1;
  uint64_t v450 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)a3[2];
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 != v8)
  {
    while (*(_WORD *)v7 != 1)
    {
      v7 += 32;
      if (v7 == v8)
      {
        uint64_t v7 = v8;
        break;
      }
    }
  }
  uint64_t v319 = *(void *)(*(void *)(v7 + 16) + 16);
  uint64_t v402 = 0;
  unint64_t v401 = 0;
  double v400 = &v401;
  if (a2)
  {
    do
    {
      uint64_t v9 = v4 + 2;
      unsigned int v10 = *(unsigned __int8 *)(v4[4] + 8);
      unsigned int v11 = *(unsigned __int8 *)(v4[18] + 8);
      BOOL v12 = v10 > v11;
      if (v10 <= v11) {
        uint64_t v13 = 2;
      }
      else {
        uint64_t v13 = 16;
      }
      if (v12) {
        unint64_t v14 = v4 + 16;
      }
      else {
        unint64_t v14 = v4 + 2;
      }
      v442[0] = v4[v13];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v442[8], (uint64_t)(v14 + 1));
      char v447 = 0;
      if (*((unsigned char *)v14 + 96))
      {
        int v448 = *((_DWORD *)v14 + 25);
        char v447 = 1;
      }
      unint64_t v449 = v14[13];
      unsigned int v15 = *(unsigned __int8 *)(v4[4] + 8);
      unsigned int v16 = *(unsigned __int8 *)(v4[18] + 8);
      BOOL v17 = v15 > v16;
      if (v15 <= v16) {
        uint64_t v18 = 16;
      }
      else {
        uint64_t v18 = 2;
      }
      if (!v17) {
        uint64_t v9 = v4 + 16;
      }
      buf[0] = v4[v18];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)(v9 + 1));
      char v439 = 0;
      if (*((unsigned char *)v9 + 96))
      {
        int v440 = *((_DWORD *)v9 + 25);
        char v439 = 1;
      }
      unint64_t v441 = v9[13];
      unint64_t v19 = v401;
      if (!v401) {
        goto LABEL_64;
      }
      unsigned int v20 = *(unsigned __int16 *)&v442[8];
      uint64_t v21 = v446;
      uint64_t v23 = v443;
      uint64_t v22 = v444;
      uint64_t v24 = v444 - (void)v443;
      unsigned int v331 = v442[0];
      uint64_t v25 = &v401;
      do
      {
        uint64_t v29 = v19;
        BOOL v30 = v25;
        uint64_t v31 = (unsigned __int8 *)(v19 + 4);
        unsigned int v32 = *((unsigned __int16 *)v19 + 20);
        BOOL v26 = v32 >= v20;
        if (v32 != v20) {
          goto LABEL_26;
        }
        if (v29[14] == v21)
        {
          BOOL v33 = (const void *)v29[6];
          if (v29[7] - (void)v33 == v24 && !memcmp(v33, v23, v22 - (void)v23))
          {
            BOOL v26 = *v31 >= v331;
LABEL_26:
            BOOL v27 = !v26;
            goto LABEL_29;
          }
        }
        BOOL v27 = gdc::GenericKey::operator<(v29[6], v29[7], (uint64_t)v23, v22);
LABEL_29:
        uint64_t v28 = v29 + 1;
        if (v27)
        {
          uint64_t v25 = v30;
        }
        else
        {
          uint64_t v28 = v29;
          uint64_t v25 = (uint64_t **)v29;
        }
        unint64_t v19 = (uint64_t *)*v28;
      }
      while (v19);
      if (v25 != &v401)
      {
        if (v27)
        {
          uint64_t v31 = (unsigned __int8 *)(v30 + 4);
          uint64_t v34 = (uint64_t *)v30;
        }
        else
        {
          uint64_t v34 = v29;
        }
        unsigned int v35 = *((unsigned __int16 *)v34 + 20);
        if (v20 == v35)
        {
          if (v27) {
            int v36 = (uint64_t *)v30;
          }
          else {
            int v36 = v29;
          }
          if (v21 == v36[14]
            && (!v27 ? (uint64_t v37 = v29) : (uint64_t v37 = (uint64_t *)v30),
                (uint64_t v38 = (const void *)v37[6], v24 == v37[7] - (void)v38) && !memcmp(v23, v38, v22 - (void)v23)))
          {
            if (v331 >= *v31) {
              goto LABEL_56;
            }
          }
          else
          {
            if (v27) {
              uint64_t v39 = (uint64_t *)v30;
            }
            else {
              uint64_t v39 = v29;
            }
            if (!gdc::GenericKey::operator<((uint64_t)v23, v22, v39[6], v39[7]))
            {
LABEL_56:
              if (v27) {
                float32x2_t v40 = (uint64_t *)v30;
              }
              else {
                float32x2_t v40 = v29;
              }
              unint64_t v41 = v40[19];
              if (v41 >= v40[20])
              {
                if (v27) {
                  uint64_t v62 = (uint64_t *)v30;
                }
                else {
                  uint64_t v62 = v29;
                }
                uint64_t v42 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)v62 + 18, (uint64_t)buf);
              }
              else
              {
                *(unsigned char *)unint64_t v41 = buf[0];
                gdc::LayerDataKey::LayerDataKey(v41 + 8, (uint64_t)&buf[8]);
                *(unsigned char *)(v41 + 96) = 0;
                if (v439)
                {
                  *(_DWORD *)(v41 + 10CGContextBeginTransparencyLayer(this[1], 0) = v440;
                  *(unsigned char *)(v41 + 96) = 1;
                }
                *(void *)(v41 + 104) = v441;
                uint64_t v42 = (unsigned char *)(v41 + 112);
                v40[19] = v41 + 112;
              }
              uint64_t v5 = (int64x2_t *)a1;
              v40[19] = (uint64_t)v42;
              if (!v439) {
                goto LABEL_116;
              }
LABEL_115:
              char v439 = 0;
              goto LABEL_116;
            }
          }
        }
        else if (v20 >= v35)
        {
          goto LABEL_56;
        }
      }
LABEL_64:
      uint8_t v419 = buf[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v420, (uint64_t)&buf[8]);
      char v423 = 0;
      if (v439)
      {
        int v424 = v440;
        char v423 = 1;
      }
      unint64_t v425 = v441;
      double v412 = 0;
      int8x16_t v410 = 0;
      uint64_t v411 = 0;
      uint64_t v43 = (char *)operator new(0x70uLL);
      int8x16_t v410 = v43;
      double v412 = v43 + 112;
      *uint64_t v43 = v419;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v43 + 8), (uint64_t)&v420);
      v43[96] = 0;
      if (v423)
      {
        *((_DWORD *)v43 + 25) = v424;
        v43[96] = 1;
      }
      *((void *)v43 + 13) = v425;
      v426.__r_.__value_.__s.__data_[0] = v442[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)&v442[8]);
      char v431 = 0;
      if (v447)
      {
        int v432 = v448;
        char v431 = 1;
      }
      unint64_t v433 = v449;
      *(void *)&long long __p = v43;
      *((void *)&__p + 1) = v43 + 112;
      unint64_t v435 = v43 + 112;
      double v412 = 0;
      int8x16_t v410 = 0;
      uint64_t v411 = 0;
      uint64_t v44 = v401;
      unint64_t v45 = &v401;
      float v46 = &v401;
      if (v401)
      {
        unsigned int v47 = LOWORD(v426.__r_.__value_.__r.__words[1]);
        long long v48 = v429;
        uint64_t v49 = v427;
        uint64_t v50 = (const void *)v426.__r_.__value_.__r.__words[2];
        size_t v51 = v427 - v426.__r_.__value_.__r.__words[2];
        unsigned int v52 = v426.__r_.__value_.__s.__data_[0];
        while (1)
        {
          unint64_t v45 = (uint64_t **)v44;
          unsigned int v53 = *((unsigned __int16 *)v44 + 20);
          if (v47 != v53) {
            break;
          }
          if (v48 == v45[14] && (long long v54 = v45[6], v51 == (char *)v45[7] - (char *)v54) && !memcmp(v50, v54, v51))
          {
            if (v52 >= *((unsigned __int8 *)v45 + 32)) {
              goto LABEL_78;
            }
LABEL_72:
            uint64_t v44 = *v45;
            float v46 = v45;
            if (!*v45) {
              goto LABEL_91;
            }
          }
          else
          {
            if (gdc::GenericKey::operator<((uint64_t)v50, v49, (uint64_t)v45[6], (uint64_t)v45[7])) {
              goto LABEL_72;
            }
LABEL_78:
            if (v45[14] == v48 && (float v55 = v45[6], (char *)v45[7] - (char *)v55 == v51) && !memcmp(v55, v50, v51))
            {
              if (*((unsigned __int8 *)v45 + 32) >= v52) {
                goto LABEL_96;
              }
            }
            else if (!gdc::GenericKey::operator<((uint64_t)v45[6], (uint64_t)v45[7], (uint64_t)v50, v49))
            {
              goto LABEL_96;
            }
LABEL_85:
            float v46 = v45 + 1;
            uint64_t v44 = v45[1];
            if (!v44) {
              goto LABEL_91;
            }
          }
        }
        if (v47 >= v53)
        {
          if (v53 >= v47) {
            goto LABEL_96;
          }
          goto LABEL_85;
        }
        goto LABEL_72;
      }
LABEL_91:
      float v56 = operator new(0xA8uLL);
      v56[32] = v426.__r_.__value_.__s.__data_[0];
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v56 + 40), (uint64_t)&v426.__r_.__value_.__l.__size_);
      v56[128] = 0;
      if (v431)
      {
        *((_DWORD *)v56 + 33) = v432;
        v56[128] = 1;
      }
      uint64_t v57 = v435;
      *((void *)v56 + 17) = v433;
      *((_OWORD *)v56 + 9) = __p;
      *((void *)v56 + 2CGContextBeginTransparencyLayer(this[1], 0) = v57;
      unint64_t v435 = 0;
      long long __p = 0uLL;
      *(void *)float v56 = 0;
      *((void *)v56 + 1) = 0;
      *((void *)v56 + 2) = v45;
      *float v46 = (uint64_t *)v56;
      if (*v400)
      {
        double v400 = (uint64_t **)*v400;
        float v56 = *v46;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v401, (uint64_t *)v56);
      ++v402;
LABEL_96:
      uint64_t v58 = __p;
      uint64_t v5 = (int64x2_t *)a1;
      if ((void)__p)
      {
        uint64_t v59 = *((void *)&__p + 1);
        float v60 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(unsigned char *)(v59 - 16)) {
              *(unsigned char *)(v59 - 16) = 0;
            }
            char v61 = *(void **)(v59 - 96);
            if (v61 != *(void **)(v59 - 80)) {
              free(v61);
            }
            v59 -= 112;
          }
          while (v59 != v58);
          float v60 = (void *)__p;
        }
        *((void *)&__p + 1) = v58;
        operator delete(v60);
      }
      if (v431) {
        char v431 = 0;
      }
      if (v426.__r_.__value_.__r.__words[2] != v428) {
        free((void *)v426.__r_.__value_.__r.__words[2]);
      }
      if (v423) {
        char v423 = 0;
      }
      if (v421 != v422) {
        free(v421);
      }
      if (v439) {
        goto LABEL_115;
      }
LABEL_116:
      if (*(void *)&buf[16] != v438) {
        free(*(void **)&buf[16]);
      }
      if (v447) {
        char v447 = 0;
      }
      if (v443 != v445) {
        free(v443);
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  __n128 v63 = (void *)*a3;
  uint64_t v64 = *(void *)(*a3 + 112);
  uint64_t v65 = *(void *)(*a3 + 120);
  if (v64 != v65)
  {
    while (*(_WORD *)v64 != 1)
    {
      v64 += 112;
      if (v64 == v65)
      {
        uint64_t v64 = *(void *)(*a3 + 120);
        break;
      }
    }
  }
  uint64_t v66 = *(void **)(v64 + 104);
  double v398 = 0;
  long long v397 = 0;
  unint64_t v399 = 0;
  uint64_t v67 = v400;
  char v68 = "se_cfENS_8_hash_cfENS_9_equal_cfEEE";
  unint64_t v321 = (gdc::LayerDataCollector *)v66;
  if (v400 != &v401)
  {
    int v316 = *(void **)(v319 + 56);
    int v318 = v66 + 6;
    while (1)
    {
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
      }
      uint64_t v69 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      BOOL v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG);

      int v320 = (unsigned __int8 *)(v67 + 4);
      if (v70) {
        break;
      }
LABEL_150:
      int32x4_t v407 = 0;
      unint64_t v406 = 0;
      unint64_t v408 = 0;
      uint64_t v324 = (unsigned __int16 *)(v67 + 5);
      if (*((_WORD *)v67 + 20) != 33)
      {
        uint64_t v76 = operator new(2uLL);
        *uint64_t v76 = 33;
        unint64_t v408 = v76 + 1;
        unint64_t v406 = v76;
        int32x4_t v407 = v76 + 1;
        int64_t v77 = 2;
        uint64_t v78 = 1;
LABEL_155:
        unint64_t v79 = (char *)operator new(v77);
        unsigned int v80 = (unsigned __int16 *)&v79[2 * v78];
        double v323 = (unsigned __int16 *)v79;
        memcpy(v79, v76, v77);
        goto LABEL_156;
      }
      std::vector<md::MapDataType>::__assign_with_size[abi:nn180100]<md::MapDataType*,md::MapDataType*>(&v406, *a4, a4[1], (a4[1] - *a4) >> 1);
      uint64_t v76 = v406;
      int64_t v77 = (unsigned char *)v407 - (unsigned char *)v406;
      if (v407 != v406)
      {
        if (v77 < 0) {
          abort();
        }
        uint64_t v78 = v77 >> 1;
        goto LABEL_155;
      }
      unsigned int v80 = 0;
      double v323 = 0;
LABEL_156:
      unint64_t v81 = v67[6];
      int v336 = *((_DWORD *)v81 + 1);
      int v335 = *(_DWORD *)v81;
      int v82 = *((_DWORD *)v81 + 2);
      int v83 = *((_DWORD *)v81 + 3);
      *(_OWORD *)&v426.__r_.__value_.__r.__words[1] = 0uLL;
      v426.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426.__r_.__value_.__l.__size_;
      unint64_t v84 = *(unsigned __int8 **)v321;
      unint64_t v85 = (unsigned __int8 *)*((void *)v321 + 1);
      unint64_t v326 = v67;
      if (*(unsigned __int8 **)v321 == v85)
      {
        uint8x8_t v87 = 0;
      }
      else
      {
        int8x8_t v86 = 0;
        int v317 = 0;
        uint8x8_t v87 = 0;
        char v329 = v82;
        unsigned int v333 = v82;
        do
        {
          if (*v84 == *v320 && *((unsigned __int16 *)v84 + 4) == *v324 && *((uint64_t **)v84 + 10) == v67[14])
          {
            long double v89 = (const void *)*((void *)v84 + 2);
            size_t v90 = *((void *)v84 + 3) - (void)v89;
            uint64_t v91 = v67[6];
            if (v90 == (char *)v67[7] - (char *)v91 && !memcmp(v89, v91, v90))
            {
              unint64_t v92 = v87;
              uint64_t v93 = *(unsigned __int8 **)v321;
              if (*(unsigned __int8 **)v321 != v85)
              {
                int v94 = v84[113];
                int v95 = *((_DWORD *)v84 + 29);
                int v96 = *((_DWORD *)v84 + 30);
                unsigned int v97 = v93 + 144;
                int v98 = v84[112];
                while (v93[112] != v98
                     || v93[113] != v94
                     || *((_DWORD *)v93 + 29) != v95
                     || *((_DWORD *)v93 + 30) != v96)
                {
                  v93 += 144;
                  v97 += 144;
                  if (v93 == v85) {
                    goto LABEL_164;
                  }
                }
                uint64_t v99 = v93;
                while (v97 != v85)
                {
                  unint64_t v100 = v97;
                  v99 += 144;
                  if (v97[112] != v98 || v97[113] != v94 || *((_DWORD *)v97 + 29) != v95)
                  {
                    unint64_t v100 = v99;
                    goto LABEL_187;
                  }
                  v97 += 144;
                  if (*((_DWORD *)v100 + 30) != v96) {
                    goto LABEL_187;
                  }
                }
                unint64_t v100 = v85;
LABEL_187:
                if (v317 < (unsigned __int8 **)v86)
                {
                  *int v317 = v93;
                  v317[1] = v100;
                  unint64_t v88 = v317 + 3;
                  v317[2] = v85;
                }
                else
                {
                  unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * (((char *)v317 - v92) >> 3) + 1;
                  if (v101 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_799;
                  }
                  if (0x5555555555555556 * ((v86 - v92) >> 3) > v101) {
                    unint64_t v101 = 0x5555555555555556 * ((v86 - v92) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((v86 - v92) >> 3) >= 0x555555555555555) {
                    unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v102 = v101;
                  }
                  if (v102)
                  {
                    if (v102 > 0xAAAAAAAAAAAAAAALL) {
LABEL_797:
                    }
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    uint64_t v103 = (char *)operator new(24 * v102);
                  }
                  else
                  {
                    uint64_t v103 = 0;
                  }
                  uint64_t v104 = (unsigned __int8 **)&v103[8 * (((char *)v317 - v92) >> 3)];
                  *uint64_t v104 = v93;
                  v104[1] = v100;
                  v104[2] = v85;
                  unint64_t v105 = (char *)v317;
                  if (v317 == (unsigned __int8 **)v92)
                  {
                    unint64_t v92 = &v103[8 * (((char *)v317 - v92) >> 3)];
                  }
                  else
                  {
                    uint64_t v106 = &v103[8 * (((char *)v317 - v92) >> 3)];
                    do
                    {
                      long long v107 = *(_OWORD *)(v105 - 24);
                      *((void *)v106 - 1) = *((void *)v105 - 1);
                      *(_OWORD *)(v106 - 24) = v107;
                      v106 -= 24;
                      v105 -= 24;
                    }
                    while (v105 != v92);
                    unint64_t v105 = v92;
                    unint64_t v92 = v106;
                  }
                  int8x8_t v86 = &v103[24 * v102];
                  unint64_t v88 = v104 + 3;
                  if (v105) {
                    operator delete(v105);
                  }
                }
                unint64_t v85 = (unsigned __int8 *)*((void *)v321 + 1);
                int v317 = v88;
              }
LABEL_164:
              uint8x8_t v87 = v92;
            }
          }
          v84 += 144;
        }
        while (v84 != v85);
        if (v87 != (char *)v317)
        {
          unint64_t v327 = (unsigned __int8 **)v87;
          do
          {
            if (v323 != v80)
            {
              for (int64_t i = *v327; i != v327[1]; i += 144)
              {
                BOOL v109 = v87;
                if (!*i)
                {
                  __double2 v110 = v323;
                  do
                  {
                    unsigned int v111 = *v110;
                    if (*((unsigned __int16 *)i + 4) != v111) {
                      goto LABEL_217;
                    }
                    long double v112 = (int *)*((void *)i + 2);
                    if (*((unsigned __int8 *)v112 + 12) != v83) {
                      goto LABEL_217;
                    }
                    int v113 = v112[1];
                    int v114 = v112[2];
                    int v115 = *v112;
                    if (v333 >= v114)
                    {
                      BOOL v117 = v333 == v114 && v336 == v113;
                    }
                    else
                    {
                      char v116 = v114 - v329;
                      v115 >>= v116;
                      BOOL v117 = v336 == v113 >> v116;
                    }
                    if (!v117 || v335 != v115) {
                      goto LABEL_217;
                    }
                    std::string::size_type size = v426.__r_.__value_.__l.__size_;
                    p_std::string::size_type size = &v426.__r_.__value_.__l.__size_;
LABEL_232:
                    for (uint64_t j = p_size; size; size = p_size[1])
                    {
                      p_std::string::size_type size = (std::string::size_type *)size;
                      unsigned int v122 = *(unsigned __int16 *)(size + 40);
                      if (v111 == v122)
                      {
                        if (*((void *)i + 10) == p_size[14]
                          && (size_t v123 = *((void *)i + 3) - (void)v112,
                              long double v124 = (const void *)p_size[6],
                              v123 == p_size[7] - (void)v124)
                          && !memcmp(v112, v124, v123))
                        {
                          if (*i < *((unsigned __int8 *)p_size + 32))
                          {
LABEL_231:
                            std::string::size_type size = *p_size;
                            goto LABEL_232;
                          }
                        }
                        else if (gdc::GenericKey::operator<((uint64_t)v112, *((void *)i + 3), p_size[6], p_size[7]))
                        {
                          goto LABEL_231;
                        }
                        if (p_size[14] == *((void *)i + 10)
                          && (float64x2_t v125 = (const void *)p_size[6],
                              size_t v126 = p_size[7] - (void)v125,
                              v126 == *((void *)i + 3) - (void)v112)
                          && !memcmp(v125, v112, v126))
                        {
                          if (*((unsigned __int8 *)p_size + 32) >= *i) {
                            goto LABEL_217;
                          }
                        }
                        else if (!gdc::GenericKey::operator<(p_size[6], p_size[7], (uint64_t)v112, *((void *)i + 3)))
                        {
                          goto LABEL_217;
                        }
                      }
                      else
                      {
                        if (v111 < v122) {
                          goto LABEL_231;
                        }
                        if (v122 >= v111) {
                          goto LABEL_217;
                        }
                      }
                      uint64_t j = p_size + 1;
                    }
                    unint64_t v127 = operator new(0x90uLL);
                    v127[32] = *i;
                    gdc::LayerDataKey::LayerDataKey((uint64_t)(v127 + 40), (uint64_t)(i + 8));
                    v127[128] = 0;
                    if (i[96])
                    {
                      *((_DWORD *)v127 + 33) = *((_DWORD *)i + 25);
                      v127[128] = 1;
                    }
                    *((void *)v127 + 17) = *((void *)i + 13);
                    *(void *)unint64_t v127 = 0;
                    *((void *)v127 + 1) = 0;
                    *((void *)v127 + 2) = p_size;
                    *uint64_t j = (std::string::size_type)v127;
                    if (*(void *)v426.__r_.__value_.__l.__data_)
                    {
                      v426.__r_.__value_.__r.__words[0] = *(void *)v426.__r_.__value_.__l.__data_;
                      unint64_t v127 = (unsigned char *)*j;
                    }
                    std::string::size_type v128 = v426.__r_.__value_.__l.__size_;
                    BOOL v117 = v127 == (unsigned char *)v426.__r_.__value_.__l.__size_;
                    v127[24] = v127 == (unsigned char *)v426.__r_.__value_.__l.__size_;
                    if (!v117)
                    {
                      do
                      {
                        uint64_t v129 = *((void *)v127 + 2);
                        if (*(unsigned char *)(v129 + 24)) {
                          break;
                        }
                        uint64_t v130 = *(unsigned char **)(v129 + 16);
                        uint64_t v131 = *(void *)v130;
                        if (*(void *)v130 == v129)
                        {
                          uint64_t v134 = *((void *)v130 + 1);
                          if (!v134 || (v135 = *(unsigned __int8 *)(v134 + 24), uint64_t v132 = (unsigned char *)(v134 + 24), v135))
                          {
                            if (*(unsigned char **)v129 == v127)
                            {
                              unsigned int v136 = (uint64_t *)*((void *)v127 + 2);
                            }
                            else
                            {
                              unsigned int v136 = *(uint64_t **)(v129 + 8);
                              uint64_t v137 = *v136;
                              *(void *)(v129 + 8) = *v136;
                              if (v137)
                              {
                                *(void *)(v137 + 16) = v129;
                                uint64_t v130 = *(unsigned char **)(v129 + 16);
                              }
                              v136[2] = (uint64_t)v130;
                              *(void *)(*(void *)(v129 + 16) + 8 * (**(void **)(v129 + 16) != v129)) = v136;
                              *unsigned int v136 = v129;
                              *(void *)(v129 + 16) = v136;
                              uint64_t v130 = (unsigned char *)v136[2];
                              uint64_t v129 = *(void *)v130;
                            }
                            *((unsigned char *)v136 + 24) = 1;
                            v130[24] = 0;
                            uint64_t v140 = *(void *)(v129 + 8);
                            *(void *)uint64_t v130 = v140;
                            if (v140) {
                              *(void *)(v140 + 16) = v130;
                            }
                            *(void *)(v129 + 16) = *((void *)v130 + 2);
                            *(void *)(*((void *)v130 + 2) + 8 * (**((void **)v130 + 2) != (void)v130)) = v129;
                            *(void *)(v129 + 8) = v130;
                            goto LABEL_215;
                          }
                        }
                        else if (!v131 || (v133 = *(unsigned __int8 *)(v131 + 24), uint64_t v132 = (unsigned char *)(v131 + 24), v133))
                        {
                          if (*(unsigned char **)v129 == v127)
                          {
                            uint64_t v138 = *((void *)v127 + 1);
                            *(void *)uint64_t v129 = v138;
                            if (v138)
                            {
                              *(void *)(v138 + 16) = v129;
                              uint64_t v130 = *(unsigned char **)(v129 + 16);
                            }
                            *((void *)v127 + 2) = v130;
                            *(void *)(*(void *)(v129 + 16) + 8 * (**(void **)(v129 + 16) != v129)) = v127;
                            *((void *)v127 + 1) = v129;
                            *(void *)(v129 + 16) = v127;
                            uint64_t v130 = (unsigned char *)*((void *)v127 + 2);
                          }
                          else
                          {
                            unint64_t v127 = (unsigned char *)*((void *)v127 + 2);
                          }
                          v127[24] = 1;
                          v130[24] = 0;
                          uint64_t v129 = *((void *)v130 + 1);
                          double v139 = *(unsigned char **)v129;
                          *((void *)v130 + 1) = *(void *)v129;
                          if (v139) {
                            *((void *)v139 + 2) = v130;
                          }
                          *(void *)(v129 + 16) = *((void *)v130 + 2);
                          *(void *)(*((void *)v130 + 2) + 8 * (**((void **)v130 + 2) != (void)v130)) = v129;
                          *(void *)uint64_t v129 = v130;
LABEL_215:
                          *((void *)v130 + 2) = v129;
                          break;
                        }
                        *(unsigned char *)(v129 + 24) = 1;
                        unint64_t v127 = v130;
                        v130[24] = v130 == (unsigned char *)v128;
                        unsigned char *v132 = 1;
                      }
                      while (v130 != (unsigned char *)v128);
                    }
                    ++v426.__r_.__value_.__r.__words[2];
LABEL_217:
                    ++v110;
                  }
                  while (v110 != v80);
                }
                uint64_t v67 = v326;
                uint8x8_t v87 = v109;
              }
            }
            v327 += 3;
          }
          while (v327 != v317);
        }
      }
      std::string::size_type v141 = v426.__r_.__value_.__r.__words[0];
      unint64_t v405 = 0;
      unint64_t v403 = 0;
      unint64_t v404 = 0;
      uint64_t v5 = (int64x2_t *)a1;
      if ((std::string::size_type *)v426.__r_.__value_.__l.__data_ == &v426.__r_.__value_.__r.__words[1])
      {
        int v147 = v87;
        int v148 = 0;
        if (!v147) {
          goto LABEL_303;
        }
      }
      else
      {
        unint64_t v142 = 0;
        std::string::size_type v143 = v426.__r_.__value_.__r.__words[0];
        do
        {
          unint64_t v144 = v142;
          uint64_t v145 = *(std::string **)(v143 + 8);
          if (v145)
          {
            do
            {
              uint64_t v146 = v145;
              uint64_t v145 = (std::string *)v145->__r_.__value_.__r.__words[0];
            }
            while (v145);
          }
          else
          {
            do
            {
              uint64_t v146 = *(std::string **)(v143 + 16);
              BOOL v117 = v146->__r_.__value_.__r.__words[0] == v143;
              std::string::size_type v143 = (std::string::size_type)v146;
            }
            while (!v117);
          }
          ++v142;
          std::string::size_type v143 = (std::string::size_type)v146;
        }
        while (v146 != (std::string *)&v426.__r_.__value_.__r.__words[1]);
        int v147 = v87;
        if (v144 >= 0x249249249249249) {
          abort();
        }
        int v148 = (char *)operator new(112 * v142);
        unint64_t v403 = v148;
        unint64_t v404 = v148;
        unint64_t v405 = &v148[112 * v142];
        do
        {
          *int v148 = *(unsigned char *)(v141 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v148 + 8), v141 + 40);
          v148[96] = 0;
          if (*(unsigned char *)(v141 + 128))
          {
            *((_DWORD *)v148 + 25) = *(_DWORD *)(v141 + 132);
            v148[96] = 1;
          }
          *((void *)v148 + 13) = *(void *)(v141 + 136);
          uint64_t v149 = *(std::string **)(v141 + 8);
          if (v149)
          {
            do
            {
              uint64_t v150 = v149;
              uint64_t v149 = (std::string *)v149->__r_.__value_.__r.__words[0];
            }
            while (v149);
          }
          else
          {
            do
            {
              uint64_t v150 = *(std::string **)(v141 + 16);
              BOOL v117 = v150->__r_.__value_.__r.__words[0] == v141;
              std::string::size_type v141 = (std::string::size_type)v150;
            }
            while (!v117);
          }
          v148 += 112;
          std::string::size_type v141 = (std::string::size_type)v150;
        }
        while (v150 != (std::string *)&v426.__r_.__value_.__r.__words[1]);
        unint64_t v404 = v148;
        if (!v147) {
          goto LABEL_303;
        }
      }
      operator delete(v147);
LABEL_303:
      std::__tree<gdc::LayerDataRequestKey>::destroy((void *)v426.__r_.__value_.__l.__size_);
      if (v323) {
        operator delete(v323);
      }
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
      }
      int v151 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      BOOL v152 = os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG);

      if (v152)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
        }
        uint64_t v153 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v154 = &v426;
          if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v154 = (std::string *)v426.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)unint64_t v442 = 136315138;
          *(void *)&v442[4] = v154;
          _os_log_impl(&dword_1A1780000, v153, OS_LOG_TYPE_DEBUG, "smaller keys covering: %s", v442, 0xCu);
          if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v426.__r_.__value_.__l.__data_);
          }
        }
      }
      uint64_t v155 = (char *)v403;
      double v156 = 0.0;
      if (v403 != v148)
      {
        unint64_t v157 = (char *)v403;
        do
        {
          v426.__r_.__value_.__s.__data_[0] = *v157;
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)(v157 + 8));
          char v431 = 0;
          if (v157[96])
          {
            int v432 = *((_DWORD *)v157 + 25);
            char v431 = 1;
          }
          unint64_t v433 = *((void *)v157 + 13);
          v390[0] = *((unsigned char *)v67 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v391, (uint64_t)v324);
          char v394 = 0;
          if (*((unsigned char *)v67 + 128))
          {
            int v395 = *((_DWORD *)v67 + 33);
            char v394 = 1;
          }
          long long v396 = v67[17];
          v383[0] = v426.__r_.__value_.__s.__data_[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v384, (uint64_t)&v426.__r_.__value_.__l.__size_);
          char v387 = 0;
          if (v431)
          {
            int v388 = v432;
            char v387 = 1;
          }
          unint64_t v389 = v433;
          v442[0] = *((unsigned char *)v67 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v442[8], (uint64_t)v324);
          char v447 = 0;
          if (*((unsigned char *)v67 + 128))
          {
            int v448 = *((_DWORD *)v67 + 33);
            char v447 = 1;
          }
          unint64_t v449 = (unint64_t)v67[17];
          memset(&v436, 0, sizeof(v436));
          uint64_t v158 = operator new(0x70uLL);
          v436.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
          v436.__r_.__value_.__l.__size_ = (std::string::size_type)v158;
          v436.__r_.__value_.__r.__words[2] = (std::string::size_type)(v158 + 112);
          unsigned char *v158 = v442[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v158 + 8), (uint64_t)&v442[8]);
          v158[96] = 0;
          if (v447)
          {
            *((_DWORD *)v158 + 25) = v448;
            v158[96] = 1;
          }
          *((void *)v158 + 13) = v449;
          v436.__r_.__value_.__l.__size_ = (std::string::size_type)(v158 + 112);
          buf[0] = v426.__r_.__value_.__s.__data_[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)&v426.__r_.__value_.__l.__size_);
          char v439 = 0;
          if (v431)
          {
            int v440 = v432;
            char v439 = 1;
          }
          unint64_t v441 = v433;
          unint64_t v418 = 0;
          long long v417 = 0uLL;
          uint64_t v159 = (char *)operator new(0x70uLL);
          *(void *)&long long v417 = v159;
          *((void *)&v417 + 1) = v159;
          unint64_t v418 = v159 + 112;
          char *v159 = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v159 + 8), (uint64_t)&buf[8]);
          v159[96] = 0;
          if (v439)
          {
            *((_DWORD *)v159 + 25) = v440;
            v159[96] = 1;
          }
          *((void *)v159 + 13) = v441;
          *((void *)&v417 + 1) = v159 + 112;
          double v162 = md::DrapingLogic::_evaluateCoverageOfTilePairs(a1, (uint64_t)v390, (uint64_t)v383, (unsigned __int16 **)&v436, (unsigned __int16 **)&v417, v160, v161);
          uint64_t v163 = v417;
          if ((void)v417)
          {
            uint64_t v164 = *((void *)&v417 + 1);
            int v165 = (void *)v417;
            if (*((void *)&v417 + 1) != (void)v417)
            {
              do
              {
                if (*(unsigned char *)(v164 - 16)) {
                  *(unsigned char *)(v164 - 16) = 0;
                }
                int v166 = *(void **)(v164 - 96);
                if (v166 != *(void **)(v164 - 80)) {
                  free(v166);
                }
                v164 -= 112;
              }
              while (v164 != v163);
              int v165 = (void *)v417;
            }
            *((void *)&v417 + 1) = v163;
            operator delete(v165);
          }
          if (v439) {
            char v439 = 0;
          }
          if (*(void *)&buf[16] != v438) {
            free(*(void **)&buf[16]);
          }
          std::string::size_type v167 = v436.__r_.__value_.__r.__words[0];
          if (v436.__r_.__value_.__r.__words[0])
          {
            std::string::size_type v168 = v436.__r_.__value_.__l.__size_;
            uint64_t v169 = (void *)v436.__r_.__value_.__r.__words[0];
            if (v436.__r_.__value_.__l.__size_ != v436.__r_.__value_.__r.__words[0])
            {
              do
              {
                if (*(unsigned char *)(v168 - 16)) {
                  *(unsigned char *)(v168 - 16) = 0;
                }
                uint64_t v170 = *(void **)(v168 - 96);
                if (v170 != *(void **)(v168 - 80)) {
                  free(v170);
                }
                v168 -= 112;
              }
              while (v168 != v167);
              uint64_t v169 = (void *)v436.__r_.__value_.__r.__words[0];
            }
            v436.__r_.__value_.__l.__size_ = v167;
            operator delete(v169);
          }
          if (v447) {
            char v447 = 0;
          }
          if (v443 != v445) {
            free(v443);
          }
          if (v387) {
            char v387 = 0;
          }
          if (v385 != v386) {
            free(v385);
          }
          if (v394) {
            char v394 = 0;
          }
          if (v392 != v393) {
            free(v392);
          }
          if (v431) {
            char v431 = 0;
          }
          if (v426.__r_.__value_.__r.__words[2] != v428) {
            free((void *)v426.__r_.__value_.__r.__words[2]);
          }
          double v156 = v162 + v156;
          v157 += 112;
        }
        while (v157 != v148);
      }
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
      }
      int v171 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      if (os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v426.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)v426.__r_.__value_.__r.__words + 4) = v156;
        _os_log_impl(&dword_1A1780000, v171, OS_LOG_TYPE_DEBUG, "Current Coverage: %f", (uint8_t *)&v426, 0xCu);
      }

      memset(&v436, 0, sizeof(v436));
      char v172 = v404;
      for (uint64_t k = v155; k != v172; k += 112)
      {
        v442[0] = *k;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v442[8], (uint64_t)(k + 8));
        char v447 = 0;
        if (k[96])
        {
          int v448 = *((_DWORD *)k + 25);
          char v447 = 1;
        }
        unint64_t v449 = *((void *)k + 13);
        uint64_t v180 = (unsigned __int8 *)v67[18];
        uint64_t v181 = (unsigned __int8 *)v67[19];
        if (v180 == v181)
        {
          uint64_t v181 = (unsigned __int8 *)v67[18];
        }
        else
        {
          int v182 = v442[0];
          int v183 = *(unsigned __int16 *)&v442[8];
          uint64_t v184 = v446;
          int v185 = v443;
          size_t v186 = v444 - (void)v443;
          while (1)
          {
            if (*v180 == v182 && *((unsigned __int16 *)v180 + 4) == v183 && *((void *)v180 + 10) == v184)
            {
              int v187 = (const void *)*((void *)v180 + 2);
              if (*((void *)v180 + 3) - (void)v187 == v186 && !memcmp(v187, v185, v186)) {
                break;
              }
            }
            v180 += 112;
            if (v180 == v181)
            {
              uint64_t v180 = v181;
              break;
            }
          }
          uint64_t v5 = (int64x2_t *)a1;
          uint64_t v67 = v326;
        }
        v376[0] = *((unsigned char *)v67 + 32);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v377, (uint64_t)v324);
        char v380 = 0;
        if (*((unsigned char *)v67 + 128))
        {
          int v381 = *((_DWORD *)v67 + 33);
          char v380 = 1;
        }
        unint64_t v382 = v67[17];
        v369[0] = v442[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v370, (uint64_t)&v442[8]);
        char v373 = 0;
        if (v447)
        {
          int v374 = v448;
          char v373 = 1;
        }
        unint64_t v375 = v449;
        buf[0] = *((unsigned char *)v67 + 32);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)v324);
        char v439 = 0;
        if (*((unsigned char *)v67 + 128))
        {
          int v440 = *((_DWORD *)v67 + 33);
          char v439 = 1;
        }
        unint64_t v441 = (unint64_t)v67[17];
        unint64_t v418 = 0;
        long long v417 = 0uLL;
        uint64_t v188 = (char *)operator new(0x70uLL);
        *(void *)&long long v417 = v188;
        *((void *)&v417 + 1) = v188;
        unint64_t v418 = v188 + 112;
        *uint64_t v188 = buf[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v188 + 8), (uint64_t)&buf[8]);
        v188[96] = 0;
        if (v439)
        {
          *((_DWORD *)v188 + 25) = v440;
          v188[96] = 1;
        }
        *((void *)v188 + 13) = v441;
        *((void *)&v417 + 1) = v188 + 112;
        if (v180 == v181)
        {
          uint8_t v419 = v442[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v420, (uint64_t)&v442[8]);
          char v423 = 0;
          if (v447)
          {
            int v424 = v448;
            char v423 = 1;
          }
          unint64_t v425 = v449;
          unint64_t v368 = 0;
          long double v366 = 0;
          unint64_t v367 = 0;
          int v197 = operator new(0x70uLL);
          long double v366 = v197;
          unint64_t v367 = (atomic_ullong *)v197;
          unint64_t v368 = v197 + 112;
          *int v197 = v419;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v197 + 8), (uint64_t)&v420);
          v197[96] = 0;
          if (v423)
          {
            *((_DWORD *)v197 + 25) = v424;
            v197[96] = 1;
          }
          *((void *)v197 + 13) = v425;
          unint64_t v367 = (atomic_ullong *)(v197 + 112);
        }
        else
        {
          uint64_t v189 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v318, v442);
          if (!v189) {
            goto LABEL_418;
          }
          int v192 = (unsigned __int16 *)*((void *)v321 + 3);
          int v193 = (unsigned __int16 *)*((void *)v321 + 4);
          if (v192 != v193)
          {
            while (*v192 != *(unsigned __int16 *)&v442[8])
            {
              v192 += 16;
              if (v192 == v193)
              {
                int v192 = (unsigned __int16 *)*((void *)v321 + 4);
                break;
              }
            }
          }
          unint64_t v194 = (unint64_t)v189[16];
          int v196 = v192 + 4;
          uint64_t v195 = *((void *)v192 + 1);
          if (0x8E38E38E38E38E39 * ((*((void *)v196 + 1) - v195) >> 4) <= v194) {
            goto LABEL_799;
          }
          if (*(unsigned char *)(v195 + 144 * v194 + 132))
          {
            unint64_t v367 = 0;
            long double v366 = 0;
            unint64_t v368 = 0;
          }
          else
          {
LABEL_418:
            v426.__r_.__value_.__s.__data_[0] = v442[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)&v442[8]);
            char v431 = 0;
            if (v447)
            {
              int v432 = v448;
              char v431 = 1;
            }
            unint64_t v433 = v449;
            md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)&v366, v5, (uint64_t)&v426, v316);
            if (v431) {
              char v431 = 0;
            }
            if (v426.__r_.__value_.__r.__words[2] != v428) {
              free((void *)v426.__r_.__value_.__r.__words[2]);
            }
          }
        }
        double v198 = md::DrapingLogic::_evaluateCoverageOfTilePairs((uint64_t)v5, (uint64_t)v376, (uint64_t)v369, (unsigned __int16 **)&v417, (unsigned __int16 **)&v366, v190, v191);
        *(double *)&v436.__r_.__value_.__l.__data_ = *(double *)&v436.__r_.__value_.__l.__data_ + v198;
        uint64_t v199 = (atomic_ullong *)v366;
        if (v366)
        {
          uint64_t v200 = v367;
          uint64_t v201 = v366;
          if (v367 != v366)
          {
            do
            {
              if (*((unsigned char *)v200 - 16)) {
                *((unsigned char *)v200 - 16) = 0;
              }
              uint64_t v202 = (void *)*(v200 - 12);
              if (v202 != (void *)*(v200 - 10)) {
                free(v202);
              }
              v200 -= 14;
            }
            while (v200 != v199);
            uint64_t v201 = v366;
          }
          unint64_t v367 = v199;
          operator delete(v201);
        }
        if (v180 == v181)
        {
          if (v423) {
            char v423 = 0;
          }
          if (v421 != v422) {
            free(v421);
          }
        }
        uint64_t v203 = v417;
        if ((void)v417)
        {
          uint64_t v204 = *((void *)&v417 + 1);
          long long v205 = (void *)v417;
          if (*((void *)&v417 + 1) != (void)v417)
          {
            do
            {
              if (*(unsigned char *)(v204 - 16)) {
                *(unsigned char *)(v204 - 16) = 0;
              }
              long long v206 = *(void **)(v204 - 96);
              if (v206 != *(void **)(v204 - 80)) {
                free(v206);
              }
              v204 -= 112;
            }
            while (v204 != v203);
            long long v205 = (void *)v417;
          }
          *((void *)&v417 + 1) = v203;
          operator delete(v205);
        }
        if (v439) {
          char v439 = 0;
        }
        if (*(void *)&buf[16] != v438) {
          free(*(void **)&buf[16]);
        }
        if (v373) {
          char v373 = 0;
        }
        if (v371 != v372) {
          free(v371);
        }
        if (v380) {
          char v380 = 0;
        }
        if (v378 != v379) {
          free(v378);
        }
        if (v447) {
          char v447 = 0;
        }
        if (v443 != v445) {
          free(v443);
        }
      }
      uint64_t v174 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v318, v320);
      if (!v174) {
        goto LABEL_470;
      }
      uint64_t v175 = (unsigned __int16 *)*((void *)v321 + 3);
      unint64_t v176 = (unsigned __int16 *)*((void *)v321 + 4);
      if (v175 != v176)
      {
        while (*v175 != *v324)
        {
          v175 += 16;
          if (v175 == v176)
          {
            uint64_t v175 = (unsigned __int16 *)*((void *)v321 + 4);
            break;
          }
        }
      }
      unint64_t v177 = (unint64_t)v174[16];
      uint64_t v179 = v175 + 4;
      uint64_t v178 = *((void *)v175 + 1);
      if (0x8E38E38E38E38E39 * ((*((void *)v179 + 1) - v178) >> 4) <= v177) {
LABEL_799:
      }
        abort();
      if (*(unsigned char *)(v178 + 144 * v177 + 132))
      {
        memset(buf, 0, 24);
      }
      else
      {
LABEL_470:
        v426.__r_.__value_.__s.__data_[0] = *((unsigned char *)v67 + 32);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)v324);
        char v431 = 0;
        if (*((unsigned char *)v67 + 128))
        {
          int v432 = *((_DWORD *)v67 + 33);
          char v431 = 1;
        }
        unint64_t v433 = (unint64_t)v67[17];
        md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)buf, v5, (uint64_t)&v426, v316);
        if (v431) {
          char v431 = 0;
        }
        if (v426.__r_.__value_.__r.__words[2] != v428) {
          free((void *)v426.__r_.__value_.__r.__words[2]);
        }
      }
      if (*(void *)&buf[8] != *(void *)buf)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
        }
        uint64_t v207 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        BOOL v208 = os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG);

        if (v208)
        {
          if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
          }
          int v209 = (id)GEOGetVectorKitDrapingFallbackLog_log;
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG))
          {
            int v210 = &v426;
            if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v210 = (std::string *)v426.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)unint64_t v442 = 136315138;
            *(void *)&v442[4] = v210;
            _os_log_impl(&dword_1A1780000, v209, OS_LOG_TYPE_DEBUG, "larger fallback keys: %s", v442, 0xCu);
            if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v426.__r_.__value_.__l.__data_);
            }
          }
        }
        if (v155 != v172)
        {
          do
          {
            v426.__r_.__value_.__s.__data_[0] = *v155;
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)(v155 + 8));
            char v431 = 0;
            if (v155[96])
            {
              int v432 = *((_DWORD *)v155 + 25);
              char v431 = 1;
            }
            unint64_t v433 = *((void *)v155 + 13);
            v359[0] = *((unsigned char *)v67 + 32);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v360, (uint64_t)v324);
            char v363 = 0;
            if (*((unsigned char *)v67 + 128))
            {
              int v364 = *((_DWORD *)v67 + 33);
              char v363 = 1;
            }
            long double v365 = v67[17];
            v352[0] = v426.__r_.__value_.__s.__data_[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v353, (uint64_t)&v426.__r_.__value_.__l.__size_);
            char v356 = 0;
            if (v431)
            {
              int v357 = v432;
              char v356 = 1;
            }
            unint64_t v358 = v433;
            v442[0] = v426.__r_.__value_.__s.__data_[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v442[8], (uint64_t)&v426.__r_.__value_.__l.__size_);
            char v447 = 0;
            if (v431)
            {
              int v448 = v432;
              char v447 = 1;
            }
            unint64_t v449 = v433;
            unint64_t v418 = 0;
            long long v417 = 0uLL;
            int v219 = (char *)operator new(0x70uLL);
            *(void *)&long long v417 = v219;
            *((void *)&v417 + 1) = v219;
            unint64_t v418 = v219 + 112;
            *int v219 = v442[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)(v219 + 8), (uint64_t)&v442[8]);
            v219[96] = 0;
            if (v447)
            {
              *((_DWORD *)v219 + 25) = v448;
              v219[96] = 1;
            }
            *((void *)v219 + 13) = v449;
            *((void *)&v417 + 1) = v219 + 112;
            double v222 = md::DrapingLogic::_evaluateCoverageOfTilePairs((uint64_t)v5, (uint64_t)v359, (uint64_t)v352, (unsigned __int16 **)buf, (unsigned __int16 **)&v417, v220, v221);
            *(double *)&v436.__r_.__value_.__l.__size_ = *(double *)&v436.__r_.__value_.__l.__size_ + v222;
            uint64_t v223 = v417;
            if ((void)v417)
            {
              uint64_t v224 = *((void *)&v417 + 1);
              int v225 = (void *)v417;
              if (*((void *)&v417 + 1) != (void)v417)
              {
                do
                {
                  if (*(unsigned char *)(v224 - 16)) {
                    *(unsigned char *)(v224 - 16) = 0;
                  }
                  int v226 = *(void **)(v224 - 96);
                  if (v226 != *(void **)(v224 - 80)) {
                    free(v226);
                  }
                  v224 -= 112;
                }
                while (v224 != v223);
                int v225 = (void *)v417;
              }
              *((void *)&v417 + 1) = v223;
              operator delete(v225);
            }
            if (v447) {
              char v447 = 0;
            }
            if (v443 != v445) {
              free(v443);
            }
            if (v356) {
              char v356 = 0;
            }
            if (v354 != v355) {
              free(v354);
            }
            if (v363) {
              char v363 = 0;
            }
            if (v361 != v362) {
              free(v361);
            }
            if (v431) {
              char v431 = 0;
            }
            if (v426.__r_.__value_.__r.__words[2] != v428) {
              free((void *)v426.__r_.__value_.__r.__words[2]);
            }
            v155 += 112;
          }
          while (v155 != v172);
          for (uint64_t m = (char *)v403; m != v172; m += 112)
          {
            v442[0] = *m;
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v442[8], (uint64_t)(m + 8));
            char v447 = 0;
            if (m[96])
            {
              int v448 = *((_DWORD *)m + 25);
              char v447 = 1;
            }
            unint64_t v449 = *((void *)m + 13);
            int v238 = (unsigned __int8 *)v67[18];
            int v239 = (unsigned __int8 *)v67[19];
            if (v238 == v239)
            {
              int v239 = (unsigned __int8 *)v67[18];
            }
            else
            {
              int v240 = v442[0];
              int v241 = *(unsigned __int16 *)&v442[8];
              uint64_t v242 = v446;
              int v243 = v443;
              size_t v244 = v444 - (void)v443;
              while (1)
              {
                if (*v238 == v240 && *((unsigned __int16 *)v238 + 4) == v241 && *((void *)v238 + 10) == v242)
                {
                  int v245 = (const void *)*((void *)v238 + 2);
                  if (*((void *)v238 + 3) - (void)v245 == v244 && !memcmp(v245, v243, v244)) {
                    break;
                  }
                }
                v238 += 112;
                if (v238 == v239)
                {
                  int v238 = v239;
                  break;
                }
              }
              uint64_t v67 = v326;
            }
            v345[0] = *((unsigned char *)v67 + 32);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v346, (uint64_t)v324);
            char v349 = 0;
            if (*((unsigned char *)v67 + 128))
            {
              int v350 = *((_DWORD *)v67 + 33);
              char v349 = 1;
            }
            unint64_t v351 = v67[17];
            v338[0] = v442[0];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v339, (uint64_t)&v442[8]);
            char v342 = 0;
            if (v447)
            {
              int v343 = v448;
              char v342 = 1;
            }
            unint64_t v344 = v449;
            if (v238 == v239)
            {
              LOBYTE(v41CGContextBeginTransparencyLayer(this[1], 0) = v442[0];
              gdc::LayerDataKey::LayerDataKey((uint64_t)&v411, (uint64_t)&v442[8]);
              char v414 = 0;
              if (v447)
              {
                int v415 = v448;
                char v414 = 1;
              }
              unint64_t v416 = v449;
              unint64_t v418 = 0;
              long long v417 = 0uLL;
              int v254 = (char *)operator new(0x70uLL);
              *(void *)&long long v417 = v254;
              *((void *)&v417 + 1) = v254;
              unint64_t v418 = v254 + 112;
              *int v254 = (char)v410;
              gdc::LayerDataKey::LayerDataKey((uint64_t)(v254 + 8), (uint64_t)&v411);
              v254[96] = 0;
              if (v414)
              {
                *((_DWORD *)v254 + 25) = v415;
                v254[96] = 1;
              }
              *((void *)v254 + 13) = v416;
              *((void *)&v417 + 1) = v254 + 112;
            }
            else
            {
              int v246 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v318, v442);
              if (!v246) {
                goto LABEL_607;
              }
              int v249 = (unsigned __int16 *)*((void *)v321 + 3);
              int v250 = (unsigned __int16 *)*((void *)v321 + 4);
              if (v249 != v250)
              {
                while (*v249 != *(unsigned __int16 *)&v442[8])
                {
                  v249 += 16;
                  if (v249 == v250)
                  {
                    int v249 = (unsigned __int16 *)*((void *)v321 + 4);
                    break;
                  }
                }
              }
              unint64_t v251 = (unint64_t)v246[16];
              int v253 = v249 + 4;
              uint64_t v252 = *((void *)v249 + 1);
              if (0x8E38E38E38E38E39 * ((*((void *)v253 + 1) - v252) >> 4) <= v251) {
                goto LABEL_799;
              }
              if (*(unsigned char *)(v252 + 144 * v251 + 132))
              {
                long long v417 = 0uLL;
                unint64_t v418 = 0;
              }
              else
              {
LABEL_607:
                v426.__r_.__value_.__s.__data_[0] = v442[0];
                gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)&v442[8]);
                char v431 = 0;
                if (v447)
                {
                  int v432 = v448;
                  char v431 = 1;
                }
                unint64_t v433 = v449;
                md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)&v417, v5, (uint64_t)&v426, v316);
                if (v431) {
                  char v431 = 0;
                }
                if (v426.__r_.__value_.__r.__words[2] != v428) {
                  free((void *)v426.__r_.__value_.__r.__words[2]);
                }
              }
            }
            double v255 = md::DrapingLogic::_evaluateCoverageOfTilePairs((uint64_t)v5, (uint64_t)v345, (uint64_t)v338, (unsigned __int16 **)buf, (unsigned __int16 **)&v417, v247, v248);
            *(double *)&v436.__r_.__value_.__r.__words[2] = *(double *)&v436.__r_.__value_.__r.__words[2] + v255;
            uint64_t v256 = v417;
            if ((void)v417)
            {
              uint64_t v257 = *((void *)&v417 + 1);
              int v258 = (void *)v417;
              if (*((void *)&v417 + 1) != (void)v417)
              {
                do
                {
                  if (*(unsigned char *)(v257 - 16)) {
                    *(unsigned char *)(v257 - 16) = 0;
                  }
                  int v259 = *(void **)(v257 - 96);
                  if (v259 != *(void **)(v257 - 80)) {
                    free(v259);
                  }
                  v257 -= 112;
                }
                while (v257 != v256);
                int v258 = (void *)v417;
              }
              *((void *)&v417 + 1) = v256;
              operator delete(v258);
            }
            if (v238 == v239)
            {
              if (v414) {
                char v414 = 0;
              }
              if (v412 != v413) {
                free(v412);
              }
            }
            if (v342) {
              char v342 = 0;
            }
            if (v340 != v341) {
              free(v340);
            }
            if (v349) {
              char v349 = 0;
            }
            if (v347 != v348) {
              free(v347);
            }
            if (v447) {
              char v447 = 0;
            }
            if (v443 != v445) {
              free(v443);
            }
          }
        }
      }
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
      }
      int v211 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      if (os_log_type_enabled(v211, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v426.__r_.__value_.__l.__data_) = 134218496;
        *(std::string::size_type *)((char *)v426.__r_.__value_.__r.__words + 4) = v436.__r_.__value_.__r.__words[0];
        WORD2(v426.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v426.__r_.__value_.__r.__words[1] + 6) = v436.__r_.__value_.__l.__size_;
        HIWORD(v426.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v427 = v436.__r_.__value_.__r.__words[2];
        _os_log_impl(&dword_1A1780000, v211, OS_LOG_TYPE_DEBUG, "Coverage for fallback smaller: %f  fallback larger: %f  Fallback smaller and larger: %f", (uint8_t *)&v426, 0x20u);
      }

      double v212 = fmax(*(double *)&v436.__r_.__value_.__l.__data_, *(double *)&v436.__r_.__value_.__l.__size_);
      int v213 = (std::string *)&v436.__r_.__value_.__r.__words[1];
      if (*(double *)&v436.__r_.__value_.__l.__data_ >= *(double *)&v436.__r_.__value_.__l.__size_) {
        int v213 = &v436;
      }
      uint64_t v214 = 16;
      if (v212 >= *(double *)&v436.__r_.__value_.__r.__words[2]) {
        uint64_t v214 = 8 * (*(double *)&v436.__r_.__value_.__l.__data_ < *(double *)&v436.__r_.__value_.__l.__size_);
      }
      int v215 = (std::string *)&v436.__r_.__value_.__r.__words[2];
      if (v212 >= *(double *)&v436.__r_.__value_.__r.__words[2]) {
        int v215 = v213;
      }
      float v216 = *(double *)((char *)&v436.__r_.__value_.__l.__data_ + v214);
      if (v156 >= v216)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
        }
        int v227 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v426.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A1780000, v227, OS_LOG_TYPE_DEBUG, "failed to fill hole!", (uint8_t *)&v426, 2u);
        }

        goto LABEL_550;
      }
      uint64_t v217 = ((char *)v215 - (char *)&v436) >> 3;
      if (v217 == 2)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
        }
        int v262 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v262, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v426.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A1780000, v262, OS_LOG_TYPE_DEBUG, "Filled hole by falling back both tiles of pair", (uint8_t *)&v426, 2u);
        }

        std::vector<gdc::LayerDataRequestKey>::__insert_with_size[abi:nn180100]<std::__wrap_iter<gdc::LayerDataRequestKey const*>,std::__wrap_iter<gdc::LayerDataRequestKey const*>>(&v397, (uint64_t)v398, (uint64_t)v67[18], (uint64_t)v67[19], 0x6DB6DB6DB6DB6DB7 * (((char *)v67[19] - (char *)v67[18]) >> 4));
        int v261 = v398;
        if ((unint64_t)v398 < v399)
        {
LABEL_658:
          *int v261 = *((unsigned char *)v67 + 32);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v261 + 8), (uint64_t)v324);
          v261[96] = 0;
          if (*((unsigned char *)v67 + 128))
          {
            *((_DWORD *)v261 + 25) = *((_DWORD *)v67 + 33);
            v261[96] = 1;
          }
          *((void *)v261 + 13) = v67[17];
          double v398 = v261 + 112;
          goto LABEL_550;
        }
      }
      else
      {
        if (v217 != 1)
        {
          if (!v217)
          {
            if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
            }
            int v218 = (id)GEOGetVectorKitDrapingFallbackLog_log;
            if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(v426.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1A1780000, v218, OS_LOG_TYPE_DEBUG, "Filled hole by falling back smaller tile of pair", (uint8_t *)&v426, 2u);
            }

            std::vector<gdc::LayerDataRequestKey>::__insert_with_size[abi:nn180100]<std::__wrap_iter<gdc::LayerDataRequestKey const*>,std::__wrap_iter<gdc::LayerDataRequestKey const*>>(&v397, (uint64_t)v398, (uint64_t)v67[18], (uint64_t)v67[19], 0x6DB6DB6DB6DB6DB7 * (((char *)v67[19] - (char *)v67[18]) >> 4));
          }
          goto LABEL_550;
        }
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
        }
        int v260 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v426.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1A1780000, v260, OS_LOG_TYPE_DEBUG, "Filled hole by falling back larger tile of pair", (uint8_t *)&v426, 2u);
        }

        int v261 = v398;
        if ((unint64_t)v398 < v399) {
          goto LABEL_658;
        }
      }
      double v398 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(&v397, (uint64_t)v320);
LABEL_550:
      uint64_t v228 = *(void *)buf;
      if (*(void *)buf)
      {
        uint64_t v229 = *(void *)&buf[8];
        int v230 = *(void **)buf;
        if (*(void *)&buf[8] != *(void *)buf)
        {
          do
          {
            if (*(unsigned char *)(v229 - 16)) {
              *(unsigned char *)(v229 - 16) = 0;
            }
            int v231 = *(void **)(v229 - 96);
            if (v231 != *(void **)(v229 - 80)) {
              free(v231);
            }
            v229 -= 112;
          }
          while (v229 != v228);
          int v230 = *(void **)buf;
        }
        *(void *)&buf[8] = v228;
        operator delete(v230);
      }
      int v232 = (char *)v403;
      if (v403)
      {
        for (n = v404; n != v232; n -= 112)
        {
          if (*(n - 16)) {
            *(n - 16) = 0;
          }
          int v234 = (void *)*((void *)n - 12);
          if (v234 != *((void **)n - 10)) {
            free(v234);
          }
        }
        operator delete(v232);
      }
      if (v406) {
        operator delete(v406);
      }
      int v235 = v67[1];
      char v68 = "N3geo11_retain_ptrIP9CGContextNS_10_retain_cfIS2_EENS_11_release_cfENS_8_hash_cfENS_9_equal_cfEEE" + 62;
      if (v235)
      {
        do
        {
          int v236 = (uint64_t **)v235;
          int v235 = (uint64_t *)*v235;
        }
        while (v235);
      }
      else
      {
        do
        {
          int v236 = (uint64_t **)v67[2];
          BOOL v117 = *v236 == (uint64_t *)v67;
          uint64_t v67 = v236;
        }
        while (!v117);
      }
      uint64_t v67 = v236;
      if (v236 == &v401)
      {
        int v263 = a3;
        __n128 v63 = (void *)*a3;
        goto LABEL_664;
      }
    }
    if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
    }
    unint64_t v71 = (id)GEOGetVectorKitDrapingFallbackLog_log;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      gdc::LayerDataRequestKey::keysInt32Str(&v426, (unsigned __int16 *)v320);
      int v72 = SHIBYTE(v426.__r_.__value_.__r.__words[2]);
      std::string::size_type v73 = v426.__r_.__value_.__r.__words[0];
      uint64_t v74 = &v426;
      if (v72 < 0) {
        uint64_t v74 = (std::string *)v73;
      }
      unint64_t v75 = v442;
      if (SHIBYTE(v443) < 0) {
        unint64_t v75 = *(unsigned char **)v442;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v74;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v75;
      _os_log_impl(&dword_1A1780000, v71, OS_LOG_TYPE_DEBUG, "Hole: Larger tile %s contains pairs: %s", buf, 0x16u);
      if (SHIBYTE(v443) < 0)
      {
        operator delete(*(void **)v442);
        if ((SHIBYTE(v426.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_149;
        }
      }
      else if ((SHIBYTE(v426.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_149;
      }
      operator delete(v426.__r_.__value_.__l.__data_);
    }
LABEL_149:

    goto LABEL_150;
  }
  int v263 = a3;
LABEL_664:
  int v264 = (atomic_ullong *)v263[1];
  long double v366 = v63;
  unint64_t v367 = v264;
  if (v264) {
    atomic_fetch_add_explicit(v264 + 1, 1uLL, memory_order_relaxed);
  }
  int v265 = (char *)v397;
  int8x16_t v328 = v398;
  if (v397 == v398) {
    goto LABEL_784;
  }
  long long v325 = v264;
  unint64_t v330 = v63;
  if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
  }
  int v266 = (id)GEOGetVectorKitDrapingFallbackLog_log;
  if (os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v426.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v426.__r_.__value_.__r.__words + 4) = 0x6DB6DB6DB6DB6DB7
                                                                            * ((v328 - v265) >> 4);
    _os_log_impl(&dword_1A1780000, v266, OS_LOG_TYPE_DEBUG, "Holding back %zu tiles", (uint8_t *)&v426, 0xCu);
  }

  int v332 = *((void *)v68 + 106);
  while (2)
  {
    if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
    }
    int v267 = (id)GEOGetVectorKitDrapingFallbackLog_log;
    BOOL v268 = os_log_type_enabled(v267, OS_LOG_TYPE_DEBUG);

    if (v268)
    {
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
      }
      int v269 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      if (os_log_type_enabled(v269, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str(&v426, (unsigned __int16 *)v265);
        int v270 = &v426;
        if ((v426.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v270 = (std::string *)v426.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = v332;
        *(void *)&uint8_t buf[4] = v270;
        _os_log_impl(&dword_1A1780000, v269, OS_LOG_TYPE_DEBUG, "Holding back %s", buf, 0xCu);
        if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v426.__r_.__value_.__l.__data_);
        }
      }
    }
    md::SceneStateManager::setHasLayerDataDependency(v330, (uint64_t)v265);
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v406, (uint64_t)(v265 + 8));
    v426.__r_.__value_.__s.__data_[0] = 1;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v426.__r_.__value_.__l.__size_, (uint64_t)&v406);
    char v431 = 0;
    unint64_t v433 = (v430
          - 0x61C8864680B583EBLL
          + ((v426.__r_.__value_.__s.__data_[0] - 0x61C8864680B583EBLL) << 6)
          + (((unint64_t)v426.__r_.__value_.__s.__data_[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v426.__r_.__value_.__s.__data_[0] - 0x61C8864680B583EBLL);
    if (v407 != v409) {
      free(v407);
    }
    md::SceneStateManager::setHasLayerDataDependency(v330, (uint64_t)&v426);
    v442[0] = *v265;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v442[8], (uint64_t)(v265 + 8));
    char v447 = 0;
    if (v265[96])
    {
      int v448 = *((_DWORD *)v265 + 25);
      char v447 = 1;
    }
    unint64_t v449 = *((void *)v265 + 13);
    md::DrapingLogic::_fallbackTilesForHoleTile((uint64_t)&v403, v5, (uint64_t)v442, *(void **)(v319 + 56));
    if (v447) {
      char v447 = 0;
    }
    if (v443 != v445) {
      free(v443);
    }
    int v271 = (char *)v403;
    long long v337 = v404;
    unint64_t v334 = v265;
    if (v403 == v404)
    {
      if (!v403) {
        goto LABEL_776;
      }
      goto LABEL_694;
    }
    while (2)
    {
      buf[0] = *v271;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&buf[8], (uint64_t)(v271 + 8));
      char v439 = 0;
      if (v271[96])
      {
        int v440 = *((_DWORD *)v271 + 25);
        char v439 = 1;
      }
      unint64_t v441 = *((void *)v271 + 13);
      if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
      }
      int v274 = (id)GEOGetVectorKitDrapingFallbackLog_log;
      BOOL v275 = os_log_type_enabled(v274, OS_LOG_TYPE_DEBUG);

      if (v275)
      {
        if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
        }
        int v276 = (id)GEOGetVectorKitDrapingFallbackLog_log;
        if (os_log_type_enabled(v276, OS_LOG_TYPE_DEBUG))
        {
          gdc::LayerDataRequestKey::keysInt32Str(&v436, (unsigned __int16 *)buf);
          int v277 = &v436;
          if ((v436.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v277 = (std::string *)v436.__r_.__value_.__r.__words[0];
          }
          LODWORD(v417) = v332;
          *(void *)((char *)&v417 + 4) = v277;
          _os_log_impl(&dword_1A1780000, v276, OS_LOG_TYPE_DEBUG, "Replacing this with %s", (uint8_t *)&v417, 0xCu);
          if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v436.__r_.__value_.__l.__data_);
          }
        }
      }
      uint64_t v278 = v5[29].i64[0];
      int v279 = *(unsigned __int16 **)(v278 + 80);
      int v280 = *(unsigned __int16 **)(v278 + 88);
      if (v279 != v280)
      {
        while (*v279 != *(unsigned __int16 *)&buf[8])
        {
          v279 += 8;
          if (v279 == v280) {
            goto LABEL_716;
          }
        }
      }
      if (v279 == v280) {
LABEL_716:
      }
        int v281 = 0;
      else {
        int v281 = (const gdc::LayerDataRequestKey *)*((void *)v279 + 1);
      }
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v417, v281, buf);
      uint64_t v282 = *((void *)v265 + 2);
      unsigned int v283 = *(unsigned __int8 *)(v282 + 8);
      int v284 = (int *)(v282 + 4);
      unsigned int v285 = *(unsigned __int8 *)(*(void *)&buf[16] + 8);
      BOOL v286 = v283 >= v285;
      if (v283 <= v285) {
        unsigned int v287 = *(unsigned __int8 *)(*(void *)&buf[16] + 8);
      }
      else {
        unsigned int v287 = *(unsigned __int8 *)(v282 + 8);
      }
      if (v283 >= v285)
      {
        int v288 = (int *)*((void *)v265 + 2);
      }
      else
      {
        int v284 = (int *)(*(void *)&buf[16] + 4);
        int v288 = *(int **)&buf[16];
      }
      if (v286) {
        int v289 = (int *)(v282 + 12);
      }
      else {
        int v289 = (int *)(*(void *)&buf[16] + 12);
      }
      int v290 = *(uint64_t **)(*(void *)(v319 + 64) + 24);
      if (!v290) {
        goto LABEL_762;
      }
      int v291 = 0;
      int v292 = 0;
      int v293 = 0;
      int v294 = *v284;
      int v295 = *v288;
      int v296 = *v289;
      do
      {
        if (*((unsigned __int8 *)v290 + 16) != v296) {
          goto LABEL_729;
        }
        unsigned int v297 = *((unsigned __int8 *)v290 + 17);
        char v298 = v297 - v287;
        if (v297 >= v287)
        {
          if (v297 == v287 && *((_DWORD *)v290 + 5) == v294)
          {
            int v300 = v295;
            int v299 = v294;
            if (*((_DWORD *)v290 + 6) == v295) {
              goto LABEL_745;
            }
          }
        }
        else
        {
          int v299 = v294 >> (v287 - v297);
          if (*((_DWORD *)v290 + 5) == v299)
          {
            int v300 = v295 >> (v287 - v297);
            if (*((_DWORD *)v290 + 6) == v300) {
              goto LABEL_745;
            }
          }
        }
        if (v287 >= v297)
        {
          if (v287 != v297) {
            goto LABEL_729;
          }
          if (v294 != *((_DWORD *)v290 + 5)) {
            goto LABEL_729;
          }
          int v300 = v295;
          int v299 = v294;
          if (v295 != *((_DWORD *)v290 + 6)) {
            goto LABEL_729;
          }
        }
        else
        {
          int v299 = *((_DWORD *)v290 + 5);
          if (v294 != v299 >> v298) {
            goto LABEL_729;
          }
          int v300 = *((_DWORD *)v290 + 6);
          if (v295 != v300 >> v298) {
            goto LABEL_729;
          }
        }
LABEL_745:
        if (v292 < v291)
        {
          *int v292 = v296;
          v292[1] = v297;
          *((_DWORD *)v292 + 1) = v299;
          *((_DWORD *)v292 + 2) = v300;
          v292 += 24;
        }
        else
        {
          unint64_t v301 = 0xAAAAAAAAAAAAAAABLL * ((v292 - v293) >> 3) + 1;
          if (v301 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v291 - v293) >> 3) > v301) {
            unint64_t v301 = 0x5555555555555556 * ((v291 - v293) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v291 - v293) >> 3) >= 0x555555555555555) {
            unint64_t v302 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v302 = v301;
          }
          if (v302 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_797;
          }
          int v303 = (char *)operator new(24 * v302);
          int v304 = &v303[8 * ((v292 - v293) >> 3)];
          *(_WORD *)int v304 = *((_WORD *)v290 + 8);
          *(void *)(v304 + 4) = *(uint64_t *)((char *)v290 + 20);
          for (iint64_t i = v304; v292 != v293; *(void *)(ii + 4) = *(void *)(v292 + 4))
          {
            __int16 v306 = *((_WORD *)v292 - 12);
            v292 -= 24;
            *((_WORD *)ii - 12) = v306;
            ii -= 24;
          }
          int v291 = &v303[24 * v302];
          int v292 = v304 + 24;
          if (v293) {
            operator delete(v293);
          }
          int v293 = ii;
        }
LABEL_729:
        int v290 = (uint64_t *)*v290;
      }
      while (v290);
      for (juint64_t j = v293; jj != v292; jj += 24)
      {
        LOWORD(v436.__r_.__value_.__l.__data_) = *(_WORD *)jj;
        *(std::string::size_type *)((char *)v436.__r_.__value_.__r.__words + 4) = *(void *)(jj + 4);
        gdc::LayerDataCollector::addFallbackData((uint64_t)v321, (uint64_t)buf, (__int16 *)&v436, &v417);
      }
      uint64_t v5 = (int64x2_t *)a1;
      int v265 = v334;
      if (v293) {
        operator delete(v293);
      }
LABEL_762:
      int v308 = (std::__shared_weak_count *)*((void *)&v417 + 1);
      if (*((void *)&v417 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v417 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
        if (v439) {
LABEL_765:
        }
          char v439 = 0;
      }
      else if (v439)
      {
        goto LABEL_765;
      }
      if (*(void *)&buf[16] != v438) {
        free(*(void **)&buf[16]);
      }
      v271 += 112;
      if (v271 != v337) {
        continue;
      }
      break;
    }
    int v271 = (char *)v403;
    if (!v403)
    {
LABEL_776:
      if (v431) {
        goto LABEL_777;
      }
      goto LABEL_778;
    }
LABEL_694:
    int v272 = v404;
    int v273 = v271;
    if (v404 != v271)
    {
      do
      {
        if (*(v272 - 16)) {
          *(v272 - 16) = 0;
        }
        int v309 = (void *)*((void *)v272 - 12);
        if (v309 != *((void **)v272 - 10)) {
          free(v309);
        }
        v272 -= 112;
      }
      while (v272 != v271);
      int v273 = v403;
    }
    unint64_t v404 = v271;
    operator delete(v273);
    if (v431) {
LABEL_777:
    }
      char v431 = 0;
LABEL_778:
    if (v426.__r_.__value_.__r.__words[2] != v428) {
      free((void *)v426.__r_.__value_.__r.__words[2]);
    }
    v265 += 112;
    if (v265 != v328) {
      continue;
    }
    break;
  }
  gdc::LayerDataCollector::sortIndexList((unsigned __int8 **)v321);
  int v264 = v325;
LABEL_784:
  if (v264 && !atomic_fetch_add(v264 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v310 = (std::__shared_weak_count *)v264;
    (*(void (**)(atomic_ullong *))(*v264 + 16))(v264);
    std::__shared_weak_count::__release_weak(v310);
  }
  int v311 = v397;
  if (v397)
  {
    for (kuint64_t k = v398; kk != v311; kk -= 112)
    {
      if (*(kk - 16)) {
        *(kk - 16) = 0;
      }
      int v313 = (void *)*((void *)kk - 12);
      if (v313 != *((void **)kk - 10)) {
        free(v313);
      }
    }
    operator delete(v311);
  }
  std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(v401);
}

void sub_1A1D91C74(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x7A0])) {
    LOBYTE(STACK[0x7A0]) = 0;
  }
  if (STACK[0x750] != STACK[0x760]) {
    free((void *)STACK[0x750]);
  }
  if (*(unsigned char *)(v1 - 144)) {
    *(unsigned char *)(v1 - 144) = 0;
  }
  uint64_t v3 = *(void **)(v1 - 224);
  if (v3 != *(void **)(v1 - 208)) {
    free(v3);
  }
  std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy((void *)STACK[0x520]);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<md::FoundationOverlayPair,md::FoundationOverlayPairHash,std::equal_to<md::FoundationOverlayPair>,std::allocator<md::FoundationOverlayPair>>::~unordered_set[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  if (v2)
  {
    do
    {
      if (v2[224]) {
        v2[224] = 0;
      }
      uint64_t v5 = *(unsigned char **)v2;
      uint64_t v6 = (void *)*((void *)v2 + 18);
      if (v6 != *((void **)v2 + 20)) {
        free(v6);
      }
      if (v2[112]) {
        v2[112] = 0;
      }
      uint64_t v7 = (void *)*((void *)v2 + 4);
      if (v7 != *((void **)v2 + 6)) {
        free(v7);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *std::function<BOOL ()(gdc::Registry * const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_15OverlaysContextENS_13CameraContextENS_19PendingSceneContextENS_16ElevationContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_14DrapingContextEENK3__4clENS5_6EntityERNS_10components12MeshInstanceE(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  HasDebug = (void *)gdc::Registry::storage<md::overlayComponents::HasDebugDisplay>(**(int8x8_t ***)a1);
  uint64_t v7 = HasDebug[4];
  if (a2 >> 39 >= (HasDebug[5] - v7) >> 3) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(v7 + 8 * (a2 >> 39));
  if (!v8) {
    goto LABEL_14;
  }
  unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v11 = HasDebug[7];
  uint64_t v10 = HasDebug[8];
  if (v9 >= (v10 - v11) >> 3) {
    goto LABEL_14;
  }
  uint64_t v12 = v11 + 8 * v9;
  BOOL v13 = v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2);
  if (!v13 || ((uint64_t v14 = HasDebug[10], v14 + v9 != HasDebug[11]) ? (v15 = v14 == 0) : (v15 = 1), v15))
  {
LABEL_14:
    unsigned int v16 = *(char ***)(a1 + 8);
    uint64_t v18 = v16[1];
    unint64_t v17 = (unint64_t)v16[2];
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v25 = *v16;
      uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((v18 - *v16) >> 4);
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) > 0x249249249249249) {
        goto LABEL_58;
      }
      unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - (void)v25) >> 4);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0x124924924924924) {
        unint64_t v29 = 0x249249249249249;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 > 0x249249249249249) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v30 = (char *)operator new(112 * v29);
      }
      else
      {
        BOOL v30 = 0;
      }
      long long v31 = a3[5];
      unsigned int v32 = &v30[112 * v26];
      *((_OWORD *)v32 + 4) = a3[4];
      *((_OWORD *)v32 + 5) = v31;
      *((_OWORD *)v32 + 6) = a3[6];
      long long v33 = a3[1];
      *(_OWORD *)unsigned int v32 = *a3;
      *((_OWORD *)v32 + 1) = v33;
      long long v34 = a3[3];
      *((_OWORD *)v32 + 2) = a3[2];
      *((_OWORD *)v32 + 3) = v34;
      uint64_t v24 = v32 + 112;
      if (v18 != v25)
      {
        do
        {
          long long v35 = *((_OWORD *)v18 - 7);
          long long v36 = *((_OWORD *)v18 - 5);
          *((_OWORD *)v32 - 6) = *((_OWORD *)v18 - 6);
          *((_OWORD *)v32 - 5) = v36;
          *((_OWORD *)v32 - 7) = v35;
          long long v37 = *((_OWORD *)v18 - 4);
          long long v38 = *((_OWORD *)v18 - 3);
          long long v39 = *((_OWORD *)v18 - 1);
          *((_OWORD *)v32 - 2) = *((_OWORD *)v18 - 2);
          *((_OWORD *)v32 - 1) = v39;
          *((_OWORD *)v32 - 4) = v37;
          *((_OWORD *)v32 - 3) = v38;
          v32 -= 112;
          v18 -= 112;
        }
        while (v18 != v25);
        uint64_t v18 = *v16;
      }
      *unsigned int v16 = v32;
      v16[1] = v24;
      v16[2] = &v30[112 * v29];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      long long v19 = *a3;
      long long v20 = a3[2];
      *((_OWORD *)v18 + 1) = a3[1];
      *((_OWORD *)v18 + 2) = v20;
      *(_OWORD *)uint64_t v18 = v19;
      long long v21 = a3[3];
      long long v22 = a3[4];
      long long v23 = a3[6];
      *((_OWORD *)v18 + 5) = a3[5];
      *((_OWORD *)v18 + 6) = v23;
      *((_OWORD *)v18 + 3) = v21;
      *((_OWORD *)v18 + 4) = v22;
      uint64_t v24 = v18 + 112;
    }
    v16[1] = v24;
    float32x2_t v40 = (void *)gdc::Registry::storage<md::overlayComponents::HasDebugDisplay>(**(int8x8_t ***)a1);
    unint64_t v59 = a2;
    unint64_t v41 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v40 + 4, (uint64_t)&v59);
    if (v42)
    {
      unsigned int v47 = (unsigned char *)v40[11];
      unint64_t v46 = v40[12];
      if ((unint64_t)v47 >= v46)
      {
        uint64_t v49 = (char *)v40[10];
        uint64_t v50 = v47 - v49;
        uint64_t v51 = v47 - v49 + 1;
        if (v51 < 0) {
          goto LABEL_58;
        }
        unint64_t v52 = v46 - (void)v49;
        if (2 * v52 > v51) {
          uint64_t v51 = 2 * v52;
        }
        if (v52 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v53 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v53 = v51;
        }
        if (v53) {
          long long v54 = (char *)operator new(v53);
        }
        else {
          long long v54 = 0;
        }
        float v55 = &v54[v53];
        uint64_t v48 = (uint64_t)&v54[v50 + 1];
        float v56 = (char *)(v49 - v47);
        if (v49 == v47) {
          float v56 = 0;
        }
        v40[10] = &v54[v50 + (void)v56];
        v40[11] = v48;
        v40[12] = v55;
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        uint64_t v48 = (uint64_t)(v47 + 1);
      }
      v40[11] = v48;
      uint64_t v43 = v40[31];
    }
    else
    {
      uint64_t v43 = v40[31];
      if (v40[10] + (((uint64_t)v41 - v40[7]) >> 3) != v40[11])
      {
        uint64_t v44 = (void *)v40[16];
        if (!v44) {
          return;
        }
        while (1)
        {
          char v61 = (uint64_t *)&v59;
          uint64_t v62 = 1;
          uint64_t v60 = v43;
          uint64_t v45 = v44[6];
          if (!v45) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v45 + 48))(v45, &v60, &v61);
          uint64_t v44 = (void *)*v44;
          if (!v44) {
            return;
          }
        }
LABEL_57:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_58:
        abort();
      }
    }
    uint64_t v57 = (void *)v40[22];
    if (!v57) {
      return;
    }
    while (1)
    {
      char v61 = (uint64_t *)&v59;
      uint64_t v62 = 1;
      uint64_t v60 = v43;
      uint64_t v58 = v57[6];
      if (!v58) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v58 + 48))(v58, &v60, &v61);
      uint64_t v57 = (void *)*v57;
      if (!v57) {
        return;
      }
    }
    goto LABEL_57;
  }
}

void gdc::ComponentStorageWrapper<md::components::Material>::emplace(void *a1, uint64_t a2, void *a3)
{
  uint64_t v32 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v32);
  if (v6)
  {
    uint64_t v14 = (char *)a1[11];
    unint64_t v13 = a1[12];
    if ((unint64_t)v14 >= v13)
    {
      unint64_t v17 = (char *)a1[10];
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v17) >> 3) + 1;
      if (v18 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_40;
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v17) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v21 = 24 * v20;
      long long v22 = (char *)operator new(24 * v20);
      long long v23 = &v22[8 * ((v14 - v17) >> 3)];
      uint64_t v24 = a3[1];
      *(void *)long long v23 = *a3;
      *((void *)v23 + 1) = v24;
      uint64_t v25 = a3[2];
      *((void *)v23 + 2) = v25;
      if (v25)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        unint64_t v17 = (char *)a1[10];
        uint64_t v14 = (char *)a1[11];
      }
      uint64_t v26 = &v22[v21];
      unsigned int v16 = v23 + 24;
      if (v14 == v17)
      {
        a1[10] = v23;
        a1[11] = v16;
        a1[12] = v26;
      }
      else
      {
        do
        {
          uint64_t v27 = *((void *)v14 - 3);
          v14 -= 24;
          *((void *)v23 - 3) = v27;
          v23 -= 24;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)(v14 + 8);
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = 0;
        }
        while (v14 != v17);
        unint64_t v17 = (char *)a1[10];
        unint64_t v28 = (char *)a1[11];
        a1[10] = v23;
        a1[11] = v16;
        for (a1[12] = v26; v28 != v17; v28 -= 24)
        {
          unint64_t v29 = (std::__shared_weak_count *)*((void *)v28 - 1);
          if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)uint64_t v14 = *a3;
      *((void *)v14 + 1) = a3[1];
      uint64_t v15 = a3[2];
      *((void *)v14 + 2) = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v16 = v14 + 24;
    }
    a1[11] = v16;
    uint64_t v10 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3);
    *(void *)uint64_t v7 = *a3;
    long long v8 = *(_OWORD *)(a3 + 1);
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v9 = *(std::__shared_weak_count **)(v7 + 16);
    *(_OWORD *)(v7 + 8) = v8;
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    uint64_t v10 = a1[31];
    if (v7 != a1[11])
    {
      uint64_t v11 = (void *)a1[16];
      if (v11)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v10;
          uint64_t v12 = v11[6];
          if (!v12) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v12 + 48))(v12, &v33, &v34);
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
LABEL_39:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_40:
        abort();
      }
      return;
    }
  }
  BOOL v30 = (void *)a1[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v10;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      BOOL v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_39;
  }
}

uint64_t md::FilteredIterator<std::vector<gdc::Registry *>>::~FilteredIterator(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  unsigned int v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    unsigned int v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::IntendedSceneLayer>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::Collapsible>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Collapsible>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Collapsible>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::Collapsible>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::Visibility>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Visibility>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Visibility>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::Visibility>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::Material>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Material>::remove(void *a1, unint64_t a2)
{
  unint64_t v27 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  *uint64_t v15 = *(void *)(v16 - 24);
  uint64_t v17 = v15 + 1;
  uint64_t v19 = *(void *)(v16 - 16);
  uint64_t v18 = *(void *)(v16 - 8);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *uint64_t v17 = v19;
  uint64_t v20 = v14 + 24 * v7;
  uint64_t v21 = *(std::__shared_weak_count **)(v20 + 16);
  *(void *)(v20 + 16) = v18;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = a1[11];
  long long v23 = *(std::__shared_weak_count **)(v22 - 8);
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  a1[11] = v22 - 24;
  uint64_t v24 = (void *)a1[28];
  if (!v24) {
    return 1;
  }
  uint64_t v25 = a1[31];
  while (1)
  {
    v29[0] = &v27;
    v29[1] = 1;
    uint64_t v28 = v25;
    uint64_t v26 = v24[6];
    if (!v26) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v26 + 48))(v26, &v28, v29);
    uint64_t v24 = (void *)*v24;
    if (!v24) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Material>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::Material>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::Material>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,md::components::Material>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Material>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v37 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v37);
  if (v6)
  {
    uint64_t v17 = (char *)a1[11];
    unint64_t v16 = a1[12];
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v20 = (char *)a1[10];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v20) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_48;
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v20) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = operator new(24 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      uint64_t v26 = a3[1];
      unint64_t v27 = &v25[8 * ((v17 - v20) >> 3)];
      *unint64_t v27 = *a3;
      v27[1] = v26;
      if (v26)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        uint64_t v20 = (char *)a1[10];
        uint64_t v17 = (char *)a1[11];
      }
      uint64_t v28 = &v25[24 * v24];
      v25[24 * v21 + 16] = *((unsigned char *)a3 + 16);
      uint64_t v19 = v27 + 3;
      if (v17 == v20)
      {
        a1[10] = v27;
        a1[11] = v19;
        a1[12] = v28;
      }
      else
      {
        unint64_t v29 = v17;
        BOOL v30 = v27;
        do
        {
          uint64_t v31 = *((void *)v29 - 3);
          v29 -= 24;
          *(v30 - 3) = v31;
          v30 -= 3;
          uint64_t v32 = *((void *)v29 + 1);
          v30[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
          }
          *((unsigned char *)v27 - 8) = *(v17 - 8);
          uint64_t v17 = v29;
          unint64_t v27 = v30;
        }
        while (v29 != v20);
        uint64_t v20 = (char *)a1[10];
        uint64_t v33 = (char *)a1[11];
        a1[10] = v30;
        a1[11] = v19;
        for (a1[12] = v28; v33 != v20; v33 -= 24)
        {
          long long v34 = (std::__shared_weak_count *)*((void *)v33 - 2);
          if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)uint64_t v17 = *a3;
      uint64_t v18 = a3[1];
      *((void *)v17 + 1) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      v17[16] = *((unsigned char *)a3 + 16);
      uint64_t v19 = v17 + 24;
    }
    a1[11] = v19;
    uint64_t v13 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10];
    uint64_t v8 = ((uint64_t)v5 - a1[7]) >> 3;
    uint64_t v9 = (void *)(v7 + 24 * v8);
    uint64_t v11 = *a3;
    uint64_t v10 = a3[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v9[1];
    *uint64_t v9 = v11;
    v9[1] = v10;
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(unsigned char *)(v7 + 24 * v8 + 16) = *((unsigned char *)a3 + 16);
    uint64_t v13 = a1[31];
    if (v9 != (void *)a1[11])
    {
      uint64_t v14 = (void *)a1[16];
      if (v14)
      {
        while (1)
        {
          long long v39 = &v37;
          uint64_t v40 = 1;
          uint64_t v38 = v13;
          uint64_t v15 = v14[6];
          if (!v15) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v38, &v39);
          uint64_t v14 = (void *)*v14;
          if (!v14) {
            return;
          }
        }
LABEL_47:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_48:
        abort();
      }
      return;
    }
  }
  uint64_t v35 = (void *)a1[22];
  if (v35)
  {
    while (1)
    {
      long long v39 = &v37;
      uint64_t v40 = 1;
      uint64_t v38 = v13;
      uint64_t v36 = v35[6];
      if (!v36) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v36 + 48))(v36, &v38, &v39);
      uint64_t v35 = (void *)*v35;
      if (!v35) {
        return;
      }
    }
    goto LABEL_47;
  }
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomRenderState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::CustomRenderState>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  uint64_t v18 = *(void *)(v16 - 24);
  uint64_t v17 = *(void *)(v16 - 16);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(unsigned char *)(v14 + 24 * v7 + 16) = *(unsigned char *)(v16 - 8);
  uint64_t v20 = a1[11];
  unint64_t v21 = *(std::__shared_weak_count **)(v20 - 16);
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  a1[11] = v20 - 24;
  unint64_t v22 = (void *)a1[28];
  if (!v22) {
    return 1;
  }
  uint64_t v23 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    uint64_t v26 = v23;
    uint64_t v24 = v22[6];
    if (!v24) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v24 + 48))(v24, &v26, v27);
    unint64_t v22 = (void *)*v22;
    if (!v22) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::CustomRenderState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<md::components::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void gms::Material<ggl::Texture2D>::maxSsaoIntensity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minSsaoIntensity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::ssaoIntensity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSsaoIntensity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceSsaoIntensity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySsaoIntensity(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 848))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::targetDryAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceDryAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyDryAdjustment(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 824))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::targetWetAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceWetAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyWetAdjustment(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 800))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::targetColdAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceColdAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyColdAdjustment(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 776))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::targetHotAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceHotAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyHotAdjustment(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 752))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::targetColorRampRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceColorRampRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyColorRampRGB(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 728))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::gradientMaskFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetGradientMaskFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceGradientMaskFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 704))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::emissiveFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetEmissiveFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceEmissiveFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyEmissiveFactorRGB(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 680))();
  }
  return result;
}

void md::VectorOverlayMaterial::albedoFactorRGB(md::VectorOverlayMaterial *this@<X0>, uint64_t a2@<X8>)
{
  float v4 = *((float *)this + 14);
  float v5 = *((float *)this + 15);
  float v6 = *((float *)this + 16);
  if (v4 >= 0.04045) {
    float v7 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v7 = v4 * 0.077399;
  }
  if (v5 >= 0.04045) {
    float v8 = powf((float)(v5 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v8 = v5 * 0.077399;
  }
  if (v6 >= 0.04045) {
    float v9 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v9 = v6 * 0.077399;
  }
  *(unsigned char *)a2 = 1;
  *(float *)(a2 + 4) = v7;
  *(float *)(a2 + 8) = v8;
  *(float *)(a2 + 12) = v9;
}

void gms::Material<ggl::Texture2D>::targetAlbedoFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceAlbedoFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 656))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxAlpha(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minAlpha(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

float md::VectorOverlayMaterial::alpha@<S0>(md::VectorOverlayMaterial *this@<X0>, uint64_t a2@<X8>)
{
  float result = *((float *)this + 17);
  *(unsigned char *)a2 = 1;
  *(float *)(a2 + 4) = result;
  return result;
}

void gms::Material<ggl::Texture2D>::targetAlpha(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceAlpha(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 632))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxNoColorCorrection(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetNoColorCorrection(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceNoColorCorrection(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyNoColorCorrection(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 608))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxHideOnCollapse(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minHideOnCollapse(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetHideOnCollapse(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceHideOnCollapse(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 584))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::gradientMaskFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetGradientMaskFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceGradientMaskFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 560))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::brightnessRemapRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetBrightnessRemapRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceBrightnessRemapRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyBrightnessRemapRange(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 536))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::saturationRemapRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSaturationRemapRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceSaturationRemapRange(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySaturationRemapRange(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 512))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxAcceptsOverlays(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minAcceptsOverlays(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetAcceptsOverlays(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceAcceptsOverlays(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAcceptsOverlays(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 488))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxBrightnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minBrightnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::brightnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetBrightnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceBrightnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyBrightnessFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 464))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxSaturationFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minSaturationFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::saturationFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSaturationFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceSaturationFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySaturationFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 440))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::targetColorRamp(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceColorRamp(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyColorRamp(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 416))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxCastShadow(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minCastShadow(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetCastShadow(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceCastShadow(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxShininess(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minShininess(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::shininess(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetShininess(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceShininess(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyShininess(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 368))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxSpecularity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minSpecularity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::specularity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetSpecularity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceSpecularity(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnySpecularity(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 344))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::offset(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetOffset(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceOffset(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyOffset(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 320))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::tiling(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetTiling(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceTiling(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyTiling(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 296))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxVisibility(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minVisibility(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetVisibility(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceVisibility(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxLineWidth(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minLineWidth(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::lineWidth(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetLineWidth(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceLineWidth(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyLineWidth(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxZIndex(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minZIndex(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetZIndex(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceZIndex(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

void md::VectorOverlayMaterial::albedoFactor(md::VectorOverlayMaterial *this@<X0>, uint64_t a2@<X8>)
{
  float v4 = *((float *)this + 14);
  float v5 = *((float *)this + 15);
  float v7 = *((float *)this + 16);
  int v6 = *((_DWORD *)this + 17);
  if (v4 >= 0.04045) {
    float v8 = powf((float)(v4 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v8 = v4 * 0.077399;
  }
  if (v5 >= 0.04045) {
    float v9 = powf((float)(v5 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v9 = v5 * 0.077399;
  }
  if (v7 >= 0.04045) {
    float v10 = powf((float)(v7 * 0.94787) + 0.052133, 2.4);
  }
  else {
    float v10 = v7 * 0.077399;
  }
  *(unsigned char *)a2 = 1;
  *(float *)(a2 + 4) = v8;
  *(float *)(a2 + 8) = v9;
  *(float *)(a2 + 12) = v10;
  *(_DWORD *)(a2 + 16) = v6;
}

void gms::Material<ggl::Texture2D>::targetAlbedoFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceAlbedoFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 200))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::emissiveFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetEmissiveFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceEmissiveFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyEmissiveFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 176))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxMetallicFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minMetallicFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::metallicFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetMetallicFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceMetallicFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyMetallicFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 152))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::maxRoughnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::minRoughnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::roughnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::targetRoughnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::sourceRoughnessFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyRoughnessFactor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::emissive(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyEmissive(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyRoughnessMetallic(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::normal(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyNormal(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

void gms::Material<ggl::Texture2D>::albedo(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::Material<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void md::VectorOverlayMaterial::~VectorOverlayMaterial(md::VectorOverlayMaterial *this)
{
  *(void *)this = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void gms::Material<ggl::Texture2D>::alpha(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::albedoFactor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::~Material(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::Material<ggl::Texture2D>::~Material(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::VectorOverlayMaterial>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::VectorOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::VectorOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t gdc::Registry::storage<md::overlayComponents::HasDebugDisplay>(int8x8_t *a1)
{
  uint64_t v10 = 0x6A5EB78DB32E8B87;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6A5EB78DB32E8B87;
    if (*(void *)&v1 <= 0x6A5EB78DB32E8B87uLL) {
      uint64_t v3 = 0x6A5EB78DB32E8B87uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6A5EB78DB32E8B87;
  }
  float v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (float v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6A5EB78DB32E8B87)
      {
        if (v5[2] == 0x6A5EB78DB32E8B87) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      float v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6A5EB78DB32E8B87) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    float v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6A5EB78DB32E8B87) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1D94E90(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::HasDebugDisplay>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::MeshInstance>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::MeshInstance>::remove(void *a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10] + 112 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 112);
  long long v17 = *(_OWORD *)(v15 - 96);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 - 80);
  *(_OWORD *)uint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 - 76);
  *(_DWORD *)(v14 + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v15 - 72);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(v15 - 68);
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(v15 - 64);
  *(_DWORD *)(v14 + 52) = *(_DWORD *)(v15 - 60);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 - 56);
  *(_DWORD *)(v14 + 6CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v15 - 52);
  *(_DWORD *)(v14 + 64) = *(_DWORD *)(v15 - 48);
  *(_DWORD *)(v14 + 68) = *(_DWORD *)(v15 - 44);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 - 40);
  *(_DWORD *)(v14 + 76) = *(_DWORD *)(v15 - 36);
  *(_DWORD *)(v14 + 8CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v15 - 32);
  *(_DWORD *)(v14 + 84) = *(_DWORD *)(v15 - 28);
  *(_DWORD *)(v14 + 88) = *(_DWORD *)(v15 - 24);
  *(_DWORD *)(v14 + 92) = *(_DWORD *)(v15 - 20);
  *(_DWORD *)(v14 + 96) = *(_DWORD *)(v15 - 16);
  *(_DWORD *)(v14 + 10CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v15 - 12);
  *(_DWORD *)(v14 + 104) = *(_DWORD *)(v15 - 8);
  a1[11] -= 112;
  uint64_t v18 = (void *)a1[28];
  if (!v18) {
    return 1;
  }
  uint64_t v19 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    uint64_t v22 = v19;
    uint64_t v20 = v18[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v22, v23);
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::MeshInstance>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::MeshInstance>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL _ZNSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEEclESS_(uint64_t a1, int8x8_t **a2)
{
  uint64_t v2 = *a2;
  int8x8_t v3 = (*a2)[1];
  if (!*(void *)&v3) {
    return 0;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x64A448A5CD5D38DBLL;
    if (*(void *)&v3 <= 0x64A448A5CD5D38DBuLL) {
      uint64_t v5 = 0x64A448A5CD5D38DBuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x64A448A5CD5D38DBLL;
  }
  int8x8_t v6 = *v2;
  unint64_t v7 = *(void **)(*(void *)v2 + 8 * v5);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (void *)*v7;
  if (!*v7) {
    return 0;
  }
  uint64_t v9 = *(void *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x64A448A5CD5D38DBLL)
      {
        if (v8[2] == 0x64A448A5CD5D38DBLL) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v8[1];
    if (v11 != 0x64A448A5CD5D38DBLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
      if (v11 != v5) {
        return 0;
      }
      goto LABEL_16;
    }
    if (v8[2] == 0x64A448A5CD5D38DBLL) {
      break;
    }
LABEL_16:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      return 0;
    }
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) != 0x64A448A5CD5D38DBLL || !*(void *)(v12 + 32)) {
    return 0;
  }
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v13 = 0x41A3BFA74D47A0E8;
    if (*(void *)&v3 <= 0x41A3BFA74D47A0E8uLL) {
      uint64_t v13 = 0x41A3BFA74D47A0E8uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v13 = v9 & 0x41A3BFA74D47A0E8;
  }
  uint64_t v14 = *(void **)(*(void *)&v6 + 8 * v13);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = (void *)*v14;
  if (!v15) {
    return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0x41A3BFA74D47A0E8)
      {
        if (v15[2] == 0x41A3BFA74D47A0E8) {
          goto LABEL_44;
        }
      }
      else if ((v17 & v9) != v13)
      {
        return 0;
      }
      BOOL result = 0;
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        return result;
      }
    }
  }
  while (2)
  {
    unint64_t v18 = v15[1];
    if (v18 != 0x41A3BFA74D47A0E8)
    {
      if (v18 >= *(void *)&v3) {
        v18 %= *(void *)&v3;
      }
      if (v18 != v13) {
        return 0;
      }
      goto LABEL_38;
    }
    if (v15[2] != 0x41A3BFA74D47A0E8)
    {
LABEL_38:
      BOOL result = 0;
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        return result;
      }
      continue;
    }
    break;
  }
LABEL_44:
  uint64_t v19 = v15[5];
  if (*(void *)(v19 + 8) == 0x41A3BFA74D47A0E8) {
    return *(void *)(v19 + 32) != 0;
  }
  return 0;
}

void _ZNKSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56DD88;
}

void *_ZNKSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEE7__cloneEv()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EF56DD88;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md12DrapingLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15OverlaysContextENS2_13CameraContextENS2_19PendingSceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14DrapingContextEE3__3NS_9allocatorISM_EEFbRKPNS8_8RegistryEEED0Ev()
{
}

uint64_t std::pair<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint8x8_t v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      do
      {
        if (*(unsigned char *)(v3 - 16)) {
          *(unsigned char *)(v3 - 16) = 0;
        }
        uint64_t v5 = *(void **)(v3 - 96);
        if (v5 != *(void **)(v3 - 80)) {
          free(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      uint8x8_t v4 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 96)) {
    *(unsigned char *)(a1 + 96) = 0;
  }
  int8x8_t v6 = *(void **)(a1 + 16);
  if (v6 != *(void **)(a1 + 32)) {
    free(v6);
  }
  return a1;
}

void **std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint8x8_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 16)) {
          *(v3 - 16) = 0;
        }
        uint64_t v5 = (void *)*((void *)v3 - 12);
        if (v5 != *((void **)v3 - 10)) {
          free(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      uint8x8_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t anonymous namespace'::_tileListToString(unsigned char *a1, unsigned __int16 **a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v18);
  __p.__r_.__value_.__s.__data_[0] = 91;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  uint8x8_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      gdc::LayerDataRequestKey::keysInt32Str(&__p, v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  __p.__r_.__value_.__s.__data_[0] = 93;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  if ((v26 & 0x10) != 0)
  {
    unint64_t v9 = v25;
    if (v25 < v22)
    {
      unint64_t v25 = v22;
      unint64_t v9 = v22;
    }
    uint64_t v10 = (const void **)&v21;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      size_t v8 = 0;
      a1[23] = 0;
      goto LABEL_27;
    }
    uint64_t v10 = (const void **)v20;
    unint64_t v9 = v20[2];
  }
  unint64_t v11 = *v10;
  size_t v8 = v9 - (void)*v10;
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v8 >= 0x17)
  {
    uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v12 = v8 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v14 = operator new(v12 + 1);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v13 | 0x8000000000000000;
    *(void *)a1 = v14;
    a1 = v14;
    goto LABEL_26;
  }
  a1[23] = v8;
  if (v8) {
LABEL_26:
  }
    memmove(a1, v11, v8);
LABEL_27:
  a1[v8] = 0;
  v18[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v19[0] = v15;
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete(v23);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v27);
}

void sub_1A1D95A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void std::__tree<gdc::LayerDataRequestKey>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<gdc::LayerDataRequestKey>::destroy(*a1);
    std::__tree<gdc::LayerDataRequestKey>::destroy(a1[1]);
    if (*((unsigned char *)a1 + 128)) {
      *((unsigned char *)a1 + 128) = 0;
    }
    uint64_t v2 = (void *)a1[6];
    if (v2 != (void *)a1[8]) {
      free(v2);
    }
    operator delete(a1);
  }
}

double md::DrapingLogic::_evaluateCoverageOfTilePairs(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 **a4, unsigned __int16 **a5, double a6, int16x4_t a7)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  size_t v8 = *a4;
  unint64_t v9 = a4[1];
  if (*a4 != v9)
  {
    unsigned int v54 = *(unsigned __int8 *)(*(void *)(a2 + 16) + 8);
    double v11 = 0.0;
    unsigned int v53 = *(_DWORD *)(*(void *)(a3 + 16) + 8);
    while (1)
    {
      uint64_t v12 = (int32x2_t *)*((void *)v8 + 2);
      __int32 v13 = v12[1].i32[0];
      v61.__r_.__value_.__s.__data_[0] = v12[1].i32[1];
      v61.__r_.__value_.__s.__data_[1] = v13;
      double v14 = COERCE_DOUBLE(vrev64_s32(*v12));
      *(double *)((char *)v61.__r_.__value_.__r.__words + 4) = v14;
      long long v16 = *a5;
      uint64_t v15 = a5[1];
      while (v16 != v15)
      {
        uint64_t v19 = *((void *)v16 + 2);
        int v20 = *(_DWORD *)(v19 + 4);
        int v21 = *(_DWORD *)(v19 + 8);
        int v22 = *(_DWORD *)v19;
        LODWORD(v19) = *(unsigned __int8 *)(v19 + 12);
        v59[0] = v19;
        v59[1] = v21;
        *(_DWORD *)&v59[4] = v20;
        *(_DWORD *)&v59[8] = v22;
        if (v61.__r_.__value_.__s.__data_[0] != v19) {
          goto LABEL_12;
        }
        if (v61.__r_.__value_.__s.__data_[1] >= v21)
        {
          if (v61.__r_.__value_.__s.__data_[1] == v21
            && HIDWORD(v61.__r_.__value_.__r.__words[0]) == v20
            && LODWORD(v61.__r_.__value_.__r.__words[1]) == v22)
          {
            goto LABEL_37;
          }
        }
        else if (*(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) == __PAIR64__(v22 >> (v21 - v61.__r_.__value_.__s.__data_[1]), v20 >> (v21 - v61.__r_.__value_.__s.__data_[1])))
        {
          goto LABEL_37;
        }
        if (v61.__r_.__value_.__s.__data_[1] <= v21)
        {
          if (v61.__r_.__value_.__s.__data_[1] != v21
            || v20 != HIDWORD(v61.__r_.__value_.__r.__words[0])
            || v22 != LODWORD(v61.__r_.__value_.__r.__words[1]))
          {
            goto LABEL_12;
          }
        }
        else
        {
          char v25 = v61.__r_.__value_.__s.__data_[1] - v21;
          if (v20 != SHIDWORD(v61.__r_.__value_.__r.__words[0]) >> v25
            || v22 != SLODWORD(v61.__r_.__value_.__r.__words[1]) >> v25)
          {
            goto LABEL_12;
          }
        }
LABEL_37:
        int v28 = v8[4];
        if (v28 == 33) {
          unint64_t v29 = v16;
        }
        else {
          unint64_t v29 = v8;
        }
        if (v28 == 33) {
          unsigned __int8 v30 = v61.__r_.__value_.__s.__data_[0];
        }
        else {
          unsigned __int8 v30 = v59[0];
        }
        if (v28 == 33) {
          unsigned __int8 v31 = v61.__r_.__value_.__s.__data_[1];
        }
        else {
          unsigned __int8 v31 = v59[1];
        }
        if (v28 == 33) {
          unsigned __int8 v32 = v59[0];
        }
        else {
          unsigned __int8 v32 = v61.__r_.__value_.__s.__data_[0];
        }
        if (v28 == 33) {
          unsigned __int8 v33 = v59[1];
        }
        else {
          unsigned __int8 v33 = v61.__r_.__value_.__s.__data_[1];
        }
        long long v34 = *(uint64_t **)(*(void *)(a1 + 168) + 24);
        if (v34)
        {
          LODWORD(v14) = 33;
          a7.i32[0] = v8[4];
          int8x8_t v35 = (int8x8_t)vdup_lane_s16(vceq_s16(a7, *(int16x4_t *)&v14), 0);
          double v14 = COERCE_DOUBLE(vbsl_s8(v35, *(int8x8_t *)((char *)v61.__r_.__value_.__r.__words + 4), *(int8x8_t *)&v59[4]));
          a7 = (int16x4_t)vbsl_s8(v35, *(int8x8_t *)&v59[4], *(int8x8_t *)((char *)v61.__r_.__value_.__r.__words + 4));
          int v36 = v29[4];
          while (1)
          {
            if (*((unsigned __int8 *)v34 + 16) == v30
              && *((unsigned __int8 *)v34 + 17) == v31
              && *(uint64_t *)((char *)v34 + 20) == *(void *)&v14)
            {
              uint64_t v37 = (uint64_t *)v34[8];
              if (v37) {
                break;
              }
            }
LABEL_54:
            long long v34 = (uint64_t *)*v34;
            if (!v34) {
              goto LABEL_12;
            }
          }
          while (*((unsigned __int8 *)v37 + 16) != v32
               || *((unsigned __int8 *)v37 + 17) != v33
               || *(uint64_t *)((char *)v37 + 20) != *(void *)&a7
               || *((unsigned __int16 *)v37 + 20) != v36)
          {
            uint64_t v37 = (uint64_t *)*v37;
            if (!v37) {
              goto LABEL_54;
            }
          }
          uint64_t v38 = (unsigned __int8 *)v37[8];
          if (v38)
          {
            int v39 = atomic_load(v38);
            if (v39 == 2)
            {
              std::string::size_type v55 = (std::string::size_type)a7;
              buf[0] = v30;
              buf[1] = v31;
              double v66 = v14;
              md::DrapingLogic::_dataInStore((gdc::LayerDataStore *)&__p, *(unsigned __int16 **)(*(void *)(a1 + 464) + 80), *(unsigned __int16 **)(*(void *)(a1 + 464) + 88), buf, 33);
              v62.__r_.__value_.__s.__data_[0] = v32;
              v62.__r_.__value_.__s.__data_[1] = v33;
              *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = v55;
              md::DrapingLogic::_dataInStore((gdc::LayerDataStore *)v63, *(unsigned __int16 **)(*(void *)(a1 + 464) + 80), *(unsigned __int16 **)(*(void *)(a1 + 464) + 88), (unsigned __int8 *)&v62, v36);
              uint64_t v40 = v64;
              if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
              unint64_t v41 = v57;
              if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
              unsigned int v17 = v61.__r_.__value_.__s.__data_[1];
              if (v61.__r_.__value_.__s.__data_[1] <= v54) {
                unsigned int v17 = v54;
              }
              unsigned int v18 = v59[1];
              if (v59[1] <= v53) {
                unsigned int v18 = v53;
              }
              if (v17 <= v18) {
                LOBYTE(v17) = v18;
              }
              double v14 = 1.0 / (double)(unint64_t)(1 << (2 * (v17 - v54)));
              double v11 = v14 + v11;
            }
          }
        }
LABEL_12:
        v16 += 56;
      }
      v8 += 56;
      if (v8 == v9) {
        goto LABEL_74;
      }
    }
  }
  double v11 = 0.0;
LABEL_74:
  if (GEOGetVectorKitDrapingFallbackLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitDrapingFallbackLog_onceToken, &__block_literal_global_57);
  }
  char v42 = (id)GEOGetVectorKitDrapingFallbackLog_log;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    gdc::LayerDataRequestKey::keysInt32Str(&v62, (unsigned __int16 *)a2);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v43 = &v62;
    }
    else {
      uint64_t v43 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    gdc::LayerDataRequestKey::keysInt32Str(&v61, (unsigned __int16 *)a3);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = &v61;
    }
    else {
      uint64_t v44 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    int v45 = v60;
    unint64_t v46 = *(unsigned char **)v59;
    unsigned int v47 = v59;
    if (v45 < 0) {
      unsigned int v47 = v46;
    }
    if (v58 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136316162;
    double v66 = *(double *)&v43;
    __int16 v67 = 2080;
    char v68 = v44;
    __int16 v69 = 2080;
    BOOL v70 = v47;
    __int16 v71 = 2080;
    int v72 = p_p;
    __int16 v73 = 2048;
    double v74 = v11;
    _os_log_impl(&dword_1A1780000, v42, OS_LOG_TYPE_DEBUG, "evaluate coverage of : %s vs %s.  First Keys = %s.  Second Keys = %s  Area = %f", buf, 0x34u);
    if (v58 < 0)
    {
      operator delete(__p);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_90:
        if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_95;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_90;
    }
    operator delete(*(void **)v59);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_91:
      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_92;
      }
LABEL_96:
      operator delete(v62.__r_.__value_.__l.__data_);
      goto LABEL_92;
    }
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_96;
  }
LABEL_92:

  return v11;
}

void sub_1A1D960A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v36 < 0)
  {
    operator delete(v34);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void md::DrapingLogic::_fallbackTilesForHoleTile(uint64_t a1, int64x2_t *a2, uint64_t a3, void *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(_DWORD **)(a3 + 16);
  int v8 = v7[2];
  int v9 = v7[3];
  unsigned int v10 = v8;
  int v11 = 1 << v8;
  int v12 = (v7[1] % v11 + v11) % v11;
  LODWORD(v7) = *v7 % v11 + v11;
  v54[0] = v9;
  v54[1] = v8;
  int v13 = (int)v7 % (1 << v8);
  int v55 = v12;
  int v56 = (int)v7 % v11;
  double v14 = (gdc::FallbackCollector *)&a2[14].u64[1];
  if (v10 > 0x1E
    || ((int v15 = vcvtmd_s64_f64((double)v13 / (double)v11), v15 >= 0) ? (v16 = v15) : (v16 = -v15), v16 > 0x7F))
  {
    LOBYTE(v15) = 0;
    LOBYTE(v1CGContextBeginTransparencyLayer(this[1], 0) = 0;
    unint64_t v17 = 0;
    if (*(unsigned char *)v14) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  v40.i64[0] = ((v13 + v11) % v11) | ((unint64_t)((v13 + v11) % v11) << 16);
  v40.i64[1] = ((v12 + v11) % v11) | ((unint64_t)((v12 + v11) % v11) << 16);
  v41.i64[0] = 0xFFFF0000FFFFLL;
  v41.i64[1] = 0xFFFF0000FFFFLL;
  int64x2_t v42 = (int64x2_t)vandq_s8(v40, v41);
  unsigned long long v43 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v42, 8uLL), (int8x16_t)v42) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned long long v44 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v43, 4uLL), (int8x16_t)v43) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
  v41.i64[0] = 0x3333333333333333;
  v41.i64[1] = 0x3333333333333333;
  int8x16_t v45 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v44, 2uLL), (int8x16_t)v44), v41);
  int8x16_t v46 = (int8x16_t)vshlq_u64((uint64x2_t)v45, (uint64x2_t)xmmword_1A28FC6E0);
  v45.i64[1] *= 2;
  int64x2_t v47 = (int64x2_t)vandq_s8(vorrq_s8(v46, v45), (int8x16_t)xmmword_1A28FC6F0);
  unint64_t v17 = vorrq_s8((int8x16_t)v47, (int8x16_t)vdupq_laneq_s64(v47, 1)).u64[0];
  if (!*(unsigned char *)v14) {
LABEL_7:
  }
    *(unsigned char *)double v14 = 1;
LABEL_8:
  a2[15].i64[0] = v17;
  a2[15].i8[8] = v10;
  a2[15].i8[9] = v15;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::string __p = 0;
  unint64_t v52 = 0;
  uint64_t v53 = 0;
  int v18 = *(unsigned __int16 *)(a3 + 8);
  uint64_t v19 = (void *)a2[29].i64[0];
  int v20 = (unsigned __int16 *)v19[10];
  int v21 = (unsigned __int16 *)v19[11];
  if (v20 != v21)
  {
    while (*v20 != v18)
    {
      v20 += 8;
      if (v20 == v21) {
        goto LABEL_14;
      }
    }
  }
  if (v20 == v21) {
LABEL_14:
  }
    int v22 = 0;
  else {
    int v22 = (const gdc::LayerDataRequestKey *)*((void *)v20 + 1);
  }
  char v24 = (unsigned __int16 *)v19[4];
  uint64_t v23 = (unsigned __int16 *)v19[5];
  if (v24 != v23)
  {
    while (*v24 != v18)
    {
      v24 += 8;
      if (v24 == v23) {
        goto LABEL_21;
      }
    }
  }
  if (v24 == v23) {
LABEL_21:
  }
    uint64_t v25 = 0;
  else {
    uint64_t v25 = *((void *)v24 + 1);
  }
  __int16 v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 104))(v25);
  *(void *)&long long v57 = &unk_1EF56BA40;
  *((void *)&v57 + 1) = md::TileAdjustmentHelpers::dataKeyForTile;
  char v58 = &v57;
  md::TileAdjustmentHelpers::getFallbackDataForTile(a2 + 21, v18, v54, v22, (uint64_t)&v57, (uint64_t)v14);
  if (v58 == &v57)
  {
    (*(void (**)(long long *))(v57 + 32))(&v57);
  }
  else if (v58)
  {
    (*(void (**)(void))(*(void *)v58 + 40))();
  }
  v48[0] = 255;
  int v49 = 0;
  int v50 = 0;
  if ((v26 & 0xFF00) != 0) {
    uint64_t v27 = a4;
  }
  else {
    uint64_t v27 = 0;
  }
  gdc::FallbackCollector::collectFallbackData((uint64_t)v14, &__p, v26 != 0, v27, v48);
  gdc::FallbackCollector::end(v14, v28);
  unsigned __int8 v30 = __p;
  unint64_t v29 = v52;
  std::vector<gdc::LayerDataRequestKey>::reserve(a1, ((char *)v52 - (unsigned char *)__p) >> 7);
  if (v30 != v29)
  {
    do
    {
      LOWORD(v57) = *(_WORD *)v30;
      *(void *)((char *)&v57 + 4) = *(void *)((char *)v30 + 4);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v58, (uint64_t)(v30 + 3));
      uint64_t v31 = v30[14];
      uint64_t v61 = v31;
      unsigned __int8 v32 = (std::__shared_weak_count *)v30[15];
      std::string v62 = v32;
      if (v32)
      {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v31 = v61;
      }
      unint64_t v33 = *(void *)(a1 + 8);
      if (v33 >= *(void *)(a1 + 16))
      {
        long long v34 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)a1, v31 + 16);
      }
      else
      {
        *(unsigned char *)unint64_t v33 = *(unsigned char *)(v31 + 16);
        gdc::LayerDataKey::LayerDataKey(v33 + 8, v31 + 24);
        *(unsigned char *)(v33 + 96) = 0;
        if (*(unsigned char *)(v31 + 112))
        {
          *(_DWORD *)(v33 + 10CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v31 + 116);
          *(unsigned char *)(v33 + 96) = 1;
        }
        *(void *)(v33 + 104) = *(void *)(v31 + 120);
        long long v34 = (unsigned char *)(v33 + 112);
        *(void *)(a1 + 8) = v33 + 112;
      }
      *(void *)(a1 + 8) = v34;
      int8x8_t v35 = v62;
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      if (v59 != v60) {
        free(v59);
      }
      v30 += 16;
    }
    while (v30 != v29);
    unint64_t v29 = __p;
  }
  if (v29)
  {
    int v36 = v52;
    uint64_t v37 = v29;
    if (v52 != v29)
    {
      do
      {
        uint64_t v38 = (std::__shared_weak_count *)*(v36 - 1);
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        int v39 = (void *)*(v36 - 12);
        if (v39 != (void *)*(v36 - 10)) {
          free(v39);
        }
        v36 -= 16;
      }
      while (v36 != v29);
      uint64_t v37 = __p;
    }
    unint64_t v52 = v29;
    operator delete(v37);
  }
}

void sub_1A1D9663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)va);
  std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](v4);
  _Unwind_Resume(a1);
}

void std::vector<gdc::LayerDataRequestKey>::__insert_with_size[abi:nn180100]<std::__wrap_iter<gdc::LayerDataRequestKey const*>,std::__wrap_iter<gdc::LayerDataRequestKey const*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v5 = a5;
  uint64_t v6 = a3;
  unint64_t v7 = (char *)*a1;
  unint64_t v8 = (unint64_t)a1[1];
  uint64_t v9 = (a2 - (uint64_t)*a1) / 112;
  uint64_t v10 = (uint64_t)*a1 + 112 * v9;
  int v11 = a1[2];
  uint64_t v68 = v9;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-v8] >> 4) < a5)
  {
    unint64_t v12 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (void)v7) >> 4);
    if (v12 > 0x249249249249249) {
      abort();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v7) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x124924924924924) {
      unint64_t v14 = 0x249249249249249;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v65 = a1;
    unint64_t v60 = v14;
    if (v14)
    {
      if (v14 > 0x249249249249249) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v15 = (char *)operator new(112 * v14);
      uint64_t v9 = v68;
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v24 = 0;
    uint64_t v63 = v15;
    uint64_t v25 = &v15[112 * v9];
    char v58 = &v25[112 * v5];
    do
    {
      uint64_t v26 = v6 + v24;
      uint64_t v27 = &v25[v24];
      v25[v24] = *(unsigned char *)(v6 + v24);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v25[v24 + 8], v6 + v24 + 8);
      v25[v24 + 96] = 0;
      if (*(unsigned char *)(v6 + v24 + 96))
      {
        *((_DWORD *)v27 + 25) = *(_DWORD *)(v26 + 100);
        v27[96] = 1;
      }
      *((void *)v27 + 13) = *(void *)(v26 + 104);
      v24 += 112;
    }
    while (112 * v5 != v24);
    uint64_t v28 = 112 * v60;
    unsigned __int8 v30 = v65;
    uint64_t v29 = v68;
    uint64_t v31 = (char *)*v65;
    uint64_t v32 = v68 << 7;
    if (*v65 != (void *)v10)
    {
      unint64_t v33 = v63;
      long long v34 = v7;
      uint64_t v35 = 112 * v68;
      do
      {
        int v36 = &v33[v35];
        uint64_t v37 = &v34[v35];
        v33[v35 - 112] = v34[v35 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v33[v35 - 104], (uint64_t)&v34[v35 - 104]);
        v33[v35 - 16] = 0;
        if (v34[v35 - 16])
        {
          *((_DWORD *)v36 - 3) = *((_DWORD *)v37 - 3);
          *(v36 - 16) = 1;
        }
        *((void *)v36 - 1) = *((void *)v37 - 1);
        v34 -= 112;
        v33 -= 112;
      }
      while (&v34[v35] != v31);
      uint64_t v29 = v68;
      uint64_t v25 = &v33[112 * v68];
      unsigned __int8 v30 = v65;
      uint64_t v32 = v68 << 7;
      uint64_t v28 = 112 * v60;
    }
    uint64_t v38 = &v63[v28];
    int v39 = (char *)v30[1];
    int8x16_t v40 = v58;
    if (v39 != (char *)v10)
    {
      uint64_t v41 = v32 - 16 * v29;
      int64x2_t v42 = &v63[112 * v5];
      do
      {
        unsigned long long v43 = &v7[v41];
        unsigned long long v44 = &v42[v41];
        v42[v41] = v7[v41];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v42[v41 + 8], (uint64_t)&v7[v41 + 8]);
        v42[v41 + 96] = 0;
        if (v7[v41 + 96])
        {
          *((_DWORD *)v44 + 25) = *((_DWORD *)v43 + 25);
          v44[96] = 1;
        }
        *((void *)v44 + 13) = *((void *)v43 + 13);
        v7 += 112;
        v42 += 112;
      }
      while (v43 + 112 != v39);
      int8x16_t v40 = &v42[v41];
      uint64_t v10 = (uint64_t)v30[1];
    }
    int8x16_t v45 = *v30;
    *unsigned __int8 v30 = v25;
    v30[1] = v40;
    v30[2] = v38;
    while ((void *)v10 != v45)
    {
      if (*(unsigned char *)(v10 - 16)) {
        *(unsigned char *)(v10 - 16) = 0;
      }
      int8x16_t v46 = *(void **)(v10 - 96);
      if (v46 != *(void **)(v10 - 80)) {
        free(v46);
      }
      v10 -= 112;
    }
    if (v45)
    {
      operator delete(v45);
    }
    return;
  }
  uint64_t v16 = v8 - v10;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v10) >> 4) >= a5)
  {
    uint64_t v18 = a3 + 112 * a5;
    uint64_t v23 = (char *)a1[1];
LABEL_50:
    uint64_t v47 = v10 + 112 * v5;
    uint64_t v48 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v23[-v47] >> 4);
    unint64_t v49 = (unint64_t)&v23[-112 * v5];
    int v50 = v23;
    if (v49 < v8)
    {
      uint64_t v59 = v47;
      uint64_t v61 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v23[-v47] >> 4);
      uint64_t v64 = v18;
      __int16 v67 = a1;
      uint64_t v51 = 0;
      unint64_t v52 = &v7[112 * v9 + 16 * ((uint64_t)&v23[-v47] >> 4)];
      do
      {
        uint64_t v53 = v49 + v51;
        unsigned int v54 = &v23[v51];
        v23[v51] = *(unsigned char *)(v49 + v51);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v23[v51 + 8], v49 + v51 + 8);
        v23[v51 + 96] = 0;
        if (*(unsigned char *)(v49 + v51 + 96))
        {
          *((_DWORD *)v54 + 25) = *(_DWORD *)&v52[v51 + 100];
          v54[96] = 1;
        }
        *((void *)v54 + 13) = *(void *)(v53 + 104);
        v51 += 112;
      }
      while (v53 + 112 < v8);
      int v50 = &v23[v51];
      a1 = v67;
      uint64_t v9 = v68;
      uint64_t v48 = v61;
      uint64_t v18 = v64;
      uint64_t v47 = v59;
    }
    a1[1] = v50;
    if (v23 != (char *)v47)
    {
      uint64_t v55 = (uint64_t)(v23 - 112);
      uint64_t v56 = 112 * v48;
      uint64_t v57 = (uint64_t)&v7[112 * v9 - 112];
      do
      {
        uint64_t v55 = gdc::LayerDataRequestKey::operator=(v55, v57 + v56) - 112;
        v56 -= 112;
      }
      while (v56);
    }
    for (; v6 != v18; v10 += 112)
    {
      gdc::LayerDataRequestKey::operator=(v10, v6);
      v6 += 112;
    }
    return;
  }
  uint64_t v18 = a3 + 16 * ((uint64_t)(v8 - v10) >> 4);
  if (v18 == a4)
  {
    uint64_t v23 = (char *)a1[1];
  }
  else
  {
    double v66 = a1;
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v18;
      uint64_t v21 = v18 + v19;
      uint64_t v22 = v8 + v19;
      *(unsigned char *)(v8 + v19) = *(unsigned char *)v21;
      gdc::LayerDataKey::LayerDataKey(v8 + v19 + 8, v21 + 8);
      *(unsigned char *)(v8 + v19 + 96) = 0;
      if (*(unsigned char *)(v21 + 96))
      {
        *(_DWORD *)(v22 + 10CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v21 + 100);
        *(unsigned char *)(v22 + 96) = 1;
      }
      *(void *)(v22 + 104) = *(void *)(v21 + 104);
      v19 += 112;
      uint64_t v18 = v20;
    }
    while (v21 + 112 != a4);
    uint64_t v23 = (char *)(v8 + v19);
    a1 = v66;
    uint64_t v9 = v68;
    uint64_t v16 = v8 - v10;
    uint64_t v5 = a5;
  }
  a1[1] = v23;
  if (v16 >= 1) {
    goto LABEL_50;
  }
}

void std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(*a1);
    std::__tree<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::__map_value_compare<gdc::LayerDataRequestKey,std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>,std::less<gdc::LayerDataRequestKey>,true>,std::allocator<std::__value_type<gdc::LayerDataRequestKey,std::vector<gdc::LayerDataRequestKey>>>>::destroy(a1[1]);
    uint64_t v2 = a1[18];
    if (v2)
    {
      uint64_t v3 = a1[19];
      uint8x8_t v4 = (void *)a1[18];
      if (v3 != v2)
      {
        do
        {
          if (*(unsigned char *)(v3 - 16)) {
            *(unsigned char *)(v3 - 16) = 0;
          }
          uint64_t v5 = *(void **)(v3 - 96);
          if (v5 != *(void **)(v3 - 80)) {
            free(v5);
          }
          v3 -= 112;
        }
        while (v3 != v2);
        uint8x8_t v4 = (void *)a1[18];
      }
      a1[19] = v2;
      operator delete(v4);
    }
    if (*((unsigned char *)a1 + 128)) {
      *((unsigned char *)a1 + 128) = 0;
    }
    uint64_t v6 = (void *)a1[6];
    if (v6 != (void *)a1[8]) {
      free(v6);
    }
    operator delete(a1);
  }
}

void std::vector<gdc::LayerDataRequestKey>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      abort();
    }
    uint8x8_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 112 * a2;
    uint64_t v6 = (char *)operator new(112 * a2);
    unint64_t v7 = &v6[v5];
    unint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        int v11 = &v4[v9];
        v8[v9 - 112] = v4[v9 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v9 - 104], (uint64_t)&v4[v9 - 104]);
        v8[v9 - 16] = 0;
        if (v4[v9 - 16])
        {
          *((_DWORD *)v10 - 3) = *((_DWORD *)v11 - 3);
          *(v10 - 16) = 1;
        }
        *((void *)v10 - 1) = *((void *)v11 - 1);
        v9 -= 112;
      }
      while (&v4[v9] != v2);
      uint64_t v2 = *(char **)a1;
      unint64_t v12 = *(char **)(a1 + 8);
      *(void *)a1 = &v8[v9];
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        if (*(v12 - 16)) {
          *(v12 - 16) = 0;
        }
        unint64_t v13 = (void *)*((void *)v12 - 12);
        if (v13 != *((void **)v12 - 10)) {
          free(v13);
        }
        v12 -= 112;
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void gdc::FallbackData::~FallbackData(gdc::FallbackData *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3 != *((void **)this + 6)) {
    free(v3);
  }
}

void **std::vector<gdc::FallbackData>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint8x8_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 12);
        if (v6 != *((void **)v3 - 10)) {
          free(v6);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      uint8x8_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::DrapingLogic::_dataInStore(gdc::LayerDataStore *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int8 *a4, int a5)
{
  __int16 v5 = a5;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a2 != a3)
  {
    while (*a2 != a5)
    {
      a2 += 8;
      if (a2 == a3) {
        goto LABEL_7;
      }
    }
  }
  if (a2 == a3) {
LABEL_7:
  }
    unint64_t v8 = 0;
  else {
    unint64_t v8 = (const gdc::LayerDataRequestKey *)*((void *)a2 + 1);
  }
  *(int32x2_t *)&long long v57 = vrev64_s32(*(int32x2_t *)(a4 + 4));
  int v9 = *a4;
  DWORD2(v57) = a4[1];
  HIDWORD(v57) = v9;
  gdc::LayerDataRequestKey::LayerDataRequestKey(v47, 0, a5, (int *)&v57, 4);
  gdc::LayerDataStore::get(a1, v8, v47);
  if (!*(void *)a1)
  {
    int32x2_t v65 = vrev64_s32(*(int32x2_t *)(a4 + 4));
    int v10 = *a4;
    int v66 = a4[1];
    int v67 = v10;
    gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v57, 1u, v5, (int *)&v65, 4);
    v47[0] = v57;
    __int16 v48 = WORD4(v57);
    int v11 = v53;
    if (v49 != v51) {
      free(v49);
    }
    unint64_t v49 = v53;
    int v50 = v53;
    uint64_t v51 = v53;
    uint64_t v52 = 32;
    unint64_t v12 = (char *)v58;
    unint64_t v13 = v59;
    unint64_t v14 = v59 - (unsigned char *)v58;
    if ((unint64_t)(v59 - (unsigned char *)v58) < 0x21)
    {
LABEL_37:
      if (v12 == v13)
      {
LABEL_55:
        int v50 = (_OWORD *)((char *)v11 + v14);
        v53[2] = v61;
        if (v62)
        {
          if (!v54) {
            char v54 = 1;
          }
          int v55 = v63;
          uint64_t v56 = v64;
          char v62 = 0;
        }
        else
        {
          if (v54) {
            char v54 = 0;
          }
          uint64_t v56 = v64;
        }
        if (v58 != v60) {
          free(v58);
        }
        gdc::LayerDataStore::get((gdc::LayerDataStore *)&v57, v8, v47);
        long long v44 = v57;
        long long v57 = 0uLL;
        int8x16_t v45 = (std::__shared_weak_count *)*((void *)a1 + 1);
        *(_OWORD *)a1 = v44;
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        int8x16_t v46 = (std::__shared_weak_count *)*((void *)&v57 + 1);
        if (*((void *)&v57 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        goto LABEL_9;
      }
      if (v14 < 8)
      {
        unint64_t v33 = v11;
        goto LABEL_53;
      }
      if ((unint64_t)((char *)v11 - v12) < 0x20)
      {
        unint64_t v33 = v11;
        goto LABEL_53;
      }
      if (v14 >= 0x20)
      {
        unint64_t v32 = v14 & 0xFFFFFFFFFFFFFFE0;
        long long v34 = (long long *)(v12 + 16);
        uint64_t v35 = v11 + 1;
        unint64_t v36 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *uint64_t v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v14 == v32) {
          goto LABEL_54;
        }
        if ((v14 & 0x18) == 0)
        {
          v12 += v32;
          unint64_t v33 = (char *)v11 + v32;
          goto LABEL_53;
        }
      }
      else
      {
        unint64_t v32 = 0;
      }
      unint64_t v38 = v14 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = (char *)v11 + (v14 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v39 = v32 - (v14 & 0xFFFFFFFFFFFFFFF8);
      int8x16_t v40 = (uint64_t *)&v12[v32];
      uint64_t v41 = (void *)((char *)v11 + v32);
      do
      {
        uint64_t v42 = *v40++;
        *v41++ = v42;
        v39 += 8;
      }
      while (v39);
      if (v14 == v38) {
        goto LABEL_54;
      }
      v12 += v38;
      do
      {
LABEL_53:
        char v43 = *v12++;
        *v33++ = v43;
      }
      while (v12 != v13);
LABEL_54:
      int v11 = v50;
      goto LABEL_55;
    }
    if (v14 <= 0x40) {
      size_t v15 = 64;
    }
    else {
      size_t v15 = v59 - (unsigned char *)v58;
    }
    uint64_t v16 = malloc_type_malloc(v15, 0x100004077774924uLL);
    int v11 = v16;
    unint64_t v17 = (char *)v49;
    uint64_t v18 = (char *)v50;
    if (v49 == v50)
    {
LABEL_36:
      unint64_t v49 = v16;
      int v50 = v16;
      uint64_t v52 = v15;
      goto LABEL_37;
    }
    unint64_t v19 = (char *)v50 - (unsigned char *)v49;
    if ((unint64_t)((char *)v50 - (unsigned char *)v49) < 8)
    {
      uint64_t v20 = v16;
    }
    else
    {
      uint64_t v20 = v16;
      if ((unint64_t)((char *)v16 - (unsigned char *)v49) >= 0x20)
      {
        if (v19 < 0x20)
        {
          uint64_t v21 = 0;
LABEL_30:
          unint64_t v26 = v19 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v20 = (char *)v16 + (v19 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v28 = (uint64_t *)&v17[v21];
          uint64_t v29 = (void *)((char *)v16 + v21);
          do
          {
            uint64_t v30 = *v28++;
            *v29++ = v30;
            v27 += 8;
          }
          while (v27);
          if (v19 == v26) {
            goto LABEL_36;
          }
          v17 += v26;
          goto LABEL_35;
        }
        uint64_t v21 = v19 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v22 = (long long *)((char *)v49 + 16);
        uint64_t v23 = v16 + 1;
        unint64_t v24 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v19 == v21) {
          goto LABEL_36;
        }
        if ((v19 & 0x18) != 0) {
          goto LABEL_30;
        }
        v17 += v21;
        uint64_t v20 = (char *)v16 + v21;
      }
    }
    do
    {
LABEL_35:
      char v31 = *v17++;
      *v20++ = v31;
    }
    while (v17 != v18);
    goto LABEL_36;
  }
LABEL_9:
  if (v54) {
    char v54 = 0;
  }
  if (v49 != v51) {
    free(v49);
  }
}

void sub_1A1D973BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a25 != a27) {
    free(a25);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v35);
  if (a11 != a13) {
    free(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](a1 + 128);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<md::FoundationOverlayPair,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<md::FoundationOverlayPair,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(unsigned char *)(v2 + 224)) {
        *(unsigned char *)(v2 + 224) = 0;
      }
      uint64_t v3 = *(void **)(v2 + 144);
      if (v3 != *(void **)(v2 + 160)) {
        free(v3);
      }
      if (*(unsigned char *)(v2 + 112)) {
        *(unsigned char *)(v2 + 112) = 0;
      }
      uint64_t v4 = *(void **)(v2 + 32);
      if (v4 != *(void **)(v2 + 48)) {
        free(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  return std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::emplace_back<md::overlayComponents::VectorOverlay &,md::DrapingStyle>();
}

void std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::emplace_back<md::overlayComponents::VectorOverlay &,md::DrapingStyle>(void **a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = (char *)a1[2];
  if (v6 < v7)
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
    *((void *)v6 + 2) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(void *)(a2 + 32);
    *((void *)v6 + 3) = *(void *)(a2 + 24);
    *((void *)v6 + 4) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(void *)(a2 + 48);
    *((void *)v6 + 5) = *(void *)(a2 + 40);
    *((void *)v6 + 6) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(a2 + 64);
    *((void *)v6 + 7) = *(void *)(a2 + 56);
    *((void *)v6 + 8) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void *)(a2 + 80);
    *((void *)v6 + 9) = *(void *)(a2 + 72);
    *((void *)v6 + 1CGContextBeginTransparencyLayer(this[1], 0) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a2 + 88);
    v6[96] = *(unsigned char *)(a2 + 96);
    *((void *)v6 + 11) = v13;
    long long v14 = *a3;
    *(_OWORD *)(v6 + 116) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)(v6 + 104) = v14;
    size_t v15 = v6 + 136;
    goto LABEL_40;
  }
  unint64_t v16 = 0xF0F0F0F0F0F0F0F1 * ((v6 - (unsigned char *)*a1) >> 3);
  unint64_t v17 = v16 + 1;
  if (v16 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v18 = 0xF0F0F0F0F0F0F0F1 * ((v7 - (unsigned char *)*a1) >> 3);
  if (2 * v18 > v17) {
    unint64_t v17 = 2 * v18;
  }
  if (v18 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v19 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 > 0x1E1E1E1E1E1E1E1) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v20 = (char *)operator new(136 * v19);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = &v20[136 * v16];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  *((void *)v21 + 2) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(void *)(a2 + 32);
  *((void *)v21 + 3) = *(void *)(a2 + 24);
  *((void *)v21 + 4) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a2 + 48);
  *((void *)v21 + 5) = *(void *)(a2 + 40);
  *((void *)v21 + 6) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(void *)(a2 + 64);
  *((void *)v21 + 7) = *(void *)(a2 + 56);
  *((void *)v21 + 8) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(void *)(a2 + 80);
  *((void *)v21 + 9) = *(void *)(a2 + 72);
  *((void *)v21 + 1CGContextBeginTransparencyLayer(this[1], 0) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = &v20[136 * v19];
  *((void *)v21 + 11) = *(void *)(a2 + 88);
  v21[96] = *(unsigned char *)(a2 + 96);
  uint64_t v28 = &v20[136 * v16];
  *(_OWORD *)(v28 + 104) = *a3;
  *(_OWORD *)(v28 + 116) = *(long long *)((char *)a3 + 12);
  size_t v15 = v21 + 136;
  uint64_t v29 = (char *)*a1;
  uint64_t v30 = (char *)a1[1];
  if (v30 == *a1)
  {
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v27;
    if (!v30) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v31 = 0;
  do
  {
    unint64_t v32 = &v21[v31];
    unint64_t v33 = &v30[v31];
    *(_OWORD *)(v32 - 136) = *(_OWORD *)&v30[v31 - 136];
    *((void *)v32 - 15) = *(void *)&v30[v31 - 120];
    *((void *)v33 - 16) = 0;
    *((void *)v33 - 15) = 0;
    *((_OWORD *)v32 - 7) = *(_OWORD *)&v30[v31 - 112];
    *((void *)v33 - 14) = 0;
    *((void *)v33 - 13) = 0;
    *((_OWORD *)v32 - 6) = *(_OWORD *)&v30[v31 - 96];
    long long v34 = *(_OWORD *)&v30[v31 - 80];
    *((void *)v33 - 12) = 0;
    *((void *)v33 - 11) = 0;
    *((_OWORD *)v32 - 5) = v34;
    *((void *)v33 - 1CGContextBeginTransparencyLayer(this[1], 0) = 0;
    *((void *)v33 - 9) = 0;
    *((_OWORD *)v32 - 4) = *(_OWORD *)&v30[v31 - 64];
    *((void *)v33 - 8) = 0;
    *((void *)v33 - 7) = 0;
    uint64_t v35 = *(void *)&v30[v31 - 48];
    *(v32 - 4CGContextBeginTransparencyLayer(this[1], 0) = v30[v31 - 40];
    *((void *)v32 - 6) = v35;
    long long v36 = *(_OWORD *)&v30[v31 - 32];
    *(_OWORD *)(v32 - 2CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)&v30[v31 - 20];
    *((_OWORD *)v32 - 2) = v36;
    v31 -= 136;
  }
  while (&v30[v31] != v29);
  uint64_t v30 = (char *)*a1;
  long long v37 = (char *)a1[1];
  *a1 = &v21[v31];
  a1[1] = v15;
  a1[2] = v27;
  while (v37 != v30)
    md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v37 - 136));
  if (v30) {
LABEL_39:
  }
    operator delete(v30);
LABEL_40:
  a1[1] = v15;
}

void md::PolygonOverlayMeshBuilder::PolygonMeshes::~PolygonMeshes(md::PolygonOverlayMeshBuilder::PolygonMeshes *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    __int16 v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1A6239270](v3, 0x1020C408635837CLL);
  }
}

void **std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 136));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::function<void ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0(uint64_t a1)
{
  uint64_t v9 = (void **)(a1 + 128);
  std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](&v9);
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    uint64_t v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 136));
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 104);
    }
    *(void *)(a1 + 112) = v2;
    operator delete(v4);
  }
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void std::vector<md::ClientDrapedMeshes>::__append(char **a1, unint64_t a2)
{
  __int16 v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x333333333333333) {
      abort();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x199999999999999) {
      unint64_t v10 = 0x333333333333333;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x333333333333333) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v11 = (char *)operator new(80 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[80 * v7];
    long long v14 = &v11[80 * v10];
    size_t v15 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v5) {
        return;
      }
      goto LABEL_25;
    }
    uint64_t v17 = 0;
    do
    {
      unint64_t v19 = &v13[v17];
      uint64_t v20 = &v5[v17];
      *(v19 - 8CGContextBeginTransparencyLayer(this[1], 0) = 0;
      *(v19 - 56) = 0;
      if (v5[v17 - 56])
      {
        uint64_t v21 = v20 - 80;
        *((_OWORD *)v19 - 5) = *((_OWORD *)v20 - 5);
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v19 - 8) = *((void *)v20 - 8);
        *(v19 - 56) = 1;
      }
      *(v19 - 48) = 0;
      *(v19 - 24) = 0;
      if (*(v20 - 24))
      {
        uint64_t v22 = &v5[v17];
        *((_OWORD *)v19 - 3) = *(_OWORD *)&v5[v17 - 48];
        *((void *)v22 - 6) = 0;
        *((void *)v22 - 5) = 0;
        *(void *)&v13[v17 - 32] = *(void *)&v5[v17 - 32];
        *(v19 - 24) = 1;
      }
      unint64_t v18 = &v5[v17];
      *(_OWORD *)&v13[v17 - 16] = *(_OWORD *)&v5[v17 - 16];
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      v17 -= 80;
    }
    while (&v5[v17] != v6);
    uint64_t v23 = &v13[v17];
    __int16 v5 = *a1;
    uint64_t v24 = (uint64_t)a1[1];
    *a1 = v23;
    a1[1] = v16;
    a1[2] = v14;
    while ((char *)v24 != v5)
    {
      v24 -= 80;
      std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(v24);
    }
    if (v5)
    {
LABEL_25:
      operator delete(v5);
    }
  }
}

void std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(unsigned char *)(a1 + 56)) {
      goto LABEL_8;
    }
  }
  else if (!*(unsigned char *)(a1 + 56))
  {
    goto LABEL_8;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_8:
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void ggl::Mesh::~Mesh(ggl::Mesh *this)
{
  *(void *)this = &unk_1EF5606B0;
  *((void *)this + 2) = &unk_1EF5606D0;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy((uint64_t)this + 112, *((void **)this + 15));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *((void *)this + 8);
    if (!v3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 8);
    if (!v3) {
      goto LABEL_12;
    }
  }
  uint64_t v4 = *((void *)this + 9);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v6->__on_zero_shared)(v6, v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    uint64_t v5 = *((void *)this + 8);
  }
  *((void *)this + 9) = v3;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v5, *((void *)this + 10) - v5);
LABEL_12:
  *((void *)this + 2) = &unk_1EF55D4B8;
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, *((void *)this + 5));
    *((void *)this + 5) = 3735927469;
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  uint64_t vars8;

  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void md::DrapingLogic::drapeStrokeMesh(unsigned char *a1, void *a2, uint64_t a3, char *a4, void *a5, char *a6, float a7, float a8)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  std::chrono::steady_clock::now();
  long long v14 = (uint64_t *)a5[8];
  unint64_t v16 = (void *)*v14;
  size_t v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v113 = *v14;
  int v114 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v106 = a2;
  uint64_t v108 = a6;
  uint64_t v18 = v16[5];
  uint64_t v17 = v16[6];
  unint64_t v19 = v16[1];
  uint64_t v20 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CE8;
  uint64_t v21 = (v17 - v18) / v19;
  ggl::BufferData::BufferData((uint64_t)&v20[1], 16, 0, 0, 6, v21);
  v20[9].__shared_weak_owners_ = (uint64_t)"BakedRibbonVertexData";
  v20[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55C988;
  v20[9].__shared_owners_ = (uint64_t)&unk_1EF55C9A8;
  BOOL v109 = &v20[1];
  __double2 v110 = v20;
  float v111 = a7 * 8.0001;
  float v112 = a8 * 8.0001;
  *(void *)buf = v16;
  uint64_t v159 = (void **)&v15->__vftable;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  p_p = (void **)&v20[1].__vftable;
  int16x4_t v161 = (uint8_t *)v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = (void *)a5[12];
  uint64_t v22 = (std::__shared_weak_count *)a5[13];
  uint64_t v162 = v21;
  uint64_t v163 = v23;
  uint64_t v164 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v165 = &v111;
  unint64_t v157 = 0;
  uint64_t v24 = (void **)operator new(0x48uLL);
  *uint64_t v24 = &unk_1EF56BF70;
  v24[1] = v16;
  uint64_t v159 = 0;
  *(void *)buf = 0;
  v24[2] = v15;
  v24[3] = &v20[1];
  p_p = 0;
  int16x4_t v161 = 0;
  v24[4] = v20;
  v24[5] = (void *)v21;
  v24[6] = v23;
  v24[7] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v24[8] = &v111;
  unint64_t v157 = v24;
  BOOL v152 = 0;
  uint64_t v151 = 0;
  uint64_t v25 = v106;
  (*(void (**)(void, void **, uint64_t *))(*(void *)*v106 + 16))(*v106, &__p, &v151);
  uint64_t v26 = v152;
  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v157 == &__p)
  {
    (*((void (**)(void **))__p + 4))(&__p);
    uint64_t v27 = v164;
    if (!v164) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v157) {
    (*((void (**)(void))*v157 + 5))();
  }
  uint64_t v27 = v164;
  if (v164)
  {
LABEL_18:
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_20:
  uint64_t v28 = (std::__shared_weak_count *)v161;
  if (v161 && !atomic_fetch_add((atomic_ullong *volatile)v161 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = (std::__shared_weak_count *)v159;
  if (v159 && !atomic_fetch_add((atomic_ullong *volatile)v159 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  std::string __p = v109;
  uint64_t v155 = v110;
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = (std::__shared_weak_count *)a5[13];
  uint64_t v151 = a5[12];
  BOOL v152 = v30;
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)v147, (uint64_t)"baked ribbon mesh", (uint64_t *)&__p, &v151);
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)v147, (uint64_t)"baked ribbon mesh", (uint64_t *)&__p, &v151);
  }
  uint64_t v31 = v155;
  if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  unint64_t v32 = v114;
  if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  unint64_t v33 = v148;
  uint64_t v34 = (*(void *)(*v148 + 48) - *(void *)(*v148 + 40)) / *(void *)(*v148 + 8);
  unsigned int v35 = a4[1];
  unsigned int v36 = v108[1];
  char v37 = v35 - v36;
  if (v35 < v36)
  {
    char v38 = v36 - v35;
    LOBYTE(v109) = v36 - v35;
    __powidf2();
    WORD1(v109) = (int)v39;
    int v40 = *((_DWORD *)a4 + 1);
    int v41 = *((_DWORD *)v108 + 1);
    WORD2(v109) = *((_DWORD *)v108 + 2) - (*((_DWORD *)a4 + 2) << v38);
    HIWORD(v109) = v41 - ((_WORD)v40 << v38);
    uint64_t v42 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CE8;
    ggl::BufferData::BufferData((uint64_t)&v42[1], 16, 0, 0, 6, v34);
    v42[9].__shared_weak_owners_ = (uint64_t)"OverlayTransformedVertexData";
    v42[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
    v42[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55C988;
    v42[9].__shared_owners_ = (uint64_t)&unk_1EF55C9A8;
    std::string __p = &v42[1];
    uint64_t v155 = v42;
    uint64_t v140 = &v109;
    uint64_t v43 = *v33;
    uint64_t v141 = *v33;
    long long v44 = (std::__shared_weak_count *)v33[1];
    unint64_t v142 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v143 = &v42[1].__vftable;
    unint64_t v144 = v42;
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v145 = v34;
    __int16 v146 = -1;
    int16x4_t v161 = 0;
    int8x16_t v45 = operator new(0x40uLL);
    *int8x16_t v45 = &unk_1EF56DC20;
    v45[1] = &v109;
    v45[2] = v43;
    v45[3] = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v45[4] = v42 + 1;
    v45[5] = v42;
    std::string::size_type v143 = 0;
    unint64_t v144 = 0;
    v45[6] = v145;
    *((_WORD *)v45 + 28) = v146;
    int16x4_t v161 = (uint8_t *)v45;
    uint64_t v113 = 0;
    int v114 = 0;
    (*(void (**)(void, uint8_t *, uint64_t *))(*(void *)*v106 + 16))(*v106, buf, &v113);
    int8x16_t v46 = v114;
    if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    if (v161 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
      uint64_t v47 = v144;
      if (!v144)
      {
LABEL_77:
        __int16 v71 = v142;
        if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
        uint64_t v138 = __p;
        double v139 = v155;
        if (v155) {
          atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v72 = (std::__shared_weak_count *)v150;
        v137[0] = (uint64_t)v149;
        v137[1] = v150;
        if (v150) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 8), 1uLL, memory_order_relaxed);
        }
        ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)buf, (uint64_t)"transformed OverlayMesh", (uint64_t *)&v138, v137);
        ggl::Mesh::operator=((uint64_t)v147, (uint64_t)buf);
        ggl::Mesh::~Mesh((ggl::Mesh *)buf);
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        __int16 v73 = v139;
        if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
        double v74 = v155;
        if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
LABEL_130:
        uint64_t v113 = 0;
        int v114 = 0;
        float v115 = a7;
        float v116 = a8;
        uint64_t v153 = *(void *)(a3 + 176);
        uint64_t v89 = v149[5];
        uint64_t v88 = v149[6];
        unint64_t v90 = v149[1];
        uint64_t v92 = *(void *)(*v148 + 40);
        uint64_t v91 = *(void *)(*v148 + 48);
        unint64_t v93 = *(void *)(*v148 + 8);
        int v94 = (std::__shared_weak_count *)operator new(0x98uLL);
        std::__shared_ptr_emplace<gdc::DCEL>::__shared_ptr_emplace[abi:nn180100]<unsigned int,std::allocator<gdc::DCEL>,0>((uint64_t)v94, (v91 - v92) / v93);
        unint64_t v95 = (v88 - v89) / v90;
        BOOL v109 = &v94[1];
        __double2 v110 = v94;
        gdc::DCEL::reserveFaces((gdc::DCEL *)&v94[1], v95 / 3);
        int v96 = (uint8_t *)operator new(0x30uLL);
        *(void *)int v96 = &unk_1EF572F60;
        *((void *)v96 + 1) = &v109;
        *((void *)v96 + 2) = &v149;
        *((void *)v96 + 3) = 0;
        *((void *)v96 + 4) = v95;
        *((void *)v96 + 5) = v95;
        int16x4_t v161 = v96;
        uint64_t v155 = 0;
        std::string __p = 0;
        (*(void (**)(void, uint8_t *, void **))(*(void *)*v25 + 16))(*v25, buf, &__p);
        unsigned int v97 = v155;
        if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
        if (v161 == buf)
        {
          (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
        }
        else if (v161)
        {
          (*(void (**)(void))(*(void *)v161 + 40))();
        }
        if (((*((void *)v109 + 4) - *((void *)v109 + 3)) >> 2) != (v95 / 3))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          int v98 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            uint64_t v99 = (*((void *)v109 + 4) - *((void *)v109 + 3)) >> 2;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v99;
            LOWORD(v159) = 1024;
            *(_DWORD *)((char *)&v159 + 2) = v95 / 3;
            _os_log_impl(&dword_1A1780000, v98, OS_LOG_TYPE_ERROR, "face count does not match (%d to %d)", buf, 0xEu);
          }
        }
        *(void *)buf = 0;
        uint64_t v159 = 0;
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        int v165 = 0;
        uint64_t v166 = 0;
        uint64_t v168 = 0;
        uint64_t v167 = 0;
        uint64_t v172 = 0;
        uint64_t v171 = 0;
        uint64_t v169 = 0;
        uint64_t v170 = 0;
        operator new();
      }
    }
    else
    {
      if (v161) {
        (*(void (**)(void))(*(void *)v161 + 40))();
      }
      uint64_t v47 = v144;
      if (!v144) {
        goto LABEL_77;
      }
    }
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_77;
  }
  if (v36 >= v35) {
    goto LABEL_130;
  }
  uint64_t v49 = v149[5];
  uint64_t v48 = v149[6];
  unint64_t v50 = v149[1];
  LOBYTE(v111) = v35 - v36;
  __powidf2();
  HIWORD(v111) = (int)v51;
  int v52 = *((_DWORD *)v108 + 1);
  int v53 = *((_DWORD *)a4 + 1);
  LOWORD(v112) = *((_DWORD *)a4 + 2) - (*((_DWORD *)v108 + 2) << v37);
  HIWORD(v112) = v53 - ((_WORD)v52 << v37);
  char v54 = (std::__shared_weak_count *)operator new(0xF8uLL);
  unint64_t v55 = v48 - v49;
  v54->__shared_owners_ = 0;
  v54->__shared_weak_owners_ = 0;
  v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CE8;
  unint64_t v56 = v55 / v50;
  ggl::BufferData::BufferData((uint64_t)&v54[1], 16, 0, 0, 6, v34);
  v54[9].__shared_weak_owners_ = (uint64_t)"OverlayTransformedVertexData";
  v54[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::PolylineOverlayRibbon::bakedWidthVboReflection;
  v54[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55C988;
  v54[9].__shared_owners_ = (uint64_t)&unk_1EF55C9A8;
  uint64_t v113 = (uint64_t)&v54[1];
  int v114 = v54;
  uint64_t v155 = 0;
  std::string __p = 0;
  double v156 = 0;
  if (v50 <= v55)
  {
    if ((v56 & 0x8000000000000000) != 0) {
      abort();
    }
    std::string __p = operator new(2 * v56);
    uint64_t v155 = (std::__shared_weak_count *)__p;
    double v156 = (char *)__p + 2 * v56;
  }
  unint64_t v57 = v55 / v50;
  *(void *)&long long v120 = &v111;
  *((void *)&v120 + 1) = &__p;
  uint64_t v58 = v150;
  uint64_t v104 = v149;
  int8x8_t v121 = v149;
  unsigned int v122 = (std::__shared_weak_count *)v150;
  if (v150) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 8), 1uLL, memory_order_relaxed);
  }
  char v59 = a4[1];
  int v60 = *((_DWORD *)a4 + 1);
  int v61 = *((_DWORD *)a4 + 2);
  char v62 = *a4;
  char v123 = *a4;
  int v102 = v60;
  char v103 = v59;
  char v124 = v59;
  int v125 = v60;
  int v126 = v61;
  LOBYTE(v6CGContextBeginTransparencyLayer(this[1], 0) = v108[1];
  int v63 = *((_DWORD *)v108 + 1);
  int v64 = *((_DWORD *)v108 + 2);
  char v65 = *v108;
  char v127 = *v108;
  char v100 = v60;
  int v101 = v61;
  char v128 = v60;
  int v129 = v63;
  int v130 = v64;
  uint64_t v66 = *v33;
  uint64_t v131 = *v33;
  int v67 = (std::__shared_weak_count *)v33[1];
  uint64_t v132 = v67;
  if (v67) {
    atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v133 = &v54[1].__vftable;
  uint64_t v134 = v54;
  atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v135 = v34;
  *((void *)&v135 + 1) = v57;
  __int16 v136 = -1;
  int16x4_t v161 = 0;
  uint64_t v68 = (char *)operator new(0x90uLL);
  *(void *)uint64_t v68 = &unk_1EF56DC68;
  *(_OWORD *)(v68 + 8) = v120;
  *((void *)v68 + 3) = v104;
  *((void *)v68 + 4) = v58;
  if (v58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
  }
  v68[40] = v62;
  v68[41] = v103;
  *((_DWORD *)v68 + 11) = v102;
  *((_DWORD *)v68 + 12) = v101;
  v68[64] = v65;
  v68[65] = v100;
  *((_DWORD *)v68 + 17) = v63;
  *((_DWORD *)v68 + 18) = v64;
  *((void *)v68 + 11) = v66;
  *((void *)v68 + 12) = v67;
  if (v67) {
    atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v68 + 13) = v54 + 1;
  *((void *)v68 + 14) = v54;
  int v133 = 0;
  uint64_t v134 = 0;
  *(_OWORD *)(v68 + 12CGContextBeginTransparencyLayer(this[1], 0) = v135;
  *((_WORD *)v68 + 68) = v136;
  int16x4_t v161 = (uint8_t *)v68;
  BOOL v109 = 0;
  __double2 v110 = 0;
  uint64_t v25 = v106;
  (*(void (**)(void, uint8_t *, void **))(*(void *)*v106 + 16))(*v106, buf, &v109);
  __int16 v69 = v110;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
  if (v161 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    BOOL v70 = v134;
    if (!v134) {
      goto LABEL_96;
    }
    goto LABEL_94;
  }
  if (v161) {
    (*(void (**)(void))(*(void *)v161 + 40))();
  }
  BOOL v70 = v134;
  if (v134)
  {
LABEL_94:
    if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
LABEL_96:
  uint64_t v75 = v132;
  if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  uint64_t v76 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
  int64_t v77 = v155;
  uint64_t v78 = (std::__shared_weak_count *)__p;
  uint64_t v79 = (char *)v155 - (unsigned char *)__p;
  if (v155 == __p)
  {
    *a1 = 0;
    a1[24] = 0;
    int v83 = v77;
    if (!v77) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  unsigned int v80 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v80->__shared_owners_ = 0;
  v80->__shared_weak_owners_ = 0;
  v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589D68;
  unint64_t v81 = (void *)ggl::BufferData::BufferData((uint64_t)&v80[1], 2, 1, 0, 1, v79 >> 1);
  v80[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF561BA0;
  v80[1].__shared_owners_ = 2;
  v80[9].__shared_owners_ = (uint64_t)&unk_1EF561BC0;
  v80[9].__shared_weak_owners_ = (uint64_t)"OverlayTransformedIndexData";
  LODWORD(v80[10].__vftable) = 0;
  BOOL v109 = v81;
  __double2 v110 = v80;
  *(void *)buf = &unk_1EF56DCB0;
  uint64_t v159 = &v109;
  p_p = &__p;
  int16x4_t v161 = buf;
  BOOL v152 = 0;
  uint64_t v151 = 0;
  (*(void (**)(void, uint8_t *, uint64_t *))(*(void *)*v106 + 16))(*v106, buf, &v151);
  int v82 = v152;
  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
  }
  if (v161 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
  }
  else if (v161)
  {
    (*(void (**)(void))(*(void *)v161 + 40))();
  }
  uint64_t v118 = v113;
  double v119 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v84 = v110;
  v117[0] = (uint64_t)v109;
  v117[1] = (uint64_t)v110;
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::PolylineOverlayRibbon::BakedWidthMesh::BakedWidthMesh((uint64_t)buf, (uint64_t)"transformed OverlayMesh", &v118, v117);
  ggl::Mesh::operator=((uint64_t)v147, (uint64_t)buf);
  ggl::Mesh::~Mesh((ggl::Mesh *)buf);
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  unint64_t v85 = v119;
  if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  int8x8_t v86 = v110;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  int v83 = (std::__shared_weak_count *)__p;
  if (__p)
  {
LABEL_126:
    uint64_t v155 = v83;
    operator delete(v83);
  }
LABEL_127:
  uint8x8_t v87 = v114;
  if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    if (v77 != v78) {
      goto LABEL_130;
    }
  }
  else if (v77 != v78)
  {
    goto LABEL_130;
  }
  ggl::Mesh::~Mesh((ggl::Mesh *)v147);
}

void sub_1A1D9A158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)&STACK[0x290]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a34);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a36);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  int v67 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v67;
    operator delete(v67);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  ggl::Mesh::~Mesh((ggl::Mesh *)&a66);
  _Unwind_Resume(a1);
}

void sub_1A1D9A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t ggl::Mesh::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (a1 != a2)
  {
    unint64_t v8 = *(char **)(a1 + 64);
    unint64_t v10 = *(char **)(a2 + 64);
    unint64_t v9 = *(char **)(a2 + 72);
    int64_t v11 = v9 - v10;
    unint64_t v12 = (v9 - v10) >> 4;
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = v13 - (void)v8;
    if (v12 <= (v13 - (uint64_t)v8) >> 4)
    {
      uint64_t v17 = *(char **)(a1 + 72);
      unint64_t v18 = (v17 - v8) >> 4;
      if (v18 >= v12)
      {
        if (v10 != v9)
        {
          do
          {
            uint64_t v24 = *(void *)v10;
            uint64_t v23 = *((void *)v10 + 1);
            if (v23) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v25 = (std::__shared_weak_count *)*((void *)v8 + 1);
            *(void *)unint64_t v8 = v24;
            *((void *)v8 + 1) = v23;
            if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
            v8 += 16;
            v10 += 16;
          }
          while (v10 != v9);
          uint64_t v17 = *(char **)(a1 + 72);
        }
        for (; v17 != v8; v17 -= 16)
        {
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v17 - 1);
          if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        *(void *)(a1 + 72) = v8;
      }
      else
      {
        unint64_t v19 = &v10[16 * v18];
        if (v17 != v8)
        {
          do
          {
            uint64_t v21 = *(void *)v10;
            uint64_t v20 = *((void *)v10 + 1);
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v22 = (std::__shared_weak_count *)*((void *)v8 + 1);
            *(void *)unint64_t v8 = v21;
            *((void *)v8 + 1) = v20;
            if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
            v10 += 16;
            v8 += 16;
          }
          while (v10 != v19);
          unint64_t v8 = *(char **)(a1 + 72);
        }
        uint64_t v27 = v8;
        if (v19 != v9)
        {
          uint64_t v27 = v8;
          do
          {
            if (v27)
            {
              uint64_t v28 = *((void *)v19 + 1);
              *(void *)uint64_t v27 = *(void *)v19;
              *((void *)v27 + 1) = v28;
              if (v28) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
              }
            }
            v19 += 16;
            v27 += 16;
          }
          while (v19 != v9);
        }
        *(void *)(a1 + 72) = v27;
      }
    }
    else
    {
      if (v8)
      {
        size_t v15 = *(char **)(a1 + 72);
        if (v15 == v8)
        {
          uint64_t v26 = *(void *)(a1 + 64);
        }
        else
        {
          do
          {
            unint64_t v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
            if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
            v15 -= 16;
          }
          while (v15 != v8);
          uint64_t v26 = *(void *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 80) - v26;
          int64_t v11 = v9 - v10;
        }
        *(void *)(a1 + 72) = v8;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), v26, v14);
        uint64_t v13 = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = 0;
      }
      if (v11 < 0) {
        goto LABEL_146;
      }
      uint64_t v30 = v13 >> 3;
      if (v13 >> 3 <= v12) {
        uint64_t v30 = (v9 - v10) >> 4;
      }
      BOOL v31 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v32 = v30;
      }
      if (v32 >> 60) {
LABEL_146:
      }
        abort();
      uint64_t v33 = 2 * v32;
      uint64_t v34 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), 16 * v32, 8);
      *(void *)(a1 + 64) = v34;
      *(void *)(a1 + 72) = v34;
      for (*(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = &v34[v33]; v10 != v9; v34 += 2)
      {
        if (v34)
        {
          uint64_t v35 = *((void *)v10 + 1);
          *uint64_t v34 = *(void *)v10;
          v34[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
          }
        }
        v10 += 16;
      }
      *(void *)(a1 + 72) = v34;
    }
  }
  uint64_t v37 = *(void *)(a2 + 96);
  uint64_t v36 = *(void *)(a2 + 104);
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  char v38 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v37;
  *(void *)(a1 + 104) = v36;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (a1 != a2)
  {
    double v39 = (void **)(a1 + 112);
    int v40 = *(void **)(a2 + 112);
    int v41 = (void *)(a2 + 120);
    if (!*(void *)(a1 + 136)) {
      goto LABEL_115;
    }
    uint64_t v43 = (uint64_t **)(a1 + 120);
    uint64_t v42 = *(void *)(a1 + 120);
    uint64_t v44 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = a1 + 120;
    *(void *)(v42 + 16) = 0;
    *(void *)(a1 + 12CGContextBeginTransparencyLayer(this[1], 0) = 0;
    *(void *)(a1 + 136) = 0;
    int8x16_t v45 = *(void *)(v44 + 8) ? *(uint64_t **)(v44 + 8) : (uint64_t *)v44;
    if (v45)
    {
      int8x16_t v46 = (uint64_t *)v45[2];
      if (v46)
      {
        uint64_t v47 = (uint64_t *)*v46;
        if ((uint64_t *)*v46 == v45)
        {
          *int8x16_t v46 = 0;
          while (1)
          {
            double v74 = (uint64_t *)v46[1];
            if (!v74) {
              break;
            }
            do
            {
              int8x16_t v46 = v74;
              double v74 = (uint64_t *)*v74;
            }
            while (v74);
          }
        }
        else
        {
          for (v46[1] = 0; v47; uint64_t v47 = (uint64_t *)v46[1])
          {
            do
            {
              int8x16_t v46 = v47;
              uint64_t v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
        }
      }
      if (v40 == v41)
      {
        unint64_t v57 = v40;
        uint64_t v48 = v45;
      }
      else
      {
        do
        {
          uint64_t v48 = v46;
          uint64_t v49 = v40[5];
          v45[4] = v40[4];
          uint64_t v50 = v40[6];
          if (v50) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
          }
          double v51 = (std::__shared_weak_count *)v45[6];
          v45[5] = v49;
          v45[6] = v50;
          if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
          int v52 = *v43;
          int v53 = (uint64_t **)(a1 + 120);
          char v54 = (uint64_t **)(a1 + 120);
          if (*v43)
          {
            do
            {
              while (1)
              {
                int v53 = (uint64_t **)v52;
                if (v45[4] >= (unint64_t)v52[4]) {
                  break;
                }
                int v52 = (uint64_t *)*v52;
                char v54 = v53;
                if (!*v53) {
                  goto LABEL_93;
                }
              }
              int v52 = (uint64_t *)v52[1];
            }
            while (v52);
            char v54 = v53 + 1;
          }
LABEL_93:
          *int8x16_t v45 = 0;
          v45[1] = 0;
          v45[2] = (uint64_t)v53;
          *char v54 = v45;
          unint64_t v55 = (void *)**v39;
          if (v55)
          {
            *double v39 = v55;
            int8x16_t v45 = *v54;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v45);
          ++*(void *)(a1 + 136);
          if (v48)
          {
            int8x16_t v46 = (uint64_t *)v48[2];
            if (v46)
            {
              char v59 = (uint64_t *)*v46;
              if ((uint64_t *)*v46 == v48)
              {
                *int8x16_t v46 = 0;
                while (1)
                {
                  int v60 = (uint64_t *)v46[1];
                  if (!v60) {
                    break;
                  }
                  do
                  {
                    int8x16_t v46 = v60;
                    int v60 = (uint64_t *)*v60;
                  }
                  while (v60);
                }
              }
              else
              {
                for (v46[1] = 0; v59; char v59 = (uint64_t *)v46[1])
                {
                  do
                  {
                    int8x16_t v46 = v59;
                    char v59 = (uint64_t *)*v59;
                  }
                  while (v59);
                }
              }
            }
          }
          else
          {
            int8x16_t v46 = 0;
          }
          unint64_t v56 = (void *)v40[1];
          if (v56)
          {
            do
            {
              unint64_t v57 = v56;
              unint64_t v56 = (void *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              unint64_t v57 = (void *)v40[2];
              BOOL v58 = *v57 == (void)v40;
              int v40 = v57;
            }
            while (!v58);
          }
          if (!v48) {
            break;
          }
          int8x16_t v45 = v48;
          int v40 = v57;
        }
        while (v57 != v41);
      }
      std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(a1 + 112, v48);
      if (v46)
      {
        for (int64_t i = (uint64_t *)v46[2]; i; int64_t i = (uint64_t *)i[2])
          int8x16_t v46 = i;
        std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(a1 + 112, v46);
      }
    }
    else
    {
LABEL_115:
      unint64_t v57 = v40;
    }
    if (v57 != v41)
    {
      char v62 = (uint64_t **)(a1 + 120);
      do
      {
        int v63 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 128) + 16))(*(void *)(a1 + 128), 56, 8);
        int v64 = v63;
        uint64_t v65 = v57[5];
        v63[4] = v57[4];
        v63[5] = v65;
        uint64_t v66 = v57[6];
        v63[6] = v66;
        if (v66) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
        }
        int v67 = *v62;
        uint64_t v68 = (uint64_t **)(a1 + 120);
        __int16 v69 = (uint64_t **)(a1 + 120);
        if (*v62)
        {
          do
          {
            while (1)
            {
              uint64_t v68 = (uint64_t **)v67;
              if (v63[4] >= (unint64_t)v67[4]) {
                break;
              }
              int v67 = (uint64_t *)*v67;
              __int16 v69 = v68;
              if (!*v68) {
                goto LABEL_133;
              }
            }
            int v67 = (uint64_t *)v67[1];
          }
          while (v67);
          __int16 v69 = v68 + 1;
        }
LABEL_133:
        *int v63 = 0;
        v63[1] = 0;
        v63[2] = (uint64_t)v68;
        *__int16 v69 = v63;
        BOOL v70 = (void *)**v39;
        if (v70)
        {
          *double v39 = v70;
          int v64 = *v69;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v64);
        ++*(void *)(a1 + 136);
        __int16 v71 = (void *)v57[1];
        if (v71)
        {
          do
          {
            int v72 = v71;
            __int16 v71 = (void *)*v71;
          }
          while (v71);
        }
        else
        {
          do
          {
            int v72 = (void *)v57[2];
            BOOL v58 = *v72 == (void)v57;
            unint64_t v57 = v72;
          }
          while (!v58);
        }
        unint64_t v57 = v72;
      }
      while (v72 != v41);
    }
  }
  return a1;
}

void *std::function<void ()(ggl::ResourceAccessor *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1::~$_1(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = **(void **)(result + 8);
  uint64_t v5 = *(void *)(v4 + 8) * ((uint64_t)(*(void *)(*(void *)(result + 16) + 8) - **(void **)(result + 16)) >> 1);
  if (v5)
  {
    if (v3 && *(unsigned char *)(v4 + 17) != 2)
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 56))(*a2, v4, 0, v5, 1, 1);
      uint64_t v6 = result;
    }
    else
    {
      uint64_t v6 = *(void *)(v4 + 72);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = **(void **)(v2 + 16);
  uint64_t v8 = *(void *)(*(void *)(v2 + 16) + 8);
  uint64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = v9 >> 1;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    if (v11 < 0x10) {
      goto LABEL_15;
    }
    if ((unint64_t)(v6 - v7) < 0x20) {
      goto LABEL_15;
    }
    unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v12 = (_OWORD *)(v6 + 16);
    uint64_t v13 = (long long *)(v7 + 16);
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *unint64_t v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
    if (v11 != v10)
    {
LABEL_15:
      unint64_t v16 = v11 - v10;
      uint64_t v17 = 2 * v10;
      unint64_t v18 = (_WORD *)(v6 + 2 * v10);
      unint64_t v19 = (__int16 *)(v7 + v17);
      do
      {
        __int16 v20 = *v19++;
        *v18++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  if (v6 && v5 && v3 && *(unsigned char *)(v4 + 17) != 2)
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 64);
    return v21(v3);
  }
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56DCB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF56DCB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_2>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::IndexData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::IndexData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::IndexData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(void *a1, unint64_t *a2, __n128 a3)
{
  unint64_t v5 = *a2;
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[15];
  uint64_t v160 = 0;
  long long v156 = 0uLL;
  uint64_t v8 = *(void *)(v6 + 8) * v7;
  if ((*(unsigned char *)(v6 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    *(void *)&long long v151 = v163;
    v146.n128_u64[0] = (unint64_t)&v151;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v146, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  a3.n128_u64[0] = v5;
  __n128 v137 = a3;
  if (v8)
  {
    if (v5 && *(unsigned char *)(v6 + 17) != 2)
    {
      uint64_t v10 = (*(uint64_t (**)(unint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v5 + 56))(v5, v6, 0, v8, 0, 1);
      a3 = v137;
      uint64_t v9 = v10;
    }
    else
    {
      uint64_t v9 = *(void *)(v6 + 72);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)&long long v11 = a3.n128_u64[0];
  *((void *)&v11 + 1) = v6;
  if (v160)
  {
    unint64_t v13 = v157;
    unint64_t v12 = v158;
    if (v158 != v157)
    {
      unint64_t v14 = (void *)*((void *)&v156 + 1);
      int v15 = v159;
      int v16 = HIBYTE(v159);
      if ((void)v156 && *(unsigned char *)(*((void *)&v156 + 1) + 17) != 2)
      {
        long long v143 = v11;
        (*(void (**)(void))(*(void *)v156 + 64))();
        long long v11 = v143;
        a3 = v137;
      }
      if (v15 && !v16)
      {
        unint64_t v18 = v14[7];
        unint64_t v17 = v14[8];
        if (v17 == v18) {
          unint64_t v18 = v14[10] - v14[9];
        }
        if (v13 < v18) {
          unint64_t v18 = v13;
        }
        if (v17 <= v12) {
          unint64_t v17 = v12;
        }
        if (v17 == v18) {
          unint64_t v17 = v18 + v14[10] - v14[9];
        }
        v14[7] = v18;
        v14[8] = v17;
      }
    }
  }
  long long v156 = v11;
  unint64_t v157 = 0;
  unint64_t v158 = v8;
  uint64_t v160 = v9;
  __int16 v159 = 256;
  uint64_t v19 = a1[13];
  uint64_t v20 = a1[15];
  long long v151 = 0uLL;
  uint64_t v21 = *(void *)(v19 + 8) * v20;
  *(void *)&long long v22 = a3.n128_u64[0];
  *((void *)&v22 + 1) = v19;
  if (v21)
  {
    if (v5 && *(unsigned char *)(v19 + 17) != 2)
    {
      long long v144 = v22;
      uint64_t v23 = (*(uint64_t (**)(unint64_t))(*(void *)v5 + 56))(v5);
      long long v22 = v144;
      a3 = v137;
    }
    else
    {
      uint64_t v23 = *(void *)(v19 + 72);
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  long long v151 = v22;
  unint64_t v152 = 0;
  unint64_t v153 = v21;
  uint64_t v155 = v23;
  __int16 v154 = 257;
  uint64_t v24 = a1;
  unint64_t v25 = a1[3];
  uint64_t v26 = a1[16];
  uint64_t v150 = 0;
  __n128 v146 = 0uLL;
  uint64_t v27 = *(void *)(v25 + 8) * v26;
  if ((*(unsigned char *)(v25 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    v163[0] = &v161;
    uint64_t v162 = v163;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v162, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    a3 = v137;
  }
  if (v27)
  {
    if (v5 && *(unsigned char *)(v25 + 17) != 2)
    {
      uint64_t v28 = (*(uint64_t (**)(unint64_t, unint64_t, void, uint64_t, void, uint64_t, __n128))(*(void *)v5 + 56))(v5, v25, 0, v27, 0, 1, a3);
      a3.n128_u64[0] = v137.n128_u64[0];
      uint64_t v145 = v28;
    }
    else
    {
      uint64_t v145 = *(void *)(v25 + 72);
    }
  }
  else
  {
    uint64_t v145 = 0;
  }
  a3.n128_u64[1] = v25;
  __n128 v138 = a3;
  if (v150)
  {
    unint64_t v30 = v147;
    unint64_t v29 = v148;
    if (v148 != v147)
    {
      BOOL v31 = (void *)v146.n128_u64[1];
      int v32 = v149;
      int v33 = HIBYTE(v149);
      if (v146.n128_u64[0] && *(unsigned char *)(v146.n128_u64[1] + 17) != 2)
      {
        (*(void (**)(void))(*(void *)v146.n128_u64[0] + 64))();
        a3 = v138;
      }
      if (v32 && !v33)
      {
        unint64_t v35 = v31[7];
        unint64_t v34 = v31[8];
        if (v34 == v35) {
          unint64_t v35 = v31[10] - v31[9];
        }
        if (v30 < v35) {
          unint64_t v35 = v30;
        }
        if (v34 <= v29) {
          unint64_t v34 = v29;
        }
        if (v34 == v35) {
          unint64_t v34 = v35 + v31[10] - v31[9];
        }
        _DWORD v31[7] = v35;
        v31[8] = v34;
      }
    }
  }
  __n128 v146 = a3;
  unint64_t v147 = 0;
  unint64_t v148 = v27;
  uint64_t v136 = v27;
  uint64_t v150 = v145;
  __int16 v149 = 256;
  unint64_t v36 = a1[16];
  if (v36 >= 3)
  {
    uint64_t v52 = 0;
    uint64_t v53 = v160;
    uint64_t v139 = v160;
    unint64_t v140 = v36 / 3;
    do
    {
      unint64_t v55 = (unsigned __int16 *)(v145 + 6 * v52);
      uint64_t v56 = *v55;
      uint64_t v57 = v55[1];
      uint64_t v58 = v55[2];
      char v59 = (float *)(v53 + 16 * v56);
      int v60 = (float *)(v53 + 16 * v57);
      int v61 = (float *)(v53 + 16 * v58);
      char v62 = (_WORD *)v24[1];
      a3.n128_u16[0] = *((_WORD *)v24 + 68);
      float v63 = (float)a3.n128_u32[0];
      a3.n128_u16[0] = v62[2];
      LOWORD(v3) = v62[1];
      float v3 = (float)LODWORD(v3);
      float v64 = (float)((float)a3.n128_u32[0] * v63) / v3;
      a3.n128_f32[0] = (float)(*v59 - v64) * v3;
      LOWORD(v4) = v62[3];
      float v4 = (float)((float)((float)(v3 + -1.0) - (float)LODWORD(v4)) * v63) / v3;
      float v65 = (float)(v59[1] - v4) * v3;
      float v66 = (float)(*v60 - v64) * v3;
      float v67 = (float)(v60[1] - v4) * v3;
      float v68 = (float)(*v61 - v64) * v3;
      float v69 = (float)(v61[1] - v4) * v3;
      BOOL v70 = a3.n128_f32[0] >= 0.0 && a3.n128_f32[0] <= v63;
      if (v70 && (v65 >= 0.0 ? (BOOL v71 = v65 <= v63) : (BOOL v71 = 0), v71)
        || (v66 >= 0.0 ? (BOOL v72 = v66 <= v63) : (BOOL v72 = 0), v72 && (v67 >= 0.0 ? (v73 = v67 <= v63) : (v73 = 0), v73))
        || (v68 >= 0.0 ? (BOOL v74 = v68 <= v63) : (BOOL v74 = 0), v74 && (v69 >= 0.0 ? (v75 = v69 <= v63) : (v75 = 0), v75)))
      {
        uint64_t v76 = v155;
        uint64_t v77 = v155 + 16 * v56;
        *(float *)uint64_t v77 = *v59;
        *(float *)(v77 + 4) = v59[1];
        uint64_t v78 = v53 + 16 * v56;
        *(_WORD *)(v77 + 8) = *(_WORD *)(v78 + 8);
        *(_WORD *)(v77 + 1CGContextBeginTransparencyLayer(this[1], 0) = *(_WORD *)(v78 + 10);
        *(_DWORD *)(v77 + 12) = *(_DWORD *)(v78 + 12);
        uint64_t v79 = v76 + 16 * v57;
        *(float *)uint64_t v79 = *v60;
        *(float *)(v79 + 4) = v60[1];
        uint64_t v80 = v53 + 16 * v57;
        *(_WORD *)(v79 + 8) = *(_WORD *)(v80 + 8);
        *(_WORD *)(v79 + 1CGContextBeginTransparencyLayer(this[1], 0) = *(_WORD *)(v80 + 10);
        *(_DWORD *)(v79 + 12) = *(_DWORD *)(v80 + 12);
        __int16 v142 = v58;
        uint64_t v81 = v76 + 16 * v58;
        *(float *)uint64_t v81 = *v61;
        *(float *)(v81 + 4) = v61[1];
        uint64_t v82 = v53 + 16 * v58;
        *(_WORD *)(v81 + 8) = *(_WORD *)(v82 + 8);
        *(_WORD *)(v81 + 1CGContextBeginTransparencyLayer(this[1], 0) = *(_WORD *)(v82 + 10);
        *(_DWORD *)(v81 + 12) = *(_DWORD *)(v82 + 12);
        *(_DWORD *)uint64_t v77 = a3.n128_u32[0];
        *(float *)(v77 + 4) = v65;
        *(float *)uint64_t v79 = v66;
        *(float *)(v79 + 4) = v67;
        *(float *)uint64_t v81 = v68;
        *(float *)(v81 + 4) = v69;
        uint64_t v83 = v24[2];
        unint64_t v85 = *(char **)(v83 + 8);
        unint64_t v84 = *(void *)(v83 + 16);
        if ((unint64_t)v85 >= v84)
        {
          uint8x8_t v87 = *(char **)v83;
          uint64_t v88 = (uint64_t)&v85[-*(void *)v83];
          if (v88 <= -3) {
            goto LABEL_196;
          }
          uint64_t v89 = v88 >> 1;
          unint64_t v90 = v84 - (void)v87;
          if (v90 <= (v88 >> 1) + 1) {
            unint64_t v91 = v89 + 1;
          }
          else {
            unint64_t v91 = v90;
          }
          if (v90 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v92 = v91;
          }
          if (v92)
          {
            if (v92 < 0) {
              goto LABEL_197;
            }
            unint64_t v93 = operator new(2 * v92);
          }
          else
          {
            unint64_t v93 = 0;
          }
          int v94 = &v93[2 * v89];
          *int v94 = v56;
          int8x8_t v86 = v94 + 1;
          if (v85 != v87)
          {
            unint64_t v95 = v85 - 2 - v87;
            if (v95 < 0x1E) {
              goto LABEL_200;
            }
            if (v85 - v93 - (v88 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
              goto LABEL_200;
            }
            uint64_t v96 = (v95 >> 1) + 1;
            unsigned int v97 = (__n128 *)&v93[2 * v89 - 16];
            int v98 = (__n128 *)(v85 - 16);
            unint64_t v99 = v96 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              a3 = *v98;
              v97[-1] = v98[-1];
              __n128 *v97 = a3;
              v97 -= 2;
              v98 -= 2;
              v99 -= 16;
            }
            while (v99);
            v94 -= v96 & 0xFFFFFFFFFFFFFFF0;
            v85 -= 2 * (v96 & 0xFFFFFFFFFFFFFFF0);
            if (v96 != (v96 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_200:
              do
              {
                __int16 v100 = *((_WORD *)v85 - 1);
                v85 -= 2;
                *--int v94 = v100;
              }
              while (v85 != v87);
            }
          }
          *(void *)uint64_t v83 = v94;
          *(void *)(v83 + 8) = v86;
          *(void *)(v83 + 16) = &v93[2 * v92];
          if (v87) {
            operator delete(v87);
          }
          uint64_t v24 = a1;
        }
        else
        {
          *(_WORD *)unint64_t v85 = v56;
          int8x8_t v86 = v85 + 2;
        }
        *(void *)(v83 + 8) = v86;
        uint64_t v101 = v24[2];
        char v103 = *(char **)(v101 + 8);
        unint64_t v102 = *(void *)(v101 + 16);
        if ((unint64_t)v103 >= v102)
        {
          unint64_t v105 = *(char **)v101;
          uint64_t v106 = (uint64_t)&v103[-*(void *)v101];
          if (v106 < -2) {
            goto LABEL_196;
          }
          uint64_t v107 = v106 >> 1;
          unint64_t v108 = v102 - (void)v105;
          if (v108 <= (v106 >> 1) + 1) {
            unint64_t v109 = v107 + 1;
          }
          else {
            unint64_t v109 = v108;
          }
          if (v108 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v110 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v110 = v109;
          }
          if (v110)
          {
            if (v110 < 0) {
              goto LABEL_197;
            }
            float v111 = operator new(2 * v110);
          }
          else
          {
            float v111 = 0;
          }
          float v112 = &v111[2 * v107];
          *float v112 = v57;
          uint64_t v104 = v112 + 1;
          if (v103 != v105)
          {
            unint64_t v113 = v103 - 2 - v105;
            if (v113 < 0x1E) {
              goto LABEL_201;
            }
            if (v103 - v111 - (v106 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
              goto LABEL_201;
            }
            uint64_t v114 = (v113 >> 1) + 1;
            float v115 = (__n128 *)&v111[2 * v107 - 16];
            float v116 = (__n128 *)(v103 - 16);
            unint64_t v117 = v114 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              a3 = *v116;
              v115[-1] = v116[-1];
              *float v115 = a3;
              v115 -= 2;
              v116 -= 2;
              v117 -= 16;
            }
            while (v117);
            v112 -= v114 & 0xFFFFFFFFFFFFFFF0;
            v103 -= 2 * (v114 & 0xFFFFFFFFFFFFFFF0);
            if (v114 != (v114 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_201:
              do
              {
                __int16 v118 = *((_WORD *)v103 - 1);
                v103 -= 2;
                *--float v112 = v118;
              }
              while (v103 != v105);
            }
          }
          *(void *)uint64_t v101 = v112;
          *(void *)(v101 + 8) = v104;
          *(void *)(v101 + 16) = &v111[2 * v110];
          if (v105) {
            operator delete(v105);
          }
          uint64_t v24 = a1;
        }
        else
        {
          *(_WORD *)char v103 = v57;
          uint64_t v104 = v103 + 2;
        }
        *(void *)(v101 + 8) = v104;
        uint64_t v119 = v24[2];
        int8x8_t v121 = *(char **)(v119 + 8);
        unint64_t v120 = *(void *)(v119 + 16);
        if ((unint64_t)v121 < v120)
        {
          *(_WORD *)int8x8_t v121 = v142;
          char v54 = v121 + 2;
        }
        else
        {
          unsigned int v122 = *(char **)v119;
          uint64_t v123 = (uint64_t)&v121[-*(void *)v119];
          if (v123 < -2) {
LABEL_196:
          }
            abort();
          uint64_t v124 = v123 >> 1;
          unint64_t v125 = v120 - (void)v122;
          if (v125 <= (v123 >> 1) + 1) {
            unint64_t v126 = v124 + 1;
          }
          else {
            unint64_t v126 = v125;
          }
          if (v125 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v127 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v127 = v126;
          }
          if (v127)
          {
            if (v127 < 0) {
LABEL_197:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            char v128 = operator new(2 * v127);
          }
          else
          {
            char v128 = 0;
          }
          int v129 = &v128[2 * v124];
          *int v129 = v142;
          char v54 = v129 + 1;
          if (v121 != v122)
          {
            unint64_t v130 = v121 - 2 - v122;
            if (v130 < 0x1E) {
              goto LABEL_202;
            }
            if (v121 - v128 - (v123 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
              goto LABEL_202;
            }
            uint64_t v131 = (v130 >> 1) + 1;
            uint64_t v132 = (__n128 *)&v128[2 * v124 - 16];
            int v133 = (__n128 *)(v121 - 16);
            unint64_t v134 = v131 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              a3 = *v133;
              v132[-1] = v133[-1];
              __n128 *v132 = a3;
              v132 -= 2;
              v133 -= 2;
              v134 -= 16;
            }
            while (v134);
            v129 -= v131 & 0xFFFFFFFFFFFFFFF0;
            v121 -= 2 * (v131 & 0xFFFFFFFFFFFFFFF0);
            if (v131 != (v131 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_202:
              do
              {
                __int16 v135 = *((_WORD *)v121 - 1);
                v121 -= 2;
                *--int v129 = v135;
              }
              while (v121 != v122);
            }
          }
          *(void *)uint64_t v119 = v129;
          *(void *)(v119 + 8) = v54;
          *(void *)(v119 + 16) = &v128[2 * v127];
          if (v122) {
            operator delete(v122);
          }
          uint64_t v24 = a1;
        }
        uint64_t v53 = v139;
        *(void *)(v119 + 8) = v54;
      }
      ++v52;
    }
    while (v52 != v140);
  }
  __n128 v37 = v138;
  if (v145 && v136 && v138.n128_u64[0] && *(unsigned char *)(v138.n128_u64[1] + 17) != 2) {
    (*(void (**)(__n128))(*(void *)v138.n128_u64[0] + 64))(v138);
  }
  if (v155)
  {
    unint64_t v39 = v152;
    unint64_t v38 = v153;
    if (v153 != v152)
    {
      int v40 = (void *)*((void *)&v151 + 1);
      int v41 = v154;
      int v42 = HIBYTE(v154);
      if ((void)v151 && *(unsigned char *)(*((void *)&v151 + 1) + 17) != 2) {
        (*(void (**)(__n128))(*(void *)v151 + 64))(v37);
      }
      if (v41 && !v42)
      {
        unint64_t v44 = v40[7];
        unint64_t v43 = v40[8];
        if (v43 == v44) {
          unint64_t v44 = v40[10] - v40[9];
        }
        if (v39 < v44) {
          unint64_t v44 = v39;
        }
        if (v43 <= v38) {
          unint64_t v43 = v38;
        }
        if (v43 == v44) {
          unint64_t v43 = v44 + v40[10] - v40[9];
        }
        v40[7] = v44;
        v40[8] = v43;
      }
    }
  }
  if (v160)
  {
    unint64_t v46 = v157;
    unint64_t v45 = v158;
    if (v158 != v157)
    {
      uint64_t v47 = (void *)*((void *)&v156 + 1);
      int v48 = v159;
      int v49 = HIBYTE(v159);
      if ((void)v156 && *(unsigned char *)(*((void *)&v156 + 1) + 17) != 2) {
        (*(void (**)(__n128))(*(void *)v156 + 64))(v37);
      }
      if (v48 && !v49)
      {
        unint64_t v51 = v47[7];
        unint64_t v50 = v47[8];
        if (v50 == v51) {
          unint64_t v51 = v47[10] - v47[9];
        }
        if (v46 < v51) {
          unint64_t v51 = v46;
        }
        if (v50 <= v45) {
          unint64_t v50 = v45;
        }
        if (v50 == v51) {
          unint64_t v50 = v51 + v47[10] - v47[9];
        }
        v47[7] = v51;
        unsigned __int8 v47[8] = v50;
      }
    }
  }
}

void sub_1A1D9BC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__alloc_func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::destroy[abi:nn180100](void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[11];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  float v4 = (std::__shared_weak_count *)a1[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56DC68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_WORD *)(a1 + 40);
  *(void *)(a2 + 44) = *(void *)(a1 + 44);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 64);
  *(void *)(a2 + 68) = *(void *)(a1 + 68);
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(void *)(a2 + 96) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 112);
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  *(void *)(a2 + 112) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 120);
  *(_WORD *)(a2 + 136) = *(_WORD *)(a1 + 136);
  *(__n128 *)(a2 + 12CGContextBeginTransparencyLayer(this[1], 0) = result;
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x90uLL);
  *(void *)uint64_t v2 = &unk_1EF56DC68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  *((void *)v2 + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)v2 + 2CGContextBeginTransparencyLayer(this[1], 0) = *(_WORD *)(a1 + 40);
  *(void *)(v2 + 44) = *(void *)(a1 + 44);
  *((_WORD *)v2 + 32) = *(_WORD *)(a1 + 64);
  *(void *)(v2 + 68) = *(void *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 96);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *((void *)v2 + 12) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 112);
  *((void *)v2 + 13) = *(void *)(a1 + 104);
  *((void *)v2 + 14) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 120);
  *(__n128 *)(v2 + 12CGContextBeginTransparencyLayer(this[1], 0) = result;
  *((_WORD *)v2 + 68) = *(_WORD *)(a1 + 136);
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DC68;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[12];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[12];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DC68;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[12];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[12];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy(v3, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 8) * *(void *)(a1 + 48);
  if ((*(unsigned char *)(v7 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    uint64_t v21 = &v19;
    uint64_t v20 = &v21;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v8)
  {
    if (v6 && *(unsigned char *)(v7 + 17) != 2) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v6 + 56))(v6, v7, 0, v8, 0, 1);
    }
    else {
      uint64_t v9 = *(void *)(v7 + 72);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 8) * *(void *)(a1 + 48);
  if (v11)
  {
    if (v6 && *(unsigned char *)(v10 + 17) != 2)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56))(v6, *(void *)(a1 + 32), 0, v11, 1, 1);
      uint64_t v13 = *(void *)(a1 + 48);
      if (!v13) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v10 + 72);
      uint64_t v13 = *(void *)(a1 + 48);
      if (!v13) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 48);
    if (!v13) {
      goto LABEL_20;
    }
  }
  unint64_t v14 = *(unsigned __int16 **)(a1 + 8);
  uint64_t v15 = v12 + 8;
  uint64_t v16 = v9 + 8;
  do
  {
    *(_DWORD *)(v15 - 8) = *(_DWORD *)(v16 - 8);
    *(_DWORD *)(v15 - 4) = *(_DWORD *)(v16 - 4);
    *(_WORD *)uint64_t v15 = *(_WORD *)v16;
    *(_WORD *)(v15 + 2) = *(_WORD *)(v16 + 2);
    unsigned int v17 = *(_DWORD *)(v16 + 4);
    *(_DWORD *)(v15 + 4) = v17;
    LOWORD(v17) = *(_WORD *)(a1 + 56);
    unsigned int v18 = v14[1];
    *(float *)&a4 = (float)v18;
    LOWORD(a5) = v14[2];
    *(float *)&a5 = (float)LODWORD(a5);
    *((float *)&a5 + 1) = (float)(int)(~v14[3] + v18);
    a4 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a4, 0));
    *(float32x2_t *)(v15 - 8) = vdiv_f32(vmla_n_f32(*(float32x2_t *)(v16 - 8), *(float32x2_t *)&a5, (float)v17), *(float32x2_t *)&a4);
    v15 += 16;
    v16 += 16;
    --v13;
  }
  while (v13);
LABEL_20:
  if (v12 && v11 && v6 && *(unsigned char *)(v10 + 17) != 2) {
    (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
  }
  if (v9 && v8 && v6 && *(unsigned char *)(v7 + 17) != 2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v6 + 64))(v6, v9, v7, 0, v8, 0, 1);
  }
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = &unk_1EF56DC20;
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 24);
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(a2 + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(result + 48);
  *(_WORD *)(a2 + 56) = *(_WORD *)(result + 56);
  *(void *)(a2 + 48) = v5;
  return result;
}

char *std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x40uLL);
  *(void *)__n128 result = &unk_1EF56DC20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 4) = *(void *)(a1 + 32);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)result + 6) = *(void *)(a1 + 48);
  *((_WORD *)result + 28) = *(_WORD *)(a1 + 56);
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DC20;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeStrokeMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,ggl::PolylineOverlayRibbon::BaseMesh const&,geo::QuadTile,md::EdgeScales,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DC20;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::BakedWidthVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(void *a1, uint64_t *a2, double a3, float a4, double a5, double a6)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a1[1];
  uint64_t v9 = *(void *)(v8 + 8) * a1[5];
  if ((*(unsigned char *)(v8 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    uint64_t v21 = &v19;
    uint64_t v20 = &v21;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v9)
  {
    if (v7 && *(unsigned char *)(v8 + 17) != 2) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v7 + 56))(v7, v8, 0, v9, 0, 1);
    }
    else {
      uint64_t v10 = *(void *)(v8 + 72);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = a1[3];
  uint64_t v12 = *(void *)(v11 + 8) * a1[5];
  if (v12)
  {
    if (v7 && *(unsigned char *)(v11 + 17) != 2)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 56))(v7, a1[3], 0, v12, 1, 1);
      uint64_t v14 = a1[5];
      if (!v14) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 72);
      uint64_t v14 = a1[5];
      if (!v14) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = a1[5];
    if (!v14) {
      goto LABEL_20;
    }
  }
  uint64_t v15 = a1[8];
  uint64_t v16 = v10 + 6;
  unsigned int v17 = (float *)(v13 + 12);
  do
  {
    float v18 = *(float *)(v15 + 4 * ((*(unsigned __int16 *)(v16 + 4) >> 15) ^ 1u));
    LOWORD(a4) = *(_WORD *)(v16 - 6);
    LOWORD(a5) = *(_WORD *)(v16 - 2);
    *(void *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
    *(float *)&a5 = (float)SLODWORD(a5);
    a4 = (float)LODWORD(a4) + (float)(v18 * *(float *)&a5);
    LOWORD(a5) = *(_WORD *)(v16 - 4);
    *(float *)&a5 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)v16;
    *(void *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
    *(float *)&a6 = (float)SLODWORD(a6);
    *(v17 - 3) = a4;
    *(v17 - 2) = *(float *)&a5 + (float)(v18 * *(float *)&a6);
    *((_WORD *)v17 - 2) = *(_WORD *)(v16 + 2);
    *((_WORD *)v17 - 1) = *(_WORD *)(v16 + 4);
    *unsigned int v17 = *(float *)(v16 + 6);
    v17 += 4;
    v16 += 20;
    --v14;
  }
  while (v14);
LABEL_20:
  if (v13 && v12 && v7 && *(unsigned char *)(v11 + 17) != 2) {
    (*(void (**)(uint64_t))(*(void *)v7 + 64))(v7);
  }
  if (v10 && v9 && v7 && *(unsigned char *)(v8 + 17) != 2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v7 + 64))(v7, v10, v8, 0, v9, 0, 1);
  }
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__alloc_func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy[abi:nn180100](void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1EF56BF70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = result[6];
  a2[5] = result[5];
  a2[6] = v5;
  uint64_t v6 = result[7];
  a2[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a2[8] = result[8];
  return result;
}

void *std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(void *a1)
{
  __n128 result = operator new(0x48uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_1EF56BF70;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[6];
  result[5] = a1[5];
  result[6] = v6;
  uint64_t v7 = a1[7];
  result[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  result[8] = a1[8];
  return result;
}

void std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56BF70;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0,std::allocator<_bakeRibbonMesh(ggl::Loader *,ggl::PolylineOverlayRibbon::BaseMesh const&,md::EdgeScales)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56BF70;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::__function::__value_func<gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::function<gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::Mesh::~Mesh(md::Mesh *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v4 + 8) * *(void *)(a1 + 56);
  v6.n128_u64[0] = v3;
  v6.n128_u64[1] = v4;
  __n128 v16 = v6;
  if (v5)
  {
    if (v3 && *(unsigned char *)(v4 + 17) != 2) {
      uint64_t v7 = (*(uint64_t (**)(unint64_t))(*(void *)v3 + 56))(v3);
    }
    else {
      uint64_t v7 = *(void *)(v4 + 72);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = 0;
    uint64_t v9 = v7;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 64);
      uint64_t v12 = *(void *)v9;
      uint64_t v19 = **(void **)(a1 + 32);
      uint64_t v18 = v12;
      int v17 = v11;
      uint64_t v13 = *(void *)(v10 + 24);
      if (!v13) {
        break;
      }
      *(float *)uint64_t v9 = (*(float (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v13 + 48))(v13, &v19, &v18, &v17);
      *(_DWORD *)(v9 + 4) = v14;
      v9 += 16;
      if ((unint64_t)++v8 >= *(void *)(a1 + 56)) {
        goto LABEL_11;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  else
  {
LABEL_11:
    if (v7)
    {
      if (v5) {
        BOOL v15 = v16.n128_u64[0] == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15 && *(unsigned char *)(v16.n128_u64[1] + 17) != 2) {
        (*(void (**)(__n128))(*(void *)v16.n128_u64[0] + 64))(v16);
      }
    }
  }
}

void sub_1A1D9DBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56DBD8;
  long long v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 48);
  *(void *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = *(void *)(result + 40);
  *(void *)(a2 + 48) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 56);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(result + 64);
  *(void *)(a2 + 56) = v4;
  return result;
}

char *std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x48uLL);
  *(void *)__n128 result = &unk_1EF56DBD8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 48);
  *((void *)result + 5) = *(void *)(a1 + 40);
  *((void *)result + 6) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)result + 7) = *(void *)(a1 + 56);
  *((_DWORD *)result + 16) = *(_DWORD *)(a1 + 64);
  return result;
}

void std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DBD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[6];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0,std::allocator<md::DrapingLogic::drapeFillMesh(ggl::Loader *,md::FoundationMesh const&,geo::QuadTile,md::Mesh const&,geo::QuadTile,md::PolygonOverlayRenderable *,gdc::Statistics *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DBD8;
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

float convertLowToHighZTileSpace(uint64_t a1, float *a2, float a3, float a4, float a5)
{
  LOWORD(a4) = *(_WORD *)(a1 + 4);
  LOWORD(a5) = *(_WORD *)(a1 + 2);
  return (float)(*a2 - (float)((float)((float)LODWORD(a4) * a3) / (float)LODWORD(a5))) * (float)LODWORD(a5);
}

float convertHighToLowZTileSpace(uint64_t a1, float *a2, float a3, double a4, float a5)
{
  LOWORD(a5) = *(_WORD *)(a1 + 4);
  return (float)(*a2 + (float)((float)LODWORD(a5) * a3)) / (float)*(unsigned __int16 *)(a1 + 2);
}

uint64_t std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(a1 + 8))(a2, a3, *a4);
}

uint64_t std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56B9F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56B9F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float),std::allocator<gm::Matrix<float,2,1> (*)(ZDiffParams const&,gm::Matrix<float,2,1> const&,float)>,gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedDrapingMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedDrapingMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedDrapingMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(void *a1, void *a2, int16x4_t a3, double a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a1[2];
  uint64_t v7 = *(void *)(v6 + 8) * a1[4];
  if (v7)
  {
    if (v5 && *(unsigned char *)(v6 + 17) != 2) {
      uint64_t v8 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 56))(*a2, v6, 0, v7, 1, 1);
    }
    else {
      uint64_t v8 = *(void *)(v6 + 72);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (unsigned char *)a1[1];
  if (v9[61] == 1)
  {
    uint64_t v10 = **(void **)(*(void *)v9 + 64);
    uint64_t v11 = *(void *)(v10 + 8) * a1[4];
    if ((*(unsigned char *)(v10 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      uint64_t v24 = &v22;
      uint64_t v23 = &v24;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    if (v11)
    {
      if (v5 && *(unsigned char *)(v10 + 17) != 2)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v5 + 56))(v5, v10, 0, v11, 0, 1);
        uint64_t v14 = a1[4];
        if (!v14) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v10 + 72);
        uint64_t v14 = a1[4];
        if (!v14) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v14 = a1[4];
      if (!v14) {
        goto LABEL_36;
      }
    }
    uint64_t v18 = (float *)(v8 + 8);
    uint64_t v19 = (_DWORD *)(v12 + 4);
    do
    {
      a3.i16[0] = *((_WORD *)v19 - 2);
      a3 = (int16x4_t)vmovl_s16(a3).u64[0];
      LOWORD(a4) = *((_WORD *)v19 - 1);
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      *(float *)&a4 = (float)SLODWORD(a4) * 3.9001;
      *(v18 - 2) = (float)a3.i32[0] * 3.9001;
      *(v18 - 1) = *(float *)&a4;
      int v20 = *v19;
      v19 += 2;
      a3.i16[1] = HIWORD(v20);
      *(_DWORD *)uint64_t v18 = v20;
      v18 += 4;
      --v14;
    }
    while (v14);
  }
  else
  {
    if (v9[61]) {
      goto LABEL_41;
    }
    uint64_t v10 = **(void **)(*(void *)v9 + 64);
    uint64_t v11 = *(void *)(v10 + 8) * a1[4];
    if ((*(unsigned char *)(v10 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      uint64_t v24 = &v22;
      uint64_t v23 = &v24;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    if (v11)
    {
      if (v5 && *(unsigned char *)(v10 + 17) != 2)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v5 + 56))(v5, v10, 0, v11, 0, 1);
        uint64_t v13 = a1[4];
        if (!v13) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v10 + 72);
        uint64_t v13 = a1[4];
        if (!v13) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = a1[4];
      if (!v13) {
        goto LABEL_36;
      }
    }
    BOOL v15 = (float *)(v8 + 8);
    __n128 v16 = (_DWORD *)(v12 + 4);
    do
    {
      a3.i16[0] = *((_WORD *)v16 - 2);
      a3 = (int16x4_t)vmovl_s16(a3).u64[0];
      LOWORD(a4) = *((_WORD *)v16 - 1);
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      *(float *)&a4 = (float)SLODWORD(a4) * 3.9001;
      *(v15 - 2) = (float)a3.i32[0] * 3.9001;
      *(v15 - 1) = *(float *)&a4;
      int v17 = *v16;
      v16 += 2;
      a3.i16[1] = HIWORD(v17);
      *(_DWORD *)BOOL v15 = v17;
      v15 += 4;
      --v13;
    }
    while (v13);
  }
LABEL_36:
  if (v12 && v11 && v5 && *(unsigned char *)(v10 + 17) != 2) {
    (*(void (**)(uint64_t))(*(void *)v5 + 64))(v5);
  }
LABEL_41:
  if (v8)
  {
    if (v7) {
      BOOL v21 = v5 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21 && *(unsigned char *)(v6 + 17) != 2) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, v8, v6, 0, v7, 1, 1);
    }
  }
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_1EF56DD40;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a2[4] = result[4];
  return result;
}

char *std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_1EF56DD40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)result + 4) = *(void *)(a1 + 32);
  return result;
}

void std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DD40;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempDaVinciDrapingMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DD40;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5851B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5851B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::Mesh::~Mesh(ggl::Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)((char *)this - 16));
}

uint64_t ggl::Mesh::Mesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1EF562D40;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = &unk_1EF55D4B8;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = v7;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = 0;
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(char **)(a2 + 64);
  uint64_t v10 = *(char **)(a2 + 72);
  uint64_t v11 = v10 - v9;
  if (v10 != v9)
  {
    if (v11 < 0) {
      abort();
    }
    uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v8 + 16))(v8, v10 - v9, 8);
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = &v12[2 * (v11 >> 4)];
    do
    {
      if (v12)
      {
        uint64_t v13 = *((void *)v9 + 1);
        *uint64_t v12 = *(void *)v9;
        v12[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v9 += 16;
      v12 += 2;
    }
    while (v9 != v10);
    *(void *)(a1 + 72) = v12;
  }
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 112) = 0;
  BOOL v15 = (uint64_t ***)(a1 + 112);
  uint64_t v16 = *(void *)(a2 + 128);
  *(void *)(a1 + 12CGContextBeginTransparencyLayer(this[1], 0) = 0;
  *(void *)(a1 + 128) = v16;
  int v17 = (uint64_t **)(a1 + 120);
  uint64_t v18 = (void *)(a2 + 120);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  uint64_t v19 = *(void **)(a2 + 112);
  if (v19 != v18)
  {
    do
    {
      int v20 = *v17;
      BOOL v21 = (uint64_t *)(a1 + 120);
      if (*v15 == v17) {
        goto LABEL_22;
      }
      char v22 = *v17;
      uint64_t v23 = (uint64_t *)(a1 + 120);
      if (v20)
      {
        do
        {
          BOOL v21 = v22;
          char v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          BOOL v21 = (uint64_t *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          uint64_t v23 = v21;
        }
        while (v24);
      }
      unint64_t v25 = v19[4];
      if (v21[4] < v25)
      {
LABEL_22:
        if (v20) {
          uint64_t v26 = (uint64_t **)v21;
        }
        else {
          uint64_t v26 = (uint64_t **)(a1 + 120);
        }
        if (v20) {
          uint64_t v27 = (uint64_t **)(v21 + 1);
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 120);
        }
      }
      else
      {
        uint64_t v26 = (uint64_t **)(a1 + 120);
        uint64_t v27 = (uint64_t **)(a1 + 120);
        if (v20)
        {
          uint64_t v27 = (uint64_t **)(a1 + 120);
          while (1)
          {
            while (1)
            {
              uint64_t v26 = (uint64_t **)v20;
              unint64_t v29 = v20[4];
              if (v25 >= v29) {
                break;
              }
              int v20 = *v26;
              uint64_t v27 = v26;
              if (!*v26) {
                goto LABEL_37;
              }
            }
            if (v29 >= v25) {
              break;
            }
            uint64_t v27 = v26 + 1;
            int v20 = v26[1];
            if (!v20) {
              goto LABEL_37;
            }
          }
        }
      }
      if (*v27)
      {
        uint64_t v28 = (void *)v19[1];
        if (v28) {
          goto LABEL_42;
        }
      }
      else
      {
LABEL_37:
        unint64_t v30 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 128) + 16))(*(void *)(a1 + 128), 56, 8);
        BOOL v31 = v30;
        uint64_t v32 = v19[5];
        v30[4] = v19[4];
        v30[5] = v32;
        uint64_t v33 = v19[6];
        v30[6] = v33;
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        *unint64_t v30 = 0;
        v30[1] = 0;
        v30[2] = (uint64_t)v26;
        *uint64_t v27 = v30;
        unint64_t v34 = **v15;
        if (v34)
        {
          *BOOL v15 = (uint64_t **)v34;
          BOOL v31 = *v27;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v31);
        ++*(void *)(a1 + 136);
        uint64_t v28 = (void *)v19[1];
        if (v28)
        {
          do
          {
LABEL_42:
            unint64_t v35 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
          goto LABEL_15;
        }
      }
      do
      {
        unint64_t v35 = (void *)v19[2];
        BOOL v24 = *v35 == (void)v19;
        uint64_t v19 = v35;
      }
      while (!v24);
LABEL_15:
      uint64_t v19 = v35;
    }
    while (v35 != v18);
  }
  return a1;
}

void sub_1A1D9EF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ggl::RenderDataHolder *a10)
{
}

void non-virtual thunk to'ggl::Draping::FoundationMesh::~FoundationMesh(ggl::Draping::FoundationMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Draping::FoundationMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Draping::FoundationMesh *)((char *)this - 16));
}

void ggl::Draping::FoundationMesh::~FoundationMesh(ggl::Draping::FoundationMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

uint64_t *std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void ggl::NamedBase<char const*>::~NamedBase()
{
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 + 8) * a1[4];
  if (v5)
  {
    if (v3 && *(unsigned char *)(v4 + 17) != 2) {
      uint64_t v6 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 56))(*a2, v4, 0, v5, 1, 1);
    }
    else {
      uint64_t v6 = *(void *)(v4 + 72);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (unsigned char *)a1[1];
  if (v7[61] == 1)
  {
    uint64_t v8 = **(void **)(*(void *)v7 + 64);
    uint64_t v9 = *(void *)(v8 + 8) * a1[4];
    if ((*(unsigned char *)(v8 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      unint64_t v34 = &v32;
      uint64_t v33 = &v34;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    if (v9)
    {
      if (v3 && *(unsigned char *)(v8 + 17) != 2)
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v3 + 56))(v3, v8, 0, v9, 0, 1);
        uint64_t v12 = a1[4];
        if (!v12) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(v8 + 72);
        uint64_t v12 = a1[4];
        if (!v12) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v12 = a1[4];
      if (!v12) {
        goto LABEL_36;
      }
    }
    char v22 = (int8x16_t *)a1[5];
    uint64_t v23 = (_DWORD *)(v6 + 8);
    BOOL v24 = (int *)(v10 + 4);
    float32x2_t v25 = (float32x2_t)vdup_n_s32(0x40799A93u);
    do
    {
      v26.i32[0] = *((__int16 *)v24 - 2);
      v26.i32[1] = *((__int16 *)v24 - 1);
      *(float32x2_t *)v27.i8 = vmul_f32(vcvt_f32_s32(v26), v25);
      v27.i64[1] = v27.i64[0];
      v28.i64[0] = v22->i64[0];
      v28.i64[1] = v27.i64[0];
      v29.i64[0] = v27.i64[0];
      v29.i64[1] = vextq_s8(*v22, *v22, 8uLL).u64[0];
      *char v22 = vbslq_s8((int8x16_t)vcgtq_f32(v28, v29), v27, *v22);
      *((void *)v23 - 1) = v27.i64[0];
      int v30 = *v24;
      v24 += 2;
      *uint64_t v23 = v30;
      v23 += 4;
      --v12;
    }
    while (v12);
  }
  else
  {
    if (v7[61]) {
      goto LABEL_41;
    }
    uint64_t v8 = **(void **)(*(void *)v7 + 64);
    uint64_t v9 = *(void *)(v8 + 8) * a1[4];
    if ((*(unsigned char *)(v8 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      unint64_t v34 = &v32;
      uint64_t v33 = &v34;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    if (v9)
    {
      if (v3 && *(unsigned char *)(v8 + 17) != 2)
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v3 + 56))(v3, v8, 0, v9, 0, 1);
        uint64_t v11 = a1[4];
        if (!v11) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(v8 + 72);
        uint64_t v11 = a1[4];
        if (!v11) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = a1[4];
      if (!v11) {
        goto LABEL_36;
      }
    }
    uint64_t v13 = (int8x16_t *)a1[5];
    uint64_t v14 = (_DWORD *)(v6 + 8);
    BOOL v15 = (int *)(v10 + 4);
    float32x2_t v16 = (float32x2_t)vdup_n_s32(0x40799A93u);
    do
    {
      v17.i32[0] = *((__int16 *)v15 - 2);
      v17.i32[1] = *((__int16 *)v15 - 1);
      *(float32x2_t *)v18.i8 = vmul_f32(vcvt_f32_s32(v17), v16);
      v18.i64[1] = v18.i64[0];
      v19.i64[0] = v13->i64[0];
      v19.i64[1] = v18.i64[0];
      v20.i64[0] = v18.i64[0];
      v20.i64[1] = vextq_s8(*v13, *v13, 8uLL).u64[0];
      *uint64_t v13 = vbslq_s8((int8x16_t)vcgtq_f32(v19, v20), v18, *v13);
      *((void *)v14 - 1) = v18.i64[0];
      int v21 = *v15;
      v15 += 2;
      *uint64_t v14 = v21;
      v14 += 4;
      --v11;
    }
    while (v11);
  }
LABEL_36:
  if (v10 && v9 && v3 && *(unsigned char *)(v8 + 17) != 2) {
    (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
LABEL_41:
  if (v6)
  {
    if (v5) {
      BOOL v31 = v3 == 0;
    }
    else {
      BOOL v31 = 1;
    }
    if (!v31 && *(unsigned char *)(v4 + 17) != 2) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 64))(v3, v6, v4, 0, v5, 1, 1);
    }
  }
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

__n128 std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&unk_1EF56DCF8;
  a2->n128_u64[1] = v2;
  unint64_t v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a1[2];
  a2[2] = result;
  return result;
}

__n128 std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_1EF56DCF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  return result;
}

void std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DCF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0,std::allocator<md::DrapingLogic::buildTempFoundationMesh(ggl::Loader *,md::Mesh const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56DCF8;
  unint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Draping::FoundationVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Draping::FoundationVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Draping::FoundationVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Draping::FoundationVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Draping::FoundationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Draping::FoundationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56DB90;
  return std::__compressed_pair_elem<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF56DB90;
  uint64_t v8 = (void **)(a1 + 136);
  std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint64_t v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 136));
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF56DB90;
  uint64_t v9 = (void **)(a1 + 136);
  std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](&v9);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 120);
    uint64_t v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      do
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v3 - 136));
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<ggl::PolylineOverlayRibbon::BaseMesh  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::PolylineOverlayRibbon::BaseMesh  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<md::Mesh  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 72);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::Mesh  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DrapingTaskInfo>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = a1[18];
    uint64_t v4 = (void *)a1[17];
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[17];
    }
    a1[18] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5)
  {
    a1[15] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[11];
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[9];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[7];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[5];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__shared_ptr_emplace<md::DrapingTaskInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DrapingTaskInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZL30GEOGetVectorKitDrapingLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "DrapingLogic");
  uint64_t v1 = (void *)GEOGetVectorKitDrapingLogicLog(void)::log;
  GEOGetVectorKitDrapingLogicLog(void)::log = (uint64_t)v0;
}

uint64_t gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(int8x8_t *a1, unint64_t a2)
{
  uint64_t v4 = (void *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(a1);
  uint64_t v5 = (void **)HIDWORD(a2);
  unint64_t v6 = a2 >> 39;
  uint64_t v7 = v4[4];
  if (a2 >> 39 < (v4[5] - v7) >> 3)
  {
    uint64_t v8 = *(void *)(v7 + 8 * v6);
    if (v8)
    {
      unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v11 = v4[7];
      uint64_t v10 = v4[8];
      if (v9 < (v10 - v11) >> 3)
      {
        uint64_t v12 = v11 + 8 * v9;
        BOOL v13 = v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2);
        if (v13)
        {
          uint64_t v14 = v4[10];
          uint64_t v15 = v4[11];
          uint64_t result = v14 + 48 * v9;
          if (result != v15 && v14 != 0) {
            return result;
          }
        }
      }
    }
  }
  int8x16_t v18 = (void *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(a1);
  float v67 = &unk_1EF554EE0;
  memset(v68, 0, sizeof(v68));
  int v69 = 1065353216;
  unint64_t v70 = a2;
  float32x4_t v19 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v18 + 4, (uint64_t)&v70);
  if (v20)
  {
    unint64_t v31 = v18[11];
    unint64_t v30 = v18[12];
    if (v31 < v30)
    {
      *(_OWORD *)(v31 + 8) = 0u;
      *(void *)unint64_t v31 = &unk_1EF554EE0;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_DWORD *)(v31 + 4CGContextBeginTransparencyLayer(this[1], 0) = 1065353216;
      if ((void **)v31 != &v67)
      {
        std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(v31 + 8, (uint64_t)v68);
        for (int64_t i = *(void **)(v31 + 24); i; int64_t i = (void *)*i)
        {
          for (uint64_t j = (uint64_t **)i[5]; j; uint64_t j = (uint64_t **)*j)
            *j[3] = v31;
        }
      }
      uint64_t v33 = (char *)(v31 + 48);
      goto LABEL_66;
    }
    uint64_t v35 = v18[10];
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v35) >> 4);
    if (v36 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v35) >> 4);
    uint64_t v38 = 2 * v37;
    if (2 * v37 <= v36 + 1) {
      uint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x555555555555555;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39)
    {
      if (v39 > 0x555555555555555) {
        goto LABEL_86;
      }
      int v40 = operator new(48 * v39);
    }
    else
    {
      int v40 = 0;
    }
    uint64_t v5 = (void **)&v40[6 * v36];
    *(_OWORD *)(v5 + 1) = 0u;
    *uint64_t v5 = &unk_1EF554EE0;
    *(_OWORD *)(v5 + 3) = 0u;
    *((_DWORD *)v5 + 1CGContextBeginTransparencyLayer(this[1], 0) = 1065353216;
    if (v5 != &v67)
    {
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap((uint64_t)(v5 + 1), (uint64_t)v68);
      for (uint64_t k = (void *)v40[6 * v36 + 3]; k; uint64_t k = (void *)*k)
      {
        for (uint64_t m = (uint64_t **)k[5]; m; uint64_t m = (uint64_t **)*m)
          *m[3] = (uint64_t)v5;
      }
    }
    int v42 = (char *)&v40[6 * v39];
    uint64_t v33 = (char *)(v5 + 6);
    unint64_t v44 = (char *)v18[10];
    unint64_t v43 = (char *)v18[11];
    if (v43 == v44)
    {
      v18[10] = v5;
      v18[11] = v33;
      v18[12] = v42;
      LODWORD(v5) = HIDWORD(a2);
      if (!v43) {
        goto LABEL_66;
      }
    }
    else
    {
      float v66 = v42;
      do
      {
        unint64_t v45 = v5;
        v5 -= 6;
        *(v45 - 6) = &unk_1EF554EE0;
        *(_OWORD *)(v45 - 5) = 0u;
        *(_OWORD *)(v45 - 3) = 0u;
        *((_DWORD *)v45 - 2) = 1065353216;
        if (v45 != (void **)v43)
        {
          std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap((uint64_t)(v45 - 5), (uint64_t)(v43 - 40));
          for (n = *(v45 - 3); n; n = (void *)*n)
          {
            for (iint64_t i = (uint64_t **)n[5]; ii; iint64_t i = (uint64_t **)*ii)
              *ii[3] = (uint64_t)v5;
          }
        }
        v43 -= 48;
      }
      while (v43 != v44);
      unint64_t v43 = (char *)v18[10];
      int v49 = (char *)v18[11];
      v18[10] = v5;
      v18[11] = v33;
      v18[12] = v66;
      if (v49 != v43)
      {
        unint64_t v50 = v49 - 48;
        unint64_t v51 = v49 - 48;
        uint64_t v52 = (void (***)(char *))(v49 - 48);
        do
        {
          uint64_t v53 = *v52;
          v52 -= 6;
          (*v53)(v51);
          v50 -= 48;
          BOOL v13 = v51 == v43;
          unint64_t v51 = (char *)v52;
        }
        while (!v13);
      }
      LODWORD(v5) = HIDWORD(a2);
      if (!v43) {
        goto LABEL_66;
      }
    }
    operator delete(v43);
LABEL_66:
    v18[11] = v33;
    uint64_t v26 = v18[31];
    goto LABEL_67;
  }
  uint64_t v21 = v18[10];
  uint64_t v22 = ((uint64_t)v19 - v18[7]) >> 3;
  uint64_t v23 = (void **)(v21 + 48 * v22);
  if (v23 != &v67)
  {
    uint64_t v24 = v21 + 48 * v22;
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(v24 + 8, (uint64_t)v68);
    for (juint64_t j = *(void **)(v24 + 24); jj; juint64_t j = (void *)*jj)
    {
      for (kuint64_t k = (uint64_t **)jj[5]; kk; kuint64_t k = (uint64_t **)*kk)
        *kk[3] = (uint64_t)v23;
    }
  }
  uint64_t v26 = v18[31];
  if (v23 != (void **)v18[11])
  {
    int8x16_t v27 = (void *)v18[16];
    if (v27)
    {
      while (1)
      {
        BOOL v72 = (uint64_t *)&v70;
        uint64_t v73 = 1;
        uint64_t v71 = v26;
        uint64_t v28 = v27[6];
        if (!v28) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v71, &v72);
        int8x16_t v27 = (void *)*v27;
        if (!v27) {
          goto LABEL_70;
        }
      }
LABEL_84:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
LABEL_86:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    goto LABEL_70;
  }
LABEL_67:
  for (muint64_t m = (void *)v18[22]; mm; muint64_t m = (void *)*mm)
  {
    BOOL v72 = (uint64_t *)&v70;
    uint64_t v73 = 1;
    uint64_t v71 = v26;
    uint64_t v55 = mm[6];
    if (!v55) {
      goto LABEL_84;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v55 + 48))(v55, &v71, &v72);
  }
LABEL_70:
  gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(&v67);
  uint64_t v56 = (void *)gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(a1);
  uint64_t v57 = v56[4];
  if (v6 < (v56[5] - v57) >> 3
    && (uint64_t v58 = *(void *)(v57 + 8 * v6)) != 0
    && (unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(a2) & 0x7F)), v61 = v56[7], v60 = v56[8], v59 < (v60 - v61) >> 3)
    && ((uint64_t v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == v5) : (v63 = 0), v63))
  {
    uint64_t v64 = v56[11];
    uint64_t v65 = v56[10] + 48 * v59;
  }
  else
  {
    uint64_t v64 = v56[11];
    uint64_t v65 = v64;
  }
  if (v65 == v64) {
    return 0;
  }
  else {
    return v65;
  }
}

void sub_1A1DA0660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(int8x8_t *a1)
{
  uint64_t v10 = 0xC0B2E017CC0570FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0xC0B2E017CC0570FLL;
    if (*(void *)&v1 <= 0xC0B2E017CC0570FuLL) {
      uint64_t v3 = 0xC0B2E017CC0570FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0xC0B2E017CC0570FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC0B2E017CC0570FLL)
      {
        if (v5[2] == 0xC0B2E017CC0570FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC0B2E017CC0570FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC0B2E017CC0570FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DA08B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::components::RegistryBridgeMap<gdc::Entity>::entities(void *a1, int8x8_t *a2, unint64_t a3)
{
  int8x8_t v4 = a2[2];
  if (!*(void *)&v4) {
    goto LABEL_21;
  }
  unint64_t v5 = 0x9DDFEA08EB382D69 * (((((a3 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a3));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v7;
    if (v7 >= *(void *)&v4) {
      unint64_t v9 = v7 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v9 = v7 & (*(void *)&v4 - 1);
  }
  uint64_t v10 = *(void **)(*(void *)&a2[1] + 8 * v9);
  if (!v10 || (uint64_t v11 = (void *)*v10) == 0)
  {
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (v8.u32[0] < 2uLL)
  {
    uint64_t v12 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v14 = v11[1];
      if (v7 == v14)
      {
        if (v11[2] == a3) {
          goto LABEL_23;
        }
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_21;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v13 = v11[1];
    if (v7 == v13) {
      break;
    }
    if (v13 >= *(void *)&v4) {
      v13 %= *(void *)&v4;
    }
    if (v13 != v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_21;
    }
  }
  if (v11[2] != a3) {
    goto LABEL_11;
  }
LABEL_23:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v15 = v11[6];
  if (v15)
  {
    if (v15 >> 61) {
      abort();
    }
    uint64_t v16 = v15;
    int32x2_t v17 = operator new(8 * v15);
    *a1 = v17;
    a1[1] = v17;
    a1[2] = &v17[v16];
    int8x16_t v18 = (void *)v11[5];
    if (!v18) {
      return;
    }
LABEL_31:
    while (2)
    {
      uint64_t v20 = v18[3];
      unint64_t v21 = a1[2];
      if ((unint64_t)v17 >= v21)
      {
        uint64_t v22 = (unsigned char *)*a1;
        uint64_t v23 = (uint64_t)v17 - *a1;
        uint64_t v24 = v23 >> 3;
        unint64_t v25 = (v23 >> 3) + 1;
        if (v25 >> 61) {
          abort();
        }
        uint64_t v26 = v21 - (void)v22;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v28 = operator new(8 * v27);
        }
        else
        {
          uint64_t v28 = 0;
        }
        float32x4_t v29 = &v28[8 * v24];
        *float32x4_t v29 = *(void *)(v20 + 16);
        float32x4_t v19 = v29 + 1;
        if (v17 == (void *)v22)
        {
          uint64_t v22 = v17;
          goto LABEL_48;
        }
        unint64_t v30 = (char *)(v17 - 1) - v22;
        if (v30 < 0x168)
        {
          unint64_t v31 = v17;
          goto LABEL_45;
        }
        if (&v28[v23 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v23 - 8])
        {
          unint64_t v31 = v17;
        }
        else
        {
          if ((void *)((char *)v17 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) <= v17 - 1)
          {
            if ((unint64_t)((char *)v17 - v28 - v23) < 0x20)
            {
              unint64_t v31 = v17;
              goto LABEL_45;
            }
            uint64_t v33 = (v30 >> 3) + 1;
            unint64_t v31 = &v17[-(v33 & 0x3FFFFFFFFFFFFFFCLL)];
            unint64_t v34 = &v28[8 * v24 - 16];
            uint64_t v35 = (long long *)(v17 - 2);
            uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v37 = *v35;
              *(v34 - 1) = *(v35 - 1);
              *unint64_t v34 = v37;
              v34 -= 2;
              v35 -= 2;
              v36 -= 4;
            }
            while (v36);
            v29 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_45;
            }
LABEL_48:
            *a1 = v29;
            a1[1] = v19;
            a1[2] = &v28[8 * v27];
            if (v22) {
              operator delete(v22);
            }
LABEL_30:
            a1[1] = v19;
            int8x16_t v18 = (void *)*v18;
            int32x2_t v17 = v19;
            if (!v18) {
              return;
            }
            continue;
          }
          unint64_t v31 = v17;
        }
        do
        {
LABEL_45:
          uint64_t v32 = *--v31;
          *--float32x4_t v29 = v32;
        }
        while (v31 != (void *)v22);
        uint64_t v22 = (unsigned char *)*a1;
        goto LABEL_48;
      }
      break;
    }
    *int32x2_t v17 = *(void *)(v20 + 16);
    float32x4_t v19 = v17 + 1;
    goto LABEL_30;
  }
  int32x2_t v17 = 0;
  int8x16_t v18 = (void *)v11[5];
  if (v18) {
    goto LABEL_31;
  }
}

void sub_1A1DA0C24(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(int8x8_t *a1)
{
  unint64_t v10 = 0xB02BC19BABA3EE9ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB02BC19BABA3EE9ELL;
    if (*(void *)&v1 <= 0xB02BC19BABA3EE9ELL) {
      unint64_t v3 = 0xB02BC19BABA3EE9ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB02BC19BABA3EE9ELL;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB02BC19BABA3EE9ELL)
      {
        if (v5[2] == 0xB02BC19BABA3EE9ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB02BC19BABA3EE9ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB02BC19BABA3EE9ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DA0E80(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::components::RegistryBridgeMap<gdc::Entity>::nodeForRegistryAndKey(uint64_t a1, gdc::Registry *a2, unint64_t *a3)
{
  unint64_t v7 = (uint64_t *)(a1 + 8);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((((((unint64_t)a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ ((unint64_t)a2 >> 32));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (((unint64_t)a2 >> 32) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*v7 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v14 + 1);
            if (v16 == v10)
            {
              if (*((gdc::Registry **)v14 + 2) == a2) {
                goto LABEL_60;
              }
            }
            else if ((v16 & (v11 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((gdc::Registry **)v14 + 2) == a2) {
              goto LABEL_60;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_22:
  int32x2_t v17 = (void *)(a1 + 24);
  uint64_t v14 = (char *)operator new(0x40uLL);
  uint64_t v32 = v14;
  uint64_t v33 = a1 + 24;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = a2;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  LOBYTE(v34) = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v19 = *(float *)(a1 + 40);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 16);
    }
    if (prime > v11) {
      goto LABEL_34;
    }
    if (prime < v11)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v11 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v11) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v7, prime);
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v27 = *v7;
  uint64_t v28 = *(void **)(*v7 + 8 * v3);
  if (v28)
  {
    *(void *)uint64_t v14 = *v28;
LABEL_58:
    *uint64_t v28 = v14;
    goto LABEL_59;
  }
  *(void *)uint64_t v14 = *v17;
  *int32x2_t v17 = v14;
  *(void *)(v27 + 8 * v3) = v17;
  if (*(void *)v14)
  {
    unint64_t v29 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11) {
        v29 %= v11;
      }
    }
    else
    {
      v29 &= v11 - 1;
    }
    uint64_t v28 = (void *)(*v7 + 8 * v29);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 32);
LABEL_60:
  unint64_t v30 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((void *)v14 + 3, *a3);
  if (!v30) {
    gdc::Registry::create(a2);
  }
  return v30[3];
}

void sub_1A1DA1610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  unint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::__split_buffer<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode,std::allocator<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode> &>::~__split_buffer((uint64_t)va1);
  if (!v5) {
    _Unwind_Resume(a1);
  }
  gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v5, (uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::Material>::emplace<int,std::shared_ptr<gms::Material<ggl::Texture2D>>>(void *a1, uint64_t a2, int a3, uint64_t *a4)
{
  int8x8_t v4 = (std::__shared_weak_count *)a4[1];
  uint64_t v5 = *a4;
  uint64_t v8 = v4;
  *a4 = 0;
  a4[1] = 0;
  v9[0] = a3;
  v9[1] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gdc::ComponentStorageWrapper<md::components::Material>::emplace(a1, a2, v9);
  uint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = v8;
    if (!v8) {
      return;
    }
  }
  else
  {
    uint64_t v7 = v8;
    if (!v8) {
      return;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1A1DA177C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v45 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v45);
  if (v6)
  {
    float v19 = (void *)a1[11];
    unint64_t v20 = a1[12];
    if ((unint64_t)v19 < v20)
    {
      *float v19 = *(void *)a3;
      uint64_t v21 = *((void *)a3 + 1);
      v19[1] = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = *((void *)a3 + 2);
      *(void *)((char *)v19 + 21) = *(void *)((char *)a3 + 21);
      void v19[2] = v22;
      v19[4] = *((void *)a3 + 4);
      uint64_t v23 = *((void *)a3 + 5);
      v19[5] = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v24 = v19 + 6;
LABEL_48:
      a1[11] = v24;
      uint64_t v16 = a1[31];
      goto LABEL_49;
    }
    uint64_t v25 = a1[10];
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v25) >> 4);
    unint64_t v27 = v26 + 1;
    if (v26 + 1 > 0x555555555555555) {
      goto LABEL_54;
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v25) >> 4);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v29 = 0x555555555555555;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      if (v29 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v30 = (char *)operator new(48 * v29);
    }
    else
    {
      unint64_t v30 = 0;
    }
    uint64_t v31 = *((void *)a3 + 1);
    uint64_t v32 = &v30[48 * v26];
    *(void *)uint64_t v32 = *(void *)a3;
    *((void *)v32 + 1) = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = &v30[48 * v26];
    *((void *)v33 + 2) = *((void *)a3 + 2);
    *(void *)(v33 + 21) = *(void *)((char *)a3 + 21);
    uint64_t v34 = *((void *)a3 + 5);
    *((void *)v33 + 4) = *((void *)a3 + 4);
    *((void *)v33 + 5) = v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = &v30[48 * v29];
    unint64_t v24 = v32 + 48;
    uint64_t v36 = (char *)a1[10];
    long long v37 = (char *)a1[11];
    if (v37 == v36)
    {
      a1[10] = v32;
      a1[11] = v24;
      a1[12] = v35;
    }
    else
    {
      do
      {
        long long v38 = *((_OWORD *)v37 - 3);
        v37 -= 48;
        *((_OWORD *)v32 - 3) = v38;
        v32 -= 48;
        *(void *)long long v37 = 0;
        *((void *)v37 + 1) = 0;
        uint64_t v39 = *((void *)v37 + 2);
        *(void *)(v32 + 21) = *(void *)(v37 + 21);
        *((void *)v32 + 2) = v39;
        *((_OWORD *)v32 + 2) = *((_OWORD *)v37 + 2);
        *((void *)v37 + 4) = 0;
        *((void *)v37 + 5) = 0;
      }
      while (v37 != v36);
      long long v37 = (char *)a1[10];
      int v40 = (char *)a1[11];
      a1[10] = v32;
      a1[11] = v24;
      a1[12] = v35;
      while (v40 != v37)
      {
        int v41 = (std::__shared_weak_count *)*((void *)v40 - 1);
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          int v42 = (std::__shared_weak_count *)*((void *)v40 - 5);
          if (v42)
          {
LABEL_41:
            if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
        else
        {
          int v42 = (std::__shared_weak_count *)*((void *)v40 - 5);
          if (v42) {
            goto LABEL_41;
          }
        }
        v40 -= 48;
      }
    }
    if (v37) {
      operator delete(v37);
    }
    goto LABEL_48;
  }
  uint64_t v7 = a1[10];
  uint64_t v8 = ((uint64_t)v5 - a1[7]) >> 3;
  uint64_t v9 = v7 + 48 * v8;
  long long v10 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  unint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
  *(_OWORD *)uint64_t v9 = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v7 + 48 * v8;
  *(_DWORD *)(v12 + 16) = *((_DWORD *)a3 + 4);
  *(_DWORD *)(v12 + 2CGContextBeginTransparencyLayer(this[1], 0) = *((_DWORD *)a3 + 5);
  int v13 = *((_DWORD *)a3 + 6);
  *(unsigned char *)(v12 + 28) = *((unsigned char *)a3 + 28);
  *(_DWORD *)(v12 + 24) = v13;
  long long v14 = a3[2];
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  unint64_t v15 = *(std::__shared_weak_count **)(v12 + 40);
  *(_OWORD *)(v12 + 32) = v14;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  uint64_t v16 = a1[31];
  if (v9 != a1[11])
  {
    int32x2_t v17 = (void *)a1[16];
    if (v17)
    {
      while (1)
      {
        uint64_t v47 = &v45;
        uint64_t v48 = 1;
        uint64_t v46 = v16;
        uint64_t v18 = v17[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v18 + 48))(v18, &v46, &v47);
        int32x2_t v17 = (void *)*v17;
        if (!v17) {
          return;
        }
      }
LABEL_53:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_54:
      abort();
    }
    return;
  }
LABEL_49:
  unint64_t v43 = (void *)a1[22];
  if (v43)
  {
    while (1)
    {
      uint64_t v47 = &v45;
      uint64_t v48 = 1;
      uint64_t v46 = v16;
      uint64_t v44 = v43[6];
      if (!v44) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v44 + 48))(v44, &v46, &v47);
      unint64_t v43 = (void *)*v43;
      if (!v43) {
        return;
      }
    }
    goto LABEL_53;
  }
}

void md::overlayComponents::DrapedRasterOverlay::~DrapedRasterOverlay(md::overlayComponents::DrapedRasterOverlay *this)
{
  uint8x8_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::remove(void *a1, unint64_t a2)
{
  unint64_t v33 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  unint64_t v15 = (void *)(v14 + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  uint64_t v18 = *(void *)(v16 - 48);
  uint64_t v17 = *(void *)(v16 - 40);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  float v19 = (std::__shared_weak_count *)v15[1];
  *unint64_t v15 = v18;
  v15[1] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v14 + 48 * v7;
  *(_DWORD *)(v20 + 16) = *(_DWORD *)(v16 - 32);
  *(_DWORD *)(v20 + 2CGContextBeginTransparencyLayer(this[1], 0) = *(_DWORD *)(v16 - 28);
  int v21 = *(_DWORD *)(v16 - 24);
  *(unsigned char *)(v20 + 28) = *(unsigned char *)(v16 - 20);
  *(_DWORD *)(v20 + 24) = v21;
  uint64_t v22 = (void *)(v20 + 32);
  uint64_t v24 = *(void *)(v16 - 16);
  uint64_t v23 = *(void *)(v16 - 8);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *uint64_t v22 = v24;
  uint64_t v25 = v14 + 48 * v7;
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 40);
  *(void *)(v25 + 4CGContextBeginTransparencyLayer(this[1], 0) = v23;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v27 = a1[11];
  unint64_t v28 = *(std::__shared_weak_count **)(v27 - 8);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  unint64_t v29 = *(std::__shared_weak_count **)(v27 - 40);
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  a1[11] = v27 - 48;
  unint64_t v30 = (void *)a1[28];
  if (!v30) {
    return 1;
  }
  uint64_t v31 = a1[31];
  while (1)
  {
    v35[0] = &v33;
    v35[1] = 1;
    uint64_t v34 = v31;
    uint64_t v32 = v30[6];
    if (!v32) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v32 + 48))(v32, &v34, v35);
    unint64_t v30 = (void *)*v30;
    if (!v30) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  uint64_t v8 = (void **)(a1 + 80);
  std::vector<md::overlayComponents::DrapedRasterOverlay>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          MEMORY[0x1A6239270](v6, 0x1000C40104B78CFLL);
        }
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

void std::vector<md::overlayComponents::DrapedRasterOverlay>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 5);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 5);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 48;
  }
  while (v4 != v2);
  uint64_t v5 = **a1;
LABEL_14:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::DrapedRasterOverlay>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  uint64_t v9 = (void **)(a1 + 80);
  std::vector<md::overlayComponents::DrapedRasterOverlay>::__destroy_vector::operator()[abi:nn180100](&v9);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          MEMORY[0x1A6239270](v6, 0x1000C40104B78CFLL);
        }
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = v3;
    operator delete(v5);
  }
  return a1;
}

double md::RasterOverlayMaterial::albedoFactor@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a1 + 4) = xmmword_1A28FC700;
  return result;
}

void md::RasterOverlayMaterial::~RasterOverlayMaterial(md::RasterOverlayMaterial *this)
{
  *(void *)this = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t std::__shared_ptr_emplace<md::RasterOverlayMaterial>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RasterOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RasterOverlayMaterial>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>(int8x8_t *a1)
{
  unint64_t v10 = 0xFC21CCDFEDC314FBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xFC21CCDFEDC314FBLL;
    if (*(void *)&v1 <= 0xFC21CCDFEDC314FBLL) {
      unint64_t v3 = 0xFC21CCDFEDC314FBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xFC21CCDFEDC314FBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xFC21CCDFEDC314FBLL)
      {
        if (v5[2] == 0xFC21CCDFEDC314FBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xFC21CCDFEDC314FBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xFC21CCDFEDC314FBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DA2708(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(void *a1, uint64_t a2)
{
  int8x8_t v4 = (int8x8_t)a1[2];
  if (!*(void *)&v4) {
    goto LABEL_21;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v4);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v8;
    if (v8 >= *(void *)&v4) {
      unint64_t v10 = v8 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v10 = v8 & (*(void *)&v4 - 1);
  }
  uint64_t v11 = *(void ****)(a1[1] + 8 * v10);
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v13 = *(void *)&v4 - 1;
        while (1)
        {
          unint64_t v15 = (unint64_t)v12[1];
          if (v15 == v8)
          {
            if (v12[2] == (void *)v5) {
              goto LABEL_22;
            }
          }
          else if ((v15 & v13) != v10)
          {
            goto LABEL_21;
          }
          uint64_t v12 = (void **)*v12;
          if (!v12) {
            goto LABEL_22;
          }
        }
      }
      do
      {
        unint64_t v14 = (unint64_t)v12[1];
        if (v14 == v8)
        {
          if (v12[2] == (void *)v5) {
            break;
          }
        }
        else
        {
          if (v14 >= *(void *)&v4) {
            v14 %= *(void *)&v4;
          }
          if (v14 != v10) {
            goto LABEL_21;
          }
        }
        uint64_t v12 = (void **)*v12;
      }
      while (v12);
    }
  }
  else
  {
LABEL_21:
    uint64_t v12 = 0;
  }
LABEL_22:
  uint64_t v16 = v12 + 3;
  uint64_t v17 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v12 + 3, *(void *)(a2 + 24));
  if (v17[3] == a2)
  {
    int8x8_t v18 = (int8x8_t)v12[4];
    unint64_t v19 = v17[1];
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v18) {
        v19 %= *(void *)&v18;
      }
    }
    else
    {
      v19 &= *(void *)&v18 - 1;
    }
    int v21 = (uint64_t *)*((void *)*v16 + v19);
    do
    {
      uint64_t v22 = v21;
      int v21 = (uint64_t *)*v21;
    }
    while (v21 != v17);
    if (v22 == (uint64_t *)(v12 + 5)) {
      goto LABEL_40;
    }
    unint64_t v23 = v22[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&v18) {
        v23 %= *(void *)&v18;
      }
    }
    else
    {
      v23 &= *(void *)&v18 - 1;
    }
    if (v23 != v19)
    {
LABEL_40:
      if (!*v17) {
        goto LABEL_41;
      }
      unint64_t v24 = *(void *)(*v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v24 >= *(void *)&v18) {
          v24 %= *(void *)&v18;
        }
      }
      else
      {
        v24 &= *(void *)&v18 - 1;
      }
      if (v24 != v19) {
LABEL_41:
      }
        *((void *)*v16 + v19) = 0;
    }
    uint64_t v25 = *v17;
    if (*v17)
    {
      unint64_t v26 = *(void *)(v25 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v26 >= *(void *)&v18) {
          v26 %= *(void *)&v18;
        }
      }
      else
      {
        v26 &= *(void *)&v18 - 1;
      }
      if (v26 != v19)
      {
        *((void *)*v16 + v26) = v22;
        uint64_t v25 = *v17;
      }
    }
    *uint64_t v22 = v25;
    *uint64_t v17 = 0;
    v12[6] = (char *)v12[6] - 1;
    operator delete(v17);
    if (!v12[6])
    {
      int8x8_t v27 = (int8x8_t)a1[2];
      unint64_t v28 = (unint64_t)v12[1];
      uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        if (v28 >= *(void *)&v27) {
          v28 %= *(void *)&v27;
        }
      }
      else
      {
        v28 &= *(void *)&v27 - 1;
      }
      uint64_t v30 = a1[1];
      uint64_t v31 = *(void ***)(v30 + 8 * v28);
      do
      {
        uint64_t v32 = v31;
        uint64_t v31 = (void **)*v31;
      }
      while (v31 != v12);
      if (v32 == a1 + 3) {
        goto LABEL_68;
      }
      unint64_t v33 = (unint64_t)v32[1];
      if (v29.u32[0] > 1uLL)
      {
        if (v33 >= *(void *)&v27) {
          v33 %= *(void *)&v27;
        }
      }
      else
      {
        v33 &= *(void *)&v27 - 1;
      }
      if (v33 != v28)
      {
LABEL_68:
        if (!*v12) {
          goto LABEL_69;
        }
        unint64_t v34 = *((void *)*v12 + 1);
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(void *)&v27) {
            v34 %= *(void *)&v27;
          }
        }
        else
        {
          v34 &= *(void *)&v27 - 1;
        }
        if (v34 != v28) {
LABEL_69:
        }
          *(void *)(v30 + 8 * v28) = 0;
      }
      uint64_t v35 = *v12;
      if (*v12)
      {
        unint64_t v36 = v35[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v36 >= *(void *)&v27) {
            v36 %= *(void *)&v27;
          }
        }
        else
        {
          v36 &= *(void *)&v27 - 1;
        }
        if (v36 != v28)
        {
          *(void *)(a1[1] + 8 * v36) = v32;
          uint64_t v35 = *v12;
        }
      }
      *uint64_t v32 = v35;
      *uint64_t v12 = 0;
      --a1[4];
      long long v37 = v12[5];
      if (v37)
      {
        do
        {
          long long v38 = (void *)*v37;
          operator delete(v37);
          long long v37 = v38;
        }
        while (v38);
      }
      uint64_t v39 = *v16;
      *uint64_t v16 = 0;
      if (v39) {
        operator delete(v39);
      }
      operator delete(v12);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)v10 + 5) == HIDWORD(a2))
              {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_25;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)v10 + 5) == HIDWORD(a2))
            {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_25:
  unint64_t v10 = operator new(0x20uLL);
  *unint64_t v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_75;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t prime = v17;
  }
  else {
    size_t prime = v16;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_38:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v19 = operator new(8 * prime);
    uint8x8_t v20 = *(void **)a1;
    *(void *)a1 = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    unint64_t v23 = (uint64_t *)(a1 + 4);
    uint64_t v22 = (void *)*((void *)a1 + 2);
    if (!v22) {
      goto LABEL_62;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (int64_t i = (void *)*v22; *v22; int64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          uint64_t v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          *uint64_t v22 = *i;
          uint64_t v29 = 8 * v28;
          *int64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          uint64_t v22 = i;
          size_t v26 = v28;
        }
      }
LABEL_62:
      unint64_t v7 = prime;
      goto LABEL_63;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    unint64_t v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_62;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_67;
        }
        *uint64_t v22 = *v33;
        uint64_t v34 = 8 * v35;
        *unint64_t v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        unint64_t v33 = v22;
      }
      size_t v35 = v24;
LABEL_67:
      uint64_t v22 = v33;
      unint64_t v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_62;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_63;
  }
  unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      int v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_63:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_75:
  unint64_t v36 = *(void **)a1;
  long long v37 = *(void **)(*(void *)a1 + 8 * v5);
  if (v37)
  {
    *unint64_t v10 = *v37;
LABEL_83:
    *long long v37 = v10;
    goto LABEL_84;
  }
  *unint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    long long v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_83;
  }
LABEL_84:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1A1DA2FC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *a1;
    *a1 = *a2;
    *a2 = v4;
    uint64_t v5 = a1[1];
    a1[1] = a2[1];
    a2[1] = v5;
    uint64_t v6 = a1[2];
    a1[2] = a2[2];
    a2[2] = v6;
    uint64_t v7 = a1[3];
    uint8x8_t v8 = a2 + 3;
    a1[3] = a2[3];
    a2[3] = v7;
    uint64_t v9 = *a2;
    if (*a2)
    {
      unint64_t v10 = a2[1];
      unint64_t v15 = a2[1];
      unint64_t v11 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(v9 + 8, v10, &v15);
      std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>((float *)v11 + 6, a2[3], v8)[3] = a2;
      *a2 = v9;
    }
    uint64_t v12 = *a1;
    if (*a1)
    {
      unint64_t v15 = a1[1];
      float v13 = std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(v12 + 8, v15, &v15);
      std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>((float *)v13 + 6, a1[3], a1 + 3)[3] = a1;
      *a1 = v12;
    }
  }
  return a1;
}

char *std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::__emplace_unique_key_args<gdc::Registry *,std::piecewise_construct_t const&,std::tuple<gdc::Registry * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (*((void *)v12 + 2) == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v12 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0u;
  *((_DWORD *)v12 + 14) = 1065353216;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_34;
    }
    if (prime < v9)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v9) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  size_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v12 = *v26;
LABEL_58:
    *size_t v26 = v12;
    goto LABEL_59;
  }
  *(void *)uint64_t v12 = *v15;
  *unint64_t v15 = v12;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v12)
  {
    unint64_t v27 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    size_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1A1DA33F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode,std::allocator<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    v2 -= 32;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v4, v2);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[5];
      if (v3)
      {
        do
        {
          uint64_t v4 = (void *)*v3;
          operator delete(v3);
          uint64_t v3 = v4;
        }
        while (v4);
      }
      uint64_t v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::remove(void *a1, unint64_t a2)
{
  unint64_t v22 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (uint64_t *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode::operator=(v14, (uint64_t *)(a1[11] - 32));
  uint64_t v15 = a1[11];
  BOOL v18 = *(void **)(v15 - 32);
  uint64_t v17 = v15 - 32;
  float v16 = v18;
  if (v18) {
    gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(v16, v17);
  }
  a1[11] = v17;
  unint64_t v19 = (void *)a1[28];
  if (!v19) {
    return 1;
  }
  uint64_t v20 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    uint64_t v23 = v20;
    uint64_t v21 = v19[6];
    if (!v21) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v21 + 48))(v21, &v23, v24);
    unint64_t v19 = (void *)*v19;
    if (!v19) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = (void **)a1[10];
  if (v2)
  {
    uint64_t v3 = (void **)a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 4;
      do
      {
        if (*v5) {
          gdc::components::RegistryBridgeMap<gdc::Entity>::nodeIsBeingDestroyed(*v5, (uint64_t)v5);
        }
        BOOL v6 = v5 == v2;
        v5 -= 4;
      }
      while (!v6);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  unint64_t v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    uint64_t v9 = (void *)a1[5];
    unint64_t v10 = (void *)a1[4];
    if (v9 != v8)
    {
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          MEMORY[0x1A6239270](v11, 0x1000C40104B78CFLL);
        }
      }
      while (v9 != v8);
      unint64_t v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<md::DrapingLogic>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::QueuedForDestruction<>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::CanDisableDraping>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<gdc::components::RegistryBridgeMap<gdc::Entity>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCF1B3CF834D7AFD0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCF1B3CF834D7AFD0;
    if (*(void *)&v1 <= 0xCF1B3CF834D7AFD0) {
      unint64_t v3 = 0xCF1B3CF834D7AFD0 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCF1B3CF834D7AFD0;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCF1B3CF834D7AFD0)
      {
        if (v5[2] == 0xCF1B3CF834D7AFD0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCF1B3CF834D7AFD0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCF1B3CF834D7AFD0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DA3E68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(void *a1)
{
  *a1 = &unk_1EF554EE0;
  uint8x8_t v2 = (void *)a1[3];
  if (v2)
  {
    unint64_t v3 = (void *)a1[3];
    do
    {
      for (int64_t i = (uint64_t **)v3[5]; i; int64_t i = (uint64_t **)*i)
        *i[3] = 0;
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[5];
      if (v6)
      {
        do
        {
          unint64_t v7 = (void *)*v6;
          operator delete(v6);
          uint64_t v6 = v7;
        }
        while (v7);
      }
      uint64_t v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v2);
      uint8x8_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v9 = (void *)a1[1];
  a1[1] = 0;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

void gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(void *a1)
{
  gdc::components::RegistryBridgeMap<gdc::Entity>::~RegistryBridgeMap(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = v14 + 48 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  if (v15 != v16 - 48)
  {
    uint64_t v17 = v14 + 48 * v7;
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(v17 + 8, v16 - 40);
    for (int64_t i = *(void **)(v17 + 24); i; int64_t i = (void *)*i)
    {
      for (uint64_t j = (uint64_t **)i[5]; j; uint64_t j = (uint64_t **)*j)
        *j[3] = v15;
    }
  }
  uint64_t v19 = a1[11];
  uint64_t v20 = *(void (***)(uint64_t))(v19 - 48);
  v19 -= 48;
  (*v20)(v19);
  a1[11] = v19;
  uint64_t v21 = (void *)a1[28];
  if (!v21) {
    return 1;
  }
  uint64_t v22 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    uint64_t v26 = v22;
    uint64_t v23 = v21[6];
    if (!v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v23 + 48))(v23, &v26, v27);
    uint64_t v21 = (void *)*v21;
    if (!v21) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<gdc::components::RegistryBridgeMap<gdc::Entity>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = (void (***)(void))a1[10];
  if (v2)
  {
    uint64_t v3 = (void (***)(void))a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 6;
      uint64_t v6 = v3 - 6;
      unint64_t v7 = v3 - 6;
      do
      {
        uint64_t v8 = *v7;
        v7 -= 6;
        (*v8)(v6);
        v5 -= 6;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  unint64_t v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[4];
  if (v11)
  {
    uint64_t v12 = (void *)a1[5];
    unint64_t v13 = (void *)a1[4];
    if (v12 != v11)
    {
      do
      {
        uint64_t v15 = *--v12;
        uint64_t v14 = v15;
        *uint64_t v12 = 0;
        if (v15) {
          MEMORY[0x1A6239270](v14, 0x1000C40104B78CFLL);
        }
      }
      while (v12 != v11);
      unint64_t v13 = (void *)a1[4];
    }
    a1[5] = v11;
    operator delete(v13);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::remove(void *a1, unint64_t a2)
{
  unint64_t v46 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void **)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  if (v15 != (void **)(v16 - 24))
  {
    uint64_t v17 = *(char **)(v16 - 24);
    unint64_t v18 = *(unsigned char **)(v16 - 16);
    size_t v19 = v18 - v17;
    unint64_t v20 = (v18 - v17) >> 3;
    uint64_t v21 = v14 + 24 * v7;
    uint64_t v24 = *(void *)(v21 + 16);
    uint64_t v23 = (void *)(v21 + 16);
    uint64_t v22 = v24;
    unint64_t v25 = (char *)*v15;
    if (v20 > (v24 - (uint64_t)*v15) >> 3)
    {
      if (v25)
      {
        *(void *)(v14 + 24 * v7 + 8) = v25;
        operator delete(v25);
        uint64_t v22 = 0;
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      uint64_t v26 = v22 >> 2;
      if (v22 >> 2 <= v20) {
        uint64_t v26 = (v18 - v17) >> 3;
      }
      BOOL v27 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v27) {
        unint64_t v28 = v26;
      }
      if (v28 >> 61) {
        goto LABEL_40;
      }
      uint64_t v29 = 8 * v28;
      unint64_t v30 = (char *)operator new(8 * v28);
      unint64_t v25 = v30;
      *uint64_t v15 = v30;
      uint64_t v31 = v14 + 24 * v7;
      *(void *)(v31 + 8) = v30;
      uint64_t v32 = (char **)(v31 + 8);
      *uint64_t v23 = &v30[v29];
      if (v18 != v17) {
        memcpy(v30, v17, v18 - v17);
      }
      goto LABEL_31;
    }
    uint64_t v33 = v14 + 24 * v7;
    size_t v35 = *(char **)(v33 + 8);
    uint64_t v32 = (char **)(v33 + 8);
    uint64_t v34 = v35;
    size_t v36 = v35 - v25;
    unint64_t v37 = (v35 - v25) >> 3;
    if (v37 >= v20)
    {
      if (v18 == v17)
      {
LABEL_31:
        *uint64_t v32 = &v25[v19];
        uint64_t v16 = a1[11];
        goto LABEL_32;
      }
      uint64_t v39 = (char *)*v15;
      int v40 = v17;
    }
    else
    {
      unint64_t v38 = &v17[8 * v37];
      if (v34 != v25)
      {
        memmove(*v15, v17, v36);
        unint64_t v25 = *v32;
      }
      size_t v19 = v18 - v38;
      if (v18 == v38) {
        goto LABEL_31;
      }
      uint64_t v39 = v25;
      int v40 = v38;
    }
    memmove(v39, v40, v19);
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v42 = v16 - 24;
  int v41 = *(void **)(v16 - 24);
  if (v41)
  {
    *(void *)(v16 - 16) = v41;
    operator delete(v41);
  }
  a1[11] = v42;
  unint64_t v43 = (void *)a1[28];
  if (v43)
  {
    uint64_t v44 = a1[31];
    while (1)
    {
      v48[0] = &v46;
      v48[1] = 1;
      uint64_t v47 = v44;
      uint64_t v45 = v43[6];
      if (!v45) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v45 + 48))(v45, &v47, v48);
      unint64_t v43 = (void *)*v43;
      if (!v43) {
        return 1;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_40:
    abort();
  }
  return 1;
}

void gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      uint64_t v5 = a1[11];
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[4];
  if (v9)
  {
    unint64_t v10 = (void *)a1[5];
    uint64_t v11 = (void *)a1[4];
    if (v10 != v9)
    {
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        *unint64_t v10 = 0;
        if (v13) {
          MEMORY[0x1A6239270](v12, 0x1000C40104B78CFLL);
        }
      }
      while (v10 != v9);
      uint64_t v11 = (void *)a1[4];
    }
    a1[5] = v9;
    operator delete(v11);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10] + 40 * v7;
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          if (v13 != v14 - 40)
          {
            *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 - 8);
            std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *> *>>((void *)v13, *(uint64_t ***)(v14 - 24));
            uint64_t v14 = a1[11];
          }
          uint64_t v15 = (void **)(v14 - 40);
          uint64_t v16 = *(void **)(v14 - 24);
          if (v16)
          {
            do
            {
              uint64_t v21 = (void *)*v16;
              uint64_t v22 = (void *)v16[3];
              if (v22)
              {
                v16[4] = v22;
                operator delete(v22);
              }
              operator delete(v16);
              uint64_t v16 = v21;
            }
            while (v21);
          }
          uint64_t v17 = *v15;
          *uint64_t v15 = 0;
          if (v17) {
            operator delete(v17);
          }
          a1[11] = v15;
          unint64_t v18 = (void *)a1[28];
          if (v18)
          {
            uint64_t v19 = a1[31];
            while (1)
            {
              v27[0] = &v25;
              v27[1] = 1;
              uint64_t v26 = v19;
              uint64_t v20 = v18[6];
              if (!v20) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v26, v27);
              unint64_t v18 = (void *)*v18;
              if (!v18) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *> *>>(v23, v24);
          }
        }
      }
    }
  }
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *> *>>(void *a1, uint64_t **a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_5;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = (uint64_t)a2[2];
      if (v6 != (uint64_t *)a2) {
        std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(v6 + 3, (char *)a2[3], (char *)a2[4], a2[4] - a2[3]);
      }
      uint64_t v16 = (uint64_t *)*v6;
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (uint64_t **)*a2;
      uint64_t v6 = v16;
      if (!v16) {
        goto LABEL_5;
      }
    }
    do
    {
      uint64_t v17 = (uint64_t *)*v6;
      unint64_t v18 = (void *)v6[3];
      if (v18)
      {
        void v6[4] = (uint64_t)v18;
        operator delete(v18);
      }
      operator delete(v6);
      uint64_t v6 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      unint64_t v7 = operator new(0x30uLL);
      *unint64_t v7 = 0;
      v7[1] = 0;
      unint64_t v8 = (unint64_t)a2[2];
      v7[3] = 0;
      v7[2] = v8;
      v7[4] = 0;
      v7[5] = 0;
      unint64_t v10 = a2[3];
      uint64_t v9 = a2[4];
      int64_t v11 = (char *)v9 - (char *)v10;
      if (v9 != v10)
      {
        if (v11 < 0) {
          abort();
        }
        uint64_t v12 = (char *)operator new((char *)v9 - (char *)v10);
        v7[3] = v12;
        v7[4] = v12;
        uint64_t v13 = &v12[8 * (v11 >> 3)];
        v7[5] = v13;
        memcpy(v12, v10, v11);
        v7[4] = v13;
      }
      unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v14 >> 47) ^ v14);
      v7[1] = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)a1, v7);
      a2 = (uint64_t **)*a2;
    }
  }
}

void sub_1A1DA4BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1DA4BD4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      abort();
    uint64_t v13 = v12;
    double result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    double result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      size_t prime = v13;
    }
    else {
      size_t prime = v12;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_105;
    }
    if (prime >= v8) {
      goto LABEL_40;
    }
    unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      unint64_t v28 = std::__next_prime(v28);
    }
    else
    {
      uint64_t v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2) {
        unint64_t v28 = v30;
      }
    }
    if (prime <= v28) {
      size_t prime = v28;
    }
    if (prime >= v8)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v15 = operator new(8 * prime);
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = v15;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v17++) = 0;
      while (prime != v17);
      uint64_t v19 = a1 + 16;
      unint64_t v18 = *(void **)(a1 + 16);
      if (v18)
      {
        size_t v20 = v18[1];
        size_t v21 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v20 >= prime) {
            v20 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v2CGContextBeginTransparencyLayer(this[1], 0) = v19;
          for (uint64_t i = (void *)*v18; *v18; uint64_t i = (void *)*v18)
          {
            size_t v40 = i[1];
            if (v40 >= prime) {
              v40 %= prime;
            }
            if (v40 == v20)
            {
              unint64_t v18 = i;
            }
            else
            {
              int v41 = i;
              if (*(void *)(*(void *)a1 + 8 * v40))
              {
                do
                {
                  uint64_t v42 = v41;
                  int v41 = (void *)*v41;
                }
                while (v41 && i[2] == v41[2]);
                *unint64_t v18 = v41;
                uint64_t v43 = 8 * v40;
                *uint64_t v42 = **(void **)(*(void *)a1 + v43);
                **(void **)(*(void *)a1 + v43) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v4CGContextBeginTransparencyLayer(this[1], 0) = v18;
                unint64_t v18 = i;
                size_t v20 = v40;
              }
            }
          }
        }
        else
        {
          size_t v22 = v20 & v21;
          *(void *)(*(void *)a1 + 8 * v22) = v19;
          for (uint64_t j = (void *)*v18; *v18; uint64_t j = (void *)*v18)
          {
            size_t v24 = j[1] & v21;
            if (v24 == v22)
            {
              unint64_t v18 = j;
            }
            else
            {
              unint64_t v25 = j;
              if (*(void *)(*(void *)a1 + 8 * v24))
              {
                do
                {
                  uint64_t v26 = v25;
                  unint64_t v25 = (void *)*v25;
                }
                while (v25 && j[2] == v25[2]);
                *unint64_t v18 = v25;
                uint64_t v27 = 8 * v24;
                *uint64_t v26 = **(void **)(*(void *)a1 + v27);
                **(void **)(*(void *)a1 + v27) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v24) = v18;
                unint64_t v18 = j;
                size_t v22 = v24;
              }
            }
          }
        }
      }
      unint64_t v8 = prime;
    }
    else
    {
      uint64_t v53 = *(void **)a1;
      *(void *)a1 = 0;
      if (v53) {
        operator delete(v53);
      }
      unint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] >= 2uLL)
  {
    unint64_t v44 = v7;
    if (v8 <= v7) {
      unint64_t v44 = v7 % v8;
    }
    uint64_t v45 = *(void **)(*(void *)a1 + 8 * v44);
    if (!v45)
    {
      unint64_t v38 = 0;
      unint64_t v51 = a2[1];
      if (v51 < v8) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    int v46 = 0;
    do
    {
      unint64_t v38 = v45;
      uint64_t v45 = (void *)*v45;
      if (!v45) {
        break;
      }
      unint64_t v49 = v45[1];
      unint64_t v50 = v49;
      if (v49 >= v8) {
        unint64_t v50 = v49 % v8;
      }
      if (v50 != v44) {
        break;
      }
      BOOL v47 = v49 == v7 && v45[2] == a2[2];
      int v48 = v46 & !v47;
      v46 |= v47;
    }
    while (v48 != 1);
  }
  else
  {
    uint64_t v33 = (v8 - 1) & v7;
    uint64_t v34 = *(void **)(*(void *)a1 + 8 * v33);
    if (!v34)
    {
      unint64_t v38 = 0;
      unint64_t v51 = a2[1];
      goto LABEL_75;
    }
    int v35 = 0;
    do
    {
      unint64_t v38 = v34;
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        break;
      }
      uint64_t v39 = v34[1];
      if ((v39 & (v8 - 1)) != v33) {
        break;
      }
      BOOL v36 = v39 == v7 && v34[2] == a2[2];
      char v37 = v35 & !v36;
      v35 |= v36;
    }
    while ((v37 & 1) == 0);
  }
  unint64_t v51 = a2[1];
  if (v32.u32[0] <= 1uLL)
  {
LABEL_75:
    v51 &= v8 - 1;
    goto LABEL_78;
  }
  if (v51 >= v8) {
LABEL_77:
  }
    v51 %= v8;
LABEL_78:
  if (!v38)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v51) = a1 + 16;
    if (!*a2) {
      goto LABEL_92;
    }
    unint64_t v52 = *(void *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8) {
        v52 %= v8;
      }
    }
    else
    {
      v52 &= v8 - 1;
    }
LABEL_91:
    *(void *)(*(void *)a1 + 8 * v52) = a2;
    goto LABEL_92;
  }
  *a2 = *v38;
  *unint64_t v38 = a2;
  if (*a2)
  {
    unint64_t v52 = *(void *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8) {
        v52 %= v8;
      }
    }
    else
    {
      v52 &= v8 - 1;
    }
    if (v52 != v51) {
      goto LABEL_91;
    }
  }
LABEL_92:
  ++*(void *)(a1 + 24);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~sparse_map(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[7];
    unint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            unint64_t v8 = (void *)*v5;
            float v9 = (void *)v5[3];
            if (v9)
            {
              v5[4] = v9;
              operator delete(v9);
            }
            operator delete(v5);
            unint64_t v5 = v8;
          }
          while (v8);
        }
        unint64_t v7 = (void *)*(v3 - 5);
        v3 -= 5;
        unint64_t v6 = v7;
        void *v3 = 0;
        if (v7) {
          operator delete(v6);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  float v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  BOOL v11 = (void *)*a1;
  if (*a1)
  {
    unint64_t v12 = (void *)a1[1];
    unint64_t v13 = (void *)*a1;
    if (v12 != v11)
    {
      do
      {
        uint64_t v15 = *--v12;
        uint64_t v14 = v15;
        *unint64_t v12 = 0;
        if (v15) {
          MEMORY[0x1A6239270](v14, 0x1000C40104B78CFLL);
        }
      }
      while (v12 != v11);
      unint64_t v13 = (void *)*a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<std::unordered_map<gdc::Registry *,std::vector<gdc::Entity>>>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x1B9039CBDAB12E5CLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::DrapingContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::DrapingContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555438;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1020C40D090CC53);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::DrapingContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555438;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1020C40D090CC53);
  }
  return a1;
}

void md::DrapingLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)a2, "DrapingLogic");
  *(_WORD *)(a2 + 23) = 12;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v4 = *(unsigned int *)(v3 + 52);
  char v19 = 13;
  strcpy(v18, "Pending Tasks");
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 1;
  uint64_t v14 = 0;
  uint64_t v13 = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v18, (uint64_t)v12);
  uint64_t v5 = *(unsigned int *)(v3 + 48);
  char v19 = 15;
  strcpy(v18, "Cached Vertices");
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 1;
  uint64_t v8 = 0;
  uint64_t v7 = v5;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v18, (uint64_t)v6);
}

void md::DrapingLogic::~DrapingLogic(md::DrapingTaskScheduler **this)
{
  md::DrapingLogic::~DrapingLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  md::DrapingTaskScheduler **v2;
  md::DrapingTaskScheduler *v3;
  md::DrapingTaskScheduler *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  md::DrapingTaskScheduler *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;

  *this = (md::DrapingTaskScheduler *)&unk_1EF531340;
  uint64_t v2 = this + 21;
  md::DrapingTaskScheduler::reset(this[21]);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)(this + 48));
  uint64_t v3 = this[45];
  if (v3)
  {
    this[46] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[42];
  if (v4)
  {
    this[43] = v4;
    operator delete(v4);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)(this + 36));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[37]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[33]);
  if (*((unsigned char *)this + 232)) {
    *((unsigned char *)this + 232) = 0;
  }
  uint64_t v5 = (std::__shared_weak_count *)this[25];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[23];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7)
  {
    md::DrapingTaskScheduler::~DrapingTaskScheduler(v7);
    MEMORY[0x1A6239270]();
  }
  uint64_t v8 = (std::__shared_weak_count *)this[20];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)this[18];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)this[16];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *this = (md::DrapingTaskScheduler *)off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

void sub_1A1DA5ABC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 296));
  _Unwind_Resume(a1);
}

void sub_1A1DA5AD0(_Unwind_Exception *a1)
{
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)(v1 + 48));
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)(v1 + 42));
  gdc::FallbackCollector::~FallbackCollector((gdc::FallbackCollector *)(v1 + 29));
  uint64_t v4 = (std::__shared_weak_count *)v1[25];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[23];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::unique_ptr<md::DrapingTaskScheduler>::~unique_ptr[abi:nn180100](v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 19));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 17));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 15));
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    GEOConfigRemoveBlockListener();
    uint64_t v2 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == a1 + 48)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 32))(a1 + 48);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
LABEL_9:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_11:

  return a1;
}

void sub_1A1DA5C34(_Unwind_Exception *a1)
{
  std::function<void ()(BOOL)>::~function((void *)(v1 + 48));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 32);

  _Unwind_Resume(a1);
}

void geo::Pool<gdc::FallbackNode>::disposeElements(uint64_t a1)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = &v31;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v31;
      uint64_t v5 = &v31;
      if (v31)
      {
        uint64_t v6 = v31;
        while (1)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        std::__shared_weak_count *v4 = v8;
        if (*v30)
        {
          uint64_t v30 = (uint64_t **)*v30;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v31, v8);
        uint64_t v3 = ++v32;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  int v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_50;
    }
    goto LABEL_52;
  }
  unint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        int v17 = (void *)(v16 + 104 * v15);
        unint64_t v18 = v31;
        if (!v31) {
          goto LABEL_38;
        }
        char v19 = &v31;
        do
        {
          size_t v20 = v18;
          size_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            char v19 = (uint64_t **)v20;
          }
          unint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v31) {
          goto LABEL_38;
        }
        if (v22 < (unint64_t)v17) {
          size_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_38:
          size_t v24 = (std::__shared_weak_count *)v17[12];
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          unint64_t v25 = (void *)v17[1];
          if (v25 != (void *)v17[3]) {
            free(v25);
          }
        }
        ++v15;
        unint64_t v14 = *(void *)(a1 + 24);
      }
      while (v15 < v14);
    }
    uint64_t v26 = (void *)v10[1];
    if (v26)
    {
      do
      {
        uint64_t v27 = v26;
        uint64_t v26 = (void *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        uint64_t v27 = (void *)v10[2];
        BOOL v12 = *v27 == (void)v10;
        uint64_t v10 = v27;
      }
      while (!v12);
    }
    uint64_t v10 = v27;
  }
  while (v27 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_52:
      free((void *)v10[4]);
      unint64_t v28 = (void *)v10[1];
      if (v28)
      {
        do
        {
          uint8x8_t v29 = v28;
          unint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint8x8_t v29 = (void *)v10[2];
          BOOL v12 = *v29 == (void)v10;
          uint64_t v10 = v29;
        }
        while (!v12);
      }
      uint64_t v10 = v29;
    }
    while (v29 != v11);
  }
LABEL_50:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v31);
}

void sub_1A1DA5F14(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::TileAdjustmentHelpers::~TileAdjustmentHelpers(md::TileAdjustmentHelpers *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void gdc::FallbackCollector::~FallbackCollector(gdc::FallbackCollector *this)
{
  if (*(unsigned char *)this) {
    *(unsigned char *)this = 0;
  }
}

void sub_1A1DA5FB4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 64));
  _Unwind_Resume(a1);
}

md::DrapingTaskScheduler **std::unique_ptr<md::DrapingTaskScheduler>::~unique_ptr[abi:nn180100](md::DrapingTaskScheduler **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::DrapingTaskScheduler::~DrapingTaskScheduler(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void *std::function<void ()(BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<md::components::MeshInstance *,std::shared_ptr<md::components::MeshInstance>::__shared_ptr_default_delete<md::components::MeshInstance,md::components::MeshInstance>,std::allocator<md::components::MeshInstance>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::components::MeshInstance *,std::shared_ptr<md::components::MeshInstance>::__shared_ptr_default_delete<md::components::MeshInstance,md::components::MeshInstance>,std::allocator<md::components::MeshInstance>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D5F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57D5F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<md::Mesh *,std::shared_ptr<md::Mesh>::__shared_ptr_default_delete<md::Mesh,md::Mesh>,std::allocator<md::Mesh>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 72);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::Mesh *,std::shared_ptr<md::Mesh>::__shared_ptr_default_delete<md::Mesh,md::Mesh>,std::allocator<md::Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos4Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos4Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *___ZN2md11MonitorableINS_11ConfigValueI16GEOConfigKeyBOOLbEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNSt3__18functionIFvbEEE_block_invoke(void *result)
{
  uint64_t v1 = (unsigned char *)result[5];
  if (v1)
  {
    uint64_t v2 = result[4];
    if (*v1)
    {
      char v3 = *(unsigned char *)(v2 + 16);
      if (*(void *)v2) {
        BOOL v4 = *(void *)(v2 + 8) == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4) {
        *(unsigned char *)(v2 + 16) = GEOConfigGetBOOL();
      }
      __n128 result = *(void **)(v2 + 72);
      if (result)
      {
        char v5 = v3;
        return (void *)(*(uint64_t (**)(void *, char *))(*result + 48))(result, &v5);
      }
    }
  }
  return result;
}

void __destroy_helper_block_ea8_40c40_ZTSNSt3__110shared_ptrINS_6atomicIbEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<std::atomic<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::atomic<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::ElevatedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::ElevatedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::ElevatedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 20CGContextBeginTransparencyLayer(this[1], 0) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 12CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8CGContextBeginTransparencyLayer(this[1], 0) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      char v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const* const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    BOOL v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_34;
    }
    if (prime < v10)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v10) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *uint64_t v16 = *v27;
LABEL_58:
    *uint64_t v27 = v16;
    goto LABEL_59;
  }
  *uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v28 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A1DA6C60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ComposedRoadEdge::walkEdges(uint64_t result, char a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    BOOL v4 = (void *)result;
    unint64_t v5 = ((uint64_t)(*(void *)(result + 32) - *(void *)(result + 24)) >> 3) - 1;
    if (a2)
    {
      unint64_t v6 = 0;
      if ((uint64_t)(*(void *)(result + 32) - *(void *)(result + 24)) >> 3 == 1) {
        uint64_t v7 = -1;
      }
      else {
        uint64_t v7 = 1;
      }
      unint64_t v8 = v7 + v5;
      do
      {
        if (v8 == v6) {
          break;
        }
        uint64_t v9 = *(void *)(*v4 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6;
        uint64_t v16 = *(void *)(v4[3] + 8 * v6);
        BOOL v15 = v9 & 1;
        uint64_t v10 = *(void *)(a3 + 24);
        if (!v10) {
          goto LABEL_15;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, BOOL *))(*(void *)v10 + 48))(v10, &v16, &v15);
        v6 += v7;
      }
      while ((result & 1) != 0);
    }
    else
    {
      while (v5 != -1)
      {
        BOOL v11 = ((*(void *)(*v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0;
        uint64_t v16 = *(void *)(v4[3] + 8 * v5);
        BOOL v15 = v11;
        uint64_t v12 = *(void *)(a3 + 24);
        if (!v12)
        {
LABEL_15:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::operator()(v13, v14);
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, BOOL *))(*(void *)v12 + 48))(v12, &v16, &v15);
        --v5;
        if ((result & 1) == 0) {
          return result;
        }
      }
    }
  }
  return result;
}

BOOL std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::operator()(uint64_t a1, md::MuninRoadEdge **a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  double v5 = md::MuninRoadEdge::edgeLengthInMeters(*a2);
  unint64_t v6 = **(md::MuninRoadEdge ***)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 24);
  double v8 = *v7;
  if (v6 == v3)
  {
    **(double **)(a1 + 16) = v8 / *(double *)(v4 + 144);
    uint64_t v9 = *(unsigned char **)(a1 + 48);
    **(double **)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = (*v7 + v5) / *(double *)(v4 + 144);
    *uint64_t v9 = 1;
  }
  else
  {
    *uint64_t v7 = v8 + v5;
  }
  return v6 != v3;
}

__n128 std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DA28;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF57DA28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4CGContextBeginTransparencyLayer(this[1], 0) = result;
  return result;
}

void std::__function::__func<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0,std::allocator<md::ComposedRoadEdge::edgeRange(BOOL,md::MuninRoadEdge const*,double &,double &)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::~__func()
{
}

float64x2_t md::ComposedRoadEdge::walker(md::ComposedRoadEdge *this, uint64_t a2, char a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  *((_OWORD *)this + 1) = 0u;
  *((unsigned char *)this + 8) = a3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  v17[0] = &unk_1EF575828;
  v17[1] = this;
  float v18 = v17;
  md::ComposedRoadEdge::walkEdges(a2, a3, (uint64_t)v17);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  *((void *)this + 15) = *(void *)(*(void *)this + 144);
  result.f64[0] = *((float64_t *)this + 14);
  if (result.f64[0] >= 0.0)
  {
    uint64_t v5 = *((void *)this + 8);
    uint64_t v6 = *((void *)this + 5);
    if (*(double *)(v6 + 56 * v5 + 48) >= result.f64[0])
    {
      uint64_t v7 = *(void *)(v6 + 56 * v5 + 24);
      uint64_t v8 = *(void *)(v6 + 56 * v5 + 32);
      uint64_t v9 = v8 - v7;
      if (v8 != v7)
      {
        uint64_t v10 = 0;
        BOOL v11 = (void *)(v6 + 56 * v5);
        uint64_t v12 = v9 >> 3;
        if ((unint64_t)(v9 >> 3) <= 1) {
          uint64_t v12 = 1;
        }
        double v13 = 0.0;
        while (1)
        {
          double v14 = *(double *)(v7 + 8 * v10);
          if (v14 + v13 >= result.f64[0]) {
            break;
          }
          ++v10;
          double v13 = v14 + v13;
          if (v12 == v10) {
            return result;
          }
        }
        BOOL v15 = (float64x2_t *)(*v11 + 16 * v10);
        *((float64x2_t *)this + 5) = vmlaq_n_f64(*v15, vsubq_f64(v15[1], *v15), (result.f64[0] - v13) / v14);
        float64x2_t v16 = vsubq_f64(v15[1], *v15);
        float64x2_t result = vmulq_n_f64(v16, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v16, v16))));
        *((float64x2_t *)this + 6) = result;
      }
    }
  }
  return result;
}

void sub_1A1DA70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v15)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    float v17 = (char *)v13[5];
    if (v17)
    {
LABEL_9:
      uint64_t v19 = (char *)v13[6];
      unint64_t v20 = v17;
      if (v19 != v17)
      {
        do
        {
          unint64_t v21 = (void *)*((void *)v19 - 4);
          if (v21)
          {
            *((void *)v19 - 3) = v21;
            operator delete(v21);
          }
          unint64_t v22 = (void *)*((void *)v19 - 7);
          if (v22)
          {
            *((void *)v19 - 6) = v22;
            operator delete(v22);
          }
          v19 -= 56;
        }
        while (v19 != v17);
        unint64_t v20 = (char *)v13[5];
      }
      v13[6] = v17;
      operator delete(v20);
      float v18 = *v14;
      if (*v14)
      {
LABEL_18:
        v13[3] = v18;
        operator delete(v18);
        _Unwind_Resume(a1);
      }
LABEL_7:
      _Unwind_Resume(a1);
    }
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
    float v17 = (char *)v13[5];
    if (v17) {
      goto LABEL_9;
    }
  }
  else
  {
    float v17 = (char *)v13[5];
    if (v17) {
      goto LABEL_9;
    }
  }
  float v18 = *v14;
  if (*v14) {
    goto LABEL_18;
  }
  goto LABEL_7;
}

double karo::Bounded::updateBounds(karo::Bounded *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  double v2 = *((double *)this + 5);
  double v3 = *((double *)this + 6);
  double v4 = *((double *)this + 7);
  double v5 = v2 + v2;
  double v6 = (v2 + v2) * v2;
  double v7 = (v3 + v3) * v3;
  uint64_t v9 = *((void *)this + 3);
  double v8 = *((double *)this + 4);
  double v10 = (v8 + v8) * v2;
  double v11 = (v3 + v3) * v4;
  double v12 = v3 * (v8 + v8);
  double v13 = 1.0 - (v8 + v8) * v8;
  double v14 = v5 * v3;
  v19[0] = 1.0 - (v6 + v7);
  v19[1] = v11 + v10;
  v19[4] = v10 - v11;
  v19[5] = v13 - v7;
  double v15 = v4 * (v8 + v8);
  v19[8] = v4 * v5 + v12;
  v19[9] = v14 - v15;
  void v19[2] = v12 - v4 * v5;
  v19[6] = v15 + v14;
  v19[10] = v13 - v6;
  void v19[3] = 0.0;
  v19[7] = 0.0;
  v19[11] = 0.0;
  long long v20 = *(_OWORD *)((char *)this + 8);
  uint64_t v21 = v9;
  uint64_t v22 = 0x3FF0000000000000;
  int64x2_t v23 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v24 = xmmword_1A28FC720;
  int64x2_t v25 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v26[0] = &unk_1EF57D5A8;
  v26[1] = &v23;
  v26[2] = v19;
  uint64_t v27 = v26;
  double v16 = gm::Box<double,3>::forEachCorner((uint64_t)this + 64, (uint64_t)v26);
  if (v27 == v26)
  {
    (*(void (**)(void *, double))(v26[0] + 32))(v26, v16);
  }
  else if (v27)
  {
    (*(void (**)(void *, double))(*v27 + 40))(v27, v16);
  }
  long long v17 = v24;
  *((int64x2_t *)this + 7) = v23;
  *((_OWORD *)this + 8) = v17;
  double result = *(double *)v25.i64;
  *((int64x2_t *)this + 9) = v25;
  return result;
}

__n128 std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D5A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1)
{
  double v2 = (char *)operator new(0x18uLL);
  *(void *)double v2 = &unk_1EF57D5A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::~__func()
{
}

uint64_t karo::Bounded::getLocalBounds(karo::Bounded *this)
{
  return (uint64_t)this + 64;
}

uint64_t karo::Bounded::getBounds(karo::Bounded *this)
{
  return (uint64_t)this + 112;
}

uint64_t karo::Bounded::setBounds(void *a1, void *a2, void *a3)
{
  a1[4] = a2[3];
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = a2[6];
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  a1[8] = *a3;
  a1[9] = a3[1];
  a1[10] = a3[2];
  a1[11] = a3[3];
  a1[12] = a3[4];
  a1[13] = a3[5];
  return (*(uint64_t (**)(void))(*a1 + 64))();
}

uint64_t karo::Bounded::setLocalBounds(void *a1, void *a2)
{
  a1[8] = *a2;
  a1[9] = a2[1];
  a1[10] = a2[2];
  a1[11] = a2[3];
  a1[12] = a2[4];
  a1[13] = a2[5];
  return (*(uint64_t (**)(void))(*a1 + 64))();
}

uint64_t karo::Oriented::getFrame(karo::Oriented *this)
{
  return (uint64_t)this + 8;
}

uint64_t karo::Bounded::setFrame(void *a1, void *a2)
{
  a1[4] = a2[3];
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = a2[6];
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  return (*(uint64_t (**)(void))(*a1 + 64))();
}

void altitude::Tile::~Tile(altitude::Tile *this)
{
  altitude::Tile::~Tile(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  altitude::Tile *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (***v13)(void);
  void (***v14)(void);
  void *v15;
  void (***v16)(void);
  void (***v17)(void);
  void (***v18)(void);
  void (**v19)(void);
  BOOL v20;

  *(void *)this = &unk_1EF56B2C8;
  double v3 = *((void *)this + 38);
  double v2 = *((void *)this + 39);
  if (v2 != v3)
  {
    double v4 = 0;
    double v5 = 1;
    do
    {
      double v6 = *(altitude::Tile **)(v3 + 32 * v4);
      if (v6)
      {
        altitude::Tile::removeChildTile(this, v6);
        double v3 = *((void *)this + 38);
        double v2 = *((void *)this + 39);
      }
      double v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 5);
  }
  double v7 = *((void *)this + 41);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  double v8 = *((void *)this + 42);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 43);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  double v10 = *((void *)this + 44);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  double v11 = *((void *)this + 45);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  double v12 = (void *)*((void *)this + 38);
  if (v12)
  {
    *((void *)this + 39) = v12;
    operator delete(v12);
  }
  double v13 = (void (***)(void))*((void *)this + 33);
  if (v13)
  {
    double v14 = (void (***)(void))*((void *)this + 34);
    double v15 = (void *)*((void *)this + 33);
    if (v14 != v13)
    {
      double v16 = v14 - 6;
      long long v17 = v14 - 6;
      float v18 = v14 - 6;
      do
      {
        uint64_t v19 = *v18;
        v18 -= 6;
        (*v19)(v17);
        v16 -= 6;
        long long v20 = v17 == v13;
        long long v17 = v18;
      }
      while (!v20);
      double v15 = (void *)*((void *)this + 33);
    }
    *((void *)this + 34) = v13;
    operator delete(v15);
  }
  *(void *)this = &unk_1EF5681C8;
}

void altitude::Tile::removeChildTile(altitude::Tile *this, altitude::Tile *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 38);
  uint64_t v4 = *((void *)this + 39) - v3;
  if (v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = v4 >> 5;
    unsigned int v8 = 1;
    while (1)
    {
      uint64_t v9 = 32 * v6;
      if (*(altitude::Tile **)(v3 + v9) == a2) {
        break;
      }
      unint64_t v6 = v8++;
      if (v7 <= v6) {
        goto LABEL_5;
      }
    }
    *((void *)a2 + 37) = 0;
    *(void *)(v3 + v9) = 0;
    uint64_t v12 = *((void *)this + 41);
    if (v12) {
      (*(void (**)(uint64_t, altitude::Tile *))(*(void *)v12 + 112))(v12, a2);
    }
    uint64_t v13 = *((void *)this + 42);
    if (v13) {
      (*(void (**)(uint64_t, altitude::Tile *))(*(void *)v13 + 112))(v13, a2);
    }
    uint64_t v14 = *((void *)this + 43);
    if (v14) {
      (*(void (**)(uint64_t, altitude::Tile *))(*(void *)v14 + 112))(v14, a2);
    }
    uint64_t v15 = *((void *)this + 44);
    if (v15) {
      (*(void (**)(uint64_t, altitude::Tile *))(*(void *)v15 + 112))(v15, a2);
    }
    uint64_t v16 = *((void *)this + 45);
    if (v16) {
      (*(void (**)(uint64_t, altitude::Tile *))(*(void *)v16 + 112))(v16, a2);
    }
    (*(void (**)(void, altitude::Tile *, altitude::Tile *))(**((void **)this + 53) + 40))(*((void *)this + 53), this, a2);
    long long v17 = *(void (**)(altitude::Tile *))(*(void *)a2 + 8);
    v17(a2);
  }
  else
  {
LABEL_5:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    double v10 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      altitude::Tile::createTileName(__p, (unsigned int *)a2 + 98, (uint64_t *)(*((void *)a2 + 36) + 40), (uint64_t *)(*((void *)a2 + 36) + 112));
      if (v19 >= 0) {
        double v11 = __p;
      }
      else {
        double v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v21 = v11;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_ERROR, "Trying to remove child that is not a child: %s", buf, 0xCu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

size_t altitude::Tile::createTileName(void *a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((unsigned __int8 *)a4 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a4[1];
  }
  if (v5 == 5)
  {
    if (v6 >= 0) {
      double v10 = a4;
    }
    else {
      double v10 = (uint64_t *)*a4;
    }
    if (*(_DWORD *)v10 == 1819308129 && *((unsigned char *)v10 + 4) == 101)
    {
      snprintf(__str, 0x400uLL, "%s&z=%d&x=%d&y=%d&h=0");
      goto LABEL_31;
    }
  }
  else if (v5 == 15)
  {
    if (v6 >= 0) {
      unint64_t v7 = a4;
    }
    else {
      unint64_t v7 = (void *)*a4;
    }
    if (*v7 == 0x756F7365726F6567 && *(void *)((char *)v7 + 7) == 0x6833635F65637275)
    {
      snprintf(__str, 0x400uLL, "%s_%i_%i_%i.c3h");
      goto LABEL_31;
    }
    if (*v7 == 0x756F7365726F6567 && *(void *)((char *)v7 + 7) == 0x6233635F65637275)
    {
      snprintf(__str, 0x400uLL, "%s_%i_%i_%i.c3b");
      goto LABEL_31;
    }
  }
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  snprintf(__str, 0x400uLL, "%s%i/%i/map_%i_%i_%i%s", v12, *a2);
LABEL_31:
  size_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v14 = result;
  if (result >= 0x17)
  {
    uint64_t v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v15 = result | 7;
    }
    uint64_t v16 = v15 + 1;
    long long v17 = operator new(v15 + 1);
    a1[1] = v14;
    a1[2] = v16 | 0x8000000000000000;
    *a1 = v17;
    a1 = v17;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result) {
      goto LABEL_39;
    }
  }
  size_t result = (size_t)memcpy(a1, __str, v14);
LABEL_39:
  *((unsigned char *)a1 + v14) = 0;
  return result;
}

uint64_t altitude::Tile::updateBoundsAltitude(altitude::Tile *this, float a2, float a3)
{
  float v4 = fminf(*((float *)this + 102), a2);
  *((float *)this + 102) = v4;
  float v5 = fmaxf(*((float *)this + 103), a3);
  *((float *)this + 103) = v5;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0x3FF0000000000000;
  altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)this + 98, (uint64_t)v8, (uint64_t)v7, v4, v5);
  return (*(uint64_t (**)(altitude::Tile *, _OWORD *, unsigned char *))(*(void *)this + 40))(this, v8, v7);
}

void altitude::Tile::computeGeocentricBoundsFromTileIndex(unsigned int *a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  unsigned int v8 = *a1;
  unsigned int v7 = a1[1];
  int v9 = a1[2];
  if (*a1) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v7 == 0;
  }
  if (v10 && v9 == 0)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(void *)(a2 + 48) = 0x3FF0000000000000;
    *(int64x2_t *)a3 = vdupq_n_s64(0xC158CBA800000000);
    *(_OWORD *)(a3 + 16) = xmmword_1A28FC730;
    *(int64x2_t *)(a3 + 32) = vdupq_n_s64(0x4158CBA800000000uLL);
  }
  else
  {
    if (v8 >= 0x1F) {
      char v12 = 31;
    }
    else {
      char v12 = *a1;
    }
    double v13 = (float)(a4 + (float)((float)(a5 - a4) * 0.5));
    int v14 = 1 << v8;
    double v133 = (double)v9;
    double v135 = (double)(int)((-1 << v12) + v7 + v14);
    double v136 = 1.0 / (double)v14;
    long double v15 = ((double)v9 + 0.5) * 6.28318531 * v136;
    long double v16 = exp((v135 + 0.5) * v136 * 6.28318531 + -3.14159265);
    double v17 = atan(v16) * 2.0 + -1.57079633;
    long double v18 = fmod(v15, 6.28318531);
    double v138 = fmod(v18 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v19 = __sincos_stret(v17);
    double v128 = v13;
    double v122 = 6378137.0 / sqrt(1.0 - v19.__sinval * v19.__sinval * 0.00669437999);
    double v20 = (v122 + v13) * v19.__cosval;
    __double2 v21 = __sincos_stret(v138);
    double v22 = v20 * v21.__cosval;
    double v23 = v20 * v21.__sinval;
    double v124 = v122 * 0.99330562;
    double v24 = (v122 * 0.99330562 + v13) * v19.__sinval;
    *(double *)a2 = v20 * v21.__cosval;
    *(double *)(a2 + 8) = v20 * v21.__sinval;
    *(double *)(a2 + 16) = v24;
    __double2 v25 = __sincos_stret(v17 * 0.5);
    double sinval = v25.__sinval;
    double v27 = (sinval + sinval) * v25.__cosval;
    double v28 = 1.0 - (sinval + sinval) * sinval;
    __double2 v29 = __sincos_stret(v138 * 0.5);
    double v30 = v29.__sinval / sqrt(v27 * v27 + v28 * v28);
    double v31 = v30 * v27;
    double v32 = v30 * v28;
    double v33 = -(v29.__cosval * v25.__sinval);
    double v34 = -(v32 * v25.__sinval - v31 * v25.__cosval);
    double v35 = v31 * v25.__sinval + v32 * v25.__cosval;
    *(double *)(a2 + 24) = v34;
    *(double *)(a2 + 32) = v33;
    *(double *)(a2 + 4CGContextBeginTransparencyLayer(this[1], 0) = v35;
    *(double *)(a2 + 48) = v25.__cosval * v29.__cosval;
    double v36 = -(v24 * v33 - v35 * v23) - (v24 * v33 - v35 * v23);
    double v37 = -(v35 * v22 - v34 * v24) - (v35 * v22 - v34 * v24);
    double v38 = -(v34 * v23 - v22 * v33) - (v34 * v23 - v22 * v33);
    double v134 = -(v20 * v21.__sinval + v37 * (v25.__cosval * v29.__cosval) + v38 * v34 - v36 * v35);
    double v137 = -(v24 + v36 * v33 + v38 * (v25.__cosval * v29.__cosval) - v37 * v34);
    double v139 = -(v20 * v21.__cosval + v36 * (v25.__cosval * v29.__cosval) + v37 * v35 - v38 * v33);
    double v39 = (v122 + a5) * v19.__cosval;
    double v40 = v39 * v21.__cosval;
    double v41 = v39 * v21.__sinval;
    double v123 = a5;
    double v42 = (v124 + a5) * v19.__sinval;
    double v43 = -(v42 * v33 - v41 * v35) - (v42 * v33 - v41 * v35);
    double v44 = -(v40 * v35 - v42 * v34) - (v40 * v35 - v42 * v34);
    double v45 = -(v41 * v34 - v40 * v33) - (v41 * v34 - v40 * v33);
    double v46 = v40 + v139 + v43 * (v25.__cosval * v29.__cosval) + v44 * v35 - v45 * v33;
    double v47 = v41 + v134 + v44 * (v25.__cosval * v29.__cosval) + v45 * v34 - v43 * v35;
    double v48 = v42 + v137 + v43 * v33 + v45 * (v25.__cosval * v29.__cosval) - v44 * v34;
    double v131 = fmin(v46, 1.79769313e308);
    double v125 = fmin(v47, 1.79769313e308);
    double v127 = fmax(v46, -1.79769313e308);
    double v120 = fmin(v48, 1.79769313e308);
    double v121 = fmax(v47, -1.79769313e308);
    double v113 = fmax(v48, -1.79769313e308);
    long double v49 = exp(v136 * 6.28318531 * v135 + -3.14159265);
    long double v50 = atan(v49);
    __double2 v51 = __sincos_stret(v50 * 2.0 + -1.57079633);
    double v52 = 6378137.0 / sqrt(1.0 - v51.__sinval * v51.__sinval * 0.00669437999);
    double v53 = (v52 + v128) * v51.__cosval;
    double v54 = v53 * v21.__cosval;
    double v55 = v53 * v21.__sinval;
    double v56 = (v128 + v52 * 0.99330562) * v51.__sinval;
    double v57 = -(v56 * v33 - v55 * v35) - (v56 * v33 - v55 * v35);
    double v58 = -(v54 * v35 - v56 * v34) - (v54 * v35 - v56 * v34);
    double v59 = -(v55 * v34 - v54 * v33) - (v55 * v34 - v54 * v33);
    double v60 = v54 + v139 + v57 * (v25.__cosval * v29.__cosval) + v58 * v35 - v59 * v33;
    double v61 = v55 + v134 + v58 * (v25.__cosval * v29.__cosval) + v59 * v34 - v57 * v35;
    double v62 = v56 + v137 + v57 * v33 + v59 * (v25.__cosval * v29.__cosval) - v58 * v34;
    double v118 = fmax(v127, v60);
    double v119 = fmin(v60, v131);
    double v116 = fmax(v121, v61);
    double v117 = fmin(v61, v125);
    double v114 = fmax(v113, v62);
    double v115 = fmin(v62, v120);
    long double v63 = exp(v136 * 6.28318531 * (v135 + 1.0) + -3.14159265);
    long double v64 = atan(v63);
    __double2 v65 = __sincos_stret(v64 * 2.0 + -1.57079633);
    unsigned int v66 = 0;
    double v67 = 6378137.0 / sqrt(1.0 - v65.__sinval * v65.__sinval * 0.00669437999);
    double v68 = (v67 + v128) * v65.__cosval;
    double v69 = v68 * v21.__cosval;
    double v70 = v68 * v21.__sinval;
    double v71 = (v128 + v67 * 0.99330562) * v65.__sinval;
    double v72 = -(v71 * v33 - v70 * v35) - (v71 * v33 - v70 * v35);
    double v73 = -(v69 * v35 - v71 * v34) - (v69 * v35 - v71 * v34);
    double v74 = -(v70 * v34 - v69 * v33) - (v70 * v34 - v69 * v33);
    double v75 = v69 + v139 + v72 * (v25.__cosval * v29.__cosval) + v73 * v35 - v74 * v33;
    double v126 = v25.__cosval * v29.__cosval;
    double v76 = v70 + v134 + v73 * (v25.__cosval * v29.__cosval) + v74 * v34 - v72 * v35;
    double v129 = v34;
    double v132 = v33;
    double v77 = v71 + v137 + v72 * v33 + v74 * (v25.__cosval * v29.__cosval) - v73 * v34;
    double v78 = fmin(v75, v119);
    double v79 = fmax(v118, v75);
    double v80 = fmin(v76, v117);
    double v81 = fmax(v116, v76);
    double v82 = fmin(v77, v115);
    double v83 = fmax(v114, v77);
    double v84 = a4;
    do
    {
      double v141 = v78;
      double v142 = v79;
      double v143 = v82;
      double v144 = v83;
      long double v85 = exp(((double)(v66 & 1) + v135) * v136 * 6.28318531 + -3.14159265);
      double v86 = atan(v85) * 2.0 + -1.57079633;
      long double v87 = fmod(((float)(v66 >> 1) + v133) * (v136 * 6.28318531), 6.28318531);
      double v88 = fmod(v87 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v89 = __sincos_stret(v86);
      double v90 = 6378137.0 / sqrt(v89.__sinval * v89.__sinval * -0.00669437999 + 1.0);
      double v91 = (v90 + v84) * v89.__cosval;
      __double2 v92 = __sincos_stret(v88);
      double v93 = (v90 * 0.99330562 + v84) * v89.__sinval;
      double v94 = -(v93 * v132 - v91 * v92.__sinval * v35);
      double v95 = -(v91 * v92.__cosval * v35 - v93 * v129);
      double v96 = -(v91 * v92.__sinval * v129 - v91 * v92.__cosval * v132);
      double v97 = v95 + v95;
      double v98 = v94 + v94;
      double v99 = v96 + v96;
      double v100 = v91 * v92.__sinval + v134 + v97 * v126 + v99 * v129 - v98 * v35;
      double v101 = v91 * v92.__cosval + v139 + v98 * v126 + v97 * v35 - v99 * v132;
      double v102 = v93 + v137 + v98 * v132 + v99 * v126 - v97 * v129;
      double v103 = (v90 + v123) * v89.__cosval;
      double v104 = v103 * v92.__cosval;
      double v105 = v103 * v92.__sinval;
      double v106 = (v90 * 0.99330562 + v123) * v89.__sinval;
      double v107 = -(v106 * v132 - v105 * v35) - (v106 * v132 - v105 * v35);
      double v108 = -(v104 * v35 - v106 * v129) - (v104 * v35 - v106 * v129);
      double v109 = -(v105 * v129 - v104 * v132) - (v105 * v129 - v104 * v132);
      double v110 = v104 + v139 + v107 * v126 + v108 * v35 - v109 * v132;
      double v111 = v105 + v134 + v108 * v126 + v109 * v129 - v107 * v35;
      double v112 = v106 + v137 + v107 * v132 + v109 * v126 - v108 * v129;
      double v78 = fmin(v110, fmin(v101, v141));
      double v79 = fmax(fmax(v142, v101), v110);
      double v80 = fmin(v111, fmin(v100, v80));
      double v81 = fmax(fmax(v81, v100), v111);
      double v82 = fmin(v112, fmin(v102, v143));
      double v83 = fmax(fmax(v144, v102), v112);
      ++v66;
    }
    while (v66 != 4);
    *(double *)a3 = v78;
    *(double *)(a3 + 8) = v80;
    *(double *)(a3 + 16) = v82;
    *(double *)(a3 + 24) = v79;
    *(double *)(a3 + 32) = v81;
    *(double *)(a3 + 4CGContextBeginTransparencyLayer(this[1], 0) = v83;
  }
}

BOOL altitude::Tile::hasLoadedData(altitude::Tile *this)
{
  uint64_t v2 = *((void *)this + 41);
  if (v2)
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2) ^ 1;
    uint64_t v4 = *((void *)this + 42);
    if (!v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v3 = 0;
  uint64_t v4 = *((void *)this + 42);
  if (v4) {
LABEL_3:
  }
    v3 += (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) ^ 1;
LABEL_4:
  uint64_t v5 = *((void *)this + 43);
  if (v5) {
    v3 += (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5) ^ 1;
  }
  uint64_t v6 = *((void *)this + 44);
  if (v6) {
    v3 += (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6) ^ 1;
  }
  uint64_t v7 = *((void *)this + 45);
  if (v7) {
    v3 += (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) ^ 1;
  }
  return v3 == 0;
}

uint64_t altitude::Tile::needsFallbackData(altitude::Tile *this)
{
  uint64_t v2 = *((void *)this + 41);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
    uint64_t v4 = *((void *)this + 42);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + 42);
    if (!v4) {
      goto LABEL_6;
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 64))(v4)) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v3;
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 43);
  if (v5)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 64))(v5)) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = v3;
    }
  }
  uint64_t v6 = *((void *)this + 44);
  if (v6)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 64))(v6)) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = v3;
    }
  }
  uint64_t v7 = *((void *)this + 45);
  if (v7)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 64))(v7)) {
      return 1;
    }
    else {
      return v3;
    }
  }
  return v3;
}

uint64_t altitude::Tile::propagateChildBounds(uint64_t this, altitude::Tile *a2, float a3, float a4)
{
  if (this)
  {
    uint64_t v6 = this;
    while (*(_DWORD *)(v6 + 392) >= 4u)
    {
      float v10 = *(float *)(v6 + 412);
      if (v10 < a4)
      {
        float v7 = *(float *)(v6 + 408);
      }
      else
      {
        float v7 = *(float *)(v6 + 408);
        if (v7 <= a3) {
          return this;
        }
      }
      float v8 = fminf(v7, a3);
      *(float *)(v6 + 408) = v8;
      float v9 = fmaxf(v10, a4);
      *(float *)(v6 + 412) = v9;
      memset(v12, 0, sizeof(v12));
      uint64_t v13 = 0x3FF0000000000000;
      altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)(v6 + 392), (uint64_t)v12, (uint64_t)v11, v8, v9);
      this = (*(uint64_t (**)(uint64_t, _OWORD *, unsigned char *))(*(void *)v6 + 40))(v6, v12, v11);
      uint64_t v6 = *(void *)(v6 + 296);
      if (!v6) {
        return this;
      }
    }
  }
  return this;
}

uint64_t altitude::Tile::isPoleTile(char **a1)
{
  char v1 = *((unsigned char *)a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v2 = (uint64_t)a1[1];
  }
  if (v1 >= 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = *a1;
  }
  uint64_t v4 = &v3[v2];
  if (v2 >= 9)
  {
    uint64_t v6 = v3;
    uint64_t v7 = v2;
    float v8 = v3;
    while (1)
    {
      float v9 = (char *)memchr(v8, 115, v7 - 8);
      if (!v9)
      {
LABEL_16:
        uint64_t v5 = &v3[v2];
        break;
      }
      uint64_t v5 = v9;
      if (*(void *)v9 == 0x6C6F706874756F73 && v9[8] == 101) {
        break;
      }
      float v8 = v9 + 1;
      uint64_t v7 = v4 - (v5 + 1);
      if (v7 <= 8) {
        goto LABEL_16;
      }
    }
    do
    {
      double v11 = (char *)memchr(v6, 110, v2 - 8);
      if (!v11) {
        break;
      }
      if (*(void *)v11 == 0x6C6F706874726F6ELL && v11[8] == 101) {
        goto LABEL_24;
      }
      uint64_t v6 = v11 + 1;
      uint64_t v2 = v4 - (v11 + 1);
    }
    while (v2 > 8);
  }
  else
  {
    uint64_t v5 = &v3[v2];
  }
  double v11 = v4;
LABEL_24:
  BOOL v14 = v5 != v4 && v5 - v3 != -1;
  return v11 != v4 && v11 - v3 != -1 || v14;
}

uint64_t altitude::Tile::createClipPlanes(uint64_t a1, double *a2, double a3)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unint64_t v6 = 0;
  double v7 = *(double *)(v5 + 16);
  double v8 = *(double *)(v5 + 40) - v7;
  double v9 = fmax(v8, 0.0) * a3;
  double v10 = v7 + (v8 - v9) * 0.5;
  double v11 = v10 + v9;
  float64x2_t v12 = vsubq_f64(*(float64x2_t *)(v5 + 24), *(float64x2_t *)v5);
  float64x2_t v13 = vmulq_n_f64(vmaxnmq_f64(v12, (float64x2_t)0), a3);
  __asm { FMOV            V5.2D, #0.5 }
  float64x2_t v19 = vmlaq_f64(*(float64x2_t *)v5, _Q5, vsubq_f64(v12, v13));
  float64x2_t v148 = vaddq_f64(v19, v13);
  double v149 = v11;
  v13.f64[0] = v148.f64[0];
  v13.f64[1] = v19.f64[1];
  float64x2_t v154 = v19;
  float64x2_t v162 = v19;
  v19.f64[1] = v148.f64[1];
  float64x2_t v150 = v19;
  double v151 = v11;
  float64x2_t v152 = v13;
  double v153 = v11;
  double v155 = v11;
  float64x2_t v156 = v148;
  double v157 = v10;
  float64x2_t v158 = v19;
  double v159 = v10;
  float64x2_t v160 = v13;
  double v161 = v10;
  double v163 = v10;
  do
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    __double2 v21 = (float64x2_t *)((char *)&v148 + v6);
    _Q1 = *(int8x16_t *)(result + 24);
    float64x2_t v23 = *(float64x2_t *)(result + 40);
    float64x2_t v24 = *(float64x2_t *)((char *)&v148 + v6);
    float64x2_t v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
    float64x2_t v26 = (float64x2_t)vextq_s8(_Q1, _Q1, 8uLL);
    v25.f64[0] = *(float64_t *)((char *)&v148 + v6 + 16);
    v27.f64[0] = v26.f64[0];
    v27.f64[1] = v148.f64[v6 / 8 + 1];
    float64x2_t v28 = vmulq_f64(v25, v27);
    v27.f64[1] = v26.f64[1];
    v27.f64[0] = *(float64_t *)(result + 40);
    int8x16_t v29 = (int8x16_t)vmulq_f64(v24, v27);
    float64x2_t v30 = vaddq_f64(*(float64x2_t *)result, v24);
    v28.f64[0] = vsubq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1)).f64[0];
    v24.f64[1] = *(float64_t *)((char *)&v148 + v6 + 16);
    float64x2_t v31 = vmlsq_f64((float64x2_t)vextq_s8(v29, v29, 8uLL), v26, v24);
    _D0 = v28.f64[0] + v28.f64[0];
    float64x2_t v33 = vaddq_f64(v31, v31);
    float64x2_t v34 = vmulq_f64(v33, v26);
    v26.f64[1] = *(float64_t *)(result + 48);
    int8x16_t v35 = (int8x16_t)vmulq_n_f64(v23, _D0);
    __asm { FMLS            D7, D0, V1.D[1] }
    *__double2 v21 = vmlsq_f64(vmlaq_f64(vaddq_f64(v30, (float64x2_t)vextq_s8(v35, v35, 8uLL)), v26, v33), v27, (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL));
    v21[1].f64[0] = _D7 + v34.f64[1] + vmulq_laneq_f64(v33, v23, 1).f64[0];
    v6 += 24;
  }
  while (v6 != 192);
  double v37 = v157;
  double v38 = v158.f64[0];
  double v40 = v161;
  double v39 = v162.f64[0];
  double v41 = v158.f64[1];
  double v42 = v159;
  double v44 = v162.f64[1];
  double v43 = v163;
  double v45 = 1.0
      / sqrt((v158.f64[0] - v162.f64[0]) * (v158.f64[0] - v162.f64[0])+ (v158.f64[1] - v162.f64[1]) * (v158.f64[1] - v162.f64[1])+ (v159 - v163) * (v159 - v163));
  double v46 = v45 * (v158.f64[0] - v162.f64[0]);
  double v47 = v45 * (v158.f64[1] - v162.f64[1]);
  double v48 = v45 * (v159 - v163);
  double v49 = v149;
  float64x2_t v51 = v150;
  double v50 = v151;
  double v52 = 1.0
      / sqrt((v150.f64[0] - v162.f64[0]) * (v150.f64[0] - v162.f64[0])+ (v150.f64[1] - v162.f64[1]) * (v150.f64[1] - v162.f64[1])+ (v151 - v163) * (v151 - v163));
  double v53 = v52 * (v150.f64[0] - v162.f64[0]);
  double v54 = v52 * (v150.f64[1] - v162.f64[1]);
  double v55 = v52 * (v151 - v163);
  double v56 = -(v54 * v48 - v55 * v47);
  double v57 = -(v55 * v46 - v53 * v48);
  double v58 = -(v53 * v47 - v54 * v46);
  double v59 = 1.0 / sqrt(v56 * v56 + v57 * v57 + v58 * v58);
  double v60 = v59 * v56;
  double v61 = v59 * v57;
  double v62 = v59 * v58;
  double v63 = -(v59 * v56 * v162.f64[0] + v61 * v162.f64[1] + v62 * v163);
  *a2 = v60;
  a2[1] = v61;
  a2[2] = v62;
  a2[3] = v63;
  float64x2_t v64 = v156;
  double v65 = 1.0
      / sqrt((v156.f64[0] - v38) * (v156.f64[0] - v38)+ (v156.f64[1] - v41) * (v156.f64[1] - v41)+ (v37 - v42) * (v37 - v42));
  double v66 = v65 * (v156.f64[0] - v38);
  double v67 = v65 * (v156.f64[1] - v41);
  double v68 = v65 * (v37 - v42);
  float64x2_t v69 = v148;
  double v70 = 1.0
      / sqrt((v148.f64[0] - v38) * (v148.f64[0] - v38)+ (v148.f64[1] - v41) * (v148.f64[1] - v41)+ (v49 - v42) * (v49 - v42));
  double v71 = v70 * (v148.f64[0] - v38);
  double v72 = v70 * (v148.f64[1] - v41);
  double v73 = v70 * (v49 - v42);
  double v74 = -(v72 * v68 - v73 * v67);
  double v75 = -(v73 * v66 - v71 * v68);
  double v76 = -(v71 * v67 - v72 * v66);
  double v77 = 1.0 / sqrt(v74 * v74 + v75 * v75 + v76 * v76);
  double v78 = v77 * v75;
  double v79 = v77 * v76;
  a2[4] = v77 * v74;
  a2[5] = v78;
  a2[6] = v79;
  a2[7] = -(v77 * v74 * v38 + v78 * v41 + v79 * v42);
  double v81 = v160.f64[1];
  double v80 = v160.f64[0];
  double v82 = 1.0
      / sqrt((v160.f64[0] - v64.f64[0]) * (v160.f64[0] - v64.f64[0])+ (v160.f64[1] - v64.f64[1]) * (v160.f64[1] - v64.f64[1])+ (v40 - v37) * (v40 - v37));
  double v83 = v82 * (v160.f64[0] - v64.f64[0]);
  double v84 = v82 * (v160.f64[1] - v64.f64[1]);
  double v85 = v82 * (v40 - v37);
  double v86 = v154.f64[0];
  double v87 = 1.0
      / sqrt((v152.f64[0] - v64.f64[0]) * (v152.f64[0] - v64.f64[0])+ (v152.f64[1] - v64.f64[1]) * (v152.f64[1] - v64.f64[1])+ (v153 - v37) * (v153 - v37));
  double v88 = v87 * (v152.f64[0] - v64.f64[0]);
  double v89 = v87 * (v152.f64[1] - v64.f64[1]);
  double v90 = v87 * (v153 - v37);
  double v91 = -(v89 * v85 - v90 * v84);
  double v92 = -(v90 * v83 - v88 * v85);
  double v93 = -(v88 * v84 - v89 * v83);
  double v94 = 1.0 / sqrt(v91 * v91 + v92 * v92 + v93 * v93);
  double v95 = v94 * v92;
  double v96 = v94 * v93;
  a2[8] = v94 * v91;
  a2[9] = v95;
  a2[10] = v96;
  a2[11] = -(v94 * v91 * v64.f64[0] + v95 * v64.f64[1] + v96 * v37);
  double v97 = 1.0 / sqrt((v39 - v80) * (v39 - v80) + (v44 - v81) * (v44 - v81) + (v43 - v40) * (v43 - v40));
  double v98 = v97 * (v39 - v80);
  double v99 = v97 * (v44 - v81);
  double v100 = v97 * (v43 - v40);
  double v101 = v154.f64[1];
  double v102 = v155;
  double v103 = 1.0 / sqrt((v86 - v80) * (v86 - v80) + (v154.f64[1] - v81) * (v154.f64[1] - v81) + (v155 - v40) * (v155 - v40));
  double v104 = v103 * (v86 - v80);
  double v105 = v103 * (v154.f64[1] - v81);
  double v106 = v103 * (v155 - v40);
  double v107 = -(v105 * v100 - v106 * v99);
  double v108 = -(v106 * v98 - v104 * v100);
  double v109 = -(v104 * v99 - v105 * v98);
  double v110 = 1.0 / sqrt(v107 * v107 + v108 * v108 + v109 * v109);
  double v111 = v110 * v108;
  double v112 = v110 * v109;
  a2[12] = v110 * v107;
  a2[13] = v111;
  a2[14] = v112;
  a2[15] = -(v110 * v107 * v80 + v111 * v81 + v112 * v40);
  double v113 = v50 - v102;
  double v114 = 1.0 / sqrt((v51.f64[0] - v86) * (v51.f64[0] - v86) + (v51.f64[1] - v101) * (v51.f64[1] - v101) + v113 * v113);
  double v115 = v114 * (v51.f64[0] - v86);
  double v116 = v114 * (v51.f64[1] - v101);
  double v117 = v114 * v113;
  double v118 = v49 - v102;
  double v119 = 1.0 / sqrt((v69.f64[0] - v86) * (v69.f64[0] - v86) + (v69.f64[1] - v101) * (v69.f64[1] - v101) + v118 * v118);
  double v120 = v119 * (v69.f64[0] - v86);
  double v121 = v119 * (v69.f64[1] - v101);
  double v122 = v119 * v118;
  double v123 = -(v121 * v117 - v122 * v116);
  double v124 = -(v122 * v115 - v120 * v117);
  double v125 = -(v120 * v116 - v121 * v115);
  double v126 = 1.0 / sqrt(v123 * v123 + v124 * v124 + v125 * v125);
  double v127 = v126 * v124;
  double v128 = v126 * v125;
  a2[16] = v126 * v123;
  a2[17] = v127;
  a2[18] = v128;
  a2[19] = -(v126 * v123 * v86 + v127 * v101 + v128 * v102);
  double v129 = v80 - v39;
  double v130 = v40 - v43;
  double v131 = 1.0 / sqrt(v129 * v129 + (v81 - v44) * (v81 - v44) + v130 * v130);
  double v132 = v131 * v129;
  double v133 = v131 * (v81 - v44);
  double v134 = v131 * v130;
  double v135 = v37 - v43;
  double v136 = 1.0 / sqrt((v64.f64[0] - v39) * (v64.f64[0] - v39) + (v64.f64[1] - v44) * (v64.f64[1] - v44) + v135 * v135);
  double v137 = v136 * (v64.f64[0] - v39);
  double v138 = v136 * (v64.f64[1] - v44);
  double v139 = v136 * v135;
  double v140 = -(v134 * v138 - v133 * v139);
  double v141 = -(v132 * v139 - v134 * v137);
  double v142 = -(v133 * v137 - v132 * v138);
  double v143 = 1.0 / sqrt(v140 * v140 + v141 * v141 + v142 * v142);
  double v144 = v143 * v140;
  double v145 = v143 * v141;
  double v146 = v143 * v142;
  a2[20] = v144;
  a2[21] = v145;
  a2[22] = v146;
  a2[23] = -(v144 * v39 + v145 * v44 + v146 * v43);
  return result;
}

uint64_t *std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v32[7] = v3;
    v32[8] = v4;
    unint64_t v6 = a2;
    uint64_t v7 = (uint64_t)result;
    double v8 = result + 1;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8);
      double v10 = v8;
      if (*(void **)v7 == v8) {
        goto LABEL_25;
      }
      double v11 = *(void **)(v7 + 8);
      float64x2_t v12 = v8;
      if (v9)
      {
        do
        {
          double v10 = v11;
          double v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          double v10 = (void *)v12[2];
          BOOL v13 = *v10 == (void)v12;
          float64x2_t v12 = v10;
        }
        while (v13);
      }
      BOOL v14 = (unsigned int *)v6 + 7;
      unsigned int v15 = *((_DWORD *)v10 + 11);
      unsigned int v16 = *((_DWORD *)v6 + 11);
      if (v15 == v16
        && *((_DWORD *)v10 + 12) == *((_DWORD *)v6 + 12)
        && *((_DWORD *)v10 + 13) == *((_DWORD *)v6 + 13)
        && *((_DWORD *)v6 + 14) == *((_DWORD *)v10 + 14))
      {
        unsigned int v17 = *((_DWORD *)v10 + 7);
        BOOL v18 = v17 >= *v14;
        if (v17 == *v14)
        {
          unsigned int v19 = *((_DWORD *)v10 + 8);
          unsigned int v20 = *((_DWORD *)v6 + 8);
          BOOL v18 = v19 >= v20;
          if (v19 == v20)
          {
            if (*((_DWORD *)v10 + 9) >= *((_DWORD *)v6 + 9)) {
              goto LABEL_32;
            }
            goto LABEL_25;
          }
        }
      }
      else
      {
        if (v15 < v16) {
          goto LABEL_25;
        }
        if (v15 > v16) {
          goto LABEL_32;
        }
        unsigned int v21 = *((_DWORD *)v10 + 12);
        unsigned int v22 = *((_DWORD *)v6 + 12);
        if (v21 < v22) {
          goto LABEL_25;
        }
        if (v21 > v22) {
          goto LABEL_32;
        }
        unsigned int v23 = *((_DWORD *)v10 + 13);
        unsigned int v24 = *((_DWORD *)v6 + 13);
        if (v23 < v24) {
          goto LABEL_25;
        }
        if (v23 > v24) {
          goto LABEL_32;
        }
        BOOL v18 = *((_DWORD *)v10 + 14) >= *((_DWORD *)v6 + 14);
      }
      if (v18)
      {
LABEL_32:
        uint64_t result = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(v7, v32, v14);
        float64x2_t v25 = result;
        if (*result)
        {
LABEL_27:
          float64x2_t v26 = (void *)v6[1];
          if (!v26) {
            goto LABEL_38;
          }
          goto LABEL_36;
        }
        goto LABEL_30;
      }
LABEL_25:
      if (v9)
      {
        v32[0] = v10;
        float64x2_t v25 = v10 + 1;
        if (v10[1]) {
          goto LABEL_27;
        }
      }
      else
      {
        v32[0] = v8;
        float64x2_t v25 = v8;
        if (*v8) {
          goto LABEL_27;
        }
      }
LABEL_30:
      float64x2_t v27 = (char *)operator new(0x40uLL);
      *(_OWORD *)(v27 + 28) = *(_OWORD *)((char *)v6 + 28);
      *(_OWORD *)(v27 + 44) = *(_OWORD *)((char *)v6 + 44);
      uint64_t v28 = v32[0];
      *(void *)float64x2_t v27 = 0;
      *((void *)v27 + 1) = 0;
      *((void *)v27 + 2) = v28;
      *float64x2_t v25 = (uint64_t)v27;
      uint64_t v29 = **(void **)v7;
      if (v29)
      {
        *(void *)uint64_t v7 = v29;
        float64x2_t v30 = (uint64_t *)*v25;
      }
      else
      {
        float64x2_t v30 = (uint64_t *)v27;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v30);
      ++*(void *)(v7 + 16);
      float64x2_t v26 = (void *)v6[1];
      if (!v26)
      {
        do
        {
LABEL_38:
          float64x2_t v31 = (void *)v6[2];
          BOOL v13 = *v31 == (void)v6;
          unint64_t v6 = v31;
        }
        while (!v13);
        goto LABEL_3;
      }
      do
      {
LABEL_36:
        float64x2_t v31 = v26;
        float64x2_t v26 = (void *)*v26;
      }
      while (v26);
LABEL_3:
      unint64_t v6 = v31;
    }
    while (v31 != a3);
  }
  return result;
}

uint64_t *std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = a3[4];
    unsigned int v7 = a3[5];
    unsigned int v8 = a3[6];
    unsigned int v9 = a3[7];
    unsigned int v10 = *a3;
    unsigned int v11 = a3[1];
    unsigned int v12 = a3[2];
    while (1)
    {
      BOOL v13 = v4;
      unsigned int v14 = *((_DWORD *)v4 + 11);
      if (v6 == v14 && v7 == *((_DWORD *)v13 + 12) && v8 == *((_DWORD *)v13 + 13) && *((_DWORD *)v13 + 14) == v9)
      {
        unsigned int v15 = *((_DWORD *)v13 + 7);
        BOOL v16 = v10 >= v15;
        if (v10 == v15 && (v17 = *((_DWORD *)v13 + 8), BOOL v16 = v11 >= v17, v11 == v17))
        {
          if (v12 >= *((_DWORD *)v13 + 9)) {
            goto LABEL_25;
          }
        }
        else if (v16)
        {
          goto LABEL_25;
        }
LABEL_3:
        uint64_t v4 = (uint64_t *)*v13;
        uint64_t result = v13;
        if (!*v13) {
          goto LABEL_40;
        }
      }
      else
      {
        if (v6 < v14) {
          goto LABEL_3;
        }
        if (v6 <= v14)
        {
          unsigned int v18 = *((_DWORD *)v13 + 12);
          if (v7 < v18) {
            goto LABEL_3;
          }
          if (v7 <= v18)
          {
            unsigned int v19 = *((_DWORD *)v13 + 13);
            if (v8 < v19 || v8 <= v19 && v9 < *((_DWORD *)v13 + 14)) {
              goto LABEL_3;
            }
          }
        }
        if (v6 != v14 || *((_DWORD *)v13 + 12) != v7 || *((_DWORD *)v13 + 13) != v8)
        {
LABEL_32:
          if (v14 >= v6)
          {
            if (v14 > v6) {
              goto LABEL_40;
            }
            unsigned int v23 = *((_DWORD *)v13 + 12);
            if (v23 >= v7)
            {
              if (v23 > v7) {
                goto LABEL_40;
              }
              unsigned int v24 = *((_DWORD *)v13 + 13);
              if (v24 >= v8 && (v24 > v8 || *((_DWORD *)v13 + 14) >= v9)) {
                goto LABEL_40;
              }
            }
          }
          goto LABEL_39;
        }
LABEL_25:
        if (v9 != *((_DWORD *)v13 + 14)) {
          goto LABEL_32;
        }
        unsigned int v20 = *((_DWORD *)v13 + 7);
        BOOL v21 = v20 >= v10;
        if (v20 == v10)
        {
          unsigned int v22 = *((_DWORD *)v13 + 8);
          BOOL v21 = v22 >= v11;
          if (v22 == v11) {
            BOOL v21 = *((_DWORD *)v13 + 9) >= v12;
          }
        }
        if (v21)
        {
LABEL_40:
          *a2 = v13;
          return result;
        }
LABEL_39:
        uint64_t result = v13 + 1;
        uint64_t v4 = (uint64_t *)v13[1];
        if (!v4) {
          goto LABEL_40;
        }
      }
    }
  }
  *a2 = result;
  return result;
}

void altitude::Tile::computeTileViewRelation(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, unsigned char *a5, float *a6, unsigned int a7, int a8, float a9)
{
  *a5 = 0;
  if (a1 && a3)
  {
    unint64_t v18 = *(void *)(a3 + 160);
    if (v18)
    {
      if (v18 >= 3)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(a3 + 264);
        BOOL v21 = (void *)(v20 + 16);
        while (*v21 != a1)
        {
          ++v19;
          v21 += 6;
          if (v18 == v19) {
            goto LABEL_12;
          }
        }
        unsigned int v24 = (altitude::TileView *)(v20 + 48 * v19);
LABEL_20:
        if (altitude::TileView::isCulled(v24, a7))
        {
          *a5 = 1;
        }
        else if (!*a5)
        {
LABEL_24:
          altitude::Tile::computeTileResolution(a3, a1, a2, a4, a6, a7, a9);
          return;
        }
        if (!a8) {
          return;
        }
        goto LABEL_24;
      }
      if (*(void *)(a3 + 184) == a1)
      {
        unsigned int v26 = 0;
      }
      else
      {
        if (v18 == 1 || *(void *)(a3 + 232) != a1) {
          goto LABEL_12;
        }
        unsigned int v26 = 1;
      }
      uint64_t v25 = a3 + 48 * v26;
LABEL_19:
      unsigned int v24 = (altitude::TileView *)(v25 + 168);
      goto LABEL_20;
    }
LABEL_12:
    v27[0] = &unk_1EF56B5B8;
    v27[1] = a3;
    void v27[2] = a1;
    v27[3] = 1065353216;
    char v28 = 1;
    int v29 = 0;
    char v30 = 0;
    int v31 = 0;
    karo::SizedArray<altitude::TileView,2>::push_back((char *)(a3 + 160), (uint64_t)v27);
    unint64_t v22 = *(void *)(a3 + 160);
    unint64_t v23 = v22 - 1;
    if (v22 >= 3)
    {
      unsigned int v24 = (altitude::TileView *)(*(void *)(a3 + 264) + 48 * v23);
      goto LABEL_20;
    }
    uint64_t v25 = a3 + 48 * v23;
    goto LABEL_19;
  }
}

char *karo::SizedArray<altitude::TileView,2>::push_back(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)result;
  if (*(void *)result > 1uLL)
  {
    if (v4 == 2)
    {
      unint64_t v8 = *((void *)result + 14);
      if (v8 >= *((void *)result + 15))
      {
        unsigned int v11 = std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>((void **)result + 13, (uint64_t)(result + 8));
      }
      else
      {
        *(void *)unint64_t v8 = &unk_1EF56B5B8;
        long long v9 = *((_OWORD *)result + 1);
        long long v10 = *((_OWORD *)result + 2);
        *(void *)(v8 + 4CGContextBeginTransparencyLayer(this[1], 0) = *((void *)result + 6);
        *(_OWORD *)(v8 + 24) = v10;
        *(_OWORD *)(v8 + 8) = v9;
        unsigned int v11 = (char *)(v8 + 48);
      }
      *((void *)v3 + 14) = v11;
      if ((unint64_t)v11 >= *((void *)v3 + 15))
      {
        unsigned int v12 = std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>((void **)v3 + 13, (uint64_t)(v3 + 56));
      }
      else
      {
        *(void *)unsigned int v11 = &unk_1EF56B5B8;
        long long v13 = *((_OWORD *)v3 + 4);
        long long v14 = *((_OWORD *)v3 + 5);
        *((void *)v11 + 5) = *((void *)v3 + 12);
        *(_OWORD *)(v11 + 24) = v14;
        *(_OWORD *)(v11 + 8) = v13;
        unsigned int v12 = v11 + 48;
      }
      *((void *)v3 + 14) = v12;
    }
    else
    {
      unsigned int v12 = (char *)*((void *)result + 14);
    }
    if ((unint64_t)v12 >= *((void *)v3 + 15))
    {
      uint64_t result = std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>((void **)v3 + 13, a2);
    }
    else
    {
      *(void *)unsigned int v12 = &unk_1EF56B5B8;
      long long v15 = *(_OWORD *)(a2 + 8);
      long long v16 = *(_OWORD *)(a2 + 24);
      *((void *)v12 + 5) = *(void *)(a2 + 40);
      *(_OWORD *)(v12 + 24) = v16;
      *(_OWORD *)(v12 + 8) = v15;
      uint64_t result = v12 + 48;
    }
    *((void *)v3 + 14) = result;
    ++*(void *)v3;
  }
  else
  {
    *(void *)uint64_t result = v4 + 1;
    uint64_t v5 = &result[48 * v4];
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v7 = *(_OWORD *)(a2 + 24);
    *((void *)v5 + 6) = *(void *)(a2 + 40);
    *((_OWORD *)v5 + 1) = v6;
    *((_OWORD *)v5 + 2) = v7;
  }
  return result;
}

void altitude::Tile::computeTileResolution(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, float *a5, unsigned int a6, float a7)
{
  uint64_t v580 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = (char *)(a1 + 160);
  unint64_t v11 = *(void *)(a1 + 160);
  if (v11)
  {
    if (v11 < 3)
    {
      if (*(void *)(a1 + 184) == a2)
      {
        unsigned int v16 = 0;
      }
      else
      {
        if (v11 == 1 || *(void *)(a1 + 232) != a2) {
          goto LABEL_15;
        }
        unsigned int v16 = 1;
      }
      uint64_t v17 = a1 + 48 * v16 + 168;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(a1 + 264);
      long long v15 = (void *)(v14 + 16);
      while (*v15 != a2)
      {
        ++v13;
        v15 += 6;
        if (v11 == v13) {
          goto LABEL_15;
        }
      }
      uint64_t v17 = v14 + 48 * v13;
    }
    if (*(_DWORD *)(v17 + 28) >= a6)
    {
      *a5 = *(float *)(v17 + 24);
      return;
    }
  }
LABEL_15:
  float v510 = *(float *)(a1 + 416);
  float v511 = *(float *)(a2 + 1304);
  float v18 = *(float *)(a2 + 1308);
  unsigned int v19 = a3[13] - a3[11];
  unsigned int v20 = a3[12] - a3[10];
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float64x2_t v526 = *(float64x2_t *)v21;
  double v22 = *(double *)(v21 + 16);
  long long v528 = *(_OWORD *)(v21 + 24);
  double v23 = *(double *)(v21 + 40);
  double v527 = v22;
  double v529 = v23;
  double v24 = *(double *)(v21 + 48);
  double v530 = v24;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(_OWORD *)unint64_t v579 = *(_OWORD *)v25;
  *(void *)&v579[16] = *(void *)(v25 + 16);
  *(_OWORD *)v578 = *(_OWORD *)(v25 + 24);
  *(void *)&v578[16] = *(void *)(v25 + 40);
  LODWORD(v531.f64[0]) = (unsigned __int16)v20 | ((unsigned __int16)v19 << 16);
  double v26 = *(double *)(a2 + 1000);
  double v27 = *(double *)(a2 + 952);
  double v28 = *(double *)(a2 + 944);
  double v29 = *(double *)(a2 + 1008);
  long double v30 = tan(v26 * 0.5);
  long double v31 = (v27 + v27) * v30 * (double)(unsigned __int16)v20 / (double)(unsigned __int16)v19;
  float64x2_t v565 = 0u;
  long long v566 = 0u;
  *(double *)buf = (v27 + v27) / v31;
  *(double *)unint64_t v567 = 1.0 / v30;
  double v32 = -(v28 - v29 * v27);
  *(_OWORD *)&v567[8] = 0u;
  *(_OWORD *)uint64_t v568 = 0u;
  *(double *)&v568[16] = v32 / (v28 - v27);
  double v33 = -(v28 * v27 - v29 * (v28 * v27));
  v571.f64[0] = 0.0;
  double v569 = -1.0;
  double v570 = 0.0;
  v571.f64[1] = v33 / (v28 - v27);
  double v572 = 0.0;
  long long v553 = 0u;
  long long v554 = 0u;
  double v552 = v31 / (v27 + v27);
  double v555 = v30;
  long long v556 = 0u;
  long long v557 = 0u;
  double v558 = 0.0;
  double v559 = (v28 - v27) / v33;
  double v561 = 0.0;
  double v560 = 0.0;
  double v562 = -1.0;
  double v563 = v32 / v33;
  geo::View<double>::View((uint64_t)&v516, (long long *)(a2 + 48), (double *)buf, (long long *)&v552, &v531, 0, v29);
  v523[35] = v26;
  double v524 = v27;
  double v525 = v28;
  switch(a4)
  {
    case 0:
      double v34 = v527;
      float64x2_t v502 = v526;
      float64x2_t v35 = vsubq_f64(v526, v516);
      *(double *)&uint64_t v36 = sqrt(vaddvq_f64(vmulq_f64(v35, v35)) + (v527 - v517) * (v527 - v517));
      float v37 = *(double *)&v36;
      double v38 = *(double *)&v36 - (float)((float)(v37 / v18) + v511);
      float64x2_t v573 = vaddq_f64(vdivq_f64(vmulq_n_f64(v35, v38), (float64x2_t)vdupq_lane_s64(v36, 0)), v516);
      double v574 = v38 * (v527 - v517) / *(double *)&v36 + v517;
      long long v575 = v518;
      double v576 = v519;
      double v577 = v520;
      _D2 = v529;
      _D3 = v502.f64[1];
      __asm { FMLA            D4, D2, V7.D[1] }
      double v45 = vmlad_n_f64(-(v502.f64[1] * *(double *)&v528), *((double *)&v528 + 1), v502.f64[0]);
      double v46 = _D4 + _D4;
      double v47 = -(v529 * v502.f64[0] - v34 * *(double *)&v528) - (v529 * v502.f64[0] - v34 * *(double *)&v528);
      double v48 = v45 + v45;
      double v49 = v548 * v24 + v549 * v529 - (v550 * *((double *)&v528 + 1) + v551 * *(double *)&v528);
      double v50 = v549 * v24 + v550 * *(double *)&v528 - (v548 * v529 + v551 * *((double *)&v528 + 1));
      double v51 = v548 * *((double *)&v528 + 1) + v550 * v24 - (v549 * *(double *)&v528 + v551 * v529);
      double v52 = v548 * *(double *)&v528 + v549 * *((double *)&v528 + 1) + v550 * v529 + v551 * v24;
      double v53 = -(v547 * *((double *)&v528 + 1) - v546 * v529) - (v547 * *((double *)&v528 + 1) - v546 * v529);
      double v54 = -(v545 * v529 - v547 * *(double *)&v528) - (v545 * v529 - v547 * *(double *)&v528);
      double v55 = -(v546 * *(double *)&v528 - v545 * *((double *)&v528 + 1))
          - (v546 * *(double *)&v528
           - v545 * *((double *)&v528 + 1));
      double v56 = v545
          - (v502.f64[0]
           - v48 * *((double *)&v528 + 1))
          + v53 * v24
          + v54 * v529
          - (v46 * v24
           + v47 * v529
           + v55 * *((double *)&v528 + 1));
      double v57 = v546
          - (v502.f64[1]
           - v46 * v529)
          + v54 * v24
          + v55 * *(double *)&v528
          - (v48 * *(double *)&v528
           + v47 * v24
           + v53 * v529);
      double v58 = v547
          - (v34
           - v47 * *(double *)&v528)
          + v53 * *((double *)&v528 + 1)
          + v55 * v24
          - (v46 * *((double *)&v528 + 1)
           + v48 * v24
           + v54 * *(double *)&v528);
      double v482 = *(double *)v578;
      double v483 = *(double *)v579;
      double v480 = *(double *)&v578[8];
      double v481 = *(double *)&v579[8];
      double v478 = *(double *)&v578[16];
      double v479 = *(double *)&v579[16];
      double v59 = -(v58 * v50 - v57 * v51) - (v58 * v50 - v57 * v51);
      double v60 = -(v56 * v51 - v58 * v49) - (v56 * v51 - v58 * v49);
      double v61 = -(v57 * v49 - v56 * v50) - (v57 * v49 - v56 * v50);
      double v62 = -(v56 + v60 * v51 + v59 * v52 - v61 * v50);
      double v63 = -(v57 + v60 * v52 + v61 * v49 - v59 * v51);
      double v64 = v58 + v59 * v50 + v61 * v52;
      double v65 = -(v50 * (v50 * -2.0));
      double v66 = v51 * -2.0 * v52;
      double v67 = v52 * (v50 * -2.0);
      double v68 = v49 * -2.0 * v49 + 1.0;
      double v69 = v49 * -2.0 * v52;
      double v552 = 1.0 - (v65 - v51 * (v51 * -2.0));
      *(double *)&long long v553 = v66 - v50 * (v49 * -2.0);
      *((double *)&v554 + 1) = -(v50 * (v49 * -2.0)) - v66;
      double v555 = v68 - -(v51 * (v51 * -2.0));
      *(double *)&long long v557 = v67 - v51 * (v49 * -2.0);
      *((double *)&v557 + 1) = -(v51 * (v50 * -2.0)) - v69;
      *((double *)&v553 + 1) = -(v51 * (v49 * -2.0)) - v67;
      long long v556 = COERCE_UNSIGNED_INT64(v69 - v51 * (v50 * -2.0));
      double v558 = v68 - v65;
      *(void *)&long long v554 = 0;
      double v559 = 0.0;
      double v560 = v62;
      double v561 = v63;
      double v562 = -(v64 - v60 * v49);
      double v563 = 1.0;
      gm::operator*<double,4,4,4>((double *)buf, v521, &v552);
      double v475 = v565.f64[0];
      double v512 = *((double *)&v566 + 1);
      double v476 = *(double *)v567;
      double v477 = *(double *)buf;
      double v70 = (v50 + v50) * v50;
      double v71 = (v51 + v51) * v51;
      double v72 = (v49 + v49) * v50;
      double v73 = (v51 + v51) * v52;
      double v74 = v72 - v73;
      double v75 = (v49 + v49) * v51;
      double v76 = v52 * (v50 + v50);
      double v77 = (v50 + v50) * v51;
      double v78 = (v49 + v49) * v52;
      double v537 = v75 + v76;
      v531.f64[0] = 1.0 - (v71 + v70);
      v531.f64[1] = v72 + v73;
      long long v79 = *(_OWORD *)v568;
      double v80 = 1.0 - (v49 + v49) * v49;
      double v498 = v570;
      double v495 = v571.f64[0];
      double v488 = v565.f64[1];
      double v490 = *(double *)&v566;
      *((double *)&v533 + 1) = v74;
      double v534 = v80 - v71;
      long long v485 = *(_OWORD *)&v567[8];
      double v538 = v77 - v78;
      double v532 = v75 - v76;
      double v81 = *(double *)&v568[16];
      double v82 = v569;
      double v535 = v78 + v77;
      double v539 = v80 - v70;
      double v83 = v571.f64[1];
      double v84 = v572;
      *(void *)&long long v533 = 0;
      uint64_t v536 = 0;
      uint64_t v540 = 0;
      double v541 = v56;
      double v542 = v57;
      double v543 = v58;
      uint64_t v544 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(&v552, v531.f64, v523);
      if (*(double *)&v578[16] - *(double *)&v579[16] >= 0.0) {
        double v85 = (*(double *)&v578[16] - *(double *)&v579[16]) * 0.5;
      }
      else {
        double v85 = 0.0;
      }
      float64x2_t v86 = vsubq_f64(*(float64x2_t *)v578, *(float64x2_t *)v579);
      __asm { FMOV            V29.2D, #0.5 }
      float64x2_t v88 = vmaxnmq_f64((float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v86, _Q29), (int8x16_t)vcltzq_f64(v86)), (float64x2_t)0);
      double v89 = fmax(v85, 0.0);
      double v90 = 1.0 / sqrt(v526.f64[0] * v526.f64[0] + v526.f64[1] * v526.f64[1] + v527 * v527);
      double v91 = v90 * v526.f64[0];
      double v92 = v90 * v526.f64[1];
      double v93 = v90 * v527;
      double v94 = -(*((double *)&v528 + 1) * v93 - v529 * v92) - (*((double *)&v528 + 1) * v93 - v529 * v92);
      double v95 = -(v529 * v91 - *(double *)&v528 * v93) - (v529 * v91 - *(double *)&v528 * v93);
      double v96 = -(*(double *)&v528 * v92 - *((double *)&v528 + 1) * v91)
          - (*(double *)&v528 * v92
           - *((double *)&v528 + 1) * v91);
      double v97 = v91 - v96 * *((double *)&v528 + 1) + v94 * v530 + v95 * v529;
      double v98 = v92 + v96 * *(double *)&v528 + v95 * v530 - v94 * v529;
      double v99 = v93 + v96 * v530 + v94 * *((double *)&v528 + 1) - v95 * *(double *)&v528;
      BOOL v100 = v97 <= v98 || v97 <= v99;
      if (v100)
      {
        float64x2_t v101 = vmulq_f64(v88, v88);
        BOOL v102 = v98 <= v97 || v98 <= v99;
        unsigned int v336 = a6;
        float v337 = a7;
        if (v102) {
          double v335 = vaddvq_f64(v101);
        }
        else {
          double v335 = v101.f64[0] + v89 * v89;
        }
      }
      else
      {
        v88.f64[0] = v89;
        double v335 = vaddvq_f64(vmulq_f64(v88, v88));
        unsigned int v336 = a6;
        float v337 = a7;
      }
      double v386 = v483;
      double v387 = v481;
      double v388 = v479;
      if (v58 >= 0.0) {
        double v388 = v478;
      }
      if (v57 >= 0.0) {
        double v387 = v480;
      }
      if (v56 >= 0.0) {
        double v386 = v482;
      }
      double v389 = 1.0 / (v84 + v490 * v386 + *((double *)&v485 + 1) * v387 + v82 * v388);
      double v390 = v389 * (v83 + v488 * v386 + *(double *)&v485 * v387 + v81 * v388);
      double v391 = v389 * (v495 + v475 * v386 + v476 * v387 + *((double *)&v79 + 1) * v388);
      double v392 = 0.5 / (double)v20 + v389 * (v498 + v477 * v386 + v512 * v387 + *(double *)&v79 * v388);
      double v393 = v562 + *((double *)&v553 + 1) * v392 + *(double *)&v556 * v391 + v558 * v390;
      double v394 = 1.0 / (v563 + *(double *)&v554 * v392 + *((double *)&v556 + 1) * v391 + v559 * v390);
      double v395 = v561 + *(double *)&v553 * v392 + v555 * v391 + *((double *)&v557 + 1) * v390;
      double v396 = -(v386 - v394 * (v560 + v552 * v392 + *((double *)&v554 + 1) * v391 + *(double *)&v557 * v390));
      double v361 = sqrt(v396 * v396+ -(v387 - v394 * v395) * -(v387 - v394 * v395)+ -(v388 - v394 * v393) * -(v388 - v394 * v393))* v510/ (v337* 0.355* sqrt(v335));
      goto LABEL_167;
    case 1:
      unsigned int v104 = *(_DWORD *)(a1 + 392);
      double v105 = *(double *)(a2 + 1424);
      double v106 = *(double *)(a2 + 1432);
      double v107 = *(double *)(a2 + 1440);
      double v108 = v527;
      float64x2_t v503 = v526;
      float64x2_t v109 = vsubq_f64(v526, v516);
      *(double *)&uint64_t v110 = sqrt(vaddvq_f64(vmulq_f64(v109, v109)) + (v527 - v517) * (v527 - v517));
      float v111 = *(double *)&v110;
      double v112 = *(double *)&v110 - (float)((float)(v111 / v18) + v511);
      float64x2_t v573 = vaddq_f64(vdivq_f64(vmulq_n_f64(v109, v112), (float64x2_t)vdupq_lane_s64(v110, 0)), v516);
      double v574 = v112 * (v527 - v517) / *(double *)&v110 + v517;
      long long v575 = v518;
      double v576 = v519;
      double v577 = v520;
      _D0 = v529;
      _D3 = v503.f64[1];
      __asm { FMLA            D4, D0, V27.D[1] }
      double v116 = vmlad_n_f64(-(v503.f64[1] * *(double *)&v528), *((double *)&v528 + 1), v503.f64[0]);
      double v117 = _D4 + _D4;
      double v118 = -(v529 * v503.f64[0] - v108 * *(double *)&v528) - (v529 * v503.f64[0] - v108 * *(double *)&v528);
      double v119 = v116 + v116;
      double v120 = -(v547 * *((double *)&v528 + 1) - v546 * v529) - (v547 * *((double *)&v528 + 1) - v546 * v529);
      double v121 = -(v545 * v529 - v547 * *(double *)&v528) - (v545 * v529 - v547 * *(double *)&v528);
      double v122 = -(v546 * *(double *)&v528 - v545 * *((double *)&v528 + 1))
           - (v546 * *(double *)&v528
            - v545 * *((double *)&v528 + 1));
      double v123 = v117 * v24 + v118 * v529 + v122 * *((double *)&v528 + 1);
      double v124 = v545 - (v503.f64[0] - v119 * *((double *)&v528 + 1)) + v120 * v24 + v121 * v529;
      double v125 = v119 * *(double *)&v528 + v118 * v24 + v120 * v529;
      double v126 = v546 - (v503.f64[1] - v117 * v529) + v121 * v24 + v122 * *(double *)&v528;
      double v127 = v117 * *((double *)&v528 + 1) + v119 * v24 + v121 * *(double *)&v528;
      double v128 = v547 - (v108 - v118 * *(double *)&v528) + v120 * *((double *)&v528 + 1) + v122 * v24;
      if (*(double *)&v578[16] - *(double *)&v579[16] >= 0.0) {
        double v129 = (*(double *)&v578[16] - *(double *)&v579[16]) * 0.5;
      }
      else {
        double v129 = 0.0;
      }
      float64x2_t v130 = vsubq_f64(*(float64x2_t *)v578, *(float64x2_t *)v579);
      __asm { FMOV            V28.2D, #0.5 }
      float64x2_t v132 = vmaxnmq_f64((float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v130, _Q28), (int8x16_t)vcltzq_f64(v130)), (float64x2_t)0);
      double v133 = fmax(v129, 0.0);
      _Q28.f64[0] = 1.0 / sqrt(v526.f64[0] * v526.f64[0] + v526.f64[1] * v526.f64[1] + v527 * v527);
      float64_t v134 = _Q28.f64[0] * v526.f64[0];
      float64_t v135 = _Q28.f64[0] * v526.f64[1];
      _Q28.f64[0] = _Q28.f64[0] * v527;
      double v136 = -(*((double *)&v528 + 1) * _Q28.f64[0] - v529 * v135)
           - (*((double *)&v528 + 1) * _Q28.f64[0]
            - v529 * v135);
      double v137 = -(v529 * v134 - *(double *)&v528 * _Q28.f64[0]) - (v529 * v134 - *(double *)&v528 * _Q28.f64[0]);
      double v138 = -(*(double *)&v528 * v135 - *((double *)&v528 + 1) * v134)
           - (*(double *)&v528 * v135
            - *((double *)&v528 + 1) * v134);
      double v139 = v134 - v138 * *((double *)&v528 + 1) + v136 * v530 + v137 * v529;
      double v140 = v135 + v138 * *(double *)&v528 + v137 * v530 - v136 * v529;
      double v141 = _Q28.f64[0] + v138 * v530 + v136 * *((double *)&v528 + 1) - v137 * *(double *)&v528;
      if (v139 <= v140 || v139 <= v141)
      {
        float64x2_t v143 = vmulq_f64(v132, v132);
        if (v140 <= v139 || v140 <= v141) {
          double v338 = vaddvq_f64(v143);
        }
        else {
          double v338 = v143.f64[0] + v133 * v133;
        }
      }
      else
      {
        v132.f64[0] = v133;
        double v338 = vaddvq_f64(vmulq_f64(v132, v132));
      }
      double v397 = v124 - v123;
      double v398 = v126 - v125;
      double v399 = v128 - v127;
      double v400 = sqrt(v338);
      if (v20 < 0x190 || v19 <= 0x18F)
      {
        long long v445 = (double *)&v522;
        if (v20 < v19) {
          long long v445 = v521;
        }
        double v446 = *v445;
        if (v20 >= v19) {
          unsigned int v447 = v19;
        }
        else {
          unsigned int v447 = v20;
        }
        if (v447 <= 0xC8) {
          unsigned int v447 = 200;
        }
        double v448 = vmlad_n_f64(*(double *)v579 - v397, 0.5, v130.f64[0]);
        double v444 = fmax(v524, sqrt(v448 * v448+ (*(double *)&v579[8] - v398 + (*(double *)&v578[8] - *(double *)&v579[8]) * 0.5)* (*(double *)&v579[8] - v398 + (*(double *)&v578[8] - *(double *)&v579[8]) * 0.5)+ (*(double *)&v579[16] - v399 + (*(double *)&v578[16] - *(double *)&v579[16]) * 0.5)* (*(double *)&v579[16] - v399 + (*(double *)&v578[16] - *(double *)&v579[16]) * 0.5))- v400)* 0.35/ (v446* (double)v447);
      }
      else
      {
        double v496 = v106;
        double v497 = v105;
        double v401 = v548 * v24 + v549 * v529 - (v550 * *((double *)&v528 + 1) + v551 * *(double *)&v528);
        double v402 = v549 * v24 + v550 * *(double *)&v528 - (v548 * v529 + v551 * *((double *)&v528 + 1));
        double v403 = v548 * *((double *)&v528 + 1) + v550 * v24 - (v549 * *(double *)&v528 + v551 * v529);
        double v494 = v107;
        double v404 = v548 * *(double *)&v528 + v549 * *((double *)&v528 + 1) + v550 * v529 + v551 * v24;
        if (v397 >= 0.0) {
          double v405 = *(double *)v578;
        }
        else {
          double v405 = *(double *)v579;
        }
        double v514 = v405;
        if (v398 >= 0.0) {
          double v406 = *(double *)&v578[8];
        }
        else {
          double v406 = *(double *)&v579[8];
        }
        double v501 = v406;
        if (v399 >= 0.0) {
          double v407 = *(double *)&v578[16];
        }
        else {
          double v407 = *(double *)&v579[16];
        }
        double v508 = v407;
        double v408 = -(v399 * v402 - v398 * v403) - (v399 * v402 - v398 * v403);
        double v409 = -(v397 * v403 - v399 * v401) - (v397 * v403 - v399 * v401);
        double v410 = -(v398 * v401 - v397 * v402) - (v398 * v401 - v397 * v402);
        double v411 = -(v397 + v408 * v404 + v409 * v403 - v410 * v402);
        double v412 = -(v398 + v409 * v404 + v410 * v401 - v408 * v403);
        double v413 = v399 + v408 * v402 + v410 * v404;
        double v414 = -(v402 * (v402 * -2.0));
        double v415 = v403 * -2.0 * v404;
        double v416 = v402 * -2.0 * v404;
        double v417 = v401 * -2.0 * v401 + 1.0;
        double v418 = v401 * -2.0 * v404;
        double v552 = 1.0 - (v414 - v403 * (v403 * -2.0));
        *(double *)&long long v553 = v415 - v402 * (v401 * -2.0);
        *((double *)&v554 + 1) = -(v402 * (v401 * -2.0)) - v415;
        double v555 = v417 - -(v403 * (v403 * -2.0));
        *(double *)&long long v557 = v416 - v403 * (v401 * -2.0);
        *((double *)&v557 + 1) = -(v403 * (v402 * -2.0)) - v418;
        *((double *)&v553 + 1) = -(v403 * (v401 * -2.0)) - v416;
        long long v556 = COERCE_UNSIGNED_INT64(v418 - v403 * (v402 * -2.0));
        double v558 = v417 - v414;
        *(void *)&long long v554 = 0;
        double v559 = 0.0;
        double v560 = v411;
        double v561 = v412;
        double v562 = -(v413 - v409 * v401);
        double v563 = 1.0;
        double v419 = v400;
        gm::operator*<double,4,4,4>((double *)buf, v521, &v552);
        double v420 = 1.0 / (v572 + *(double *)&v566 * v514 + *(double *)&v567[16] * v501 + v569 * v508);
        double v421 = (v402 + v402) * v402;
        double v422 = (v403 + v403) * v403;
        double v423 = v401 + v401;
        double v424 = (v401 + v401) * v402;
        double v425 = (v403 + v403) * v404;
        double v426 = v424 - v425;
        double v427 = (v401 + v401) * v403;
        double v428 = (v402 + v402) * v404;
        double v429 = v425 + v424;
        double v430 = 1.0 - (v401 + v401) * v401;
        double v431 = (v402 + v402) * v403;
        double v106 = v496;
        double v105 = v497;
        double v432 = v423 * v404;
        double v107 = v494;
        v531.f64[0] = 1.0 - (v422 + v421);
        v531.f64[1] = v429;
        *((double *)&v533 + 1) = v426;
        double v534 = v430 - v422;
        double v537 = v428 + v427;
        double v538 = v431 - v432;
        double v532 = v427 - v428;
        double v535 = v432 + v431;
        double v539 = v430 - v421;
        *(void *)&long long v533 = 0;
        uint64_t v536 = 0;
        uint64_t v540 = 0;
        double v541 = v397;
        double v542 = v398;
        double v543 = v399;
        uint64_t v544 = 0x3FF0000000000000;
        double v433 = 0.5 / (double)v20
             + v420 * (v570 + *(double *)buf * v514 + *((double *)&v566 + 1) * v501 + *(double *)v568 * v508);
        float64x2_t v493 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v571, v565, v514), *(float64x2_t *)v567, v501), *(float64x2_t *)&v568[8], v508), v420);
        gm::operator*<double,4,4,4>(&v552, v531.f64, v523);
        double v400 = v419;
        _D3 = v559;
        _V7.D[1] = v493.f64[1];
        _KR10_16 = v557;
        __asm
        {
          FMLA            D0, D2, V7.D[1]
          FMLA            D1, D5, V7.D[1]
        }
        *(void *)&v439.f64[0] = v556;
        v439.f64[1] = v558;
        float64x2_t v440 = vmulq_f64(v439, v493);
        _V16.D[1] = v493.f64[1];
        __asm { FMLA            D4, D3, V16.D[1] }
        double v443 = 1.0 / (_D4 + v563);
        v440.f64[0] = -(v508 - v443 * (v440.f64[0] + *((double *)&v553 + 1) * v433 + v440.f64[1] + v562));
        double v444 = sqrt(-(v514 - v443 * _D0) * -(v514 - v443 * _D0)+ -(v501 - v443 * _D1) * -(v501 - v443 * _D1)+ v440.f64[0] * v440.f64[0]);
      }
      unsigned int v336 = a6;
      if (v104 >= 5)
      {
        double v450 = sqrt(v105 * v105 + v106 * v106 + v107 * v107);
        double v451 = *(double *)(a2 + 1416);
        double v452 = *(double *)(a2 + 1408);
        double v453 = *(double *)(a2 + 1400);
        double v454 = -(v452 * v576 - v451 * *((double *)&v575 + 1)) - (v452 * v576 - v451 * *((double *)&v575 + 1));
        double v455 = -(*(double *)&v575 * v451 - v453 * v576) - (*(double *)&v575 * v451 - v453 * v576);
        double v456 = -(v453 * *((double *)&v575 + 1) - *(double *)&v575 * v452)
             - (v453 * *((double *)&v575 + 1)
              - *(double *)&v575 * v452);
        float64x2_t v457 = vsubq_f64(*(float64x2_t *)&v578[8], *(float64x2_t *)&v579[8]);
        float64x2_t v458 = vmulq_f64(v457, v457);
        float64_t v459 = v526.f64[0] + v455 * v576 - (v453 + v454 * v577 + v456 * *((double *)&v575 + 1));
        float64_t v460 = v526.f64[1] + v456 * *(double *)&v575 - (v452 + v454 * v576 + v455 * v577);
        double v461 = v527 + v454 * *((double *)&v575 + 1) - (v451 + v455 * *(double *)&v575 + v456 * v577);
        double v462 = fmin((sqrt(v459 * v459 + v460 * v460 + v461 * v461)+ (sqrt(v458.f64[0]+ (*(double *)v578 - *(double *)v579) * (*(double *)v578 - *(double *)v579)+ v458.f64[1])+ v450)* -0.5)/ (v450* -5.0)+ 1.0, 1.0);
        double v463 = v462 * 0.71;
        BOOL v100 = v462 <= 0.1;
        double v449 = 0.071;
        if (!v100) {
          double v449 = v463;
        }
      }
      else
      {
        double v449 = 0.71;
      }
      double v361 = v444 * v510 / (a7 * 0.5 * v449 * v400);
      goto LABEL_167;
    case 2:
      double v145 = v527;
      float64x2_t v504 = v526;
      float64x2_t v146 = vsubq_f64(v526, v516);
      *(double *)&uint64_t v147 = sqrt(vaddvq_f64(vmulq_f64(v146, v146)) + (v527 - v517) * (v527 - v517));
      float v148 = *(double *)&v147;
      double v149 = *(double *)&v147 - (float)((float)(v148 / v18) + v511);
      float64x2_t v531 = vaddq_f64(vdivq_f64(vmulq_n_f64(v146, v149), (float64x2_t)vdupq_lane_s64(v147, 0)), v516);
      double v532 = v149 * (v527 - v517) / *(double *)&v147 + v517;
      long long v533 = v518;
      double v534 = v519;
      double v535 = v520;
      _D4 = v529;
      _D5 = v504.f64[1];
      __asm { FMLA            D0, D4, V7.D[1] }
      double v153 = vmlad_n_f64(-(v504.f64[1] * *(double *)&v528), *((double *)&v528 + 1), v504.f64[0]);
      double v154 = _D0 + _D0;
      double v155 = -(v529 * v504.f64[0] - v145 * *(double *)&v528) - (v529 * v504.f64[0] - v145 * *(double *)&v528);
      double v156 = v153 + v153;
      double v157 = (_D0 + _D0) * v24;
      double v158 = (_D0 + _D0) * *((double *)&v528 + 1);
      double v159 = *(double *)&v575 * v24
           + *((double *)&v575 + 1) * v529
           - (v576 * *((double *)&v528 + 1)
            + v577 * *(double *)&v528);
      double v160 = *((double *)&v575 + 1) * v24
           + v576 * *(double *)&v528
           - (*(double *)&v575 * v529
            + v577 * *((double *)&v528 + 1));
      double v161 = *(double *)&v575 * *((double *)&v528 + 1)
           + v576 * v24
           - (*((double *)&v575 + 1) * *(double *)&v528
            + v577 * v529);
      double v162 = *(double *)&v575 * *(double *)&v528
           + *((double *)&v575 + 1) * *((double *)&v528 + 1)
           + v576 * v529
           + v577 * v24;
      double v163 = -(v574 * *((double *)&v528 + 1) - v573.f64[1] * v529)
           - (v574 * *((double *)&v528 + 1)
            - v573.f64[1] * v529);
      float64_t v164 = -(v573.f64[0] * v529 - v574 * *(double *)&v528) - (v573.f64[0] * v529 - v574 * *(double *)&v528);
      float64_t v165 = -(v573.f64[1] * *(double *)&v528 - v573.f64[0] * *((double *)&v528 + 1))
           - (v573.f64[1] * *(double *)&v528
            - v573.f64[0] * *((double *)&v528 + 1));
      float64_t v166 = v573.f64[0]
           - (v504.f64[0]
            - v156 * *((double *)&v528 + 1))
           + v163 * v24
           + v164 * v529
           - (v157
            + v155 * v529
            + v165 * *((double *)&v528 + 1));
      float64_t v167 = v573.f64[1]
           - (v504.f64[1]
            - v154 * v529)
           + v164 * v24
           + v165 * *(double *)&v528
           - (v156 * *(double *)&v528
            + v155 * v24
            + v163 * v529);
      double v168 = v574
           - (v145
            - v155 * *(double *)&v528)
           + v163 * *((double *)&v528 + 1)
           + v165 * v24
           - (v158
            + v156 * v24
            + v164 * *(double *)&v528);
      double v169 = -(v168 * v160 - v167 * v161) - (v168 * v160 - v167 * v161);
      float64_t v170 = -(v166 * v161 - v168 * v159) - (v166 * v161 - v168 * v159);
      float64_t v171 = -(v167 * v159 - v166 * v160) - (v167 * v159 - v166 * v160);
      double v172 = -(v166 + v170 * v161 + v169 * v162 - v171 * v160);
      double v173 = -(v167 + v170 * v162 + v171 * v159 - v169 * v161);
      double v174 = v168 + v169 * v160 + v171 * v162;
      double v175 = v160 * -2.0;
      double v176 = -(v160 * (v160 * -2.0));
      double v177 = 1.0 - (v176 - v161 * (v161 * -2.0));
      double v178 = -(v160 * (v159 * -2.0));
      double v179 = v161 * -2.0 * v162;
      double v180 = -(v161 * (v159 * -2.0));
      double v181 = v162 * v175 - v161 * (v159 * -2.0);
      double v182 = v159 * -2.0 * v159 + 1.0;
      double v183 = v182 - -(v161 * (v161 * -2.0));
      double v184 = -(v161 * v175);
      double v185 = v159 * -2.0 * v162;
      double v552 = v177;
      *(double *)&long long v553 = v178 + v179;
      *((double *)&v554 + 1) = v178 - v179;
      double v555 = v183;
      *(double *)&long long v557 = v181;
      *((double *)&v557 + 1) = v184 - v185;
      *((double *)&v553 + 1) = v180 - v162 * v175;
      long long v556 = COERCE_UNSIGNED_INT64(v185 + v184);
      double v558 = v182 - v176;
      *(void *)&long long v554 = 0;
      double v559 = 0.0;
      double v560 = v172;
      double v561 = v173;
      double v562 = -(v174 - v170 * v159);
      double v563 = 1.0;
      gm::operator*<double,4,4,4>((double *)buf, v521, &v552);
      double v186 = (double)v19 * 0.5;
      double v187 = (double)v20 * 0.5;
      double v188 = *(double *)&v567[16] * *(double *)&v578[8] + *(double *)&v566 * *(double *)v578;
      double v189 = v569 * *(double *)&v578[16] + v572;
      if (v188 + v189 == 0.0) {
        double v190 = 0.0000001;
      }
      else {
        double v190 = v188 + v189;
      }
      double v191 = *((double *)&v566 + 1) * *(double *)&v578[8];
      double v192 = *((double *)&v566 + 1) * *(double *)&v578[8] + *(double *)buf * *(double *)v578;
      double v193 = *(double *)v568 * *(double *)&v578[16] + v570;
      double v194 = *(double *)v567 * *(double *)&v578[8];
      double v195 = *(double *)v567 * *(double *)&v578[8] + v565.f64[0] * *(double *)v578;
      double v196 = *(double *)&v568[8] * *(double *)&v578[16] + v571.f64[0];
      double v499 = v186 * (v195 + v196) / v190;
      double v197 = *(double *)buf * *(double *)v579;
      double v198 = v565.f64[0] * *(double *)v579;
      double v199 = *(double *)&v567[16] * *(double *)&v578[8] + *(double *)&v566 * *(double *)v579;
      double v200 = v199 + v189;
      if (v199 + v189 == 0.0) {
        double v200 = 0.0000001;
      }
      double v201 = v191 + v197;
      double v202 = v187 * (v191 + v197 + v193) / v200;
      double v203 = v194 + v198;
      double v505 = v186 * (v194 + v198 + v196) / v200;
      double v204 = *(double *)&v567[16] * *(double *)&v579[8] + *(double *)&v566 * *(double *)v578;
      double v205 = *(double *)&v567[16] * *(double *)&v579[8] + *(double *)&v566 * *(double *)v579;
      double v206 = *((double *)&v566 + 1) * *(double *)&v579[8] + *(double *)buf * *(double *)v578;
      double v207 = *((double *)&v566 + 1) * *(double *)&v579[8] + v197;
      double v208 = *(double *)v567 * *(double *)&v579[8] + v565.f64[0] * *(double *)v578;
      double v209 = v202;
      double v210 = v187 * (v192 + v193) / v190;
      double v211 = (double)v19 * 0.5;
      double v212 = *(double *)v567 * *(double *)&v579[8] + v198;
      double v213 = (double)v20 * 0.5;
      double v214 = v569 * *(double *)&v579[16] + v572;
      double v215 = *(double *)v568 * *(double *)&v579[16] + v570;
      double v216 = v204 + v189;
      if (v204 + v189 == 0.0) {
        double v216 = 0.0000001;
      }
      double v217 = *(double *)&v568[8] * *(double *)&v579[16] + v571.f64[0];
      double v218 = v187 * (v206 + v193) / v216;
      double v219 = v188 + v214;
      double v220 = v199 + v214;
      double v221 = v204 + v214;
      double v222 = v205 + v214;
      double v223 = v211 * (v208 + v196) / v216;
      if (v205 + v189 == 0.0) {
        double v224 = 0.0000001;
      }
      else {
        double v224 = v205 + v189;
      }
      if (v219 == 0.0) {
        double v225 = 0.0000001;
      }
      else {
        double v225 = v219;
      }
      double v226 = v213 * (v192 + v215);
      if (v220 == 0.0) {
        double v227 = 0.0000001;
      }
      else {
        double v227 = v220;
      }
      if (v221 == 0.0) {
        double v228 = 0.0000001;
      }
      else {
        double v228 = v221;
      }
      if (v222 == 0.0) {
        double v229 = 0.0000001;
      }
      else {
        double v229 = v222;
      }
      double v230 = 0.0;
      if (v565.f64[1] < 0.0) {
        double v230 = fabs((v210 - v209) * (v223 - v499) + (v505 - v499) * (v218 - v210));
      }
      double v231 = v203 + v217;
      double v232 = v207 + v215;
      double v233 = v212 + v217;
      double v234 = v226 / v225;
      double v235 = v211 * (v195 + v217) / v225;
      unsigned int v336 = a6;
      if (*(double *)&v567[8] < 0.0) {
        double v230 = fabs((v210 - v234) * (v505 - v499) + (v235 - v499) * (v209 - v210)) + v230;
      }
      double v339 = v207 + v193;
      double v340 = v212 + v196;
      double v341 = v208 + v217;
      if (*(double *)&v568[16] < 0.0) {
        double v230 = fabs((v210 - v218) * (v235 - v499) + (v223 - v499) * (v234 - v210)) + v230;
      }
      double v342 = v213 * v339;
      double v343 = v211 * v340;
      double v344 = v213 * (v206 + v215);
      double v345 = v211 * v341;
      double v346 = v213 * (v201 + v215) / v227;
      double v347 = v211 * v231 / v227;
      double v348 = v213 * v232 / v229;
      double v349 = v211 * v233 / v229;
      if (v565.f64[1] > 0.0) {
        double v230 = fabs((v346 - v234) * (v349 - v347) + (v235 - v347) * (v348 - v346)) + v230;
      }
      double v350 = v342 / v224;
      double v351 = v343 / v224;
      double v352 = v344 / v228;
      double v353 = v345 / v228;
      if (*(double *)&v567[8] > 0.0) {
        double v230 = fabs((v218 - v350) * (v353 - v223) + (v351 - v223) * (v352 - v218)) + v230;
      }
      if (*(double *)&v568[16] > 0.0) {
        double v230 = fabs((v346 - v348) * (v505 - v347) + (v349 - v347) * (v209 - v346)) + v230;
      }
      double v354 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(v210, 2.22507386e-308), v209), v218), v350), v234), v346), v352);
      double v355 = fmin(v348, fmin(v352, fmin(v346, fmin(v234, fmin(v350, fmin(v218, fmin(v209, fmin(v210, 1.79769313e308))))))));
      double v356 = fmax(v354, v348);
      double v357 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(fmax(v499, 2.22507386e-308), v505), v223), v351), v235), v347), v353), v349)- fmin(v349, fmin(v353, fmin(v347, fmin(v235, fmin(v351, fmin(v223, fmin(v505, fmin(v499, 1.79769313e308))))))));
      double v358 = fmin(fmax(v356 - v355, v357) / fmax(fmin(v357, v356 - v355), 0.1), 5.0);
      double v359 = v358 + -0.25;
      _NF = v358 < 1.25;
      double v360 = 1.0;
      if (!_NF) {
        double v360 = v359;
      }
      double v361 = (float)(v510 * v510) / (a7 * 0.75 * v230 * v360);
      goto LABEL_167;
    case 3:
      unsigned int v236 = *(_DWORD *)(a1 + 392);
      double v491 = *(double *)(a2 + 1432);
      double v492 = *(double *)(a2 + 1424);
      double v489 = *(double *)(a2 + 1440);
      double v237 = v527;
      float64x2_t v506 = v526;
      float64x2_t v238 = vsubq_f64(v526, v516);
      *(double *)&uint64_t v239 = sqrt(vaddvq_f64(vmulq_f64(v238, v238)) + (v527 - v517) * (v527 - v517));
      float v240 = *(double *)&v239;
      double v241 = *(double *)&v239 - (float)((float)(v240 / v18) + v511);
      float64x2_t v531 = vaddq_f64(vdivq_f64(vmulq_n_f64(v238, v241), (float64x2_t)vdupq_lane_s64(v239, 0)), v516);
      double v532 = v241 * (v527 - v517) / *(double *)&v239 + v517;
      long long v533 = v518;
      double v534 = v519;
      double v535 = v520;
      _D4 = v529;
      _D5 = v506.f64[1];
      __asm { FMLA            D0, D4, V7.D[1] }
      double v245 = vmlad_n_f64(-(v506.f64[1] * *(double *)&v528), *((double *)&v528 + 1), v506.f64[0]);
      double v246 = _D0 + _D0;
      double v247 = -(v529 * v506.f64[0] - v237 * *(double *)&v528) - (v529 * v506.f64[0] - v237 * *(double *)&v528);
      double v248 = v245 + v245;
      double v249 = (_D0 + _D0) * v24;
      double v250 = (_D0 + _D0) * *((double *)&v528 + 1);
      double v251 = *(double *)&v575 * v24
           + *((double *)&v575 + 1) * v529
           - (v576 * *((double *)&v528 + 1)
            + v577 * *(double *)&v528);
      double v252 = *((double *)&v575 + 1) * v24
           + v576 * *(double *)&v528
           - (*(double *)&v575 * v529
            + v577 * *((double *)&v528 + 1));
      double v253 = *(double *)&v575 * *((double *)&v528 + 1)
           + v576 * v24
           - (*((double *)&v575 + 1) * *(double *)&v528
            + v577 * v529);
      double v254 = *(double *)&v575 * *(double *)&v528
           + *((double *)&v575 + 1) * *((double *)&v528 + 1)
           + v576 * v529
           + v577 * v24;
      double v255 = -(v574 * *((double *)&v528 + 1) - v573.f64[1] * v529)
           - (v574 * *((double *)&v528 + 1)
            - v573.f64[1] * v529);
      float64_t v256 = -(v573.f64[0] * v529 - v574 * *(double *)&v528) - (v573.f64[0] * v529 - v574 * *(double *)&v528);
      float64_t v257 = -(v573.f64[1] * *(double *)&v528 - v573.f64[0] * *((double *)&v528 + 1))
           - (v573.f64[1] * *(double *)&v528
            - v573.f64[0] * *((double *)&v528 + 1));
      double v258 = v573.f64[0]
           - (v506.f64[0]
            - v248 * *((double *)&v528 + 1))
           + v255 * v24
           + v256 * v529
           - (v249
            + v247 * v529
            + v257 * *((double *)&v528 + 1));
      double v259 = v573.f64[1]
           - (v506.f64[1]
            - v246 * v529)
           + v256 * v24
           + v257 * *(double *)&v528
           - (v248 * *(double *)&v528
            + v247 * v24
            + v255 * v529);
      double v260 = v574
           - (v237
            - v247 * *(double *)&v528)
           + v255 * *((double *)&v528 + 1)
           + v257 * v24
           - (v250
            + v248 * v24
            + v256 * *(double *)&v528);
      double v261 = -(v260 * v252 - v259 * v253) - (v260 * v252 - v259 * v253);
      double v262 = -(v258 * v253 - v260 * v251) - (v258 * v253 - v260 * v251);
      double v263 = -(v259 * v251 - v258 * v252) - (v259 * v251 - v258 * v252);
      double v486 = v259;
      double v487 = v258;
      double v264 = -(v258 + v262 * v253 + v261 * v254 - v263 * v252);
      double v265 = -(v259 + v262 * v254 + v263 * v251 - v261 * v253);
      double v484 = v260;
      double v266 = v260 + v261 * v252 + v263 * v254;
      double v267 = v252 * -2.0;
      double v268 = -(v252 * (v252 * -2.0));
      double v269 = 1.0 - (v268 - v253 * (v253 * -2.0));
      double v270 = -(v252 * (v251 * -2.0));
      double v271 = v253 * -2.0 * v254;
      double v272 = v270 - v271;
      double v273 = -(v253 * (v251 * -2.0));
      double v274 = v270 + v271;
      double v275 = v254 * v267 - v253 * (v251 * -2.0);
      double v276 = v251 * -2.0 * v251 + 1.0;
      double v277 = v276 - -(v253 * (v253 * -2.0));
      double v278 = -(v253 * v267);
      double v279 = v251 * -2.0 * v254;
      double v552 = v269;
      *(double *)&long long v553 = v274;
      *((double *)&v554 + 1) = v272;
      double v555 = v277;
      *(double *)&long long v557 = v275;
      *((double *)&v557 + 1) = v278 - v279;
      *((double *)&v553 + 1) = v273 - v254 * v267;
      long long v556 = COERCE_UNSIGNED_INT64(v279 + v278);
      double v558 = v276 - v268;
      *(void *)&long long v554 = 0;
      double v559 = 0.0;
      double v560 = v264;
      double v561 = v265;
      double v562 = -(v266 - v262 * v251);
      double v563 = 1.0;
      gm::operator*<double,4,4,4>((double *)buf, v521, &v552);
      double v280 = (double)v19 * 0.5;
      double v281 = (double)v20 * 0.5;
      double v282 = *(double *)&v567[16] * *(double *)&v578[8] + *(double *)&v566 * *(double *)v578;
      double v283 = v569 * *(double *)&v578[16] + v572;
      if (v282 + v283 == 0.0) {
        double v284 = 0.0000001;
      }
      else {
        double v284 = v282 + v283;
      }
      double v285 = *((double *)&v566 + 1) * *(double *)&v578[8];
      double v286 = *((double *)&v566 + 1) * *(double *)&v578[8] + *(double *)buf * *(double *)v578;
      double v287 = *(double *)v568 * *(double *)&v578[16] + v570;
      double v500 = v281 * (v286 + v287) / v284;
      double v288 = *(double *)v567 * *(double *)&v578[8];
      double v289 = *(double *)v567 * *(double *)&v578[8] + v565.f64[0] * *(double *)v578;
      double v290 = *(double *)&v568[8] * *(double *)&v578[16] + v571.f64[0];
      double v291 = v280 * (v289 + v290) / v284;
      double v292 = *(double *)buf * *(double *)v579;
      double v293 = v565.f64[0] * *(double *)v579;
      double v294 = *(double *)&v567[16] * *(double *)&v578[8] + *(double *)&v566 * *(double *)v579;
      if (v294 + v283 == 0.0) {
        double v295 = 0.0000001;
      }
      else {
        double v295 = v294 + v283;
      }
      double v296 = v285 + v292;
      double v507 = v281 * (v285 + v292 + v287) / v295;
      double v297 = v288 + v293;
      double v513 = v280 * (v288 + v293 + v290) / v295;
      double v298 = *(double *)&v567[16] * *(double *)&v579[8] + *(double *)&v566 * *(double *)v578;
      double v299 = *(double *)&v567[16] * *(double *)&v579[8] + *(double *)&v566 * *(double *)v579;
      double v300 = *((double *)&v566 + 1) * *(double *)&v579[8] + *(double *)buf * *(double *)v578;
      double v301 = *((double *)&v566 + 1) * *(double *)&v579[8] + v292;
      double v302 = *(double *)v567 * *(double *)&v579[8] + v565.f64[0] * *(double *)v578;
      double v303 = *(double *)v567 * *(double *)&v579[8] + v293;
      double v304 = v569 * *(double *)&v579[16] + v572;
      double v305 = *(double *)v568 * *(double *)&v579[16] + v570;
      if (v298 + v283 == 0.0) {
        double v306 = 0.0000001;
      }
      else {
        double v306 = v298 + v283;
      }
      double v307 = *(double *)&v568[8] * *(double *)&v579[16] + v571.f64[0];
      double v308 = v281 * (v300 + v287) / v306;
      double v309 = v299 + v283;
      double v310 = v294 + v304;
      double v311 = v298 + v304;
      double v312 = v299 + v304;
      double v313 = v280 * (v302 + v290) / v306;
      if (v309 == 0.0) {
        double v314 = 0.0000001;
      }
      else {
        double v314 = v309;
      }
      if (v282 + v304 == 0.0) {
        double v315 = 0.0000001;
      }
      else {
        double v315 = v282 + v304;
      }
      double v316 = v281 * (v286 + v305);
      if (v310 == 0.0) {
        double v310 = 0.0000001;
      }
      if (v311 == 0.0) {
        double v311 = 0.0000001;
      }
      if (v312 == 0.0) {
        double v317 = 0.0000001;
      }
      else {
        double v317 = v312;
      }
      double v318 = 0.0;
      if (v565.f64[1] < 0.0) {
        double v318 = fabs((v500 - v507) * (v313 - v291) + (v513 - v291) * (v308 - v500));
      }
      double v319 = v297 + v307;
      double v320 = v301 + v305;
      double v321 = v303 + v307;
      double v322 = v316 / v315;
      double v323 = *(double *)&v567[8];
      double v324 = v280 * (v289 + v307) / v315;
      unsigned int v336 = a6;
      if (*(double *)&v567[8] < 0.0) {
        double v318 = fabs((v500 - v322) * (v513 - v291) + (v324 - v291) * (v507 - v500)) + v318;
      }
      double v325 = v301 + v287;
      double v326 = v303 + v290;
      double v327 = v300 + v305;
      double v328 = v302 + v307;
      double v329 = v281 * (v296 + v305);
      double v330 = v280 * v319;
      double v331 = v281 * v320;
      double v332 = v280 * v321;
      if (*(double *)&v568[16] >= 0.0)
      {
        float v334 = a7;
        double v333 = v308;
      }
      else
      {
        double v333 = v308;
        double v318 = fabs((v500 - v308) * (v324 - v291) + (v313 - v291) * (v322 - v500)) + v318;
        float v334 = a7;
      }
      double v362 = v281 * v325;
      double v363 = v280 * v326;
      double v364 = v281 * v327;
      double v365 = v280 * v328;
      double v366 = v329 / v310;
      double v367 = v330 / v310;
      double v368 = v331 / v317;
      double v369 = v332 / v317;
      if (v565.f64[1] > 0.0)
      {
        double v323 = *(double *)&v567[8];
        double v318 = fabs((v366 - v322) * (v369 - v367) + (v324 - v367) * (v368 - v366)) + v318;
      }
      double v370 = v362 / v314;
      double v371 = v363 / v314;
      double v372 = v364 / v311;
      double v373 = v365 / v311;
      if (v323 > 0.0) {
        double v318 = fabs((v333 - v370) * (v373 - v313) + (v371 - v313) * (v372 - v333)) + v318;
      }
      if (*(double *)&v568[16] > 0.0) {
        double v318 = fabs((v366 - v368) * (v513 - v367) + (v369 - v367) * (v507 - v366)) + v318;
      }
      double v374 = 1.0;
      if (v236 >= 5)
      {
        double v375 = *(double *)&v578[8] - *(double *)&v579[8];
        double v376 = *(double *)v578 - *(double *)v579;
        double v377 = *(double *)&v578[16] - *(double *)&v579[16];
        double v378 = (sqrt((v486 - *(double *)&v579[8] + v375 * -0.5) * (v486 - *(double *)&v579[8] + v375 * -0.5)+ (v487 - *(double *)v579 + v376 * -0.5) * (v487 - *(double *)v579 + v376 * -0.5)+ (v484 - *(double *)&v579[16] + v377 * -0.5) * (v484 - *(double *)&v579[16] + v377 * -0.5))+ sqrt(v375 * v375 + v376 * v376 + v377 * v377) * -0.5)/ (sqrt(v492 * v492 + v491 * v491 + v489 * v489)* 5.0);
        if (v378 <= 1.0) {
          double v374 = v378 * -0.9 + 1.0;
        }
        else {
          double v374 = 0.1;
        }
      }
      double v379 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(fmax(v291, 2.22507386e-308), v513), v313), v371), v324), v367), v373), v369);
      double v380 = fmin(v369, fmin(v373, fmin(v367, fmin(v324, fmin(v371, fmin(v313, fmin(v513, fmin(v291, 1.79769313e308))))))));
      double v381 = fmax(fmax(fmax(fmax(fmax(fmax(fmax(fmax(v500, 2.22507386e-308), v507), v333), v370), v322), v366), v372), v368)- fmin(v368, fmin(v372, fmin(v366, fmin(v322, fmin(v370, fmin(v333, fmin(v507, fmin(v500, 1.79769313e308))))))));
      double v382 = fmin(fmax(v381, v379 - v380) / fmax(fmin(v379 - v380, v381), 0.1), 5.0);
      _CF = v20 >= 0x190 && v19 >= 0x190;
      float v384 = v510 * 0.35;
      if (_CF) {
        float v384 = v510;
      }
      if (v382 >= 1.25) {
        double v385 = v382 + -0.25;
      }
      else {
        double v385 = 1.0;
      }
      double v361 = (float)(v384 * v384) / (v334 * 0.75 * v318 * v374 * v385);
LABEL_167:
      float v464 = v361;
      *a5 = v464;
      break;
    default:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      unsigned int v336 = a6;
      double v103 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v103, OS_LOG_TYPE_ERROR, "Unsupported LodMode.", buf, 2u);
      }
      break;
  }
  float v465 = *a5;
  unint64_t v466 = *(void *)v12;
  if (*(void *)v12)
  {
    if (v466 >= 3)
    {
      uint64_t v467 = 0;
      uint64_t v468 = *(void *)(a1 + 264);
      long long v469 = (void *)(v468 + 16);
      while (*v469 != a2)
      {
        ++v467;
        v469 += 6;
        if (v466 == v467) {
          goto LABEL_177;
        }
      }
      uint64_t v472 = v468 + 48 * v467;
      goto LABEL_185;
    }
    if (*(void *)(a1 + 184) == a2)
    {
      unsigned int v474 = 0;
    }
    else
    {
      if (v466 == 1 || *(void *)(a1 + 232) != a2) {
        goto LABEL_177;
      }
      unsigned int v474 = 1;
    }
    uint64_t v473 = a1 + 48 * v474;
    goto LABEL_184;
  }
LABEL_177:
  *(double *)buf = COERCE_DOUBLE(&unk_1EF56B5B8);
  *(void *)&v565.f64[0] = a1;
  *(void *)&v565.f64[1] = a2;
  *(void *)&long long v566 = 1065353216;
  BYTE8(v566) = 1;
  HIDWORD(v566) = 0;
  v567[0] = 0;
  *(_DWORD *)&v567[4] = 0;
  karo::SizedArray<altitude::TileView,2>::push_back(v12, (uint64_t)buf);
  unint64_t v470 = *(void *)(a1 + 160);
  unint64_t v471 = v470 - 1;
  if (v470 < 3)
  {
    uint64_t v473 = a1 + 48 * v471;
LABEL_184:
    uint64_t v472 = v473 + 168;
    goto LABEL_185;
  }
  uint64_t v472 = *(void *)(a1 + 264) + 48 * v471;
LABEL_185:
  *(float *)(v472 + 24) = v465;
  *(_DWORD *)(v472 + 28) = v336;
}

char *std::vector<altitude::TileView>::__push_back_slow_path<altitude::TileView const&>(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    long long v9 = (char *)operator new(48 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  long long v10 = &v9[48 * v4];
  unint64_t v11 = &v9[48 * v8];
  *(void *)long long v10 = &unk_1EF56B5B8;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v10 + 5) = *(void *)(a2 + 40);
  unsigned int v12 = v10 + 48;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v2) {
      return v12;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (uint64_t)&v9[48 * v4 - 48];
  do
  {
    *((void *)v10 - 6) = &unk_1EF56B5B8;
    v10 -= 48;
    long long v14 = *(_OWORD *)(v2 - 40);
    long long v15 = *(_OWORD *)(v2 - 24);
    *((void *)v10 + 5) = *((void *)v2 - 1);
    *(_OWORD *)(v10 + 24) = v15;
    *(_OWORD *)(v10 + 8) = v14;
    v13 -= 48;
    v2 -= 48;
  }
  while (v2 != v3);
  uint64_t v2 = (char *)*a1;
  unsigned int v16 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v16 != v2)
  {
    uint64_t v17 = v16 - 48;
    float v18 = v16 - 48;
    unsigned int v19 = (void (***)(char *))(v16 - 48);
    do
    {
      unsigned int v20 = *v19;
      v19 -= 6;
      (*v20)(v18);
      v17 -= 48;
      BOOL v21 = v18 == v2;
      float v18 = (char *)v19;
    }
    while (!v21);
  }
  if (v2) {
LABEL_19:
  }
    operator delete(v2);
  return v12;
}

void geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5593D8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5593D8;

  return a1;
}

void md::AnimationManager::animationDidResume(md::AnimationManager *this, VKAnimation *a2)
{
  uint64_t v3 = a2;
  if ([(VKAnimation *)v3 hasFrequency])
  {
    if (*((unsigned char *)this + 232))
    {
      unint64_t v4 = v3;
      unint64_t v8 = &unk_1EF5593D8;
      long long v9 = v4;
      unint64_t v5 = std::__hash_table<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::__unordered_map_hasher<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>>>::find<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>((void *)this + 24, (uint64_t)&v8);
      if (v5)
      {
        [(VKAnimation *)v4 frequency];
        (*(void (**)(uint64_t *, double, double))(*v5[5] + 32))(v5[5], 0.0, 1.0 / v6);
      }
      unint64_t v8 = &unk_1EF5593D8;
    }
  }
  else
  {
    atomic_store(1u, (unsigned __int8 *)this + 184);
    uint64_t v7 = **((void **)this + 4);
    if (v7)
    {
      LOBYTE(v8) = 6;
      md::MapEngine::setNeedsTick(v7, &v8);
    }
  }
}

void sub_1A1DABCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = *(id *)(a2 + 8);
  id v5 = v3;
  id v6 = v4;
  if (v6 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = [v5 isEqual:v6];
  }

  return v7;
}

void sub_1A1DABD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      *(void *)(v2 + 16) = &unk_1EF5593D8;
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  id v2 = *(id *)(a1 + 24);
  [v2 onTimerFired:CFAbsoluteTimeGetCurrent()];

  uint64_t v3 = **(void **)(v1 + 32);
  if (v3)
  {
    char v4 = 6;
    md::MapEngine::setNeedsTick(v3, &v4);
  }
}

void sub_1A1DABE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF5593D8;

  operator delete((void *)a1);
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF5593D8;
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = &unk_1EF571E38;
  a2[1] = v3;
  a2[2] = &unk_1EF5593D8;
  a2[3] = 0;
  id v4 = *(id *)(a1 + 24);
  id v5 = (void *)a2[3];
  a2[3] = v4;
}

void *std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  id v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id v2 = &unk_1EF571E38;
  v2[1] = v3;
  v2[2] = &unk_1EF5593D8;
  v2[3] = 0;
  id v4 = *(id *)(a1 + 24);
  id v5 = (void *)v2[3];
  v2[3] = v4;

  return v2;
}

void std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF571E38;
  *(void *)(a1 + 16) = &unk_1EF5593D8;

  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::AnimationManager::runAnimation(VKAnimation *)::$_0,std::allocator<md::AnimationManager::runAnimation(VKAnimation *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF571E38;
  *(void *)(a1 + 16) = &unk_1EF5593D8;

  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  id v2 = *(void (****)(void))a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v2[2])();
    }
    operator delete(v2);
  }
  return a1;
}

char *std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>(void **a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v2];
  long long v9 = &v7[24 * v6];
  *(void *)unint64_t v8 = &unk_1EF5593D8;
  *((void *)v8 + 1) = 0;
  id v10 = a2;
  unint64_t v11 = (void *)*((void *)v8 + 1);
  *((void *)v8 + 1) = v10;

  unsigned int v12 = v8 + 24;
  long long v14 = (id *)*a1;
  uint64_t v13 = (id *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v13) {
      return v12;
    }
    goto LABEL_19;
  }
  uint64_t v15 = (uint64_t)&v7[24 * v2 - 24];
  do
  {
    *((void *)v8 - 3) = &unk_1EF5593D8;
    v8 -= 24;
    *((void *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v13 - 2));
    unsigned int v16 = *(v13 - 2);
    *(v13 - 2) = 0;

    v15 -= 24;
    v13 -= 3;
  }
  while (v13 != v14);
  uint64_t v13 = (id *)*a1;
  uint64_t v17 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
  if (v17 != v13)
  {
    float v18 = v17 - 3;
    unsigned int v19 = v17 - 3;
    unsigned int v20 = v17 - 3;
    do
    {
      BOOL v21 = (void (**)(id *))*v20;
      v20 -= 3;
      (*v21)(v19);
      v18 -= 3;
      BOOL v22 = v19 == v13;
      unsigned int v19 = v20;
    }
    while (!v22);
  }
  if (v13) {
LABEL_19:
  }
    operator delete(v13);
  return v12;
}

void **std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    id v4 = *a1;
    if (v3 != v2)
    {
      id v5 = v3 - 24;
      unint64_t v6 = v3 - 24;
      uint64_t v7 = v3 - 24;
      do
      {
        unint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }
      while (!v9);
      id v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::AnimationManager::~AnimationManager(md::AnimationManager *this)
{
  md::AnimationManager::~AnimationManager(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void (***v4)(void);
  void (**v5)(void);
  void *v6;
  void (***v7)(void);
  void (**v8)(void);
  void *v9;
  void *v10;
  uint64_t v11;

  *(void *)this = &unk_1EF535BD0;
  md::AnimationManager::stopAllAnimations(this);
  unint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    do
    {
      id v10 = *(void **)v2;
      unint64_t v11 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      *((void *)v2 + 2) = &unk_1EF5593D8;

      operator delete(v2);
      unint64_t v2 = v10;
    }
    while (v10);
  }
  unint64_t v3 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    operator delete(v3);
  }
  id v4 = (void (***)(void))*((void *)this + 20);
  if (v4)
  {
    do
    {
      id v5 = *v4;
      (*v4[2])();
      operator delete(v4);
      id v4 = (void (***)(void))v5;
    }
    while (v5);
  }
  unint64_t v6 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void (***)(void))*((void *)this + 15);
  if (v7)
  {
    do
    {
      unint64_t v8 = *v7;
      (*v7[2])();
      operator delete(v7);
      uint64_t v7 = (void (***)(void))v8;
    }
    while (v8);
  }
  BOOL v9 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v9) {
    operator delete(v9);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  *((void *)this + 1) = &unk_1EF559AB8;
}

void sub_1A1DAC5BC(_Unwind_Exception *a1)
{
  std::unordered_map<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>::~unordered_map[abi:nn180100](v1 + 192);
  std::array<std::unordered_set<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,2ul>::~array(v1 + 104);
  std::mutex::~mutex((std::mutex *)(v1 + 40));
  *(void *)(v1 + 8) = &unk_1EF559AB8;

  _Unwind_Resume(a1);
}

void md::AnimationManager::stopAllAnimations(md::AnimationManager *this)
{
  float v18 = 0;
  unsigned int v19 = 0;
  unint64_t v20 = 0;
  unint64_t v2 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  unint64_t v3 = (uint64_t **)*((void *)this + 15);
  if (v3)
  {
    id v4 = 0;
    do
    {
      if ((unint64_t)v4 < v20)
      {
        *(void *)id v4 = &unk_1EF5593D8;
        *((void *)v4 + 1) = 0;
        id v5 = v3[3];
        unint64_t v6 = (void *)*((void *)v4 + 1);
        *((void *)v4 + 1) = v5;

        v4 += 24;
      }
      else
      {
        id v4 = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v18, v3[3]);
      }
      unsigned int v19 = v4;
      unint64_t v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  else
  {
    id v4 = 0;
  }
  for (uint64_t i = (uint64_t **)*((void *)this + 20); i; uint64_t i = (uint64_t **)*i)
  {
    if ((unint64_t)v4 < v20)
    {
      *(void *)id v4 = &unk_1EF5593D8;
      *((void *)v4 + 1) = 0;
      unsigned int v16 = i[3];
      uint64_t v17 = (void *)*((void *)v4 + 1);
      *((void *)v4 + 1) = v16;

      v4 += 24;
    }
    else
    {
      id v4 = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v18, i[3]);
    }
    unsigned int v19 = v4;
  }
  std::mutex::unlock(v2);
  unint64_t v8 = v18;
  if (v18 == v4)
  {
    if (!v18) {
      return;
    }
  }
  else
  {
    BOOL v9 = (id *)v18;
    do
    {
      id v10 = v9[1];
      [v10 stop];

      v9 += 3;
    }
    while (v9 != (id *)v4);
    if (!v8) {
      return;
    }
    if (v8 != v4)
    {
      unint64_t v11 = v4 - 24;
      unsigned int v12 = v11;
      uint64_t v13 = v11;
      do
      {
        long long v14 = *(void (***)(char *))v13;
        v13 -= 24;
        (*v14)(v12);
        v11 -= 24;
        BOOL v15 = v12 == v8;
        unsigned int v12 = v13;
      }
      while (!v15);
    }
  }
  operator delete(v8);
}

void sub_1A1DAC7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v5 = *(void **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      *((void *)v2 + 2) = &unk_1EF5593D8;

      operator delete(v2);
      unint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::array<std::unordered_set<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,2ul>::~array(uint64_t a1)
{
  unint64_t v2 = *(void (****)(void))(a1 + 56);
  if (v2)
  {
    do
    {
      unint64_t v3 = *v2;
      (*v2[2])();
      operator delete(v2);
      unint64_t v2 = (void (***)(void))v3;
    }
    while (v3);
  }
  id v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0;
  if (v4) {
    operator delete(v4);
  }
  id v5 = *(void (****)(void))(a1 + 16);
  if (v5)
  {
    do
    {
      uint64_t v6 = *v5;
      (*v5[2])();
      operator delete(v5);
      id v5 = (void (***)(void))v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

void geo::_retain_ptr<_AnimationManagerRunner * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559AB8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<_AnimationManagerRunner * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559AB8;

  return a1;
}

void md::SnapshotAnimationManager::runAnimation(md::SnapshotAnimationManager *this, VKAnimation *a2)
{
  id v5 = a2;
  [(VKAnimation *)v5 startWithRunner:*((void *)this + 2)];
  double Current = CFAbsoluteTimeGetCurrent();
  -[VKAnimation onTimerFired:](v5, "onTimerFired:");
  if ([(VKAnimation *)v5 timed])
  {
    [(VKAnimation *)v5 duration];
    [(VKAnimation *)v5 onTimerFired:v4 + Current];
  }
  [(VKAnimation *)v5 stop];
}

void sub_1A1DACAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::SnapshotAnimationManager::~SnapshotAnimationManager(md::SnapshotAnimationManager *this)
{
  md::AnimationManager::~AnimationManager(this);
  JUMPOUT(0x1A6239270);
}

void md::ARPassList::buildFrameGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EF56D008;
  v4[1] = a4;
  v4[3] = v4;
  operator new();
}

void sub_1A1DAD218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  std::function<void ()(md::FrameGraphRenderPassBuilder &)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::FrameGraphRenderPassBuilder &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::RenderQueueBase::~RenderQueueBase(md::RenderQueueBase *this)
{
  *(void *)this = &unk_1EF535298;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 4);
    double v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EF535298;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 4);
    double v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *(void *)this = &unk_1EF535298;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 4);
    double v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void md::RenderQueue<md::ARCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    unint64_t v3 = (void *)a1[4];
    double v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::ARCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    unint64_t v3 = (void *)a1[4];
    double v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  HIBYTE(v1CGContextBeginTransparencyLayer(this[1], 0) = 7;
  strcpy((char *)&__src, "Primary");
  double v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 7uLL);
  }
  else
  {
    *(_OWORD *)double v4 = __src;
    *(void *)(a2 + 48) = v10;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  __n128 result = *(__n128 *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)(a2 + 168) = *(void *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 12CGContextBeginTransparencyLayer(this[1], 0) = result;
  if (*(unsigned char *)(v5 + 72))
  {
    __n128 result = *(__n128 *)(v5 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 18CGContextBeginTransparencyLayer(this[1], 0) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 18CGContextBeginTransparencyLayer(this[1], 0) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

uint64_t std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D008;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56D008;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::ARPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::ARPassList::~ARPassList(md::ARPassList *this)
{
  *(void *)this = &unk_1EF553DD8;
  uint64_t v2 = (ggl::RenderQueue *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    ggl::RenderQueue::~RenderQueue(v2);
    MEMORY[0x1A6239270]();
  }
  uint64_t v3 = (md::FrameGraph *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    md::FrameGraph::~FrameGraph(v3);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

{
  ggl::RenderQueue *v2;
  md::FrameGraph *v3;

  *(void *)this = &unk_1EF553DD8;
  uint64_t v2 = (ggl::RenderQueue *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    ggl::RenderQueue::~RenderQueue(v2);
    MEMORY[0x1A6239270]();
  }
  uint64_t v3 = (md::FrameGraph *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    md::FrameGraph::~FrameGraph(v3);
    MEMORY[0x1A6239270]();
  }
}

void altitude::GeoResourceManager::~GeoResourceManager(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t altitude::GeoResourceManager::getTileIdWithDataForTileId(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3 == 63) {
    return *(void *)a2;
  }
  uint64_t v30 = 0;
  v29[0] = a3;
  v29[1] = 0;
  long long v31 = *a2;
  uint64_t v6 = (a3 - 13);
  if (v6 > 0x37) {
    goto LABEL_7;
  }
  if (((1 << (a3 - 13)) & 0x80000000000281) == 0)
  {
    if (v6 == 4)
    {
      int v7 = 1;
LABEL_9:
      uint32x2_t v8 = *(uint32x2_t *)((char *)&v31 + 4);
      unsigned int v9 = HIDWORD(v31);
      if (v31)
      {
        if (v7 - 1 >= (v31 - 1)) {
          int v10 = v31 - 1;
        }
        else {
          int v10 = v7 - 1;
        }
        int v11 = v10 + 1;
        do
        {
          uint32x2_t v8 = vshr_n_u32(v8, 1uLL);
          v9 >>= 1;
          --v11;
        }
        while (v11);
        int v12 = v31 - 1 - v10;
      }
      else
      {
        int v12 = 0;
      }
      LODWORD(v31) = v12;
      *(uint32x2_t *)((char *)&v31 + 4) = v8;
      HIDWORD(v31) = v9;
      goto LABEL_18;
    }
LABEL_7:
    if (a3 != 1) {
      goto LABEL_18;
    }
  }
  int v7 = (int)*(double *)(a1 + 32);
  if (v7) {
    goto LABEL_9;
  }
LABEL_18:
  uint64_t v13 = [MEMORY[0x1E4F64918] modernManager];
  long long v14 = v13;
  if (*(double *)(a1 + 32) <= 1.0) {
    unsigned int v15 = 1;
  }
  else {
    unsigned int v15 = 2;
  }
  if (a3 == 33 || a3 == 17) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v15;
  }
  if (v13)
  {
    float v18 = [v13 activeTileGroup];
    unsigned int v19 = [v18 activeTileSetForTileType:a3 scale:v17];

    if (v19)
    {
      int v20 = v31;
      if (v31)
      {
        if ((a3 - 12) <= 0x38 && ((1 << (a3 - 12)) & 0x100000000000503) != 0
          || a3 == 1)
        {
          do
          {
            unint64_t GEOTileKey = 0;
            uint64_t v33 = 0;
            unint64_t GEOTileKey = altitude::TileKey::getGEOTileKey(v29, a1);
            uint64_t v33 = v21;
            BOOL v22 = [v14 activeTileGroup];
            char v23 = [v22 isHybridModeAvailableForTileKey:&GEOTileKey];

            if ((v23 & 1) == 0)
            {
              int v20 = 0;
              long long v31 = xmmword_1A28FC740;
            }
            if (((v20 != 0) & ~[v19 isAvailableForTileKey:&GEOTileKey]) == 0) {
              break;
            }
            *(uint32x2_t *)((char *)&v31 + 4) = vshr_n_u32(*(uint32x2_t *)((char *)&v31 + 4), 1uLL);
            HIDWORD(v31) >>= 1;
            LODWORD(v31) = --v20;
          }
          while (v20);
        }
        else
        {
          uint32x2_t v25 = *(uint32x2_t *)((char *)&v31 + 4);
          unsigned int v26 = HIDWORD(v31);
          int v27 = v31 - 1;
          do
          {
            unint64_t GEOTileKey = 0;
            uint64_t v33 = 0;
            unint64_t GEOTileKey = altitude::TileKey::getGEOTileKey(v29, a1);
            uint64_t v33 = v28;
            if ([v19 isAvailableForTileKey:&GEOTileKey]) {
              break;
            }
            LODWORD(v31) = v27;
            uint32x2_t v25 = vshr_n_u32(v25, 1uLL);
            *(uint32x2_t *)((char *)&v31 + 4) = v25;
            v26 >>= 1;
            HIDWORD(v31) = v26;
            --v27;
          }
          while (v27 != -1);
        }
      }
    }
    else
    {
      long long v31 = xmmword_1A28FC740;
    }
  }
  uint64_t v3 = v31;

  return v3;
}

void sub_1A1DADE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t altitude::GeoResourceManager::getVersionForGEOType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  if (a2 <= 0x2C && ((1 << a2) & 0x1C000001C000) != 0)
  {
    double v4 = [MEMORY[0x1E4F643D0] sharedManager];
    uint64_t v5 = [v4 versionForRegion:a3];
  }
  else
  {
    unsigned int v9 = a2;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    int v13 = 0;
    v14[0] = altitude::TileKey::getGEOTileKey(&v9, a1);
    v14[1] = v7;
    uint32x2_t v8 = [MEMORY[0x1E4F64918] modernManager];
    uint64_t v5 = [v8 versionForTileKey:v14];
  }
  return v5;
}

void sub_1A1DADF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::string)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyString,std::string>>::~Monitorable(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    GEOConfigRemoveBlockListener();
    uint64_t v2 = *(void **)(a1 + 40);
    *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = 0;
  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    double v4 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  double v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
LABEL_9:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_11:

  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1A1DAE134(_Unwind_Exception *a1)
{
  std::function<void ()(std::string)>::~function((void *)(v1 + 64));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 48);

  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(a1);
}

void ___ZN2md11MonitorableINS_11ConfigValueI18GEOConfigKeyStringNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNS3_8functionIFvS9_EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (*v1)
    {
      if (*(char *)(v2 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v2 + 16), *(void *)(v2 + 24));
      }
      else {
        std::string v6 = *(std::string *)(v2 + 16);
      }
      if (*(_DWORD *)v2) {
        BOOL v3 = *(void *)(v2 + 8) == 0;
      }
      else {
        BOOL v3 = 1;
      }
      if (!v3) {
        md::ConfigValue<GEOConfigKeyString,std::string>::_update(v2);
      }
      uint64_t v4 = *(void *)(v2 + 88);
      if (!v4) {
        goto LABEL_16;
      }
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
        uint64_t v4 = *(void *)(v2 + 88);
        if (!v4)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
      }
      else
      {
        std::string __p = v6;
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 48))(v4, &__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_17;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
      }
        operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A1DAE27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)a2;
  int v4 = *(char *)(a2 + 23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  **(unsigned char **)(a1 + 8) = 1;
  if (v4 < 0) {
    operator delete(v3);
  }
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1EF51E020;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::~__func(void *a1)
{
  *a1 = &unk_1EF51E020;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0,std::allocator<md::LabelDebugSettings::LabelDebugSettings(std::shared_ptr<md::TaskContext> const&)::$_0>,void ()(std::string)>::~__func(void *a1)
{
  *a1 = &unk_1EF51E020;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::StyleSettingsParser::~StyleSettingsParser(md::StyleSettingsParser *this)
{
  *((void *)this + 3) = &unk_1EF5440A8;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(*((char **)this + 6));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void md::TransitRenderLayer::setDebugHighlightedItem(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 376);
  uint64_t v4 = *(void ***)(v3 + 304);
  uint64_t v5 = (void **)*a2;
  if (v4 != (void **)*a2)
  {
    if (v4)
    {
      ((void (*)(void **, void))(*v4)[2])(v4, 0);
      uint64_t v3 = *(void *)(a1 + 376);
      uint64_t v5 = (void **)*a2;
    }
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint32x2_t v8 = *(std::__shared_weak_count **)(v3 + 312);
    *(void *)(v3 + 304) = v5;
    *(void *)(v3 + 312) = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 376) + 304);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 1);
    }
    uint64_t v10 = **(void **)(*(void *)(a1 + 40) + 88);
    if (v10)
    {
      LOBYTE(__p[0]) = 7;
      md::MapEngine::setNeedsTick(v10, __p);
    }
    uint64_t v4 = *(void ***)(*(void *)(a1 + 376) + 304);
  }
  if (v4)
  {
    uint64_t v11 = (const QuadTile *)*v4[1];
    if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_49);
    }
    uint64_t v12 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = v11 + 7;
      long long v14 = __p;
      md::HighlightHelper::to_string((md::HighlightHelper *)__p, v13);
      if (v18 < 0) {
        long long v14 = (void **)__p[0];
      }
      (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 376) + 304) + 32))(*(void *)(*(void *)(a1 + 376) + 304), 1);
      id v15 = objc_claimAutoreleasedReturnValue();
      uint64_t v16 = [v15 UTF8String];
      *(_DWORD *)buf = 136315394;
      int v20 = v14;
      __int16 v21 = 2080;
      uint64_t v22 = v16;
      _os_log_impl(&dword_1A1780000, v12, OS_LOG_TYPE_INFO, "Transit Item:\nTile:%s\n%s", buf, 0x16u);

      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1A1DAE888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = v15;

  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZL32GEOGetVectorKitLabelHighlightLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "LabelHighlight");
  uint64_t v1 = (void *)GEOGetVectorKitLabelHighlightLog(void)::log;
  GEOGetVectorKitLabelHighlightLog(void)::log = (uint64_t)v0;
}

void md::TransitRenderLayer::updateDebugSettings(md::TransitRenderLayer *this)
{
  if (*(unsigned char *)(*((void *)this + 47) + 4))
  {
    id v14 = +[VKDebugSettings sharedSettings];
    if ([v14 disableTransitLineMerging])
    {
      int v2 = 7;
    }
    else if ([v14 disableTransitLineGroupMerging])
    {
      int v2 = 4;
    }
    else
    {
      int v2 = 0;
    }
    uint64_t v3 = *((void *)this + 47);
    if (*(unsigned __int8 *)(v3 + 323) != v2)
    {
      *(unsigned char *)(v3 + 323) = v2;
      int v4 = *((_DWORD *)this + 102);
      if ((v4 + 1) > 1) {
        int v5 = v4 + 1;
      }
      else {
        int v5 = 1;
      }
      *((_DWORD *)this + 102) = v5;
    }
    int v6 = *(unsigned __int8 *)(v3 + 324);
    if (v6 != [v14 disableIntraLinkTransitLineCrossings])
    {
      *(unsigned char *)(*((void *)this + 47) + 324) = [v14 disableIntraLinkTransitLineCrossings];
      int v7 = *((_DWORD *)this + 102);
      if ((v7 + 1) > 1) {
        int v8 = v7 + 1;
      }
      else {
        int v8 = 1;
      }
      *((_DWORD *)this + 102) = v8;
    }
    if (([v14 transitHighlighting] & 1) == 0 && !*(unsigned char *)(*((void *)this + 47) + 322))
    {
      v15[0] = 0;
      v15[1] = 0;
      md::TransitRenderLayer::setDebugHighlightedItem((uint64_t)this, v15);
    }
    char v9 = [v14 disableOverlayTextConsole];
    uint64_t v10 = *((void *)this + 47);
    *(unsigned char *)(v10 + 322) = v9;
    int v11 = *(unsigned __int8 *)(v10 + 321);
    if (v11 != [v14 paintTransitCounts])
    {
      *(unsigned char *)(*((void *)this + 47) + 321) = [v14 paintTransitCounts];
      int v12 = *((_DWORD *)this + 102);
      if ((v12 + 1) > 1) {
        int v13 = v12 + 1;
      }
      else {
        int v13 = 1;
      }
      *((_DWORD *)this + 102) = v13;
      *((unsigned char *)this + 416) = 1;
    }
  }
}

void sub_1A1DAEA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::debugLayoutWithContext(md::TransitRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v2 = *((void *)this + 47);
  uint64_t v3 = (void *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_39;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v8 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v8 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  char v9 = *(void **)(*v3 + 8 * v8);
  if (!v9) {
    goto LABEL_39;
  }
  uint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_39;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_39;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_39;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == 0x1AF456233693CD46) {
      break;
    }
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
    if (v12 != v8) {
      goto LABEL_39;
    }
LABEL_11:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_39;
    }
  }
  if (v10[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = v10[5];
  if (*(void *)(v14 + 8) != 0x1AF456233693CD46 || (id v15 = *(void **)(v14 + 32)) == 0)
  {
LABEL_39:
    *(unsigned char *)(v2 + 296) = 0;
    return;
  }
  *(void *)(v2 + 16CGContextBeginTransparencyLayer(this[1], 0) = v15[672];
  *(void *)(v2 + 168) = v15[673];
  *(void *)(v2 + 176) = v15[674];
  *(void *)(v2 + 184) = v15[675];
  *(void *)(v2 + 192) = v15[676];
  *(void *)(v2 + 20CGContextBeginTransparencyLayer(this[1], 0) = v15[677];
  *(void *)(v2 + 208) = v15[678];
  *(void *)(v2 + 216) = v15[679];
  *(void *)(v2 + 224) = v15[680];
  *(void *)(v2 + 232) = v15[681];
  *(void *)(v2 + 24CGContextBeginTransparencyLayer(this[1], 0) = v15[682];
  *(void *)(v2 + 248) = v15[683];
  *(void *)(v2 + 2geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 56) = v15[684];
  *(void *)(v2 + 264) = v15[685];
  *(void *)(v2 + 272) = v15[686];
  *(void *)(v2 + 28CGContextBeginTransparencyLayer(this[1], 0) = v15[687];
  [*(id *)a2 sizeInPixels];
  *(float *)&double v16 = v16;
  *(float *)&double v17 = v17;
  *(_DWORD *)(v2 + 288) = LODWORD(v16);
  *(_DWORD *)(v2 + 292) = LODWORD(v17);
  *(unsigned char *)(v2 + 296) = 1;
  uint64_t v18 = *((void *)this + 47);
  uint64_t v19 = *(void *)(v18 + 304);
  if (v19)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v19 + 24))(v19)
      || (uint64_t v20 = *((void *)this + 34), v21 = *((void *)this + 35), v20 == v21))
    {
LABEL_30:
      *(void *)float v37 = 0;
      *(void *)&v37[8] = 0;
      md::TransitRenderLayer::setDebugHighlightedItem((uint64_t)this, v37);
      uint64_t v18 = *((void *)this + 47);
      uint64_t v22 = *(void *)(v18 + 304);
    }
    else
    {
      uint64_t v18 = *((void *)this + 47);
      uint64_t v22 = *(void *)(v18 + 304);
      while (*(void *)(*(void *)v20 + 384) != **(void **)(v22 + 8))
      {
        v20 += 8;
        if (v20 == v21) {
          goto LABEL_30;
        }
      }
    }
    if (v22) {
      goto LABEL_33;
    }
  }
  if (*(unsigned char *)(v18 + 321))
  {
LABEL_33:
    char v23 = 1;
    goto LABEL_34;
  }
  if (*(unsigned char *)(v18 + 320))
  {
    char v23 = 0;
LABEL_34:
    double v24 = (ggl::DebugConsole *)md::LayoutContext::debugConsoleForId((void **)a2, 4);
    uint64_t v25 = md::LayoutContext::debugConsoleForId((void **)a2, 5);
    if (v24)
    {
      unsigned int v26 = (ggl::DebugConsole *)v25;
      if (v25)
      {
        if ((v23 & 1) == 0 && *(unsigned char *)(*((void *)this + 47) + 320)) {
          ggl::DebugConsole::begin(v24);
        }
        [*(id *)(*((void *)this + 5) + 104) contentScale];
        md::LayoutContext::frameState(a2);
        float32x2_t v27 = *(float32x2_t *)(*((void *)this + 47) + 288);
        uint64_t v28 = *((void *)a2 + 4);
        double v29 = (std::__shared_weak_count *)*((void *)a2 + 5);
        if (v29)
        {
          char v30 = 1;
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v31 = *((void *)a2 + 4);
          double v32 = (std::__shared_weak_count *)*((void *)a2 + 5);
          double v33 = *(double *)(v28 + 64);
          if (v32)
          {
            char v30 = 0;
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = v31;
        }
        else
        {
          double v32 = 0;
          double v33 = *(double *)(v28 + 64);
          char v30 = 1;
        }
        float v34 = v33;
        int v35 = *(unsigned __int8 *)(v28 + 72);
        *(float *)float v37 = 2.0 / v27.f32[0];
        *(_OWORD *)&v37[4] = 0uLL;
        float v38 = 2.0 / v27.f32[1];
        float v36 = v34 + -1.0;
        if (!v35) {
          float v36 = 1.0 - v34;
        }
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        float v41 = v36 * 0.5;
        int v42 = 0;
        float32x2_t v43 = vdiv_f32(vneg_f32(v27), v27);
        float v44 = (float)(v34 * 0.5) + 0.5;
        int v45 = 1065353216;
        if ((v30 & 1) == 0 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        ggl::DebugConsole::setProjection((uint64_t)v26, v37);
        ggl::DebugConsole::begin(v26);
      }
    }
  }
}

void sub_1A1DAF3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1A1DAF450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void altitude::CameraManager::~CameraManager(altitude::CameraManager *this)
{
}

void altitude::CameraManager::update(altitude::CameraManager *this, altitude::GlobeView *a2, int a3)
{
  uint64_t v424 = *MEMORY[0x1E4F143B8];
  BOOL v6 = *((unsigned char *)this + 8) != 0;
  if (*((unsigned char *)this + 8))
  {
    altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 3, 0, (uint64_t)this + 40, 1);
    *((unsigned char *)this + 9) = 1;
  }
  if (*((unsigned char *)this + 73))
  {
    BOOL v6 = 1;
    altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 26, 0, (uint64_t)this + 80, 1);
    *((unsigned char *)this + 74) = 1;
  }
  if (!*((unsigned char *)this + 120))
  {
    if (!*((unsigned char *)this + 176))
    {
      if (!v6) {
        goto LABEL_16;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 38, 0, (uint64_t)this + 128, 1);
  *((unsigned char *)this + 121) = 1;
  if (*((unsigned char *)this + 176))
  {
LABEL_9:
    altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 52, 0, (uint64_t)this + 184, 1);
    *((void *)this + 28) = *(void *)(*((void *)a2 + 9) + 32);
    *((unsigned char *)this + 177) = 1;
  }
LABEL_10:
  uint64_t v7 = *((void *)a2 + 66);
  if (v7)
  {
    uint64_t v8 = (double *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 24))(v7, 0, 0xFFFFFFFFLL);
    if (v8)
    {
      double v9 = v8[10];
      double v10 = v8[11];
      double v11 = v8[12];
      double v12 = v8[9];
      double v13 = v10 * (v12 + v12) + v11 * (v9 + v9);
      double v14 = -((v9 + v9) * v10 - v11 * (v12 + v12));
      uint64_t v15 = *((void *)a2 + 9);
      double v16 = *(double *)(v15 + 32);
      long double v17 = v8[6] - v16 * v13;
      long double v18 = v8[7] + v16 * v14;
      long double v19 = v8[8] + v16 * ((v12 + v12) * v12 + -1.0 + (v9 + v9) * v9);
      double v20 = sqrt(v17 * v17 + v18 * v18);
      double v21 = atan2(v19, v20 * 0.996647189);
      long double v22 = atan2(v18, v17);
      __double2 v23 = __sincos_stret(v21);
      double v24 = atan2(v19 + v23.__sinval * v23.__sinval * 42841.3115 * v23.__sinval, v20 + v23.__cosval * v23.__cosval * -42697.6727 * v23.__cosval);
      __double2 v25 = __sincos_stret(v24);
      *(double *)(v15 + 8) = v24;
      *(long double *)(v15 + 16) = v22;
      *(double *)(v15 + 24) = v20 / v25.__cosval + -6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
    }
  }
  if (!*((unsigned char *)this + 8) || !*((unsigned char *)this + 241)) {
    *((unsigned char *)this + 242) = 0;
  }
LABEL_16:
  uint64_t v26 = *((void *)a2 + 9);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v418.f64, (double *)(v26 + 8));
  double v27 = *(double *)(v26 + 16);
  double v28 = *(double *)(v26 + 24);
  __double2 v29 = __sincos_stret(*(double *)(v26 + 8));
  double v30 = 6378137.0 / sqrt(v29.__sinval * v29.__sinval * -0.00669437999 + 1.0);
  double v31 = (v30 + v28) * v29.__cosval;
  __double2 v32 = __sincos_stret(v27);
  double v401 = v31 * v32.__sinval;
  double v405 = v31 * v32.__cosval;
  *(double *)double v422 = v31 * v32.__cosval;
  *(double *)&v422[8] = v31 * v32.__sinval;
  double v396 = (v28 + v30 * 0.99330562) * v29.__sinval;
  *(double *)&v422[16] = v396;
  double v33 = v418.f64[0];
  *(float64x2_t *)double v423 = v418;
  _D15 = v419;
  double v34 = *(double *)&v420;
  *(double *)&v423[16] = v419;
  double v36 = (v34 + v34) * *((double *)&v420 + 1) + *((double *)&v421 + 1) * (*(double *)&v421 * -2.0);
  double v382 = -(*(double *)&v421 * -2.0 * *((double *)&v420 + 1) - (v34 + v34) * *((double *)&v421 + 1));
  double v383 = *(double *)&v421 * -2.0 * *(double *)&v421 + 1.0 - (v34 + v34) * v34;
  double v37 = v418.f64[1];
  if (!*((unsigned char *)this + 9)
    || *((_DWORD *)this + 3) == *((_DWORD *)this + 5) && *((_DWORD *)this + 4) == *((_DWORD *)this + 6))
  {
    int v38 = 0;
    if (!*((unsigned char *)this + 74)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int32x2_t v124 = *(int32x2_t *)((char *)this + 20);
  int32x2_t v125 = *(int32x2_t *)((char *)this + 12);
  double v387 = v418.f64[1];
  float64x2_t v393 = v418;
  if (*((unsigned char *)this + 72))
  {
    int32x2_t v126 = vsub_s32(v125, v124);
    int32x2_t v124 = *(int32x2_t *)((char *)this + 28);
    int32x2_t v125 = vadd_s32(v126, v124);
  }
  uint64_t v127 = *((void *)a2 + 99);
  double v128 = *(double *)(v26 + 32);
  double v129 = cos(*(long double *)(v26 + 40));
  v130.i64[0] = v125.i32[0];
  v130.i64[1] = v125.i32[1];
  float64x2_t v131 = vcvtq_f64_s64(v130);
  uint64_t v132 = *(void *)(v127 + 40);
  uint64_t v133 = *(void *)(v127 + 48);
  v130.i64[0] = (int)v132;
  v130.i64[1] = SHIDWORD(v132);
  float64x2_t v134 = vcvtq_f64_s64(v130);
  v130.i64[0] = (int)v133;
  v130.i64[1] = SHIDWORD(v133);
  __asm { FMOV            V4.2D, #0.5 }
  float64x2_t v136 = vmulq_f64(vsubq_f64(vcvtq_f64_s64(v130), v134), _Q4);
  float64x2_t v137 = vaddq_f64(v136, v134);
  float64x2_t v138 = vmulq_n_f64(v136, v129);
  *(int32x2_t *)&v131.f64[0] = vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vaddq_f64(v138, v137), vmaxnmq_f64(vsubq_f64(v137, v138), v131))));
  int v139 = LODWORD(v131.f64[0]);
  int32x2_t v379 = *(int32x2_t *)&v131.f64[0];
  int v140 = HIDWORD(v131.f64[0]);
  if (!altitude::GlobeView::getDirFromScreenPosition((uint64_t)a2, &v418, (float)SLODWORD(v131.f64[0]), (float)SHIDWORD(v131.f64[0]))|| (int32x2_t v141 = vadd_s32(vsub_s32(v124, v125), v379), !altitude::GlobeView::getDirFromScreenPosition((uint64_t)a2, &v412, (float)v141.i32[0], (float)v141.i32[1])))
  {
    int v38 = 0;
    double v37 = v387;
    double v33 = v393.f64[0];
    if (!*((unsigned char *)this + 74)) {
      goto LABEL_21;
    }
LABEL_20:
    double v39 = *((double *)this + 11);
    double v40 = *((double *)this + 12);
    double v384 = v37;
    double v390 = v33;
    __double2 v41 = __sincos_stret(*((double *)this + 10));
    double v42 = 6378137.0 / sqrt(v41.__sinval * v41.__sinval * -0.00669437999 + 1.0);
    double v43 = v36;
    double v44 = (v42 + v40) * v41.__cosval;
    __double2 v45 = __sincos_stret(v39);
    double v46 = v44 * v45.__cosval;
    double v47 = v44 * v45.__sinval;
    double v48 = (v40 + v42 * 0.99330562) * v41.__sinval;
    __double2 v49 = __sincos_stret(*((double *)this + 14) * 0.5);
    double v50 = v49.__sinval / sqrt(v46 * v46 + v47 * v47 + v48 * v48);
    double v51 = v50 * v46;
    double v52 = v50 * v47;
    double v53 = v50 * v48;
    double v54 = -(v53 * v384 - v52 * _D15) - (v53 * v384 - v52 * _D15);
    double v55 = -(v51 * _D15 - v53 * v390) - (v51 * _D15 - v53 * v390);
    double v56 = -(v52 * v390 - v51 * v384) - (v52 * v390 - v51 * v384);
    double v33 = v390 + v54 * v49.__cosval + v56 * v52 - v55 * v53;
    double v37 = v384 + v54 * v53 + v55 * v49.__cosval - v56 * v51;
    _D15 = _D15 + v55 * v51 + v56 * v49.__cosval - v54 * v52;
    *(double *)double v423 = v33;
    *(double *)&v423[8] = v37;
    *(double *)&v423[16] = _D15;
    double v57 = -(v53 * v401 - v52 * v396) - (v53 * v401 - v52 * v396);
    double v58 = -(v51 * v396 - v53 * v405) - (v51 * v396 - v53 * v405);
    double v59 = -(v52 * v405 - v51 * v401) - (v52 * v405 - v51 * v401);
    double v401 = v401 + v57 * v53 + v58 * v49.__cosval - v59 * v51;
    double v405 = v405 + v57 * v49.__cosval + v59 * v52 - v58 * v53;
    *(double *)double v422 = v405;
    *(double *)&v422[8] = v401;
    double v396 = v396 + v58 * v51 + v59 * v49.__cosval - v57 * v52;
    *(double *)&v422[16] = v396;
    double v60 = -(v383 * v53 - v382 * v52) - (v383 * v53 - v382 * v52);
    double v61 = -(v51 * v382 - v43 * v53) - (v51 * v382 - v43 * v53);
    double v62 = -(v43 * v52 - v383 * v51) - (v43 * v52 - v383 * v51);
    double v36 = v43 + v60 * v49.__cosval + v62 * v52 - v61 * v53;
    double v382 = v382 - v60 * v52 + v61 * v51 + v62 * v49.__cosval;
    double v383 = v383 + v60 * v53 + v61 * v49.__cosval - v62 * v51;
    *((void *)this + 14) = 0;
    int v38 = 1;
    goto LABEL_21;
  }
  double v380 = v36;
  double v143 = v418.f64[1];
  double v142 = v419;
  double v402 = v413;
  double v406 = v128 * 0.2;
  double v144 = v418.f64[0];
  double v397 = v412.f64[1];
  double v371 = v412.f64[0];
  float64_t v145 = -(v418.f64[1] * v413 - v419 * v412.f64[1]);
  float64_t v146 = -(v412.f64[0] * v419 - v418.f64[0] * v413);
  float64_t v147 = -(v418.f64[0] * v412.f64[1] - v412.f64[0] * v418.f64[1]);
  double v148 = 1.0 / sqrt(v145 * v145 + v146 * v146 + v147 * v147);
  double v365 = v148 * v146;
  double v368 = v148 * v145;
  double v376 = v148 * v147;
  altitude::GlobeView::getSpherePointIntersection((uint64_t)a2, v139, v140, 1, (double *)this + 5, (double *)(*((void *)a2 + 9) + 8), v410, 1);
  double v149 = _D15;
  double v150 = v410[0];
  double v151 = v410[1];
  double v152 = v411;
  double v153 = sqrt(v150 * v150 + v151 * v151);
  double v154 = atan2(v411, v153 * 0.996647189);
  __double2 v155 = __sincos_stret(v154);
  long double v156 = atan2(v152 + v155.__sinval * v155.__sinval * 42841.3115 * v155.__sinval, v153 + v155.__cosval * v155.__cosval * -42697.6727 * v155.__cosval);
  long double v157 = cos(v156);
  double v158 = fmax(v406, sqrt((v150 - v393.f64[0]) * (v150 - v393.f64[0]) + (v151 - v387) * (v151 - v387) + (v152 - v149)* (v152 - v149)));
  double v159 = sqrt(v158 * v158 + v158 * v158 - (v371 * v144 + v397 * v143 + v402 * v142) * (v158 * v158 + v158 * v158));
  *((double *)this + 8) = v159;
  double v160 = v159
       * (0.000000156961014
        * fmin(1.0/ fabs(-(v387 * v143 + v149 * v142 + v393.f64[0] * v144)/ sqrt(vmulq_f64(v393, v393).f64[0] + v387 * v387 + v149 * v149)), 2.0));
  double v403 = *(double *)&v422[8];
  double v407 = *(double *)&v422[16];
  double v161 = 1.0 / sqrt(*(double *)v422 * *(double *)v422 + v403 * v403 + v407 * v407);
  double v398 = *(double *)v422;
  double v162 = v161 * *(double *)v422;
  double v163 = -(*(double *)&v422[8] * v161);
  double v164 = 1.0 / sqrt(v163 * v163 + v162 * v162);
  double v165 = v164 * v163;
  double v166 = v164 * v162;
  double v372 = -(v164 * v163);
  double v361 = v164 * v163 * v368 + v164 * v162 * v365;
  double v363 = -(v164 * v163 * v365 - v164 * v162 * v368);
  double v167 = -(v149 * (v164 * v162));
  double v168 = -(v165 * v387 - v164 * v162 * v393.f64[0]);
  double v169 = v160
       * fmin(1.0 / v157, 4.0)
       * (v165 * v149 * v365 + v168 * v376 + v167 * v368)
       / sqrt(v167 * v167 + v165 * v149 * (v165 * v149) + v168 * v168);
  double v170 = fmax(fabs(v156), 1.30899694);
  double v171 = 1.0;
  if (v170 <= 1.48352986) {
    double v172 = v170 * 5.72957795 + -7.5;
  }
  else {
    double v172 = 1.0;
  }
  double v173 = -((v172 * 2.0 + -3.0) * (v172 * v172));
  double v174 = v169 + -(v169 - v160 * v376) * v173;
  if (*(double *)(*((void *)a2 + 9) + 32) > 1000000.0)
  {
    int v175 = *((_DWORD *)this + 4) - *((_DWORD *)this + 8);
    if (v175)
    {
      double v176 = fmax(fabs((double)(*((_DWORD *)this + 3) - *((_DWORD *)this + 7)) / (double)v175), 1.0);
      if (v176 <= 2.0) {
        double v177 = v176 + -1.0;
      }
      else {
        double v177 = 1.0;
      }
      double v171 = v177 * v177 * (v177 * 2.0 + -3.0) + 1.0;
    }
  }
  __double2 v178 = __sincos_stret(v174 * 0.5);
  __double2 v179 = __sincos_stret(v160 * 0.5 * v171 * v361);
  double v180 = -(v179.__sinval * v166 * v178.__sinval - v179.__sinval * v165 * v178.__cosval);
  double v181 = v179.__sinval * v165 * v178.__sinval + v179.__sinval * v166 * v178.__cosval;
  __double2 v182 = __sincos_stret(v160 * 0.5 * v173 * v363);
  double v183 = v180 * v182.__cosval
       - (v179.__cosval * v178.__sinval * (v182.__sinval * v372)
        - v179.__cosval * v178.__cosval * (v182.__sinval * v166));
  double v184 = v179.__cosval * v178.__cosval * (v182.__sinval * v372)
       + v179.__cosval * v178.__sinval * (v182.__sinval * v166)
       + v181 * v182.__cosval;
  double v185 = v179.__cosval * v178.__sinval * v182.__cosval - (v181 * (v182.__sinval * v166) - v180 * (v182.__sinval * v372));
  double v186 = -(v181 * (v182.__sinval * v372) + v180 * (v182.__sinval * v166) - v179.__cosval * v178.__cosval * v182.__cosval);
  double v188 = *(double *)&v423[8];
  double v187 = *(double *)&v423[16];
  double v189 = *(double *)v423;
  double v190 = -(v185 * v188 - v184 * v187) - (v185 * v188 - v184 * v187);
  double v191 = -(v183 * v187 - v185 * v189) - (v183 * v187 - v185 * v189);
  double v192 = -(v184 * v189 - v183 * v188) - (v184 * v189 - v183 * v188);
  double v33 = *(double *)v423 + v190 * v186 + v192 * v184 - v191 * v185;
  double v37 = *(double *)&v423[8] + v190 * v185 + v191 * v186 - v192 * v183;
  _D15 = *(double *)&v423[16] + v191 * v183 + v192 * v186 - v190 * v184;
  *(double *)double v423 = v33;
  *(double *)&v423[8] = v37;
  *(double *)&v423[16] = _D15;
  double v193 = -(v403 * v185 - v184 * v407) - (v403 * v185 - v184 * v407);
  double v194 = -(v183 * v407 - v398 * v185) - (v183 * v407 - v398 * v185);
  double v195 = -(v398 * v184 - v403 * v183) - (v398 * v184 - v403 * v183);
  double v196 = v398 + v193 * v186 + v195 * v184 - v194 * v185;
  double v197 = v403 + v193 * v185 + v194 * v186 - v195 * v183;
  double v198 = v407 - v193 * v184 + v194 * v183 + v195 * v186;
  double v401 = v197;
  double v405 = v196;
  *(double *)double v422 = v196;
  *(double *)&v422[8] = v197;
  double v396 = v198;
  *(double *)&v422[16] = v198;
  double v199 = -(v383 * v185 - v382 * v184) - (v383 * v185 - v382 * v184);
  double v200 = -(v382 * v183 - v380 * v185) - (v382 * v183 - v380 * v185);
  double v201 = -(v380 * v184 - v383 * v183) - (v380 * v184 - v383 * v183);
  double v36 = v380 + v199 * v186 + v201 * v184 - v200 * v185;
  double v382 = v382 - v199 * v184 + v200 * v183 + v201 * v186;
  double v383 = v383 + v199 * v185 + v200 * v186 - v201 * v183;
  *(void *)((char *)this + 2CGContextBeginTransparencyLayer(this[1], 0) = *(void *)((char *)this + 12);
  int v38 = 1;
  if (*((unsigned char *)this + 74)) {
    goto LABEL_20;
  }
LABEL_21:
  if (*((unsigned char *)this + 121))
  {
    double v377 = v36;
    uint64_t v63 = *((void *)a2 + 9);
    double v373 = *((double *)this + 21);
    double v64 = *(double *)(v63 + 40);
    double v65 = *((double *)this + 17);
    double v66 = *((double *)this + 18);
    double v385 = v37;
    double v391 = v33;
    __double2 v67 = __sincos_stret(*((double *)this + 16));
    double v68 = 6378137.0 / sqrt(v67.__sinval * v67.__sinval * -0.00669437999 + 1.0);
    double v69 = (v68 + v66) * v67.__cosval;
    __double2 v70 = __sincos_stret(v65);
    double v71 = v69 * v70.__cosval;
    double v72 = v69 * v70.__sinval;
    double v73 = (v66 + v68 * 0.99330562) * v67.__sinval;
    double v74 = *(double *)(v63 + 32) * 0.2;
    double v75 = v405 - v391;
    double v76 = v401 - v385;
    double v77 = v396 - _D15;
    double v78 = 1.0 / sqrt(v75 * v75 + v76 * v76 + v77 * v77);
    double v79 = v78 * (v405 - v391);
    double v80 = v78 * (v401 - v385);
    double v81 = v78 * (v396 - _D15);
    if (v79 * (v69 * v70.__cosval - v391) + v80 * (v69 * v70.__sinval - v385) + v81 * (v73 - _D15) < v74)
    {
      double v71 = v391 + v79 * v74;
      double v72 = v385 + v80 * v74;
      double v73 = _D15 + v81 * v74;
    }
    double v82 = fmin(fmax(v64 + v373, 0.0), 3.14159265) - v64;
    double v362 = v391 - v71;
    double v364 = _D15;
    double v360 = v385 - v72;
    double v83 = _D15 - v73;
    double v374 = v405 - v71;
    double v366 = v396 - v73;
    double v369 = v401 - v72;
    double v85 = v382;
    double v84 = v383;
    double v86 = -(v383 * v77 - v382 * v76);
    double v87 = v377;
    double v88 = -(v382 * v75 - v377 * v77);
    double v89 = -(v377 * v76 - v383 * v75);
    __double2 v90 = __sincos_stret(v82 * 0.5);
    double v91 = v90.__sinval / sqrt(v86 * v86 + v88 * v88 + v89 * v89);
    double v92 = v91 * v86;
    double v93 = v91 * v88;
    double v94 = v91 * v89;
    double v95 = -(v94 * v360 - v93 * v83) - (v94 * v360 - v93 * v83);
    double v96 = -(v92 * v83 - v94 * v362) - (v92 * v83 - v94 * v362);
    double v97 = -(v93 * v362 - v92 * v360) - (v93 * v362 - v92 * v360);
    double v33 = v391 + v95 * v90.__cosval + v97 * v93 - v96 * v94;
    double v37 = v385 + v95 * v94 + v96 * v90.__cosval - v97 * v92;
    _D15 = v364 + v96 * v92 + v97 * v90.__cosval - v95 * v93;
    *(double *)double v423 = v33;
    *(double *)&v423[8] = v37;
    *(double *)&v423[16] = _D15;
    double v98 = -(v94 * v369 - v93 * v366) - (v94 * v369 - v93 * v366);
    double v99 = -(v92 * v366 - v94 * v374) - (v92 * v366 - v94 * v374);
    double v100 = -(v93 * v374 - v92 * v369) - (v93 * v374 - v92 * v369);
    double v401 = v401 + v98 * v94 + v99 * v90.__cosval - v100 * v92;
    double v405 = v405 + v98 * v90.__cosval + v100 * v93 - v99 * v94;
    *(double *)double v422 = v405;
    *(double *)&v422[8] = v401;
    double v396 = v396 + v99 * v92 + v100 * v90.__cosval - v98 * v93;
    *(double *)&v422[16] = v396;
    double v101 = -(v94 * v84 - v93 * v85) - (v94 * v84 - v93 * v85);
    double v102 = -(v92 * v85 - v87 * v94) - (v92 * v85 - v87 * v94);
    double v103 = -(v87 * v93 - v92 * v84) - (v87 * v93 - v92 * v84);
    double v36 = v377 + v101 * v90.__cosval + v103 * v93 - v102 * v94;
    double v382 = v382 + v102 * v92 + v103 * v90.__cosval - v101 * v93;
    double v383 = v383 + v101 * v94 + v102 * v90.__cosval - v103 * v92;
    *((void *)this + 21) = 0;
    int v38 = 1;
  }
  if (*((unsigned char *)this + 177))
  {
    double v386 = v37;
    double v392 = v33;
    double v378 = v36;
    double v370 = altitude::GlobeView::calculateMinZoomDistance(a2);
    double v367 = *((double *)a2 + 50);
    double v375 = altitude::GlobeView::calculateMinZoomDistance(a2);
    double v104 = *(double *)(*((void *)a2 + 9) + 32);
    if (v104 < *((double *)this + 28) * 0.125)
    {
      altitude::GlobeView::getCoordAtScreenPosition((uint64_t)a2, (int *)this + 52, 0, (uint64_t)this + 184, 1);
      *((void *)this + 28) = *(void *)(*((void *)a2 + 9) + 32);
    }
    double v105 = *((double *)this + 24);
    double v106 = *((double *)this + 25);
    __double2 v107 = __sincos_stret(*((double *)this + 23));
    double v108 = 6378137.0 / sqrt(v107.__sinval * v107.__sinval * -0.00669437999 + 1.0);
    double v109 = (v108 + v106) * v107.__cosval;
    __double2 v110 = __sincos_stret(v105);
    double v111 = v109 * v110.__cosval;
    double v112 = v109 * v110.__sinval;
    double v113 = (v106 + v108 * 0.99330562) * v107.__sinval;
    double v114 = *((double *)this + 27);
    *(double *)&_Q22 = v386;
    if (v114 > 1.0)
    {
      _Q22 = *(_OWORD *)&v423[8];
      _D15 = *(double *)&v423[16];
      __asm { FMLA            D5, D6, V22.D[1] }
      if (sqrt(_D5) - sqrt(v111 * v111 + v112 * v112 + v113 * v113) < v104 * 0.2)
      {
        double v121 = 0.2 - v114 * 0.2;
        double v122 = v121 * (v405 - v392);
        float64x2_t v123 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v422[8], *(float64x2_t *)&v423[8]), v121);
        *(double *)double v423 = v122 + v392;
        *(float64x2_t *)&v423[8] = vaddq_f64(v123, *(float64x2_t *)&v423[8]);
        *(double *)double v422 = v405 + v122;
        *(float64x2_t *)&v422[8] = vaddq_f64(*(float64x2_t *)&v422[8], v123);
        double v36 = v378;
        goto LABEL_63;
      }
    }
    double v202 = v111 - v392;
    double v203 = v112 - *(double *)&_Q22;
    double v204 = v113 - _D15;
    double v205 = sqrt(v202 * v202 + v203 * v203 + v204 * v204);
    double v206 = v205 * v114;
    double v36 = v378;
    if (v114 >= 1.0)
    {
      if (v114 <= 1.0)
      {
        double v208 = v205 * v114;
LABEL_59:
        double v209 = v205 - v208;
        double v210 = 1.0
             / sqrt((v405 - v392) * (v405 - v392)+ (v401 - *(double *)&_Q22) * (v401 - *(double *)&_Q22)+ (v396 - _D15) * (v396 - _D15));
        double v211 = v210 * (v405 - v392);
        double v212 = v210 * (v401 - *(double *)&_Q22);
        double v213 = v210 * (v396 - _D15);
        double v214 = v209 / v205;
        double v215 = v392 + v214 * v202;
        double v216 = *(double *)&_Q22 + v214 * v203;
        double v217 = _D15 + v214 * v204;
        double v218 = v111 * v111 + v112 * v112 + v113 * v113;
        double v219 = v211 * v211 + v212 * v212 + v213 * v213;
        double v220 = v211 * v215 + v212 * v216 + v213 * v217;
        double v221 = v220 + v220;
        double v222 = (v216 * v216 - (v218 - v215 * v215) + v217 * v217) * (-4.0 * v219) + v221 * v221;
        if (v222 < 0.0 || (double v223 = (sqrt(v222) + v221) * -0.5 / v219, v223 < 0.0))
        {
          int v224 = 0;
LABEL_64:
          v38 |= v224;
          goto LABEL_65;
        }
        *(double *)&long long v225 = v215;
        *((double *)&v225 + 1) = v216;
        *(double *)&long long v226 = v215 + v223 * v211;
        *((double *)&v226 + 1) = v216 + v223 * v212;
        *(_OWORD *)double v422 = v226;
        *(double *)&v422[16] = v217 + v223 * v213;
        *(_OWORD *)double v423 = v225;
        *(double *)&v423[16] = _D15 + v214 * v204;
LABEL_63:
        *((void *)this + 27) = 0x3FF0000000000000;
        int v224 = 1;
        goto LABEL_64;
      }
      double v207 = fmax(fmin(v367, 60592301.5), v370);
      double v208 = v205;
      if (v205 > v207) {
        goto LABEL_59;
      }
      double v208 = v206;
      if (v206 <= v207) {
        goto LABEL_59;
      }
    }
    else
    {
      double v207 = v375;
      double v208 = v205;
      if (v205 < v375) {
        goto LABEL_59;
      }
      double v208 = v206;
      if (v206 >= v375) {
        goto LABEL_59;
      }
    }
    double v208 = v207;
    goto LABEL_59;
  }
LABEL_65:
  if ((*((unsigned char *)this + 10) || *((unsigned char *)this + 122) || *((unsigned char *)this + 75) || *((unsigned char *)this + 178))
    && *((unsigned char *)this + 241)
    && *((double *)this + 32) >= 1.0)
  {
    *((unsigned char *)this + 241) = 0;
  }
  int isFlyoverTileAtTarget = altitude::GlobeView::isFlyoverTileAtTarget(a2);
  int v228 = isFlyoverTileAtTarget ^ 1;
  if (*((_DWORD *)this + 59) != (isFlyoverTileAtTarget ^ 1))
  {
    char v229 = isFlyoverTileAtTarget;
    int v230 = *((unsigned __int8 *)this + 241);
    uint64_t v231 = *((void *)a2 + 9);
    if (!*((unsigned char *)this + 241)) {
      *((void *)this + 33) = *(void *)(v231 + 40);
    }
    double v232 = *(double *)(v231 + 16);
    double v233 = *(double *)(v231 + 24);
    __double2 v234 = __sincos_stret(*(double *)(v231 + 8));
    double v235 = 6378137.0 / sqrt(v234.__sinval * v234.__sinval * -0.00669437999 + 1.0);
    double v236 = (v235 + v233) * v234.__cosval;
    __double2 v237 = __sincos_stret(v232);
    *((double *)this + 34) = v236 * v237.__cosval;
    *((double *)this + 35) = v236 * v237.__sinval;
    *((double *)this + 36) = (v233 + v235 * 0.99330562) * v234.__sinval;
    *((void *)this + 32) = 0;
    *((void *)this + 38) = 0;
    *((void *)this + 39) = 0;
    *((void *)this + 37) = 0;
    *((_DWORD *)this + 59) = v228;
    *((unsigned char *)this + 242) = 0;
    uint64_t v238 = *((void *)a2 + 9);
    if (*((unsigned char *)this + 233))
    {
      double v239 = *(double *)(v238 + 32);
      double v240 = 0.0;
      if (v239 <= 1500000.0)
      {
        double v241 = 1.0;
        double v242 = fmax(v239, 1.0);
        double v240 = 0.680678408 - cos(sqrt(v242 * 0.000000666666667) * 3.7699104 + 2.5132736) * 0.680678408;
        if ((v229 & 1) == 0)
        {
          if (v242 < 20000.0) {
            double v241 = *((double *)this + 40) + v242 * 0.00005 * (1.0 - *((double *)this + 40));
          }
          double v240 = v241 * v240;
        }
        if (v230) {
          double v240 = *((double *)this + 33);
        }
      }
    }
    else
    {
      double v240 = 1.57079633;
    }
    *((unsigned char *)this + 241) = v240 < *(double *)(v238 + 40);
  }
  uint64_t v243 = *((void *)a2 + 76);
  if (!v243) {
    goto LABEL_112;
  }
  unsigned __int8 v244 = atomic_load((unsigned __int8 *)(*(void *)(v243 + 16) + 2784));
  if ((v244 & 1) == 0) {
    goto LABEL_112;
  }
  uint64_t v245 = *(void *)(*((void *)a2 + 76) + 16);
  if (!v245) {
    goto LABEL_112;
  }
  unsigned __int8 v246 = atomic_load((unsigned __int8 *)(v245 + 2784));
  if ((v246 & 1) == 0) {
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v245 + 2808));
  }
  uint64_t v247 = *(void *)(v245 + 120);
  double v248 = *(std::__shared_weak_count **)(v245 + 128);
  if (v248) {
    atomic_fetch_add_explicit(&v248->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v247)
  {
    BOOL v249 = *(unsigned __int8 *)(v247 + 14) != 0;
    if (!v248)
    {
LABEL_97:
      if (v249) {
        goto LABEL_98;
      }
LABEL_112:
      double v257 = 0.3;
      goto LABEL_113;
    }
  }
  else
  {
    BOOL v249 = 0;
    if (!v248) {
      goto LABEL_97;
    }
  }
  if (atomic_fetch_add(&v248->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_97;
  }
  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
  std::__shared_weak_count::__release_weak(v248);
  if (!v249) {
    goto LABEL_112;
  }
LABEL_98:
  uint64_t v250 = *((void *)a2 + 76);
  float v251 = 0.0;
  if (v250)
  {
    unsigned __int8 v252 = atomic_load((unsigned __int8 *)(*(void *)(v250 + 16) + 2784));
    if (v252)
    {
      uint64_t v253 = *(void *)(*((void *)a2 + 76) + 16);
      if (v253)
      {
        unsigned __int8 v254 = atomic_load((unsigned __int8 *)(v253 + 2784));
        if ((v254 & 1) == 0) {
          std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v253 + 2808));
        }
        uint64_t v255 = *(void *)(v253 + 120);
        float64_t v256 = *(std::__shared_weak_count **)(v253 + 128);
        if (v256) {
          atomic_fetch_add_explicit(&v256->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v255) {
          float v251 = *(float *)(v255 + 200);
        }
        if (v256 && !atomic_fetch_add(&v256->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
          std::__shared_weak_count::__release_weak(v256);
        }
      }
    }
  }
  double v257 = v251;
LABEL_113:
  *((double *)this + 4CGContextBeginTransparencyLayer(this[1], 0) = v257;
  if (*((unsigned char *)this + 241))
  {
    double v258 = (double *)*((void *)a2 + 9);
    double v259 = v258[2];
    double v260 = v258[3];
    __double2 v261 = __sincos_stret(v258[1]);
    double v262 = 6378137.0 / sqrt(v261.__sinval * v261.__sinval * -0.00669437999 + 1.0);
    double v263 = (v262 + v260) * v261.__cosval;
    __double2 v264 = __sincos_stret(v259);
    double v265 = (v260 + v262 * 0.99330562) * v261.__sinval;
    double v266 = *((double *)this + 38);
    double v267 = *((double *)this + 39);
    double v268 = *((double *)this + 34);
    double v269 = *((double *)this + 35);
    double v270 = v263 * v264.__cosval - v268;
    double v271 = v263 * v264.__sinval - v269;
    double v272 = *((double *)this + 36);
    double v273 = *((double *)this + 37);
    double v274 = v265 - v272;
    if (v273 == 0.0 && v266 == 0.0 && v267 == 0.0)
    {
      double v275 = sqrt(v270 * v270 + v271 * v271 + v274 * v274);
      double v276 = 0.0;
      if (v275 > 1.0)
      {
        double v277 = 1.0 / v275;
        *((double *)this + 37) = v277 * v270;
        *((double *)this + 38) = v277 * v271;
        *((double *)this + 39) = v277 * v274;
      }
    }
    else
    {
      double v276 = 0.0;
      if ((v271 * v266 + v274 * v267 + v270 * v273) / sqrt(v270 * v270 + v271 * v271 + v274 * v274) > 0.0)
      {
        float v278 = fmin(fmax((v263 * v264.__cosval * v273+ v266 * (v263 * v264.__sinval)+ v267 * v265- (v268 * v273+ v269 * v266+ v272 * v267))* 5.0/ v258[4], 0.0), 1.0);
        float v279 = 1.0 - cos(v278 * 3.14159265);
        double v276 = (float)(v279 * 0.5);
      }
    }
    *((double *)this + 32) = v276;
  }
  if ((v38 | a3) == 1)
  {
    long long v280 = *(_OWORD *)v422;
    double v281 = *(double *)&v422[16];
    double v381 = *(double *)v422 * *(double *)v422 + *(double *)&v422[8] * *(double *)&v422[8];
    double v282 = sqrt(v381);
    double v283 = atan2(*(long double *)&v422[16], v282 * 0.996647189);
    double v408 = atan2(*((long double *)&v280 + 1), *(long double *)&v280);
    __double2 v284 = __sincos_stret(v283);
    double v394 = atan2(v281 + v284.__sinval * v284.__sinval * 42841.3115 * v284.__sinval, v282 + v284.__cosval * v284.__cosval * -42697.6727 * v284.__cosval);
    __double2 v285 = __sincos_stret(v394);
    double v399 = sqrt((*(double *)&v280 - *(double *)v423) * (*(double *)&v280 - *(double *)v423)+ (*((double *)&v280 + 1) - *(double *)&v423[8]) * (*((double *)&v280 + 1) - *(double *)&v423[8])+ (v281 - *(double *)&v423[16]) * (v281 - *(double *)&v423[16]));
    double v404 = v282 / v285.__cosval + -6378137.0 / sqrt(v285.__sinval * v285.__sinval * -0.00669437999 + 1.0);
    double v286 = 1.0 / v399 * (*(double *)&v280 - *(double *)v423);
    double v287 = 1.0 / v399 * (*((double *)&v280 + 1) - *(double *)&v423[8]);
    double v288 = 1.0 / v399 * (v281 - *(double *)&v423[16]);
    double v289 = 1.0 / sqrt(v36 * v36 + v383 * v383 + v382 * v382);
    double v290 = v289 * v36;
    double v291 = v289 * v383;
    double v388 = v289 * v382;
    if (*((unsigned char *)this + 121)) {
      double v292 = acos(fmin(fmax(-(v287 * *((double *)&v280 + 1) + v288 * v281 + v286 * *(double *)&v280) / sqrt(v381 + v281 * v281), -1.0), 1.0));
    }
    else {
      double v292 = *(double *)(*((void *)a2 + 9) + 40);
    }
    __double2 v293 = __sincos_stret(v292);
    double v294 = v290 * v293.__cosval + v293.__sinval * v286;
    double v295 = v291 * v293.__cosval + v293.__sinval * v287;
    long long v421 = 0u;
    long long v420 = 0u;
    double v296 = v388 * v293.__cosval + v293.__sinval * v288;
    v418.f64[0] = v394;
    v418.f64[1] = v408;
    double v419 = v404;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v412.f64, v418.f64);
    double v297 = -(v415 * v296 - v416 * v295) - (v415 * v296 - v416 * v295);
    double v298 = -(v416 * v294 - v414 * v296) - (v416 * v294 - v414 * v296);
    double v299 = -(v414 * v295 - v415 * v294) - (v414 * v295 - v415 * v294);
    double v300 = atan2(-(v298 * v416 - (-(v294 - v299 * v415) - v297 * v417)), v295 + v299 * v414 + v298 * v417 - v297 * v416);
    double v301 = v399;
    if (*((unsigned char *)this + 9))
    {
      double v302 = altitude::GlobeView::calculateMinZoomDistance(a2);
      double v301 = v399;
      if (v399 < v302) {
        double v301 = fmin(v302 - v399, *((double *)this + 8)) + v399;
      }
    }
    if (*((unsigned char *)this + 121)) {
      goto LABEL_130;
    }
    if (*((unsigned char *)this + 233))
    {
      double v303 = 0.0;
      if (v301 <= 1500000.0)
      {
        double v307 = 1.0;
        double v308 = fmax(v301, 1.0);
        double v303 = 0.680678408 - cos(sqrt(v308 * 0.000000666666667) * 3.7699104 + 2.5132736) * 0.680678408;
        if (*((_DWORD *)this + 59) == 1)
        {
          if (v308 < 20000.0) {
            double v307 = *((double *)this + 40) + v308 * 0.00005 * (1.0 - *((double *)this + 40));
          }
          double v303 = v307 * v303;
        }
        if (*((unsigned char *)this + 241)) {
          double v303 = *((double *)this + 33) + fmin(fmax(*((double *)this + 32), 0.0), 1.0) * (v303 - *((double *)this + 33));
        }
      }
      if (v292 > v303) {
        goto LABEL_144;
      }
    }
    else
    {
      double v303 = 1.57079633;
      if (v292 > 1.57079633)
      {
LABEL_144:
        if (*((unsigned char *)this + 240) && !*((unsigned char *)this + 242))
        {
          *((unsigned char *)this + 242) = 1;
          *((double *)this + 31) = v292;
        }
LABEL_131:
        if (*((unsigned char *)this + 74))
        {
          double v304 = v300;
        }
        else
        {
          double v304 = v300;
          if (fabs(v394) < 1.30899694)
          {
            double v305 = (double *)*((void *)a2 + 9);
            double v306 = v305[6];
            if (v301 >= 400000.0)
            {
              double v309 = fabs(v306);
              double v304 = 0.0;
              if (v309 >= 0.01)
              {
                long double v310 = fmod(v408 + 3.14159265 - v305[2], 6.28318531);
                double v311 = fabs(fmod(v310 + 6.28318531, 6.28318531) + -3.14159265);
                double v312 = v311 + v311;
                if (*((unsigned char *)this + 232))
                {
                  double v313 = v305[4];
                  if (v301 >= v313) {
                    double v314 = v301 * 0.785398163 / v313;
                  }
                  else {
                    double v314 = v313 * 0.785398163 / v301;
                  }
                  double v315 = v314 + -0.785398163;
                }
                else
                {
                  double v315 = 0.0;
                }
                double v316 = fmin(v309, fmax(v312, v315));
                if (v306 <= 0.0) {
                  double v316 = -v316;
                }
                double v304 = v300 - v316;
              }
            }
            else
            {
              double v304 = v305[6];
            }
          }
        }
        double v317 = fmax(v301, 15000000.0);
        double v318 = v317 * 0.0000000285714286 + -0.428571429;
        BOOL v319 = v317 <= 50000000.0;
        double v320 = 1.0;
        if (v319) {
          double v320 = v318;
        }
        double v321 = v320 * v320 * 1.57079633 * (v320 * 2.0 + -3.0) + 1.57079633;
        double v389 = fmin(fmax(v394, -v321), v321);
        *(double *)v322.i64 = v389;
        *(double *)&v322.i64[1] = v408;
        int8x16_t v395 = v322;
        double v323 = altitude::GlobeView::calculateMinZoomDistance(a2);
        double v324 = fmin(fmax(v399, v323), fmax(fmin(*((double *)a2 + 50), 60592301.5), altitude::GlobeView::calculateMinZoomDistance(a2)));
        double v325 = *((double *)this + 43);
        double v326 = *((double *)this + 41);
        if (v325 < v326 || (double v327 = *((double *)this + 44), v328 = *((double *)this + 42), v327 < v328))
        {
LABEL_167:
          double v329 = *((double *)this + 47);
          double v330 = *((double *)this + 45);
          if (v329 < v330) {
            goto LABEL_171;
          }
          double v331 = *((double *)this + 48);
          double v332 = *((double *)this + 46);
          if (v331 < v332) {
            goto LABEL_171;
          }
          double v333 = *((double *)this + 51);
          double v334 = *((double *)this + 49);
          if (v333 < v334) {
            goto LABEL_171;
          }
          double v335 = *((double *)this + 52);
          double v336 = *((double *)this + 50);
          if (v335 < v336) {
            goto LABEL_171;
          }
          v347.f64[0] = v408;
          if (v408 <= v329)
          {
            if (v408 >= v330)
            {
              char v348 = 1;
              double v350 = 0.0;
LABEL_199:
              if (v389 <= v331)
              {
                if (v389 >= v332)
                {
                  if (v348)
                  {
LABEL_171:
                    int8x16_t v337 = v395;
LABEL_172:
                    uint64_t v338 = *((void *)a2 + 9);
                    *(int8x16_t *)(v338 + 8) = v337;
                    *(double *)(v338 + 24) = v404;
                    *(double *)(v338 + 32) = v324;
                    *(double *)(v338 + 4CGContextBeginTransparencyLayer(this[1], 0) = v303;
                    *(double *)(v338 + 48) = v304;
                    *(void *)(v338 + geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 56) = 0;
                    ++*((_DWORD *)a2 + 94);
                    goto LABEL_173;
                  }
                  double v352 = sqrt(v350);
                  if (v408 > v333) {
                    goto LABEL_204;
                  }
                  goto LABEL_207;
                }
                double v351 = v332 - v389;
              }
              else
              {
                double v351 = v389 - v331;
              }
              double v352 = sqrt(v351 * v351 + v350);
              if (v408 > v333)
              {
LABEL_204:
                char v353 = 0;
                double v354 = v408 - v333;
                goto LABEL_209;
              }
LABEL_207:
              if (v408 >= v334)
              {
                char v353 = 1;
                double v355 = 0.0;
LABEL_211:
                int8x16_t v337 = v395;
                if (v389 <= v335)
                {
                  if (v389 >= v336)
                  {
                    if (v353) {
                      goto LABEL_172;
                    }
                    double v357 = sqrt(v355);
LABEL_216:
                    double v358 = (float64x2_t *)((char *)this + 360);
                    if (v352 > v357) {
                      double v358 = (float64x2_t *)((char *)this + 392);
                    }
                    v347.f64[1] = v389;
                    int8x16_t v359 = (int8x16_t)vminnmq_f64(vmaxnmq_f64(v347, *v358), v358[1]);
                    int8x16_t v337 = vextq_s8(v359, v359, 8uLL);
                    goto LABEL_172;
                  }
                  double v356 = v336 - v389;
                }
                else
                {
                  double v356 = v389 - v335;
                }
                double v357 = sqrt(v356 * v356 + v355);
                goto LABEL_216;
              }
              char v353 = 0;
              double v354 = v334 - v408;
LABEL_209:
              double v355 = v354 * v354;
              goto LABEL_211;
            }
            char v348 = 0;
            double v349 = v330 - v408;
          }
          else
          {
            char v348 = 0;
            double v349 = v408 - v329;
          }
          double v350 = v349 * v349;
          goto LABEL_199;
        }
        double v339 = v408;
        if (v408 < v326) {
          goto LABEL_187;
        }
        if (v408 < v325 && v389 >= v328 && v389 < v327) {
          goto LABEL_167;
        }
        double v339 = v408;
        if (v408 <= v325)
        {
          v337.i64[1] = v395.i64[1];
        }
        else
        {
LABEL_187:
          double v409 = v303;
          double v340 = v339 + -3.14159265;
          double v400 = v324;
          long double v341 = fmod(v326 - (v339 + -3.14159265), 6.28318531);
          double v342 = fabs(fmod(v341 + 6.28318531, 6.28318531) + -3.14159265);
          long double v343 = v325 - v340;
          double v303 = v409;
          long double v344 = fmod(v343, 6.28318531);
          long double v345 = fmod(v344 + 6.28318531, 6.28318531);
          double v324 = v400;
          if (v342 <= fabs(v345 + -3.14159265)) {
            double v346 = (char *)this + 328;
          }
          else {
            double v346 = (char *)this + 344;
          }
          v337.i64[1] = *(void *)v346;
        }
        v337.i64[0] = fmin(fmax(v389, v328), v327);
        goto LABEL_172;
      }
    }
    if (*((unsigned char *)this + 242))
    {
      if (v292 <= *((double *)this + 31)) {
        goto LABEL_131;
      }
      *((unsigned char *)this + 242) = 0;
    }
LABEL_130:
    double v303 = v292;
    goto LABEL_131;
  }
LABEL_173:
  if (*((unsigned char *)this + 10)) {
    *(_WORD *)((char *)this + 9) = 0;
  }
  if (*((unsigned char *)this + 122)) {
    *(_WORD *)((char *)this + 121) = 0;
  }
  if (*((unsigned char *)this + 75)) {
    *((_WORD *)this + 37) = 0;
  }
  if (*((unsigned char *)this + 178)) {
    *(_WORD *)((char *)this + 177) = 0;
  }
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 12CGContextBeginTransparencyLayer(this[1], 0) = 0;
  *((unsigned char *)this + 73) = 0;
  *((unsigned char *)this + 176) = 0;
}

uint64_t md::TileDataRegistry::featureRegistryPtr(md::TileDataRegistry *this)
{
  return 0;
}

uint64_t md::MapTileData::supportsTileSkirtsFactor(md::MapTileData *this)
{
  return *((unsigned __int8 *)this + 712);
}

uint64_t md::MapTileData::bounds(md::MapTileData *this)
{
  return (uint64_t)this + 688;
}

void md::MuninAvailabilityData::~MuninAvailabilityData(md::MuninAvailabilityData *this)
{
  *(void *)this = &unk_1EF53FE60;
  *((void *)this + 79) = &unk_1EF53FEA0;
  uint64_t v2 = (void *)*((void *)this + 90);
  if (v2)
  {
    *((void *)this + 91) = v2;
    operator delete(v2);
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53FE60;
  *((void *)this + 79) = &unk_1EF53FEA0;
  uint64_t v2 = (void *)*((void *)this + 90);
  if (v2)
  {
    *((void *)this + 91) = v2;
    operator delete(v2);
  }
  md::MapTileData::~MapTileData(this);
}

void *std::function<void ()(GeoCodecsRoadFeature const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5756C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5756C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(GeoCodecsRoadEdge *)>::~__func()
{
}

__n128 std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF58F3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF58F3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<md::MuninAvailabilityData::MuninAvailabilityData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(GeoCodecsRoadFeature const*)>::~__func()
{
}

void md::MuninAvailabilityData::nearestAvailableRoadPoint(uint64_t a1, uint64_t a2, double a3, double a4)
{
  long double v8 = exp(a4 * 6.28318531 + -3.14159265);
  long double v9 = atan(v8) * 114.591559 + -90.0;
  double v10 = cos(v9 * 0.034906585);
  double v11 = cos(v9 * 0.0698131701);
  double v12 = cos(v9 * 0.104719755);
  long double v13 = v9 * 0.00872664626;
  long double v14 = tan(v9 * 0.00872664626 + 0.78103484);
  double v15 = log(v14);
  long double v16 = tan(v13 + 0.789761487);
  double v17 = log(v16);
  double v20 = *(float **)(a2 + 720);
  double v21 = *(float **)(a2 + 728);
  if (v20 == v21)
  {
LABEL_17:
    char v40 = 0;
  }
  else
  {
    int v22 = 1 << *(unsigned char *)(a2 + 169);
    double v23 = fabs((v17 - v15) * 0.159154943) * 250.0;
    double v24 = 1.0 / (double)v22;
    double v25 = (double)*(int *)(a2 + 176);
    double v26 = (double)(v22 + ~*(_DWORD *)(a2 + 172));
    double v27 = v23 / ((v10 * -559.82 + 111132.92 + v11 * 1.175 + v12 * -0.0023) * v24);
    double v28 = v27 * v27;
    float v29 = (a3 - v24 * v25) * (double)v22;
    float v30 = (a4 - v24 * v26) * (double)v22;
    char v31 = 1;
    float v32 = 3.4028e38;
LABEL_3:
    float v33 = v19;
    float v34 = v18;
    float v35 = v32;
    do
    {
      float v19 = *v20;
      float v18 = v20[1];
      float v36 = v20[2];
      float v37 = v20[3];
      float v38 = (float)((float)(v36 * (float)(v29 - *v20)) + (float)(v37 * (float)(v30 - v18)))
          / (float)((float)(v36 * v36) + (float)(v37 * v37));
      if (v38 >= 0.0)
      {
        if (v38 <= 1.0)
        {
          float v19 = v19 + (float)(v38 * v36);
          float v18 = v18 + (float)(v38 * v37);
        }
        else
        {
          float v19 = v36 + v19;
          float v18 = v37 + v18;
        }
      }
      float v32 = (float)((float)(v19 - v29) * (float)(v19 - v29)) + (float)((float)(v18 - v30) * (float)(v18 - v30));
      v20 += 4;
      if (v28 > v32 && v32 < v35)
      {
        char v31 = 0;
        if (v20 != v21) {
          goto LABEL_3;
        }
        goto LABEL_18;
      }
    }
    while (v20 != v21);
    float v19 = v33;
    float v18 = v34;
    if (v31) {
      goto LABEL_17;
    }
LABEL_18:
    *(double *)(a1 + 8) = (v19 + v25) * v24;
    *(double *)(a1 + 16) = (v18 + v26) * v24;
    char v40 = 1;
  }
  *(unsigned char *)a1 = v40;
}

void geo::read_write_lock::logFailure(geo::read_write_lock *this, uint64_t a2, const char *a3)
{
  int v4 = (int)this;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  {
    geo::read_write_lock::logFailure(int,char const*)::log = (uint64_t)os_log_create("com.apple.GeoStdLib", "Locking");
  }
  int v5 = geo::read_write_lock::logFailure(int,char const*)::log;
  if (os_log_type_enabled((os_log_t)geo::read_write_lock::logFailure(int,char const*)::log, OS_LOG_TYPE_FAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = a2;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_fault_impl(&dword_1A1780000, v5, OS_LOG_TYPE_FAULT, "Read/write lock %s resulted in non-zero value %d", (uint8_t *)&v6, 0x12u);
  }
}

{
  int v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  int v4 = (int)this;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  {
    geo::read_write_lock::logFailure(int,char const*)::log = (uint64_t)os_log_create("com.apple.GeoStdLib", "Locking");
  }
  int v5 = geo::read_write_lock::logFailure(int,char const*)::log;
  if (os_log_type_enabled((os_log_t)geo::read_write_lock::logFailure(int,char const*)::log, OS_LOG_TYPE_FAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = a2;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_fault_impl(&dword_1A1780000, v5, OS_LOG_TYPE_FAULT, "Read/write lock %s resulted in non-zero value %d", (uint8_t *)&v6, 0x12u);
  }
}

void geo::_retain_ptr<VKResourceManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559758;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKResourceManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559758;

  return a1;
}

void geo::_retain_ptr<VKInternalIconManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5599D8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKInternalIconManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5599D8;

  return a1;
}

void md::SharedResourcesManager::~SharedResourcesManager(md::SharedResourcesManager *this)
{
  uint64_t v2 = (std::condition_variable *)((char *)this + 304);
  uint64_t v3 = (std::condition_variable *)((char *)this + 3632);
  do
  {
    int v4 = *(void **)&v3[-1].__cv_.__opaque[16];
    while (v4)
    {
      int v6 = v4;
      int v4 = (void *)*v4;
      uint64_t v7 = (std::__shared_weak_count *)v6[3];
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      operator delete(v6);
    }
    int v5 = *(void **)v3[-1].__cv_.__opaque;
    *(void *)v3[-1].__cv_.__opaque = 0;
    if (v5) {
      operator delete(v5);
    }
    std::condition_variable::~condition_variable(v3 - 2);
    std::condition_variable::~condition_variable(v3 - 3);
    std::mutex::~mutex((std::mutex *)&v3[-5].__cv_.__opaque[24]);
    uint64_t v3 = (std::condition_variable *)((char *)v3 - 208);
  }
  while (v3 != v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

void sub_1A1DB2094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void geo::write_lock_guard::~write_lock_guard(pthread_rwlock_t **this)
{
  uint64_t v1 = (geo::read_write_lock *)pthread_rwlock_unlock(*this);
  if (v1) {
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
  }
}

void sub_1A1DB28C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKSharedResources;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<md::RealisticCommandBufferSelector *,std::shared_ptr<md::RealisticCommandBufferSelector>::__shared_ptr_default_delete<md::RealisticCommandBufferSelector,md::RealisticCommandBufferSelector>,std::allocator<md::RealisticCommandBufferSelector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::RealisticCommandBufferSelector *,std::shared_ptr<md::RealisticCommandBufferSelector>::__shared_ptr_default_delete<md::RealisticCommandBufferSelector,md::RealisticCommandBufferSelector>,std::allocator<md::RealisticCommandBufferSelector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<md::StandardCommandBufferSelector *,std::shared_ptr<md::StandardCommandBufferSelector>::__shared_ptr_default_delete<md::StandardCommandBufferSelector,md::StandardCommandBufferSelector>,std::allocator<md::StandardCommandBufferSelector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::StandardCommandBufferSelector *,std::shared_ptr<md::StandardCommandBufferSelector>::__shared_ptr_default_delete<md::StandardCommandBufferSelector,md::StandardCommandBufferSelector>,std::allocator<md::StandardCommandBufferSelector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<grl::IconManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<grl::IconManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<grl::IconManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<grl::FontManager *,std::shared_ptr<grl::FontManager>::__shared_ptr_default_delete<grl::FontManager,grl::FontManager>,std::allocator<grl::FontManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<grl::FontManager *,std::shared_ptr<grl::FontManager>::__shared_ptr_default_delete<grl::FontManager,grl::FontManager>,std::allocator<grl::FontManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::GeoResourceProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::GeoResourceProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::GeoResourceProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DataOverrideManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<md::DataOverrideManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DataOverrideManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StylesheetVendor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 96);
    int v6 = *(void **)(a1 + 88);
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        if (*(char *)(v5 - 25) < 0) {
          operator delete(*(void **)(v5 - 48));
        }
        v5 -= 48;
      }
      while (v5 != v4);
      int v6 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v4;
    operator delete(v6);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = *(void **)(a1 + 64);
    if (v9 != v8)
    {
      do
      {
        double v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v8;
    operator delete(v10);
  }

  double v12 = *(std::__shared_weak_count **)(a1 + 32);
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void std::__shared_ptr_emplace<md::StylesheetVendor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StylesheetVendor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MaterialTextureManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 24);
  md::MaterialTextureManager::purge((pthread_rwlock_t *)(a1 + 24));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 344);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)(a1 + 304) = &unk_1EF559758;

  uint64_t v4 = *(void **)(a1 + 280);
  while (v4)
  {
    uint64_t v5 = v4;
    uint64_t v4 = (void *)*v4;
    int v6 = (std::__shared_weak_count *)v5[5];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(v5);
  }
  uint64_t v7 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 240);
  while (v8)
  {
    uint64_t v9 = v8;
    uint64_t v8 = (void *)*v8;
    uint64_t v10 = (std::__shared_weak_count *)v9[5];
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    operator delete(v9);
  }
  double v11 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v11) {
    operator delete(v11);
  }
  double v12 = (geo::read_write_lock *)pthread_rwlock_destroy(v2);
  if (v12)
  {
    geo::read_write_lock::logFailure(v12, (uint64_t)"destruction", v13);
  }
}

void sub_1A1DB30A8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 344);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)(v2 + 304) = &unk_1EF559758;

  uint64_t v5 = *(void **)(v2 + 280);
  while (v5)
  {
    double v11 = v5;
    uint64_t v5 = (void *)*v5;
    double v12 = (std::__shared_weak_count *)v11[5];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v11);
  }
  int v6 = *(void **)(v2 + 264);
  *(void *)(v2 + 264) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v2 + 240);
  while (v7)
  {
    long double v13 = v7;
    uint64_t v7 = (void *)*v7;
    long double v14 = (std::__shared_weak_count *)v13[5];
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    operator delete(v13);
  }
  uint64_t v8 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (geo::read_write_lock *)pthread_rwlock_destroy(v1);
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"destruction", v10);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::MaterialTextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5815C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MaterialTextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5815C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextureManager>::__on_zero_shared(uint64_t a1)
{
  md::TextureManager::purge((md::TextureManager *)(a1 + 24));
  *(void *)(a1 + 568) = &unk_1EF559758;

  std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>>>::~__hash_table(a1 + 528);
  std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>>>::~__hash_table(a1 + 488);
  uint64_t v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 288));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 88));
  if (v4) {
    geo::read_write_lock::logFailure(v4, (uint64_t)"destruction", v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v9) {
      return;
    }
  }
  else
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1A1DB348C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 568) = &unk_1EF559758;

  std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>>>::~__hash_table(v1 + 528);
  std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>>>::~__hash_table(v1 + 488);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(v1 + 288));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"destruction", v4);
  }
  uint64_t v5 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(v1 + 88));
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"destruction", v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 80);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 64);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 48);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 32);
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TextureManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<-[VKSharedResources undulationModel]::$_0 &&>>()
{
}

void sub_1A1DB3A70(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  MEMORY[0x1A6239270](v1, 0x1010C4028866157);
  _Unwind_Resume(a1);
}

void sub_1A1DB3BBC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A1DB3C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::RegionalResourceLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  long double v13 = *(unsigned __int8 **)(a6 + 16);
  long double v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

uint64_t std::__shared_ptr_emplace<md::RegionalResourceTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RegionalResourceTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RegionalResourceTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ResourceInfo>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void (***)(void))a1[6];
  if (v2)
  {
    uint64_t v3 = (void (***)(void))a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 3;
      int v6 = v3 - 3;
      uint64_t v7 = v3 - 3;
      do
      {
        __int16 v8 = *v7;
        v7 -= 3;
        (*v8)(v6);
        v5 -= 3;
        BOOL v9 = v6 == v2;
        int v6 = v7;
      }
      while (!v9);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v10 = a1[3];
  if (v10)
  {
    uint64_t v11 = a1[4];
    int v12 = (void *)a1[3];
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      int v12 = (void *)a1[3];
    }
    a1[4] = v10;
    operator delete(v12);
  }
}

void std::__shared_ptr_emplace<md::ResourceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ResourceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RegionalResourceLayerDataSource::~RegionalResourceLayerDataSource(md::RegionalResourceLayerDataSource *this)
{
  *(void *)this = &unk_1EF54D3E8;
  *((void *)this + 96) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF54D3E8;
  *((void *)this + 96) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void geo::_retain_ptr<VKSharedResources * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559798;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKSharedResources * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559798;

  return a1;
}

void altitude::ManifestManager::~ManifestManager(altitude::ManifestManager *this)
{
  altitude::ManifestManager::~ManifestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  altitude::ManifestManager *v6;
  uint64_t v7;

  *(void *)this = &unk_1EF569098;
  uint64_t v2 = (void **)*((void *)this + 11);
  if (v2)
  {
    uint64_t v3 = (void **)*v2;
    if (*v2)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A6239270](v2, 0x20C40960023A9);
  }
  int v6 = (altitude::ManifestManager *)*((void *)this + 18);
  if (v6 == (altitude::ManifestManager *)((char *)this + 120))
  {
    (*(void (**)(char *))(*((void *)this + 15) + 32))((char *)this + 120);
    if (*((char *)this + 119) < 0) {
LABEL_15:
    }
      operator delete(*((void **)this + 12));
  }
  else
  {
    if (v6) {
      (*(void (**)(altitude::ManifestManager *))(*(void *)v6 + 40))(v6);
    }
    if (*((char *)this + 119) < 0) {
      goto LABEL_15;
    }
  }
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 10));
  uint64_t v7 = *((void *)this + 10);
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C40FA0F61DDLL);
  }
  *((void *)this + 1CGContextBeginTransparencyLayer(this[1], 0) = 0;
  std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(*((char **)this + 8));
  XmlNode::~XmlNode((altitude::ManifestManager *)((char *)this + 8));
}

void std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)a1 + 8));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t altitude::ManifestManager::registerListener(uint64_t a1, const void **a2, unint64_t a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
  int v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  if ((uint64_t *)(a1 + 64) == v6)
  {
    int v19 = 0;
    uint64_t v20 = 0;
    uint64_t v7 = std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), a2, (uint64_t)a2);
    __int16 v8 = (uint64_t *)(v7 + 8);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v7[8]);
    BOOL v9 = v19;
    v7[7] = (uint64_t *)&v19;
    v7[8] = v9;
    uint64_t v10 = v20;
    v7[9] = v20;
    if (v10)
    {
      void v9[2] = (uint64_t)v8;
      int v19 = 0;
      uint64_t v20 = 0;
      BOOL v9 = 0;
    }
    else
    {
      v7[7] = v8;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
    int v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  }
  int v12 = (uint64_t **)(v6 + 8);
  uint64_t v11 = (uint64_t *)v6[8];
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        long double v13 = (uint64_t **)v11;
        unint64_t v14 = v11[4];
        if (v14 <= a3) {
          break;
        }
        uint64_t v11 = *v13;
        int v12 = v13;
        if (!*v13) {
          goto LABEL_13;
        }
      }
      if (v14 >= a3) {
        break;
      }
      uint64_t v11 = v13[1];
      if (!v11)
      {
        int v12 = v13 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    long double v13 = (uint64_t **)(v6 + 8);
LABEL_13:
    unint64_t v15 = (uint64_t *)operator new(0x28uLL);
    v15[4] = a3;
    *unint64_t v15 = 0;
    v15[1] = 0;
    void v15[2] = (uint64_t)v13;
    *int v12 = v15;
    uint64_t v16 = *(void *)v6[7];
    if (v16)
    {
      v6[7] = v16;
      unsigned int v17 = *v12;
    }
    else
    {
      unsigned int v17 = v15;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[8], v17);
    ++v6[9];
  }
  if (*(unsigned char *)(a1 + 153) || *(unsigned char *)(a1 + 152) || *(unsigned char *)(a1 + 154)) {
    altitude::ManifestManager::parseManifest((altitude::ManifestManager *)a1);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      __int16 v8 = a2;
    }
    else {
      __int16 v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      long double v13 = (const void *)v5[4];
      uint64_t v11 = v5 + 4;
      int v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        unint64_t v15 = v11;
      }
      else {
        unint64_t v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        uint64_t v5 = v10[1];
        if (!v5)
        {
          int v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v5 = *v10;
        int v6 = v10;
        if (!*v10) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_29:
  uint64_t v20 = operator new(0x50uLL);
  double v21 = (std::string *)(v20 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v20[6] = *(void *)(a3 + 16);
  }
  v20[9] = 0;
  v20[8] = 0;
  v20[7] = v20 + 8;
  *uint64_t v20 = 0;
  v20[1] = 0;
  void v20[2] = v10;
  uint64_t *v6 = v20;
  int v22 = (uint64_t *)**a1;
  double v23 = v20;
  if (v22)
  {
    *a1 = v22;
    double v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void altitude::ManifestManager::parseManifest(altitude::ManifestManager *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 7);
  float v38 = (char **)((char *)this + 56);
  uint64_t v3 = (uint64_t *)((char *)this + 64);
  if (v2 != (uint64_t *)((char *)this + 64))
  {
    do
    {
      int v6 = (uint64_t *)v2[7];
      if (v6 != v2 + 8)
      {
        do
        {
          (*(void (**)(uint64_t))(*(void *)v6[4] + 16))(v6[4]);
          size_t v9 = (uint64_t *)v6[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              size_t v9 = (uint64_t *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (uint64_t *)v6[2];
              BOOL v11 = *v10 == (void)v6;
              int v6 = v10;
            }
            while (!v11);
          }
          int v6 = v10;
        }
        while (v10 != v2 + 8);
      }
      int v7 = (uint64_t *)v2[1];
      if (v7)
      {
        do
        {
          __int16 v8 = v7;
          int v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          __int16 v8 = (uint64_t *)v2[2];
          BOOL v11 = *v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v11);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
  uint64_t v4 = (const xmlDoc *)*((void *)this + 2);
  if (v4)
  {
    xmlNodePtr RootElement = xmlDocGetRootElement(v4);
    *((void *)this + 1) = RootElement;
  }
  else
  {
    xmlNodePtr RootElement = (xmlNodePtr)*((void *)this + 1);
  }
  long long v49 = 0u;
  long long v50 = 0u;
  xmlNodePtr v48 = RootElement;
  uint64_t v51 = 0;
  if (RootElement)
  {
    children = RootElement->children;
    if (children)
    {
      while (children->type != XML_ELEMENT_NODE)
      {
        children = children->next;
        if (!children) {
          goto LABEL_24;
        }
      }
      *(void *)__double2 v45 = children;
      *(_OWORD *)&v45[8] = 0u;
      long long v46 = 0u;
      uint64_t v47 = 0;
      while (1)
      {
        if (!*(void *)&v45[8] || (name = *(const char **)(*(void *)&v45[8] + 16)) == 0) {
          name = (const char *)children->name;
        }
        size_t v20 = strlen(name);
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_82:
        }
          abort();
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          int v22 = operator new(v23 + 1);
          *((void *)&__dst[0] + 1) = v21;
          *(void *)&__dst[1] = v24 | 0x8000000000000000;
          *(void *)&__dst[0] = v22;
        }
        else
        {
          BYTE7(__dst[1]) = v20;
          int v22 = __dst;
          if (!v20) {
            goto LABEL_57;
          }
        }
        memmove(v22, name, v21);
LABEL_57:
        *((unsigned char *)v22 + v21) = 0;
        double v25 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)v38, (const void **)__dst);
        if (v3 != v25)
        {
          double v26 = (uint64_t *)v25[7];
          double v27 = v25 + 8;
          if (v26 != v25 + 8)
          {
            do
            {
              uint64_t v29 = v26[4];
              long long v40 = *(_OWORD *)v45;
              uint64_t v41 = *(void *)&v45[16];
              if (*(void *)&v45[16]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v45[16] + 8), 1uLL, memory_order_relaxed);
              }
              double v42 = 0;
              double v43 = 0;
              double v44 = 0;
              char v31 = (void *)*((void *)&v46 + 1);
              float v30 = (void *)v46;
              int64_t v32 = *((void *)&v46 + 1) - v46;
              if (*((void *)&v46 + 1) != (void)v46)
              {
                if (v32 < 0) {
                  goto LABEL_82;
                }
                uint64_t v33 = v32 >> 4;
                float v34 = operator new(v32);
                double v42 = v34;
                double v43 = v34;
                double v44 = &v34[2 * v33];
                do
                {
                  *float v34 = *v30;
                  uint64_t v35 = v30[1];
                  v34[1] = v35;
                  if (v35) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
                  }
                  v34 += 2;
                  v30 += 2;
                }
                while (v30 != v31);
                double v43 = v34;
              }
              (*(void (**)(uint64_t, _OWORD *, long long *))(*(void *)v29 + 24))(v29, __dst, &v40);
              XmlNode::~XmlNode((XmlNode *)&v40);
              float v36 = (uint64_t *)v26[1];
              if (v36)
              {
                do
                {
                  float v37 = v36;
                  float v36 = (uint64_t *)*v36;
                }
                while (v36);
              }
              else
              {
                do
                {
                  float v37 = (uint64_t *)v26[2];
                  BOOL v11 = *v37 == (void)v26;
                  double v26 = v37;
                }
                while (!v11);
              }
              double v26 = v37;
            }
            while (v37 != v27);
          }
        }
        if (SBYTE7(__dst[1]) < 0)
        {
          operator delete(*(void **)&__dst[0]);
          uint64_t v28 = *(void *)v45;
          if (*(void *)v45)
          {
            do
LABEL_79:
              uint64_t v28 = *(void *)(v28 + 48);
            while (v28 && *(_DWORD *)(v28 + 8) != 1);
            *(void *)&__dst[0] = v28;
            memset((char *)__dst + 8, 0, 40);
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v28 = *(void *)v45;
          if (*(void *)v45) {
            goto LABEL_79;
          }
        }
        memset(__dst, 0, sizeof(__dst));
LABEL_45:
        XmlNodeWrapper::operator=((uint64_t *)v45, v28);
        XmlNode::~XmlNode((XmlNode *)__dst);
        children = *(_xmlNode **)v45;
        if (!*(void *)v45) {
          goto LABEL_25;
        }
      }
    }
LABEL_24:
    memset(v45, 0, sizeof(v45));
    long long v46 = 0u;
    uint64_t v47 = 0;
LABEL_25:
    XmlNode::~XmlNode((XmlNode *)v45);
  }
  long double v13 = *v38;
  if (*v38 != (char *)v3)
  {
    do
    {
      int v14 = (char *)*((void *)v13 + 7);
      if (v14 != v13 + 64)
      {
        do
        {
          (*(void (**)(void))(**((void **)v14 + 4) + 32))(*((void *)v14 + 4));
          size_t v17 = (char *)*((void *)v14 + 1);
          if (v17)
          {
            do
            {
              int v18 = v17;
              size_t v17 = *(char **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              int v18 = (char *)*((void *)v14 + 2);
              BOOL v11 = *(void *)v18 == (void)v14;
              int v14 = v18;
            }
            while (!v11);
          }
          int v14 = v18;
        }
        while (v18 != v13 + 64);
      }
      unint64_t v15 = (char *)*((void *)v13 + 1);
      if (v15)
      {
        do
        {
          size_t v16 = v15;
          unint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          size_t v16 = (char *)*((void *)v13 + 2);
          BOOL v11 = *(void *)v16 == (void)v13;
          long double v13 = v16;
        }
        while (!v11);
      }
      long double v13 = v16;
    }
    while (v16 != (char *)v3);
  }
  XmlNode::~XmlNode((XmlNode *)&v48);
}

uint64_t *XmlNodeWrapper::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v8 = 0;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (&v5 != a1) {
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)(a1 + 3), (uint64_t *)v7, *((uint64_t **)&v7 + 1), (uint64_t)(*((void *)&v7 + 1) - v7) >> 4);
  }
  XmlNode::~XmlNode((XmlNode *)&v5);
  return a1;
}

void std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  long long v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  size_t v9 = *(char **)a1;
  if (__sz <= (v8 - *(void *)a1) >> 4)
  {
    long double v13 = *(char **)(a1 + 8);
    unint64_t v14 = (v13 - v9) >> 4;
    if (v14 >= __sz)
    {
      if (a2 != a3)
      {
        do
        {
          uint64_t v20 = *v6;
          uint64_t v19 = v6[1];
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
          size_t v21 = (std::__shared_weak_count *)*((void *)v9 + 1);
          *(void *)size_t v9 = v20;
          *((void *)v9 + 1) = v19;
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
          v9 += 16;
          v6 += 2;
        }
        while (v6 != a3);
        long double v13 = *(char **)(a1 + 8);
      }
      for (; v13 != v9; v13 -= 16)
      {
        float v30 = (std::__shared_weak_count *)*((void *)v13 - 1);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      *(void *)(a1 + 8) = v9;
    }
    else
    {
      unint64_t v15 = &a2[2 * v14];
      if (v13 != v9)
      {
        do
        {
          uint64_t v17 = *v6;
          uint64_t v16 = v6[1];
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
          }
          int v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
          *(void *)size_t v9 = v17;
          *((void *)v9 + 1) = v16;
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          v6 += 2;
          v9 += 16;
        }
        while (v6 != v15);
        size_t v9 = *(char **)(a1 + 8);
      }
      uint64_t v28 = v9;
      if (v15 != a3)
      {
        uint64_t v28 = v9;
        do
        {
          uint64_t v29 = v15[1];
          *(void *)uint64_t v28 = *v15;
          *((void *)v28 + 1) = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          v28 += 16;
          v15 += 2;
        }
        while (v15 != a3);
      }
      *(void *)(a1 + 8) = v28;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 8);
      BOOL v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          int v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        BOOL v11 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_55;
    }
    uint64_t v22 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v22 = __sz;
    }
    BOOL v23 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    if (!v23) {
      unint64_t v24 = v22;
    }
    if (v24 >> 60) {
LABEL_55:
    }
      abort();
    uint64_t v25 = 2 * v24;
    double v26 = operator new(16 * v24);
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = v26;
    for (*(void *)(a1 + 16) = &v26[v25]; v6 != a3; v6 += 2)
    {
      uint64_t v27 = v6[1];
      *double v26 = *v6;
      v26[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      v26 += 2;
    }
    *(void *)(a1 + 8) = v26;
  }
}

uint64_t altitude::ManifestManager::unregisterListener(uint64_t a1, const void **a2, unint64_t a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 80));
  long long v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  if ((uint64_t *)(a1 + 64) == v6)
  {
    uint64_t v22 = 0;
    BOOL v23 = 0;
    long long v7 = std::__tree<std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<altitude::ManifestListener *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<altitude::ManifestListener *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), a2, (uint64_t)a2);
    uint64_t v8 = (uint64_t *)(v7 + 8);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v7[8]);
    size_t v9 = v22;
    v7[7] = (uint64_t *)&v22;
    v7[8] = v9;
    uint64_t v10 = v23;
    v7[9] = v23;
    if (v10)
    {
      void v9[2] = (uint64_t)v8;
      uint64_t v22 = 0;
      BOOL v23 = 0;
      size_t v9 = 0;
    }
    else
    {
      v7[7] = v8;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
    long long v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 56, a2);
  }
  BOOL v11 = (uint64_t *)v6[8];
  if (v11)
  {
    int v12 = v6 + 8;
    long double v13 = (void *)v6[8];
    do
    {
      unint64_t v14 = v13[4];
      BOOL v15 = v14 >= a3;
      if (v14 >= a3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = v13 + 1;
      }
      if (v15) {
        int v12 = v13;
      }
      long double v13 = (void *)*v16;
    }
    while (*v16);
    if (v12 != v6 + 8 && v12[4] <= a3)
    {
      uint64_t v17 = (uint64_t *)v12[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          uint64_t v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        uint64_t v19 = v12;
        do
        {
          int v18 = (uint64_t *)v19[2];
          BOOL v20 = *v18 == (void)v19;
          uint64_t v19 = v18;
        }
        while (!v20);
      }
      if ((uint64_t *)v6[7] == v12) {
        v6[7] = (uint64_t)v18;
      }
      --v6[9];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v12);
      operator delete(v12);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    size_t v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
      abort();
    }
    unint64_t v10 = v7 - 1;
    BOOL v11 = a1;
    if ((v6 & 0x8000000000000000) != 0) {
      BOOL v11 = *a1;
    }
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v12 = 2 * v10;
      if (__len > 2 * v10) {
        unint64_t v12 = __len;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v9 = v13 + 1;
      }
      else {
        size_t v9 = 23;
      }
    }
    unint64_t v14 = operator new(v9);
    uint64_t v8 = v14;
    if (__len) {
      memcpy(v14, __src, __len);
    }
    if (v10 != 22) {
      operator delete(v11);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    uint64_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

uint64_t md::realistic::RealisticRenderLayer::RealisticRenderLayer(uint64_t a1, char a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (a5)
  {
    if (a5 < 0) {
      goto LABEL_11;
    }
    size_t v9 = 2 * a5;
    unint64_t v10 = (char *)operator new(2 * a5);
    memmove(v10, a4, v9);
    BOOL v11 = &v10[v9];
  }
  else
  {
    unint64_t v10 = 0;
    BOOL v11 = 0;
  }
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int64_t v12 = v11 - v10;
  if (v11 == v10) {
    goto LABEL_8;
  }
  if (v12 < 0) {
LABEL_11:
  }
    abort();
  uint64_t v13 = (char *)operator new(v11 - v10);
  *(void *)(a1 + 8) = v13;
  unint64_t v14 = &v13[2 * (v12 >> 1)];
  *(void *)(a1 + 24) = v14;
  memcpy(v13, v10, v12);
  *(void *)(a1 + 16) = v14;
LABEL_8:
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = a2;
  if (v10) {
    operator delete(v10);
  }
  *(void *)a1 = &unk_1EF5549F8;
  *(void *)(a1 + 4CGContextBeginTransparencyLayer(this[1], 0) = a3;
  return a1;
}

void std::__shared_ptr_emplace<geo::Task>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<geo::Task>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (unsigned char *)a1[1];
  md::RenderLayer::clearCommandBuffers((uint64_t)v2, a1[3]);
  if (v2[32])
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    uint64_t v3 = (id)GEOGetVectorKitPerformanceLog_log;
    uint64_t v4 = v3;
    os_signpost_id_t v5 = v2[34];
    if (v2[34] && os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "RenderLayerLayout", "", buf, 2u);
    }

    (*(void (**)(unsigned char *, void))(*(void *)v2 + 16))(v2, a1[2]);
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    unint64_t v6 = (id)GEOGetVectorKitPerformanceLog_log;
    uint64_t v7 = v6;
    os_signpost_id_t v8 = v2[34];
    if (v2[34] && os_signpost_enabled(v6))
    {
      *(_WORD *)size_t v9 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v7, OS_SIGNPOST_INTERVAL_END, v8, "RenderLayerLayout", "", v9, 2u);
    }
  }
  md::RenderLayer::unlock((uint64_t)v2);
}

__n128 std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A2B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57A2B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0,std::allocator<md::realistic::RealisticRenderLayer::frame(md::LayoutContext &)::$_0>,void ()(void)>::~__func()
{
}

void md::realistic::RealisticRenderLayer::createRibbonTexture(md::realistic::RealisticRenderLayer *this)
{
  uint64_t v1 = operator new(0x60uLL);
  v1[1] = 0;
  v1[2] = 0;
  *uint64_t v1 = &unk_1EF583AF8;
  uint64_t v2 = v1 + 3;
  ggl::TextureData2D::TextureData2D((uint64_t)(v1 + 3), 256, 256, 9u, 2, 0);
  uint64_t v3 = 0;
  __asm
  {
    FMOV            V3.2D, #-1.0
    FMOV            V4.2D, #1.0
    FMOV            V5.2D, #0.5
    FMOV            V6.2D, #-2.0
    FMOV            V7.2D, #3.0
  }
  float64x2_t v30 = _Q4;
  float64x2_t v31 = _Q3;
  float64x2_t v28 = _Q6;
  float64x2_t v29 = _Q5;
  float64x2_t v27 = _Q7;
  while (1)
  {
    uint64_t v13 = (*(uint64_t (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
    if (v3 <= 8)
    {
      uint64_t v14 = v13;
      unint64_t v15 = 0;
      uint64_t v16 = 0x100u >> v3;
      float v17 = fminf(fmaxf((float)((float)v16 * 0.5) + -1.5, 0.0), 102.4 / (float)(1 << v3));
      do
      {
        unint64_t v18 = 0;
        do
        {
          float v19 = hypotf((float)((float)((float)((float)v18 + 0.5) * (float)(1.0 / (float)v16)) + -0.5)* (float)v16, (float)((float)((float)((float)v15 + 0.5) * (float)(1.0 / (float)v16)) + -0.5)* (float)v16);
          v20.f32[0] = v19 + v17;
          v20.f32[1] = v19 - v17;
          float64x2_t v21 = vmaxnmq_f64(vcvtq_f64_f32(v20), v31);
          float64x2_t v22 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v21, v30), (int8x16_t)v30, (int8x16_t)vmlaq_f64(v29, v29, v21));
          float64x2_t v23 = vmulq_f64(vmulq_f64(v22, v22), vmlaq_f64(v27, v28, v22));
          *(float *)v23.f64 = vsubq_f64(v23, (float64x2_t)vdupq_laneq_s64((int64x2_t)v23, 1)).f64[0];
          float v24 = fmaxf(*(float *)v23.f64, 0.0);
          if (v24 <= 1.0) {
            float v25 = v24 * 255.0;
          }
          else {
            float v25 = 255.0;
          }
          *(unsigned char *)(v14 + v18++) = llroundf(v25);
        }
        while (v16 != v18);
        ++v15;
        v14 += v16;
      }
      while (v15 != v16);
    }
    if (++v3 == 9)
    {
      double v26 = (char *)operator new(0x58uLL);
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = 0;
      *(void *)double v26 = &unk_1EF583858;
      *((void *)v26 + 5) = 0;
      *((void *)v26 + 6) = 0;
      *((_DWORD *)v26 + 14) = 0;
      *((void *)v26 + 3) = &unk_1EF55AE58;
      *((void *)v26 + 4) = 0;
      *(_OWORD *)(v26 + 6CGContextBeginTransparencyLayer(this[1], 0) = xmmword_1A28FC790;
      *(void *)(v26 + 76) = 0x100000001;
      *((_DWORD *)v26 + 21) = 0;
      operator new();
    }
  }
}

void sub_1A1DB5968(_Unwind_Exception *a1, std::__shared_weak_count *a2, atomic_ullong *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  if (!atomic_fetch_add(a3, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
    std::__shared_weak_count::__release_weak(a2);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::Texture2D::~Texture2D(ggl::Texture2D *this)
{
  ggl::Texture2D::~Texture2D((ggl::Texture2D *)((char *)this - 40));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Texture2D::~Texture2D((ggl::Texture2D *)((char *)this - 40));
}

void non-virtual thunk to'ggl::Texture2DAbstract::~Texture2DAbstract(ggl::Texture2DAbstract *this)
{
  *((void *)this - 5) = &unk_1EF55EFB8;
  *(void *)this = &unk_1EF55EFD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this - 5) = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this - 4);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this - 2));
    *((void *)this - 2) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this - 3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *((void *)this - 5) = &unk_1EF55EFB8;
  *(void *)this = &unk_1EF55EFD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this - 5) = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this - 4);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this - 2));
    *((void *)this - 2) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this - 3);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ggl::Texture2DAbstract::~Texture2DAbstract(ggl::Texture2DAbstract *this)
{
  *(void *)this = &unk_1EF55EFB8;
  *((void *)this + 5) = &unk_1EF55EFD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55EFB8;
  *((void *)this + 5) = &unk_1EF55EFD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__shared_ptr_emplace<ggl::SamplerState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SamplerState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureData2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TextureData2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::RouteAnnotationDedupingGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RouteAnnotationDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RouteAnnotationDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void geo::_retain_ptr<NSArray * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E78;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSArray * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E78;

  return a1;
}

void *std::vector<VKTrafficFeature * {__strong},geo::StdAllocator<VKTrafficFeature * {__strong},mdm::Allocator>>::__emplace_back_slow_path<VKTrafficFeature * const {__strong}&>(uint64_t a1, id *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    unint64_t v10 = (void *)(v9 + 8 * v2);
    uint64_t v11 = v9 + v8;
    if (v9) {
      *unint64_t v10 = *a2;
    }
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = (void *)(8 * v2);
  }
  int64_t v12 = v10 + 1;
  uint64_t v13 = *(void **)a1;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14 == *(void *)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_26;
  }
  unint64_t v15 = v14 - *(void *)a1 - 8;
  if (v15 <= 0x57
    || ((unint64_t v16 = ((unint64_t)v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         unint64_t v17 = v14 + v16,
         unint64_t v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (BOOL v19 = (unint64_t)v18 >= v14)
      : (BOOL v19 = 1),
        !v19))
  {
    float64x2_t v21 = *(void **)(a1 + 8);
    do
    {
LABEL_22:
      uint64_t v27 = *--v21;
      *float64x2_t v21 = 0;
      *--unint64_t v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  uint64_t v20 = (v15 >> 3) + 1;
  float64x2_t v21 = (void *)(v14 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
  float64x2_t v22 = v10 - 2;
  float64x2_t v23 = (long long *)(v14 - 32);
  uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *v23;
    long long v25 = v23[1];
    *float64x2_t v23 = 0uLL;
    v23[1] = 0uLL;
    v23 -= 2;
    *(v22 - 1) = v26;
    *float64x2_t v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v14 = *(void *)a1;
  uint64_t v28 = *(void *)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  uint64_t v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  while (v28 != v14)
  {
    float64x2_t v30 = *(void **)(v28 - 8);
    v28 -= 8;
  }
  if (v14) {
LABEL_26:
  }
    (*(void (**)(void, unint64_t, unint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v29 - v14);
  return v12;
}

void *std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::find<VKTrafficFeature * {__strong}>(void *a1, id *a2)
{
  uint64_t v4 = [*a2 uniqueIdentifier];
  unint64_t v5 = [v4 hash];

  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v8 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & v5;
  }
  uint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  __n128 result = (void *)*v9;
  if (*v9)
  {
    id v11 = *a2;
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v6 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v14 == v5)
        {
          if ((id)result[2] == v11) {
            return result;
          }
        }
        else if ((v14 & v12) != v8)
        {
          return 0;
        }
        __n128 result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v13 = result[1];
      if (v13 == v5)
      {
        if ((id)result[2] == v11) {
          return result;
        }
      }
      else
      {
        if (v13 >= *(void *)&v6) {
          v13 %= *(void *)&v6;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1A1DB65B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 3 > v3) {
    unint64_t v3 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    uint64_t v7 = v3;
  }
  if (v7)
  {
    uint64_t v9 = 16 * v7;
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * v7, 8);
    id v11 = (_OWORD *)(v10 + 16 * v2);
    uint64_t v7 = v10 + v9;
    if (v10)
    {
      *id v11 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
  }
  else
  {
    id v11 = (_OWORD *)(16 * v2);
  }
  uint64_t v12 = v11 + 1;
  unint64_t v13 = *(void **)a1;
  uint64_t v14 = *(void **)(a1 + 8);
  if (v14 == *(void **)a1)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    do
    {
      long long v15 = *((_OWORD *)v14 - 1);
      v14 -= 2;
      *--id v11 = v15;
      *uint64_t v14 = 0;
      v14[1] = 0;
    }
    while (v14 != v13);
    uint64_t v14 = *(void **)a1;
    unint64_t v16 = *(void **)(a1 + 8);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    uint64_t v17 = *(void *)(a1 + 16);
    for (*(void *)(a1 + 16) = v7; v16 != v14; v16 -= 2)
    {
      unint64_t v18 = (std::__shared_weak_count *)*(v16 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (v14) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v17 - (void)v14);
  }
  return v12;
}

void *std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__emplace_unique_key_args<VKTrafficFeature * {__strong},std::piecewise_construct_t const&,std::tuple<VKTrafficFeature * const {__strong}&>,std::tuple<>>(uint64_t a1, id *a2, id **a3)
{
  uint64_t v7 = [*a2 uniqueIdentifier];
  unint64_t v8 = [v7 hash];

  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    id v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        id v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if ((id)v12[2] == v13) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v12[1];
          if (v14 == v8)
          {
            if ((id)v12[2] == v13) {
              return v12;
            }
          }
          else
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v12 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 32, 8);
  *uint64_t v12 = 0;
  v12[1] = v8;
  v12[2] = **a3;
  _OWORD v12[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v17 = *(float *)(a1 + 48);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_34;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_34:
      }
        std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *uint64_t v12 = *v26;
LABEL_58:
    *long long v26 = v12;
    goto LABEL_59;
  }
  *uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v12;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*v12)
  {
    unint64_t v27 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    long long v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 40);
  return v12;
}

void sub_1A1DB6AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A1DB6AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,std::equal_to<int>,std::hash<int>,true>,geo::StdAllocator<std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = v2[3];
      if (v6)
      {
        uint64_t v7 = v2[4];
        unint64_t v8 = (void *)v2[3];
        if (v7 != v6)
        {
          do
          {
            unint64_t v9 = *(void **)(v7 - 8);
            v7 -= 8;
          }
          while (v7 != v6);
          unint64_t v8 = (void *)v2[3];
        }
        v2[4] = v6;
        operator delete(v8);
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v2, 48);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {

    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 32);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::RouteAnnotationLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RouteAnnotationLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RouteAnnotationLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<int,std::vector<VKTrafficFeature * {__strong}>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 32);
        uint64_t v5 = *(void **)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            uint64_t v6 = *(void **)(v4 - 8);
            v4 -= 8;
          }
          while (v4 != v3);
          uint64_t v5 = *(void **)(v2 + 24);
        }
        *(void *)(v2 + 32) = v3;
        operator delete(v5);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 48);
  }
  return a1;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(id *a1, void **a2, void **a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *a2;
  id v7 = *a1;
  uint64_t v8 = [v6 routeOffset];
  uint64_t v9 = [v7 routeOffset];
  if (v8 >= v9)
  {

    BOOL v10 = v8 == v9 && *((float *)&v8 + 1) < *((float *)&v9 + 1);
    if (!v10)
    {
      id v11 = *a3;
      id v12 = *v4;
      uint64_t v13 = [v11 routeOffset];
      uint64_t v14 = [v12 routeOffset];
      if (v13 >= v14)
      {

        if (v13 != v14 || *((float *)&v13 + 1) >= *((float *)&v14 + 1)) {
          return;
        }
      }
      else
      {
      }
      id v30 = *v4;
      id *v4 = 0;
      float64x2_t v31 = *a3;
      *a3 = 0;
      id v32 = *v4;
      id *v4 = v31;

      uint64_t v33 = *a3;
      *a3 = v30;

      id v34 = *v4;
      id v16 = *v5;
      uint64_t v35 = [v34 routeOffset];
      uint64_t v36 = [v16 routeOffset];
      if (v35 >= v36)
      {

        if (v35 != v36 || *((float *)&v35 + 1) >= *((float *)&v36 + 1)) {
          return;
        }
        goto LABEL_15;
      }
      goto LABEL_11;
    }
  }
  else
  {
  }
  uint64_t v15 = *a3;
  id v16 = *v4;
  uint64_t v17 = [v15 routeOffset];
  uint64_t v18 = [v16 routeOffset];
  if (v17 >= v18)
  {

    if (v17 == v18 && *((float *)&v17 + 1) < *((float *)&v18 + 1))
    {
      uint64_t v4 = a3;
      goto LABEL_15;
    }
    id v23 = *v5;
    *uint64_t v5 = 0;
    id v24 = *v4;
    id *v4 = 0;
    id v25 = *v5;
    *uint64_t v5 = v24;

    id v26 = *v4;
    id *v4 = v23;

    unint64_t v27 = *a3;
    id v16 = *v4;
    uint64_t v28 = [v27 routeOffset];
    uint64_t v29 = [v16 routeOffset];
    if (v28 >= v29)
    {

      if (v28 != v29) {
        return;
      }
      BOOL v10 = *((float *)&v28 + 1) < *((float *)&v29 + 1);
      uint64_t v5 = v4;
      uint64_t v4 = a3;
      if (!v10) {
        return;
      }
      goto LABEL_15;
    }
    uint64_t v5 = v4;
  }
  uint64_t v4 = a3;
LABEL_11:

LABEL_15:
  id v19 = *v5;
  *uint64_t v5 = 0;
  id v20 = *v4;
  id *v4 = 0;
  id v21 = *v5;
  *uint64_t v5 = v20;

  id v22 = *v4;
  id *v4 = v19;
}

void sub_1A1DB7024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(id *a1, void **a2, void **a3, void **a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a2, a3);
  uint64_t v8 = *a4;
  id v9 = *a3;
  uint64_t v10 = [v8 routeOffset];
  uint64_t v11 = [v9 routeOffset];
  if (v10 >= v11)
  {

    if (v10 != v11 || *((float *)&v10 + 1) >= *((float *)&v11 + 1)) {
      return;
    }
  }
  else
  {
  }
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = *a4;
  *a4 = 0;
  uint64_t v15 = *a3;
  *a3 = v14;

  id v16 = *a4;
  *a4 = v13;

  uint64_t v17 = *a3;
  id v18 = *a2;
  uint64_t v19 = [v17 routeOffset];
  uint64_t v20 = [v18 routeOffset];
  if (v19 >= v20)
  {

    if (v19 != v20 || *((float *)&v19 + 1) >= *((float *)&v20 + 1)) {
      return;
    }
  }
  else
  {
  }
  id v21 = *a2;
  *a2 = 0;
  id v22 = *a3;
  *a3 = 0;
  id v23 = *a2;
  *a2 = v22;

  id v24 = *a3;
  *a3 = v21;

  id v25 = *a2;
  id v26 = *a1;
  uint64_t v27 = [v25 routeOffset];
  uint64_t v28 = [v26 routeOffset];
  if (v27 >= v28)
  {

    if (v27 != v28 || *((float *)&v27 + 1) >= *((float *)&v28 + 1)) {
      return;
    }
  }
  else
  {
  }
  id v29 = *a1;
  *a1 = 0;
  id v30 = *a2;
  *a2 = 0;
  id v31 = *a1;
  *a1 = v30;

  id v32 = *a2;
  *a2 = v29;
}

void sub_1A1DB7258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,0>(id *a1, void **a2, void **a3, void **a4, void **a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  id v11 = *a4;
  uint64_t v12 = [v10 routeOffset];
  uint64_t v13 = [v11 routeOffset];
  if (v12 >= v13)
  {

    if (v12 != v13 || *((float *)&v12 + 1) >= *((float *)&v13 + 1)) {
      return;
    }
  }
  else
  {
  }
  uint64_t v15 = *a4;
  *a4 = 0;
  id v16 = *a5;
  *a5 = 0;
  uint64_t v17 = *a4;
  *a4 = v16;

  id v18 = *a5;
  *a5 = v15;

  uint64_t v19 = *a4;
  id v20 = *a3;
  uint64_t v21 = [v19 routeOffset];
  uint64_t v22 = [v20 routeOffset];
  if (v21 >= v22)
  {

    if (v21 != v22 || *((float *)&v21 + 1) >= *((float *)&v22 + 1)) {
      return;
    }
  }
  else
  {
  }
  id v23 = *a3;
  *a3 = 0;
  id v24 = *a4;
  *a4 = 0;
  id v25 = *a3;
  *a3 = v24;

  id v26 = *a4;
  *a4 = v23;

  uint64_t v27 = *a3;
  id v28 = *a2;
  uint64_t v29 = [v27 routeOffset];
  uint64_t v30 = [v28 routeOffset];
  if (v29 >= v30)
  {

    if (v29 != v30 || *((float *)&v29 + 1) >= *((float *)&v30 + 1)) {
      return;
    }
  }
  else
  {
  }
  id v31 = *a2;
  *a2 = 0;
  id v32 = *a3;
  *a3 = 0;
  uint64_t v33 = *a2;
  *a2 = v32;

  id v34 = *a3;
  *a3 = v31;

  uint64_t v35 = *a2;
  id v36 = *a1;
  uint64_t v37 = [v35 routeOffset];
  uint64_t v38 = [v36 routeOffset];
  if (v37 >= v38)
  {

    if (v37 != v38 || *((float *)&v37 + 1) >= *((float *)&v38 + 1)) {
      return;
    }
  }
  else
  {
  }
  id v39 = *a1;
  *a1 = 0;
  long long v40 = *a2;
  *a2 = 0;
  id v41 = *a1;
  *a1 = v40;

  double v42 = *a2;
  *a2 = v39;
}

void sub_1A1DB7504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(id *a1, id *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      id v7 = *a1;
      uint64_t v8 = [v6 routeOffset];
      uint64_t v9 = [v7 routeOffset];
      if (v8 < v9)
      {

LABEL_35:
        id v32 = *a1;
        *a1 = 0;
        uint64_t v33 = *(v2 - 1);
        *(v2 - 1) = 0;
        id v34 = *a1;
        *a1 = v33;

        uint64_t v35 = *(v2 - 1);
        *(v2 - 1) = v32;

        return 1;
      }

      if (v8 == v9 && *((float *)&v8 + 1) < *((float *)&v9 + 1)) {
        goto LABEL_35;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a1 + 2);
      id v11 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      id v36 = v2;
      while (2)
      {
        id v16 = *v11;
        id v17 = *v10;
        uint64_t v18 = [v16 routeOffset];
        uint64_t v19 = [v17 routeOffset];
        if (v18 >= v19)
        {

          if (v18 != v19 || *((float *)&v18 + 1) >= *((float *)&v19 + 1)) {
            goto LABEL_10;
          }
        }
        else
        {
        }
        uint64_t v21 = *v11;
        id v22 = *v10;
        *uint64_t v10 = 0;
        *id v11 = v22;
        uint64_t v14 = a1;
        if (v10 == a1) {
          goto LABEL_9;
        }
        uint64_t v23 = v12;
        while (2)
        {
          id v26 = (char *)a1 + v23;
          id v27 = *(id *)((char *)a1 + v23 + 8);
          uint64_t v28 = [v21 routeOffset];
          uint64_t v29 = [v27 routeOffset];
          if (v28 < v29)
          {

            goto LABEL_21;
          }

          if (v28 == v29 && *((float *)&v28 + 1) < *((float *)&v29 + 1))
          {
LABEL_21:
            uint64_t v24 = *((void *)v26 + 1);
            id v25 = (void *)*((void *)v26 + 2);
            *((void *)v26 + 1) = 0;
            *((void *)v26 + 2) = v24;

            v23 -= 8;
            if (v23 == -16)
            {
              uint64_t v14 = a1;
              goto LABEL_8;
            }
            continue;
          }
          break;
        }
        uint64_t v14 = (id *)((char *)a1 + v23 + 16);
LABEL_8:
        uint64_t v2 = v36;
LABEL_9:
        uint64_t v15 = *v14;
        *uint64_t v14 = v21;

        if (++v13 == 8) {
          return v11 + 1 == v2;
        }
LABEL_10:
        uint64_t v10 = v11;
        v12 += 8;
        if (++v11 != v2) {
          continue;
        }
        return 1;
      }
  }
}

void sub_1A1DB77F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::ColorGlyphWithNormalHalo::DefaultPipelineState::~DefaultPipelineState(ggl::ColorGlyphWithNormalHalo::DefaultPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ggl::PipelineState::~PipelineState(ggl::PipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::textureIsEnabled(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::constantDataIsEnabled(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void geo::ScopedFunctions::~ScopedFunctions(geo::ScopedFunctions *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    uint64_t v3 = (geo::ScopedFunctions *)*((void *)this + 3);
    if (v3 == this)
    {
      (*(void (**)(geo::ScopedFunctions *))(*(void *)this + 32))(this);
    }
    else if (v3)
    {
      (*(void (**)(geo::ScopedFunctions *))(*(void *)v3 + 40))(v3);
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1DB7EFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[3];
  if (v3 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL35GEOGetVectorKitRouteOverlayLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "RouteOverlayLogic");
  uint64_t v1 = (void *)GEOGetVectorKitRouteOverlayLogicLog(void)::log;
  GEOGetVectorKitRouteOverlayLogicLog(void)::log = (uint64_t)v0;
}

void geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559F98;

  JUMPOUT(0x1A6239270);
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5737D0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF5737D0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573788;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF573788;
  result[1] = v3;
  return result;
}