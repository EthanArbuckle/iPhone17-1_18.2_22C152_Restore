void sub_1A1971558(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (result)
  {
    v9 = *(void **)(result + 8);
    uint64_t v10 = v9[3];
    uint64_t v11 = v9[4];
    uint64_t v12 = v11 - v10;
    if (v11 != v10)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v12 >> 3;
      while (1)
      {
        uint64_t v15 = *(void *)(v10 + 8 * v13);
        if (*(unsigned char *)v15 == 3)
        {
          unint64_t v16 = *(void *)(v15 + 8);
          uint64_t v17 = v9[15];
          if (v16 < (v9[16] - v17) >> 3) {
            break;
          }
        }
        if (++v13 >= v14) {
          goto LABEL_17;
        }
      }
      if (*(void *)(v17 + 8 * v16)) {
        gdc::Registry::create(*(gdc::Registry **)(*(void *)(a1 + 8) + 8));
      }
    }
  }
LABEL_17:
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  v4 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v6[7];
    uint64_t v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v56 = 33 * v18;
      uint64_t v23 = v6[11];
      uint64_t v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v6[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v4[7];
        uint64_t v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v4[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    v38 = v62;
    uint64_t v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      uint64_t v39 = v60[4];
      unint64_t v40 = (v60[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v60[7];
            uint64_t result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v61[4];
                uint64_t result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v61[7];
                    uint64_t v52 = v61[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v62 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v4[11];
  uint64_t v34 = v4[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  *uint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x5E7EAD35976A86ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5E7EAD35976A86ALL;
    if (*(void *)&v1 <= 0x5E7EAD35976A86AuLL) {
      uint64_t v3 = 0x5E7EAD35976A86AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5E7EAD35976A86ALL;
  }
  v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5E7EAD35976A86ALL)
      {
        if (v5[2] == 0x5E7EAD35976A86ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5E7EAD35976A86ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5E7EAD35976A86ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1971F3C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::DataForCommandBuffer>(int8x8_t *a1)
{
  uint64_t v10 = 0x171C8753A53C145FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x171C8753A53C145FLL;
    if (*(void *)&v1 <= 0x171C8753A53C145FuLL) {
      uint64_t v3 = 0x171C8753A53C145FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x171C8753A53C145FLL;
  }
  v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x171C8753A53C145FLL)
      {
        if (v5[2] == 0x171C8753A53C145FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x171C8753A53C145FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x171C8753A53C145FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19721AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::UnmanagedObjectHolder<ecs2::Runtime>::~UnmanagedObjectHolder()
{
}

uint64_t gdc::Registry::storage<md::ls::GradientConstantDataHandle1>(int8x8_t *a1)
{
  unint64_t v10 = 0x8963537098E96576;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8963537098E96576;
    if (*(void *)&v1 <= 0x8963537098E96576) {
      unint64_t v3 = 0x8963537098E96576 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8963537098E96576;
  }
  v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8963537098E96576)
      {
        if (v5[2] == 0x8963537098E96576) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8963537098E96576) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8963537098E96576) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1972430(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL esl::QuartzContext::drawLinearGradient(CGContextRef *a1, void **a2, float **a3, float *a4, float *a5)
{
  uint64_t v5 = (char *)*a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v8 = a3[1];
    if (*a3 != v8 && (v6 - v5) >> 5 == v8 - *a3)
    {
      unint64_t v13 = (char *)*a2;
      while (((*(uint64_t (**)(char *))(*(void *)v13 + 48))(v13) & 1) != 0)
      {
        v13 += 32;
        v5 += 32;
        if (v13 == v6)
        {
          if (!(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1)) {
            return 0;
          }
          __p = 0;
          unint64_t v40 = 0;
          v41 = 0;
          std::vector<double>::reserve(&__p, a3[1] - *a3);
          unint64_t v14 = *a3;
          unint64_t v15 = a3[1];
          if (*a3 != v15)
          {
            uint64_t v16 = v40;
            do
            {
              double v17 = *v14;
              if (v16 >= v41)
              {
                uint64_t v19 = (double *)__p;
                uint64_t v20 = ((char *)v16 - (unsigned char *)__p) >> 3;
                unint64_t v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v22 = (char *)v41 - (unsigned char *)__p;
                if (((char *)v41 - (unsigned char *)__p) >> 2 > v21) {
                  unint64_t v21 = v22 >> 2;
                }
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v21;
                }
                if (v23)
                {
                  uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v41, v23);
                  uint64_t v19 = (double *)__p;
                  uint64_t v16 = v40;
                }
                else
                {
                  uint64_t v24 = 0;
                }
                uint64_t v25 = (double *)&v24[8 * v20];
                *uint64_t v25 = v17;
                unint64_t v18 = v25 + 1;
                while (v16 != v19)
                {
                  uint64_t v26 = *((void *)v16-- - 1);
                  *((void *)v25-- - 1) = v26;
                }
                __p = v25;
                unint64_t v40 = v18;
                v41 = (double *)&v24[8 * v23];
                if (v19) {
                  operator delete(v19);
                }
              }
              else
              {
                *uint64_t v16 = v17;
                unint64_t v18 = v16 + 1;
              }
              unint64_t v40 = v18;
              ++v14;
              uint64_t v16 = v18;
            }
            while (v14 != v15);
          }
          CFArrayRef Mutable = CFArrayCreateMutable(0, ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5, 0);
          v37 = &unk_1EF559158;
          CFArrayRef colors = Mutable;
          if (Mutable)
          {
            unint64_t v28 = (char *)*a2;
            uint64_t v29 = (char *)a2[1];
            if (*a2 != v29)
            {
              do
              {
                uint64_t v30 = colors;
                esl::QuartzColor::color(v28, &v35);
                CFArrayAppendValue(v30, value);
                geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v35);
                v28 += 32;
              }
              while (v28 != v29);
              unint64_t v28 = (char *)*a2;
            }
            esl::QuartzColor::cgColorSpace((CGColorRef *)v28, &v35);
            if (value)
            {
              uint64_t v31 = CGGradientCreateWithColors((CGColorSpaceRef)value, colors, (const CGFloat *)__p);
              v34[0] = &unk_1EF558FD8;
              v34[1] = v31;
              BOOL v32 = v31 != 0;
              if (v31)
              {
                v42.x = *a4;
                v42.y = a4[1];
                v43.x = *a5;
                v43.y = a5[1];
                CGContextDrawLinearGradient(a1[1], v31, v42, v43, 3u);
              }
              geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v34);
            }
            else
            {
              BOOL v32 = 0;
            }
            geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v35);
          }
          else
          {
            BOOL v32 = 0;
          }
          geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v37);
          if (__p)
          {
            unint64_t v40 = (double *)__p;
            operator delete(__p);
          }
          return v32;
        }
      }
    }
  }
  return 0;
}

void sub_1A197278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t esl::QuartzContext::setFillColor(CGContext **this, const esl::QuartzColor *a2)
{
  uint64_t result = (*(uint64_t (**)(const esl::QuartzColor *))(*(void *)a2 + 48))(a2);
  if (result)
  {
    uint64_t result = (*((uint64_t (**)(CGContext **))*this + 3))(this);
    if (result)
    {
      uint64_t v5 = this[1];
      esl::QuartzColor::color(a2, v6);
      CGContextSetFillColorWithColor(v5, v6[1]);
      geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v6);
      return 1;
    }
  }
  return result;
}

void sub_1A19728A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL esl::QuartzColor::isValid(esl::QuartzColor *this)
{
  return *((void *)this + 2) != 0;
}

void *geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF5590F8;
  uint8x8_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFTypeRef esl::QuartzColor::color@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  *a2 = &unk_1EF5590F8;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 2));
  }
  a2[1] = v3;
  return this;
}

void grl::drawStrokeToContext(void *a1, void *a2, uint64_t a3, float a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5) & 1) != 0)
  {
    if (*a2 && ((*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2) & 1) != 0)
    {
      if (*(unsigned char *)(a3 + 3))
      {
        if (a4 > 0.0)
        {
          if ((*(unsigned int (**)(void))(*(void *)*a2 + 24))())
          {
            if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
            }
            uint64_t v13 = GEOGetGeoResourceLibRendererLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              unint64_t v10 = "Receieved empty path for drawStrokeToContext().";
              uint64_t v11 = v13;
              uint32_t v12 = 2;
              goto LABEL_20;
            }
          }
          else
          {
            esl::QuartzColor::QuartzColor(buf, a3);
            if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
            {
              (*(void (**)(void))(*(void *)*a1 + 408))(*a1);
              (*(void (**)(void, unsigned char *))(*(void *)*a1 + 160))(*a1, buf);
              (*(void (**)(float))(*(void *)*a1 + 168))(a4 + a4);
              (*(void (**)(void))(*(void *)*a1 + 288))();
              (*(void (**)(void))(*(void *)*a1 + 304))();
              (*(void (**)(void))(*(void *)*a1 + 400))();
            }
            else
            {
              if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
                dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
              }
              unint64_t v14 = GEOGetGeoResourceLibEaselLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)unint64_t v15 = 0;
                _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "Failed to create the stroke color for a path.", v15, 2u);
              }
            }
            *(void *)buf = &unk_1EF554AE8;
            *(void *)&buf[8] = &unk_1EF5590F8;
            if (*(void *)&buf[16]) {
              CFRelease(*(CFTypeRef *)&buf[16]);
            }
          }
        }
        else
        {
          if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
          }
          uint64_t v9 = GEOGetGeoResourceLibRendererLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
            *(_WORD *)&buf[22] = 1024;
            int v17 = 410;
            unint64_t v10 = "A positive weight is required to draw for drawStrokeToContext().: Assertion with expression - %s : Fai"
                  "led in file - %s line - %i";
LABEL_19:
            uint64_t v11 = v9;
            uint32_t v12 = 28;
LABEL_20:
            _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
        }
        uint64_t v9 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
          *(_WORD *)&buf[22] = 1024;
          int v17 = 407;
          unint64_t v10 = "A non-zero alpha color is required to draw for drawStrokeToContext().: Assertion with expression - %s : "
                "Failed in file - %s line - %i";
          goto LABEL_19;
        }
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      uint64_t v9 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
        *(_WORD *)&buf[22] = 1024;
        int v17 = 404;
        unint64_t v10 = "A non-nullptr path is required for drawStrokeToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    uint64_t v9 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
      *(_WORD *)&buf[22] = 1024;
      int v17 = 401;
      unint64_t v10 = "A non-nullptr context is required for drawStrokeToContext().: Assertion with expression - %s : Failed in fil"
            "e - %s line - %i";
      goto LABEL_19;
    }
  }
}

BOOL esl::QuartzPath::isEmpty(esl::QuartzPath *this)
{
  CGRect BoundingBox = CGPathGetBoundingBox((CGPathRef)*((void *)this + 1));
  return CGRectIsNull(BoundingBox);
}

void esl::QuartzContext::saveState(esl::QuartzContext *this)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    uint8x8_t v2 = (CGContext *)*((void *)this + 1);
    CGContextSaveGState(v2);
  }
}

uint64_t esl::QuartzContext::addPath(CGContextRef *a1, uint64_t a2)
{
  uint64_t result = (*((uint64_t (**)(CGContextRef *))*a1 + 3))(a1);
  if (result)
  {
    if (*(void *)a2 && (uint64_t v5 = *(const CGPath **)(*(void *)a2 + 8)) != 0)
    {
      CGContextAddPath(a1[1], v5);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void esl::QuartzContext::restoreState(esl::QuartzContext *this)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    uint8x8_t v2 = (CGContext *)*((void *)this + 1);
    CGContextRestoreGState(v2);
  }
}

void grl::IconRenderer::renderImage(grl::IconRenderer *this@<X0>, void *a2@<X8>)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 34);
    *a2 = v4;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    return;
  }
  uint64_t v6 = 0;
  unint64_t v7 = (float32x2_t *)((char *)this + 152);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)buf = _D0;
  char v13 = 1;
  do
  {
    float v14 = v7->f32[v6];
    float v15 = *(float *)&buf[4 * v6];
    if ((v13 & 1) == 0) {
      break;
    }
    char v13 = 0;
    uint64_t v6 = 1;
  }
  while (v14 >= v15);
  if (v14 >= v15)
  {
    uint64_t v16 = (std::__shared_weak_count *)operator new(0x28uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
    int v17 = v16 + 1;
    __n128 v18 = esl::QuartzContext::QuartzContext(&v16[1], 3, *((float *)this + 38), *((float *)this + 39));
    if (((uint64_t (*)(__n128))v16[1].__get_deleter)(v18))
    {
      if (*((unsigned char *)this + 256))
      {
        unsigned int v19 = ((uint64_t (*)(std::__shared_weak_count *))v17->__vftable[2].__on_zero_shared_weak)(v17);
        double v20 = esl::AffineTransformMake(-1.0, 0.0, 0.0, 1.0, (float)v19, 0.0, (uint64_t)buf);
        ((void (*)(std::__shared_weak_count *, unsigned char *, double))v17->__vftable[2].~__shared_weak_count)(v17, buf, v20);
      }
      unint64_t v21 = (grl::IconRenderer *)*((void *)this + 4);
      if (v21 == (grl::IconRenderer *)((char *)this + 40))
      {
LABEL_54:
        ((void (*)(long long *__return_ptr, std::__shared_weak_count *))v17->__vftable[9].__on_zero_shared_weak)(&v81, v17);
        if (void)v81 && ((*(uint64_t (**)(void))(*(void *)v81 + 40))(v81))
        {
          if (*((unsigned char *)this + 72))
          {
            float v36 = *((float *)this + 27);
            if (v36 != 1.0)
            {
              float32x2_t v37 = vadd_f32(vrndp_f32(vmul_n_f32(*v7, v36)), 0);
              *(void *)buf = 0;
              *(float32x2_t *)&buf[8] = v37;
              if (v37.f32[0] >= 0.0) {
                float v38 = v37.f32[0];
              }
              else {
                float v38 = 0.0;
              }
              if (v37.f32[1] >= 0.0) {
                float v39 = v37.f32[1];
              }
              else {
                float v39 = 0.0;
              }
              unint64_t v40 = (std::__shared_weak_count *)operator new(0x28uLL);
              v40->__shared_owners_ = 0;
              v40->__shared_weak_owners_ = 0;
              v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
              __n128 v41 = esl::QuartzContext::QuartzContext(&v40[1], 3, v38, v39);
              ((void (*)(__n128))v40[1].__vftable[9].__on_zero_shared)(v41);
              ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v40[1].__vftable[9].__on_zero_shared_weak)(&v84, &v40[1]);
              long long v42 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = 0uLL;
              CGPoint v43 = (std::__shared_weak_count *)*((void *)&v81 + 1);
              long long v81 = v42;
              if (v43)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v43);
                if (v84.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v84.__r_.__value_.__l.__size_);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
          }
          if (*((unsigned char *)this + 288))
          {
            if (*((unsigned char *)this + 282))
            {
              uint64_t v44 = (void *)*((void *)this + 46);
              if (v44 != (void *)((char *)this + 360))
              {
                unsigned int v45 = 0;
                do
                {
                  uint64_t v47 = v44[2];
                  uint64_t v46 = (std::__shared_weak_count *)v44[3];
                  if (v46) {
                    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (*((char *)this + 319) >= 0) {
                    size_t v48 = *((unsigned __int8 *)this + 319);
                  }
                  else {
                    size_t v48 = *((void *)this + 38);
                  }
                  std::string::basic_string[abi:nn180100]((uint64_t)&v80, v48 + 5);
                  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v49 = &v80;
                  }
                  else {
                    uint64_t v49 = (std::string *)v80.__r_.__value_.__r.__words[0];
                  }
                  if (v48)
                  {
                    if (*((char *)this + 319) >= 0) {
                      uint64_t v50 = (char *)this + 296;
                    }
                    else {
                      uint64_t v50 = (char *)*((void *)this + 37);
                    }
                    memmove(v49, v50, v48);
                  }
                  strcpy((char *)v49 + v48, "image");
                  std::to_string(&v79, v45);
                  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    unint64_t v51 = &v79;
                  }
                  else {
                    unint64_t v51 = (std::string *)v79.__r_.__value_.__r.__words[0];
                  }
                  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type size = v79.__r_.__value_.__l.__size_;
                  }
                  uint64_t v53 = std::string::append(&v80, (const std::string::value_type *)v51, size);
                  std::string::size_type v54 = v53->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                  v84.__r_.__value_.__r.__words[2] = v54;
                  v53->__r_.__value_.__l.__size_ = 0;
                  v53->__r_.__value_.__r.__words[2] = 0;
                  v53->__r_.__value_.__r.__words[0] = 0;
                  v55 = std::string::append(&v84, ".png");
                  std::string::size_type v56 = v55->__r_.__value_.__r.__words[2];
                  *(_OWORD *)buf = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                  *(void *)&buf[16] = v56;
                  v55->__r_.__value_.__l.__size_ = 0;
                  v55->__r_.__value_.__r.__words[2] = 0;
                  v55->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v84.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v79.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v80.__r_.__value_.__l.__data_);
                  }
                  if (buf[23] >= 0) {
                    v57 = buf;
                  }
                  else {
                    v57 = *(unsigned char **)buf;
                  }
                  (*(void (**)(uint64_t, unsigned char *))(*(void *)v47 + 112))(v47, v57);
                  if ((buf[23] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                  if (v46) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                  }
                  uint64_t v44 = (void *)v44[1];
                  ++v45;
                }
                while (v44 != (void *)((char *)this + 360));
              }
            }
            else if (*((unsigned char *)this + 281))
            {
              uint64_t v59 = (grl::IconRenderer *)*((void *)this + 40);
              if (v59 != (grl::IconRenderer *)((char *)this + 328))
              {
                unsigned int v60 = 0;
                do
                {
                  uint64_t v62 = *((void *)v59 + 5);
                  v61 = (std::__shared_weak_count *)*((void *)v59 + 6);
                  if (v61) {
                    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (*((char *)this + 319) >= 0) {
                    size_t v63 = *((unsigned __int8 *)this + 319);
                  }
                  else {
                    size_t v63 = *((void *)this + 38);
                  }
                  std::string::basic_string[abi:nn180100]((uint64_t)&v80, v63 + 5);
                  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v64 = &v80;
                  }
                  else {
                    v64 = (std::string *)v80.__r_.__value_.__r.__words[0];
                  }
                  if (v63)
                  {
                    if (*((char *)this + 319) >= 0) {
                      v65 = (char *)this + 296;
                    }
                    else {
                      v65 = (char *)*((void *)this + 37);
                    }
                    memmove(v64, v65, v63);
                  }
                  strcpy((char *)v64 + v63, "image");
                  std::to_string(&v79, v60);
                  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v66 = &v79;
                  }
                  else {
                    v66 = (std::string *)v79.__r_.__value_.__r.__words[0];
                  }
                  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v67 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v67 = v79.__r_.__value_.__l.__size_;
                  }
                  v68 = std::string::append(&v80, (const std::string::value_type *)v66, v67);
                  std::string::size_type v69 = v68->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                  v84.__r_.__value_.__r.__words[2] = v69;
                  v68->__r_.__value_.__l.__size_ = 0;
                  v68->__r_.__value_.__r.__words[2] = 0;
                  v68->__r_.__value_.__r.__words[0] = 0;
                  v70 = std::string::append(&v84, ".png");
                  std::string::size_type v71 = v70->__r_.__value_.__r.__words[2];
                  *(_OWORD *)buf = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
                  *(void *)&buf[16] = v71;
                  v70->__r_.__value_.__l.__size_ = 0;
                  v70->__r_.__value_.__r.__words[2] = 0;
                  v70->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v84.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v79.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v80.__r_.__value_.__l.__data_);
                  }
                  if (buf[23] >= 0) {
                    v72 = buf;
                  }
                  else {
                    v72 = *(unsigned char **)buf;
                  }
                  (*(void (**)(uint64_t, unsigned char *))(*(void *)v62 + 112))(v62, v72);
                  if ((buf[23] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                  if (v61) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                  }
                  v73 = (grl::IconRenderer *)*((void *)v59 + 1);
                  if (v73)
                  {
                    do
                    {
                      v74 = v73;
                      v73 = *(grl::IconRenderer **)v73;
                    }
                    while (v73);
                  }
                  else
                  {
                    do
                    {
                      v74 = (grl::IconRenderer *)*((void *)v59 + 2);
                      _ZF = *(void *)v74 == (void)v59;
                      uint64_t v59 = v74;
                    }
                    while (!_ZF);
                  }
                  ++v60;
                  uint64_t v59 = v74;
                }
                while (v74 != (grl::IconRenderer *)((char *)this + 328));
              }
            }
          }
          uint64_t v75 = *((void *)&v81 + 1);
          uint64_t v76 = v81;
          if (*((void *)&v81 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v77 = (std::__shared_weak_count *)*((void *)this + 34);
          *((void *)this + 33) = v76;
          *((void *)this + 34) = v75;
          if (v77)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            uint64_t v76 = *((void *)this + 33);
            uint64_t v75 = *((void *)this + 34);
          }
          *a2 = v76;
          a2[1] = v75;
          if (v75) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
          }
          v58 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
            *(_WORD *)&buf[22] = 1024;
            int v86 = 111;
            _os_log_impl(&dword_1A1780000, v58, OS_LOG_TYPE_ERROR, "Failed to generate an icon image.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
          *a2 = 0;
          a2[1] = 0;
        }
        if (*((void *)&v81 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
        }
        goto LABEL_166;
      }
      v78 = (uint64_t **)((char *)this + 320);
      while (1)
      {
        uint64_t v22 = *((void *)v21 + 5);
        if (!v22) {
          break;
        }
        v82 = v16 + 1;
        v83 = v16;
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, grl::IconRenderer *, std::__shared_weak_count **, char *))(*(void *)v22 + 16))(v22, this, &v82, (char *)this + 360);
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        if (*((unsigned char *)this + 281))
        {
          ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v17->__vftable[9].__on_zero_shared_weak)(&v84, v17);
          if (v84.__r_.__value_.__r.__words[0]
            && ((*(uint64_t (**)(std::string::size_type))(*(void *)v84.__r_.__value_.__l.__data_ + 40))(v84.__r_.__value_.__r.__words[0]) & 1) != 0)
          {
            unint64_t v23 = (uint64_t **)std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::__find_equal<grl::IconLayerMapKey>((uint64_t)v78, buf, (__int16 *)v21 + 16);
            uint64_t v24 = (uint64_t)*v23;
            if (!*v23)
            {
              uint64_t v25 = v23;
              uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 42) + 16))(*((void *)this + 42), 56, 8);
              uint64_t v24 = v26;
              *(_DWORD *)(v26 + 32) = *((_DWORD *)v21 + 8);
              *(unsigned char *)(v26 + 36) = 0;
              if (*((unsigned char *)v21 + 36))
              {
                *(unsigned char *)(v26 + 37) = *((unsigned char *)v21 + 37);
                *(unsigned char *)(v26 + 36) = 1;
              }
              *(void *)(v26 + 40) = 0;
              *(void *)(v26 + 48) = 0;
              std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(v78, *(uint64_t *)buf, v25, (uint64_t *)v26);
            }
            long long v27 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
            if (v84.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v84.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v28 = *(std::__shared_weak_count **)(v24 + 48);
            *(_OWORD *)(v24 + 40) = v27;
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
          }
          else
          {
            if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
            }
            uint64_t v29 = GEOGetGeoResourceLibEaselLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
              *(_WORD *)&buf[22] = 1024;
              int v86 = 102;
              _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_ERROR, "Failed to generate a layer image.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
          }
          if (v84.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v84.__r_.__value_.__l.__size_);
          }
        }
        uint64_t v30 = (grl::IconRenderer *)*((void *)v21 + 1);
        if (v30)
        {
          do
          {
            uint64_t v31 = v30;
            uint64_t v30 = *(grl::IconRenderer **)v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            uint64_t v31 = (grl::IconRenderer *)*((void *)v21 + 2);
            _ZF = *(void *)v31 == (void)v21;
            unint64_t v21 = v31;
          }
          while (!_ZF);
        }
        unint64_t v21 = v31;
        if (v31 == (grl::IconRenderer *)((char *)this + 40)) {
          goto LABEL_54;
        }
      }
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
      }
      uint64_t v34 = GEOGetGeoResourceLibRendererLog::log;
      if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
LABEL_116:
        *a2 = 0;
        a2[1] = 0;
LABEL_166:
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        return;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
      *(_WORD *)&buf[22] = 1024;
      int v86 = 92;
      uint64_t v35 = "A nullptr for a layer renderer found. Can't draw layer.: Assertion with expression - %s : Failed in file - %s line - %i";
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      uint64_t v34 = GEOGetGeoResourceLibEaselLog::log;
      if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_116;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
      *(_WORD *)&buf[22] = 1024;
      int v86 = 79;
      uint64_t v35 = "Failed to generate a valid context.: Assertion with expression - %s : Failed in file - %s line - %i";
    }
    _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_ERROR, v35, buf, 0x1Cu);
    goto LABEL_116;
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
  }
  BOOL v32 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    grl::IconRenderer::description((uint64_t *)buf, this);
    uint64_t v33 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    LODWORD(v84.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    _os_log_impl(&dword_1A1780000, v32, OS_LOG_TYPE_ERROR, "Icon generated with metric size of zero. %s", (uint8_t *)&v84, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void *esl::QuartzContext::QuartzContext(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *a1 = &unk_1EF554BE0;
  a1[1] = 0;
  if (a2 > 1)
  {
    uint32_t v9 = 8194;
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
  }
  else
  {
    DeviceRGB = CGColorSpaceCreateDeviceGray();
    uint32_t v9 = 0;
  }
  size_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 88))(a1, a2, a3);
  a1[1] = CGBitmapContextCreate(0, a3, a4, 8uLL, v10, DeviceRGB, v9);
  CGColorSpaceRelease(DeviceRGB);
  (*(void (**)(void *))(*a1 + 16))(a1);
  return a1;
}

uint64_t esl::QuartzContext::bitmapAlignedBytesPerRow(uint64_t a1, int a2, int a3)
{
  if (a2 == 1) {
    return 8 * a3;
  }
  else {
    return CGBitmapGetAlignedBytesPerRow();
  }
}

uint64_t esl::QuartzContext::clear(esl::QuartzContext *this)
{
  uint64_t result = (*(uint64_t (**)(esl::QuartzContext *))(*(void *)this + 24))(this);
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    return MEMORY[0x1F40D9D30](v3);
  }
  return result;
}

uint64_t esl::QuartzContext::initialize(esl::QuartzContext *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

uint64_t grl::ImageLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 168))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v22 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    __int16 v84 = 1024;
    int v85 = 369;
    unint64_t v23 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_24;
  }
  *(void *)buf = 0;
  if (!*(void *)(a1 + 220))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v22 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    __int16 v84 = 1024;
    int v85 = 372;
    unint64_t v23 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_24:
    _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x1Cu);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 10)) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 304);
  if (v5)
  {
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v5 + 48))(&v81);
    if (!v81
      || (float32x2_t v9 = vsub_f32(*(float32x2_t *)(a1 + 196), *(float32x2_t *)(a1 + 188)),
          float32x2_t v10 = (float32x2_t)vbic_s8((int8x8_t)v9, (int8x8_t)vcltz_f32(v9)),
          vmul_lane_f32(v10, v10, 1).f32[0] <= 0.0))
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
      }
      uint64_t v25 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        __int16 v84 = 1024;
        int v85 = 385;
        _os_log_impl(&dword_1A1780000, v25, OS_LOG_TYPE_ERROR, "Image layer needs an image and layer metrics to render.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      uint64_t v24 = 0;
      goto LABEL_70;
    }
    float v77 = gm::Box<float,2>::operator+((float *)(a1 + 188), (float *)(a1 + 228));
    int v78 = v11;
    float v79 = v12;
    int v80 = v13;
    float v73 = gm::Box<float,2>::operator+((float *)(a1 + 204), (float *)(a1 + 228));
    int v74 = v14;
    int v75 = v15;
    int v76 = v16;
    long long v72 = 0uLL;
    if (*(unsigned char *)(a2 + 257))
    {
      if (*(unsigned char *)(a2 + 244))
      {
        float v17 = *(float *)(a2 + 248);
        float v18 = *(float *)(a2 + 252);
        unint64_t v70 = v81;
        std::string::size_type v71 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        grl::createThreePartHorizontalStretchedImage(&v70, buf, v79 - v77, v17, v18);
        long long v19 = *(_OWORD *)buf;
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        double v20 = (std::__shared_weak_count *)*((void *)&v72 + 1);
        long long v72 = v19;
        if (v20)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
        }
        unint64_t v21 = v71;
        if (!v71) {
          goto LABEL_43;
        }
      }
      else
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
        }
        uint64_t v29 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          __int16 v84 = 1024;
          int v85 = 398;
          _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_ERROR, "IconRenderer: Failed to find HorizontalStretchedPadding property.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
        unint64_t v31 = v81;
        uint64_t v30 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v21 = (std::__shared_weak_count *)*((void *)&v72 + 1);
        *(void *)&long long v72 = v31;
        *((void *)&v72 + 1) = v30;
        if (!v21) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      unint64_t v26 = v81;
      long long v27 = v82;
      if (!v82)
      {
        long long v72 = v81;
        if (!v81) {
          goto LABEL_62;
        }
LABEL_45:
        if ((*(uint64_t (**)(unint64_t))(*(void *)v26 + 40))(v26))
        {
          (*(void (**)(void))(*(void *)v72 + 24))(v72);
          (*(void (**)(void))(*(void *)v72 + 32))(v72);
          int v32 = *(unsigned __int8 *)(a1 + 64);
          if (v32 == 2)
          {
            uint64_t v63 = 0;
            float v38 = (float)(*(unsigned int (**)(void))(*(void *)v72 + 32))(v72);
            if (v38 > 16777000.0) {
              float v38 = 16777000.0;
            }
            v68[0] = 0;
            *(float *)&v68[1] = v38;
            long long v67 = v72;
            if (*((void *)&v72 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v39 = *(_DWORD *)(a1 + 80);
            int v65 = *(_DWORD *)(a1 + 72);
            int v66 = v39;
            grl::createColorizedImage((uint64_t *)&v67, (uint64_t)&v66, (uint64_t)&v65, (uint64_t)&v63, (uint64_t)v68, buf);
            long long v40 = *(_OWORD *)buf;
            *(void *)buf = 0;
            *(void *)&buf[8] = 0;
            __n128 v41 = (std::__shared_weak_count *)*((void *)&v72 + 1);
            long long v72 = v40;
            if (v41)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
            }
            if (*((void *)&v67 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v67 + 1));
            }
            if (!(void)v72 || ((*(uint64_t (**)(void))(*(void *)v72 + 40))(v72) & 1) == 0)
            {
              if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
                dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
              }
              uint64_t v35 = GEOGetGeoResourceLibRendererLog::log;
              if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_67;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
              __int16 v84 = 1024;
              int v85 = 435;
              float v36 = "Failed to apply a gradient to an image.: Assertion with expression - %s : Failed in file - %s line - %i";
              goto LABEL_66;
            }
          }
          else if (v32 == 1)
          {
            long long v69 = v72;
            if (*((void *)&v72 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            LODWORD(v63) = *(_DWORD *)(a1 + 50);
            grl::createColorizedImage((uint64_t *)&v69, (uint64_t)&v63, buf);
            long long v33 = *(_OWORD *)buf;
            *(void *)buf = 0;
            *(void *)&buf[8] = 0;
            uint64_t v34 = (std::__shared_weak_count *)*((void *)&v72 + 1);
            long long v72 = v33;
            if (v34)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
            }
            if (*((void *)&v69 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
            }
            if (!(void)v72 || ((*(uint64_t (**)(void))(*(void *)v72 + 40))(v72) & 1) == 0)
            {
              if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
                dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
              }
              uint64_t v35 = GEOGetGeoResourceLibRendererLog::log;
              if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_67;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
              __int16 v84 = 1024;
              int v85 = 425;
              float v36 = "Failed to create a colorized image.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_66:
              _os_log_impl(&dword_1A1780000, v35, OS_LOG_TYPE_ERROR, v36, buf, 0x1Cu);
LABEL_67:
              uint64_t v24 = 0;
LABEL_68:
              if (*((void *)&v72 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
              }
LABEL_70:
              if (v82) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v82);
              }
              return v24;
            }
          }
          (*(void (**)(float))(*(void *)*a3 + 240))(*(float *)(a1 + 132));
          if (*(void *)(a1 + 16) == *(void *)(a1 + 24))
          {
            if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
            }
            long long v42 = GEOGetGeoResourceLibRendererLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "_data.hasLayerStyles()";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
              __int16 v84 = 1024;
              int v85 = 444;
              _os_log_impl(&dword_1A1780000, v42, OS_LOG_TYPE_ERROR, "No LayerStyles given for image layer rendering.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
          }
          CGPoint v43 = *(unsigned char **)(a1 + 16);
          for (i = *(unsigned char **)(a1 + 24); v43 != i; ++v43)
          {
            switch(*v43)
            {
              case 0:
                if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
                  dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
                }
                unsigned int v45 = GEOGetGeoResourceLibRendererLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(void *)&buf[4] = "iconLayer != LayerStyle::None";
                  *(_WORD *)&buf[12] = 2080;
                  *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLi"
                                        "b/LayerRenderer.cpp";
                  __int16 v84 = 1024;
                  int v85 = 448;
                  _os_log_impl(&dword_1A1780000, v45, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum used.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
                break;
              case 1:
                uint64_t v47 = *(unsigned char **)(a1 + 16);
                uint64_t v46 = *(unsigned char **)(a1 + 24);
                if (v47 != v46)
                {
                  while (*v47 != 1)
                  {
                    if (++v47 == v46)
                    {
                      uint64_t v47 = *(unsigned char **)(a1 + 24);
                      break;
                    }
                  }
                }
                if (v47 != v46)
                {
                  (*(void (**)(void, void))(*(void *)*a3 + 224))(*a3, *(unsigned __int8 *)(a1 + 48));
                  (*(void (**)(void))(*(void *)*a3 + 376))();
                  (*(void (**)(void, void))(*(void *)*a3 + 224))(*a3, 0);
                  goto LABEL_125;
                }
                break;
              case 2:
                float v48 = *(float *)(a1 + 96);
                if (v48 > 0.0)
                {
                  unsigned int v49 = *(_DWORD *)(a1 + 89);
                  if (HIBYTE(v49))
                  {
                    long long v62 = v72;
                    if (*((void *)&v72 + 1))
                    {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
                      unsigned int v49 = *(_DWORD *)(a1 + 89);
                      float v48 = *(float *)(a1 + 96);
                    }
                    *(_DWORD *)buf = v49;
                    grl::createHaloImage(&v62, (uint64_t)buf, &v63, v48);
                    if (*((void *)&v62 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
                    }
                    if (v63 && ((*(uint64_t (**)(uint64_t))(*(void *)v63 + 40))(v63) & 1) != 0)
                    {
                      (*(void (**)(void, void))(*(void *)*a3 + 224))(*a3, 0);
                      (*(void (**)(void))(*(void *)*a3 + 376))();
                      uint64_t v50 = v64;
                      if (v64) {
                        goto LABEL_124;
                      }
                      goto LABEL_125;
                    }
                    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
                      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
                    }
                    std::string::size_type v56 = GEOGetGeoResourceLibRendererLog::log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                      *(_WORD *)&buf[12] = 2080;
                      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResour"
                                            "ceLib/LayerRenderer.cpp";
                      __int16 v84 = 1024;
                      int v85 = 471;
                      _os_log_impl(&dword_1A1780000, v56, OS_LOG_TYPE_ERROR, "Failed to create the halo for an image layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                    }
                    if (v64) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                    }
                  }
                }
                break;
              case 3:
                uint64_t v52 = *(unsigned char **)(a1 + 16);
                unint64_t v51 = *(unsigned char **)(a1 + 24);
                if (v52 != v51)
                {
                  while (*v52 != 3)
                  {
                    if (++v52 == v51)
                    {
                      uint64_t v52 = *(unsigned char **)(a1 + 24);
                      break;
                    }
                  }
                }
                if (v52 != v51 && (*(void *)(a1 + 140) || *(float *)(a1 + 148) != 0.0))
                {
                  uint64_t v53 = (std::__shared_weak_count *)a3[1];
                  uint64_t v60 = *a3;
                  v61 = v53;
                  if (v53) {
                    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  long long v59 = v72;
                  if (*((void *)&v72 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  LODWORD(v63) = *(_DWORD *)(a1 + 136);
                  *(void *)buf = *(void *)(a1 + 140);
                  grl::drawShadowToContext(&v60, &v59, (uint64_t)&v63, (float *)buf, *(float *)(a1 + 148));
                  if (*((void *)&v59 + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
                  }
                  uint64_t v50 = v61;
                  if (v61) {
LABEL_124:
                  }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
                  goto LABEL_125;
                }
                break;
              default:
LABEL_125:
                if (*(unsigned char *)(a2 + 282))
                {
                  (*(void (**)(unsigned char *__return_ptr))(*(void *)*a3 + 392))(buf);
                  std::string::size_type v54 = operator new(0x20uLL);
                  v54[1] = *(_OWORD *)buf;
                  uint64_t v55 = *a4;
                  *(void *)std::string::size_type v54 = *a4;
                  *((void *)v54 + 1) = a4;
                  *(void *)(v55 + 8) = v54;
                  *a4 = (uint64_t)v54;
                  ++a4[2];
                }
                break;
            }
          }
          (*(void (**)(float))(*(void *)*a3 + 240))(1.0);
          uint64_t v24 = 1;
          goto LABEL_68;
        }
LABEL_62:
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
        }
        uint64_t v35 = GEOGetGeoResourceLibEaselLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_67;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        __int16 v84 = 1024;
        int v85 = 408;
        float v36 = "Failed to find image for image layer.: Assertion with expression - %s : Failed in file - %s line - %i";
        goto LABEL_66;
      }
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v28 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      *(void *)&long long v72 = v26;
      *((void *)&v72 + 1) = v27;
      if (!v28)
      {
LABEL_44:
        if (!v26) {
          goto LABEL_62;
        }
        goto LABEL_45;
      }
      unint64_t v21 = v28;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_43:
    unint64_t v26 = v72;
    goto LABEL_44;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return esl::QuartzContext::setAlpha(v57, v58);
}

void esl::QuartzContext::setAlpha(esl::QuartzContext *this, float a2)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    float v4 = 1.0;
    if (a2 < 0.0 || a2 > 1.0) {
      esl::QuartzContext::setAlpha();
    }
    if (a2 <= 1.0) {
      float v4 = a2;
    }
    if (v4 < 0.0) {
      float v4 = 0.0;
    }
    uint64_t v6 = (CGContext *)*((void *)this + 1);
    double v7 = v4;
    CGContextSetAlpha(v6, v7);
  }
}

void esl::QuartzContext::image(CGContextRef *this@<X0>, void *a2@<X8>)
{
  if ((*((uint64_t (**)(CGContextRef *))*this + 3))(this))
  {
    CGImageRef image = CGBitmapContextCreateImage(this[1]);
    std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>(&image, a2);
    CGImageRelease(image);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1A1974E18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void esl::QuartzImage::createImageInRect(CGImageRef *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*((uint64_t (**)(CGImageRef *))*a1 + 5))(a1))
  {
    float v6 = a2[1];
    double v8 = v6;
    float v9 = a2[3] - v6;
    if ((float)(a2[2] - *a2) >= 0.0) {
      float v10 = a2[2] - *a2;
    }
    else {
      float v10 = 0.0;
    }
    double v11 = v10;
    if (v9 >= 0.0) {
      float v12 = v9;
    }
    else {
      float v12 = 0.0;
    }
    double v13 = v12;
    double v7 = *a2;
    CGImageRef image = CGImageCreateWithImageInRect(a1[2], *(CGRect *)(&v8 - 1));
    std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>(&image, &v14);
    CGImageRelease(image);
    *(_OWORD *)a3 = v14;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

void sub_1A1974EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>@<X0>(CGImageRef *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *&,std::allocator<esl::QuartzImage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1A1974F58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<esl::QuartzImage>::__shared_ptr_emplace[abi:ne180100]<CGImage *&,std::allocator<esl::QuartzImage>,0>(void *a1, CGImageRef *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF582BE0;
  esl::QuartzImage::QuartzImage((esl::QuartzImage *)(a1 + 3), *a2);
  return a1;
}

void sub_1A1974FB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

esl::QuartzImage *esl::QuartzImage::QuartzImage(esl::QuartzImage *this, CGImageRef image)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF554B38;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  CGImageRetain(image);
  *((void *)this + 2) = image;
  return this;
}

void sub_1A1975024(_Unwind_Exception *a1)
{
  esl::QuartzImage::~QuartzImage(v1);
  _Unwind_Resume(a1);
}

void esl::QuartzContext::setBlendMode(void *a1, int a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    float v4 = (CGContext *)a1[1];
    if ((a2 - 1) > 0x1A) {
      CGBlendMode v5 = kCGBlendModeNormal;
    }
    else {
      CGBlendMode v5 = dword_1A28FB138[(char)(a2 - 1)];
    }
    CGContextSetBlendMode(v4, v5);
  }
}

uint64_t esl::QuartzContext::isValid(esl::QuartzContext *this)
{
  if (!*((void *)this + 1)) {
    esl::QuartzContext::isValid();
  }
  return 1;
}

uint64_t esl::QuartzContext::drawImage(CGContextRef *a1, float *a2, uint64_t *a3)
{
  if (!(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1)) {
    return 0;
  }
  uint64_t v6 = *a3;
  double v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6 || (double v8 = *(CGImage **)(v6 + 16)) == 0)
  {
    uint64_t v17 = 0;
    if (!v7) {
      return v17;
    }
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    return v17;
  }
  float v9 = a2[1];
  double v11 = v9;
  float v12 = a2[3] - v9;
  if ((float)(a2[2] - *a2) >= 0.0) {
    float v13 = a2[2] - *a2;
  }
  else {
    float v13 = 0.0;
  }
  double v14 = v13;
  if (v12 >= 0.0) {
    float v15 = v12;
  }
  else {
    float v15 = 0.0;
  }
  double v16 = v15;
  double v10 = *a2;
  CGContextDrawImage(a1[1], *(CGRect *)(&v11 - 1), v8);
  uint64_t v17 = 1;
  if (v7) {
    goto LABEL_16;
  }
  return v17;
}

void sub_1A19751C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t grl::ShapeLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (!*(unsigned char *)(a1 + 10)) {
    return 1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 136);
  uint64_t v5 = 1;
  if (v4 <= 9)
  {
    if (((1 << v4) & 0x3D8) != 0)
    {
      uint64_t v6 = (std::__shared_weak_count *)a3[1];
      v11[0] = *a3;
      v11[1] = v6;
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v7 = grl::ShapeLayerRenderer::renderBalloonToContext(a1, a2, v11, a4);
LABEL_9:
        uint64_t v5 = v7;
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return v5;
      }
      return grl::ShapeLayerRenderer::renderBalloonToContext(a1, a2, v11, a4);
    }
    else
    {
      uint64_t v6 = (std::__shared_weak_count *)a3[1];
      v10[0] = *a3;
      v10[1] = v6;
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v7 = grl::ShapeLayerRenderer::renderShapeToContext(a1, a2, v10, a4);
        goto LABEL_9;
      }
      return grl::ShapeLayerRenderer::renderShapeToContext(a1, a2, v10, a4);
    }
  }
  return v5;
}

void esl::QuartzImage::createGrayscaleVersion(esl::QuartzImage *this@<X0>, void *a2@<X8>)
{
  if (((*(uint64_t (**)(esl::QuartzImage *))(*(void *)this + 40))(this) & 1) == 0
    || !(*(unsigned int (**)(esl::QuartzImage *))(*(void *)this + 24))(this)
    || !(*(unsigned int (**)(esl::QuartzImage *))(*(void *)this + 32))(this))
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  if (!(*(unsigned int (**)(esl::QuartzImage *))(*(void *)this + 144))(this))
  {
    uint64_t v6 = (void *)*((void *)this + 2);
    uint64_t v29 = &unk_1EF559118;
    if (v6) {
      CFRetain(v6);
    }
    image[0] = (CGImageRef)v6;
    unint64_t v26 = &unk_1EF559018;
    CGColorSpaceRef space = CGColorSpaceCreateDeviceGray();
    CGColorSpaceRef ColorSpace = CGImageGetColorSpace((CGImageRef)v6);
    double v8 = (std::__shared_weak_count *)ColorSpace;
    uint64_t v24 = &unk_1EF559018;
    if (ColorSpace) {
      CFRetain(ColorSpace);
    }
    uint64_t v25 = v8;
    if (CGColorSpaceGetModel((CGColorSpaceRef)v8) == kCGColorSpaceModelIndexed)
    {
      size_t Width = CGImageGetWidth(image[0]);
      size_t Height = CGImageGetHeight(image[0]);
      size_t AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
      context[0] = (CGContextRef)&unk_1EF559138;
      context[1] = CGBitmapContextCreate(0, (unint64_t)(double)Width, (unint64_t)(double)Height, 8uLL, AlignedBytesPerRow, space, 0);
      v31.origin.x = 0.0;
      v31.origin.y = 0.0;
      v31.size.width = (double)Width;
      v31.size.height = (double)Height;
      CGContextDrawImage(context[1], v31, image[0]);
      float v12 = CGBitmapContextCreateImage(context[1]);
      CGImageRef v13 = image[0];
      image[0] = v12;
      if (v13) {
        CFRelease(v13);
      }
      geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(context);
    }
    else
    {
      size_t v14 = CGImageGetWidth(image[0]);
      size_t v15 = CGImageGetHeight(image[0]);
      size_t BitsPerComponent = CGImageGetBitsPerComponent(image[0]);
      size_t BitsPerPixel = CGImageGetBitsPerPixel(image[0]);
      size_t BytesPerRow = CGImageGetBytesPerRow(image[0]);
      CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo(image[0]);
      DataProvider = CGImageGetDataProvider(image[0]);
      unint64_t v21 = CGImageCreate((unint64_t)(double)v14, (unint64_t)(double)v15, BitsPerComponent, BitsPerPixel, BytesPerRow, space, BitmapInfo, DataProvider, 0, 0, kCGRenderingIntentDefault);
      CGImageRef v22 = image[0];
      image[0] = v21;
      if (!v22)
      {
LABEL_26:
        if (v21)
        {
          v28[0] = v21;
          std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *,void>(v28, context);
          *(_OWORD *)a2 = *(_OWORD *)context;
        }
        else
        {
          *a2 = 0;
          a2[1] = 0;
        }
        geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v24);
        geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v26);
        geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v29);
        return;
      }
      CFRelease(v22);
    }
    unint64_t v21 = image[0];
    goto LABEL_26;
  }
  LOBYTE(v28[0]) = 1;
  LODWORD(v29) = (*(uint64_t (**)(esl::QuartzImage *))(*(void *)this + 24))(this);
  LODWORD(v24) = (*(uint64_t (**)(esl::QuartzImage *))(*(void *)this + 32))(this);
  std::allocate_shared[abi:ne180100]<esl::QuartzContext,std::allocator<esl::QuartzContext>,esl::ContextType,unsigned int,unsigned int,void>((unsigned __int8 *)v28, (unsigned int *)&v29, (unsigned int *)&v24, &v26);
  if (v26 && ((*(uint64_t (**)(void *))(*(void *)v26 + 24))(v26) & 1) != 0)
  {
    esl::QuartzColor::QuartzColor((esl::QuartzColor *)&v29, 0.0, 0.0, 0.0, 1.0);
    std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>((CGImageRef *)this + 2, &v24);
    unsigned int v4 = (*(uint64_t (**)(esl::QuartzImage *))(*(void *)this + 24))(this);
    unsigned int v5 = (*(uint64_t (**)(esl::QuartzImage *))(*(void *)this + 32))(this);
    context[0] = 0;
    *(float *)&context[1] = (float)v4;
    *((float *)&context[1] + 1) = (float)v5;
    (*(void (**)(void *, void **))(*(void *)v26 + 232))(v26, &v29);
    (*(void (**)(void *, CGContextRef *, void))(*(void *)v26 + 256))(v26, context, 0);
    (*(void (**)(void *, CGContextRef *, void **, uint64_t))(*(void *)v26 + 376))(v26, context, &v24, 1);
    (*(void (**)(CGImageRef *__return_ptr))(*(void *)v26 + 392))(v28);
    *(_OWORD *)a2 = *(_OWORD *)v28;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    uint64_t v29 = &unk_1EF554AE8;
    geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(image);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (space) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)space);
  }
}

void sub_1A1975858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void grl::createColorizedImage(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    double v16 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_WORD *)buf = 0;
    uint64_t v17 = "Input image must be a non-nullptr to create a colorized image.";
    goto LABEL_23;
  }
  if (!(*(unsigned int (**)(void))(*(void *)*a1 + 24))() || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))())
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    double v16 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_WORD *)buf = 0;
    uint64_t v17 = "Input image must have a non-zero size to create a colorized image.";
LABEL_23:
    _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, v17, buf, 2u);
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)*a1 + 48))(buf);
  uint64_t v8 = *(void *)buf;
  uint64_t v7 = v27;
  uint64_t v29 = *(void *)buf;
  uint64_t v30 = v27;
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
  if (v8 && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8) & 1) != 0)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))();
    double v11 = (std::__shared_weak_count *)operator new(0x28uLL);
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C18;
    float v12 = v11 + 1;
    __n128 v13 = esl::QuartzContext::QuartzContext(&v11[1], 3, v9, v10);
    if (((uint64_t (*)(__n128))v11[1].__get_deleter)(v13))
    {
      esl::QuartzColor::QuartzColor(buf, a2);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
      {
        float v14 = (float)(*(unsigned int (**)(void))(*(void *)*a1 + 24))();
        unsigned int v15 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))();
        uint64_t v23 = 0;
        float v24 = v14;
        float v25 = (float)v15;
        ((void (*)(std::__shared_weak_count *, uint64_t *, uint64_t *, void))v12->__vftable[7].~__shared_weak_count)(v12, &v23, &v29, 0);
        ((void (*)(std::__shared_weak_count *, uint8_t *))v12->__vftable[5].__on_zero_shared_weak)(v12, buf);
        ((void (*)(std::__shared_weak_count *, uint64_t *, void))v12->__vftable[6].__on_zero_shared)(v12, &v23, 0);
        ((void (*)(long long *__return_ptr, std::__shared_weak_count *))v12->__vftable[9].__on_zero_shared_weak)(&v22, v12);
        if (void)v22 && ((*(uint64_t (**)(void))(*(void *)v22 + 40))(v22))
        {
          *(_OWORD *)a3 = v22;
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
          }
          unint64_t v21 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CGRect v31 = 136315650;
            int v32 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            __int16 v33 = 2080;
            uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
            __int16 v35 = 1024;
            int v36 = 74;
            _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "Failed to generate an image from a colorized context.: Assertion with expression - %s : Failed in file - %s line - %i", v31, 0x1Cu);
          }
          *a3 = 0;
          a3[1] = 0;
          if (*((void *)&v22 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
        }
        double v20 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CGRect v31 = 0;
          _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Failed to create a color to create a colorized image.", v31, 2u);
        }
        *a3 = 0;
        a3[1] = 0;
      }
      *(void *)buf = &unk_1EF554AE8;
      long long v27 = (std::__shared_weak_count *)&unk_1EF5590F8;
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
      }
      long long v19 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "Failed to create a context to draw a colorized image into.", buf, 2u);
      }
      *a3 = 0;
      a3[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v7 = v30;
    if (v30) {
LABEL_51:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_29);
    }
    float v18 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, "Failed to create a grayscale version of the input image to create a colorized version of the image.", buf, 2u);
    }
    *a3 = 0;
    a3[1] = 0;
    if (v7) {
      goto LABEL_51;
    }
  }
}

CGImage *esl::QuartzImage::width(esl::QuartzImage *this)
{
  uint64_t result = (CGImage *)*((void *)this + 2);
  if (result) {
    return (CGImage *)CGImageGetWidth(result);
  }
  return result;
}

CGImage *esl::QuartzImage::height(esl::QuartzImage *this)
{
  uint64_t result = (CGImage *)*((void *)this + 2);
  if (result) {
    return (CGImage *)CGImageGetHeight(result);
  }
  return result;
}

void esl::QuartzContext::fillRect(void *a1, float *a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 24))(a1))
  {
    unsigned int v4 = (CGContext *)a1[1];
    float v5 = a2[1];
    double v6 = *a2;
    double v7 = v5;
    float v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0) {
      float v9 = a2[2] - *a2;
    }
    else {
      float v9 = 0.0;
    }
    double v10 = v9;
    if (v8 >= 0.0) {
      float v11 = v8;
    }
    else {
      float v11 = 0.0;
    }
    double v12 = v11;
    CGContextFillRect(v4, *(CGRect *)&v6);
  }
}

uint64_t esl::QuartzContext::clipToMask(CGContextRef *a1, float *a2, uint64_t *a3)
{
  if (!(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1)) {
    return 0;
  }
  uint64_t v6 = *a3;
  double v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6 || (float v8 = *(CGImage **)(v6 + 16)) == 0)
  {
    uint64_t v17 = 0;
    if (!v7) {
      return v17;
    }
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    return v17;
  }
  float v9 = a2[1];
  double v11 = v9;
  float v12 = a2[3] - v9;
  if ((float)(a2[2] - *a2) >= 0.0) {
    float v13 = a2[2] - *a2;
  }
  else {
    float v13 = 0.0;
  }
  double v14 = v13;
  if (v12 >= 0.0) {
    float v15 = v12;
  }
  else {
    float v15 = 0.0;
  }
  double v16 = v15;
  double v10 = *a2;
  CGContextClipToMask(a1[1], *(CGRect *)(&v11 - 1), v8);
  uint64_t v17 = 1;
  if (v7) {
    goto LABEL_16;
  }
  return v17;
}

void sub_1A1976210(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<esl::QuartzContext,std::allocator<esl::QuartzContext>,esl::ContextType,unsigned int,unsigned int,void>@<X0>(unsigned __int8 *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  float v8 = operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<esl::QuartzContext>::__shared_ptr_emplace[abi:ne180100]<esl::ContextType,unsigned int,unsigned int,std::allocator<esl::QuartzContext>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1A1976288(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<esl::QuartzContext>::__shared_ptr_emplace[abi:ne180100]<esl::ContextType,unsigned int,unsigned int,std::allocator<esl::QuartzContext>,0>(void *a1, unsigned __int8 *a2, unsigned int *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF582C18;
  esl::QuartzContext::QuartzContext(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_1A19762F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t esl::QuartzContext::setStrokeColor(CGContext **this, const esl::QuartzColor *a2)
{
  uint64_t result = (*(uint64_t (**)(const esl::QuartzColor *))(*(void *)a2 + 48))(a2);
  if (result)
  {
    uint64_t result = (*((uint64_t (**)(CGContext **))*this + 3))(this);
    if (result)
    {
      float v5 = this[1];
      esl::QuartzColor::color(a2, v6);
      CGContextSetStrokeColorWithColor(v5, v6[1]);
      geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v6);
      return 1;
    }
  }
  return result;
}

void sub_1A19763B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void esl::QuartzContext::setLineWidth(esl::QuartzContext *this, float a2)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    unsigned int v4 = (CGContext *)*((void *)this + 1);
    CGContextSetLineWidth(v4, a2);
  }
}

void esl::QuartzContext::strokePath(esl::QuartzContext *this)
{
  if ((*(unsigned int (**)(esl::QuartzContext *))(*(void *)this + 24))(this))
  {
    uint64_t v2 = (CGContext *)*((void *)this + 1);
    CGContextStrokePath(v2);
  }
}

BOOL grl::TextLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, CGContextRef **a3, uint64_t *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 183) < 0) {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
  }
  else {
    std::string v58 = *(std::string *)(a1 + 160);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
    operator delete(v58.__r_.__value_.__l.__data_);
    if (!size) {
      return 0;
    }
  }
  else if (!*((unsigned char *)&v58.__r_.__value_.__s + 23))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 200))
  {
    v58.__r_.__value_.__r.__words[0] = 0;
    if (*(void *)(a1 + 252))
    {
      if (*(unsigned char *)(a2 + 280))
      {
        float v9 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        float v13 = v12;
        float v14 = v11;
        v58.__r_.__value_.__r.__words[0] = __PAIR64__(LODWORD(v12), LODWORD(v9));
        v58.__r_.__value_.__l.__size_ = __PAIR64__(LODWORD(v11), LODWORD(v10));
        float v15 = (std::__shared_weak_count *)a3[1];
        std::string::size_type v56 = *a3;
        v57 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v55 = 1342177535;
        unint64_t data_low = __PAIR64__(LODWORD(v11), LODWORD(v9));
        float v16 = v10 - v9;
        BOOL v17 = (float)(v10 - v9) < 0.0;
        float v18 = 0.0;
        if (v17) {
          float v19 = 0.0;
        }
        else {
          float v19 = v16;
        }
        if ((float)(*(float *)(a2 + 156) - v11) >= 0.0) {
          float v18 = *(float *)(a2 + 156) - v11;
        }
        int v53 = LODWORD(v19);
        float v54 = v18;
        grl::drawDebugSquareToContext(&v56, (uint64_t)&v55, (float *)&data_low, (float *)&v53);
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
        double v20 = (std::__shared_weak_count *)a3[1];
        unint64_t v51 = *a3;
        uint64_t v52 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v53 = 1342177535;
        *(float *)&unint64_t data_low = v16;
        *((float *)&data_low + 1) = v14 - v13;
        if (v16 < 0.0) {
          LODWORD(data_low) = 0;
        }
        if ((float)(v14 - v13) < 0.0) {
          HIDWORD(data_low) = 0;
        }
        grl::drawDebugSquareToContext(&v51, (uint64_t)&v53, (float *)&v58, (float *)&data_low);
        if (v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        }
        unint64_t v21 = (std::__shared_weak_count *)a3[1];
        unsigned int v49 = *a3;
        uint64_t v50 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v55 = -1275068161;
        float v22 = *((float *)v58.__r_.__value_.__r.__words + 1);
        unint64_t data_low = LODWORD(v58.__r_.__value_.__l.__data_);
        float v23 = *(float *)&v58.__r_.__value_.__r.__words[1] - *(float *)&v58.__r_.__value_.__l.__data_;
        if ((float)(*(float *)&v58.__r_.__value_.__r.__words[1] - *(float *)&v58.__r_.__value_.__l.__data_) < 0.0) {
          float v23 = 0.0;
        }
        if (*((float *)v58.__r_.__value_.__r.__words + 1) < 0.0) {
          float v22 = 0.0;
        }
        int v53 = LODWORD(v23);
        float v54 = v22;
        grl::drawDebugSquareToContext(&v49, (uint64_t)&v55, (float *)&data_low, (float *)&v53);
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
      }
      double v24 = (float)(*(float *)(a1 + 300) + *(float *)(a1 + 260));
      gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
      double v26 = v25;
      long long v27 = *a3;
      if (*(void *)(a1 + 344))
      {
        CGContextSetTextPosition(v27[1], v24, v25);
        CTLineDraw(*(CTLineRef *)(a1 + 344), (*a3)[1]);
        long long v27 = *a3;
        if (*(unsigned char *)(a2 + 282))
        {
          (*((void (**)(std::string *__return_ptr))*v27 + 49))(&v58);
          unint64_t v28 = operator new(0x20uLL);
          v28[1] = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
          uint64_t v29 = *a4;
          *(void *)unint64_t v28 = *a4;
          *((void *)v28 + 1) = a4;
          *(void *)(v29 + 8) = v28;
          *a4 = (uint64_t)v28;
          ++a4[2];
          long long v27 = *a3;
        }
      }
      CGContextSetTextPosition(v27[1], v24, v26);
      CTLineDraw(*(CTLineRef *)(a1 + 320), (*a3)[1]);
      if (*(unsigned char *)(a2 + 282))
      {
        (*((void (**)(std::string *__return_ptr))**a3 + 49))(&v58);
        uint64_t v30 = operator new(0x20uLL);
        v30[1] = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        uint64_t v31 = *a4;
        *(void *)uint64_t v30 = *a4;
        *((void *)v30 + 1) = a4;
        *(void *)(v31 + 8) = v30;
        *a4 = (uint64_t)v30;
        ++a4[2];
      }
      if (*(unsigned char *)(a2 + 283))
      {
        esl::QuartzColor::QuartzColor((esl::QuartzColor *)&v58, 1.0, 0.752, 0.796, 1.0);
        float v32 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        unint64_t data_low = __PAIR64__(v33, LODWORD(v32));
        float v34 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        float v36 = v35 - v34;
        if (v36 < 0.0) {
          float v36 = 0.0;
        }
        grl::drawDebugLine(a3, (uint64_t)&v58, (float32x2_t *)&data_low, v36);
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF554AE8;
        v58.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1EF5590F8;
        if (v58.__r_.__value_.__r.__words[2]) {
          CFRelease((CFTypeRef)v58.__r_.__value_.__r.__words[2]);
        }
        if (*(unsigned char *)(a2 + 283))
        {
          esl::QuartzColor::QuartzColor((esl::QuartzColor *)&v58, 1.0, 0.752, 0.796, 1.0);
          LODWORD(data_low) = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
          HIDWORD(data_low) = v37;
          int v47 = v38;
          int v48 = v39;
          float v40 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
          float v42 = v41 - v40;
          if (v42 < 0.0) {
            float v42 = 0.0;
          }
          grl::drawDebugLine(a3, (uint64_t)&v58, (float32x2_t *)&data_low, v42);
          v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF554AE8;
          v58.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1EF5590F8;
          if (v58.__r_.__value_.__r.__words[2]) {
            CFRelease((CFTypeRef)v58.__r_.__value_.__r.__words[2]);
          }
        }
      }
      return 1;
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v44 = GEOGetGeoResourceLibRendererLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LODWORD(v58.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
      WORD2(v58.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      HIWORD(v58.__r_.__value_.__r.__words[2]) = 1024;
      int v59 = 612;
      unsigned int v45 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_60;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    uint64_t v44 = GEOGetGeoResourceLibRendererLog::log;
    BOOL result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LODWORD(v58.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
      WORD2(v58.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      HIWORD(v58.__r_.__value_.__r.__words[2]) = 1024;
      int v59 = 609;
      unsigned int v45 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_60:
      _os_log_impl(&dword_1A1780000, v44, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&v58, 0x1Cu);
      return 0;
    }
  }
  return result;
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    float v9 = &v6[8 * v8];
    float v10 = (char *)*a1;
    float v11 = (char *)a1[1];
    float v12 = v7;
    if (v11 != *a1)
    {
      float v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

const void *esl::QuartzColor::cgColorSpace@<X0>(CGColorRef *this@<X0>, void *a2@<X8>)
{
  BOOL result = CGColorGetColorSpace(this[2]);
  unsigned int v4 = result;
  *a2 = &unk_1EF559018;
  if (result) {
    BOOL result = CFRetain(result);
  }
  a2[1] = v4;
  return result;
}

void *geo::_retain_ptr<__CFArray *,geo::_retain_cf<__CFArray *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF559158;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *geo::_retain_ptr<CGGradient *,geo::_retain_cf<CGGradient *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(void *a1)
{
  *a1 = &unk_1EF558FD8;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unsigned __int8 *md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 8) = *((_DWORD *)result + 26);
  if (*(void *)result)
  {
    unsigned int v4 = result;
    BOOL result = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)result, a3, 0);
    int64_t v5 = *(unsigned __int8 **)result;
    if (*(void *)result)
    {
      uint64_t v6 = (std::__shared_weak_count *)*((void *)result + 1);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v7, (uint64_t)v5, (uint64_t)v6);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v8) {
        md::LabelTextStyleGroup::update(*(void *)a2, (uint64_t)v7, *((void *)v4 + 2), v4[93], 0, *((float *)v4 + 26), *((float *)v4 + 22));
      }
      return (unsigned __int8 *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v7);
    }
  }
  return result;
}

void sub_1A1976DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(uint64_t a1, uint64_t a2)
{
  __int16 v17 = a2;
  char v18 = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 336);
  unsigned int v4 = *(unsigned __int8 **)(a1 + 344);
  if (v3 != v4)
  {
    while (1)
    {
      BOOL v5 = *v3 == a2 && v3[1] == 0;
      if (v5 && v3[2] == 0) {
        break;
      }
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_13;
      }
    }
  }
  if (v3 == v4) {
LABEL_13:
  }
    operator new();
  uint64_t v7 = *((void *)v3 + 1);
  if (!*(unsigned char *)(v7 + 12))
  {
    uint64_t v9 = *(void *)v7;
    *(unsigned char *)(v7 + 12) = 1;
    if (*(void *)a1)
    {
      float v10 = (uint64_t *)md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, a2, 0);
      uint64_t v11 = *v10;
      if (*v10)
      {
        float v12 = (std::__shared_weak_count *)v10[1];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v15, v11, (uint64_t)v12);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        if (v16) {
          md::LabelTextStyleGroup::update(v9, (uint64_t)v15, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 93), 1, *(float *)(a1 + 104), *(float *)(a1 + 88));
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v15);
      }
    }
    else
    {
      float v13 = *(float *)(a1 + 88);
      *(_WORD *)(v9 + 8) = 255;
      *(_DWORD *)(v9 + 10) = -1;
      *(_WORD *)(v9 + 14) = -1;
      *(_DWORD *)(v9 + 44) = 1065353216;
      if (*(char *)(v9 + 95) < 0)
      {
        *(void *)(v9 + 80) = 5;
        float v14 = *(char **)(v9 + 72);
      }
      else
      {
        float v14 = (char *)(v9 + 72);
        *(unsigned char *)(v9 + 95) = 5;
      }
      strcpy(v14, "basic");
      *(float *)(v9 + 100) = v13 * 20.0;
      *(_DWORD *)(v9 + 104) = 1065353216;
    }
  }
  return v7;
}

void sub_1A19770D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A19770EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *md::LabelTextStyleGroup::update(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, float a6, float a7)
{
  if ((int)a6 >= 0x17) {
    unsigned int v13 = 23;
  }
  else {
    unsigned int v13 = (int)a6;
  }
  if (a5)
  {
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    float v14 = (void **)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*v14);
    }
    *float v14 = 0;
    *(void *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 100) = 1099956224;
    *(void *)(a1 + 104) = 0;
    *(_WORD *)(a1 + 112) = 0;
  }
  float32x2_t v79 = 0;
  __int16 v80 = 256;
  char v81 = 0;
  md::FontSizeInfo::update((uint64_t)&v79, a2, a3, a4, *(unsigned __int8 *)(a1 + 64), a6);
  *(unsigned char *)(a1 + 113) = v81;
  *(float32x2_t *)(a1 + 96) = vmul_n_f32(v79, a7);
  if (a5)
  {
    uint64_t v15 = *(void *)(*(void *)a2 + 24);
    int v16 = *(unsigned __int8 *)(v15 + 12);
    if (v16 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      char v17 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x6Fu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x6Fu, v13, 1, &v83);
    }
    else
    {
      char v17 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x6Fu, v13, v16, 0);
    }
    *(unsigned char *)(a1 + 109) = v17;
    uint64_t v18 = *(void *)(*(void *)a2 + 24);
    int v19 = *(unsigned __int8 *)(v18 + 12);
    if (v19 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      char v20 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v18, 0x18Du, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v18, 0x18Du, v13, 1, &v83);
    }
    else
    {
      char v20 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x18Du, v13, v19, 0);
    }
    *(unsigned char *)(a1 + 110) = v20;
    uint64_t v21 = *(void *)(*(void *)a2 + 24);
    int v22 = *(unsigned __int8 *)(v21 + 12);
    if (v22 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      char v23 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v21, 0x18Eu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v21, 0x18Eu, v13, 1, &v83);
    }
    else
    {
      char v23 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x18Eu, v13, v22, 0);
    }
    *(unsigned char *)(a1 + 111) = v23;
    uint64_t v24 = *(void *)(*(void *)a2 + 24);
    int v25 = *(unsigned __int8 *)(v24 + 12);
    if (v25 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      char v26 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v24, 0x6Eu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v24, 0x6Eu, v13, 1, &v83);
    }
    else
    {
      char v26 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x6Eu, v13, v25, 0);
    }
    *(unsigned char *)(a1 + 108) = v26;
    uint64_t v27 = *(void *)(*(void *)a2 + 24);
    int v28 = *(unsigned __int8 *)(v27 + 12);
    if (v28 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      char v29 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v27, 0x75u, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v27, 0x75u, v13, 1, &v83);
    }
    else
    {
      char v29 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)a2 + 24), 0x75u, v13, v28, 0);
    }
    uint64_t v30 = (void **)(a1 + 72);
    *(unsigned char *)(a1 + 112) = v29;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&v82, *(void *)(*(void *)a2 + 24), 0x72u, v13, 1);
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*v30);
    }
    *(_OWORD *)uint64_t v30 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *(void *)(a1 + 88) = *((void *)&v82.__r_.__value_.__l + 2);
    unsigned int v31 = HIBYTE(v80);
    uint64_t v32 = *(void *)(*(void *)a2 + 24);
    unsigned int v33 = *(unsigned __int8 *)(v32 + 12);
    if (v33 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      float v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v32, 0x6Du, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v32, 0x6Du, v13, 1u, &v83);
    }
    else
    {
      float v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x6Du, v13, v33, 0);
    }
    *(float *)(a1 + 104) = v34 * (float)(a7 * *(float *)(a3 + 20 * v31 + 4));
  }
  unint64_t v35 = *(void *)(*(void *)a2 + 24);
  float v36 = fminf(fmaxf(a6, 0.0), 23.0);
  unsigned int v37 = *(unsigned __int8 *)(v35 + 12);
  if (v37 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v35, 0x144u, 0, (BOOL *)&v82, v36);
    int v39 = v38;
    BOOL result = (uint64_t *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v35, 0x144u, 1u, (BOOL *)&v83, v36);
    *(_DWORD *)(a1 + 44) = v39;
    if (!a5) {
      return result;
    }
  }
  else
  {
    BOOL result = (uint64_t *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x144u, v37, 0, v36);
    *(_DWORD *)(a1 + 44) = v41;
    if (!a5) {
      return result;
    }
  }
  uint64_t v42 = *(void *)(*(void *)a2 + 24);
  unsigned int v43 = *(unsigned __int8 *)(v42 + 12);
  if (v43 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    int v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0xD5u, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0xD5u, v13, 1u, &v83);
  }
  else
  {
    int v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0xD5u, v13, v43, 0);
  }
  *(unsigned char *)(a1 + 60) = v44;
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v45 = *(void *)(*(void *)a2 + 24);
    unsigned int v46 = *(unsigned __int8 *)(v45 + 12);
    if (v46 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      int v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x11Fu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x11Fu, v13, 1u, &v83);
      if (!(_BYTE)v47) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    int v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)a2 + 24), 0x11Fu, v13, v46, 0);
    if ((_BYTE)v47) {
LABEL_42:
    }
      *(unsigned char *)(a1 + 60) = v47;
  }
LABEL_43:
  float v48 = fminf((float)v13, 23.0);
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(void *)(*(void *)a2 + 24), 0x73u, 1u, v48);
  float32x4_t v76 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  int16x8_t v49 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v76));
  *(int16x4_t *)v49.i8 = vmovn_s32((int32x4_t)v49);
  *(_DWORD *)(a1 + 8) = vmovn_s16(v49).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(void *)(*(void *)a2 + 24), 0x74u, 1u, v48);
  int16x8_t v50 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v76));
  *(int16x4_t *)v50.i8 = vmovn_s32((int32x4_t)v50);
  *(_DWORD *)(a1 + 12) = vmovn_s16(v50).u32[0];
  uint64_t v51 = *(void *)(*(void *)a2 + 24);
  unsigned int v52 = *(unsigned __int8 *)(v51 + 12);
  if (v52 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    int v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0x1B7u, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0x1B7u, v13, 1u, &v83);
  }
  else
  {
    int v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x1B7u, v13, v52, 0);
  }
  *(_DWORD *)(a1 + 28) = v53;
  uint64_t v54 = *(void *)(*(void *)a2 + 24);
  unsigned int v55 = *(unsigned __int8 *)(v54 + 12);
  if (v55 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    int v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0x15Eu, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0x15Eu, v13, 1u, &v83);
  }
  else
  {
    int v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x15Eu, v13, v55, 0);
  }
  *(_DWORD *)(a1 + 32) = v56;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(void *)(*(void *)a2 + 24), 0x15Du, v13, 1u, 0);
  float32x4_t v77 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  int16x8_t v57 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v77));
  *(int16x4_t *)v57.i8 = vmovn_s32((int32x4_t)v57);
  *(_DWORD *)(a1 + 16) = vmovn_s16(v57).u32[0];
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(void *)(*(void *)a2 + 24), 0x15Fu, v13, 1u, 0);
  int16x8_t v58 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v77));
  *(int16x4_t *)v58.i8 = vmovn_s32((int32x4_t)v58);
  *(_DWORD *)(a1 + 20) = vmovn_s16(v58).u32[0];
  uint64_t v59 = *(void *)(*(void *)a2 + 24);
  unsigned int v60 = *(unsigned __int8 *)(v59 + 12);
  if (v60 == 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x1B8u, v13, 0) & 1) != 0
      || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x1B8u, v13, 1u) & 1) != 0)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      int v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, 0x1B8u, v13, 0, &v82);
      uint64_t v62 = v59;
      unsigned int v63 = 440;
    }
    else
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      char v83 = 1;
      int v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, 0x160u, v13, 0, &v82);
      uint64_t v62 = v59;
      unsigned int v63 = 352;
    }
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v62, v63, v13, 1u, &v83);
  }
  else
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x1B8u, v13, *(unsigned __int8 *)(v59 + 12)))
    {
      uint64_t v64 = v59;
      unsigned int v65 = 440;
    }
    else
    {
      uint64_t v64 = v59;
      unsigned int v65 = 352;
    }
    int v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v64, v65, v13, v60, 0);
  }
  *(_DWORD *)(a1 + 36) = v61;
  uint64_t v66 = *(void *)(*(void *)a2 + 24);
  unsigned int v67 = *(unsigned __int8 *)(v66 + 12);
  if (v67 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    int v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x16Bu, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x16Bu, v13, 1u, &v83);
  }
  else
  {
    int v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x16Bu, v13, v67, 0);
  }
  *(_DWORD *)(a1 + 40) = v68;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(void *)(*(void *)a2 + 24), 0x93u, v13, 1u, 0);
  int16x8_t v69 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x3B7F00FFu)));
  *(int16x4_t *)v69.i8 = vmovn_s32((int32x4_t)v69);
  *(_DWORD *)(a1 + 24) = vmovn_s16(v69).u32[0];
  uint64_t v70 = *(void *)(*(void *)a2 + 24);
  unsigned int v71 = *(unsigned __int8 *)(v70 + 12);
  if (v71 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    float v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x133u, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x133u, v13, 1u, &v83);
  }
  else
  {
    float v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)a2 + 24), 0x133u, v13, v71, 0);
  }
  *(float *)(a1 + 48) = v72 * a7;
  uint64_t v73 = *(void *)(*(void *)a2 + 24);
  unsigned int v74 = *(unsigned __int8 *)(v73 + 12);
  if (v74 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    char v83 = 1;
    uint64_t v75 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v73, v13, 0, &v82);
    BOOL result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v73, v13, 1u, &v83);
  }
  else
  {
    BOOL result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v73, v13, v74, 0);
    uint64_t v75 = *result;
  }
  *(float32x2_t *)(a1 + 52) = vmul_n_f32((float32x2_t)v75, a7);
  return result;
}

unint64_t *gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, BOOL *a6)
{
  if (a5 == 2)
  {
    unint64_t v11 = *(void *)a2;
    if (*(void *)a2)
    {
      float v12 = *(float *)v11;
      LODWORD(v11) = *(float *)v11 == 1.0;
      if (*(unsigned char *)(a2 + 10))
      {
        if (v12 != 0.0 && v12 != 1.0) {
          goto LABEL_12;
        }
      }
    }
    unint64_t v11 = v11;
  }
  else
  {
    unint64_t v11 = a5;
  }
  unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 11);
  float v12 = 0.0;
  if (v14 != 2)
  {
    BOOL result = (unint64_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2, a3, a4, v14, a6);
    unint64_t v26 = *result;
    goto LABEL_16;
  }
LABEL_12:
  float v27 = v12;
  unsigned __int8 v29 = 1;
  unsigned __int8 v28 = 1;
  unint64_t v15 = *(void *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2, a3, a4, 0, &v29);
  BOOL result = (unint64_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2, a3, a4, 1u, &v28);
  unint64_t v17 = *result;
  unint64_t v18 = HIDWORD(*result);
  int8x8_t v19 = (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v15), (uint64x2_t)xmmword_1A28FCE00));
  int8x8_t v20 = (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(*result), (uint64x2_t)xmmword_1A28FCE00));
  if (a6) {
    *a6 = (v29 | v28) != 0;
  }
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x37800080u);
  float32x2_t v22 = vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8(v19, (int8x8_t)0xFFFF0000FFFFLL)), v21);
  int32x2_t v23 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v22, vmla_f32(vneg_f32(v22), v21, vcvt_f32_u32((uint32x2_t)vand_s8(v20, (int8x8_t)0xFFFF0000FFFFLL))), v27), (float32x2_t)vdup_n_s32(0x477FFF00u)));
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  uint64x2_t v25 = vshlq_u64(v24, (uint64x2_t)xmmword_1A28FCE10);
  unint64_t v26 = v25.i64[0] | ((unint64_t)(int)(float)((float)((float)((float)WORD2(v15) * 0.000015259)
                                                                         + (float)((float)-(float)((float)((float)WORD2(v15) * 0.000015259)
                                                                                                 - (float)((float)(unsigned __int16)v18 * 0.000015259))
                                                                                 * v27))
                                                                 * 65535.0) << 32) | (int)(float)((float)((float)((float)(unsigned __int16)v15 * 0.000015259) + (float)((float)-(float)((float)((float)(unsigned __int16)v15 * 0.000015259) - (float)((float)(unsigned __int16)v17 * 0.000015259)) * v27)) * 65535.0) | v25.i64[1];
LABEL_16:
  *a1 = v26;
  return result;
}

uint64_t *gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D338, memory_order_acquire) & 1) == 0)
  {
    int v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_1EB34D338);
    a1 = v2;
    if (v3)
    {
      long long v74 = xmmword_1A28FCDD0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      _MergedGlobals_2 = v75;
      __cxa_guard_release(&qword_1EB34D338);
      a1 = v2;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D348, memory_order_acquire) & 1) == 0)
  {
    int v4 = a1;
    int v5 = __cxa_guard_acquire(&qword_1EB34D348);
    a1 = v4;
    if (v5)
    {
      long long v74 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D340 = v75;
      __cxa_guard_release(&qword_1EB34D348);
      a1 = v4;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D358, memory_order_acquire) & 1) == 0)
  {
    int v6 = a1;
    int v7 = __cxa_guard_acquire(&qword_1EB34D358);
    a1 = v6;
    if (v7)
    {
      long long v74 = xmmword_1A29CD470;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D350 = v75;
      __cxa_guard_release(&qword_1EB34D358);
      a1 = v6;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D368, memory_order_acquire) & 1) == 0)
  {
    int v8 = a1;
    int v9 = __cxa_guard_acquire(&qword_1EB34D368);
    a1 = v8;
    if (v9)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D360 = v75;
      __cxa_guard_release(&qword_1EB34D368);
      a1 = v8;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D378, memory_order_acquire) & 1) == 0)
  {
    int v15 = a1;
    int v16 = __cxa_guard_acquire(&qword_1EB34D378);
    a1 = v15;
    if (v16)
    {
      long long v74 = xmmword_1A29CD470;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D370 = v75;
      __cxa_guard_release(&qword_1EB34D378);
      a1 = v15;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D388, memory_order_acquire) & 1) == 0)
  {
    int v17 = a1;
    int v18 = __cxa_guard_acquire(&qword_1EB34D388);
    a1 = v17;
    if (v18)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D380 = v75;
      __cxa_guard_release(&qword_1EB34D388);
      a1 = v17;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D398, memory_order_acquire) & 1) == 0)
  {
    int v20 = a1;
    int v21 = __cxa_guard_acquire(&qword_1EB34D398);
    a1 = v20;
    if (v21)
    {
      long long v74 = xmmword_1A29CD480;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D390 = v75;
      __cxa_guard_release(&qword_1EB34D398);
      a1 = v20;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D3A8, memory_order_acquire) & 1) == 0)
  {
    int v22 = a1;
    int v23 = __cxa_guard_acquire(&qword_1EB34D3A8);
    a1 = v22;
    if (v23)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D3A0 = v75;
      __cxa_guard_release(&qword_1EB34D3A8);
      a1 = v22;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D3B8, memory_order_acquire) & 1) == 0)
  {
    int v25 = a1;
    int v26 = __cxa_guard_acquire(&qword_1EB34D3B8);
    a1 = v25;
    if (v26)
    {
      long long v74 = xmmword_1A29CD490;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D3B0 = v75;
      __cxa_guard_release(&qword_1EB34D3B8);
      a1 = v25;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D3C8, memory_order_acquire) & 1) == 0)
  {
    int v27 = a1;
    int v28 = __cxa_guard_acquire(&qword_1EB34D3C8);
    a1 = v27;
    if (v28)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D3C0 = v75;
      __cxa_guard_release(&qword_1EB34D3C8);
      a1 = v27;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D3D8, memory_order_acquire) & 1) == 0)
  {
    int v30 = a1;
    int v31 = __cxa_guard_acquire(&qword_1EB34D3D8);
    a1 = v30;
    if (v31)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D3D0 = v75;
      __cxa_guard_release(&qword_1EB34D3D8);
      a1 = v30;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D3E8, memory_order_acquire) & 1) == 0)
  {
    int v33 = a1;
    int v34 = __cxa_guard_acquire(&qword_1EB34D3E8);
    a1 = v33;
    if (v34)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D3E0 = v75;
      __cxa_guard_release(&qword_1EB34D3E8);
      a1 = v33;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D3F8, memory_order_acquire) & 1) == 0)
  {
    int v36 = a1;
    int v37 = __cxa_guard_acquire(&qword_1EB34D3F8);
    a1 = v36;
    if (v37)
    {
      long long v74 = xmmword_1A29CD4A0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D3F0 = v75;
      __cxa_guard_release(&qword_1EB34D3F8);
      a1 = v36;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D408, memory_order_acquire) & 1) == 0)
  {
    int v38 = a1;
    int v39 = __cxa_guard_acquire(&qword_1EB34D408);
    a1 = v38;
    if (v39)
    {
      long long v74 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D400 = v75;
      __cxa_guard_release(&qword_1EB34D408);
      a1 = v38;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D418, memory_order_acquire) & 1) == 0)
  {
    int v40 = a1;
    int v41 = __cxa_guard_acquire(&qword_1EB34D418);
    a1 = v40;
    if (v41)
    {
      long long v74 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D410 = v75;
      __cxa_guard_release(&qword_1EB34D418);
      a1 = v40;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D428, memory_order_acquire) & 1) == 0)
  {
    int v42 = a1;
    int v43 = __cxa_guard_acquire(&qword_1EB34D428);
    a1 = v42;
    if (v43)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D420 = v75;
      __cxa_guard_release(&qword_1EB34D428);
      a1 = v42;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D438, memory_order_acquire) & 1) == 0)
  {
    int v45 = a1;
    int v46 = __cxa_guard_acquire(&qword_1EB34D438);
    a1 = v45;
    if (v46)
    {
      long long v74 = xmmword_1A29CD4B0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D430 = v75;
      __cxa_guard_release(&qword_1EB34D438);
      a1 = v45;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D448, memory_order_acquire) & 1) == 0)
  {
    int v47 = a1;
    int v48 = __cxa_guard_acquire(&qword_1EB34D448);
    a1 = v47;
    if (v48)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D440 = v75;
      __cxa_guard_release(&qword_1EB34D448);
      a1 = v47;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D458, memory_order_acquire) & 1) == 0)
  {
    int v50 = a1;
    int v51 = __cxa_guard_acquire(&qword_1EB34D458);
    a1 = v50;
    if (v51)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D450 = v75;
      __cxa_guard_release(&qword_1EB34D458);
      a1 = v50;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D468, memory_order_acquire) & 1) == 0)
  {
    int v53 = a1;
    int v54 = __cxa_guard_acquire(&qword_1EB34D468);
    a1 = v53;
    if (v54)
    {
      long long v74 = xmmword_1A29CD4C0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D460 = v75;
      __cxa_guard_release(&qword_1EB34D468);
      a1 = v53;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D478, memory_order_acquire) & 1) == 0)
  {
    int v55 = a1;
    int v56 = __cxa_guard_acquire(&qword_1EB34D478);
    a1 = v55;
    if (v56)
    {
      long long v74 = xmmword_1A29CD4D0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D470 = v75;
      __cxa_guard_release(&qword_1EB34D478);
      a1 = v55;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D488, memory_order_acquire) & 1) == 0)
  {
    int v57 = a1;
    int v58 = __cxa_guard_acquire(&qword_1EB34D488);
    a1 = v57;
    if (v58)
    {
      long long v74 = xmmword_1A29CD4E0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D480 = v75;
      __cxa_guard_release(&qword_1EB34D488);
      a1 = v57;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D498, memory_order_acquire) & 1) == 0)
  {
    int v59 = a1;
    int v60 = __cxa_guard_acquire(&qword_1EB34D498);
    a1 = v59;
    if (v60)
    {
      __asm { FMOV            V0.4S, #1.0 }
      long long v74 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D490 = v75;
      __cxa_guard_release(&qword_1EB34D498);
      a1 = v59;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D4A8, memory_order_acquire) & 1) == 0)
  {
    int v62 = a1;
    int v63 = __cxa_guard_acquire(&qword_1EB34D4A8);
    a1 = v62;
    if (v63)
    {
      long long v74 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D4A0 = v75;
      __cxa_guard_release(&qword_1EB34D4A8);
      a1 = v62;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D4B8, memory_order_acquire) & 1) == 0)
  {
    int v64 = a1;
    int v65 = __cxa_guard_acquire(&qword_1EB34D4B8);
    a1 = v64;
    if (v65)
    {
      long long v74 = xmmword_1A29CD470;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D4B0 = v75;
      __cxa_guard_release(&qword_1EB34D4B8);
      a1 = v64;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D4C8, memory_order_acquire) & 1) == 0)
  {
    int v66 = a1;
    int v67 = __cxa_guard_acquire(&qword_1EB34D4C8);
    a1 = v66;
    if (v67)
    {
      long long v74 = xmmword_1A29CD470;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D4C0 = v75;
      __cxa_guard_release(&qword_1EB34D4C8);
      a1 = v66;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D4D8, memory_order_acquire) & 1) == 0)
  {
    int v68 = a1;
    int v69 = __cxa_guard_acquire(&qword_1EB34D4D8);
    a1 = v68;
    if (v69)
    {
      long long v74 = xmmword_1A29CD480;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D4D0 = v75;
      __cxa_guard_release(&qword_1EB34D4D8);
      a1 = v68;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D4E8, memory_order_acquire) & 1) == 0)
  {
    int v70 = a1;
    int v71 = __cxa_guard_acquire(&qword_1EB34D4E8);
    a1 = v70;
    if (v71)
    {
      long long v74 = xmmword_1A29CD490;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D4E0 = v75;
      __cxa_guard_release(&qword_1EB34D4E8);
      a1 = v70;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB34D4F8, memory_order_acquire) & 1) == 0)
  {
    int v72 = a1;
    int v73 = __cxa_guard_acquire(&qword_1EB34D4F8);
    a1 = v72;
    if (v73)
    {
      long long v74 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v74, (int16x4_t *)&v75);
      qword_1EB34D4F0 = v75;
      __cxa_guard_release(&qword_1EB34D4F8);
      a1 = v72;
    }
  }
  if (a1 <= 161)
  {
    if (a1 > 75)
    {
      if (a1 <= 115)
      {
        switch(a1)
        {
          case 'L':
            return &qword_1EB34D3B0;
          case 'M':
            return &qword_1EB34D3C0;
          case ']':
            return &qword_1EB34D3D0;
        }
      }
      else if (a1 > 134)
      {
        if (a1 == 135) {
          return &qword_1EB34D400;
        }
        if (a1 == 147) {
          return &qword_1EB34D410;
        }
      }
      else
      {
        if (a1 == 116) {
          return &qword_1EB34D3E0;
        }
        if (a1 == 134) {
          return &qword_1EB34D3F0;
        }
      }
    }
    else if (a1 <= 53)
    {
      switch(a1)
      {
        case 3:
          return &qword_1EB34D340;
        case 43:
          return &qword_1EB34D350;
        case 44:
          return &qword_1EB34D360;
      }
    }
    else if (a1 > 64)
    {
      if (a1 == 65) {
        return &qword_1EB34D390;
      }
      if (a1 == 66) {
        return &qword_1EB34D3A0;
      }
    }
    else
    {
      if (a1 == 54) {
        return &qword_1EB34D370;
      }
      if (a1 == 55) {
        return &qword_1EB34D380;
      }
    }
    return &_MergedGlobals_2;
  }
  if (a1 <= 302)
  {
    if (a1 <= 172)
    {
      switch(a1)
      {
        case 162:
          return &qword_1EB34D420;
        case 163:
          return &qword_1EB34D430;
        case 172:
          return &qword_1EB34D440;
      }
    }
    else if (a1 > 181)
    {
      if (a1 == 182) {
        return &qword_1EB34D470;
      }
      if (a1 == 253) {
        return &qword_1EB34D480;
      }
    }
    else
    {
      if (a1 == 173) {
        return &qword_1EB34D450;
      }
      if (a1 == 177) {
        return &qword_1EB34D460;
      }
    }
    return &_MergedGlobals_2;
  }
  if (a1 <= 427)
  {
    if (a1 == 303) {
      return &qword_1EB34D490;
    }
    if (a1 == 342) {
      return &qword_1EB34D4A0;
    }
    return &_MergedGlobals_2;
  }
  switch(a1)
  {
    case 428:
      BOOL result = &qword_1EB34D4B0;
      break;
    case 429:
      BOOL result = &qword_1EB34D4C0;
      break;
    case 430:
      BOOL result = &qword_1EB34D4D0;
      break;
    case 431:
      BOOL result = &qword_1EB34D4E0;
      break;
    default:
      if (a1 != 459) {
        return &_MergedGlobals_2;
      }
      BOOL result = &qword_1EB34D4F0;
      break;
  }
  return result;
}

void sub_1A1978B28(_Unwind_Exception *a1)
{
}

__int16 *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v6 = *(void *)(a1 + 16 * a4 + 16);
  if (!v6)
  {
    if (a5) {
      *a5 = 0;
    }
    return (__int16 *)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
  uint64_t v7 = a1 + 16 * a4;
  uint64_t v8 = *(unsigned __int16 *)(v7 + 56);
  if (!*(_WORD *)(v7 + 56))
  {
LABEL_33:
    int v30 = *(__int16 **)(v6 + 72);
    return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(v30, a2, a3, a5);
  }
  uint64_t v9 = *(void *)(v7 + 48);
  uint64_t v10 = v9 + 8 * v8;
  if (a3 >= 0x17) {
    uint64_t v11 = 23;
  }
  else {
    uint64_t v11 = a3;
  }
  while (1)
  {
    unsigned int v13 = *(uint64_t **)(*(void *)v9 + 72);
    if (v13)
    {
      uint64_t v16 = *v13;
      int v15 = v13 + 2;
      uint64_t v14 = v16;
      int v17 = (unsigned __int16 **)(v16 + 80 * *((unsigned __int8 *)v15 + a3));
      unint64_t v18 = *((unsigned __int16 *)v17 + 5);
      if (*((_WORD *)v17 + 5))
      {
        int8x8_t v19 = *v17;
        if (*((unsigned char *)v17 + 15))
        {
          if (v18 >= 0x1E)
          {
            uint64x2_t v24 = *v17;
            unint64_t v25 = v18;
            do
            {
              unint64_t v26 = v25 >> 1;
              int v27 = &v24[v25 >> 1];
              unsigned int v29 = *v27;
              int v28 = v27 + 1;
              v25 += ~(v25 >> 1);
              if (v29 < a2) {
                uint64x2_t v24 = v28;
              }
              else {
                unint64_t v25 = v26;
              }
            }
            while (v25);
            if (v24 == &v19[v18] || *v24 != a2) {
              goto LABEL_8;
            }
            unint64_t v12 = (unint64_t)((char *)v24 - (char *)v19) >> 1;
          }
          else
          {
            uint64_t v20 = 0;
            while (1)
            {
              unsigned int v21 = v19[v20];
              if (v21 >= a2) {
                break;
              }
              if (v18 == ++v20) {
                goto LABEL_8;
              }
            }
            LOWORD(v12) = v21 == a2 ? v20 : (unsigned __int16)v18;
          }
        }
        else
        {
          uint64_t v22 = 2 * v18;
          int v23 = *v17;
          while (*v23 != a2)
          {
            ++v23;
            v22 -= 2;
            if (!v22)
            {
              int v23 = &v19[v18];
              break;
            }
          }
          unint64_t v12 = (unint64_t)((char *)v23 - (char *)v19) >> 1;
        }
      }
      else
      {
        LOWORD(v12) = 0;
      }
      if (v18 != (unsigned __int16)v12) {
        break;
      }
    }
LABEL_8:
    v9 += 8;
    if (v9 == v10) {
      goto LABEL_33;
    }
  }
  unsigned int v32 = *((unsigned __int8 *)v15 + v11);
  uint64_t v33 = v14 + 80 * *((unsigned __int8 *)v15 + v11);
  unint64_t v34 = *(unsigned __int16 *)(v33 + 58);
  if (!*(_WORD *)(v33 + 58)) {
    return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  uint64_t v35 = v14 + 80 * *((unsigned __int8 *)v15 + v11);
  uint64_t v36 = *(void *)(v35 + 48);
  if (*(unsigned char *)(v35 + 63))
  {
    if (v34 < 0x1E)
    {
      unint64_t v37 = 0;
      BOOL result = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v38 = *(unsigned __int16 *)(v36 + 2 * v37);
        if (v38 >= a2) {
          break;
        }
        if (v34 == ++v37) {
          return result;
        }
      }
      if (v38 != a2) {
        LOWORD(v37) = v34;
      }
      goto LABEL_63;
    }
    int v41 = *(unsigned __int16 **)(v35 + 48);
    unint64_t v42 = v34;
    do
    {
      unint64_t v43 = v42 >> 1;
      int v44 = &v41[v42 >> 1];
      unsigned int v46 = *v44;
      int v45 = v44 + 1;
      v42 += ~(v42 >> 1);
      if (v46 < a2) {
        int v41 = v45;
      }
      else {
        unint64_t v42 = v43;
      }
    }
    while (v42);
    if (v41 != (unsigned __int16 *)(v36 + 2 * v34) && *v41 == a2)
    {
      unint64_t v37 = ((unint64_t)v41 - v36) >> 1;
      goto LABEL_63;
    }
    return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  else
  {
    uint64_t v39 = 2 * v34;
    int v40 = *(unsigned __int16 **)(v35 + 48);
    while (*v40 != a2)
    {
      ++v40;
      v39 -= 2;
      if (!v39)
      {
        int v40 = (unsigned __int16 *)(v36 + 2 * v34);
        break;
      }
    }
    unint64_t v37 = ((unint64_t)v40 - v36) >> 1;
LABEL_63:
    if (v34 <= (unsigned __int16)v37) {
      return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    }
    return (__int16 *)(v36 + *(unsigned __int16 *)(v14 + 80 * v32 + 56) + 8 * (unsigned __int16)v37);
  }
}

uint64_t *md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(uint64_t a1)
{
  __int16 v113 = 0;
  char v114 = 2;
  uint64_t v2 = *(void *)(a1 + 336);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v2 != v3)
  {
    while (1)
    {
      BOOL v4 = !*(unsigned char *)v2 && *(unsigned char *)(v2 + 1) == 0;
      if (v4 && *(unsigned char *)(v2 + 2) == 2) {
        break;
      }
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v2 == v3) {
LABEL_13:
  }
    operator new();
  uint64_t v6 = *(uint64_t **)(v2 + 8);
  if (!*((unsigned char *)v6 + 12))
  {
    uint64_t v8 = *v6;
    *((unsigned char *)v6 + 12) = 1;
    if (*(void *)a1)
    {
      uint64_t v9 = (uint64_t *)md::LabelStyle::styleQueryForComponent((unsigned __int8 **)a1, 0, 0);
      uint64_t v10 = *v9;
      if (*v9)
      {
        uint64_t v11 = (std::__shared_weak_count *)v9[1];
        __p.__r_.__value_.__r.__words[0] = *v9;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v111, v10, (uint64_t)v11);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (!v112) {
          goto LABEL_186;
        }
        float v12 = *(float *)(a1 + 88);
        unsigned int v13 = (int)*(float *)(a1 + 104);
        *(_OWORD *)(v8 + 8) = 0u;
        if (v13 >= 0x17) {
          unsigned int v14 = 23;
        }
        else {
          unsigned int v14 = v13;
        }
        *(_DWORD *)(v8 + 72) = 0;
        *(_OWORD *)(v8 + 40) = 0uLL;
        *(_OWORD *)(v8 + 56) = 0uLL;
        *(_OWORD *)(v8 + 24) = 0uLL;
        if (*(char *)(v8 + 103) < 0)
        {
          **(unsigned char **)(v8 + 80) = 0;
          *(void *)(v8 + 88) = 0;
          if ((*(char *)(v8 + 135) & 0x80000000) == 0)
          {
LABEL_29:
            *(unsigned char *)(v8 + 112) = 0;
            *(unsigned char *)(v8 + 135) = 0;
            if ((*(char *)(v8 + 167) & 0x80000000) == 0) {
              goto LABEL_30;
            }
            goto LABEL_36;
          }
        }
        else
        {
          *(unsigned char *)(v8 + 80) = 0;
          *(unsigned char *)(v8 + 103) = 0;
          if ((*(char *)(v8 + 135) & 0x80000000) == 0) {
            goto LABEL_29;
          }
        }
        **(unsigned char **)(v8 + 112) = 0;
        *(void *)(v8 + 120) = 0;
        if ((*(char *)(v8 + 167) & 0x80000000) == 0)
        {
LABEL_30:
          *(unsigned char *)(v8 + 144) = 0;
          *(unsigned char *)(v8 + 167) = 0;
          if ((*(char *)(v8 + 199) & 0x80000000) == 0) {
            goto LABEL_31;
          }
          goto LABEL_37;
        }
LABEL_36:
        **(unsigned char **)(v8 + 144) = 0;
        *(void *)(v8 + 152) = 0;
        if ((*(char *)(v8 + 199) & 0x80000000) == 0)
        {
LABEL_31:
          *(unsigned char *)(v8 + 176) = 0;
          *(unsigned char *)(v8 + 199) = 0;
          if ((*(char *)(v8 + 231) & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_38;
        }
LABEL_37:
        **(unsigned char **)(v8 + 176) = 0;
        *(void *)(v8 + 184) = 0;
        if ((*(char *)(v8 + 231) & 0x80000000) == 0)
        {
LABEL_32:
          *(unsigned char *)(v8 + 208) = 0;
          *(unsigned char *)(v8 + 231) = 0;
          if ((*(char *)(v8 + 263) & 0x80000000) == 0)
          {
LABEL_33:
            *(unsigned char *)(v8 + 240) = 0;
            *(unsigned char *)(v8 + 263) = 0;
LABEL_40:
            uint64_t v15 = *(void *)(v111[0] + 24);
            int v16 = *(unsigned __int8 *)(v15 + 12);
            if (v16 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v17 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x7Cu, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x7Cu, v14, 1, &v117);
            }
            else
            {
              int v17 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v111[0] + 24), 0x7Cu, v14, v16, 0);
            }
            *(unsigned char *)(v8 + 71) = v17;
            if (v17) {
              BOOL v18 = *(unsigned char *)(a1 + 142) == 0;
            }
            else {
              BOOL v18 = 1;
            }
            char v19 = v18;
            unsigned __int8 v116 = 1;
            uint64_t v20 = *(void *)(v111[0] + 24);
            int v21 = *(unsigned __int8 *)(v20 + 12);
            if (v21 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v22 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v20, 0xD7u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v20, 0xD7u, v14, 1, &v117);
              int v23 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              int v22 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v111[0] + 24), 0xD7u, v14, v21, &v116);
              int v23 = v116;
            }
            if (v23) {
              BOOL v24 = v22 != 0;
            }
            else {
              BOOL v24 = v19;
            }
            *(unsigned char *)(v8 + 72) = v24;
            unsigned __int8 v116 = 1;
            uint64_t v25 = *(void *)(v111[0] + 24);
            int v26 = *(unsigned __int8 *)(v25 + 12);
            if (v26 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v27 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v25, 0xD8u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v25, 0xD8u, v14, 1, &v117);
              int v28 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              int v27 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v111[0] + 24), 0xD8u, v14, v26, &v116);
              int v28 = v116;
            }
            if (v28) {
              BOOL v29 = v27 != 0;
            }
            else {
              BOOL v29 = v19;
            }
            *(unsigned char *)(v8 + 73) = v29;
            uint64_t v30 = *(void *)(v111[0] + 24);
            int v31 = *(unsigned __int8 *)(v30 + 12);
            if (v31 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              char v32 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v30, 0xCEu, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v30, 0xCEu, v14, 1, &v117);
            }
            else
            {
              char v32 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v111[0] + 24), 0xCEu, v14, v31, 0);
            }
            *(unsigned char *)(v8 + 70) = v32;
            uint64_t v33 = *(void *)(v111[0] + 24);
            unsigned int v34 = *(unsigned __int8 *)(v33 + 12);
            if (v34 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v33, 0x9Fu, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v33, 0x9Fu, v14, 1u, &v117);
            }
            else
            {
              int v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v111[0] + 24), 0x9Fu, v14, v34, 0);
            }
            *(_DWORD *)(v8 + 60) = v35;
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&__p, *(void *)(v111[0] + 24), 0x11Eu, 1u, fminf((float)v14, 23.0));
            int16x8_t v36 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x3B7F00FFu)));
            *(int16x4_t *)v36.i8 = vmovn_s32((int32x4_t)v36);
            *(_DWORD *)(v8 + 65) = vmovn_s16(v36).u32[0];
            uint64_t v37 = *(void *)(v111[0] + 24);
            unsigned int v38 = *(unsigned __int8 *)(v37 + 12);
            if (v38 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v39 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v37, 0x17Au, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v37, 0x17Au, v14, 1u, &v117);
            }
            else
            {
              int v39 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v111[0] + 24), 0x17Au, v14, v38, 0);
            }
            *(unsigned char *)(v8 + 69) = v39;
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, *(void *)(v111[0] + 24), 0x71u, v14, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 80), p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, *(void *)(v111[0] + 24), 0x16Eu, v14, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v42 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v43 = &__p;
            }
            else {
              unint64_t v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 112), v43, v42);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, *(void *)(v111[0] + 24), 0x181u, v14, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v44 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v45 = &__p;
            }
            else {
              int v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 144), v45, v44);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, *(void *)(v111[0] + 24), 0xBCu, v14, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v46 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v47 = &__p;
            }
            else {
              int v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 240), v47, v46);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, *(void *)(v111[0] + 24), 0xB8u, v14, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v48 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int16x8_t v49 = &__p;
            }
            else {
              int16x8_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 176), v49, v48);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&__p, *(void *)(v111[0] + 24), 0xD0u, v14, 1);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v50 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v51 = &__p;
            }
            else {
              int v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(v8 + 208), v51, v50);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v52 = *(void *)(v111[0] + 24);
            unsigned int v53 = *(unsigned __int8 *)(v52 + 12);
            if (v53 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v54 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v52, 0x98u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v52, 0x98u, v14, 1u, &v117);
            }
            else
            {
              float v54 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x98u, v14, v53, 0);
            }
            unsigned __int8 v116 = 1;
            uint64_t v55 = *(void *)(v111[0] + 24);
            unsigned int v56 = *(unsigned __int8 *)(v55 + 12);
            if (v56 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v57 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0x99u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v55, 0x99u, v14, 1u, &v117);
              int v58 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              float v57 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x99u, v14, v56, &v116);
              int v58 = v116;
            }
            if (v58) {
              float v59 = v57;
            }
            else {
              float v59 = v54;
            }
            *(float *)(v8 + 24) = v59 * v12;
            unsigned __int8 v116 = 1;
            uint64_t v60 = *(void *)(v111[0] + 24);
            unsigned int v61 = *(unsigned __int8 *)(v60 + 12);
            if (v61 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v62 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v60, 0x9Cu, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v60, 0x9Cu, v14, 1u, &v117);
              int v63 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              float v62 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x9Cu, v14, v61, &v116);
              int v63 = v116;
            }
            if (v63) {
              float v64 = v62;
            }
            else {
              float v64 = v54;
            }
            *(float *)(v8 + 28) = v64 * v12;
            unsigned __int8 v116 = 1;
            uint64_t v65 = *(void *)(v111[0] + 24);
            unsigned int v66 = *(unsigned __int8 *)(v65 + 12);
            if (v66 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v67 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v65, 0x9Au, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v65, 0x9Au, v14, 1u, &v117);
              int v68 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              float v67 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x9Au, v14, v66, &v116);
              int v68 = v116;
            }
            if (v68) {
              float v69 = v67;
            }
            else {
              float v69 = v54;
            }
            *(float *)(v8 + 36) = v69 * v12;
            unsigned __int8 v116 = 1;
            uint64_t v70 = *(void *)(v111[0] + 24);
            unsigned int v71 = *(unsigned __int8 *)(v70 + 12);
            if (v71 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x9Bu, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x9Bu, v14, 1u, &v117);
              int v73 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              float v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x9Bu, v14, v71, &v116);
              int v73 = v116;
            }
            if (v73) {
              float v74 = v72;
            }
            else {
              float v74 = v54;
            }
            *(float *)(v8 + 32) = v74 * v12;
            unsigned __int8 v116 = 1;
            uint64_t v75 = *(void *)(v111[0] + 24);
            unsigned int v76 = *(unsigned __int8 *)(v75 + 12);
            if (v76 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v77 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0xE6u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0xE6u, v14, 1u, &v117);
              int v78 = (__p.__r_.__value_.__s.__data_[0] | v117) != 0;
            }
            else
            {
              float v77 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0xE6u, v14, v76, &v116);
              int v78 = v116;
            }
            if (v78) {
              float v79 = v77;
            }
            else {
              float v79 = v54;
            }
            *(float *)(v8 + 52) = v79 * v12;
            uint64_t v80 = *(void *)(v111[0] + 24);
            unsigned int v81 = *(unsigned __int8 *)(v80 + 12);
            if (v81 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v82 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v80, 0xE7u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v80, 0xE7u, v14, 1u, &v117);
            }
            else
            {
              float v82 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0xE7u, v14, v81, 0);
            }
            *(float *)(v8 + 56) = v82 * v12;
            uint64_t v83 = *(void *)(v111[0] + 24);
            unsigned int v84 = *(unsigned __int8 *)(v83 + 12);
            if (v84 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v85 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v83, 0x119u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v83, 0x119u, v14, 1u, &v117);
            }
            else
            {
              float v85 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x119u, v14, v84, 0);
            }
            *(float *)(v8 + 40) = v85 * v12;
            uint64_t v86 = *(void *)(v111[0] + 24);
            unsigned int v87 = *(unsigned __int8 *)(v86 + 12);
            if (v87 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v88 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v86, 0x11Au, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v86, 0x11Au, v14, 1u, &v117);
            }
            else
            {
              float v88 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x11Au, v14, v87, 0);
            }
            *(float *)(v8 + 44) = v88 * v12;
            uint64_t v89 = *(void *)(v111[0] + 24);
            unsigned int v90 = *(unsigned __int8 *)(v89 + 12);
            if (v90 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              float v91 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v89, 0x11Bu, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v89, 0x11Bu, v14, 1u, &v117);
            }
            else
            {
              float v91 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x11Bu, v14, v90, 0);
            }
            *(float *)(v8 + 48) = v91 * v12;
            uint64_t v92 = *(void *)(v111[0] + 24);
            unsigned int v93 = *(unsigned __int8 *)(v92 + 12);
            if (v93 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0xE5u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0xE5u, v14, 1u, &v117);
            }
            else
            {
              int v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v111[0] + 24), 0xE5u, v14, v93, 0);
            }
            *(unsigned char *)(v8 + 64) = v94;
            uint64_t v95 = *(void *)(v111[0] + 24);
            unsigned int v96 = *(unsigned __int8 *)(v95 + 12);
            if (v96 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v95, 0x192u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v95, 0x192u, v14, 1u, &v117);
            }
            else
            {
              int v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v111[0] + 24), 0x192u, v14, v96, 0);
            }
            *(_DWORD *)(v8 + 8) = v97;
            uint64_t v98 = *(void *)(v111[0] + 24);
            unsigned int v99 = *(unsigned __int8 *)(v98 + 12);
            if (v99 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98, 0x70u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98, 0x70u, v14, 1u, &v117);
            }
            else
            {
              int v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v111[0] + 24), 0x70u, v14, v99, 0);
            }
            *(_DWORD *)(v8 + 12) = v100;
            uint64_t v101 = *(void *)(v111[0] + 24);
            unsigned int v102 = *(unsigned __int8 *)(v101 + 12);
            if (v102 == 2)
            {
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v101, 0xE8u, v14, 0) & 1) != 0
                || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v101, 0xE8u, v14, 1u) & 1) != 0)
              {
                __p.__r_.__value_.__s.__data_[0] = 1;
                unsigned __int8 v117 = 1;
                int v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0xE8u, v14, 0, &__p);
                uint64_t v104 = v101;
                unsigned int v105 = 232;
              }
              else
              {
                __p.__r_.__value_.__s.__data_[0] = 1;
                unsigned __int8 v117 = 1;
                int v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x70u, v14, 0, &__p);
                uint64_t v104 = v101;
                unsigned int v105 = 112;
              }
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v104, v105, v14, 1u, &v117);
            }
            else
            {
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v101, 0xE8u, v14, *(unsigned __int8 *)(v101 + 12)))
              {
                uint64_t v106 = v101;
                unsigned int v107 = 232;
              }
              else
              {
                uint64_t v106 = v101;
                unsigned int v107 = 112;
              }
              int v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v106, v107, v14, v102, 0);
            }
            *(_DWORD *)(v8 + 16) = v103;
            uint64_t v108 = *(void *)(v111[0] + 24);
            int v109 = *(unsigned __int8 *)(v108 + 12);
            if (v109 == 2)
            {
              __p.__r_.__value_.__s.__data_[0] = 1;
              unsigned __int8 v117 = 1;
              int v110 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v108, 0x171u, v14, 0, &__p);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v108, 0x171u, v14, 1, &v117);
            }
            else
            {
              int v110 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(v111[0] + 24), 0x171u, v14, v109, 0);
            }
            *(_DWORD *)(v8 + 20) = v110;
LABEL_186:
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v111);
            return v6;
          }
LABEL_39:
          **(unsigned char **)(v8 + 240) = 0;
          *(void *)(v8 + 248) = 0;
          goto LABEL_40;
        }
LABEL_38:
        **(unsigned char **)(v8 + 208) = 0;
        *(void *)(v8 + 216) = 0;
        if ((*(char *)(v8 + 263) & 0x80000000) == 0) {
          goto LABEL_33;
        }
        goto LABEL_39;
      }
    }
  }
  return v6;
}

void sub_1A197A3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A197A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(void *__dst, void *__src, size_t __len)
{
  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      uint64_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        uint64_t v9 = (void *)*__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          uint64_t v7 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)__dst[3] + 16))(__dst[3], v11, 1);
          memmove(v7, __src, __len);
          if (v8 != 22) {
            (*(void (**)(void, void *))(*(void *)__dst[3] + 40))(__dst[3], v9);
          }
          __dst[2] = v11 | 0x8000000000000000;
          *__dst = v7;
LABEL_23:
          __dst[1] = __len;
          goto LABEL_24;
        }
LABEL_8:
        unint64_t v12 = 2 * v8;
        if (__len > 2 * v8) {
          unint64_t v12 = __len;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          uint64_t v11 = v13 + 1;
        }
        else {
          uint64_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (void *)*__dst;
  }
  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        uint64_t v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)__dst + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __len) = 0;
  return __dst;
}

void gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(std::string *a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 == 2)
  {
    uint64_t v9 = *(void *)a2;
    if (*(void *)a2)
    {
      float v10 = *(float *)v9;
      LODWORD(v9) = *(float *)v9 == 1.0;
      if (*(unsigned char *)(a2 + 10))
      {
        if (v10 != 0.0 && v10 != 1.0) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v9 = v9;
  }
  else
  {
    uint64_t v9 = 1;
  }
  unsigned int v12 = *(unsigned __int8 *)(a2 + v9 + 11);
  float v10 = 0.0;
  if (v12 != 2)
  {
    uint64_t v15 = (char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(a2, a3, a4, v12, 0);
    if (v15[23] < 0)
    {
      int v23 = *(const std::string::value_type **)v15;
      std::string::size_type v24 = *((void *)v15 + 1);
      std::string::__init_copy_ctor_external(a1, v23, v24);
    }
    else
    {
      long long v16 = *(_OWORD *)v15;
      a1->__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v16;
    }
    return;
  }
LABEL_12:
  char v28 = 1;
  char v27 = 1;
  uint64_t v13 = (char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(a2, a3, a4, 0, &v28);
  if (v13[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *(_OWORD *)v13;
    v26.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  }
  int v17 = (char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(a2, a3, a4, 1u, &v27);
  if (v17[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *(_OWORD *)v17;
    __p.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  }
  if (v10 >= 1.0) {
    p_p = &__p;
  }
  else {
    p_p = &v26;
  }
  char v20 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  char v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v10 >= 1.0) {
    char v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0)
  {
    p_size_t size = &v26.__r_.__value_.__l.__size_;
    if (v10 >= 1.0) {
      p_size_t size = &__p.__r_.__value_.__l.__size_;
    }
    std::string::__init_copy_ctor_external(a1, p_p->__r_.__value_.__l.__data_, *p_size);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_33:
      operator delete(v26.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = p_p->__r_.__value_.__r.__words[2];
    if ((v21 & 0x80) == 0) {
      goto LABEL_27;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
}

void *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<std::string>(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v5 = *(void *)(a1 + 16 * a4 + 16);
  if (!v5)
  {
    if (a5) {
      *a5 = 0;
    }
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  unint64_t v6 = (char *)(a1 + 16 * a4);
  uint64_t v7 = *((unsigned __int16 *)v6 + 28);
  if (!*((_WORD *)v6 + 28))
  {
LABEL_30:
    char v27 = *(uint64_t **)(v5 + 72);
    if (v27)
    {
      uint64_t v28 = a3 >= 0x17 ? 23 : a3;
      unsigned int v29 = *((unsigned __int8 *)v27 + v28 + 16);
      uint64_t v30 = *v27;
      int v31 = (unsigned __int16 **)(v30 + 80 * v29);
      unint64_t v32 = *((unsigned __int16 *)v31 + 5);
      if (*((_WORD *)v31 + 5))
      {
        uint64_t v33 = *v31;
        if (!*((unsigned char *)v31 + 15))
        {
          uint64_t v36 = 2 * v32;
          uint64_t v37 = *v31;
          while (*v37 != a2)
          {
            ++v37;
            v36 -= 2;
            if (!v36)
            {
              uint64_t v37 = &v33[v32];
              break;
            }
          }
          if (v32 == (unsigned __int16)((unint64_t)((char *)v37 - (char *)v33) >> 1)) {
            goto LABEL_81;
          }
          goto LABEL_69;
        }
        if (v32 < 0x1E)
        {
          uint64_t v34 = 0;
          while (1)
          {
            unsigned int v35 = v33[v34];
            if (v35 >= a2) {
              break;
            }
            if (v32 == ++v34) {
              goto LABEL_81;
            }
          }
          if (v35 == a2) {
            unsigned __int16 v59 = v34;
          }
          else {
            unsigned __int16 v59 = v32;
          }
          if (v32 == v59) {
            goto LABEL_81;
          }
LABEL_69:
          uint64_t v52 = v30 + 80 * v29;
          unsigned int v53 = (unsigned __int16 **)(v52 + 64);
          unint64_t v54 = *(unsigned __int16 *)(v52 + 74);
          if (v54)
          {
            uint64_t v55 = *v53;
            if (*(unsigned char *)(v30 + 80 * v29 + 79))
            {
              if (v54 >= 0x1E)
              {
                int v63 = *v53;
                unint64_t v64 = v54;
                do
                {
                  unint64_t v65 = v64 >> 1;
                  unsigned int v66 = &v63[v64 >> 1];
                  unsigned int v68 = *v66;
                  float v67 = v66 + 1;
                  a1 = ~(v64 >> 1);
                  v64 += a1;
                  if (v68 < a2) {
                    int v63 = v67;
                  }
                  else {
                    unint64_t v64 = v65;
                  }
                }
                while (v64);
                if (v63 == &v55[v54] || *v63 != a2) {
                  return gss::PropertySetDefaultStringValue((gss *)a1);
                }
                unint64_t v58 = (unint64_t)((char *)v63 - (char *)v55) >> 1;
              }
              else
              {
                uint64_t v56 = 0;
                while (1)
                {
                  unsigned int v57 = v55[v56];
                  if (v57 >= a2) {
                    break;
                  }
                  if (v54 == ++v56) {
                    return gss::PropertySetDefaultStringValue((gss *)a1);
                  }
                }
                if (v57 == a2) {
                  LOWORD(v58) = v56;
                }
                else {
                  LOWORD(v58) = v54;
                }
              }
            }
            else
            {
              uint64_t v61 = 2 * v54;
              float v62 = *v53;
              while (*v62 != a2)
              {
                ++v62;
                v61 -= 2;
                if (!v61)
                {
                  float v62 = &v55[v54];
                  break;
                }
              }
              unint64_t v58 = (unint64_t)((char *)v62 - (char *)v55) >> 1;
            }
          }
          else
          {
            LOWORD(v58) = 0;
          }
          if (v54 == (unsigned __int16)v58) {
            return gss::PropertySetDefaultStringValue((gss *)a1);
          }
          float v77 = *v53;
          uint64_t v78 = v30 + 80 * v29;
          return *(void **)((char *)&v77[8 * (unsigned __int16)v58 + 4] + *(unsigned __int16 *)(v78 + 72));
        }
        size_t v46 = *v31;
        unint64_t v47 = v32;
        do
        {
          unint64_t v48 = v47 >> 1;
          int16x8_t v49 = &v46[v47 >> 1];
          unsigned int v51 = *v49;
          size_t v50 = v49 + 1;
          v47 += ~(v47 >> 1);
          if (v51 < a2) {
            size_t v46 = v50;
          }
          else {
            unint64_t v47 = v48;
          }
        }
        while (v47);
        if (v46 != &v33[v32]
          && *v46 == a2
          && v32 != (unsigned __int16)((unint64_t)((char *)v46 - (char *)v33) >> 1))
        {
          goto LABEL_69;
        }
      }
    }
LABEL_81:
    if (a5) {
      *a5 = 0;
    }
    return gss::defaultValueForKey<gss::PropertyID,std::string>();
  }
  uint64_t v8 = *((void *)v6 + 6);
  uint64_t v9 = v8 + 8 * v7;
  while (1)
  {
    uint64_t v11 = *(uint64_t **)(*(void *)v8 + 72);
    if (v11)
    {
      uint64_t v14 = *v11;
      uint64_t v13 = v11 + 2;
      uint64_t v12 = v14;
      uint64_t v15 = (gss **)(v14 + 80 * *((unsigned __int8 *)v13 + a3));
      unint64_t v16 = *((unsigned __int16 *)v15 + 5);
      if (*((_WORD *)v15 + 5))
      {
        int v17 = *v15;
        if (*((unsigned char *)v15 + 15))
        {
          if (v16 >= 0x1E)
          {
            char v21 = *v15;
            unint64_t v22 = v16;
            do
            {
              unint64_t v23 = v22 >> 1;
              std::string::size_type v24 = (unsigned __int16 *)((char *)v21 + 2 * (v22 >> 1));
              unsigned int v26 = *v24;
              uint64_t v25 = v24 + 1;
              v22 += ~(v22 >> 1);
              if (v26 < a2) {
                char v21 = (gss *)v25;
              }
              else {
                unint64_t v22 = v23;
              }
            }
            while (v22);
            a1 = (unint64_t)v17 + 2 * v16;
            if (v21 == (gss *)a1) {
              goto LABEL_6;
            }
            a1 = *(unsigned __int16 *)v21;
            if (a1 != a2) {
              goto LABEL_6;
            }
            unint64_t v10 = (unint64_t)(v21 - v17) >> 1;
          }
          else
          {
            uint64_t v18 = 0;
            while (1)
            {
              a1 = *((unsigned __int16 *)v17 + v18);
              if (a1 >= a2) {
                break;
              }
              if (v16 == ++v18) {
                goto LABEL_6;
              }
            }
            LOWORD(v10) = a1 == a2 ? v18 : (unsigned __int16)v16;
          }
        }
        else
        {
          uint64_t v19 = 2 * v16;
          a1 = (unint64_t)v17 + 2 * v16;
          char v20 = (char *)*v15;
          while (*(unsigned __int16 *)v20 != a2)
          {
            v20 += 2;
            v19 -= 2;
            if (!v19)
            {
              char v20 = (char *)v17 + 2 * v16;
              break;
            }
          }
          unint64_t v10 = (unint64_t)(v20 - (char *)v17) >> 1;
        }
        if (v16 != (unsigned __int16)v10) {
          break;
        }
      }
    }
LABEL_6:
    v8 += 8;
    if (v8 == v9) {
      goto LABEL_30;
    }
  }
  if (a3 >= 0x17) {
    unsigned int v38 = 23;
  }
  else {
    unsigned int v38 = a3;
  }
  unsigned int v39 = *((unsigned __int8 *)v13 + v38);
  uint64_t v40 = v12 + 80 * v39;
  int v41 = (unsigned __int16 **)(v40 + 64);
  unint64_t v42 = *(unsigned __int16 *)(v40 + 74);
  if (!v42)
  {
    LOWORD(v58) = 0;
    goto LABEL_120;
  }
  unint64_t v43 = *v41;
  if (!*(unsigned char *)(v12 + 80 * v39 + 79))
  {
    uint64_t v69 = 2 * v42;
    uint64_t v70 = *v41;
    while (*v70 != a2)
    {
      ++v70;
      v69 -= 2;
      if (!v69)
      {
        uint64_t v70 = &v43[v42];
        break;
      }
    }
    unint64_t v58 = (unint64_t)((char *)v70 - (char *)v43) >> 1;
LABEL_120:
    if (v42 == (unsigned __int16)v58) {
      return gss::PropertySetDefaultStringValue((gss *)a1);
    }
    float v77 = *v41;
    uint64_t v78 = v12 + 80 * v39;
    return *(void **)((char *)&v77[8 * (unsigned __int16)v58 + 4] + *(unsigned __int16 *)(v78 + 72));
  }
  if (v42 < 0x1E)
  {
    uint64_t v44 = 0;
    while (1)
    {
      unsigned int v45 = v43[v44];
      if (v45 >= a2) {
        break;
      }
      if (v42 == ++v44) {
        return gss::PropertySetDefaultStringValue((gss *)a1);
      }
    }
    if (v45 == a2) {
      LOWORD(v58) = v44;
    }
    else {
      LOWORD(v58) = v42;
    }
    goto LABEL_120;
  }
  unsigned int v71 = *v41;
  unint64_t v72 = v42;
  do
  {
    unint64_t v73 = v72 >> 1;
    float v74 = &v71[v72 >> 1];
    unsigned int v76 = *v74;
    uint64_t v75 = v74 + 1;
    a1 = ~(v72 >> 1);
    v72 += a1;
    if (v76 < a2) {
      unsigned int v71 = v75;
    }
    else {
      unint64_t v72 = v73;
    }
  }
  while (v72);
  if (v71 != &v43[v42] && *v71 == a2)
  {
    unint64_t v58 = (unint64_t)((char *)v71 - (char *)v43) >> 1;
    goto LABEL_120;
  }
  return gss::PropertySetDefaultStringValue((gss *)a1);
}

void *gss::defaultValueForKey<gss::PropertyID,std::string>()
{
  return &gss::defaultValueForKey<gss::PropertyID,std::string>(gss::PropertyID)::_defaultValue;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A197B0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::RenderableMaterialData const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::RenderableMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::InView>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  unint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 4 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    unsigned int v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      int v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 32 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  *uint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A197B790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::InView>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  unint64_t v14 = *(void **)(v12 + 24);
  unint64_t v13 = *(void **)(v12 + 32);
  uint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    unint64_t v15 = v14 + 1;
    do
    {
      unint64_t v14 = v15;
      uint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      unint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  uint64_t v17 = &ecs2::Runtime::_localEntity;
  unint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v4[11];
      uint64_t v32 = v4[10] + 4 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v4[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v5[10] + 8 * v36;
    }
    else
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = *(void **)(v12 + 32);
    uint64_t v20 = v14 + 1;
    uint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          uint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      uint64_t v83 = v20;
    }
    unint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 32 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MercatorBounds>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::InView>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v3);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = v7 + 32;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v9 = v4 + 32;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v5 + 32;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v6 + 32;
  }
  uint64_t v56 = v9;
  uint64_t v57 = (void *)v7;
  uint64_t v58 = (void *)v4;
  uint64_t v59 = (void *)v5;
  unint64_t v10 = *(void **)(v9 + 24);
  uint64_t v11 = *(void **)(v9 + 32);
  uint64_t v60 = (void *)v6;
  uint64_t v61 = v10;
  if (v11 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v56))
  {
    uint64_t v12 = v10 + 1;
    do
    {
      unint64_t v10 = v12;
      uint64_t v61 = v12;
      if (v12 == v11) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v56);
      uint64_t v12 = v10 + 1;
    }
    while (!isValid);
  }
  unint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  unint64_t v15 = (void *)result;
  while (v11 != v10)
  {
    *unint64_t v15 = *v10;
    unint64_t v17 = *v10;
    unint64_t v18 = *v10 >> 39;
    uint64_t v19 = v8[4];
    if (v18 < (v8[5] - v19) >> 3
      && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
      && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v17) & 0x7F)), v23 = v8[7], v22 = v8[8], v21 < (v22 - v23) >> 3)
      && ((unint64_t v24 = HIDWORD(v17), v25 = v23 + 8 * v21, v25 != v22)
        ? (BOOL v26 = *(_DWORD *)(v25 + 4) == v24)
        : (BOOL v26 = 0),
          v26))
    {
      uint64_t v27 = v8[11];
      uint64_t v28 = v8[10] + 32 * v21;
    }
    else
    {
      uint64_t v27 = v8[11];
      uint64_t v28 = v27;
    }
    if (v28 == v27) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    uint64_t v30 = **(void **)(a1 + 8);
    uint64_t v31 = *(void **)v30;
    uint64_t v32 = *(void **)(v30 + 8);
    if (v31 != v32)
    {
      while (*v31 != 0x41D4E9297E100630)
      {
        v31 += 5;
        if (v31 == v32) {
          goto LABEL_36;
        }
      }
    }
    if (v31 == v32)
    {
LABEL_36:
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v33 = (void *)v31[3];
      uint64_t v34 = (std::__shared_weak_count *)v31[4];
      if (v34)
      {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    int v63 = 0;
    uint64_t v62 = 1065353216;
    unint64_t result = (unint64_t)std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>(v33 + 848, (float *)&v62);
    if (!result || (unint64_t v35 = *(void *)(result + 32)) == 0)
    {
      unint64_t v35 = md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::ElevatedStroke,md::ElevatedStrokeCacheKey>((uint64_t)v33, (float *)&v62);
      unint64_t result = md::VKMRenderResourcesStore::pop<ggl::DaVinci::ElevatedStroke>(v33, v35);
      unint64_t v36 = *(void *)(result + 8);
      uint64_t v37 = *(void *)(result + 72);
      *(_DWORD *)uint64_t v37 = 1065353216;
      *(void *)(v37 + 8) = 0;
      if (*(void *)(result + 64) > v36) {
        unint64_t v36 = *(void *)(result + 64);
      }
      *(void *)(result + 56) = 0;
      *(void *)(result + 64) = v36;
    }
    *(void *)(v29 + 24) = v35;
    unint64_t v10 = *(void **)(v56 + 32);
    uint64_t v16 = v61 + 1;
    uint64_t v61 = v16;
    if (v16 != v10)
    {
      uint64_t v38 = v57[4];
      while (1)
      {
        unint64_t v39 = *((unsigned int *)v16 + 1);
        unint64_t v40 = v39 >> 7;
        if (v39 >> 7 < (v57[5] - v38) >> 3)
        {
          unint64_t result = *(void *)(v38 + 8 * v40);
          if (result)
          {
            uint64_t v41 = v39 & 0x7F;
            unint64_t result = *(unsigned __int16 *)(result + 2 * v41);
            uint64_t v43 = v57[7];
            uint64_t v42 = v57[8];
            if (result < (v42 - v43) >> 3)
            {
              unint64_t result = v43 + 8 * result;
              if (result != v42 && *(_DWORD *)(result + 4) == v39)
              {
                unint64_t result = v58[4];
                if (v40 < (uint64_t)(v58[5] - result) >> 3)
                {
                  unint64_t result = *(void *)(result + 8 * v40);
                  if (result)
                  {
                    unint64_t result = *(unsigned __int16 *)(result + 2 * v41);
                    uint64_t v46 = v58[7];
                    uint64_t v45 = v58[8];
                    if (result < (v45 - v46) >> 3)
                    {
                      unint64_t result = v46 + 8 * result;
                      if (result != v45 && *(_DWORD *)(result + 4) == v39)
                      {
                        unint64_t result = v59[4];
                        if (v40 < (uint64_t)(v59[5] - result) >> 3)
                        {
                          unint64_t result = *(void *)(result + 8 * v40);
                          if (result)
                          {
                            unint64_t result = *(unsigned __int16 *)(result + 2 * v41);
                            uint64_t v49 = v59[7];
                            uint64_t v48 = v59[8];
                            if (result < (v48 - v49) >> 3)
                            {
                              unint64_t result = v49 + 8 * result;
                              if (result != v48 && *(_DWORD *)(result + 4) == v39)
                              {
                                unint64_t result = v60[4];
                                if (v40 < (uint64_t)(v60[5] - result) >> 3)
                                {
                                  uint64_t v51 = *(void *)(result + 8 * v40);
                                  if (v51)
                                  {
                                    unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * v41);
                                    unint64_t result = v60[7];
                                    uint64_t v53 = v60[8];
                                    if (v52 < (uint64_t)(v53 - result) >> 3)
                                    {
                                      unint64_t v54 = result + 8 * v52;
                                      unint64_t result = *(unsigned int *)(v54 + 4);
                                      if (result == v39 && v54 != v53) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v16 == v10)
        {
          uint64_t v16 = v10;
          goto LABEL_15;
        }
      }
      unint64_t v10 = v16;
LABEL_15:
      uint64_t v61 = v16;
    }
  }
  *unint64_t v15 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::InView>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::MercatorBounds>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v6;
  }
  uint64_t v49 = v7 + 32;
  uint64_t v50 = (void *)v4;
  uint64_t v51 = (void *)v5;
  unint64_t v52 = (void *)v6;
  uint64_t v8 = *(void **)(v7 + 56);
  uint64_t v9 = *(void **)(v7 + 64);
  uint64_t v53 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v49))
  {
    unint64_t v10 = v8 + 1;
    do
    {
      uint64_t v8 = v10;
      uint64_t v53 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v49);
      unint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  unint64_t v13 = (uint64_t *)result;
  while (v9 != v8)
  {
    *unint64_t v13 = *v8;
    uint64_t v15 = **(void **)(a1 + 8);
    uint64_t v16 = *(void **)v15;
    unint64_t v17 = *(void **)(v15 + 8);
    if (v16 != v17)
    {
      while (*v16 != 0x41D4E9297E100630)
      {
        v16 += 5;
        if (v16 == v17) {
          goto LABEL_24;
        }
      }
    }
    if (v16 == v17)
    {
LABEL_24:
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v18 = (void *)v16[3];
      uint64_t v19 = (std::__shared_weak_count *)v16[4];
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    int v55 = 0;
    uint64_t v54 = 1065353216;
    uint64_t v20 = std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>(v18 + 848, (float *)&v54);
    if (!v20 || (unint64_t v21 = v20[4]) == 0)
    {
      unint64_t v21 = md::VKMRenderResourcesStore::createConstantDataHandle<ggl::DaVinci::ElevatedStroke,md::ElevatedStrokeCacheKey>((uint64_t)v18, (float *)&v54);
      uint64_t v22 = (void *)md::VKMRenderResourcesStore::pop<ggl::DaVinci::ElevatedStroke>(v18, v21);
      unint64_t v23 = v22[1];
      uint64_t v24 = v22[9];
      *(_DWORD *)uint64_t v24 = 1065353216;
      *(void *)(v24 + 8) = 0;
      if (v22[8] > v23) {
        unint64_t v23 = v22[8];
      }
      v22[7] = 0;
      v22[8] = v23;
    }
    uint64_t v25 = *(void **)(a1 + 8);
    uint64_t v26 = *v13;
    uint64_t v57 = (uint64_t (**)(void **))&unk_1EF525C28;
    *(void *)&long long v58 = v21;
    *((void *)&v58 + 1) = v26;
    uint64_t v59 = (void **)&v57;
    uint64_t v62 = &v60;
    uint64_t v60 = &unk_1EF525C28;
    long long v61 = v58;
    int v63 = 0;
    ecs2::Runtime::queueCommand(v25, (uint64_t)&v60);
    if (v63 != -1) {
      ((void (*)(char *, void **))off_1EF58F738[v63])(&v56, &v60);
    }
    int v63 = -1;
    uint64_t result = (uint64_t)v59;
    if (v59 == (void **)&v57)
    {
      uint64_t result = v57[4]((void **)&v57);
    }
    else if (v59)
    {
      uint64_t result = (*((uint64_t (**)(void))*v59 + 5))();
    }
    uint64_t v8 = *(void **)(v49 + 32);
    unint64_t v14 = v53 + 1;
    uint64_t v53 = v14;
    if (v14 != v8)
    {
      uint64_t v27 = v50[4];
      while (1)
      {
        unint64_t v28 = *((unsigned int *)v14 + 1);
        unint64_t v29 = v28 >> 7;
        if (v28 >> 7 < (v50[5] - v27) >> 3)
        {
          uint64_t v30 = *(void *)(v27 + 8 * v29);
          if (v30)
          {
            uint64_t v31 = v28 & 0x7F;
            unint64_t v32 = *(unsigned __int16 *)(v30 + 2 * v31);
            uint64_t v33 = v50[7];
            uint64_t result = v50[8];
            if (v32 < (result - v33) >> 3)
            {
              uint64_t v34 = v33 + 8 * v32;
              if (v34 != result && *(_DWORD *)(v34 + 4) == v28)
              {
                uint64_t v36 = v51[4];
                uint64_t result = v51[5] - v36;
                if (v29 < result >> 3)
                {
                  uint64_t v37 = *(void *)(v36 + 8 * v29);
                  if (v37)
                  {
                    unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * v31);
                    uint64_t v39 = v51[7];
                    uint64_t result = v51[8];
                    if (v38 < (result - v39) >> 3)
                    {
                      uint64_t v40 = v39 + 8 * v38;
                      if (v40 != result && *(_DWORD *)(v40 + 4) == v28)
                      {
                        uint64_t v42 = v52[4];
                        uint64_t result = v52[5] - v42;
                        if (v29 < result >> 3)
                        {
                          uint64_t v43 = *(void *)(v42 + 8 * v29);
                          if (v43)
                          {
                            unint64_t v44 = *(unsigned __int16 *)(v43 + 2 * v31);
                            uint64_t v46 = v52[7];
                            uint64_t v45 = v52[8];
                            uint64_t result = v45 - v46;
                            if (v44 < (v45 - v46) >> 3)
                            {
                              uint64_t v47 = v46 + 8 * v44;
                              if (*(_DWORD *)(v47 + 4) == v28 && v47 != v45) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v8)
        {
          unint64_t v14 = v8;
          goto LABEL_14;
        }
      }
      uint64_t v8 = v14;
LABEL_14:
      uint64_t v53 = v14;
    }
  }
  *unint64_t v13 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::MercatorBounds>(int8x8_t *a1)
{
  unint64_t v10 = 0x8D1BF84D316565E9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8D1BF84D316565E9;
    if (*(void *)&v1 <= 0x8D1BF84D316565E9) {
      unint64_t v3 = 0x8D1BF84D316565E9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8D1BF84D316565E9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8D1BF84D316565E9)
      {
        if (v5[2] == 0x8D1BF84D316565E9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8D1BF84D316565E9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8D1BF84D316565E9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197C67C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  CanEnable = (void *)gdc::Registry::storage<md::ls::CanEnableTexture>(v2);
  HasOverlay = (void *)gdc::Registry::storage<md::ls::HasOverlayPatch>(v2);
  v119[0] = (uint64_t)v3;
  v119[1] = (uint64_t)v4;
  v119[2] = (uint64_t)v5;
  v119[3] = (uint64_t)v6;
  v119[4] = (uint64_t)CanEnable;
  v119[5] = (uint64_t)HasOverlay;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v117, v119);
  uint64_t v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    uint64_t v9 = v4 + 4;
  }
  if (v5[8] - v5[7] < v9[4] - v9[3]) {
    uint64_t v9 = v5 + 4;
  }
  if (v6[8] - v6[7] < v9[4] - v9[3]) {
    uint64_t v9 = v6 + 4;
  }
  unint64_t v10 = v118;
  v115 = (unint64_t *)v9[4];
  if (v115 == v118)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = (void *)result;
LABEL_120:
    *uint64_t v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)v117[1];
    unint64_t v13 = (void *)v117[2];
    __int16 v113 = (void *)v117[3];
    uint64_t v114 = v117[0];
    char v112 = (void *)v117[4];
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v15 = *v10;
      unint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 4 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = CanEnable[4];
      if (v17 < (CanEnable[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = CanEnable[7],
            uint64_t v41 = CanEnable[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = CanEnable[11];
        unint64_t v46 = CanEnable[10] + v40;
      }
      else
      {
        unint64_t v45 = CanEnable[11];
        unint64_t v46 = v45;
      }
      if (v46 == v45) {
        unint64_t v46 = 0;
      }
      if ((uint64_t v47 = v5[4], v17 < (v5[5] - v47) >> 3)
        && (uint64_t v48 = *(void *)(v47 + 8 * v17)) != 0
        && (unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v51 = v5[7],
            uint64_t v50 = v5[8],
            v49 < (v50 - v51) >> 3)
        && ((uint64_t v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == v16) : (v53 = 0), v53))
      {
        uint64_t v54 = v5[11];
        uint64_t v55 = v5[10] + 8 * v49;
      }
      else
      {
        uint64_t v54 = v5[11];
        uint64_t v55 = v54;
      }
      uint64_t v56 = v55 == v54 ? 0 : v55;
      if ((uint64_t v57 = v6[4], v17 < (v6[5] - v57) >> 3)
        && (uint64_t v58 = *(void *)(v57 + 8 * v17)) != 0
        && (unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v61 = v6[7],
            uint64_t v60 = v6[8],
            v59 < (v60 - v61) >> 3)
        && ((uint64_t v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == v16) : (v63 = 0), v63))
      {
        uint64_t v64 = v6[11];
        uint64_t v65 = v6[10] + 32 * v59;
      }
      else
      {
        uint64_t v64 = v6[11];
        uint64_t v65 = v64;
      }
      uint64_t v66 = v65 == v64 ? 0 : v65;
      if ((uint64_t v67 = HasOverlay[4], v17 < (HasOverlay[5] - v67) >> 3)
        && (uint64_t v68 = *(void *)(v67 + 8 * v17)) != 0
        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v71 = HasOverlay[7],
            uint64_t v70 = HasOverlay[8],
            v69 < (v70 - v71) >> 3)
        && ((uint64_t v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == v16) : (v73 = 0), v73))
      {
        unint64_t v74 = HasOverlay[11];
        unint64_t v75 = HasOverlay[10] + v69;
      }
      else
      {
        unint64_t v74 = HasOverlay[11];
        unint64_t v75 = v74;
      }
      unint64_t v76 = v75 == v74 ? 0 : v75;
      unint64_t v120 = v76;
      unint64_t v121 = v46;
      uint64_t v77 = *(void *)(a2 + 24);
      if (!v77) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t *))(*(void *)v77 + 48))(v77, v27, v37, &v121, v56, v66, &v120);
      unint64_t v79 = *(unint64_t **)(v114 + 32);
      unint64_t v14 = v10 + 1;
      v118 = v10 + 1;
      if (v10 + 1 != v79)
      {
        uint64_t v80 = v12[4];
        while (1)
        {
          unint64_t v81 = *((unsigned int *)v14 + 1);
          unint64_t v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            uint64_t v83 = *(void *)(v80 + 8 * v82);
            if (v83)
            {
              uint64_t v84 = v81 & 0x7F;
              unint64_t v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              uint64_t v87 = v12[7];
              uint64_t v86 = v12[8];
              uint64_t result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                uint64_t v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == v81)
                {
                  uint64_t v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    uint64_t v91 = *(void *)(v90 + 8 * v82);
                    if (v91)
                    {
                      unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      uint64_t v94 = v13[7];
                      uint64_t v93 = v13[8];
                      uint64_t result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        uint64_t v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == v81)
                        {
                          uint64_t v97 = v113[4];
                          if (v82 < (v113[5] - v97) >> 3)
                          {
                            uint64_t v98 = *(void *)(v97 + 8 * v82);
                            if (v98)
                            {
                              unint64_t v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              uint64_t v101 = v113[7];
                              uint64_t v100 = v113[8];
                              uint64_t result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                uint64_t v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == v81)
                                {
                                  uint64_t v104 = v112[4];
                                  if (v82 < (v112[5] - v104) >> 3)
                                  {
                                    uint64_t v105 = *(void *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      uint64_t v108 = v112[7];
                                      uint64_t v107 = v112[8];
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        uint64_t v109 = v108 + 8 * v106;
                                        if (*(_DWORD *)(v109 + 4) == v81 && v109 != v107) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            unint64_t v14 = v79;
            goto LABEL_10;
          }
        }
        unint64_t v79 = v14;
LABEL_10:
        v118 = v14;
      }
      unint64_t v10 = v79;
      if (v115 == v79) {
        goto LABEL_120;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::MeshRenderableID>(v111);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderableID>(int8x8_t *a1)
{
  unint64_t v10 = 0x8DCCA4FD35258189;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8DCCA4FD35258189;
    if (*(void *)&v1 <= 0x8DCCA4FD35258189) {
      unint64_t v3 = 0x8DCCA4FD35258189 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8DCCA4FD35258189;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8DCCA4FD35258189)
      {
        if (v5[2] == 0x8DCCA4FD35258189) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8DCCA4FD35258189) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8DCCA4FD35258189) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197CE44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::InView>(int8x8_t *a1)
{
  unint64_t v10 = 0xA219A074B7259E0FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA219A074B7259E0FLL;
    if (*(void *)&v1 <= 0xA219A074B7259E0FLL) {
      unint64_t v3 = 0xA219A074B7259E0FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA219A074B7259E0FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA219A074B7259E0FLL)
      {
        if (v5[2] == 0xA219A074B7259E0FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA219A074B7259E0FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA219A074B7259E0FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197D0B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderableMaterialData>(int8x8_t *a1)
{
  unint64_t v10 = 0xB6C12FBB402E8E70;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB6C12FBB402E8E70;
    if (*(void *)&v1 <= 0xB6C12FBB402E8E70) {
      unint64_t v3 = 0xB6C12FBB402E8E70 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB6C12FBB402E8E70;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB6C12FBB402E8E70)
      {
        if (v5[2] == 0xB6C12FBB402E8E70) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB6C12FBB402E8E70) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB6C12FBB402E8E70) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197D324(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ColorDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xA3F884E4E2541296;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA3F884E4E2541296;
    if (*(void *)&v1 <= 0xA3F884E4E2541296) {
      unint64_t v3 = 0xA3F884E4E2541296 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA3F884E4E2541296;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA3F884E4E2541296)
      {
        if (v5[2] == 0xA3F884E4E2541296) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA3F884E4E2541296) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA3F884E4E2541296) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197D594(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::HasOverlayPatch>(int8x8_t *a1)
{
  unint64_t v10 = 0xE40027D1222182B5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE40027D1222182B5;
    if (*(void *)&v1 <= 0xE40027D1222182B5) {
      unint64_t v3 = 0xE40027D1222182B5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE40027D1222182B5;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE40027D1222182B5)
      {
        if (v5[2] == 0xE40027D1222182B5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE40027D1222182B5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE40027D1222182B5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197D804(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A197DC2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::UnitsPerMeter>(v2);
  CanUpdateWithStyle = (void *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(v2);
  v99[0] = (uint64_t)v3;
  v99[1] = (uint64_t)v4;
  v99[2] = (uint64_t)v5;
  v99[3] = (uint64_t)CanUpdateWithStyle;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v97, v99);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] < v7[4] - v7[3]) {
    unint64_t v7 = v5 + 4;
  }
  if (CanUpdateWithStyle[8] - CanUpdateWithStyle[7] < v7[4] - v7[3]) {
    unint64_t v7 = CanUpdateWithStyle + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v98;
  if (v8 == v98)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v10 = (void *)result;
LABEL_97:
    *unint64_t v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    unint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v97[0];
    uint64_t v12 = (void *)v97[1];
    unint64_t v13 = (void *)v97[2];
    uint64_t v94 = (void *)v97[4];
    uint64_t v95 = (void *)v97[3];
    while (1)
    {
      *unint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 12 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      uint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = CanUpdateWithStyle[4], v17 < (CanUpdateWithStyle[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = CanUpdateWithStyle[7],
            uint64_t v51 = CanUpdateWithStyle[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = CanUpdateWithStyle[11];
        uint64_t v56 = CanUpdateWithStyle[10] + 4 * v50;
      }
      else
      {
        uint64_t v55 = CanUpdateWithStyle[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      unint64_t v14 = v9 + 1;
      uint64_t v98 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v95[4];
                          if (v63 < (v95[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v95[7];
                              uint64_t v81 = v95[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v94[4];
                                  if (v63 < (v94[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v94[7];
                                      uint64_t v88 = v94[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            unint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        uint64_t v98 = v14;
      }
      uint64_t v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v92, v93);
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = *a2 + 32;
  if (!*a2) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v4 + 32;
  if (!v4) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v5 + 32;
  if (!v5) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v6 + 32;
  if (!v6) {
    uint64_t v10 = 0;
  }
  uint64_t result = *(void *)(v7 + 24);
  if (*(void *)(v8 + 32) - *(void *)(v8 + 24) < (unint64_t)(*(void *)(v7 + 32) - result)) {
    uint64_t v7 = v8;
  }
  if (*(void *)(v9 + 32) - *(void *)(v9 + 24) < *(void *)(v7 + 32) - *(void *)(v7 + 24)) {
    uint64_t v7 = v9;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v7 + 32) - *(void *)(v7 + 24)) {
    uint64_t v7 = v10;
  }
  *a1 = v7;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  uint64_t v13 = *(void *)(v7 + 24);
  uint64_t v12 = *(void *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(int8x8_t *a1)
{
  uint64_t v10 = 0x5FF8F613B2E16249;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5FF8F613B2E16249;
    if (*(void *)&v1 <= 0x5FF8F613B2E16249uLL) {
      uint64_t v3 = 0x5FF8F613B2E16249uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5FF8F613B2E16249;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5FF8F613B2E16249)
      {
        if (v5[2] == 0x5FF8F613B2E16249) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5FF8F613B2E16249) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5FF8F613B2E16249) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197E418(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(int8x8_t *a1)
{
  unint64_t v10 = 0xD6C8660F950CD951;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD6C8660F950CD951;
    if (*(void *)&v1 <= 0xD6C8660F950CD951) {
      unint64_t v3 = 0xD6C8660F950CD951 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD6C8660F950CD951;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD6C8660F950CD951)
      {
        if (v5[2] == 0xD6C8660F950CD951) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD6C8660F950CD951) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD6C8660F950CD951) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197E688(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::~Model()
{
}

uint64_t gdc::Registry::storage<md::ls::UnitsPerMeter>(int8x8_t *a1)
{
  unint64_t v10 = 0xBEF372B431A710A8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBEF372B431A710A8;
    if (*(void *)&v1 <= 0xBEF372B431A710A8) {
      unint64_t v3 = 0xBEF372B431A710A8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBEF372B431A710A8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBEF372B431A710A8)
      {
        if (v5[2] == 0xBEF372B431A710A8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBEF372B431A710A8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBEF372B431A710A8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A197E910(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::MaterialLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v277 = *MEMORY[0x1E4F143B8];
  v269[0] = &unk_1EF56FD98;
  v269[1] = a2;
  v267[0] = &unk_1EF56FDE0;
  v267[1] = a2;
  v268 = v267;
  v272 = v271;
  v270 = v269;
  v271[0] = &unk_1EF56FDE0;
  v271[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v269);
  if (v268 == v267)
  {
    (*(void (**)(void *))(v267[0] + 32))(v267);
    uint64_t v6 = a1;
  }
  else
  {
    uint64_t v6 = a1;
    if (v268) {
      (*(void (**)(void))(*v268 + 40))();
    }
  }
  if (v270 == v269)
  {
    (*(void (**)(void *))(v269[0] + 32))(v269);
  }
  else if (v270)
  {
    (*(void (**)(void *))(*v270 + 40))(v270);
  }
  md::MaterialLogic::_clearPendingTaggedRegistries((int8x8_t *)v6);
  uint64_t v8 = *(void *)(v6 + 120);
  uint64_t v7 = *(void *)(v6 + 128);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a4 + 8);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = *(void *)(v6 + 136);
  uint64_t v10 = *(void *)(v6 + 144);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a4 + 24);
  *(void *)(a4 + 16) = v11;
  *(void *)(a4 + 24) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *(void *)(a3 + 32);
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v15 = *(void *)(v13 + 40);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(std::__shared_weak_count **)(v6 + 184);
  *(void *)(v6 + 176) = v14;
  *(void *)(v6 + 184) = v15;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v14 = *(void *)(v6 + 176);
  }
  if (*(unsigned char *)(a4 + 72))
  {
    if (!v14)
    {
      *(unsigned char *)(a4 + 73) = 0;
      goto LABEL_33;
    }
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)(v14 + 254));
    if ((v17 & 1) == 0)
    {
      LOBYTE(v14) = 0;
      *(unsigned char *)(a4 + 73) = 1;
      goto LABEL_33;
    }
    uint64_t v14 = *(void *)(v6 + 176);
  }
  *(unsigned char *)(a4 + 73) = 0;
  if (v14)
  {
    unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v14 + 254));
    LOBYTE(v14) = v18 & 1;
  }
LABEL_33:
  *(unsigned char *)(a4 + 72) = v14;
  gms::MaterialManager<ggl::Texture2D>::setClientStyleState(*(void *)(v6 + 120), *(void *)(v6 + 176), *(void *)(v6 + 184));
  v246 = *(void **)(a3 + 8);
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v261, (uint64_t)(v246 + 10));
  LOBYTE(v266) = v264 != 0;
  uint64_t v19 = *(void *)(v6 + 152);
  v273 = (void (**)(void **))&unk_1EF56FD50;
  v274 = &v261;
  v275 = &v266;
  v276 = (void **)&v273;
  md::RegistryManager::each(v19, (uint64_t)&v273);
  if (v276 == (void **)&v273)
  {
    v273[4]((void **)&v273);
    unint64_t v20 = __p;
    if (!__p) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v276) {
    (*((void (**)(void **))*v276 + 5))(v276);
  }
  unint64_t v20 = __p;
  if (__p)
  {
    do
    {
LABEL_37:
      uint64_t v21 = (void *)*v20;
      operator delete(v20);
      unint64_t v20 = v21;
    }
    while (v21);
  }
LABEL_38:
  uint64_t v22 = v261;
  v261 = 0;
  if (v22) {
    operator delete(v22);
  }
  for (i = (void *)v246[2]; i; i = (void *)*i)
  {
    uint64_t v24 = *(void *)(a1 + 120);
    unint64_t v25 = i[2];
    uint64_t v26 = i[3];
    unint64_t v27 = *(void *)(v26 + 176);
    uint64_t v28 = *(std::__shared_weak_count **)(v26 + 184);
    v273 = (void (**)(void **))v27;
    v274 = (void **)&v28->__vftable;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(v24, v25, v27, v28);
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  unint64_t v30 = (unsigned char *)v246[20];
  uint64_t v29 = (unsigned char *)v246[21];
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      abort();
    }
    uint64_t v32 = (char *)operator new(v29 - v30);
    memcpy(v32, v30, v31);
    uint64_t v33 = 0;
    uint64_t v34 = 8 * (v31 >> 3);
    do
    {
      unint64_t v35 = *(void *)&v32[v33];
      uint64_t v36 = *(void *)(a1 + 120);
      uint64_t v37 = *(void **)(v36 + 56);
      uint64_t v38 = *(std::__shared_weak_count **)(v36 + 64);
      v261 = v37;
      uint64_t v262 = (uint64_t)v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(v36, v35, (unint64_t)v37, v38);
      if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
      v33 += 8;
    }
    while (v34 != v33);
    operator delete(v32);
  }
  uint64_t v242 = a4;
  int v39 = *(_DWORD *)(*(void *)(v13 + 32) + 248);
  int v40 = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a1 + 168) = v39;
  uint64_t v41 = *(void *)(a1 + 152);
  uint64_t v42 = *(int8x8_t ***)(v41 + 384);
  v253 = *(int8x8_t ***)(v41 + 392);
  if (v42 == v253) {
    goto LABEL_343;
  }
  BOOL v54 = v39 == v40;
  uint64_t v43 = 384;
  if (v54)
  {
    uint64_t v43 = 432;
    uint64_t v44 = v41 + 432;
  }
  else
  {
    uint64_t v44 = v41 + 384;
  }
  uint64_t v251 = v44;
  uint64_t v45 = *(int8x8_t ***)(v41 + v43);
  do
  {
    uint64_t v47 = *v42;
    if (v45 != *(int8x8_t ***)(v251 + 8) && v47 == *v45)
    {
      uint64_t v114 = (void *)gdc::Registry::storage<md::components::Material>(*v42);
      v115 = (unint64_t *)v114[7];
      unsigned __int8 v116 = (unint64_t *)v114[8];
      if (v115 != v116)
      {
        unsigned __int8 v117 = (uint64_t *)v114[10];
        do
        {
          unint64_t v118 = *v115;
          v119 = (void *)gdc::Registry::storage<md::components::ClientState>(v47);
          uint64_t v120 = v119[4];
          if (v118 >> 39 < (v119[5] - v120) >> 3
            && (uint64_t v121 = *(void *)(v120 + 8 * (v118 >> 39))) != 0
            && (unint64_t v122 = *(unsigned __int16 *)(v121 + 2 * (HIDWORD(v118) & 0x7F)),
                uint64_t v124 = v119[7],
                uint64_t v123 = v119[8],
                v122 < (v123 - v124) >> 3)
            && ((uint64_t v125 = v124 + 8 * v122, v125 != v123) ? (v126 = *(_DWORD *)(v125 + 4) == HIDWORD(v118)) : (v126 = 0),
                v126))
          {
            uint64_t v127 = v119[11];
            uint64_t v128 = v119[10] + 16 * v122;
          }
          else
          {
            uint64_t v127 = v119[11];
            uint64_t v128 = v127;
          }
          if (v128 == v127) {
            uint64_t v129 = 0;
          }
          else {
            uint64_t v129 = v128;
          }
          md::MaterialLogic::_updateMaterialForComponent(a1, v47, v118, v117, v129);
          v117 += 3;
          ++v115;
        }
        while (v115 != v116);
      }
      ++v45;
    }
    else
    {
      uint64_t v48 = (void *)gdc::Registry::storage<md::components::FlexClientStateChanged>(*v42);
      uint64_t v49 = gdc::Registry::storage<md::components::Material>(v47);
      unint64_t v50 = (void *)v49;
      v259 = v45;
      uint64_t v51 = v48[7];
      uint64_t v52 = v48[8];
      if (*(void *)(v49 + 64) - *(void *)(v49 + 56) >= (unint64_t)(v52 - v51)) {
        uint64_t v53 = v48 + 4;
      }
      else {
        uint64_t v53 = (void *)(v49 + 32);
      }
      v255 = v53;
      uint64_t v257 = v49 + 32;
      BOOL v54 = v48 + 4 != v53 || v51 == v52;
      if (!v54)
      {
        do
        {
          unint64_t v65 = *(unsigned int *)(v51 + 4);
          uint64_t v66 = v50[4];
          unint64_t v67 = (v50[5] - v66) >> 3;
          if (v65 >> 7 < v67)
          {
            uint64_t v68 = *(void *)(v66 + 8 * (v65 >> 7));
            if (v68)
            {
              unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (v65 & 0x7F));
              uint64_t v71 = v50[7];
              uint64_t v70 = v50[8];
              unint64_t v72 = (v70 - v71) >> 3;
              if (v72 > v69)
              {
                uint64_t v73 = v71 + 8 * v69;
                if (v73 != v70 && *(_DWORD *)(v73 + 4) == v65)
                {
                  unint64_t v75 = *(void *)v51;
                  uint64_t v76 = HIDWORD(*(void *)v51);
                  unint64_t v77 = *(void *)v51 >> 39;
                  if (v77 < v67
                    && (uint64_t v78 = *(void *)(v66 + 8 * v77)) != 0
                    && (unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * (HIDWORD(v75) & 0x7F)), v72 > v79)
                    && ((uint64_t v80 = v71 + 8 * v79, v80 != v70) ? (v81 = *(_DWORD *)(v80 + 4) == v76) : (v81 = 0), v81))
                  {
                    uint64_t v82 = (uint64_t *)(v50[10] + 24 * v79);
                  }
                  else
                  {
                    uint64_t v82 = (uint64_t *)v50[11];
                  }
                  uint64_t v83 = (void *)gdc::Registry::storage<md::components::ClientState>(v47);
                  uint64_t v84 = v83[4];
                  if (v77 < (v83[5] - v84) >> 3
                    && (uint64_t v85 = *(void *)(v84 + 8 * v77)) != 0
                    && (unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * (HIDWORD(v75) & 0x7F)),
                        uint64_t v88 = v83[7],
                        uint64_t v87 = v83[8],
                        v86 < (v87 - v88) >> 3)
                    && ((uint64_t v89 = v88 + 8 * v86, v89 != v87) ? (v90 = *(_DWORD *)(v89 + 4) == v76) : (v90 = 0), v90))
                  {
                    uint64_t v62 = v83[11];
                    uint64_t v63 = v83[10] + 16 * v86;
                  }
                  else
                  {
                    uint64_t v62 = v83[11];
                    uint64_t v63 = v62;
                  }
                  if (v63 == v62) {
                    uint64_t v64 = 0;
                  }
                  else {
                    uint64_t v64 = v63;
                  }
                  md::MaterialLogic::_updateMaterialForComponent(a1, v47, v75, v82, v64);
                }
              }
            }
          }
          v51 += 8;
        }
        while (v51 != v52);
      }
      uint64_t v45 = v259;
      if ((void *)v257 == v255)
      {
        uint64_t v91 = v50[7];
        uint64_t v92 = v50[8];
        if (v91 != v92)
        {
          uint64_t v93 = (uint64_t *)v50[10];
          do
          {
            unint64_t v97 = *(unsigned int *)(v91 + 4);
            uint64_t v98 = v48[4];
            if (v97 >> 7 < (v48[5] - v98) >> 3)
            {
              uint64_t v99 = *(void *)(v98 + 8 * (v97 >> 7));
              if (v99)
              {
                unint64_t v100 = *(unsigned __int16 *)(v99 + 2 * (v97 & 0x7F));
                uint64_t v102 = v48[7];
                uint64_t v101 = v48[8];
                if (v100 < (v101 - v102) >> 3)
                {
                  uint64_t v103 = v102 + 8 * v100;
                  if (v103 != v101 && *(_DWORD *)(v103 + 4) == v97)
                  {
                    unint64_t v105 = *(void *)v91;
                    unint64_t v106 = (void *)gdc::Registry::storage<md::components::ClientState>(v47);
                    uint64_t v107 = v106[4];
                    if (v105 >> 39 < (v106[5] - v107) >> 3
                      && (uint64_t v108 = *(void *)(v107 + 8 * (v105 >> 39))) != 0
                      && (unint64_t v109 = *(unsigned __int16 *)(v108 + 2 * (HIDWORD(v105) & 0x7F)),
                          uint64_t v111 = v106[7],
                          uint64_t v110 = v106[8],
                          v109 < (v110 - v111) >> 3)
                      && ((uint64_t v112 = v111 + 8 * v109, v112 != v110)
                        ? (BOOL v113 = *(_DWORD *)(v112 + 4) == HIDWORD(v105))
                        : (BOOL v113 = 0),
                          v113))
                    {
                      uint64_t v94 = v106[11];
                      uint64_t v95 = v106[10] + 16 * v109;
                    }
                    else
                    {
                      uint64_t v94 = v106[11];
                      uint64_t v95 = v94;
                    }
                    if (v95 == v94) {
                      uint64_t v96 = 0;
                    }
                    else {
                      uint64_t v96 = v95;
                    }
                    md::MaterialLogic::_updateMaterialForComponent(a1, v47, v105, v93, v96);
                  }
                }
              }
            }
            v93 += 3;
            v91 += 8;
          }
          while (v91 != v92);
        }
      }
      uint64_t v55 = (void *)gdc::Registry::storage<md::components::FlexClientStateChanged>(v47);
      uint64_t v56 = v55;
      if (v55[29])
      {
        uint64_t v57 = (void *)v55[28];
        if (v57)
        {
          uint64_t v58 = (void (**)(void **))v55[31];
          unint64_t v59 = (void *)v55[7];
          uint64_t v60 = (uint64_t)(v55[8] - (void)v59) >> 3;
          do
          {
            v261 = v59;
            uint64_t v262 = v60;
            v273 = v58;
            uint64_t v61 = v57[6];
            if (!v61) {
              goto LABEL_359;
            }
            (*(void (**)(uint64_t, void (***)(void **), void **))(*(void *)v61 + 48))(v61, &v273, &v261);
            uint64_t v57 = (void *)*v57;
          }
          while (v57);
        }
      }
      v56[8] = v56[7];
      v56[11] = v56[10];
    }
    ++v42;
    uint64_t v46 = a1;
  }
  while (v42 != v253);
  uint64_t v130 = *(void *)(a1 + 152);
  v131 = *(int8x8_t ***)(v130 + 384);
  v243 = *(int8x8_t ***)(v130 + 392);
  if (v131 == v243)
  {
LABEL_343:
    char v245 = 0;
LABEL_344:
    *(unsigned char *)(v242 + 74) = v245;
    if (!v272) {
      goto LABEL_359;
    }
    (*(void (**)(void *))(*v272 + 48))(v272);
    if (v272 == v271)
    {
      (*(void (**)(void *))(v271[0] + 32))(v271);
    }
    else if (v272)
    {
      (*(void (**)(void))(*v272 + 40))();
    }
    return;
  }
  char v245 = 0;
  while (1)
  {
    v258 = *v131;
    v132 = (void *)gdc::Registry::storage<md::components::PendingMaterial>(*v131);
    v133 = (void *)v132[7];
    v247 = (void *)v132[8];
    if (v133 != v247) {
      break;
    }
LABEL_159:
    if (++v131 == v243) {
      goto LABEL_344;
    }
  }
  v244 = v131;
  v248 = 0;
  v249 = 0;
  v134 = 0;
  int v135 = 0;
  v136 = (void **)v132[10];
  while (2)
  {
    v252 = v133;
    v254 = v136;
    unint64_t v260 = *v133;
    unint64_t v137 = (unint64_t)*v136;
    v138 = (void *)gdc::Registry::storage<md::components::ClientState>(v258);
    uint64_t v140 = v138[4];
    v256 = v134;
    if (v260 >> 39 >= (v138[5] - v140) >> 3) {
      goto LABEL_170;
    }
    uint64_t v141 = *(void *)(v140 + 8 * (v260 >> 39));
    if (!v141) {
      goto LABEL_170;
    }
    unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v260) & 0x7F));
    uint64_t v144 = v138[7];
    uint64_t v143 = v138[8];
    if (v142 >= (v143 - v144) >> 3) {
      goto LABEL_170;
    }
    uint64_t v145 = v144 + 8 * v142;
    BOOL v146 = v145 != v143 && *(_DWORD *)(v145 + 4) == HIDWORD(v260);
    if (v146
      && (uint64_t v159 = v138[10]) != 0
      && (uint64_t v160 = v159 + 16 * v142, v160 != v138[11])
      && (unsigned int v161 = *(unsigned __int16 *)(v160 + 10), *(_WORD *)(v160 + 10)))
    {
      unint64_t v162 = 0;
      v163 = 0;
      unsigned int v164 = 0;
      v165 = *(int8x8_t **)(v46 + 120);
      v261 = (void *)v137;
      do
      {
        if (v164 < v161)
        {
          v163 = (unsigned int *)(*(void *)v160 + 4 * v164);
          v139 = (unsigned __int16 *)(*(void *)v160 + *(unsigned __int16 *)(v160 + 8) + 2 * v164);
        }
        v162 ^= (*v139
               - 0x61C8864680B583EBLL
               + ((((v162 << 6) - 0x61C8864680B583EBLL + (v162 >> 2) + *v163) ^ v162) << 6)
               + ((((v162 << 6) - 0x61C8864680B583EBLL + (v162 >> 2) + *v163) ^ v162) >> 2)) ^ ((v162 << 6)
                                                                                              - 0x61C8864680B583EBLL
                                                                                              + (v162 >> 2)
                                                                                              + *v163);
        unsigned int v166 = v164 + 1;
        if (v164 + 1 < v161) {
          ++v164;
        }
        else {
          unsigned int v164 = v161;
        }
      }
      while (v166 < v161);
      uint64_t v262 = v162;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v273, v165, (uint64_t *)&v261, v160);
    }
    else
    {
LABEL_170:
      v147 = *(int8x8_t **)(v46 + 120);
      v261 = (void *)v137;
      uint64_t v262 = 0;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v273, v147, (uint64_t *)&v261, 0);
    }
    v148 = v273;
    if (!v273)
    {
      char v245 = 1;
      v152 = v254;
      v134 = v256;
      v153 = (std::__shared_weak_count *)v274;
      if (!v274) {
        goto LABEL_162;
      }
      goto LABEL_330;
    }
    int8x8_t v149 = (int8x8_t)v246[1];
    if (!*(void *)&v149) {
      goto LABEL_232;
    }
    uint8x8_t v150 = (uint8x8_t)vcnt_s8(v149);
    v150.i16[0] = vaddlv_u8(v150);
    if (v150.u32[0] > 1uLL)
    {
      unint64_t v151 = v137;
      if (*(void *)&v149 <= v137) {
        unint64_t v151 = v137 % *(void *)&v149;
      }
    }
    else
    {
      unint64_t v151 = (*(void *)&v149 - 1) & v137;
    }
    v154 = *(void **)(*v246 + 8 * v151);
    if (!v154) {
      goto LABEL_232;
    }
    v155 = (void *)*v154;
    if (!v155) {
      goto LABEL_232;
    }
    if (v150.u32[0] < 2uLL)
    {
      uint64_t v156 = *(void *)&v149 - 1;
      while (1)
      {
        unint64_t v158 = v155[1];
        if (v158 == v137)
        {
          if (v155[2] == v137) {
            goto LABEL_206;
          }
        }
        else if ((v158 & v156) != v151)
        {
          goto LABEL_232;
        }
        v155 = (void *)*v155;
        if (!v155) {
          goto LABEL_232;
        }
      }
    }
    while (1)
    {
      unint64_t v157 = v155[1];
      if (v157 == v137) {
        break;
      }
      if (v157 >= *(void *)&v149) {
        v157 %= *(void *)&v149;
      }
      if (v157 != v151) {
        goto LABEL_232;
      }
LABEL_184:
      v155 = (void *)*v155;
      if (!v155) {
        goto LABEL_232;
      }
    }
    if (v155[2] != v137) {
      goto LABEL_184;
    }
LABEL_206:
    if (!*(unsigned char *)(v155[3] + 200)) {
      goto LABEL_232;
    }
    v167 = (void *)gdc::Registry::storage<md::components::SupportsFlexing>(v258);
    unint64_t v265 = v260;
    v168 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v167 + 4, (uint64_t)&v265);
    if ((v169 & 1) == 0)
    {
      uint64_t v170 = v167[31];
      if (v167[10] + (((uint64_t)v168 - v167[7]) >> 3) == v167[11]) {
        goto LABEL_229;
      }
      for (j = (void *)v167[16]; j; j = (void *)*j)
      {
        v261 = &v265;
        uint64_t v262 = 1;
        uint64_t v266 = v170;
        uint64_t v172 = j[6];
        if (!v172) {
          goto LABEL_359;
        }
        (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v172 + 48))(v172, &v266, &v261);
      }
LABEL_232:
      v185 = (std::__shared_weak_count *)v274;
      if (v274)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v274 + 1, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v186 = (void *)gdc::Registry::storage<md::components::Material>(v258);
      unint64_t v265 = v260;
      v187 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v186 + 4, (uint64_t)&v265);
      if (v188)
      {
        v192 = (unint64_t *)v186[11];
        unint64_t v191 = v186[12];
        if ((unint64_t)v192 < v191)
        {
          unint64_t *v192 = v137;
          v192[1] = (unint64_t)v148;
          v192[2] = (unint64_t)v185;
          if (v185) {
            atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v189 = v192 + 3;
          uint64_t v46 = a1;
          v152 = v254;
          goto LABEL_264;
        }
        v193 = (unint64_t *)v186[10];
        unint64_t v194 = 0xAAAAAAAAAAAAAAABLL * (v192 - v193) + 1;
        if (v194 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v195 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191 - (void)v193) >> 3);
        if (2 * v195 > v194) {
          unint64_t v194 = 2 * v195;
        }
        if (v195 >= 0x555555555555555) {
          unint64_t v196 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v196 = v194;
        }
        if (v196 <= 0xAAAAAAAAAAAAAAALL)
        {
          v197 = (char *)operator new(24 * v196);
          v198 = (unint64_t *)&v197[8 * (v192 - v193)];
          unint64_t *v198 = v137;
          v198[1] = (unint64_t)v148;
          v198[2] = (unint64_t)v185;
          if (v185)
          {
            atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
            v193 = (unint64_t *)v186[10];
            v192 = (unint64_t *)v186[11];
          }
          v152 = v254;
          v199 = &v197[24 * v196];
          v189 = v198 + 3;
          uint64_t v46 = a1;
          if (v192 == v193)
          {
            v186[10] = v198;
            v186[11] = v189;
            v186[12] = v199;
            if (v193) {
              goto LABEL_263;
            }
          }
          else
          {
            do
            {
              unint64_t v200 = *(v192 - 3);
              v192 -= 3;
              *(v198 - 3) = v200;
              v198 -= 3;
              *(_OWORD *)(v198 + 1) = *(_OWORD *)(v192 + 1);
              v192[1] = 0;
              v192[2] = 0;
            }
            while (v192 != v193);
            v193 = (unint64_t *)v186[10];
            v201 = (unint64_t *)v186[11];
            v186[10] = v198;
            v186[11] = v189;
            v186[12] = v199;
            if (v201 != v193)
            {
              do
              {
                v202 = (std::__shared_weak_count *)*(v201 - 1);
                if (v202 && !atomic_fetch_add(&v202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v202);
                }
                v201 -= 3;
              }
              while (v201 != v193);
              v152 = v254;
            }
            if (!v193) {
              goto LABEL_264;
            }
LABEL_263:
            operator delete(v193);
          }
LABEL_264:
          v186[11] = v189;
          v190 = v185;
          goto LABEL_265;
        }
LABEL_354:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v189 = (unint64_t *)(v186[10] + 24 * (((uint64_t)v187 - v186[7]) >> 3));
      unint64_t *v189 = v137;
      v189[1] = (unint64_t)v148;
      v190 = (std::__shared_weak_count *)v189[2];
      v189[2] = (unint64_t)v185;
      if (v190)
      {
        v152 = v254;
        if (!atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
        v190 = 0;
        uint64_t v46 = a1;
      }
      else
      {
        uint64_t v46 = a1;
        v152 = v254;
      }
LABEL_265:
      uint64_t v203 = v186[31];
      if (v189 == (unint64_t *)v186[11])
      {
        for (k = (void *)v186[22]; k; k = (void *)*k)
        {
          v261 = &v265;
          uint64_t v262 = 1;
          uint64_t v266 = v203;
          uint64_t v207 = k[6];
          if (!v207) {
            goto LABEL_359;
          }
          (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v207 + 48))(v207, &v266, &v261);
        }
      }
      else
      {
        for (m = (void *)v186[16]; m; m = (void *)*m)
        {
          v261 = &v265;
          uint64_t v262 = 1;
          uint64_t v266 = v203;
          uint64_t v205 = m[6];
          if (!v205) {
            goto LABEL_359;
          }
          (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v205 + 48))(v205, &v266, &v261);
        }
      }
      if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
        if (v185) {
          goto LABEL_276;
        }
      }
      else if (v185)
      {
LABEL_276:
        if (!atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      v208 = (void *)gdc::Registry::storage<md::components::DidResolvePendingMaterial>(v258);
      unint64_t v265 = v260;
      v209 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v208 + 4, (uint64_t)&v265);
      if (v210)
      {
        v215 = (unsigned char *)v208[11];
        unint64_t v214 = v208[12];
        if ((unint64_t)v215 >= v214)
        {
          v217 = (char *)v208[10];
          uint64_t v218 = v215 - v217;
          uint64_t v219 = v215 - v217 + 1;
          if (v219 < 0) {
            abort();
          }
          unint64_t v220 = v214 - (void)v217;
          if (2 * v220 > v219) {
            uint64_t v219 = 2 * v220;
          }
          if (v220 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v221 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v221 = v219;
          }
          if (v221) {
            v222 = (char *)operator new(v221);
          }
          else {
            v222 = 0;
          }
          uint64_t v216 = (uint64_t)&v222[v218 + 1];
          v223 = (char *)(v217 - v215);
          if (v217 == v215) {
            v223 = 0;
          }
          v208[10] = &v222[v218 + (void)v223];
          v208[11] = v216;
          v208[12] = &v222[v221];
          if (v217) {
            operator delete(v217);
          }
        }
        else
        {
          uint64_t v216 = (uint64_t)(v215 + 1);
        }
        v208[11] = v216;
        uint64_t v211 = v208[31];
        uint64_t v46 = a1;
      }
      else
      {
        uint64_t v211 = v208[31];
        if (v208[10] + (((uint64_t)v209 - v208[7]) >> 3) != v208[11])
        {
          v212 = (void *)v208[16];
          if (v212)
          {
            while (1)
            {
              v261 = &v265;
              uint64_t v262 = 1;
              uint64_t v266 = v211;
              uint64_t v213 = v212[6];
              if (!v213) {
                goto LABEL_359;
              }
              (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v213 + 48))(v213, &v266, &v261);
              v212 = (void *)*v212;
              if (!v212) {
                goto LABEL_306;
              }
            }
          }
          goto LABEL_306;
        }
      }
      for (n = (void *)v208[22]; n; n = (void *)*n)
      {
        v261 = &v265;
        uint64_t v262 = 1;
        uint64_t v266 = v211;
        uint64_t v225 = n[6];
        if (!v225) {
          goto LABEL_359;
        }
        (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v225 + 48))(v225, &v266, &v261);
      }
LABEL_306:
      if (v256 >= v249)
      {
        uint64_t v226 = (v256 - v248) >> 3;
        unint64_t v227 = v226 + 1;
        if ((unint64_t)(v226 + 1) >> 61) {
          abort();
        }
        if ((v249 - v248) >> 2 > v227) {
          unint64_t v227 = (v249 - v248) >> 2;
        }
        if ((unint64_t)(v249 - v248) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v227;
        }
        if (v228)
        {
          if (v228 >> 61) {
            goto LABEL_354;
          }
          v229 = operator new(8 * v228);
        }
        else
        {
          v229 = 0;
        }
        v230 = &v229[8 * v226];
        *(void *)v230 = v260;
        v134 = v230 + 8;
        v231 = v248;
        if (v256 != v248)
        {
          unint64_t v232 = v256 - 8 - v248;
          if (v232 < 0x168)
          {
            v233 = v256;
            v231 = v248;
            goto LABEL_326;
          }
          if (&v229[v256 - v248 - 8 - (v232 & 0xFFFFFFFFFFFFFFF8)] > &v229[v256 - v248 - 8]
            || &v256[-(v232 & 0xFFFFFFFFFFFFFFF8) - 8] > v256 - 8
            || (unint64_t)(v248 - v229) < 0x20)
          {
            v233 = v256;
            v231 = v248;
            goto LABEL_326;
          }
          uint64_t v235 = (v232 >> 3) + 1;
          v233 = &v256[-8 * (v235 & 0x3FFFFFFFFFFFFFFCLL)];
          v236 = &v229[8 * v226 - 16];
          v237 = v256 - 16;
          uint64_t v238 = v235 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v239 = *(_OWORD *)v237;
            *(v236 - 1) = *((_OWORD *)v237 - 1);
            _OWORD *v236 = v239;
            v236 -= 2;
            v237 -= 32;
            v238 -= 4;
          }
          while (v238);
          v230 -= 8 * (v235 & 0x3FFFFFFFFFFFFFFCLL);
          v231 = v248;
          if (v235 != (v235 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_326:
              uint64_t v234 = *((void *)v233 - 1);
              v233 -= 8;
              *((void *)v230 - 1) = v234;
              v230 -= 8;
            }
            while (v233 != v231);
          }
        }
        v249 = &v229[8 * v228];
        if (v231) {
          operator delete(v231);
        }
        int v135 = 1;
        v248 = v230;
        v153 = (std::__shared_weak_count *)v274;
        if (v274) {
          goto LABEL_330;
        }
        goto LABEL_162;
      }
      *(void *)v256 = v260;
      v134 = v256 + 8;
      int v135 = 1;
      v153 = (std::__shared_weak_count *)v274;
      if (!v274) {
        goto LABEL_162;
      }
LABEL_330:
      if (!atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
LABEL_162:
      v136 = v152 + 1;
      v133 = v252 + 1;
      if (v252 + 1 == v247)
      {
        if (v248 != v134)
        {
          v240 = (unint64_t *)v248;
          do
          {
            v241 = (void *)gdc::Registry::storage<md::components::PendingMaterial>(v258);
            gdc::ComponentStorageWrapper<md::components::PendingMaterial>::remove(v241, *v240++);
          }
          while (v240 != (unint64_t *)v134);
        }
        if (v135) {
          std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>(a1 + 192, v258[5].u16[0], v258[5].i16[0]);
        }
        if (v248) {
          operator delete(v248);
        }
        v131 = v244;
        goto LABEL_159;
      }
      continue;
    }
    break;
  }
  v174 = (unsigned char *)v167[11];
  unint64_t v173 = v167[12];
  if ((unint64_t)v174 >= v173)
  {
    v176 = (char *)v167[10];
    uint64_t v177 = v174 - v176;
    uint64_t v178 = v174 - v176 + 1;
    if (v178 < 0) {
      abort();
    }
    unint64_t v179 = v173 - (void)v176;
    if (2 * v179 > v178) {
      uint64_t v178 = 2 * v179;
    }
    if (v179 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v180 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v180 = v178;
    }
    if (v180) {
      v181 = (char *)operator new(v180);
    }
    else {
      v181 = 0;
    }
    uint64_t v175 = (uint64_t)&v181[v177 + 1];
    v182 = (char *)(v176 - v174);
    if (v176 == v174) {
      v182 = 0;
    }
    v167[10] = &v181[v177 + (void)v182];
    v167[11] = v175;
    v167[12] = &v181[v180];
    if (v176) {
      operator delete(v176);
    }
  }
  else
  {
    uint64_t v175 = (uint64_t)(v174 + 1);
  }
  v167[11] = v175;
  uint64_t v170 = v167[31];
LABEL_229:
  v183 = (void *)v167[22];
  if (!v183) {
    goto LABEL_232;
  }
  while (1)
  {
    v261 = &v265;
    uint64_t v262 = 1;
    uint64_t v266 = v170;
    uint64_t v184 = v183[6];
    if (!v184) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v184 + 48))(v184, &v266, &v261);
    v183 = (void *)*v183;
    if (!v183) {
      goto LABEL_232;
    }
  }
LABEL_359:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A197FFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::function<void ()(gdc::Registry *)>::~function((void *)(v31 - 128));
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a24);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v31 - 160));
  _Unwind_Resume(a1);
}

uint64_t *gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(uint64_t a1, unint64_t a2, unint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t *)(a1 + 16);
  int8x8_t v7 = *(int8x8_t *)(a1 + 24);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = a2;
      if (*(void *)&v7 <= a2) {
        unint64_t v9 = a2 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v9 = (*(void *)&v7 - 1) & a2;
    }
    uint64_t v10 = *(void **)(*result + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == a2)
            {
              if (v11[2] == a2) {
                return result;
              }
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == a2)
          {
            if (v11[2] == a2) {
              return result;
            }
          }
          else
          {
            if (v13 >= *(void *)&v7) {
              v13 %= *(void *)&v7;
            }
            if (v13 != v9) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_21:
  unint64_t v16 = (uint64_t (**)(void **))a2;
  unint64_t v17 = a3;
  unsigned __int8 v18 = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>(result, a2, (uint64_t)&v16);
  uint64_t v15 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  unint64_t v16 = (uint64_t (**)(void **))&unk_1EF57CB88;
  unint64_t v17 = a2;
  uint64_t v19 = (void **)&v16;
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(void **)(a1 + 192), (uint64_t)&v16);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(void **)(a1 + 184), (uint64_t)&v16);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(void **)(a1 + 288), (uint64_t)&v16);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(void **)(a1 + 280), (uint64_t)&v16);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(void **)(a1 + 384), (uint64_t)&v16);
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(*(void **)(a1 + 376), (uint64_t)&v16);
  uint64_t result = (uint64_t *)v19;
  if (v19 == (void **)&v16) {
    return (uint64_t *)v16[4]((void **)&v16);
  }
  if (v19) {
    return (uint64_t *)(*((uint64_t (**)(void))*v19 + 5))();
  }
  return result;
}

void sub_1A19804F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::components::Material::~Material((md::components::Material *)va);
  _Unwind_Resume(a1);
}

void sub_1A1980508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Material>(int8x8_t *a1)
{
  uint64_t v10 = 0x299DE7A80C80C439;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x299DE7A80C80C439;
    if (*(void *)&v1 <= 0x299DE7A80C80C439uLL) {
      uint64_t v3 = 0x299DE7A80C80C439uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x299DE7A80C80C439;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x299DE7A80C80C439)
      {
        if (v5[2] == 0x299DE7A80C80C439) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x299DE7A80C80C439) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x299DE7A80C80C439) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1980758(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::FlexClientStateChanged>(int8x8_t *a1)
{
  uint64_t v10 = 0x6F78D65E6A19A54BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6F78D65E6A19A54BLL;
    if (*(void *)&v1 <= 0x6F78D65E6A19A54BuLL) {
      uint64_t v3 = 0x6F78D65E6A19A54BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6F78D65E6A19A54BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6F78D65E6A19A54BLL)
      {
        if (v5[2] == 0x6F78D65E6A19A54BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6F78D65E6A19A54BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6F78D65E6A19A54BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19809C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::PendingMaterial>(int8x8_t *a1)
{
  uint64_t v10 = 0x251D10CE20A5B012;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x251D10CE20A5B012;
    if (*(void *)&v1 <= 0x251D10CE20A5B012uLL) {
      uint64_t v3 = 0x251D10CE20A5B012uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x251D10CE20A5B012;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x251D10CE20A5B012)
      {
        if (v5[2] == 0x251D10CE20A5B012) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x251D10CE20A5B012) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x251D10CE20A5B012) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1980C38(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::removeFromCache(void *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 2;
  uint8x8_t v2 = (void *)a1[2];
  if (v2)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        std::__function::__func<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1},std::allocator<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1}>,BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::operator()(v19, v20);
        return;
      }
      int v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v2 + 2);
      uint64_t v8 = (void *)*v2;
      if (v7) {
        break;
      }
LABEL_4:
      uint8x8_t v2 = v8;
      if (!v8) {
        return;
      }
    }
    int8x8_t v9 = (int8x8_t)a1[1];
    unint64_t v10 = v2[1];
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v9) {
        v10 %= *(void *)&v9;
      }
    }
    else
    {
      v10 &= *(void *)&v9 - 1;
    }
    uint64_t v12 = *(void **)(*a1 + 8 * v10);
    do
    {
      unint64_t v13 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12 != v2);
    if (v13 == v3) {
      goto LABEL_41;
    }
    unint64_t v14 = v13[1];
    if (v11.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v9) {
        v14 %= *(void *)&v9;
      }
    }
    else
    {
      v14 &= *(void *)&v9 - 1;
    }
    uint64_t v15 = (void *)*v2;
    if (v14 != v10)
    {
LABEL_41:
      if (v8)
      {
        unint64_t v16 = v8[1];
        if (v11.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&v9) {
            v16 %= *(void *)&v9;
          }
        }
        else
        {
          v16 &= *(void *)&v9 - 1;
        }
        uint64_t v15 = (void *)*v2;
        if (v16 == v10) {
          goto LABEL_27;
        }
      }
      *(void *)(*a1 + 8 * v10) = 0;
      uint64_t v15 = (void *)*v2;
    }
    if (!v15)
    {
LABEL_33:
      *unint64_t v13 = v15;
      *uint8x8_t v2 = 0;
      --a1[3];
      if (*((unsigned char *)v2 + 48))
      {
        unsigned __int8 v18 = (std::__shared_weak_count *)v2[5];
        if (v18)
        {
          if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      operator delete(v2);
      goto LABEL_4;
    }
LABEL_27:
    unint64_t v17 = v15[1];
    if (v11.u32[0] > 1uLL)
    {
      if (v17 >= *(void *)&v9) {
        v17 %= *(void *)&v9;
      }
    }
    else
    {
      v17 &= *(void *)&v9 - 1;
    }
    if (v17 != v10)
    {
      *(void *)(*a1 + 8 * v17) = v13;
      uint64_t v15 = (void *)*v2;
    }
    goto LABEL_33;
  }
}

BOOL std::__function::__func<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1},std::allocator<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1}>,BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::operator()(uint64_t a1, void *a2)
{
  return *a2 == *(void *)(a1 + 8);
}

uint64_t md::RegistryManager::each(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(uint64_t **)(result + 384);
  for (i = *(uint64_t **)(result + 392); v4 != i; ++v4)
  {
    uint64_t v13 = *v4;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v13);
  }
  int v7 = (uint64_t *)v3[51];
  for (j = (uint64_t *)v3[52]; v7 != j; ++v7)
  {
    uint64_t v13 = *v7;
    uint64_t v9 = *(void *)(a2 + 24);
    if (!v9) {
      goto LABEL_11;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v13);
  }
  uint8x8_t v11 = (uint64_t *)v3[60];
  unint64_t v10 = (uint64_t *)v3[61];
  if (v11 != v10)
  {
    while (1)
    {
      uint64_t v13 = *v11;
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v12 + 48))(v12, &v13);
      if (++v11 == v10) {
        return result;
      }
    }
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::operator()();
  }
  return result;
}

void std::__function::__func<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1,std::allocator<md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_1>,void ()(gdc::Registry *)>::operator()(uint64_t a1, int8x8_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>(*a2);
  uint64_t v5 = *(uint64_t **)(v4 + 56);
  uint64_t v6 = *(uint64_t **)(v4 + 64);
  uint64_t v63 = (gdc::Registry *)v3;
  if (v5 == v6)
  {
    int v7 = 0;
    goto LABEL_38;
  }
  uint64_t v61 = a1;
  int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = *v5;
    if (v9 < v8)
    {
      *(void *)uint64_t v9 = v10;
      v9 += 8;
      goto LABEL_4;
    }
    uint64_t v11 = (v9 - v7) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    if ((v8 - v7) >> 2 > v12) {
      unint64_t v12 = (v8 - v7) >> 2;
    }
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    *(void *)uint64_t v15 = v10;
    unint64_t v16 = v15 + 8;
    if (v9 != v7)
    {
      unint64_t v17 = v9 - 8 - v7;
      if (v17 >= 0x168)
      {
        if (&v14[v9 - v7 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v14[v9 - v7 - 8])
        {
          unsigned __int8 v18 = v9;
        }
        else if (&v9[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
        {
          unsigned __int8 v18 = v9;
        }
        else if ((unint64_t)(v7 - v14) >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          unsigned __int8 v18 = &v9[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v21 = &v14[8 * v11 - 16];
          uint64_t v22 = v9 - 16;
          uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *uint64_t v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_20;
          }
        }
        else
        {
          unsigned __int8 v18 = v9;
        }
      }
      else
      {
        unsigned __int8 v18 = v9;
      }
      do
      {
        uint64_t v19 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v18 != v7);
    }
LABEL_20:
    uint64_t v8 = &v14[8 * v13];
    if (v7) {
      operator delete(v7);
    }
    int v7 = v15;
    uint64_t v9 = v16;
LABEL_4:
    ++v5;
  }
  while (v5 != v6);
  if (v7 != v9)
  {
    unint64_t v25 = (unint64_t *)v7;
    do
    {
      unint64_t v26 = *v25++;
      gdc::Registry::destroy((uint64_t)v63, v26);
    }
    while (v25 != (unint64_t *)v9);
  }
  a1 = v61;
LABEL_38:
  if (!**(unsigned char **)(a1 + 16)
    || (unint64_t v27 = (void *)gdc::Registry::storage<md::components::Asset>((int8x8_t *)v63),
        uint64_t v28 = (uint64_t *)v27[7],
        uint64_t v29 = (uint64_t *)v27[8],
        v28 == v29)
    || (unint64_t v30 = *(void **)(a1 + 8), v31 = (int8x8_t)v30[1], !*(void *)&v31))
  {
LABEL_90:
    if (v7) {
      operator delete(v7);
    }
    return;
  }
  uint64_t v32 = (uint64_t *)v27[10];
LABEL_42:
  unint64_t v33 = *v32;
  uint8x8_t v34 = (uint8x8_t)vcnt_s8(v31);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    unint64_t v35 = *v32;
    if (v33 >= *(void *)&v31) {
      unint64_t v35 = v33 % *(void *)&v31;
    }
  }
  else
  {
    unint64_t v35 = v33 & (*(void *)&v31 - 1);
  }
  uint64_t v36 = *(void **)(*v30 + 8 * v35);
  if (!v36 || (uint64_t v37 = (void *)*v36) == 0)
  {
LABEL_87:
    while (1)
    {
      if (++v28 == v29) {
        goto LABEL_90;
      }
      v32 += 9;
      int8x8_t v31 = (int8x8_t)v30[1];
      if (v31) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v62 = *v28;
  if (v34.u32[0] < 2uLL)
  {
    uint64_t v38 = *(void *)&v31 - 1;
    while (1)
    {
      uint64_t v40 = v37[1];
      if (v33 == v40)
      {
        if (v37[2] == v33) {
          goto LABEL_62;
        }
      }
      else if ((v40 & v38) != v35)
      {
        goto LABEL_87;
      }
      uint64_t v37 = (void *)*v37;
      if (!v37) {
        goto LABEL_87;
      }
    }
  }
  while (2)
  {
    unint64_t v39 = v37[1];
    if (v33 != v39)
    {
      if (v39 >= *(void *)&v31) {
        v39 %= *(void *)&v31;
      }
      if (v39 != v35) {
        goto LABEL_87;
      }
      goto LABEL_51;
    }
    if (v37[2] != v33)
    {
LABEL_51:
      uint64_t v37 = (void *)*v37;
      if (!v37) {
        goto LABEL_87;
      }
      continue;
    }
    break;
  }
LABEL_62:
  uint64_t v41 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>((int8x8_t *)v63);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v41, v62);
  uint64_t v42 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>((int8x8_t *)v63);
  uint64_t v71 = v62;
  uint64_t v43 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v42 + 4, (uint64_t)&v71);
  if (v44)
  {
    uint64_t v49 = (unsigned char *)v42[11];
    unint64_t v48 = v42[12];
    if ((unint64_t)v49 >= v48)
    {
      uint64_t v51 = (char *)v42[10];
      uint64_t v60 = v49 - v51;
      int64_t v52 = v49 - v51 + 1;
      if (v52 < 0) {
        abort();
      }
      unint64_t v53 = v48 - (void)v51;
      if (2 * v53 > v52) {
        int64_t v52 = 2 * v53;
      }
      if (v53 >= 0x3FFFFFFFFFFFFFFFLL) {
        int64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v52)
      {
        int64_t v54 = v52;
        uint64_t v55 = (char *)operator new(v52);
        int64_t v52 = v54;
      }
      else
      {
        uint64_t v55 = 0;
      }
      uint64_t v56 = &v55[v52];
      uint64_t v50 = (uint64_t)&v55[v60 + 1];
      uint64_t v57 = (char *)(v51 - v49);
      if (v51 == v49) {
        uint64_t v57 = 0;
      }
      v42[10] = &v55[v60 + (void)v57];
      v42[11] = v50;
      v42[12] = v56;
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      uint64_t v50 = (uint64_t)(v49 + 1);
    }
    v42[11] = v50;
    uint64_t v45 = v42[31];
  }
  else
  {
    uint64_t v45 = v42[31];
    if (v42[10] + (((uint64_t)v43 - v42[7]) >> 3) != v42[11])
    {
      for (i = (void *)v42[16]; i; i = (void *)*i)
      {
        uint64_t v64 = &v71;
        v65.i64[0] = 1;
        v72[0] = v45;
        uint64_t v47 = i[6];
        if (!v47) {
          goto LABEL_94;
        }
        (*(void (**)(uint64_t, void *, uint64_t **))(*(void *)v47 + 48))(v47, v72, &v64);
      }
LABEL_86:
      LOWORD(v64) = *((_WORD *)v32 + 8);
      int8x16_t v65 = vextq_s8(*(int8x16_t *)v32, *(int8x16_t *)v32, 8uLL);
      long long v66 = *(_OWORD *)((char *)v32 + 20);
      long long v67 = *(_OWORD *)((char *)v32 + 36);
      long long v68 = *(_OWORD *)((char *)v32 + 52);
      uint64_t v69 = 0;
      v70[0] = 0;
      *(void *)((char *)v70 + 5) = 0;
      gdc::Registry::create(v63);
    }
  }
  uint64_t v58 = (void *)v42[22];
  if (!v58) {
    goto LABEL_86;
  }
  while (1)
  {
    uint64_t v64 = &v71;
    v65.i64[0] = 1;
    v72[0] = v45;
    uint64_t v59 = v58[6];
    if (!v59) {
      break;
    }
    (*(void (**)(uint64_t, void *, uint64_t **))(*(void *)v59 + 48))(v59, v72, &v64);
    uint64_t v58 = (void *)*v58;
    if (!v58) {
      goto LABEL_86;
    }
  }
LABEL_94:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A1981524(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD0D1B23DCFF48A8BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD0D1B23DCFF48A8BLL;
    if (*(void *)&v1 <= 0xD0D1B23DCFF48A8BLL) {
      unint64_t v3 = 0xD0D1B23DCFF48A8BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD0D1B23DCFF48A8BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD0D1B23DCFF48A8BLL)
      {
        if (v5[2] == 0xD0D1B23DCFF48A8BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD0D1B23DCFF48A8BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD0D1B23DCFF48A8BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1981790(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0,std::allocator<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0>,void ()(gdc::Registry *)>::operator()(uint64_t a1, int8x8_t **a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(*a2);
  uint64_t v5 = *(unint64_t **)(v4 + 56);
  uint64_t v6 = *(unint64_t **)(v4 + 64);
  while (v5 != v6)
  {
    unint64_t v7 = *v5++;
    uint64_t v8 = (void *)gdc::Registry::storage<md::components::Material>(v3);
    gdc::ComponentStorageWrapper<md::components::Material>::remove(v8, v7);
  }
  uint64_t v9 = (void *)gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(v3);
  unint64_t v10 = v9;
  if (v9[29])
  {
    uint64_t v11 = (void *)v9[28];
    if (v11)
    {
      uint64_t v12 = v9[31];
      unint64_t v13 = (uint64_t *)v9[7];
      uint64_t v14 = (uint64_t)(v9[8] - (void)v13) >> 3;
      do
      {
        uint64_t v57 = v13;
        uint64_t v58 = v14;
        uint64_t v56 = v12;
        uint64_t v15 = v11[6];
        if (!v15) {
          goto LABEL_61;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v56, &v57);
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
  }
  v10[8] = v10[7];
  v10[11] = v10[10];
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v16 = (void *)gdc::Registry::storage<md::components::Material>(v3);
    unint64_t v17 = (uint64_t *)v16[7];
    unsigned __int8 v18 = (uint64_t *)v16[8];
    if (v17 != v18)
    {
      uint64_t v19 = *(void **)(a1 + 8);
      int8x8_t v20 = (int8x8_t)v19[1];
      if (v20)
      {
        uint64_t v21 = (unint64_t *)v16[10];
LABEL_12:
        unint64_t v22 = *v21;
        uint8x8_t v23 = (uint8x8_t)vcnt_s8(v20);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          unint64_t v24 = *v21;
          if (v22 >= *(void *)&v20) {
            unint64_t v24 = v22 % *(void *)&v20;
          }
        }
        else
        {
          unint64_t v24 = v22 & (*(void *)&v20 - 1);
        }
        unint64_t v25 = *(void **)(*v19 + 8 * v24);
        if (v25)
        {
          unint64_t v26 = (void *)*v25;
          if (v26)
          {
            uint64_t v27 = *v17;
            if (v23.u32[0] < 2uLL)
            {
              uint64_t v28 = *(void *)&v20 - 1;
              while (1)
              {
                unint64_t v30 = v26[1];
                if (v22 == v30)
                {
                  if (v26[2] == v22) {
                    goto LABEL_32;
                  }
                }
                else if ((v30 & v28) != v24)
                {
                  goto LABEL_57;
                }
                unint64_t v26 = (void *)*v26;
                if (!v26) {
                  goto LABEL_57;
                }
              }
            }
            do
            {
              unint64_t v29 = v26[1];
              if (v22 == v29)
              {
                if (v26[2] == v22)
                {
LABEL_32:
                  int8x8_t v31 = (void *)gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(v3);
                  uint64_t v55 = v27;
                  uint64_t v32 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v31 + 4, (uint64_t)&v55);
                  uint64_t v54 = v27;
                  if ((v33 & 1) == 0)
                  {
                    uint64_t v34 = v31[31];
                    if (v31[10] + (((uint64_t)v32 - v31[7]) >> 3) != v31[11])
                    {
                      for (i = (void *)v31[16]; i; i = (void *)*i)
                      {
                        uint64_t v57 = &v55;
                        uint64_t v58 = 1;
                        uint64_t v56 = v34;
                        uint64_t v36 = i[6];
                        if (!v36) {
                          goto LABEL_61;
                        }
                        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v36 + 48))(v36, &v56, &v57);
                      }
LABEL_56:
                      uint64_t v57 = (uint64_t *)*v21;
                      int64_t v52 = (void *)gdc::Registry::storage<md::components::PendingMaterial>(v3);
                      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v52, v54, &v57);
                      break;
                    }
LABEL_53:
                    uint64_t v50 = (void *)v31[22];
                    if (!v50) {
                      goto LABEL_56;
                    }
                    while (1)
                    {
                      uint64_t v57 = &v55;
                      uint64_t v58 = 1;
                      uint64_t v56 = v34;
                      uint64_t v51 = v50[6];
                      if (!v51) {
                        break;
                      }
                      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v51 + 48))(v51, &v56, &v57);
                      uint64_t v50 = (void *)*v50;
                      if (!v50) {
                        goto LABEL_56;
                      }
                    }
LABEL_61:
                    std::__throw_bad_function_call[abi:nn180100]();
LABEL_62:
                    abort();
                  }
                  uint64_t v38 = (unsigned char *)v31[11];
                  unint64_t v37 = v31[12];
                  if ((unint64_t)v38 >= v37)
                  {
                    uint64_t v40 = (char *)v31[10];
                    uint64_t v41 = v38 - v40;
                    int64_t v42 = v38 - v40 + 1;
                    if (v42 < 0) {
                      goto LABEL_62;
                    }
                    unint64_t v43 = v37 - (void)v40;
                    if (2 * v43 > v42) {
                      int64_t v42 = 2 * v43;
                    }
                    if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
                      int64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    if (v42)
                    {
                      int64_t v53 = v42;
                      char v44 = (char *)operator new(v42);
                      int64_t v42 = v53;
                      uint64_t v41 = v38 - v40;
                    }
                    else
                    {
                      char v44 = 0;
                    }
                    uint64_t v45 = &v44[v41];
                    uint64_t v46 = &v44[v42];
                    uint64_t v47 = (uint64_t)&v44[v41 + 1];
                    uint64_t v49 = (char *)(v40 - v38);
                    BOOL v48 = v40 == v38;
                    uint64_t v39 = v47;
                    if (v48) {
                      uint64_t v49 = 0;
                    }
                    v31[10] = &v49[(void)v45];
                    v31[11] = v47;
                    v31[12] = v46;
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    uint64_t v39 = (uint64_t)(v38 + 1);
                  }
                  v31[11] = v39;
                  uint64_t v34 = v31[31];
                  goto LABEL_53;
                }
              }
              else
              {
                if (v29 >= *(void *)&v20) {
                  v29 %= *(void *)&v20;
                }
                if (v29 != v24) {
                  break;
                }
              }
              unint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
        }
LABEL_57:
        while (++v17 != v18)
        {
          v21 += 3;
          int8x8_t v20 = (int8x8_t)v19[1];
          if (v20) {
            goto LABEL_12;
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(int8x8_t *a1)
{
  uint64_t v10 = 0x671E8E33A9A34C17;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x671E8E33A9A34C17;
    if (*(void *)&v1 <= 0x671E8E33A9A34C17uLL) {
      uint64_t v3 = 0x671E8E33A9A34C17uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x671E8E33A9A34C17;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x671E8E33A9A34C17)
      {
        if (v5[2] == 0x671E8E33A9A34C17) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x671E8E33A9A34C17) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x671E8E33A9A34C17) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1981DBC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0,std::allocator<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0>,void ()(gdc::Registry *)>::operator()(uint64_t a1, int8x8_t **a2)
{
  uint8x8_t v2 = *a2;
  int8x8_t v3 = (*a2)[1];
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = 0xCA93DB2C2ACE8387;
      if (*(void *)&v3 <= 0xCA93DB2C2ACE8387) {
        unint64_t v5 = 0xCA93DB2C2ACE8387 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v5 = (*(void *)&v3 - 1) & 0xCA93DB2C2ACE8387;
    }
    uint64_t v6 = *(void **)(*(void *)v2 + 8 * v5);
    if (v6)
    {
      unint64_t v7 = (void *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          uint64_t v8 = *(void *)&v3 - 1;
          while (1)
          {
            uint64_t v10 = v7[1];
            if (v10 == 0xCA93DB2C2ACE8387)
            {
              if (v7[2] == 0xCA93DB2C2ACE8387) {
                goto LABEL_22;
              }
            }
            else if ((v10 & v8) != v5)
            {
              return;
            }
            unint64_t v7 = (void *)*v7;
            if (!v7) {
              return;
            }
          }
        }
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == 0xCA93DB2C2ACE8387)
          {
            if (v7[2] == 0xCA93DB2C2ACE8387)
            {
LABEL_22:
              uint64_t v11 = v7[5];
              if (*(void *)(v11 + 8) == 0xCA93DB2C2ACE8387)
              {
                uint64_t v12 = *(int8x8_t **)(v11 + 32);
                if (v12)
                {
                  unint64_t v13 = (void *)gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(*a2);
                  uint64_t v14 = gdc::Registry::storage<md::components::MeshInstance>(v2);
                  uint64_t v15 = (void *)v14;
                  uint64_t v16 = v14 + 32;
                  uint64_t v18 = v13[7];
                  uint64_t v17 = v13[8];
                  if (*(void *)(v14 + 64) - *(void *)(v14 + 56) >= (unint64_t)(v17 - v18)) {
                    uint64_t v19 = v13 + 4;
                  }
                  else {
                    uint64_t v19 = (void *)(v14 + 32);
                  }
                  if (v17 != v18 && v13 + 4 == v19)
                  {
                    do
                    {
                      unint64_t v28 = *(unsigned int *)(v18 + 4);
                      uint64_t v29 = v15[4];
                      if (v28 >> 7 < (v15[5] - v29) >> 3)
                      {
                        uint64_t v30 = *(void *)(v29 + 8 * (v28 >> 7));
                        if (v30)
                        {
                          unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
                          uint64_t v33 = v15[7];
                          uint64_t v32 = v15[8];
                          if (v31 < (v32 - v33) >> 3)
                          {
                            uint64_t v34 = v33 + 8 * v31;
                            if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                            {
                              unint64_t v64 = *(void *)v18;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v18 += 8;
                    }
                    while (v18 != v17);
                  }
                  if ((void *)v16 == v19)
                  {
                    uint64_t v45 = v15[7];
                    uint64_t v44 = v15[8];
                    while (v45 != v44)
                    {
                      unint64_t v46 = *(unsigned int *)(v45 + 4);
                      uint64_t v47 = v13[4];
                      if (v46 >> 7 < (v13[5] - v47) >> 3)
                      {
                        uint64_t v48 = *(void *)(v47 + 8 * (v46 >> 7));
                        if (v48)
                        {
                          unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (v46 & 0x7F));
                          uint64_t v51 = v13[7];
                          uint64_t v50 = v13[8];
                          if (v49 < (v50 - v51) >> 3)
                          {
                            uint64_t v52 = v51 + 8 * v49;
                            if (v52 != v50 && *(_DWORD *)(v52 + 4) == v46)
                            {
                              unint64_t v64 = *(void *)v45;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v45 += 8;
                    }
                  }
                  int8x8_t v20 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v2);
                  uint64_t v21 = gdc::Registry::storage<md::components::MeshInstance>(v2);
                  unint64_t v22 = (void *)v21;
                  uint64_t v23 = v21 + 32;
                  uint64_t v25 = v20[7];
                  uint64_t v24 = v20[8];
                  if (*(void *)(v21 + 64) - *(void *)(v21 + 56) >= (unint64_t)(v24 - v25)) {
                    unint64_t v26 = v20 + 4;
                  }
                  else {
                    unint64_t v26 = (void *)(v21 + 32);
                  }
                  if (v24 != v25 && v20 + 4 == v26)
                  {
                    do
                    {
                      unint64_t v36 = *(unsigned int *)(v25 + 4);
                      uint64_t v37 = v22[4];
                      if (v36 >> 7 < (v22[5] - v37) >> 3)
                      {
                        uint64_t v38 = *(void *)(v37 + 8 * (v36 >> 7));
                        if (v38)
                        {
                          unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (v36 & 0x7F));
                          uint64_t v41 = v22[7];
                          uint64_t v40 = v22[8];
                          if (v39 < (v40 - v41) >> 3)
                          {
                            uint64_t v42 = v41 + 8 * v39;
                            if (v42 != v40 && *(_DWORD *)(v42 + 4) == v36)
                            {
                              unint64_t v64 = *(void *)v25;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v25 += 8;
                    }
                    while (v25 != v24);
                  }
                  if ((void *)v23 == v26)
                  {
                    uint64_t v55 = v22[7];
                    uint64_t v54 = v22[8];
                    while (v55 != v54)
                    {
                      unint64_t v56 = *(unsigned int *)(v55 + 4);
                      uint64_t v57 = v20[4];
                      if (v56 >> 7 < (v20[5] - v57) >> 3)
                      {
                        uint64_t v58 = *(void *)(v57 + 8 * (v56 >> 7));
                        if (v58)
                        {
                          unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * (v56 & 0x7F));
                          uint64_t v61 = v20[7];
                          uint64_t v60 = v20[8];
                          if (v59 < (v60 - v61) >> 3)
                          {
                            uint64_t v62 = v61 + 8 * v59;
                            if (v62 != v60 && *(_DWORD *)(v62 + 4) == v56)
                            {
                              unint64_t v64 = *(void *)v55;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v55 += 8;
                    }
                  }
                }
              }
              return;
            }
          }
          else
          {
            if (v9 >= *(void *)&v3) {
              v9 %= *(void *)&v3;
            }
            if (v9 != v5) {
              return;
            }
          }
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
    }
  }
}

uint64_t gdc::Registry::storage<md::components::MeshInstance>(int8x8_t *a1)
{
  uint64_t v10 = 0x6307588E3A87BAE2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6307588E3A87BAE2;
    if (*(void *)&v1 <= 0x6307588E3A87BAE2uLL) {
      uint64_t v3 = 0x6307588E3A87BAE2uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6307588E3A87BAE2;
  }
  uint8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6307588E3A87BAE2)
      {
        if (v5[2] == 0x6307588E3A87BAE2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6307588E3A87BAE2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6307588E3A87BAE2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19823DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::QueuedForDestruction<>>(int8x8_t *a1)
{
  uint64_t v10 = 0x257EF5A82043772ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x257EF5A82043772ELL;
    if (*(void *)&v1 <= 0x257EF5A82043772EuLL) {
      uint64_t v3 = 0x257EF5A82043772EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x257EF5A82043772ELL;
  }
  uint8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x257EF5A82043772ELL)
      {
        if (v5[2] == 0x257EF5A82043772ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x257EF5A82043772ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x257EF5A82043772ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A198264C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_1A198279C(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MaterialLogic", "", v5, 2u);
  }
}

int8x8_t *md::MaterialLogic::_clearPendingTaggedRegistries(int8x8_t *this)
{
  uint64_t v1 = this;
  int8x8_t v2 = this[26];
  if (!*(void *)&v2)
  {
LABEL_2:
    if (v1[27])
    {
      this = (int8x8_t *)v1[26];
      if (this)
      {
        do
        {
          uint64_t v3 = (int8x8_t *)*this;
          operator delete(this);
          this = v3;
        }
        while (v3);
      }
      v1[26] = 0;
      int8x8_t v4 = v1[25];
      if (v4)
      {
        uint64_t v5 = 0;
        do
          *(void *)(*(void *)&v1[24] + 8 * v5++) = 0;
        while (*(void *)&v4 != v5);
      }
      v1[27] = 0;
    }
    return this;
  }
  while (1)
  {
    this = (int8x8_t *)md::RegistryManager::getRegistryByIdentifier(*(md::RegistryManager **)&v1[19], *(unsigned __int16 *)(*(void *)&v2 + 16));
    if (!this) {
      goto LABEL_11;
    }
    this = (int8x8_t *)gdc::Registry::storage<md::components::DidResolvePendingMaterial>(this);
    BOOL v6 = this;
    if (this[29])
    {
      unint64_t v7 = (void *)this[28];
      if (v7) {
        break;
      }
    }
LABEL_10:
    v6[8] = v6[7];
    v6[11] = v6[10];
LABEL_11:
    int8x8_t v2 = **(int8x8_t **)&v2;
    if (!*(void *)&v2) {
      goto LABEL_2;
    }
  }
  int8x8_t v8 = this[31];
  int8x8_t v9 = this[7];
  uint64_t v10 = (uint64_t)(*(void *)&this[8] - *(void *)&v9) >> 3;
  while (1)
  {
    v13[0] = v9;
    v13[1] = v10;
    int8x8_t v12 = v8;
    uint64_t v11 = v7[6];
    if (!v11) {
      break;
    }
    this = (int8x8_t *)(*(uint64_t (**)(uint64_t, int8x8_t *, void *))(*(void *)v11 + 48))(v11, &v12, v13);
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_10;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (int8x8_t *)_ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__1NS_9allocatorISN_EEFvvEEclEv();
}

void _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MaterialLogic", "", v5, 2u);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int8x8_t v9 = *(void **)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = a1 + 2;
  uint64_t v14 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = a2;
  *((void *)v14 + 2) = *(void *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v15 = (float)(unint64_t)(a1[3] + 1);
  float v16 = *((float *)a1 + 8);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v7 = a1[1];
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= a2) {
            unint64_t v3 = a2 % v7;
          }
          else {
            unint64_t v3 = a2;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & a2;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = operator new(8 * prime);
    unint64_t v22 = (void *)*a1;
    *a1 = (uint64_t)v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v23++) = 0;
    while (prime != v23);
    uint64_t v24 = (void *)*v13;
    if (!*v13)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v25 = v24[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*a1 + 8 * v27) = v13;
      for (i = (void *)*v24; *v24; i = (void *)*v24)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          uint64_t v24 = i;
        }
        else if (*(void *)(*a1 + 8 * v29))
        {
          *uint64_t v24 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*a1 + v30);
          **(void **)(*a1 + v30) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v29) = v24;
          uint64_t v24 = i;
          size_t v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*a1 + 8 * v25) = v13;
    uint64_t v34 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*a1 + 8 * v36))
        {
          *(void *)(*a1 + 8 * v36) = v24;
          goto LABEL_63;
        }
        *uint64_t v24 = *v34;
        uint64_t v35 = 8 * v36;
        *uint64_t v34 = **(void **)(*a1 + v35);
        **(void **)(*a1 + v35) = v34;
        uint64_t v34 = v24;
      }
      size_t v36 = v25;
LABEL_63:
      uint64_t v24 = v34;
      uint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v37 = *a1;
  uint64_t v38 = *(void **)(*a1 + 8 * v3);
  if (v38)
  {
    *(void *)uint64_t v14 = *v38;
LABEL_80:
    void *v38 = v14;
    goto LABEL_81;
  }
  *(void *)uint64_t v14 = *v13;
  *unint64_t v13 = v14;
  *(void *)(v37 + 8 * v3) = v13;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    uint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
}

void sub_1A1982EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::ClientState>(int8x8_t *a1)
{
  unint64_t v10 = 0xA4F4C87C991FC6E0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA4F4C87C991FC6E0;
    if (*(void *)&v1 <= 0xA4F4C87C991FC6E0) {
      unint64_t v3 = 0xA4F4C87C991FC6E0 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA4F4C87C991FC6E0;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA4F4C87C991FC6E0)
      {
        if (v5[2] == 0xA4F4C87C991FC6E0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA4F4C87C991FC6E0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA4F4C87C991FC6E0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A198311C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::DidResolvePendingMaterial>(int8x8_t *a1)
{
  uint64_t v10 = 0x21F9ABBDA81BEAF3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x21F9ABBDA81BEAF3;
    if (*(void *)&v1 <= 0x21F9ABBDA81BEAF3uLL) {
      uint64_t v3 = 0x21F9ABBDA81BEAF3uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x21F9ABBDA81BEAF3;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x21F9ABBDA81BEAF3)
      {
        if (v5[2] == 0x21F9ABBDA81BEAF3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x21F9ABBDA81BEAF3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x21F9ABBDA81BEAF3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A198338C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::RegistryManager::getRegistryByIdentifier(md::RegistryManager *this, unsigned int a2)
{
  uint64_t v5 = (unsigned char *)*((void *)this + 48);
  os_signpost_id_t v4 = (unsigned char *)*((void *)this + 49);
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  uint64_t v10 = (unsigned char *)*((void *)this + 51);
  int8x8_t v9 = (unsigned char *)*((void *)this + 52);
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      abort();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    unint64_t v13 = &v12[8 * (v11 >> 3)];
    memcpy(v12, v10, v11);
  }
  float v15 = (unsigned char *)*((void *)this + 60);
  uint64_t v14 = (unsigned char *)*((void *)this + 61);
  int64_t v16 = v14 - v15;
  if (v14 == v15)
  {
    unint64_t v18 = 0;
    BOOL v17 = 0;
    int64_t v19 = v8 - v7;
    if (v8 == v7) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v16 < 0) {
      abort();
    }
    BOOL v17 = (char *)operator new(v14 - v15);
    unint64_t v18 = &v17[8 * (v16 >> 3)];
    memcpy(v17, v15, v16);
    int64_t v19 = v8 - v7;
    if (v8 == v7) {
      goto LABEL_22;
    }
  }
  if (v19 < 0) {
    goto LABEL_54;
  }
  int8x8_t v20 = (char *)operator new(v19);
  memcpy(v20, v7, v19);
  uint64_t v21 = v20;
  unint64_t v22 = v19 >> 3;
  do
  {
    unint64_t v23 = v22 >> 1;
    uint64_t v24 = &v21[8 * (v22 >> 1)];
    uint64_t v26 = *(void *)v24;
    size_t v25 = v24 + 8;
    v22 += ~(v22 >> 1);
    if (*(unsigned __int16 *)(v26 + 40) < a2) {
      uint64_t v21 = v25;
    }
    else {
      unint64_t v22 = v23;
    }
  }
  while (v22);
  if (v21 == &v20[8 * (v19 >> 3)])
  {
    operator delete(v20);
    int64_t v29 = v13 - v12;
    if (v13 == v12) {
      goto LABEL_33;
    }
    goto LABEL_25;
  }
  uint64_t v27 = *(void *)v21;
  int v28 = *(unsigned __int16 *)(*(void *)v21 + 40);
  operator delete(v20);
  if (v28 == a2) {
    goto LABEL_47;
  }
LABEL_22:
  int64_t v29 = v13 - v12;
  if (v13 == v12) {
    goto LABEL_33;
  }
LABEL_25:
  if (v29 < 0) {
    goto LABEL_54;
  }
  uint64_t v30 = (char *)operator new(v29);
  memcpy(v30, v12, v29);
  unint64_t v31 = v30;
  unint64_t v32 = v29 >> 3;
  do
  {
    unint64_t v33 = v32 >> 1;
    uint64_t v34 = &v31[8 * (v32 >> 1)];
    uint64_t v36 = *(void *)v34;
    uint64_t v35 = v34 + 8;
    v32 += ~(v32 >> 1);
    if (*(unsigned __int16 *)(v36 + 40) < a2) {
      unint64_t v31 = v35;
    }
    else {
      unint64_t v32 = v33;
    }
  }
  while (v32);
  if (v31 != &v30[8 * (v29 >> 3)])
  {
    uint64_t v27 = *(void *)v31;
    int v37 = *(unsigned __int16 *)(*(void *)v31 + 40);
    operator delete(v30);
    if (v37 == a2) {
      goto LABEL_47;
    }
LABEL_33:
    int64_t v38 = v18 - v17;
    if (v18 == v17) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  operator delete(v30);
  int64_t v38 = v18 - v17;
  if (v18 == v17) {
    goto LABEL_46;
  }
LABEL_36:
  if (v38 < 0) {
LABEL_54:
  }
    abort();
  unint64_t v39 = (char *)operator new(v38);
  memcpy(v39, v17, v38);
  uint64_t v40 = v39;
  unint64_t v41 = v38 >> 3;
  do
  {
    unint64_t v42 = v41 >> 1;
    unint64_t v43 = &v40[8 * (v41 >> 1)];
    uint64_t v45 = *(void *)v43;
    uint64_t v44 = v43 + 8;
    v41 += ~(v41 >> 1);
    if (*(unsigned __int16 *)(v45 + 40) < a2) {
      uint64_t v40 = v44;
    }
    else {
      unint64_t v41 = v42;
    }
  }
  while (v41);
  if (v40 == &v39[8 * (v38 >> 3)])
  {
    operator delete(v39);
    goto LABEL_46;
  }
  uint64_t v27 = *(void *)v40;
  int v46 = *(unsigned __int16 *)(*(void *)v40 + 40);
  operator delete(v39);
  if (v46 != a2) {
LABEL_46:
  }
    uint64_t v27 = 0;
LABEL_47:
  if (v17) {
    operator delete(v17);
  }
  if (v12) {
    operator delete(v12);
  }
  if (v7) {
    operator delete(v7);
  }
  return v27;
}

void sub_1A198372C(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    operator delete(v3);
    if (!v2)
    {
LABEL_3:
      if (v1)
      {
LABEL_8:
        operator delete(v1);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  operator delete(v2);
  if (v1) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1A1983774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  while (1)
  {
    uint64_t v12 = (void *)*(v10 - 3);
    v10 -= 3;
    int64_t v11 = v12;
    if (v12)
    {
      *(v9 - 2) = (uint64_t)v11;
      operator delete(v11);
    }
    int8x8_t v9 = v10;
    if (v10 == &a9) {
      JUMPOUT(0x1A198375CLL);
    }
  }
}

void *std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(void *result, int8x8_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  if (v3)
  {
    os_signpost_id_t v4 = *a2;
    uint64_t v5 = *(unint64_t **)a3;
    int64_t v6 = (void *)result[1];
    uint64_t v7 = 8 * v3;
    do
    {
      unint64_t v8 = *v5;
      uint64_t result = (void *)gdc::Registry::storage<md::components::Material>(v4);
      uint64_t v9 = result[4];
      if (v8 >> 39 < (result[5] - v9) >> 3)
      {
        uint64_t v10 = *(void *)(v9 + 8 * (v8 >> 39));
        if (v10)
        {
          unint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v8) & 0x7F));
          uint64_t v13 = result[7];
          uint64_t v12 = result[8];
          if (v11 < (v12 - v13) >> 3)
          {
            uint64_t v14 = v13 + 8 * v11;
            if (v14 != v12 && *(_DWORD *)(v14 + 4) == HIDWORD(v8))
            {
              unint64_t v17 = v8;
              uint64_t v16 = v6[11];
              if (!v16
                || (uint64_t v18 = v6[7],
                    unint64_t v19 = v8,
                    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t *))(*(void *)v16 + 48))(v16, &v18, &v19), result))
              {
                uint64_t result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v6 + 1, (uint64_t)&v17);
              }
            }
          }
        }
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::operator()(uint64_t a1, int8x8_t **a2, unint64_t *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  unint64_t v5 = HIDWORD(*a3);
  int64_t v6 = (void *)gdc::Registry::storage<md::components::MeshInstance>(*a2);
  unint64_t v7 = v4 >> 39;
  uint64_t v8 = v6[4];
  if (v4 >> 39 >= (v6[5] - v8) >> 3
    || (uint64_t v9 = *(void *)(v8 + 8 * v7)) == 0
    || (unint64_t v10 = *(unsigned __int16 *)(v9 + 2 * (HIDWORD(v4) & 0x7F)), v12 = v6[7], v11 = v6[8], v10 >= (v11 - v12) >> 3)
    || ((uint64_t v13 = v12 + 8 * v10, v13 != v11) ? (v14 = *(_DWORD *)(v13 + 4) == v5) : (v14 = 0), !v14))
  {
    float v15 = (void *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v3);
    uint64_t v16 = v15[4];
    if (v7 < (v15[5] - v16) >> 3 && (uint64_t v17 = *(void *)(v16 + 8 * v7)) != 0)
    {
      unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v4) & 0x7F));
      uint64_t v20 = v15[7];
      uint64_t v19 = v15[8];
      if (v18 < (v19 - v20) >> 3)
      {
        uint64_t v21 = v20 + 8 * v18;
        if (*(_DWORD *)(v21 + 4) != v5) {
          uint64_t v21 = v15[8];
        }
        return v21 != v19;
      }
    }
    else
    {
      uint64_t v19 = v15[8];
    }
    uint64_t v21 = v19;
    return v21 != v19;
  }
  return 1;
}

uint64_t gdc::ComponentStorageWrapper<md::components::PendingMaterial>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v21, v22);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return md::DaVinciGroundRenderResources::buildShadowPlane(v19);
}

void md::DaVinciGroundRenderResources::buildShadowPlane(md::DaVinciGroundRenderResources *this)
{
  v115 = 0;
  unsigned __int8 v116 = 0;
  uint64_t v117 = 0;
  memset(v114, 0, sizeof(v114));
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  md::GeometryLogic::createXYPlane(&v115, v114, (unint64_t *)&v111, 0.5, 0.5);
  uint64_t v3 = (char *)v111;
  uint8x8_t v2 = v112;
  uint64_t v5 = v115;
  uint64_t v4 = v116;
  uint64_t v6 = operator new(0xA8uLL);
  uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EF5895C0;
  *((void *)this + 339) = ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((ggl::DaVinci::TexturedCompressedMesh *)(v6 + 3), "/DVGround/ShadowPlane");
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 340);
  *((void *)this + 340) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = **(void **)(*((void *)this + 339) + 64);
  unint64_t v10 = *(void *)(v9 + 8) * v7;
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = *(void *)(v9 + 80) - v11;
  if (v10 != v12)
  {
    if (v10 <= v12)
    {
      if (v10 < v12) {
        *(void *)(v9 + 80) = v11 + v10;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v9 + 72, v10 - v12);
    }
    uint64_t v13 = *(std::__shared_weak_count **)(v9 + 32);
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    *(void *)(v9 + 120) = 0;
    *(_DWORD *)(v9 + 112) = 0;
    uint64_t v14 = *(void *)(v9 + 80) - *(void *)(v9 + 72);
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 48) = v14;
    *(void *)(v9 + 56) = 0;
    *(void *)(v9 + 64) = v14;
  }
  uint64_t v15 = operator new(0xE0uLL);
  v15[1] = 0;
  v15[2] = 0;
  *uint64_t v15 = &unk_1EF583FC8;
  uint64_t v16 = ggl::BufferData::BufferData((uint64_t)(v15 + 3), qword_1E9558C10, 3, 0, 6, v7);
  v15[3] = &unk_1EF55B9D0;
  *((void *)this + 343) = v16;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 344);
  *((void *)this + 344) = v15;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = operator new(0xE0uLL);
  v18[1] = 0;
  v18[2] = 0;
  *uint64_t v18 = &unk_1EF584000;
  uint64_t v19 = ggl::BufferData::BufferData((uint64_t)(v18 + 3), qword_1E9558BD0, 3, 0, 6, v7);
  v18[3] = &unk_1EF55B9F0;
  *((void *)this + 341) = v19;
  unint64_t v20 = (std::__shared_weak_count *)*((void *)this + 342);
  *((void *)this + 342) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = **(void **)(*((void *)this + 339) + 64);
  uint64_t v22 = *(void *)(v21 + 8) * v7;
  *(void *)&long long v23 = 0;
  *(void *)&long long v24 = 0;
  if (v22) {
    uint64_t v25 = *(void *)(v21 + 72);
  }
  else {
    uint64_t v25 = 0;
  }
  *((void *)&v24 + 1) = **(void **)(*((void *)this + 339) + 64);
  long long v108 = v24;
  unint64_t v109 = v22;
  uint64_t v110 = v25;
  uint64_t v26 = *((void *)this + 343);
  uint64_t v27 = *(void *)(v26 + 8) * v7;
  if (v27) {
    int v28 = *(__int16 **)(v26 + 72);
  }
  else {
    int v28 = 0;
  }
  *((void *)&v23 + 1) = *((void *)this + 343);
  long long v105 = v23;
  unint64_t v106 = v27;
  uint64_t v107 = v28;
  uint64_t v29 = *((void *)this + 341);
  *(void *)&long long v30 = 0;
  if (*(void *)(v29 + 8) * v7) {
    unint64_t v31 = *(char **)(v29 + 72);
  }
  else {
    unint64_t v31 = 0;
  }
  *((void *)&v30 + 1) = *((void *)this + 341);
  long long v102 = v30;
  unint64_t v103 = *(void *)(v29 + 8) * v7;
  uint64_t v104 = v31;
  unint64_t v32 = v115;
  unint64_t v33 = v116;
  if (v115 != v116)
  {
    unint64_t v34 = v114[0];
    unint64_t v35 = v116 - v115 - 12;
    if (v35 > 0x53)
    {
      uint64_t v36 = 0;
      unint64_t v37 = v35 / 0xC;
      uint64_t v38 = 8 * v37 + 8;
      unint64_t v39 = v25 + v38;
      uint64_t v40 = 4 * v37 + 4;
      unint64_t v41 = (char *)v28 + v40;
      BOOL v43 = v25 + 4 < v114[0] + v38 && v114[0] < v39;
      uint64_t v44 = (__int16 *)&v31[v40];
      BOOL v46 = v31 < v41 && v28 < v44;
      BOOL v47 = (unint64_t)v115 >= v39 || v25 + 4 >= (unint64_t)&v115[12 * v37 + 12];
      if (v47 && !v43 && !v46)
      {
        unint64_t v48 = v37 + 1;
        uint64_t v36 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v49 = v25 + 16;
        float32x4_t v50 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
        *(void *)&long long v51 = 0x3800380038003800;
        *((void *)&v51 + 1) = 0x3800380038003800;
        uint64_t v52 = v115;
        int64_t v53 = v31;
        uint64_t v54 = (const float *)v114[0];
        uint64_t v55 = v28;
        uint64_t v56 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          int32x4_t v58 = *((int32x4_t *)v52 + 1);
          long long v57 = *((_OWORD *)v52 + 2);
          long long v59 = *(_OWORD *)v52;
          v52 += 48;
          v60.i64[0] = __PAIR64__(HIDWORD(v59), v59);
          float32x4_t v61 = (float32x4_t)vrev64q_s32(v58);
          v61.i32[0] = DWORD1(v59);
          *(_DWORD *)(v49 - 12) = DWORD2(v59);
          v60.i64[1] = __PAIR64__(DWORD1(v57), v58.u32[2]);
          v61.i32[3] = DWORD2(v57);
          *(int16x4_t *)v60.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v60, v50)));
          *(int16x4_t *)v61.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v61, v50)));
          *(_WORD *)(v49 - 8) = v60.i16[1];
          *(_WORD *)(v49 - 16) = v60.i16[0];
          *(_WORD *)uint64_t v49 = v60.i16[2];
          *(_WORD *)(v49 + 8) = v60.i16[3];
          *(_WORD *)(v49 - 6) = v61.i16[1];
          *(_WORD *)(v49 + 2) = v61.i16[2];
          *(_WORD *)(v49 - 14) = v61.i16[0];
          *(_WORD *)(v49 + 10) = v61.i16[3];
          *(_DWORD *)(v49 - 4) = v58.i32[1];
          *(_DWORD *)(v49 + 4) = v57;
          *(_DWORD *)(v49 + 12) = HIDWORD(v57);
          *(_OWORD *)int64_t v53 = v51;
          v53 += 16;
          float32x4x2_t v119 = vld2q_f32(v54);
          v54 += 8;
          *(float16x4_t *)v60.f32 = vcvt_f16_f32(v119.val[0]);
          *(float16x4_t *)v61.f32 = vcvt_f16_f32(v119.val[1]);
          vst2_s16(v55, (int16x4x2_t)v60);
          v55 += 8;
          v49 += 32;
          v56 -= 4;
        }
        while (v56);
        if (v48 == v36) {
          goto LABEL_56;
        }
        v32 += 12 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t v62 = (4 * v36) | 2;
    uint64_t v63 = (__int16 *)((char *)v28 + v62);
    uint64_t v64 = 8 * v36;
    uint64_t v65 = v64 + v25 + 2;
    long long v66 = (int *)(v64 + v34 + 4);
    long long v67 = &v31[v62];
    do
    {
      float v68 = *((float *)v32 + 1);
      *(_WORD *)(v65 - 2) = (int)(float)(*(float *)v32 * 32767.0);
      *(_WORD *)uint64_t v65 = (int)(float)(v68 * 32767.0);
      *(_DWORD *)(v65 + 2) = *((_DWORD *)v32 + 2);
      *(_DWORD *)(v67 - 2) = 939538432;
      _S0 = *(v66 - 1);
      _S1 = *v66;
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *(v63 - 1) = _S0;
      *uint64_t v63 = _S1;
      v63 += 2;
      v65 += 8;
      v66 += 2;
      v67 += 4;
      v32 += 12;
    }
    while (v32 != v33);
  }
LABEL_56:
  uint64_t v74 = (std::__shared_weak_count *)operator new(0xF8uLL);
  uint64_t v75 = v2 - v3;
  v74->__shared_owners_ = 0;
  v74->__shared_weak_owners_ = 0;
  v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
  uint64_t v76 = ggl::BufferData::BufferData((uint64_t)&v74[1], 2, 1, 0, 6, (v2 - v3) >> 2);
  LODWORD(v74[10].__vftable) = 0;
  v74[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
  v74[1].__shared_owners_ = 2;
  v74[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
  v74[9].__shared_weak_owners_ = (uint64_t)"/DVGround/ShadowPlane/IndexData";
  if (v2 == v3) {
    unint64_t v77 = 0;
  }
  else {
    unint64_t v77 = v74[4].__vftable;
  }
  uint64_t v78 = v111;
  unint64_t v79 = (int16x8_t *)v112;
  if (v111 != (int16x8_t *)v112)
  {
    unint64_t v80 = v112 - (char *)v111 - 4;
    if (v80 <= 0x3B)
    {
      uint64_t v81 = 0;
      goto LABEL_66;
    }
    uint64_t v82 = (v80 >> 2) + 1;
    uint64_t v81 = v82 & 0x7FFFFFFFFFFFFFF0;
    p_on_zero_shared = (int16x8_t *)&v77->__on_zero_shared;
    uint64_t v84 = v111 + 2;
    uint64_t v85 = v82 & 0x7FFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v87 = v84[-2];
      int16x8_t v86 = v84[-1];
      int16x8_t v89 = *v84;
      int16x8_t v88 = v84[1];
      v84 += 4;
      p_on_zero_shared[-1] = vuzp1q_s16(v87, v86);
      int16x8_t *p_on_zero_shared = vuzp1q_s16(v89, v88);
      p_on_zero_shared += 2;
      v85 -= 16;
    }
    while (v85);
    if (v82 != v81)
    {
      uint64_t v78 = (int16x8_t *)((char *)v78 + 4 * (v82 & 0x7FFFFFFFFFFFFFF0));
LABEL_66:
      BOOL v90 = (_WORD *)((char *)v77 + 2 * v81);
      do
      {
        int v91 = v78->i32[0];
        uint64_t v78 = (int16x8_t *)((char *)v78 + 4);
        *v90++ = v91;
      }
      while (v78 != v79);
    }
  }
  uint64_t v92 = *((void *)this + 339);
  atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v93 = *(std::__shared_weak_count **)(v92 + 104);
  *(void *)(v92 + 96) = v76;
  *(void *)(v92 + 104) = v74;
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
  }
  if (v77 && v2 != v3)
  {
    uint64_t shared_weak_owners = v75 >> 1;
    if (v74[3].__shared_weak_owners_ > (unint64_t)(v75 >> 1)) {
      uint64_t shared_weak_owners = v74[3].__shared_weak_owners_;
    }
    v74[3].__shared_owners_ = 0;
    v74[3].__shared_weak_owners_ = shared_weak_owners;
  }
  if (!atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  if (v104 && v103)
  {
    if ((void)v102 && *(unsigned char *)(*((void *)&v102 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v102 + 64))();
    }
    uint64_t v96 = *(void *)(*((void *)&v102 + 1) + 56);
    unint64_t v95 = *(void *)(*((void *)&v102 + 1) + 64);
    if (v95 == v96) {
      uint64_t v96 = *(void *)(*((void *)&v102 + 1) + 80) - *(void *)(*((void *)&v102 + 1) + 72);
    }
    if (v96) {
      uint64_t v96 = 0;
    }
    if (v95 <= v103) {
      unint64_t v95 = v103;
    }
    if (v95 == v96) {
      unint64_t v95 = v96 + *(void *)(*((void *)&v102 + 1) + 80) - *(void *)(*((void *)&v102 + 1) + 72);
    }
    *(void *)(*((void *)&v102 + 1) + 56) = v96;
    *(void *)(*((void *)&v102 + 1) + 64) = v95;
  }
  if (v107 && v106)
  {
    if ((void)v105 && *(unsigned char *)(*((void *)&v105 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v105 + 64))();
    }
    uint64_t v98 = *(void *)(*((void *)&v105 + 1) + 56);
    unint64_t v97 = *(void *)(*((void *)&v105 + 1) + 64);
    if (v97 == v98) {
      uint64_t v98 = *(void *)(*((void *)&v105 + 1) + 80) - *(void *)(*((void *)&v105 + 1) + 72);
    }
    if (v98) {
      uint64_t v98 = 0;
    }
    if (v97 <= v106) {
      unint64_t v97 = v106;
    }
    if (v97 == v98) {
      unint64_t v97 = v98 + *(void *)(*((void *)&v105 + 1) + 80) - *(void *)(*((void *)&v105 + 1) + 72);
    }
    *(void *)(*((void *)&v105 + 1) + 56) = v98;
    *(void *)(*((void *)&v105 + 1) + 64) = v97;
  }
  if (v110 && v109)
  {
    if ((void)v108 && *(unsigned char *)(*((void *)&v108 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v108 + 64))();
    }
    uint64_t v100 = *(void *)(*((void *)&v108 + 1) + 56);
    unint64_t v99 = *(void *)(*((void *)&v108 + 1) + 64);
    if (v99 == v100) {
      uint64_t v100 = *(void *)(*((void *)&v108 + 1) + 80) - *(void *)(*((void *)&v108 + 1) + 72);
    }
    if (v100) {
      uint64_t v100 = 0;
    }
    if (v99 <= v109) {
      unint64_t v99 = v109;
    }
    if (v99 == v100) {
      unint64_t v99 = v100 + *(void *)(*((void *)&v108 + 1) + 80) - *(void *)(*((void *)&v108 + 1) + 72);
    }
    *(void *)(*((void *)&v108 + 1) + 56) = v100;
    *(void *)(*((void *)&v108 + 1) + 64) = v99;
  }
  if (v111) {
    operator delete(v111);
  }
  if (v114[0]) {
    operator delete((void *)v114[0]);
  }
  uint64_t v101 = v115;
  if (v115)
  {
    operator delete(v101);
  }
}

void sub_1A19844BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a15);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  long long v23 = *(void **)(v21 - 136);
  if (v23)
  {
    operator delete(v23);
    long long v24 = *(void **)(v21 - 112);
    if (!v24)
    {
LABEL_3:
      uint64_t v25 = *(void **)(v21 - 88);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    long long v24 = *(void **)(v21 - 112);
    if (!v24) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  uint64_t v25 = *(void **)(v21 - 88);
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v25);
  _Unwind_Resume(a1);
}

ggl::DaVinci::TexturedCompressedMesh *ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh(ggl::DaVinci::TexturedCompressedMesh *this, const char *a2)
{
  {
    {
      ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedCompressedVboReflection;
    }
    ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::attributesReflection(void)::r;
    unk_1E958E280 = 1;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)this = &unk_1EF5606B0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1EF5606D0;
  *((void *)this + 3) = 0;
  *((void *)this + 7) = &ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::typedReflection(void)::r;
  *((void *)this + 8) = 0;
  uint64_t v4 = (char *)this + 64;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  {
    operator new();
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = v5;
  {
    operator new();
  }
  *((void *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *(void *)this = &unk_1EF562A20;
  *((void *)this + 2) = &unk_1EF562A40;
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *(void *)(*((void *)this + 7) + 8);
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = (v8 - v6) >> 4;
  unint64_t v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      for (uint64_t i = v6 + 16 * v7; v8 != i; v8 -= 16)
      {
        unint64_t v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *((void *)this + 9) = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v10);
  }
  *(void *)this = &unk_1EF561068;
  *((void *)this + 2) = &unk_1EF561088;
  if (a2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = "/VertexData";
  }
  {
    operator new();
  }
  uint64_t v14 = ggl::Allocator::instance(void)::alloc;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v15 = &unk_1EF585110;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = &unk_1EF55A1F0;
  *(void *)(v15 + 40) = 8;
  *(_DWORD *)(v15 + 48) = 6;
  long long v16 = 0uLL;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(void *)(v15 + 120) = 0;
  {
    long long v16 = 0uLL;
    if (v20) {
      operator new();
    }
  }
  *(void *)(v15 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v15 + 136) = 0;
  *(_OWORD *)(v15 + 200) = v16;
  *(_OWORD *)(v15 + 184) = v16;
  *(_OWORD *)(v15 + 168) = v16;
  *(void *)(v15 + 216) = 0;
  *(void *)(v15 + 224) = -1;
  *(_OWORD *)(v15 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v15 + 144) = 0;
  *(void *)(v15 + 240) = v13;
  *(void *)(v15 + 248) = &ggl::DaVinci::texturedCompressedVboReflection;
  *(void *)(v15 + 32) = &unk_1EF55CDC8;
  *(void *)(v15 + 232) = &unk_1EF55CDE8;
  uint64_t v17 = *(void **)v4;
  uint64_t v18 = *(std::__shared_weak_count **)(*(void *)v4 + 8);
  *uint64_t v17 = v15 + 32;
  v17[1] = v15;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return this;
}

void md::GeometryLogic::createXYPlane(char **a1, unint64_t *a2, unint64_t *a3, float a4, float a5)
{
  v190[1] = *MEMORY[0x1E4F143B8];
  *(float *)__src = a4 + -0.5;
  *(float *)&__src[4] = a5 + -0.5;
  *(_DWORD *)&__src[8] = 0;
  *(float *)&__src[12] = a4 + 0.5;
  *(float *)&__src[16] = a5 + -0.5;
  *(_DWORD *)&__src[20] = 0;
  *(float *)&__src[24] = a4 + -0.5;
  *(float *)&__src[28] = a5 + 0.5;
  int v187 = 0;
  *(float *)&uint64_t v188 = a4 + 0.5;
  *((float *)&v188 + 1) = a5 + 0.5;
  int v189 = 0;
  uint64_t v8 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  int64_t v10 = v9 - (void)*a1;
  uint64_t v11 = v10 / 12;
  unint64_t v12 = (unint64_t)&(*a1)[12 * (v10 / 12)];
  uint64_t v13 = a1[2];
  if ((uint64_t)&v13[-v9] >= 48)
  {
    uint64_t v18 = v9 - v12;
    if ((uint64_t)(v9 - v12) > 47)
    {
      long long v23 = v190;
      unint64_t v21 = (unint64_t)a1[1];
    }
    else
    {
      uint64_t v19 = &__src[12 * (v18 / 12)];
      uint64_t v20 = v18 / 12 - 4;
      unint64_t v21 = (unint64_t)a1[1];
      do
      {
        uint64_t v22 = *(void *)v19;
        *(_DWORD *)(v21 + 8) = *((_DWORD *)v19 + 2);
        *(void *)unint64_t v21 = v22;
        v21 += 12;
        v19 += 12;
        BOOL v31 = __CFADD__(v20++, 1);
      }
      while (!v31);
      a1[1] = (char *)v21;
      if (v18 < 1) {
        goto LABEL_55;
      }
      long long v23 = &__src[12 * (v18 / 12)];
    }
    unint64_t v24 = v21 - (v12 + 48);
    unint64_t v25 = v21 - 48;
    unint64_t v26 = v21;
    if (v21 - 48 < v9)
    {
      unint64_t v27 = v21 - 48;
      unint64_t v26 = v21;
      do
      {
        uint64_t v28 = *(void *)v27;
        *(_DWORD *)(v26 + 8) = *(_DWORD *)(v27 + 8);
        *(void *)unint64_t v26 = v28;
        v26 += 12;
        v27 += 12;
      }
      while (v27 < v9);
    }
    a1[1] = (char *)v26;
    if (v21 != v12 + 48)
    {
      if (v24 - 12 < 0xB4
        || ((unint64_t v29 = (v24 - 12) / 0xC,
             unint64_t v30 = (unint64_t)&v8[v24 + 12 * v11 - 12 * v29 - 12],
             v21 - 12 * v29 - 12 < v25)
          ? (BOOL v31 = v30 >= v21)
          : (BOOL v31 = 1),
            !v31))
      {
        unint64_t v33 = v21;
LABEL_33:
        unint64_t v37 = (_DWORD *)(v33 - 4);
        do
        {
          int v38 = *(_DWORD *)(v25 - 12);
          v25 -= 12;
          *(v37 - 2) = v38;
          *(v37 - 1) = *(_DWORD *)(v25 + 4);
          _DWORD *v37 = *(_DWORD *)(v25 + 8);
          v37 -= 3;
        }
        while (v25 != v12);
        goto LABEL_35;
      }
      unint64_t v32 = v29 + 1;
      unint64_t v33 = v21 - 12 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v34 = (const float *)(v21 - 96);
      unint64_t v35 = (float *)(v21 - 48);
      uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        float32x4x3_t v192 = vld3q_f32(v34);
        vst3q_f32(v35, v192);
        v35 -= 12;
        v34 -= 12;
        v36 -= 4;
      }
      while (v36);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v25 -= 12 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        goto LABEL_33;
      }
    }
LABEL_35:
    unint64_t v39 = __src;
    if (v23 == __src) {
      goto LABEL_55;
    }
    unint64_t v40 = v23 - __src - 12;
    if (v40 >= 0xB4)
    {
      unint64_t v51 = v40 / 0xC;
      unint64_t v39 = __src;
      if (v12 >= (unint64_t)&__src[12 * v51 + 12] || &v8[12 * v11 + 12 + 12 * v51] <= __src)
      {
        unint64_t v52 = v51 + 1;
        uint64_t v53 = (v51 + 1) & 0x3FFFFFFFFFFFFFF8;
        unint64_t v41 = (_DWORD *)(v12 + 12 * v53);
        uint64_t v54 = __src;
        uint64_t v55 = v53;
        do
        {
          long long v56 = v54[1];
          long long v58 = v54[4];
          long long v57 = v54[5];
          long long v59 = v54[2];
          long long v60 = v54[3];
          *(_OWORD *)unint64_t v12 = *v54;
          *(_OWORD *)(v12 + 16) = v56;
          *(_OWORD *)(v12 + 32) = v59;
          *(_OWORD *)(v12 + 48) = v60;
          v54 += 6;
          *(_OWORD *)(v12 + 64) = v58;
          *(_OWORD *)(v12 + 80) = v57;
          v12 += 96;
          v55 -= 8;
        }
        while (v55);
        if (v52 == v53) {
          goto LABEL_55;
        }
        unint64_t v39 = &__src[12 * v53];
      }
      else
      {
        unint64_t v41 = (_DWORD *)v12;
      }
    }
    else
    {
      unint64_t v41 = (_DWORD *)v12;
    }
    do
    {
      _DWORD *v41 = *v39;
      v41[1] = v39[1];
      v41[2] = v39[2];
      v39 += 3;
      v41 += 3;
    }
    while (v39 != (_DWORD *)v23);
    goto LABEL_55;
  }
  unint64_t v14 = v11 + 4;
  if ((unint64_t)(v11 + 4) > 0x1555555555555555) {
    abort();
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v8) >> 2);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v16 = 0x1555555555555555;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 > 0x1555555555555555) {
      goto LABEL_172;
    }
    uint64_t v17 = (char *)operator new(12 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  unint64_t v42 = &v17[12 * v11];
  *(void *)unint64_t v42 = *(void *)__src;
  *((_DWORD *)v42 + 2) = *(_DWORD *)&__src[8];
  *(void *)(v42 + 12) = *(void *)&__src[12];
  *((_DWORD *)v42 + 5) = *(_DWORD *)&__src[20];
  *((void *)v42 + 3) = *(void *)&__src[24];
  *((_DWORD *)v42 + 8) = v187;
  *((_DWORD *)v42 + 11) = v189;
  BOOL v43 = v42 + 48;
  *(void *)(v42 + 36) = v188;
  if ((unint64_t)(v10 + 11) >= 0x17)
  {
    uint64_t v44 = 12 * v11;
    uint64_t v45 = v8 - 12;
    do
    {
      BOOL v46 = &v17[v44];
      uint64_t v47 = *(void *)&v45[v44];
      *((_DWORD *)v46 - 1) = *(_DWORD *)&v45[v44 + 8];
      *(void *)(v46 - 12) = v47;
      v44 -= 12;
    }
    while (v44);
    unint64_t v42 = v17;
    unint64_t v9 = (unint64_t)a1[1];
  }
  for (uint64_t i = &v17[12 * v16]; v12 != v9; v12 += 12)
  {
    uint64_t v49 = *(void *)v12;
    *((_DWORD *)v43 + 2) = *(_DWORD *)(v12 + 8);
    *(void *)BOOL v43 = v49;
    v43 += 12;
  }
  float32x4_t v50 = *a1;
  *a1 = v42;
  a1[1] = v43;
  a1[2] = i;
  if (v50) {
    operator delete(v50);
  }
LABEL_55:
  *(_OWORD *)__src = xmmword_1A28FCE90;
  *(_OWORD *)&__src[16] = xmmword_1A28FD460;
  unint64_t v61 = *a2;
  unint64_t v62 = a2[1];
  uint64_t v63 = v62 - *a2;
  uint64_t v64 = v63 >> 3;
  uint64_t v65 = (char *)(*a2 + (v63 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v66 = a2[2];
  if ((uint64_t)(v66 - v62) >= 32)
  {
    uint64_t v71 = (long long *)&v187;
    uint64_t v72 = v62 - (void)v65;
    if ((uint64_t)(v62 - (void)v65) > 31)
    {
      uint64_t v73 = &v187;
      uint64_t v76 = (char *)a2[1];
      goto LABEL_95;
    }
    uint64_t v73 = (int *)&__src[v72 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v74 = &__src[24] - &__src[v72];
    if (v74 < 0x38)
    {
      uint64_t v75 = (int *)&__src[v72 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v76 = (char *)a2[1];
    }
    else
    {
      uint64_t v75 = (int *)&__src[v72 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v76 = (char *)a2[1];
      if ((unint64_t)(v65 - __src) >= 0x20)
      {
        uint64_t v77 = (v74 >> 3) + 1;
        uint64_t v78 = 2 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v75 = &v73[v78];
        unint64_t v79 = (_OWORD *)(v62 + 16);
        unint64_t v80 = (long long *)&__src[8 * (v72 >> 3) + 16];
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v80;
          *(v79 - 1) = *(v80 - 1);
          *unint64_t v79 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        uint64_t v76 = (char *)(v62 + v78 * 4);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_94:
          a2[1] = (unint64_t)v76;
          if (v72 < 1) {
            goto LABEL_123;
          }
LABEL_95:
          uint64_t v107 = v76 - (v65 + 32);
          long long v108 = v76 - 32;
          unint64_t v109 = v76;
          if ((unint64_t)(v76 - 32) < v62)
          {
            unint64_t v110 = (v63 & 0xFFFFFFFFFFFFFFF8) + v107;
            unint64_t v111 = v110 + v61 + 8;
            if (v62 > v111) {
              unint64_t v111 = v62;
            }
            unint64_t v112 = v111 + ~v61 - v110;
            unint64_t v113 = (unint64_t)&v76[-v110 - v61];
            BOOL v114 = v112 >= 0x58 && v113 > 0x1F;
            v115 = v76 - 32;
            unint64_t v109 = v76;
            if (!v114) {
              goto LABEL_178;
            }
            uint64_t v116 = (v112 >> 3) + 1;
            uint64_t v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
            v115 = &v108[v117];
            unint64_t v118 = v76 + 16;
            float32x4x2_t v119 = (long long *)(8 * (v107 >> 3) + 8 * v64 + v61 + 16);
            uint64_t v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v121 = *v119;
              *(v118 - 1) = *(v119 - 1);
              _OWORD *v118 = v121;
              v118 += 2;
              v119 += 2;
              v120 -= 4;
            }
            while (v120);
            unint64_t v109 = &v76[v117];
            if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_178:
              do
              {
                uint64_t v122 = *(void *)v115;
                v115 += 8;
                *(void *)unint64_t v109 = v122;
                v109 += 8;
              }
              while ((unint64_t)v115 < v62);
            }
          }
          a2[1] = (unint64_t)v109;
          if (v76 != v65 + 32)
          {
            if ((unint64_t)(v107 - 8) < 0x78
              || &v76[-(v107 & 0xFFFFFFFFFFFFFFF8)] < v108
              && v61 + v107 + (v63 & 0xFFFFFFFFFFFFFFF8) - (v107 & 0xFFFFFFFFFFFFFFF8) < (unint64_t)v76)
            {
              uint64_t v123 = v76;
              goto LABEL_112;
            }
            unint64_t v182 = ((unint64_t)(v107 - 8) >> 3) + 1;
            uint64_t v123 = &v76[-8 * (v182 & 0x3FFFFFFFFFFFFFFCLL)];
            v183 = (const float *)(v76 - 64);
            uint64_t v184 = (float *)(v76 - 32);
            uint64_t v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              float32x4x2_t v191 = vld2q_f32(v183);
              v183 -= 8;
              vst2q_f32(v184, v191);
              v184 -= 8;
              v185 -= 4;
            }
            while (v185);
            if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v108 -= 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_112:
              uint64_t v124 = v123 - 4;
              do
              {
                int v125 = *((_DWORD *)v108 - 2);
                v108 -= 8;
                *((_DWORD *)v124 - 1) = v125;
                *(_DWORD *)uint64_t v124 = *((_DWORD *)v108 + 1);
                v124 -= 8;
              }
              while (v108 != v65);
            }
          }
          BOOL v126 = (int *)__src;
          if (v73 == (int *)__src) {
            goto LABEL_123;
          }
          unint64_t v127 = (char *)v73 - __src - 8;
          if (v127 >= 0x78)
          {
            BOOL v126 = (int *)__src;
            if (v65 >= &__src[(v127 & 0xFFFFFFFFFFFFFFF8) + 8]
              || (v63 & 0xFFFFFFFFFFFFFFF8) + v61 + (v127 & 0xFFFFFFFFFFFFFFF8) + 8 <= (unint64_t)__src)
            {
              uint64_t v128 = (v127 >> 3) + 1;
              uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFF8);
              v65 += v129;
              uint64_t v130 = (_OWORD *)(v61 + 8 * v64 + 32);
              uint64_t v131 = v128 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                long long v133 = *(v71 - 2);
                long long v132 = *(v71 - 1);
                long long v135 = *v71;
                long long v134 = v71[1];
                v71 += 4;
                *(v130 - 2) = v133;
                *(v130 - 1) = v132;
                *uint64_t v130 = v135;
                v130[1] = v134;
                v130 += 4;
                v131 -= 8;
              }
              while (v131);
              if (v128 == (v128 & 0x3FFFFFFFFFFFFFF8)) {
                goto LABEL_123;
              }
              BOOL v126 = (int *)&__src[v129];
            }
          }
          do
          {
            *(_DWORD *)uint64_t v65 = *v126;
            *((_DWORD *)v65 + 1) = v126[1];
            v126 += 2;
            v65 += 8;
          }
          while (v126 != v73);
          goto LABEL_123;
        }
      }
    }
    do
    {
      uint64_t v106 = *(void *)v75;
      v75 += 2;
      *(void *)uint64_t v76 = v106;
      v76 += 8;
    }
    while (v75 != &v187);
    goto LABEL_94;
  }
  unint64_t v67 = v64 + 4;
  if ((unint64_t)(v64 + 4) >> 61) {
    abort();
  }
  uint64_t v68 = v66 - v61;
  if (v68 >> 2 > v67) {
    unint64_t v67 = v68 >> 2;
  }
  if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v69 = v67;
  }
  if (v69)
  {
    if (v69 >> 61) {
      goto LABEL_172;
    }
    uint64_t v70 = (char *)operator new(8 * v69);
  }
  else
  {
    uint64_t v70 = 0;
  }
  long long v83 = *(_OWORD *)&__src[16];
  uint64_t v84 = &v70[8 * v64];
  *(_OWORD *)uint64_t v84 = *(_OWORD *)__src;
  *((_OWORD *)v84 + 1) = v83;
  uint64_t v85 = v84 + 32;
  unint64_t v86 = v63 - 8;
  if ((unint64_t)v63 < 8) {
    goto LABEL_83;
  }
  if (v86 < 0x68)
  {
    int16x8_t v87 = v65;
    goto LABEL_81;
  }
  int16x8_t v87 = v65;
  if ((v63 & 0xFFFFFFFFFFFFFFF8) + v61 - (unint64_t)&v70[v63 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
    goto LABEL_179;
  }
  uint64_t v88 = (v86 >> 3) + 1;
  int16x8_t v87 = &v65[-8 * (v88 & 0x3FFFFFFFFFFFFFFCLL)];
  uint64_t v89 = 8 * v64 - 16;
  BOOL v90 = (long long *)(v61 + v89);
  int v91 = &v70[v89];
  uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v93 = *v90;
    *((_OWORD *)v91 - 1) = *(v90 - 1);
    *(_OWORD *)int v91 = v93;
    v90 -= 2;
    v91 -= 32;
    v92 -= 4;
  }
  while (v92);
  v84 -= 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
  if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_179:
    do
    {
LABEL_81:
      uint64_t v94 = *((void *)v87 - 1);
      v87 -= 8;
      *((void *)v84 - 1) = v94;
      v84 -= 8;
    }
    while (v87 != (char *)v61);
    unint64_t v62 = a2[1];
  }
LABEL_83:
  unint64_t v95 = &v70[8 * v69];
  if ((char *)v62 != v65)
  {
    uint64_t v96 = (char *)((v63 & 0xFFFFFFFFFFFFFFF8) + v61);
    unint64_t v97 = v62 - (void)v96 - 8;
    if (v97 < 0x68) {
      goto LABEL_180;
    }
    if ((unint64_t)(&v70[v63 & 0xFFFFFFFFFFFFFFF8] - v96 + 32) < 0x20) {
      goto LABEL_180;
    }
    uint64_t v98 = (v97 >> 3) + 1;
    uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    v65 += v99;
    uint64_t v100 = &v70[8 * v64 + 48];
    uint64_t v101 = (long long *)(8 * v64 + v61 + 16);
    uint64_t v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v103 = *v101;
      *((_OWORD *)v100 - 1) = *(v101 - 1);
      *(_OWORD *)uint64_t v100 = v103;
      v100 += 32;
      v101 += 2;
      v102 -= 4;
    }
    while (v102);
    uint64_t v85 = (void *)((char *)v85 + v99);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_180:
      do
      {
        uint64_t v104 = *(void *)v65;
        v65 += 8;
        *v85++ = v104;
      }
      while (v65 != (char *)v62);
    }
  }
  long long v105 = (void *)*a2;
  *a2 = (unint64_t)v84;
  a2[1] = (unint64_t)v85;
  a2[2] = (unint64_t)v95;
  if (v105) {
    operator delete(v105);
  }
LABEL_123:
  long long v136 = xmmword_1A290051C;
  *(_OWORD *)__src = xmmword_1A290051C;
  *(void *)&__src[16] = 0x300000001;
  unint64_t v138 = *a3;
  unint64_t v137 = a3[1];
  uint64_t v139 = v137 - *a3;
  uint64_t v140 = v139 >> 2;
  uint64_t v141 = (char *)(*a3 + (v139 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v142 = a3[2];
  if ((uint64_t)(v142 - v137) < 24)
  {
    unint64_t v143 = v140 + 6;
    if ((unint64_t)(v140 + 6) >> 62) {
      abort();
    }
    uint64_t v144 = v142 - v138;
    if (v144 >> 1 > v143) {
      unint64_t v143 = v144 >> 1;
    }
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v145 = v143;
    }
    if (!v145)
    {
      BOOL v146 = 0;
LABEL_154:
      v167 = &v146[4 * v140];
      *(_OWORD *)v167 = v136;
      *((void *)v167 + 2) = 0x300000001;
      if (v138 == v137)
      {
        uint64_t v170 = &v146[4 * v140];
      }
      else
      {
        unint64_t v168 = v139 - 4;
        if ((unint64_t)(v139 - 4) >= 0x3C)
        {
          unint64_t v171 = (v139 & 0xFFFFFFFFFFFFFFFCLL) + v138 - (void)&v146[v139 & 0xFFFFFFFFFFFFFFFCLL];
          char v169 = v141;
          uint64_t v170 = &v146[4 * v140];
          if (v171 >= 0x20)
          {
            uint64_t v172 = (v168 >> 2) + 1;
            char v169 = &v141[-4 * (v172 & 0x7FFFFFFFFFFFFFF8)];
            uint64_t v173 = 4 * v140 - 16;
            v174 = (long long *)(v138 + v173);
            uint64_t v175 = &v146[v173];
            uint64_t v176 = v172 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v177 = *v174;
              *(v175 - 1) = *(v174 - 1);
              *uint64_t v175 = v177;
              v174 -= 2;
              v175 -= 2;
              v176 -= 8;
            }
            while (v176);
            uint64_t v170 = &v167[-4 * (v172 & 0x7FFFFFFFFFFFFFF8)];
            if (v172 == (v172 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_163;
            }
          }
        }
        else
        {
          char v169 = v141;
          uint64_t v170 = &v146[4 * v140];
        }
        do
        {
          int v178 = *((_DWORD *)v169 - 1);
          v169 -= 4;
          *((_DWORD *)v170 - 1) = v178;
          v170 -= 4;
        }
        while (v169 != (char *)v138);
      }
LABEL_163:
      unint64_t v179 = v167 + 24;
      size_t v180 = &v146[4 * v145];
      size_t v181 = v137 - (void)v141;
      if (v181) {
        memmove(v167 + 24, v141, v181);
      }
      *a3 = (unint64_t)v170;
      a3[1] = (unint64_t)&v179[v181];
      a3[2] = (unint64_t)v180;
      if (v138) {
        operator delete((void *)v138);
      }
      return;
    }
    if (!(v145 >> 62))
    {
      BOOL v146 = operator new(4 * v145);
      long long v136 = xmmword_1A290051C;
      goto LABEL_154;
    }
LABEL_172:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v147 = v137 - (void)v141;
  if ((uint64_t)(v137 - (void)v141) > 23)
  {
    v148 = &__src[24];
    int8x8_t v149 = (char *)a3[1];
  }
  else
  {
    v148 = &__src[v147];
    memmove((void *)a3[1], &__src[v147], 24 - v147);
    int8x8_t v149 = v141 + 24;
    a3[1] = (unint64_t)(v141 + 24);
    if (v147 < 1) {
      return;
    }
  }
  int64_t v150 = v149 - (v141 + 24);
  uint64_t v151 = v150 >> 2;
  v152 = v149 - 24;
  v153 = v149;
  if ((unint64_t)(v149 - 24) < v137)
  {
    unint64_t v154 = (v139 & 0xFFFFFFFFFFFFFFFCLL) + v150;
    v155 = (char *)(v154 + v138);
    unint64_t v156 = v154 + v138 + 4;
    if (v137 > v156) {
      unint64_t v156 = v137;
    }
    unint64_t v157 = v156 + ~v138 - v154;
    unint64_t v158 = v149 - v155;
    BOOL v159 = v157 >= 0x2C && v158 > 0x1F;
    v153 = v149;
    if (!v159) {
      goto LABEL_181;
    }
    uint64_t v160 = (v157 >> 2) + 1;
    uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
    v152 += v161;
    unint64_t v162 = v149 + 16;
    v163 = (long long *)(4 * v151 + 4 * v140 + v138 + 16);
    uint64_t v164 = v160 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v165 = *v163;
      *(v162 - 1) = *(v163 - 1);
      *unint64_t v162 = v165;
      v162 += 2;
      v163 += 2;
      v164 -= 8;
    }
    while (v164);
    v153 = &v149[v161];
    if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_181:
      do
      {
        int v166 = *(_DWORD *)v152;
        v152 += 4;
        *(_DWORD *)v153 = v166;
        v153 += 4;
      }
      while ((unint64_t)v152 < v137);
    }
  }
  a3[1] = (unint64_t)v153;
  if (v149 != v141 + 24) {
    memmove(&v149[-4 * v151], v141, v150);
  }
  if (v148 != __src) {
    memmove(v141, __src, v148 - __src);
  }
}

uint64_t md::DaVinciGroundRenderable::DaVinciGroundRenderable(uint64_t a1, uint64_t *a2, char a3, char a4, void *a5)
{
  unint64_t v7 = (void *)md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(a1, *a2, a2[1], a3, a4, a5);
  void *v7 = &unk_1EF513508;
  uint64_t v8 = a2[1];
  v7[48] = *a2;
  v7[49] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1EF5139E8;
  unint64_t v9 = operator new(0xE8uLL);
  v9[1] = 0;
  v9[2] = 0;
  void *v9 = &unk_1EF587608;
  uint64_t v10 = ggl::BufferData::BufferData((uint64_t)(v9 + 3), qword_1E95576C0, 2, 1, 6, 1);
  v9[28] = ggl::DaVinci::Shadow::reflection(void)::reflection;
  v9[3] = &unk_1EF55E858;
  *(void *)(a1 + 400) = v10;
  *(void *)(a1 + 408) = v9;
  uint64_t v11 = operator new(0xE8uLL);
  v11[1] = 0;
  void v11[2] = 0;
  *uint64_t v11 = &unk_1EF587608;
  uint64_t v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), qword_1E95576C0, 2, 1, 6, 1);
  v11[28] = ggl::DaVinci::Shadow::reflection(void)::reflection;
  v11[3] = &unk_1EF55E858;
  *(void *)(a1 + 416) = v12;
  *(void *)(a1 + 424) = v11;
  uint64_t v13 = operator new(0xE8uLL);
  v13[1] = 0;
  void v13[2] = 0;
  *uint64_t v13 = &unk_1EF586D80;
  uint64_t v14 = ggl::BufferData::BufferData((uint64_t)(v13 + 3), qword_1E9552468, 2, 1, 6, 1);
  v13[28] = ggl::Tile::LinearDepth::reflection(void)::reflection;
  v13[3] = &unk_1EF55E218;
  *(void *)(a1 + 432) = v14;
  *(void *)(a1 + 440) = v13;
  unint64_t v15 = operator new(0xE8uLL);
  v15[1] = 0;
  v15[2] = 0;
  *unint64_t v15 = &unk_1EF587560;
  uint64_t v16 = ggl::BufferData::BufferData((uint64_t)(v15 + 3), qword_1E95518B0, 2, 1, 6, 1);
  v15[28] = ggl::DaVinci::StyleCameraLighting::reflection(void)::reflection;
  v15[3] = &unk_1EF55E798;
  *(void *)(a1 + 448) = v16;
  *(void *)(a1 + 456) = v15;
  gm::inverse<double>((double *)(a1 + 464), (double *)(a1 + 88));
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(unsigned char *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(unsigned char *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(unsigned char *)(a1 + 760) = 0;
  return a1;
}

void sub_1A1985948(_Unwind_Exception *a1)
{
  if (!atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 53);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 51);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)uint64_t v1 = v2;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v1 + 49);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::PairedMapTileDataRenderable(uint64_t a1, uint64_t *a2, char a3, char a4, void *a5, void *a6)
{
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(a1, v9, (uint64_t)v10, a3, a4, a5);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)a1 = &unk_1EF513668;
  *(void *)(a1 + 384) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 392) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1EF513B70;
  *(void *)(a1 + 400) = *a6;
  uint64_t v12 = a6[1];
  *(void *)(a1 + 408) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  uint64_t v13 = operator new(8uLL);
  *(void *)(a1 + 416) = v13;
  *(void *)(a1 + 424) = 1;
  *uint64_t v13 = 1;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(1uLL);
  *(void *)(a1 + 448) = 1;
  *(unsigned char *)(a1 + 456) = 1;
  md::BaseMapTileDataRenderable::_setupLocalBasisForTiled(a1, *(const md::MapTileData **)(a1 + 400));
  return a1;
}

void sub_1A1985C2C(_Unwind_Exception *a1)
{
  if (*v2) {
    operator delete(*v2);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 400);
  md::MapTileDataRenderable<md::ElevatedStrokeTileData>::~MapTileDataRenderable(v1);
  _Unwind_Resume(a1);
}

void sub_1A1985C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, void *a6)
{
  *(void *)a1 = &unk_1EF513AC0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 24) = 255;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = a4;
  uint64_t v9 = operator new(0xE8uLL);
  v9[1] = 0;
  v9[2] = 0;
  void *v9 = &unk_1EF586DB8;
  uint64_t v10 = ggl::BufferData::BufferData((uint64_t)(v9 + 3), qword_1E9552208, 2, 1, 6, 1);
  v9[28] = ggl::Tile::View::reflection(void)::reflection;
  v9[3] = &unk_1EF55E258;
  uint64_t v11 = a6[1];
  *(void *)(a1 + 232) = *a6;
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 224) = v9;
  *(void *)(a1 + 240) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 312) = 0x3FF0000000000000;
  *(int64x2_t *)(a1 + 320) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 336) = xmmword_1A28FC720;
  *(int64x2_t *)(a1 + 352) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 368) = 0;
  uint64_t v12 = *(unsigned __int8 **)(a1 + 8);
  BOOL v13 = (a5 & 1) != 0 || v12[168] != 255;
  *(unsigned char *)(a1 + 376) = v13;
  md::BaseMapTileDataRenderable::_setupLocalBasisForTiled(a1, (const md::MapTileData *)v12);
  return a1;
}

void sub_1A1985DF4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::BaseMapTileDataRenderable::_setupLocalBasisForTiled(uint64_t this, const md::MapTileData *a2)
{
  uint64_t v2 = this;
  int v3 = 1 << *((unsigned char *)a2 + 169);
  double v4 = 1.0 / (double)v3;
  double v5 = v4 * (double)*((int *)a2 + 44);
  double v6 = v4 * (double)(v3 + ~*((_DWORD *)a2 + 43));
  double v7 = v5 + v4;
  *(double *)(this + 56) = v5;
  *(double *)(this + 64) = v6;
  *(double *)(this + 72) = v5 + v4;
  *(double *)(this + 80) = v6 + v4;
  long long v8 = *(_OWORD *)((char *)a2 + 168);
  *(void *)(this + 40) = *((void *)a2 + 23);
  *(_OWORD *)(this + 24) = v8;
  if (*(unsigned char *)(this + 48))
  {
    double v9 = (double)*(char *)(this + 48);
    *(double *)(this + 56) = v5 + v9;
    *(double *)(this + 72) = v7 + v9;
  }
  if (*(unsigned char *)(this + 376))
  {
    *(void *)(this + 288) = *((void *)a2 + 27);
    *(void *)(this + 296) = *((void *)a2 + 28);
    *(void *)(this + 304) = *((void *)a2 + 29);
    *(void *)(this + 312) = *((void *)a2 + 30);
    *(void *)(this + 264) = *((void *)a2 + 24);
    *(void *)(this + 272) = *((void *)a2 + 25);
    *(void *)(this + 280) = *((void *)a2 + 26);
    *(void *)(this + 320) = *((void *)a2 + 31);
    *(void *)(this + 328) = *((void *)a2 + 32);
    *(void *)(this + 336) = *((void *)a2 + 33);
    *(void *)(this + 344) = *((void *)a2 + 34);
    *(void *)(this + 352) = *((void *)a2 + 35);
    *(void *)(this + 360) = *((void *)a2 + 36);
    *(void *)(this + 88) = *((void *)a2 + 43);
    *(void *)(this + 96) = *((void *)a2 + 44);
    *(void *)(this + 104) = *((void *)a2 + 45);
    *(void *)(this + 112) = *((void *)a2 + 46);
    *(void *)(this + 120) = *((void *)a2 + 47);
    *(void *)(this + 128) = *((void *)a2 + 48);
    *(void *)(this + 136) = *((void *)a2 + 49);
    *(void *)(this + 144) = *((void *)a2 + 50);
    *(void *)(this + 152) = *((void *)a2 + 51);
    *(void *)(this + 160) = *((void *)a2 + 52);
    *(void *)(this + 168) = *((void *)a2 + 53);
    *(void *)(this + 176) = *((void *)a2 + 54);
    *(void *)(this + 184) = *((void *)a2 + 55);
    *(void *)(this + 192) = *((void *)a2 + 56);
    *(void *)(this + 200) = *((void *)a2 + 57);
    double v10 = *((double *)a2 + 58);
  }
  else
  {
    this = (*(uint64_t (**)(const md::MapTileData *))(*(void *)a2 + 40))(a2);
    double v11 = *(double *)(v2 + 80);
    if (this)
    {
      v12.f64[0] = *(float64_t *)(v2 + 72);
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 136) = 0u;
      *(_OWORD *)(v2 + 152) = 0u;
      *(void *)(v2 + 176) = 0;
      v12.f64[1] = v11;
      float64x2_t v13 = *(float64x2_t *)(v2 + 56);
      float64x2_t v14 = vsubq_f64(v12, v13);
      float64x2_t v15 = (float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v14, (float64x2_t)vdupq_n_s64(0x3FF00029F16B11C7uLL)), (int8x16_t)vcltzq_f64(v14));
      __asm { FMOV            V3.2D, #0.5 }
      *(float64_t *)(v2 + 88) = v15.f64[0];
      *(float64_t *)(v2 + 128) = v15.f64[1];
      *(float64_t *)(v2 + 168) = v15.f64[0];
      *(float64x2_t *)(v2 + 184) = vmlaq_f64(v13, _Q3, vsubq_f64(v14, v15));
    }
    else
    {
      double v21 = *(double *)(v2 + 56);
      double v22 = *(double *)(v2 + 64);
      double v23 = *(double *)(v2 + 72) - v21;
      *(double *)(v2 + 88) = v23;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(double *)(v2 + 128) = v11 - v22;
      *(_OWORD *)(v2 + 136) = 0u;
      *(_OWORD *)(v2 + 152) = 0u;
      *(double *)(v2 + 168) = v23;
      *(void *)(v2 + 176) = 0;
      *(double *)(v2 + 184) = v21;
      *(double *)(v2 + 192) = v22;
    }
    *(void *)(v2 + 200) = 0;
    double v10 = 1.0;
  }
  *(double *)(v2 + 208) = v10;
  return this;
}

double gm::inverse<double>(double *a1, double *a2)
{
  double v2 = a2[10];
  double v3 = a2[11];
  double v5 = a2[14];
  double v4 = a2[15];
  double v6 = a2[4];
  double v7 = a2[5];
  double v9 = a2[8];
  double v8 = a2[9];
  double v11 = a2[6];
  double v10 = a2[7];
  double v13 = a2[12];
  double v12 = a2[13];
  double v66 = v5 * v3 * v7 + v8 * v4 * v11 + v12 * v2 * v10;
  double v67 = v8 * v5;
  double v65 = v4 * v2 * v7 + v8 * v5 * v10 + v11 * v3 * v12;
  double v63 = v6 * v3 * v5 + v9 * v11 * v4 + (v13 * v10 - v6 * v4) * v2;
  double v64 = v9 * v10 * v5 + v13 * v11 * v3;
  double v62 = v6 * v3 * v12 + v9 * v7 * v4 + v13 * v10 * v8;
  double v61 = v8 * v4 * v6 + v9 * v10 * v12 + v13 * v7 * v3;
  double v59 = v12 * v2 * v6 + v13 * v11 * v8 + (v9 * v7 - v6 * v8) * v5;
  double v60 = v9 * v11 * v12 + v13 * v7 * v2;
  double v14 = a2[1];
  double v15 = a2[2];
  double v16 = a2[3];
  double v56 = v15 * v8;
  double v57 = v5 * v3 * v14 + v15 * v8 * v4 + (v16 * v12 - v14 * v4) * v2;
  double v17 = v15 * v9;
  double v55 = v15 * v9 * v4 + v16 * v13 * v2 + *a2 * v3 * v5;
  double v18 = v16 * v9;
  double v19 = v14 * v9;
  double v20 = v14 * v13;
  double v21 = v16 * v13 - *a2 * v4;
  double v58 = v21 * v8 - (v14 * v13 * v3 - v14 * v9 * v4) + (*a2 * v3 - v16 * v9) * v12;
  double v53 = v14 * v9 * v5 + v15 * v13 * v8 + *a2 * v2 * v12;
  double v54 = v15 * v13 * v3 + v16 * v9 * v5 + *a2 * v2 * v4;
  double v52 = v14 * v10 * v5 + v15 * v7 * v4 + v16 * v12 * v11;
  double v22 = v15 * v6;
  double v23 = v21 * v11 - (v15 * v13 * v10 - v15 * v6 * v4);
  double v24 = v14 * v6;
  double v25 = v14 * v6 * v4 + v16 * v13 * v7;
  double v26 = -(v14 * v13 * v11 - v15 * v13 * v7);
  double v27 = v15 * v12 * v3 + v16 * v8 * v5;
  double v28 = v16 * v7;
  double v29 = v11 * v4 * v14 + v15 * v12 * v10 + v16 * v7 * v5;
  double v30 = v16 * v6;
  double v31 = *a2 * v10;
  double v51 = v23 + (v31 - v30) * v5;
  double v32 = *a2 * v7;
  double v33 = v24 - v32;
  double v34 = v26 + (v24 - v32) * v5;
  double v35 = v14 * v10 * v2 + v16 * v8 * v11 + (v15 * v7 - v14 * v11) * v3;
  double v36 = v22 * v3 + v18 * v11;
  double v37 = -(v19 * v10 - v18 * v7);
  double v38 = v24 * v2 + v17 * v7;
  double v39 = v20 * v2 + v17 * v12;
  double v40 = v20 * v10 + v30 * v12;
  double v41 = v37 + v33 * v3;
  double v42 = v17 * v10 + v30 * v2 + *a2 * v11 * v3;
  double v43 = v41 + (v31 - v30) * v8;
  double v44 = v38 + *a2 * v11 * v8;
  double v45 = v19 * v11 + v22 * v8;
  double v46 = v34 + (*a2 * v11 - v22) * v12;
  double v47 = v39 + v67 * *a2 - v53;
  double v48 = v35 - (v56 * v10 + v28 * v2);
  double v49 = 1.0 / (*a2 * (v65 - v66) + (v63 - v64) * v14 + (v59 - v60) * v16 + (v61 - v62) * v15);
  *a1 = (v65 - v66) * v49;
  a1[1] = (v57 - v27) * v49;
  a1[2] = (v29 - v52) * v49;
  a1[3] = v48 * v49;
  a1[4] = (v63 - v64) * v49;
  a1[5] = (v54 - v55) * v49;
  a1[6] = v51 * v49;
  a1[7] = (v42 - (v36 + v31 * v2)) * v49;
  a1[8] = (v61 - v62) * v49;
  a1[9] = v58 * v49;
  a1[10] = (v40 + v32 * v4 - (v25 + v31 * v12)) * v49;
  a1[11] = v43 * v49;
  a1[12] = (v59 - v60) * v49;
  a1[13] = v47 * v49;
  double result = (v45 + v32 * v2 - v44) * v49;
  a1[14] = v46 * v49;
  a1[15] = result;
  return result;
}

__n128 md::RoadStyling::subscribeLayer(__n128 **this, md::RoadLayer *a2, __n128 result)
{
  ++*((_DWORD *)a2 + 52);
  double v5 = (void **)*((void *)a2 + 1);
  double v4 = (void **)*((void *)a2 + 2);
  if (v5 != v4)
  {
    double v6 = (md::RoadStyling *)this;
    double result = 0uLL;
    while (1)
    {
      uint64_t v7 = (*v5)[131];
      double v8 = *(unsigned int **)(v7 + 240);
      double v9 = *(unsigned int **)(v7 + 248);
      double v10 = (char *)((char *)v9 - (char *)v8);
      unint64_t v11 = ((char *)v9 - (char *)v8) >> 3;
      if (v9 != v8)
      {
        double v12 = *(unsigned int **)(v7 + 240);
        do
        {
          unint64_t v13 = ((v11 << 6) - 0x61C8864680B583EBLL + (v11 >> 2) + *v12) ^ v11;
          unint64_t v11 = (*((unsigned __int16 *)v12 + 2) - 0x61C8864680B583EBLL + (v13 << 6) + (v13 >> 2)) ^ v13;
          v12 += 2;
        }
        while (v12 != v9);
      }
      unsigned int v14 = *(unsigned __int16 *)(v7 + 282);
      if (*(_WORD *)(v7 + 282))
      {
        unint64_t v15 = 0;
        double v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = *(void *)(v7 + 272);
        uint64_t v19 = v18 + *(unsigned __int16 *)(v7 + 280);
        do
        {
          if (v17 < v14)
          {
            double v16 = (unsigned int *)(v18 + 4 * v17);
            double v3 = (unsigned __int16 *)(v19 + 2 * v17);
          }
          v15 ^= (*v3
                - 0x61C8864680B583EBLL
                + ((((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15) << 6)
                + ((((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15) >> 2)) ^ ((v15 << 6)
                                                                                           - 0x61C8864680B583EBLL
                                                                                           + (v15 >> 2)
                                                                                           + *v16);
          unsigned int v20 = v17 + 1;
          if (v17 + 1 < v14) {
            ++v17;
          }
          else {
            unsigned int v17 = v14;
          }
        }
        while (v20 < v14);
      }
      else
      {
        unint64_t v15 = 0;
      }
      unint64_t v21 = v15 ^ v11;
      double v22 = *(__n128 **)v6;
      double v23 = (__n128 *)*((void *)v6 + 1);
      if (*(__n128 **)v6 == v23)
      {
LABEL_31:
        unint64_t v29 = *((void *)v6 + 2);
        if ((unint64_t)v23 < v29)
        {
          v23[1] = result;
          v23[2] = result;
          double v30 = v23 + 3;
          *double v23 = result;
          goto LABEL_58;
        }
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v23 - v22) + 1;
        if (v31 > 0x555555555555555) {
          abort();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v22) >> 4);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v33 = 0x555555555555555;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          double v34 = (char *)operator new(48 * v33);
          double result = 0uLL;
        }
        else
        {
          double v34 = 0;
        }
        double v35 = (__n128 *)&v34[16 * (v23 - v22)];
        v35[1] = result;
        v35[2] = result;
        double v36 = &v34[48 * v33];
        *double v35 = result;
        double v30 = v35 + 3;
        if (v22 == v23)
        {
          *(void *)double v6 = v35;
          *((void *)v6 + 1) = v30;
          *((void *)v6 + 2) = v36;
          if (v22) {
LABEL_57:
          }
            operator delete(v22);
LABEL_58:
          *((void *)v6 + 1) = v30;
          operator new();
        }
        uint64_t v37 = 0;
        do
        {
          double v38 = &v35[v37];
          double v39 = &v23[v37];
          v38[-3].n128_u64[0] = v23[v37 - 3].n128_u64[0];
          *(__n128 *)((char *)v38 - 40) = *(__n128 *)((char *)&v23[v37 - 2] - 8);
          v39[-3].n128_u64[1] = 0;
          v39[-2].n128_u64[0] = 0;
          v38[-2].n128_u32[2] = *((_DWORD *)&v23[v37 - 1] - 2);
          v38[-1] = v23[v37 - 1];
          v39[-1].n128_u64[0] = 0;
          v39[-1].n128_u64[1] = 0;
          v37 -= 3;
        }
        while (&v23[v37] != v22);
        double v22 = *this;
        double v40 = this[1];
        *this = &v35[v37];
        this[1] = v30;
        this[2] = (__n128 *)v36;
        while (2)
        {
          if (v40 == v22)
          {
            double v6 = (md::RoadStyling *)this;
            if (v22) {
              goto LABEL_57;
            }
            goto LABEL_58;
          }
          double v41 = (std::__shared_weak_count *)v40[-1].n128_u64[1];
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
            double v42 = (std::__shared_weak_count *)v40[-2].n128_u64[0];
            if (v42) {
              goto LABEL_52;
            }
          }
          else
          {
            double v42 = (std::__shared_weak_count *)v40[-2].n128_u64[0];
            if (v42)
            {
LABEL_52:
              if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
          }
          v40 -= 3;
          continue;
        }
      }
      double v24 = *(__n128 **)v6;
      while (1)
      {
        if (v24->n128_u64[0] == v21)
        {
          uint64_t v26 = *(void *)(v24->n128_u64[1] + 240);
          uint64_t v25 = *(void *)(v24->n128_u64[1] + 248);
          if ((char *)(v25 - v26) == v10) {
            break;
          }
        }
LABEL_19:
        v24 += 3;
        if (v24 == v23) {
          goto LABEL_31;
        }
      }
      if (v26 != v25) {
        break;
      }
LABEL_30:
      md::RoadBatch::setStyle(*v5, (__n128 *)v24[2].n128_u64);
      ++v24[1].n128_u32[2];
      ++v5;
      double result = 0uLL;
      if (v5 == v4) {
        return result;
      }
    }
    double v27 = v8;
    while (*(_DWORD *)v26 == *v27 && *(unsigned __int16 *)(v26 + 4) == *((unsigned __int16 *)v27 + 2))
    {
      v26 += 8;
      v27 += 2;
      if (v26 == v25) {
        goto LABEL_30;
      }
    }
    goto LABEL_19;
  }
  return result;
}

void sub_1A1986EAC(_Unwind_Exception *a1)
{
  md::RoadStyle::~RoadStyle(v1);
  MEMORY[0x1A6239270](v1, 0x1020C40F1B7CD7FLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::BufferData::BufferData(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6)
{
  *(void *)a1 = &unk_1EF55A1F0;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a5;
  *(unsigned char *)(a1 + 17) = a3;
  *(unsigned char *)(a1 + 18) = a4;
  *(unsigned char *)(a1 + 19) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a6 * a2;
  long long v7 = 0uLL;
  *(_OWORD *)(a1 + 72) = 0u;
  unint64_t v8 = a1 + 72;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  double v9 = &qword_1EB32C000;
  {
    unint64_t v18 = v8;
    char v17 = a5;
    uint64_t v16 = a6;
    long long v7 = 0uLL;
    double v9 = &qword_1EB32C000;
    a6 = v16;
    a5 = v17;
    int v15 = v14;
    unint64_t v8 = v18;
    if (v15) {
      operator new();
    }
  }
  *(void *)(a1 + 96) = v9[287];
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 168) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FCCA0;
  *(_DWORD *)(a1 + 112) = 0;
  if (a6 && ((a5 & 1) == 0 || (a5 & 6) == 6))
  {
    unint64_t v10 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 72);
    unint64_t v12 = *(void *)(a1 + 80) - v11;
    if (v10 <= v12)
    {
      if (v10 < v12) {
        *(void *)(a1 + 80) = v11 + v10;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v8, v10 - v12);
    }
  }
  return a1;
}

unint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(unint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  double v5 = *(unsigned char **)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[a2];
      do
      {
        if (v5) {
          *double v5 = 0;
        }
        ++v5;
        --v2;
      }
      while (v2);
      double v5 = v11;
    }
    *(void *)(result + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void *)result;
    long long v7 = &v5[-*(void *)result];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      abort();
    }
    unint64_t v9 = v4 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v10, 1);
    }
    else {
      double result = 0;
    }
    unint64_t v12 = &v7[result];
    unint64_t v13 = &v7[result + v2];
    int v14 = &v7[result];
    do
    {
      if (v14) {
        *int v14 = 0;
      }
      ++v14;
      --v2;
    }
    while (v2);
    unint64_t v15 = result + v10;
    uint64_t v17 = *(void *)v3;
    uint64_t v16 = *(void *)(v3 + 8);
    unint64_t v18 = v16 - *(void *)v3;
    if (v16 != *(void *)v3)
    {
      if (v18 < 0x20) {
        goto LABEL_38;
      }
      if ((unint64_t)(v6 - (void)&v5[result] + v16) < 0x20) {
        goto LABEL_38;
      }
      uint64_t v19 = (long long *)(v16 - 16);
      unsigned int v20 = &v7[result - 16];
      double result = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *unsigned int v20 = v21;
        v19 -= 2;
        v20 -= 2;
        result -= 32;
      }
      while (result);
      v12 -= v18 & 0xFFFFFFFFFFFFFFE0;
      v16 -= v18 & 0xFFFFFFFFFFFFFFE0;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_38:
        do
        {
          char v22 = *(unsigned char *)--v16;
          *--unint64_t v12 = v22;
        }
        while (v16 != v17);
      }
      uint64_t v16 = *(void *)v3;
    }
    *(void *)unint64_t v3 = v12;
    *(void *)(v3 + 8) = v13;
    *(void *)(v3 + 16) = v15;
    if (v16)
    {
      double v23 = *(uint64_t (**)(void))(**(void **)(v3 + 24) + 40);
      return v23();
    }
  }
  return result;
}

void md::RoadBatch::setStyle(void *a1, void *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[134] = v5;
  uint64_t v6 = (std::__shared_weak_count *)a1[135];
  a1[135] = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = *a2;
    if (!*a2) {
      return;
    }
  }
  else
  {
    uint64_t v7 = *a2;
    if (!*a2) {
      return;
    }
  }
  uint64_t v8 = a1[139];
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(void *)(v7 + 96);
  uint64_t v11 = *(void *)(v7 + 104);
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = 0;
  uint64_t v12 = *(void *)(v8 + 160);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = *(std::__shared_weak_count **)(v12 + 40);
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = a1[138];
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = *(void *)(*a2 + 144);
  uint64_t v17 = *(void *)(*a2 + 152);
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = 0;
  uint64_t v18 = *(void *)(v14 + 160);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v18 + 40);
  *(void *)(v18 + 32) = v16;
  *(void *)(v18 + 40) = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = a1[136];
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = *(void *)(*a2 + 80);
  uint64_t v23 = *(void *)(*a2 + 88);
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = 0;
  uint64_t v24 = *(void *)(v20 + 160);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v24 + 40);
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = a1[137];
  uint64_t v27 = *(void *)(v26 + 64);
  uint64_t v28 = *(void *)(*a2 + 160);
  uint64_t v29 = *(void *)(*a2 + 168);
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = 0;
  uint64_t v30 = *(void *)(v26 + 160);
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v31 = *(std::__shared_weak_count **)(v30 + 40);
  *(void *)(v30 + 32) = v28;
  *(void *)(v30 + 40) = v29;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = a1[140];
  uint64_t v33 = *(void *)(v32 + 64);
  uint64_t v34 = *(void *)(*a2 + 96);
  uint64_t v35 = *(void *)(*a2 + 104);
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = 0;
  uint64_t v36 = *(void *)(v32 + 160);
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v36 + 40);
  *(void *)(v36 + 32) = v34;
  *(void *)(v36 + 40) = v35;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  uint64_t v38 = *(void *)(v32 + 64);
  uint64_t v39 = *(void *)(*a2 + 192);
  uint64_t v40 = *(void *)(*a2 + 200);
  *(void *)(v38 + 48) = v39;
  *(void *)(v38 + 56) = 0;
  uint64_t v41 = *(void *)(v32 + 160);
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  double v42 = *(std::__shared_weak_count **)(v41 + 56);
  *(void *)(v41 + 48) = v39;
  *(void *)(v41 + 56) = v40;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v43 = a1[141];
  uint64_t v44 = *(void *)(v43 + 64);
  uint64_t v45 = *(void *)(*a2 + 112);
  uint64_t v46 = *(void *)(*a2 + 120);
  *(void *)(v44 + 32) = v45;
  *(void *)(v44 + 40) = 0;
  uint64_t v47 = *(void *)(v43 + 160);
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  double v48 = *(std::__shared_weak_count **)(v47 + 40);
  *(void *)(v47 + 32) = v45;
  *(void *)(v47 + 40) = v46;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  uint64_t v49 = *(void *)(v43 + 64);
  uint64_t v50 = *(void *)(*a2 + 128);
  uint64_t v51 = *(void *)(*a2 + 136);
  *(void *)(v49 + 64) = v50;
  *(void *)(v49 + 72) = 0;
  uint64_t v52 = *(void *)(v43 + 160);
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  double v53 = *(std::__shared_weak_count **)(v52 + 72);
  *(void *)(v52 + 64) = v50;
  *(void *)(v52 + 72) = v51;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v54 = *(void *)(v43 + 64);
  uint64_t v55 = *(void *)(*a2 + 192);
  uint64_t v56 = *(void *)(*a2 + 200);
  *(void *)(v54 + 48) = v55;
  *(void *)(v54 + 56) = 0;
  uint64_t v57 = *(void *)(v43 + 160);
  if (v56) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
  }
  double v58 = *(std::__shared_weak_count **)(v57 + 56);
  *(void *)(v57 + 48) = v55;
  *(void *)(v57 + 56) = v56;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  uint64_t v59 = a1[142];
  uint64_t v60 = *(void *)(v59 + 64);
  uint64_t v61 = *(void *)(*a2 + 176);
  uint64_t v62 = *(void *)(*a2 + 184);
  *(void *)(v60 + 16) = v61;
  *(void *)(v60 + 24) = 0;
  uint64_t v63 = *(void *)(v59 + 160);
  if (v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
  }
  double v64 = *(std::__shared_weak_count **)(v63 + 24);
  *(void *)(v63 + 16) = v61;
  *(void *)(v63 + 24) = v62;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
}

void md::LabelStyleCache::requestStyles(uint64_t a1, uint64_t **a2, uint64_t a3, void *a4)
{
  std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve(a3, ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  {
    operator new();
  }
  uint64_t v78 = mdm::Allocator::instance(void)::alloc;
  std::vector<BOOL,geo::StdAllocator<BOOL,mdm::Allocator>>::reserve((uint64_t)&v75, ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      uint64_t v10 = *v7;
      *(void *)&long long v79 = *v7;
      uint64_t v11 = (std::__shared_weak_count *)v7[1];
      *((void *)&v79 + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v72, v10, (uint64_t)v11);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      int v12 = v74;
      unint64_t v13 = v76;
      if (v76 == v77 << 6)
      {
        if ((uint64_t)(v76 + 1) < 0) {
          abort();
        }
        unint64_t v14 = v77 << 7;
        if (v77 << 7 <= (v76 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v14 = (v76 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v76 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v15 = v14;
        }
        else {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        std::vector<BOOL,geo::StdAllocator<BOOL,mdm::Allocator>>::reserve((uint64_t)&v75, v15);
        unint64_t v13 = v76;
      }
      unint64_t v76 = v13 + 1;
      unint64_t v16 = v13 >> 6;
      uint64_t v17 = 1 << v13;
      if (v12) {
        uint64_t v9 = *(void *)(v75 + 8 * v16) | v17;
      }
      else {
        uint64_t v9 = *(void *)(v75 + 8 * v16) & ~v17;
      }
      *(void *)(v75 + 8 * v16) = v9;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v72);
      v7 += 2;
    }
    while (v7 != v8);
  }
  long long v71 = 0uLL;
  std::mutex::lock((std::mutex *)a1);
  if (a2[1] == *a2)
  {
    std::mutex::unlock((std::mutex *)a1);
    goto LABEL_108;
  }
  unint64_t v18 = 0;
  uint64_t v19 = a1 + 320;
  do
  {
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 128) + 3659));
    if ((v21 & 1) == 0)
    {
      if ((*(void *)(v75 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18))
      {
        uint64_t v22 = &(*a2)[2 * v18];
        md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::find((uint64_t)&v72, v19, v22);
        if (v73)
        {
          long long v23 = v72;
          if (*((void *)&v72 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v24 = (std::__shared_weak_count *)*((void *)&v71 + 1);
          long long v71 = v23;
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        else
        {
          uint64_t v32 = operator new(0x1E8uLL);
          uint64_t v33 = v32;
          v32[1] = 0;
          v32[2] = 0;
          *uint64_t v32 = &unk_1EF57F7D0;
          long long v79 = *(_OWORD *)v22;
          uint64_t v34 = (std::__shared_weak_count *)*((void *)&v79 + 1);
          if (*((void *)&v79 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          md::LabelStyle::LabelStyle((uint64_t)(v32 + 3), &v79, (void *)(a1 + 136), *(unsigned char *)(a1 + 156), *(unsigned char *)(a1 + 158), *(void *)(a1 + 161), *(unsigned char *)(a1 + 160), *(float *)(a1 + 152));
          if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
          uint64_t v35 = (std::__shared_weak_count *)*((void *)&v71 + 1);
          *(void *)&long long v71 = v33 + 3;
          *((void *)&v71 + 1) = v33;
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
          uint64_t v19 = a1 + 320;
          md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::insert(a1 + 320, v22, &v71);
        }
        if (v73)
        {
          uint64_t v36 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          if (*((void *)&v72 + 1))
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }
        uint64_t v37 = *(void **)(a3 + 8);
        if ((unint64_t)v37 >= *(void *)(a3 + 16))
        {
          uint64_t v39 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a3, &v71);
        }
        else
        {
          if (v37)
          {
            void *v37 = v71;
            uint64_t v38 = *((void *)&v71 + 1);
            v37[1] = *((void *)&v71 + 1);
            if (v38) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
            }
          }
          uint64_t v39 = v37 + 2;
        }
        *(void *)(a3 + 8) = v39;
        unsigned __int8 v40 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 128) + 3661));
        if (v40)
        {
          uint64_t v41 = *a2;
          double v42 = *(void **)(*a4 + 8 * v18);
          md::LabelStyle::styleName((uint64_t)v68, (uint64_t *)v71);
          md::LabelStyleCache::logStyleAttributes(a1, (uint64_t)"StyleQuery", (uint64_t)&v41[2 * v18], v42, v68);
          if (SHIBYTE(v69) < 0) {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70 + 40))(v70, v68[0], v69 & 0x7FFFFFFFFFFFFFFFLL);
          }
        }
        goto LABEL_25;
      }
      unsigned __int8 v27 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 128) + 3660));
      if ((v27 & 1) == 0)
      {
        unsigned __int8 v28 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 128) + 3661));
        if ((v28 & 1) == 0) {
          goto LABEL_43;
        }
      }
      uint64_t v29 = *a2;
      uint64_t v30 = *(void **)(*a4 + 8 * v18);
      {
        operator new();
      }
      uint64_t v67 = mdm::Allocator::instance(void)::alloc;
      HIBYTE(v66) = 8;
      strcpy((char *)v65, "No Style");
      md::LabelStyleCache::logStyleAttributes(a1, (uint64_t)"StyleQuery FAIL", (uint64_t)&v29[2 * v18], v30, v65);
      if (SHIBYTE(v66) < 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v67 + 40))(v67, v65[0], v66 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v31 = *(void *)(a1 + 128);
        if (!v31) {
          goto LABEL_69;
        }
      }
      else
      {
LABEL_43:
        uint64_t v31 = *(void *)(a1 + 128);
        if (!v31) {
          goto LABEL_69;
        }
      }
      unsigned __int8 v43 = atomic_load((unsigned __int8 *)(v31 + 3658));
      if (v43)
      {
        uint64_t v45 = *(void *)(a1 + 432);
        uint64_t v44 = *(void *)(a1 + 440);
        *(void *)&long long v72 = v45;
        *((void *)&v72 + 1) = v44;
        if (v44) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
        }
LABEL_72:
        uint64_t v46 = *(void **)(a3 + 8);
        unint64_t v47 = *(void *)(a3 + 16);
        if ((unint64_t)v46 < v47)
        {
          if (v46)
          {
            *uint64_t v46 = v45;
            v46[1] = v44;
            long long v72 = 0uLL;
          }
          double v48 = v46 + 2;
          goto LABEL_97;
        }
        uint64_t v49 = ((uint64_t)v46 - *(void *)a3) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          abort();
        }
        uint64_t v51 = v47 - *(void *)a3;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          uint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v52 = v50;
        }
        if (v52)
        {
          uint64_t v53 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 24) + 16))(*(void *)(a3 + 24), 16 * v52, 8);
          uint64_t v54 = (long long *)(v53 + 16 * v49);
          uint64_t v55 = v53 + 16 * v52;
          if (v53)
          {
            *uint64_t v54 = v72;
            long long v72 = 0uLL;
          }
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v54 = (long long *)(16 * v49);
        }
        double v48 = v54 + 1;
        uint64_t v56 = *(void **)a3;
        uint64_t v57 = *(void **)(a3 + 8);
        if (v57 == *(void **)a3)
        {
          *(void *)a3 = v54;
          *(void *)(a3 + 8) = v48;
          uint64_t v60 = *(void *)(a3 + 16);
          *(void *)(a3 + 16) = v55;
          if (!v57) {
            goto LABEL_97;
          }
        }
        else
        {
          do
          {
            long long v58 = *((_OWORD *)v57 - 1);
            v57 -= 2;
            *--uint64_t v54 = v58;
            void *v57 = 0;
            v57[1] = 0;
          }
          while (v57 != v56);
          uint64_t v57 = *(void **)a3;
          uint64_t v59 = *(void **)(a3 + 8);
          *(void *)a3 = v54;
          *(void *)(a3 + 8) = v48;
          uint64_t v60 = *(void *)(a3 + 16);
          *(void *)(a3 + 16) = v55;
          if (v59 != v57)
          {
            do
            {
              uint64_t v61 = (std::__shared_weak_count *)*(v59 - 1);
              if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
              v59 -= 2;
            }
            while (v59 != v57);
            uint64_t v19 = a1 + 320;
          }
          if (!v57) {
            goto LABEL_97;
          }
        }
        (*(void (**)(void, void *, uint64_t))(**(void **)(a3 + 24) + 40))(*(void *)(a3 + 24), v57, v60 - (void)v57);
LABEL_97:
        *(void *)(a3 + 8) = v48;
        uint64_t v62 = (std::__shared_weak_count *)*((void *)&v72 + 1);
        if (*((void *)&v72 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        goto LABEL_25;
      }
LABEL_69:
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      long long v72 = 0uLL;
      goto LABEL_72;
    }
    uint64_t v25 = *(void **)(a3 + 8);
    if ((unint64_t)v25 >= *(void *)(a3 + 16))
    {
      uint64_t v20 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a3, (long long *)(a1 + 432));
    }
    else
    {
      if (v25)
      {
        *uint64_t v25 = *(void *)(a1 + 432);
        uint64_t v26 = *(void *)(a1 + 440);
        v25[1] = v26;
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
      }
      uint64_t v20 = v25 + 2;
    }
    *(void *)(a3 + 8) = v20;
LABEL_25:
    ++v18;
  }
  while (v18 < ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v63 = (std::__shared_weak_count *)*((void *)&v71 + 1);
  std::mutex::unlock((std::mutex *)a1);
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
LABEL_108:
  if (v75) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v78 + 40))(v78, v75, 8 * v77);
  }
}

void sub_1A1988208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  uint64_t v15 = *(void *)(v13 - 144);
  if (v15) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 - 120) + 40))(*(void *)(v13 - 120), v15, 8 * *(void *)(v13 - 128));
  }
  _Unwind_Resume(a1);
}

void md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>((void *)(a2 + 32), *a3, (unsigned __int16 *)a3);
  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)v6[6];
  if (v8 != (uint64_t *)a2)
  {
    uint64_t v9 = *(uint64_t **)(a2 + 8);
    if (v9 != v8)
    {
      uint64_t v10 = (uint64_t *)v8[1];
      if (v10 != v9)
      {
        uint64_t v11 = *v8;
        *(void *)(v11 + 8) = v10;
        *(void *)v8[1] = v11;
        uint64_t v12 = *v9;
        *(void *)(v12 + 8) = v8;
        *uint64_t v8 = v12;
        uint64_t *v9 = (uint64_t)v8;
        v8[1] = (uint64_t)v9;
      }
    }
    ++*(_DWORD *)(a2 + 92);
    uint64_t v14 = v8[4];
    uint64_t v13 = v8[5];
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_10;
  }
  if (*((unsigned char *)v6 + 56))
  {
    ++*(_DWORD *)(a2 + 92);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
LABEL_10:
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  uint64_t v15 = (std::__shared_weak_count *)v6[5];
  if (!v15) {
    goto LABEL_19;
  }
  unint64_t v16 = std::__shared_weak_count::lock(v15);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = v16;
  uint64_t v18 = v7[4];
  if (!v18)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_19:
    ++*(_DWORD *)(a2 + 96);
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  uint64_t v19 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 48, 8);
  *uint64_t v19 = 0;
  v19[1] = 0;
  v19[2] = *a3;
  uint64_t v20 = a3[1];
  v19[3] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  v19[4] = v18;
  v19[5] = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  *uint64_t v19 = a2;
  unsigned __int8 v21 = *(void **)(a2 + 8);
  v19[1] = v21;
  *unsigned __int8 v21 = v19;
  uint64_t v22 = *(void *)(a2 + 16) + 1;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v22;
  v7[6] = v19;
  ++*(_DWORD *)(a2 + 92);
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v17;
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1A1988568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>(void *a1, uint64_t a2, unsigned __int16 *a3)
{
  unint64_t v3 = *(unsigned int **)(a2 + 240);
  uint64_t v4 = *(unsigned int **)(a2 + 248);
  uint64_t v5 = (char *)((char *)v4 - (char *)v3);
  unint64_t v6 = ((char *)v4 - (char *)v3) >> 3;
  if (v4 != v3)
  {
    uint64_t v7 = *(unsigned int **)(a2 + 240);
    do
    {
      unint64_t v8 = ((v6 << 6) - 0x61C8864680B583EBLL + (v6 >> 2) + *v7) ^ v6;
      unint64_t v6 = (*((unsigned __int16 *)v7 + 2) - 0x61C8864680B583EBLL + (v8 << 6) + (v8 >> 2)) ^ v8;
      v7 += 2;
    }
    while (v7 != v4);
  }
  unsigned int v9 = *(unsigned __int16 *)(a2 + 282);
  if (*(_WORD *)(a2 + 282))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = *(void *)(a2 + 272);
    do
    {
      if (v12 < v9)
      {
        uint64_t v11 = (unsigned int *)(v13 + 4 * v12);
        a3 = (unsigned __int16 *)(v13 + *(unsigned __int16 *)(a2 + 280) + 2 * v12);
      }
      v10 ^= (*a3
            - 0x61C8864680B583EBLL
            + ((((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v11) ^ v10) << 6)
            + ((((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v11) ^ v10) >> 2)) ^ ((v10 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v10 >> 2)
                                                                                       + *v11);
      unsigned int v14 = v12 + 1;
      if (v12 + 1 < v9) {
        ++v12;
      }
      else {
        unsigned int v12 = *(unsigned __int16 *)(a2 + 282);
      }
    }
    while (v14 < v9);
    int8x8_t v15 = (int8x8_t)a1[1];
    if (!*(void *)&v15) {
      return 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
    int8x8_t v15 = (int8x8_t)a1[1];
    if (!*(void *)&v15) {
      return 0;
    }
  }
  unint64_t v16 = v10 ^ v6;
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v15);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = v16;
    if (v16 >= *(void *)&v15) {
      unint64_t v18 = v16 % *(void *)&v15;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v15 - 1) & v16;
  }
  uint64_t v19 = *(void **)(*a1 + 8 * v18);
  if (!v19) {
    return 0;
  }
  double result = (void *)*v19;
  if (!*v19) {
    return result;
  }
  while (1)
  {
    unint64_t v21 = result[1];
    if (v21 != v16)
    {
      if (v17.u32[0] <= 1uLL)
      {
        v21 &= *(void *)&v15 - 1;
      }
      else if (v21 >= *(void *)&v15)
      {
        v21 %= *(void *)&v15;
      }
      if (v21 != v18) {
        return 0;
      }
      goto LABEL_24;
    }
    uint64_t v22 = result[2];
    uint64_t v23 = *(void *)(v22 + 240);
    uint64_t v24 = *(void *)(v22 + 248);
    if ((char *)(v24 - v23) == v5)
    {
      if (v23 != v24)
      {
        uint64_t v25 = *(void *)(a2 + 240);
        while (*(_DWORD *)v23 == *(_DWORD *)v25 && *(unsigned __int16 *)(v23 + 4) == *(unsigned __int16 *)(v25 + 4))
        {
          v23 += 8;
          v25 += 8;
          if (v23 == v24) {
            goto LABEL_35;
          }
        }
        goto LABEL_24;
      }
LABEL_35:
      unint64_t v27 = *(unsigned __int16 *)(v22 + 282);
      if (v27 == v9)
      {
        if (!*(_WORD *)(a2 + 282)) {
          return result;
        }
        unsigned __int8 v28 = *(_DWORD **)(v22 + 272);
        uint64_t v29 = *(_DWORD **)(a2 + 272);
        if (*v28 == *v29)
        {
          uint64_t v30 = *(unsigned __int16 *)(a2 + 280);
          uint64_t v31 = *(unsigned __int16 *)(v22 + 280);
          if (*(unsigned __int16 *)((char *)v28 + v31) == *(unsigned __int16 *)((char *)v29 + v30)) {
            break;
          }
        }
      }
    }
LABEL_24:
    double result = (void *)*result;
    if (!result) {
      return result;
    }
  }
  unint64_t v32 = 0;
  uint64_t v33 = v28 + 1;
  uint64_t v34 = v29 + 1;
  uint64_t v35 = (uint64_t)v28 + v31 + 2;
  uint64_t v36 = (uint64_t)v29 + v30 + 2;
  while (v27 - 1 != v32)
  {
    if (v33[v32] != v34[v32])
    {
      if (v32 + 1 < v27) {
        goto LABEL_24;
      }
      return result;
    }
    int v37 = *(unsigned __int16 *)(v35 + 2 * v32);
    int v38 = *(unsigned __int16 *)(v36 + 2 * v32++);
    if (v37 != v38)
    {
      if (v32 < v27) {
        goto LABEL_24;
      }
      return result;
    }
  }
  return result;
}

void md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::insert(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 48, 8);
  unint64_t v10 = v7;
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = *a2;
  uint64_t v11 = a2[1];
  v7[3] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7[4] = *a3;
  uint64_t v12 = a3[1];
  v7[5] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  void *v7 = a1;
  uint64_t v13 = *(void **)(a1 + 8);
  v7[1] = v13;
  *uint64_t v13 = v7;
  uint64_t v14 = *(void *)(a1 + 16) + 1;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)a3;
  uint64_t v16 = a3[1];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
  BOOL v17 = *a3 == 0;
  uint64_t v18 = *a2;
  uint64_t v19 = *(unsigned int **)(*a2 + 240);
  uint64_t v20 = *(unsigned int **)(*a2 + 248);
  unint64_t v21 = (char *)((char *)v20 - (char *)v19);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 3;
  if (v20 != v19)
  {
    uint64_t v23 = *(unsigned int **)(*a2 + 240);
    do
    {
      unint64_t v24 = ((v22 << 6) - 0x61C8864680B583EBLL + (v22 >> 2) + *v23) ^ v22;
      unint64_t v22 = (*((unsigned __int16 *)v23 + 2) - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
      v23 += 2;
    }
    while (v23 != v20);
  }
  unsigned int v25 = *(unsigned __int16 *)(v18 + 282);
  if (*(_WORD *)(v18 + 282))
  {
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    unsigned int v28 = 0;
    uint64_t v29 = *(void *)(v18 + 272);
    do
    {
      if (v28 < v25)
      {
        unint64_t v27 = (unsigned int *)(v29 + 4 * v28);
        unint64_t v8 = (unsigned __int16 *)(v29 + *(unsigned __int16 *)(v18 + 280) + 2 * v28);
      }
      v26 ^= (*v8
            - 0x61C8864680B583EBLL
            + ((((v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + *v27) ^ v26) << 6)
            + ((((v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + *v27) ^ v26) >> 2)) ^ ((v26 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v26 >> 2)
                                                                                       + *v27);
      uint64_t v9 = v28 + 1;
      if (v9 < v25) {
        ++v28;
      }
      else {
        unsigned int v28 = *(unsigned __int16 *)(v18 + 282);
      }
    }
    while (v9 < v25);
  }
  else
  {
    unint64_t v26 = 0;
  }
  uint64_t v30 = (uint64_t *)(a1 + 32);
  unint64_t v31 = v26 ^ v22;
  unint64_t v32 = *(void *)(a1 + 40);
  long long v90 = v15;
  if (!v32) {
    goto LABEL_55;
  }
  uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    unint64_t v3 = v26 ^ v22;
    if (v31 >= v32) {
      unint64_t v3 = v31 % v32;
    }
  }
  else
  {
    unint64_t v3 = (v32 - 1) & v31;
  }
  uint64_t v34 = *(uint64_t ***)(*v30 + 8 * v3);
  if (!v34 || (uint64_t v35 = *v34) == 0)
  {
LABEL_55:
    uint64_t v50 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), 64, 8);
    uint64_t v51 = v50;
    *(void *)uint64_t v50 = 0;
    *(void *)(v50 + 8) = v31;
    *(void *)(v50 + 16) = *a2;
    uint64_t v52 = a2[1];
    *(void *)(v50 + 24) = v52;
    if (v52) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(v50 + 32) = v90;
    *(void *)(v50 + 48) = v10;
    *(unsigned char *)(v50 + 56) = v17;
    float v53 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
    float v54 = *(float *)(a1 + 80);
    if (v32 && (float)(v54 * (float)v32) >= v53)
    {
LABEL_106:
      unint64_t v76 = *(uint64_t **)(*v30 + 8 * v3);
      if (v76)
      {
        *(void *)uint64_t v51 = *v76;
      }
      else
      {
        *(void *)uint64_t v51 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = v51;
        *(void *)(*(void *)(a1 + 32) + 8 * v3) = a1 + 56;
        if (!*(void *)v51)
        {
LABEL_115:
          ++*(void *)(a1 + 72);
          goto LABEL_116;
        }
        unint64_t v77 = *(void *)(*(void *)v51 + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v77 >= v32) {
            v77 %= v32;
          }
        }
        else
        {
          v77 &= v32 - 1;
        }
        unint64_t v76 = (uint64_t *)(*v30 + 8 * v77);
      }
      *unint64_t v76 = v51;
      goto LABEL_115;
    }
    BOOL v55 = 1;
    if (v32 >= 3) {
      BOOL v55 = (v32 & (v32 - 1)) != 0;
    }
    unint64_t v56 = v55 | (2 * v32);
    unint64_t v57 = vcvtps_u32_f32(v53 / v54);
    if (v56 <= v57) {
      size_t prime = v57;
    }
    else {
      size_t prime = v56;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v32 = *(void *)(a1 + 40);
    if (prime <= v32)
    {
      if (prime >= v32) {
        goto LABEL_93;
      }
      unint64_t v70 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v32 < 3 || (uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
      {
        unint64_t v70 = std::__next_prime(v70);
      }
      else
      {
        uint64_t v72 = 1 << -(char)__clz(v70 - 1);
        if (v70 >= 2) {
          unint64_t v70 = v72;
        }
      }
      if (prime <= v70) {
        size_t prime = v70;
      }
      if (prime >= v32)
      {
        unint64_t v32 = *(void *)(a1 + 40);
LABEL_93:
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v31 >= v32) {
            unint64_t v3 = v31 % v32;
          }
          else {
            unint64_t v3 = v31;
          }
        }
        else
        {
          unint64_t v3 = (v32 - 1) & v31;
        }
        goto LABEL_106;
      }
      if (!prime)
      {
        uint64_t v88 = *v30;
        *uint64_t v30 = 0;
        if (v88) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v88, 8 * *(void *)(a1 + 40));
        }
        unint64_t v32 = 0;
        *(void *)(a1 + 40) = 0;
        goto LABEL_93;
      }
    }
    uint64_t v59 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), 8 * prime, 8);
    uint64_t v60 = *v30;
    *uint64_t v30 = v59;
    if (v60) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v60, 8 * *(void *)(a1 + 40));
    }
    uint64_t v61 = 0;
    *(void *)(a1 + 40) = prime;
    do
      *(void *)(*v30 + 8 * v61++) = 0;
    while (prime != v61);
    uint64_t v63 = a1 + 56;
    uint64_t v62 = *(void **)(a1 + 56);
    if (!v62)
    {
LABEL_92:
      unint64_t v32 = prime;
      goto LABEL_93;
    }
    size_t v64 = v62[1];
    size_t v65 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v66 = v64 & v65;
      *(void *)(*v30 + 8 * v66) = v63;
      for (uint64_t i = (void *)*v62; *v62; uint64_t i = (void *)*v62)
      {
        size_t v68 = i[1] & v65;
        if (v68 == v66)
        {
          uint64_t v62 = i;
        }
        else if (*(void *)(*v30 + 8 * v68))
        {
          void *v62 = *i;
          uint64_t v69 = 8 * v68;
          void *i = **(void **)(*v30 + v69);
          **(void **)(*v30 + v69) = i;
        }
        else
        {
          *(void *)(*v30 + 8 * v68) = v62;
          uint64_t v62 = i;
          size_t v66 = v68;
        }
      }
      goto LABEL_92;
    }
    if (v64 >= prime) {
      v64 %= prime;
    }
    *(void *)(*v30 + 8 * v64) = v63;
    char v73 = (void *)*v62;
    if (!*v62) {
      goto LABEL_92;
    }
    while (1)
    {
      size_t v75 = v73[1];
      if (v75 >= prime) {
        v75 %= prime;
      }
      if (v75 != v64)
      {
        if (!*(void *)(*v30 + 8 * v75))
        {
          *(void *)(*v30 + 8 * v75) = v62;
          goto LABEL_97;
        }
        void *v62 = *v73;
        uint64_t v74 = 8 * v75;
        void *v73 = **(void **)(*v30 + v74);
        **(void **)(*v30 + v74) = v73;
        char v73 = v62;
      }
      size_t v75 = v64;
LABEL_97:
      uint64_t v62 = v73;
      char v73 = (void *)*v73;
      size_t v64 = v75;
      if (!v73) {
        goto LABEL_92;
      }
    }
  }
  while (1)
  {
    unint64_t v36 = v35[1];
    if (v36 != v31)
    {
      if (v33.u32[0] <= 1uLL)
      {
        v36 &= v32 - 1;
      }
      else if (v36 >= v32)
      {
        v36 %= v32;
      }
      if (v36 != v3) {
        goto LABEL_55;
      }
      goto LABEL_31;
    }
    uint64_t v37 = v35[2];
    uint64_t v39 = *(void *)(v37 + 240);
    uint64_t v38 = *(void *)(v37 + 248);
    if ((char *)(v38 - v39) == v21)
    {
      if (v39 != v38)
      {
        uint64_t v40 = *(void *)(*a2 + 240);
        do
        {
          uint64_t v9 = *(unsigned __int16 *)(v39 + 4);
          if (*(_DWORD *)v39 != *(_DWORD *)v40 || v9 != *(unsigned __int16 *)(v40 + 4)) {
            goto LABEL_31;
          }
          v39 += 8;
          v40 += 8;
        }
        while (v39 != v38);
      }
      unint64_t v42 = *(unsigned __int16 *)(v37 + 282);
      if (v42 == v25)
      {
        if (!*(_WORD *)(v18 + 282)) {
          break;
        }
        unsigned __int8 v43 = *(_DWORD **)(v37 + 272);
        uint64_t v44 = *(_DWORD **)(v18 + 272);
        if (*v43 == *v44)
        {
          uint64_t v45 = (unsigned __int16 *)((char *)v44 + *(unsigned __int16 *)(v18 + 280));
          uint64_t v46 = (unsigned __int16 *)((char *)v43 + *(unsigned __int16 *)(v37 + 280));
          uint64_t v9 = *v45;
          if (*v46 == v9)
          {
            uint64_t v9 = 1;
            do
            {
              if (v42 == v9) {
                goto LABEL_150;
              }
              unint64_t v47 = v9;
              uint64_t v48 = v9;
              int v49 = v43[v48];
              uint64_t v9 = v44[v48];
              if (v49 != v9) {
                break;
              }
              uint64_t v9 = v47 + 1;
            }
            while (v46[v47] == v45[v47]);
            if (v47 >= v42) {
              break;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v35 = (uint64_t *)*v35;
    if (!v35) {
      goto LABEL_55;
    }
  }
LABEL_150:
  uint64_t v89 = (std::__shared_weak_count *)v35[5];
  *((_OWORD *)v35 + 2) = v90;
  if (v89) {
    std::__shared_weak_count::__release_weak(v89);
  }
  v35[6] = (uint64_t)v10;
  *((unsigned char *)v35 + 56) = v17;
LABEL_116:
  unint64_t v78 = *(void *)(a1 + 16);
  if (v78 > *(unsigned int *)(a1 + 88))
  {
    while (2)
    {
      long long v79 = *(uint64_t **)a1;
      unint64_t v80 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>((void *)(a1 + 32), *(void *)(*(void *)a1 + 16), (unsigned __int16 *)v9);
      if (v80 && (uint64_t *)v80[6] == v79)
      {
        v80[6] = a1;
        long long v79 = *(uint64_t **)a1;
      }
      uint64_t v81 = *v79;
      *(void *)(v81 + 8) = v79[1];
      *(void *)v79[1] = v81;
      *(void *)(a1 + 16) = v78 - 1;
      long long v82 = (std::__shared_weak_count *)v79[5];
      if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
        long long v83 = (std::__shared_weak_count *)v79[3];
        if (v83) {
          goto LABEL_125;
        }
      }
      else
      {
        long long v83 = (std::__shared_weak_count *)v79[3];
        if (v83)
        {
LABEL_125:
          if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v79, 48);
      unint64_t v78 = *(void *)(a1 + 16);
      if (v78 <= *(unsigned int *)(a1 + 88)) {
        break;
      }
      continue;
    }
  }
  unsigned int v84 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v84;
  if (v84 >= 0x65)
  {
    *(_DWORD *)(a1 + 104) = 0;
    uint64_t v85 = *(void *)(a1 + 56);
    if (v85)
    {
      int v86 = 0;
      do
      {
        while (1)
        {
          if (!*(unsigned char *)(v85 + 56))
          {
            uint64_t v87 = *(void *)(v85 + 40);
            if (!v87 || *(void *)(v87 + 8) == -1) {
              break;
            }
          }
          uint64_t v85 = *(void *)v85;
          ++v86;
          if (!v85) {
            goto LABEL_139;
          }
        }
        uint64_t v85 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::erase(a1 + 32, (uint64_t *)v85);
      }
      while (v85);
    }
    else
    {
      int v86 = 0;
    }
LABEL_139:
    *(_DWORD *)(a1 + 100) = v86;
  }
}

void sub_1A1989128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyle::LabelStyle(uint64_t a1, void *a2, void *a3, char a4, char a5, uint64_t a6, char a7, float a8)
{
  uint64_t v10 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(float *)(a1 + 88) = a8;
  *(unsigned char *)(a1 + 92) = a4;
  *(unsigned char *)(a1 + 93) = a5;
  *(void *)(a1 + 94) = a6;
  *(unsigned char *)(a1 + 102) = a7;
  *(void *)(a1 + 104) = 0x3F800000437F0000;
  *(void *)(a1 + 112) = 0xFC00FC00FC00FC00;
  *(_WORD *)(a1 + 120) = 256;
  *(_DWORD *)(a1 + 122) = 0;
  *(unsigned char *)(a1 + 126) = 0;
  *(void *)(a1 + 128) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 136) = -1;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(void *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 377) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 359) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  __int16 v17 = 0;
  uint64_t v12 = geo::linear_map<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::equal_to<md::LabelStyle::StyleQueryOptions>,std::allocator<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>,std::vector<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>::operator[]((unsigned __int8 **)(a1 + 64), (unsigned __int8 *)&v17);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)v12 + 1);
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return a1;
}

void sub_1A19892F8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = (std::__shared_weak_count *)v1[56];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)v1[54];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[52];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)v1[50];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *v3;
  uint64_t *v3 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[46];
  v1[46] = 0;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = (char *)v1[42];
    if (!v11)
    {
LABEL_17:
      uint64_t v12 = (std::__shared_weak_count *)v1[41];
      if (!v12) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v11 = (char *)v1[42];
    if (!v11) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = (char *)v1[43];
  uint64_t v14 = v11;
  if (v13 != v11)
  {
    do
    {
      long long v15 = (uint64_t *)*((void *)v13 - 1);
      *((void *)v13 - 1) = 0;
      if (v15)
      {
        uint64_t v16 = *v15;
        *long long v15 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        MEMORY[0x1A6239270](v15, 0x1020C4034E03FFCLL);
      }
      v13 -= 16;
    }
    while (v13 != v11);
    uint64_t v14 = (char *)v1[42];
  }
  v1[43] = v11;
  operator delete(v14);
  uint64_t v12 = (std::__shared_weak_count *)v1[41];
  if (!v12)
  {
LABEL_31:
    __int16 v17 = (char *)*v2;
    if (*v2)
    {
      uint64_t v18 = (char *)v1[9];
      uint64_t v19 = *v2;
      if (v18 != v17)
      {
        do
        {
          uint64_t v20 = (std::__shared_weak_count *)*((void *)v18 - 1);
          if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          v18 -= 24;
        }
        while (v18 != v17);
        uint64_t v19 = *v2;
      }
      v1[9] = v17;
      operator delete(v19);
    }
    unint64_t v21 = (std::__shared_weak_count *)v1[7];
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    unint64_t v22 = (std::__shared_weak_count *)v1[5];
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v23 = (std::__shared_weak_count *)v1[3];
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    unint64_t v24 = (std::__shared_weak_count *)v1[1];
    if (v24)
    {
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    _Unwind_Resume(exception_object);
  }
LABEL_29:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  goto LABEL_31;
}

unsigned __int8 *md::LabelStyle::styleQueryForComponent(unsigned __int8 **a1, uint64_t a2, int a3)
{
  LOBYTE(v74) = a2;
  BYTE1(v74) = a3;
  unint64_t v6 = geo::linear_map<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::equal_to<md::LabelStyle::StyleQueryOptions>,std::allocator<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>,std::vector<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>::operator[](a1 + 8, (unsigned __int8 *)&v74);
  uint64_t v7 = v6;
  if (*(void *)v6) {
    return v7;
  }
  unint64_t v8 = *a1;
  uint64_t v74 = 0;
  size_t v75 = 0;
  uint64_t v9 = *((void *)v8 + 33);
  unint64_t v76 = 0;
  uint64_t v77 = v9;
  uint64_t v10 = *((void *)v8 + 30);
  uint64_t v11 = *((void *)v8 + 31);
  uint64_t v12 = v11 - v10;
  size_t v68 = v6;
  if (v11 == v10)
  {
    unint64_t v17 = 0;
    uint64_t v34 = 0;
    uint64_t v23 = 0;
    char v24 = 1;
  }
  else
  {
    if (v12 < 0) {
      abort();
    }
    uint64_t v13 = v12 >> 3;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    long long v15 = (char *)v14;
    uint64_t v16 = 0;
    unint64_t v17 = v14 + 8 * v13;
    uint64_t v74 = (uint64_t *)v14;
    unint64_t v76 = v17;
    do
    {
      if (v14 + v16) {
        *(void *)(v14 + v16) = *(void *)(v10 + v16);
      }
      v16 += 8;
    }
    while (v10 + v16 != v11);
    uint64_t v18 = v14 + v16;
    uint64_t v19 = (char *)v14;
    uint64_t v21 = v18 - v14;
    BOOL v20 = v18 == v14;
    uint64_t v22 = (v18 - v14) >> 3;
    uint64_t v23 = (char *)(v14 + (v21 & 0xFFFFFFFFFFFFFFF8));
    size_t v75 = v23;
    char v24 = v20;
    if (!v20)
    {
      uint64_t v25 = 8 * v22;
      uint64_t v19 = (char *)v14;
      while (*(_DWORD *)v19 != 65612)
      {
        v19 += 8;
        v25 -= 8;
        if (!v25)
        {
          char v24 = 0;
          goto LABEL_30;
        }
      }
    }
    if (v19 != v23)
    {
      unint64_t v26 = (char *)v14;
      if ((unint64_t)v23 >= v17) {
        goto LABEL_18;
      }
LABEL_72:
      if (v23)
      {
        uint64_t v57 = 65594;
        if (a3) {
          uint64_t v57 = 0x10001003ALL;
        }
        *(void *)uint64_t v23 = v57;
      }
      unint64_t v36 = v23 + 8;
      uint64_t v7 = v68;
      goto LABEL_77;
    }
LABEL_30:
    if (v22 < v13)
    {
      if (v14) {
        *(void *)uint64_t v23 = ((a2 << 32) | 0x1003A) + 18;
      }
      uint64_t v35 = v23 + 8;
      goto LABEL_71;
    }
    uint64_t v34 = v14;
  }
  uint64_t v44 = &v23[-v34];
  uint64_t v45 = (uint64_t)&v23[-v34] >> 3;
  unint64_t v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 61) {
    abort();
  }
  unint64_t v47 = v17 - v34;
  if ((uint64_t)(v17 - v34) >> 2 > v46) {
    unint64_t v46 = (uint64_t)(v17 - v34) >> 2;
  }
  if (v47 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v46;
  }
  if (v17)
  {
    unint64_t v67 = v47;
    uint64_t v48 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v9 + 16))(v9, 8 * v17, 4);
    long long v15 = (char *)(v48 + 8 * v45);
    unint64_t v17 = v48 + 8 * v17;
    if (v48) {
      *(void *)long long v15 = ((a2 << 32) | 0x1003A) + 18;
    }
    unint64_t v47 = v67;
    uint64_t v35 = v15 + 8;
    if (v24) {
      goto LABEL_69;
    }
  }
  else
  {
    long long v15 = (char *)(8 * v45);
    uint64_t v35 = v15 + 8;
    if (v24) {
      goto LABEL_69;
    }
  }
  if ((unint64_t)(v44 - 8) < 0x38)
  {
    uint64_t v50 = v23;
    do
    {
LABEL_68:
      uint64_t v56 = *((void *)v50 - 1);
      v50 -= 8;
      *((void *)v15 - 1) = v56;
      v15 -= 8;
    }
    while (v50 != (char *)v34);
    goto LABEL_69;
  }
  if ((unint64_t)(v23 - v15) < 0x20)
  {
    uint64_t v50 = v23;
    goto LABEL_68;
  }
  unint64_t v49 = ((unint64_t)(v44 - 8) >> 3) + 1;
  uint64_t v50 = &v23[-8 * (v49 & 0x3FFFFFFFFFFFFFFCLL)];
  uint64_t v51 = v15 - 16;
  uint64_t v52 = v23 - 16;
  uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v54 = *(_OWORD *)v52;
    *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
    *(_OWORD *)uint64_t v51 = v54;
    v51 -= 32;
    v52 -= 32;
    v53 -= 4;
  }
  while (v53);
  v15 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
  if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_68;
  }
LABEL_69:
  uint64_t v74 = (uint64_t *)v15;
  unint64_t v76 = v17;
  if (v34) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 40))(v9, v34, v47);
  }
LABEL_71:
  size_t v75 = v35;
  unint64_t v26 = v15;
  uint64_t v23 = v35;
  if ((unint64_t)v35 < v17) {
    goto LABEL_72;
  }
LABEL_18:
  uint64_t v27 = (v23 - v26) >> 3;
  unint64_t v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 61) {
    abort();
  }
  if ((uint64_t)(v17 - (void)v26) >> 2 > v28) {
    unint64_t v28 = (uint64_t)(v17 - (void)v26) >> 2;
  }
  if (v17 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v29 = v28;
  }
  if (v29)
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77 + 16))(v77, 8 * v29, 4);
    unint64_t v31 = (uint64_t *)(v30 + 8 * v27);
    uint64_t v32 = v30 + 8 * v29;
    if (v30)
    {
      uint64_t v33 = 65594;
      if (a3) {
        uint64_t v33 = 0x10001003ALL;
      }
      *unint64_t v31 = v33;
    }
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v31 = (uint64_t *)(8 * v27);
  }
  unint64_t v36 = (char *)(v31 + 1);
  if (v23 == v26)
  {
    uint64_t v7 = v68;
    goto LABEL_64;
  }
  unint64_t v37 = v23 - v26 - 8;
  if (v37 < 0x38 || (unint64_t)(v23 - (char *)v31) < 0x20)
  {
    uint64_t v39 = v23;
    uint64_t v7 = v68;
    do
    {
LABEL_63:
      uint64_t v55 = *((void *)v39 - 1);
      v39 -= 8;
      *--unint64_t v31 = v55;
    }
    while (v39 != v26);
    goto LABEL_64;
  }
  uint64_t v38 = (v37 >> 3) + 1;
  uint64_t v39 = &v23[-8 * (v38 & 0x3FFFFFFFFFFFFFFCLL)];
  uint64_t v40 = v31 - 2;
  uint64_t v41 = v23 - 16;
  uint64_t v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v43 = *(_OWORD *)v41;
    *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
    *(_OWORD *)uint64_t v40 = v43;
    v40 -= 4;
    v41 -= 32;
    v42 -= 4;
  }
  while (v42);
  v31 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v7 = v68;
  if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_63;
  }
LABEL_64:
  uint64_t v74 = v31;
  unint64_t v76 = v32;
  if (v26) {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v77 + 40))(v77, v26, v17 - (void)v26);
  }
LABEL_77:
  size_t v75 = v36;
  long long v58 = *a1;
  uint64_t v59 = (std::__shared_weak_count *)*((void *)*a1 + 2);
  if (v59)
  {
    uint64_t v60 = std::__shared_weak_count::lock(v59);
    char v73 = v60;
    if (v60)
    {
      uint64_t v61 = *((void *)v58 + 1);
      uint64_t v72 = v61;
      if (v61)
      {
        gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v69, (uint64_t)&v74);
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v71, v61, (gss::FeatureAttributeSet *)v69, (gss::QueryOverrides *)(*a1 + 272));
        long long v62 = v71;
        long long v71 = 0uLL;
        uint64_t v63 = (std::__shared_weak_count *)*((void *)v7 + 1);
        *(_OWORD *)uint64_t v7 = v62;
        if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        size_t v64 = (std::__shared_weak_count *)*((void *)&v71 + 1);
        if (*((void *)&v71 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        if (v69[0])
        {
          v69[1] = v69[0];
          (*(void (**)(uint64_t, void, void))(*(void *)v70 + 40))(v70, v69[0], v69[2] - v69[0]);
        }
        size_t v65 = v73;
        if (!v73) {
          goto LABEL_93;
        }
      }
      else
      {
        size_t v65 = v60;
      }
      if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
LABEL_93:
  if (v74) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v77 + 40))(v77, v74, v76 - (void)v74);
  }
  return v7;
}

void sub_1A1989D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, a11, a13 - a11);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a17);
  if (a19)
  {
    a20 = a19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a22 + 40))(a22, a19, a21 - a19);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *geo::linear_map<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::equal_to<md::LabelStyle::StyleQueryOptions>,std::allocator<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>,std::vector<std::pair<md::LabelStyle::StyleQueryOptions,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>::operator[](unsigned __int8 **a1, unsigned __int8 *a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  if (*a1 != v4)
  {
    uint64_t v5 = *a1;
    while (*a2 != *v5 || a2[1] != v5[1])
    {
      v5 += 24;
      if (v5 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v4)
  {
LABEL_10:
    unsigned int v7 = *(unsigned __int16 *)a2;
    uint64_t v5 = *a1;
    if (v3 != v4)
    {
      uint64_t v5 = *a1;
      while (*v5 != *(_WORD *)a2 || v5[1] != v7 >> 8)
      {
        v5 += 24;
        if (v5 == v4) {
          goto LABEL_19;
        }
      }
    }
    if (v5 == v4)
    {
LABEL_19:
      uint64_t v9 = a1[2];
      if (v4 >= v9)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) + 1;
        if (v10 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v3) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v13 = (char *)operator new(24 * v12);
        uint64_t v5 = (unsigned __int8 *)&v13[8 * ((v4 - v3) >> 3)];
        *(_WORD *)uint64_t v5 = v7;
        uint64_t v14 = (unsigned __int8 *)&v13[24 * v12];
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        long long v15 = v5 + 24;
        if (v3 == v4)
        {
          *a1 = v5;
          a1[1] = v15;
          a1[2] = v14;
        }
        else
        {
          uint64_t v16 = &v13[8 * ((v4 - v3) >> 3)];
          do
          {
            __int16 v17 = *((_WORD *)v4 - 12);
            v4 -= 24;
            *((_WORD *)v16 - 12) = v17;
            v16 -= 24;
            *(_OWORD *)(v16 + 8) = *(_OWORD *)(v4 + 8);
            *((void *)v4 + 1) = 0;
            *((void *)v4 + 2) = 0;
          }
          while (v4 != v3);
          unint64_t v3 = *a1;
          uint64_t v18 = a1[1];
          *a1 = (unsigned __int8 *)v16;
          a1[1] = v15;
          for (a1[2] = v14; v18 != v3; v18 -= 24)
          {
            uint64_t v19 = (std::__shared_weak_count *)*((void *)v18 - 1);
            if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
        if (v3) {
          operator delete(v3);
        }
        a1[1] = v15;
      }
      else
      {
        *(_WORD *)uint64_t v4 = v7;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        a1[1] = v4 + 24;
        uint64_t v5 = v4;
      }
    }
  }
  return v5 + 8;
}

void sub_1A198A0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelFeatureStyler::styleLabelFeatures(unsigned int *a1, char **a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (*a2 == a2[1]) {
    return;
  }
  unsigned int v7 = atomic_load(a1 + 2);
  unsigned int v100 = v7;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v96 = a5;
  unint64_t v8 = (id)GEOGetVectorKitPerformanceLog_log;
  BOOL v9 = os_signpost_enabled(v8);
  if (a4)
  {
    if (!v9) {
      goto LABEL_10;
    }
    *(_WORD *)buf = 0;
    unint64_t v10 = "LabelsTileDecodeStyleFeatures";
  }
  else
  {
    if (!v9) {
      goto LABEL_10;
    }
    *(_WORD *)buf = 0;
    unint64_t v10 = "LabelsStyleFeatures";
  }
  _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, v10, "", buf, 2u);
LABEL_10:

  v115 = 0;
  uint64_t v116 = 0;
  unint64_t v117 = 0;
  {
    operator new();
  }
  uint64_t v118 = mdm::Allocator::instance(void)::alloc;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v12 = v115;
  if (v11 > (uint64_t)(v117 - (void)v115) >> 4)
  {
    if (v11 >> 60) {
      abort();
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 0xAAAAAAAAAAAAAAB0 * ((a2[1] - *a2) >> 3), 8);
    v115 = (uint64_t *)(v13 + (char *)v116 - (char *)v115);
    uint64_t v116 = (uint64_t *)(v13 + (char *)v116 - (char *)v12);
    unint64_t v117 = v13 + 16 * v11;
  }
  int v95 = a4;
  unint64_t v111 = 0;
  unint64_t v112 = 0;
  uint64_t v113 = 0;
  {
    operator new();
  }
  uint64_t v114 = mdm::Allocator::instance(void)::alloc;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v14 <= (v113 - (uint64_t)v111) >> 3)
  {
    unint64_t v16 = (unint64_t)v111;
  }
  else
  {
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 0x5555555555555558 * ((a2[1] - *a2) >> 3), 8);
    unint64_t v16 = v15 + ((v112 - v111) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v111 = (char *)v16;
    unint64_t v112 = (char *)v16;
    uint64_t v113 = v15 + 8 * v14;
  }
  uint64_t v17 = *(void *)(*(void *)a1 + 336);
  std::mutex::lock((std::mutex *)(v17 + 64));
  uint64_t v18 = *(std::__shared_weak_count **)(v17 + 192);
  uint64_t v109 = *(void *)(v17 + 184);
  unint64_t v110 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock((std::mutex *)(v17 + 64));
  BOOL v20 = *a2;
  uint64_t v19 = a2[1];
  uint64_t v101 = v19;
  while (v20 != v19)
  {
    *((void *)v20 + 1) = ((char *)v116 - (char *)v115) >> 4;
    (*(void (**)(void, uint64_t **, uint64_t *))(**(void **)v20 + 568))(*(void *)v20, &v115, &v109);
    uint64_t v22 = ((char *)v116 - (char *)v115) >> 4;
    uint64_t v23 = *((void *)v20 + 1);
    unint64_t v24 = v22 - v23;
    *((void *)v20 + 2) = v22 - v23;
    if (v22 == v23) {
      goto LABEL_22;
    }
    uint64_t v25 = v112;
    unint64_t v26 = (unint64_t)&v112[-v16];
    uint64_t v27 = (uint64_t)&v112[-v16] >> 3;
    unint64_t v28 = (char *)(v16 + ((unint64_t)&v112[-v16] & 0xFFFFFFFFFFFFFFF8));
    if (v24 <= (v113 - (uint64_t)v112) >> 3)
    {
      unint64_t v33 = (v112 - v28) >> 3;
      if (v24 <= v33)
      {
        uint64_t v35 = v112;
        unint64_t v33 = v22 - v23;
        goto LABEL_42;
      }
      uint64_t v34 = 0;
      uint64_t v35 = &v112[8 * (v24 - v33)];
      do
      {
        if (&v25[v34]) {
          *(void *)&v25[v34] = *(void *)v20;
        }
        v34 += 8;
      }
      while (8 * v22 - 8 * v23 - 8 * v33 != v34);
      unint64_t v112 = v35;
      if (v25 != v28)
      {
LABEL_42:
        unint64_t v36 = &v35[-8 * v24];
        unint64_t v37 = v35;
        while (v36 < v25)
        {
          if (v37) {
            *(void *)unint64_t v37 = *(void *)v36;
          }
          v36 += 8;
          v37 += 8;
        }
        uint64_t v38 = &v28[8 * v24];
        unint64_t v112 = v37;
        if (v35 != v38) {
          memmove(&v35[-8 * ((v35 - v38) >> 3)], v28, v35 - v38);
        }
        if (v37 <= v20) {
          unint64_t v39 = 0;
        }
        else {
          unint64_t v39 = v24;
        }
        if (v28 > v20) {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (const double *)&v20[8 * v39];
        if (v33 >= 0xA
          && (v28 < (char *)v40 + 8
            ? (BOOL v41 = (unint64_t)v40 >= v16 + (v26 & 0xFFFFFFFFFFFFFFF8) + 8 * v33)
            : (BOOL v41 = 1),
              v41))
        {
          v28 += 8 * (v33 & 0xFFFFFFFFFFFFFFFCLL);
          float64x2_t v42 = vld1q_dup_f64(v40);
          long long v43 = (float64x2_t *)(v16 + 8 * v27 + 16);
          unint64_t v44 = v33 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v43[-1] = v42;
            *long long v43 = v42;
            v43 += 2;
            v44 -= 4;
          }
          while (v44);
          if (v33 != (v33 & 0xFFFFFFFFFFFFFFFCLL))
          {
            v33 &= 3u;
            goto LABEL_64;
          }
        }
        else
        {
          do
          {
LABEL_64:
            *(double *)unint64_t v28 = *v40;
            v28 += 8;
            --v33;
          }
          while (v33);
        }
      }
LABEL_22:
      uint64_t v21 = (void *)v16;
      goto LABEL_23;
    }
    unint64_t v29 = v27 + v24;
    if ((v27 + v24) >> 61) {
      abort();
    }
    uint64_t v30 = v113 - v16;
    if ((uint64_t)(v113 - v16) >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v31 = v29;
    }
    if (v31) {
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v114 + 16))(v114, 8 * v31, 8);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v45 = v27;
    uint64_t v21 = (void *)(v32 + 8 * v27);
    unint64_t v46 = (char *)&v21[v24];
    uint64_t v47 = 8 * v22 - 8 * v23;
    uint64_t v48 = v21;
    do
    {
      if (v48) {
        *uint64_t v48 = *(void *)v20;
      }
      ++v48;
      v47 -= 8;
    }
    while (v47);
    unint64_t v49 = v111;
    if (v111 != v28)
    {
      unint64_t v50 = (v26 & 0xFFFFFFFFFFFFFFF8) + v16;
      unint64_t v51 = v50 - (void)v111 - 8;
      if (v51 >= 0x68)
      {
        uint64_t v52 = v28;
        if (v50 - ((v26 & 0xFFFFFFFFFFFFFFF8) + v32) >= 0x20)
        {
          uint64_t v53 = (v51 >> 3) + 1;
          uint64_t v52 = &v28[-8 * (v53 & 0x3FFFFFFFFFFFFFFCLL)];
          long long v54 = (long long *)(v16 + 8 * v45 - 16);
          uint64_t v55 = (_OWORD *)(v32 + 8 * v45 - 16);
          uint64_t v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v54 -= 2;
            v55 -= 2;
            v56 -= 4;
          }
          while (v56);
          v21 -= v53 & 0x3FFFFFFFFFFFFFFCLL;
          if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_80;
          }
        }
      }
      else
      {
        uint64_t v52 = v28;
      }
      do
      {
        uint64_t v58 = *((void *)v52 - 1);
        v52 -= 8;
        *--uint64_t v21 = v58;
      }
      while (v52 != v49);
      uint64_t v25 = v112;
    }
LABEL_80:
    if (v25 != v28)
    {
      unint64_t v59 = (v26 & 0xFFFFFFFFFFFFFFF8) + v16;
      unint64_t v60 = (unint64_t)&v25[-v59 - 8];
      if (v60 < 0x68) {
        goto LABEL_157;
      }
      if ((v26 & 0xFFFFFFFFFFFFFFF8) + v32 + 8 * v24 - v59 < 0x20) {
        goto LABEL_157;
      }
      uint64_t v61 = (v60 >> 3) + 1;
      uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      v28 += v62;
      uint64_t v63 = (long long *)(v16 + 8 * v45 + 16);
      size_t v64 = (_OWORD *)(v32 + 8 * v22 + 8 * v45 - 8 * v23 + 16);
      uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v66 = *v63;
        *(v64 - 1) = *(v63 - 1);
        _OWORD *v64 = v66;
        v63 += 2;
        v64 += 2;
        v65 -= 4;
      }
      while (v65);
      v46 += v62;
      if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_157:
        do
        {
          uint64_t v67 = *(void *)v28;
          v28 += 8;
          *(void *)unint64_t v46 = v67;
          v46 += 8;
        }
        while (v28 != v25);
      }
    }
    size_t v68 = v111;
    uint64_t v69 = v113;
    unint64_t v111 = (char *)v21;
    unint64_t v112 = v46;
    uint64_t v113 = v32 + 8 * v31;
    if (v68) {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v114 + 40))(v114, v68, v69 - (void)v68);
    }
LABEL_23:
    v20 += 24;
    unint64_t v16 = (unint64_t)v21;
    uint64_t v19 = v101;
  }
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  {
    operator new();
  }
  uint64_t v108 = mdm::Allocator::instance(void)::alloc;
  std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve((uint64_t)&v105, ((char *)v116 - (char *)v115) >> 4);
  md::LabelStyleCache::requestStyles(*(void *)(*(void *)a1 + 336), &v115, (uint64_t)&v105, &v111);
  long long v71 = *a2;
  uint64_t v70 = a2[1];
  if (v96 && (unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((v70 - v71) >> 3), v72 > 0x14))
  {
    v102[0] = MEMORY[0x1E4F143A8];
    v102[1] = 3221225472;
    v102[2] = ___ZN2md18LabelFeatureStyler18styleLabelFeaturesERNSt3__16vectorINS_22LabelFeatureStylerItemEN3geo12StdAllocatorIS3_N3mdm9AllocatorEEEEEbbPNS4_9TaskQueueE_block_invoke;
    v102[3] = &__block_descriptor_69_e8_v16__0Q8l;
    v102[4] = 0xAAAAAAAAAAAAAAABLL * ((v70 - v71) >> 3);
    v102[5] = a2;
    v102[6] = &v115;
    v102[7] = &v105;
    char v104 = a3;
    unsigned int v103 = v100;
    char v73 = v102;
    long long v121 = &unk_1EF55A098;
    id v122 = 0;
    uint64_t v74 = (void *)[v73 copy];
    id v75 = v122;
    id v122 = v74;

    geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(&v119, (uint64_t)&v121);
    uint64_t v124 = 0;
    unint64_t v76 = operator new(0x20uLL);
    *unint64_t v76 = &unk_1EF57AA10;
    v76[1] = &unk_1EF55A098;
    v76[2] = 0;
    uint64_t v77 = MEMORY[0x1A6239EB0](v120);
    unint64_t v78 = (void *)v76[2];
    v76[2] = v77;

    id v79 = v120;
    id v120 = 0;

    uint64_t v124 = v76;
    if (*(unsigned char *)(v96 + 58)) {
      id v80 = *(id *)(v96 + 72);
    }
    else {
      id v80 = 0;
    }
    uint64_t v81 = *(id *)(v96 + 16);
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v126 = 3321888768;
    unint64_t v127 = ___ZN3geo9TaskQueue5applyEmNSt3__18functionIFvmEEE_block_invoke;
    uint64_t v128 = &unk_1EF58E830;
    id v82 = v80;
    id v129 = v82;
    uint64_t v83 = (uint64_t)v124;
    if (v124)
    {
      if (v124 != v123)
      {
        uint64_t v83 = (*(uint64_t (**)(void))(*v124 + 16))();
        goto LABEL_101;
      }
      uint64_t v131 = v130;
      (*(void (**)(void *, void *))(v123[0] + 24))(v123, v130);
    }
    else
    {
LABEL_101:
      uint64_t v131 = (void *)v83;
    }
    dispatch_apply((v72 + 19) / 0x14, v81, buf);

    if (v131 == v130)
    {
      (*(void (**)(void *))(v130[0] + 32))(v130);
    }
    else if (v131)
    {
      (*(void (**)(void))(*v131 + 40))();
    }

    if (v124 == v123)
    {
      (*(void (**)(void *))(v123[0] + 32))(v123);
    }
    else if (v124)
    {
      (*(void (**)(void))(*v124 + 40))();
    }
    float32x4x2_t v119 = &unk_1EF55A098;

    long long v121 = &unk_1EF55A098;
  }
  else
  {
    for (; v71 != v70; v71 += 24)
      (*(void (**)(void, uint64_t *, uint64_t, void, void, void, void))(**(void **)v71 + 576))(*(void *)v71, &v115[2 * *((void *)v71 + 1)], v105 + 16 * *((void *)v71 + 1), *((void *)v71 + 2), a3, v100, 0);
  }
  if (v95)
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    unsigned int v84 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v84))
    {
      *(_WORD *)buf = 0;
      uint64_t v85 = "LabelsTileDecodeStyleFeatures";
      goto LABEL_121;
    }
  }
  else
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    unsigned int v84 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v84))
    {
      *(_WORD *)buf = 0;
      uint64_t v85 = "LabelsStyleFeatures";
LABEL_121:
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v84, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v85, "", buf, 2u);
    }
  }

  uint64_t v86 = v105;
  if (v105)
  {
    uint64_t v87 = v106;
    uint64_t v88 = v105;
    if (v106 != v105)
    {
      do
      {
        uint64_t v89 = *(std::__shared_weak_count **)(v87 - 8);
        if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v89->__on_zero_shared)(v89, v88);
          std::__shared_weak_count::__release_weak(v89);
        }
        v87 -= 16;
      }
      while (v87 != v86);
      uint64_t v88 = v105;
    }
    uint64_t v106 = v86;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v108 + 40))(v108, v88, v107 - v88);
  }
  long long v90 = v110;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  if (v111)
  {
    unint64_t v112 = v111;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v114 + 40))(v114, v111, v113 - (void)v111);
  }
  int v91 = v115;
  if (v115)
  {
    uint64_t v92 = v116;
    long long v93 = v115;
    if (v116 != v115)
    {
      do
      {
        uint64_t v94 = (std::__shared_weak_count *)*(v92 - 1);
        if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t *))v94->__on_zero_shared)(v94, v93);
          std::__shared_weak_count::__release_weak(v94);
        }
        v92 -= 2;
      }
      while (v92 != v91);
      long long v93 = v115;
    }
    uint64_t v116 = v91;
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v118 + 40))(v118, v93, v117 - (void)v93);
  }
}

void sub_1A198B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,id a40)
{
  std::function<void ()(unsigned long)>::~function((void *)(v44 - 208));
  a39 = &unk_1EF55A098;

  *(void *)(v44 - 232) = v42;
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a29);
  if (a31)
  {
    a32 = a31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a34 + 40))(a34, a31, a33 - a31);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a35);
  _Unwind_Resume(a1);
}

void md::LineLabelFeature::populateStyleQueries(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = 0;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t *, void))(*a1 + 480))(a1, 0))
  {
    operator new();
  }
  md::createFeatureAttributeSet((gss::Allocator *)v12, a1 + 52);
  md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v10, a3, v12, 0);
  if (v12[0])
  {
    v12[1] = v12[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v12[0], v12[2] - v12[0]);
  }
  unint64_t v6 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v6 >= *(void *)(a2 + 16))
  {
    unsigned int v7 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v10);
  }
  else
  {
    if (v6)
    {
      *unint64_t v6 = v10;
      long long v10 = 0uLL;
    }
    unsigned int v7 = v6 + 1;
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = v11;
  if (v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      (*(void (**)(void, void, uint64_t))(**(void **)(v11 + 24) + 40))(*(void *)(v11 + 24), *(void *)v11, *(void *)(v11 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    }
    MEMORY[0x1A6239270](v9, 0x1032C402ED93987);
  }
}

void sub_1A198B4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t md::LineLabelFeature::publicNameCount(md::LineLabelFeature *this)
{
  return (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 6;
}

uint64_t md::LineLabelFeature::setStyle(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  md::LabelFeature::setStyle((md::LabelFeature *)a1, a2, a3, a4, a5, a6);
  unsigned int v7 = *(void **)(a1 + 272);
  for (uint64_t i = *(void **)(a1 + 280); v7 != i; v7 += 10)
  {
    uint64_t v9 = (std::__shared_weak_count *)v7[3];
    v7[2] = 0;
    v7[3] = 0;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    long long v10 = (std::__shared_weak_count *)v7[5];
    uint64_t v7[4] = 0;
    v7[5] = 0;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)v7[7];
    v7[6] = 0;
    v7[7] = 0;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    unint64_t v12 = (std::__shared_weak_count *)v7[9];
    v7[8] = 0;
    v7[9] = 0;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_DWORD *)(a1 + 304) = -1;
  uint64_t v13 = *(md::SharedDeviceResources **)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (v13)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v13);
    MEMORY[0x1A6239270]();
  }
  uint64_t result = std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(a1 + 320, *(void **)(a1 + 328));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 433) = 1;
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(v3, a2[1]);
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

uint64_t md::LineLabelFeature::publicLocale(md::LineLabelFeature *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 48);
  uint64_t v3 = *((void *)this + 49) - v2;
  uint64_t v4 = v2 + (a2 << 6) + 32;
  if (a2 >= v3 >> 6) {
    return 0;
  }
  else {
    return v4;
  }
}

void std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
    uint64_t v4 = 16 * a2;
    uint64_t v5 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * a2, 8);
    uint64_t v6 = v5 + v3;
    uint64_t v7 = v5 + v4;
    unint64_t v8 = *(void **)a1;
    uint64_t v9 = *(void **)(a1 + 8);
    if (v9 == *(void **)a1)
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v10 = v5 + v3;
      do
      {
        long long v11 = *((_OWORD *)v9 - 1);
        v9 -= 2;
        *(_OWORD *)(v10 - 16) = v11;
        v10 -= 16;
        void *v9 = 0;
        v9[1] = 0;
      }
      while (v9 != v8);
      uint64_t v9 = *(void **)a1;
      unint64_t v12 = *(void **)(a1 + 8);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v6;
      for (*(void *)(a1 + 16) = v7; v12 != v9; v12 -= 2)
      {
        uint64_t v13 = (std::__shared_weak_count *)*(v12 - 1);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    if (v9)
    {
      unint64_t v14 = *(void (**)(void))(**(void **)(a1 + 24) + 40);
      v14();
    }
  }
}

uint64_t std::vector<BOOL,geo::StdAllocator<BOOL,mdm::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > *(void *)(result + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    uint64_t v2 = (void *)result;
    uint64_t v3 = *(void *)(result + 24);
    unint64_t v4 = ((a2 - 1) >> 6) + 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v3 + 16))(v3, 8 * v4, 8);
    uint64_t v5 = (void *)*v2;
    unint64_t v6 = v2[1];
    unint64_t v7 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v7 = 0;
    }
    *(void *)(result + 8 * v7) = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v8 = 0;
      int v9 = 0;
      uint64_t v10 = (void *)result;
      long long v11 = v5;
      do
      {
        uint64_t v12 = 1 << v8;
        if ((*v11 >> v9)) {
          uint64_t v13 = *v10 | v12;
        }
        else {
          uint64_t v13 = *v10 & ~v12;
        }
        *uint64_t v10 = v13;
        v11 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
        v10 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v9 != (v6 & 0x3F) || v11 != &v5[v6 >> 6]);
    }
    *uint64_t v2 = result;
    v2[1] = v6;
    v2[2] = v4;
    if (v5)
    {
      unint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 40);
      return v14(v3);
    }
  }
  return result;
}

void std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EF55A098;

  operator delete((void *)a1);
}

void md::SelectedLabelLayerDataSource::SelectedLabelLayerDataSource(md::SingleGEOResourceLayerDataSource *a1, int a2, gdc::LayerDataStore *a3, void *a4, gdc::ResourceStatusContainer *a5, geo::TaskQueue *a6)
{
  id v11 = a4;
  unsigned __int16 v12 = mapDataTypeToLabelResourceType(a2);
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(a1, a2, v12, a3, a5, a6);
}

void sub_1A198BC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t mapDataTypeToLabelResourceType(int a1)
{
  int v1 = a1 - 13;
  uint64_t result = 30;
  switch(v1)
  {
    case 0:
      uint64_t result = 14;
      break;
    case 5:
      uint64_t result = 9;
      break;
    case 7:
      uint64_t result = 8;
      break;
    case 8:
      return result;
    case 9:
      uint64_t result = 32;
      break;
    case 10:
      uint64_t result = 39;
      break;
    case 11:
      uint64_t result = 40;
      break;
    case 12:
      uint64_t result = 10;
      break;
    case 13:
      uint64_t result = 15;
      break;
    case 53:
      uint64_t result = 44;
      break;
    case 56:
      uint64_t result = 45;
      break;
    case 60:
    case 67:
      uint64_t result = 13;
      break;
    case 61:
      uint64_t result = 47;
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

void md::SelectedDaVinciRoadsLayerDataSource::SelectedDaVinciRoadsLayerDataSource(md::SingleGEOResourceLayerDataSource *a1, unsigned __int16 a2, unsigned __int16 a3, gdc::LayerDataStore *a4, gdc::ResourceStatusContainer *a5, void *a6, geo::TaskQueue *a7)
{
  uint64_t v7[4] = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EF5910E0;
  v7[3] = v7;
  md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1A198BEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v16)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  if (a11)
  {
    uint64_t v18 = *(void *)(a11 + 24);
    *(void *)(a11 + 24) = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(a11 + 16);
    if (v19)
    {
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    MEMORY[0x1A6239270](a11, 0x1020C40509EF904);
  }

  _Unwind_Resume(a1);
}

void md::OverlayLayerDataSource::OverlayLayerDataSource(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a2;
  id v7 = a5;
  operator new();
}

void sub_1A198C358(_Unwind_Exception *a1)
{
  *(void *)(v2 + 896) = v5;

  uint64_t v7 = v2 + 848;
  int v8 = (uint64_t *)(v2 + 872);
  int v9 = *(std::__shared_weak_count **)(v2 + 888);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *v8;
  if (*v8 == v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(v2 + 848);
  }
  else if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  id v11 = *(std::__shared_weak_count **)(v2 + 840);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned __int16 v12 = *(std::__shared_weak_count **)(v2 + 816);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v2 + 800);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v14 = *(void **)(v2 + 768);
  if (v14)
  {
    *(void *)(v2 + 776) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v2 + 744);
  if (v15)
  {
    *(void *)(v2 + 752) = v15;
    operator delete(v15);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements(v2 + 696);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v2 + 704));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v2 + 672));
  if (*(unsigned char *)(v2 + 640)) {
    *(unsigned char *)(v2 + 640) = 0;
  }
  *(void *)(v2 + 600) = v4;

  uint64_t v16 = *(std::__shared_weak_count **)(v2 + 592);
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  gdc::LayerDataSource::~LayerDataSource((gdc::LayerDataSource *)v2);

  _Unwind_Resume(a1);
}

void sub_1A198C5D0(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource(md::SingleGEOResourceLayerDataSource *a1, unsigned __int16 a2, unsigned __int16 a3, gdc::LayerDataStore *a4, gdc::ResourceStatusContainer *a5, void *a6, geo::TaskQueue *a7)
{
  id v13 = a6;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(a1, a2, a3, a4, a5, a7);
}

void sub_1A198C720(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1);

  _Unwind_Resume(a1);
}

void md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource(md::SingleGEOResourceLayerDataSource *this, unsigned __int16 a2, unsigned __int16 a3, gdc::LayerDataStore *a4, gdc::ResourceStatusContainer *a5, geo::TaskQueue *a6)
{
}

uint64_t gdc::LayerDataSource::LayerDataSource(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EF554F60;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a4;
  *(void *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 850045863;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  uint64_t v7 = *a6;
  *a6 = 0;
  *(void *)(a1 + 368) = v7;
  *(void *)(a1 + 376) = 850045863;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 480) = 850045863;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  if (v7)
  {
    v9[0] = &unk_1EF57A388;
    v9[1] = a1;
    uint64_t v10 = v9;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v9);
    if (v10 == v9)
    {
      (*(void (**)(void *))(v9[0] + 32))(v9);
    }
    else if (v10)
    {
      (*(void (**)(void))(*v10 + 40))();
    }
  }
  return a1;
}

uint64_t gdc::Timer::setTimerCallback(uint64_t result, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(result + 80);
  if (v2)
  {
    uint64_t v3 = result;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN3gdc5Timer16setTimerCallbackENSt3__18functionIFvvEEE_block_invoke;
    void v9[3] = &__block_descriptor_tmp_3_55285;
    v9[4] = result;
    uint64_t v4 = (void *)a2[3];
    if (v4)
    {
      if (v4 == a2)
      {
        uint64_t v11 = v10;
        (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
      }
      else
      {
        uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    dispatch_source_set_event_handler(v2, v9);
    dispatch_resume(*(dispatch_object_t *)(v3 + 80));
    uint64_t result = (uint64_t)v11;
    if (v11 == v10)
    {
      return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
    }
    else if (v11)
    {
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 40))(v11, v5, v6, v7, v8);
    }
  }
  return result;
}

uint64_t std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A388;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteUniqueMaterial>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C958;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfShouldDeleteRenderable>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C0A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateResourcesAfterRebuild>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BCB0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B4D0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>,std::allocator<ecs2::ForwardToExecute<md::ita::DeletePendingDeletion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AC18;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfReadyToProcess>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AB88;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::DisconnectComponents>,std::allocator<ecs2::ForwardToExecute<md::ita::DisconnectComponents>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AA20;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A828;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>,std::allocator<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A558;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A510;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A4C8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A2D0;
  a2[1] = *(void *)(result + 8);
  return result;
}

float md::CurvedTextLabelPart::pushToRenderModel(md::CurvedTextLabelPart *this, gdc::Registry **a2, float a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  md::TextLabelPart::pushToRenderModel(this, a2, *((float *)this + 296) * a3);
  if (*((unsigned char *)this + 873))
  {
    int v6 = *((_DWORD *)this + 226);
    if (v6)
    {
      float result = *((float *)this + 197);
      if (result > 0.0)
      {
        *((unsigned char *)this + 1353) = *((unsigned char *)this + 565) ^ 1;
        *((_WORD *)this + 688) = v6;
        *((unsigned char *)this + 1345) = *((unsigned char *)this + 809);
        *((_WORD *)this + 675) = *((_WORD *)this + 279);
        *((unsigned char *)this + 1346) = *((unsigned char *)this + 556);
        uint64_t v7 = *((void *)this + 4);
        if (*(unsigned char *)(v7 + 78)) {
          int v8 = *(_DWORD *)(v7 + 72);
        }
        else {
          int v8 = 0;
        }
        *((_DWORD *)this + 342) = v8;
        gdc::Registry::create(*a2);
      }
    }
  }
  return result;
}

void sub_1A198D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t gdc::Registry::storage<md::ShadowMeshDescriptor>(int8x8_t *a1)
{
  unint64_t v10 = 0xF09D1DB37876C764;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF09D1DB37876C764;
    if (*(void *)&v1 <= 0xF09D1DB37876C764) {
      unint64_t v3 = 0xF09D1DB37876C764 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF09D1DB37876C764;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF09D1DB37876C764)
      {
        if (v5[2] == 0xF09D1DB37876C764) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF09D1DB37876C764) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF09D1DB37876C764) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A198D25C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v44);
  if (v6)
  {
    unint64_t v12 = a1[12];
    unint64_t v13 = a1[11];
    if (v13 < v12)
    {
      *(unsigned char *)unint64_t v13 = *(unsigned char *)a3;
      unint64_t v14 = v13 + 8;
      uint64_t v15 = *(void *)(a3 + 32);
      if (v15)
      {
        if (v15 == a3 + 8)
        {
          *(void *)(v13 + 32) = v14;
          (*(void (**)(void))(**(void **)(a3 + 32) + 24))(*(void *)(a3 + 32));
          goto LABEL_37;
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v14);
      }
      *(void *)(v13 + 32) = v15;
LABEL_37:
      unint64_t v29 = (char *)(v13 + 40);
      a1[11] = v13 + 40;
LABEL_57:
      a1[11] = v29;
      uint64_t v22 = a1[31];
      goto LABEL_58;
    }
    uint64_t v16 = a1[10];
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v16) >> 3);
    if (v17 + 1 > 0x666666666666666) {
      goto LABEL_63;
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v16) >> 3);
    uint64_t v19 = 2 * v18;
    if (2 * v18 <= v17 + 1) {
      uint64_t v19 = v17 + 1;
    }
    if (v18 >= 0x333333333333333) {
      unint64_t v20 = 0x666666666666666;
    }
    else {
      unint64_t v20 = v19;
    }
    unint64_t v49 = a1 + 12;
    if (v20)
    {
      if (v20 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v21 = (uint64_t *)operator new(40 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v25 = &v21[5 * v17];
    unint64_t v46 = v21;
    uint64_t v47 = (uint64_t)v25;
    *(void *)&long long v48 = v25;
    *((void *)&v48 + 1) = &v21[5 * v20];
    *(unsigned char *)uint64_t v25 = *(unsigned char *)a3;
    unint64_t v26 = v25 + 1;
    uint64_t v27 = *(void *)(a3 + 32);
    if (v27)
    {
      if (v27 == a3 + 8)
      {
        v21[5 * v17 + 4] = (uint64_t)v26;
        (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
        uint64_t v25 = (uint64_t *)v47;
        unint64_t v28 = (char *)v48;
        goto LABEL_39;
      }
      v21[5 * v17 + 4] = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v27 + 16))(v27, v26);
    }
    else
    {
      v21[5 * v17 + 4] = 0;
    }
    unint64_t v28 = (char *)&v21[5 * v17];
LABEL_39:
    unint64_t v29 = v28 + 40;
    *(void *)&long long v48 = v28 + 40;
    uint64_t v31 = (char *)a1[10];
    uint64_t v30 = (char *)a1[11];
    if (v30 == v31)
    {
      a1[10] = v25;
      a1[11] = v29;
      a1[12] = *((void *)&v48 + 1);
    }
    else
    {
      uint64_t v32 = 0;
      do
      {
        unint64_t v33 = &v25[v32];
        uint64_t v34 = &v30[v32 * 8];
        LOBYTE(v25[v32 - 5]) = v30[v32 * 8 - 40];
        uint64_t v35 = *(char **)&v30[v32 * 8 - 8];
        if (v35)
        {
          if (v34 - 32 == v35)
          {
            *(v33 - 1) = (uint64_t)(v33 - 4);
            (*(void (**)(void))(**((void **)v34 - 1) + 24))(*((void *)v34 - 1));
          }
          else
          {
            *(v33 - 1) = (uint64_t)v35;
            *((void *)v34 - 1) = 0;
          }
        }
        else
        {
          *(v33 - 1) = 0;
        }
        v32 -= 5;
      }
      while (&v30[v32 * 8] != v31);
      uint64_t v30 = (char *)a1[10];
      unint64_t v36 = (char *)a1[11];
      a1[10] = &v25[v32];
      unint64_t v37 = (char *)v48;
      *(_OWORD *)(a1 + 11) = v48;
      unint64_t v29 = v37;
      if (v36 != v30)
      {
        uint64_t v38 = v36 - 32;
        unint64_t v39 = v36 - 32;
        do
        {
          BOOL v41 = (char *)*((void *)v39 + 3);
          if (v39 == v41)
          {
            (*(void (**)(char *))(*(void *)v39 + 32))(v39);
          }
          else if (v41)
          {
            (*(void (**)(char *))(*(void *)v41 + 40))(v41);
          }
          uint64_t v40 = v39 - 8;
          v39 -= 40;
          v38 -= 40;
        }
        while (v40 != v30);
      }
    }
    if (v30) {
      operator delete(v30);
    }
    goto LABEL_57;
  }
  uint64_t v7 = a1[10] + 40 * (((uint64_t)v5 - a1[7]) >> 3);
  *(unsigned char *)uint64_t v7 = *(unsigned char *)a3;
  uint64_t v8 = v7 + 8;
  unint64_t v10 = (uint64_t *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 32);
  *(void *)(v7 + 32) = 0;
  if (v9 != v7 + 8)
  {
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
    }
    uint64_t v11 = *(void *)(a3 + 32);
    if (v11) {
      goto LABEL_6;
    }
LABEL_23:
    *unint64_t v10 = 0;
    goto LABEL_25;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
  uint64_t v11 = *(void *)(a3 + 32);
  if (!v11) {
    goto LABEL_23;
  }
LABEL_6:
  if (v11 == a3 + 8)
  {
    *unint64_t v10 = v8;
    (*(void (**)(void, uint64_t))(**(void **)(a3 + 32) + 24))(*(void *)(a3 + 32), v8);
  }
  else
  {
    *unint64_t v10 = v11;
    *(void *)(a3 + 32) = 0;
  }
LABEL_25:
  uint64_t v22 = a1[31];
  if (v7 != a1[11])
  {
    uint64_t v23 = (void *)a1[16];
    if (v23)
    {
      while (1)
      {
        unint64_t v46 = &v44;
        uint64_t v47 = 1;
        uint64_t v45 = v22;
        uint64_t v24 = v23[6];
        if (!v24) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 48))(v24, &v45, &v46);
        uint64_t v23 = (void *)*v23;
        if (!v23) {
          return;
        }
      }
LABEL_62:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_63:
      abort();
    }
    return;
  }
LABEL_58:
  uint64_t v42 = (void *)a1[22];
  if (v42)
  {
    while (1)
    {
      unint64_t v46 = &v44;
      uint64_t v47 = 1;
      uint64_t v45 = v22;
      uint64_t v43 = v42[6];
      if (!v43) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v43 + 48))(v43, &v45, &v46);
      uint64_t v42 = (void *)*v42;
      if (!v42) {
        return;
      }
    }
    goto LABEL_62;
  }
}

void sub_1A198D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<md::ShadowMeshDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A198D7BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E1D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EC38;
  a2[1] = v2;
  return result;
}

uint64_t md::UniLineLabelFeature::UniLineLabelFeature(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = md::LineLabelFeature::LineLabelFeature(a1, 2, 0);
  uint64_t v11 = v10 + 440;
  *(void *)uint64_t v10 = &unk_1EF53C978;
  *(void *)(v10 + 440) = &unk_1EF53CC30;
  *(_WORD *)(v10 + 448) = 2;
  *(unsigned char *)(v10 + 450) = 0;
  *(_OWORD *)(v10 + 456) = 0u;
  *(_OWORD *)(v10 + 472) = 0u;
  *(void *)(v10 + 488) = 0;
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(std::__shared_weak_count **)(a1 + 424);
  *(void *)(a1 + 416) = v12;
  *(void *)(a1 + 424) = v13;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v12 = *(void *)(a1 + 416);
  }
  if (!v12)
  {
    _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v41);
    long long v26 = v41;
    long long v41 = 0uLL;
    uint64_t v27 = *(std::__shared_weak_count **)(a1 + 424);
    *(_OWORD *)(a1 + 416) = v26;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    unint64_t v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(void *)(a1 + 488) = a2[5];
  uint64_t v15 = *(void *)(a5 + 96);
  if (v15)
  {
    *(unsigned char *)(a1 + 450) = 1;
    uint64_t v16 = *(void *)(a5 + 104);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v17 = *(std::__shared_weak_count **)(a1 + 480);
    *(void *)(a1 + 472) = v15;
    *(void *)(a1 + 480) = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    unint64_t v18 = *(void **)(a1 + 472);
    *(void *)(a1 + 488) = *v18;
    md::UniLineLabelFeature::mergeAdditionalAttributes((const FeatureStyleAttributes **)&v41, (uint64_t)v18, *(const FeatureStyleAttributes **)(a1 + 416), *(void *)(a1 + 424));
    long long v19 = v41;
    long long v41 = 0uLL;
    unint64_t v20 = *(std::__shared_weak_count **)(a1 + 424);
    *(_OWORD *)(a1 + 416) = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  uint64_t v22 = *(void *)(a1 + 416);
  unint64_t v23 = *(unsigned __int8 *)(v22 + 33);
  if (*(unsigned char *)(v22 + 33))
  {
    uint64_t v24 = *(_DWORD **)v22;
    if (*v24 == 185)
    {
      unint64_t v25 = 0;
LABEL_33:
      if ((v24[2 * v25 + 1] & 0xFD) == 0)
      {
        *(unsigned char *)(a1 + 449) = 2;
        *(unsigned char *)(a1 + 216) = 1;
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v25 = 0;
      unint64_t v29 = v24 + 2;
      while (v23 - 1 != v25)
      {
        int v30 = *v29;
        v29 += 2;
        ++v25;
        if (v30 == 185)
        {
          if (v25 >= v23) {
            break;
          }
          goto LABEL_33;
        }
      }
    }
  }
  uint64_t v31 = a2[3];
  unint64_t v32 = *(unsigned __int8 *)(v31 + 33);
  if (*(unsigned char *)(v31 + 33))
  {
    unint64_t v33 = *(_DWORD **)v31;
    if (**(_DWORD **)v31 == 2)
    {
LABEL_37:
      *(unsigned char *)(a1 + 449) = 1;
    }
    else
    {
      unint64_t v38 = 0;
      unint64_t v39 = v33 + 2;
      while (v32 - 1 != v38)
      {
        int v40 = *v39;
        v39 += 2;
        ++v38;
        if (v40 == 2)
        {
          if (v38 < v32) {
            goto LABEL_37;
          }
          break;
        }
      }
    }
  }
LABEL_38:
  uint64_t v34 = *(void *)(a1 + 192);
  *(unsigned char *)(v34 + 122) = *(unsigned char *)(a1 + 449);
  md::LabelLineStore::addRoadFeature(v34, a2, a3, a4, a5, v11);
  uint64_t v35 = *(unsigned __int8 **)(a1 + 192);
  unsigned __int8 v36 = atomic_load(v35 + 80);
  if (v36) {
    md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v35);
  }
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 32))(a1, a2, *(unsigned __int8 *)(a5 + 88));
  return a1;
}

void sub_1A198DC5C(_Unwind_Exception *a1)
{
  unint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 60);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 58);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::LineLabelFeature::~LineLabelFeature(v1);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::consumeWorkUnits(md::LabelLineStore *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 80);
  if ((v1 & 1) == 0) {
    return;
  }
  {
    operator new();
  }
  uint64_t v24 = mdm::Allocator::instance(void)::alloc;
  std::mutex::lock((std::mutex *)((char *)this + 16));
  long long v22 = *(_OWORD *)((char *)this + 88);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v23 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  atomic_store(0, (unsigned __int8 *)this + 80);
  std::mutex::unlock((std::mutex *)((char *)this + 16));
  unint64_t v3 = (std::mutex *)((char *)this + 160);
  std::mutex::lock((std::mutex *)((char *)this + 160));
  md::LabelLineStore::processWorkUnits((uint64_t)this, (const md::LabelLineStore::WorkUnit **)v22, *((const md::LabelLineStore::WorkUnit ***)&v22 + 1));
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 248);
  if (v4) {
    goto LABEL_40;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 248);
  if (v5) {
    goto LABEL_40;
  }
  ++*((_DWORD *)this + 63);
  atomic_store(0xFEu, (unsigned __int8 *)this + 224);
  atomic_store(0xFEu, (unsigned __int8 *)this + 225);
  atomic_store(0xFEu, (unsigned __int8 *)this + 226);
  atomic_store(0xFEu, (unsigned __int8 *)this + 227);
  atomic_store(0xFEu, (unsigned __int8 *)this + 228);
  atomic_store(0xFEu, (unsigned __int8 *)this + 229);
  atomic_store(0xFEu, (unsigned __int8 *)this + 230);
  atomic_store(0xFEu, (unsigned __int8 *)this + 231);
  atomic_store(0xFEu, (unsigned __int8 *)this + 232);
  atomic_store(0xFEu, (unsigned __int8 *)this + 233);
  atomic_store(0xFEu, (unsigned __int8 *)this + 234);
  atomic_store(0xFEu, (unsigned __int8 *)this + 235);
  atomic_store(0xFEu, (unsigned __int8 *)this + 236);
  atomic_store(0xFEu, (unsigned __int8 *)this + 237);
  atomic_store(0xFEu, (unsigned __int8 *)this + 238);
  atomic_store(0xFEu, (unsigned __int8 *)this + 239);
  atomic_store(0xFEu, (unsigned __int8 *)this + 240);
  atomic_store(0xFEu, (unsigned __int8 *)this + 241);
  atomic_store(0xFEu, (unsigned __int8 *)this + 242);
  atomic_store(0xFEu, (unsigned __int8 *)this + 243);
  atomic_store(0xFEu, (unsigned __int8 *)this + 244);
  atomic_store(0xFEu, (unsigned __int8 *)this + 245);
  atomic_store(0xFEu, (unsigned __int8 *)this + 246);
  atomic_store(0xFEu, (unsigned __int8 *)this + 247);
  atomic_store(1u, (unsigned __int8 *)this + 248);
  char v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6)
  {
    uint64_t v7 = *(void *)this;
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v27 = v7;
      unint64_t v28 = v8;
      uint64_t v9 = *((void *)this + 16);
      uint64_t v10 = *((void *)this + 17);
      if (v9 == v10)
      {
        uint64_t v12 = (md::LabelLineZSet *)*((void *)this + 16);
      }
      else
      {
        do
        {
          md::LabelLineZSet::createLines((unsigned __int8 *)v9, &v27);
          v9 += 112;
        }
        while (v9 != v10);
        uint64_t v12 = (md::LabelLineZSet *)*((void *)this + 16);
        uint64_t v11 = (md::LabelLineZSet *)*((void *)this + 17);
        uint64_t v9 = (uint64_t)v12;
        if (v12 != v11)
        {
          while (*(void *)(v9 + 80) != *(void *)(v9 + 88))
          {
            v9 += 112;
            if ((md::LabelLineZSet *)v9 == v11) {
              goto LABEL_26;
            }
          }
          if ((md::LabelLineZSet *)v9 != v11)
          {
            uint64_t v13 = v9 + 112;
            if ((md::LabelLineZSet *)(v9 + 112) != v11)
            {
              do
              {
                if (*(void *)(v13 + 80) != *(void *)(v13 + 88))
                {
                  md::LabelLineZSet::operator=(v9, v13);
                  v9 += 112;
                }
                v13 += 112;
              }
              while ((md::LabelLineZSet *)v13 != v11);
              uint64_t v12 = (md::LabelLineZSet *)*((void *)this + 16);
              uint64_t v11 = (md::LabelLineZSet *)*((void *)this + 17);
            }
          }
          if ((md::LabelLineZSet *)v9 == v11)
          {
LABEL_26:
            uint64_t v9 = (uint64_t)v11;
            goto LABEL_27;
          }
          while (v11 != (md::LabelLineZSet *)v9)
          {
            uint64_t v11 = (md::LabelLineZSet *)((char *)v11 - 112);
            md::LabelLineZSet::~LabelLineZSet(v11);
          }
          *((void *)this + 17) = v9;
          uint64_t v12 = (md::LabelLineZSet *)*((void *)this + 16);
        }
      }
LABEL_27:
      int64x2_t v25 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v26 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      unint64_t v14 = (void (**)(void *))&unk_1EF570890;
      v29[0] = &unk_1EF570890;
      v29[1] = &v25;
      int v30 = v29;
      if (v12 == (md::LabelLineZSet *)v9)
      {
LABEL_36:
        v14[4](v29);
      }
      else
      {
        do
        {
          uint64_t v15 = *((void *)v12 + 2);
          uint64_t v16 = *((void *)v12 + 3);
          if (v15 != v16)
          {
            while (v30)
            {
              (*(void (**)(void *, uint64_t))(*v30 + 48))(v30, v15);
              v15 += 8;
              if (v15 == v16) {
                goto LABEL_31;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_55;
          }
LABEL_31:
          uint64_t v12 = (md::LabelLineZSet *)((char *)v12 + 112);
        }
        while (v12 != (md::LabelLineZSet *)v9);
        if (v30 == v29)
        {
          unint64_t v14 = (void (**)(void *))v29[0];
          goto LABEL_36;
        }
        if (v30) {
          (*(void (**)(void))(*v30 + 40))();
        }
      }
      int64x2_t v17 = v26;
      *((int64x2_t *)this + 16) = v25;
      *((int64x2_t *)this + 17) = v17;
      unint64_t v18 = v28;
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_40:
      std::mutex::unlock(v3);
      if ((void)v22)
      {
        long long v19 = (void *)*((void *)&v22 + 1);
        while (v19 != (void *)v22)
        {
          uint64_t v21 = (md::LabelLineStore::WorkUnit *)*--v19;
          unint64_t v20 = v21;
          *long long v19 = 0;
          if (v21)
          {
            md::LabelLineStore::WorkUnit::~WorkUnit(v20);
            {
                operator new();
            }
            (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                     + 40))(mdm::Allocator::instance(void)::alloc, v20, 248);
          }
        }
        (*(void (**)(uint64_t, void, void))(*(void *)v24 + 40))(v24, v22, v23 - v22);
      }
      return;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_55:
  __break(1u);
}

void sub_1A198E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::mutex::unlock(v3);
  std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float64x2_t std::__function::__func<md::LabelLineStore::updateLineSets(void)::$_1,std::allocator<md::LabelLineStore::updateLineSets(void)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2 = *(float64x2_t **)(a1 + 8);
  unint64_t v3 = *a2;
  uint64_t v4 = *((void *)*a2 + 3);
  if (v4 && *(unsigned char *)(v4 + 48))
  {
    float64x2_t v5 = *(float64x2_t *)(v4 + 16);
    float64x2_t v6 = *(float64x2_t *)(v4 + 32);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)v3 + 56))(*a2);
    if (v3[23])
    {
      uint64_t v8 = (md::LabelPoint *)v7;
      unint64_t v9 = 0;
      float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      float64x2_t v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        float64x2_t v13 = v6;
        float64x2_t v14 = v5;
        uint64_t v10 = (float64x2_t *)md::LabelPoint::mercatorPoint(v8);
        float64x2_t v5 = vminnmq_f64(*v10, v14);
        float64x2_t v6 = vmaxnmq_f64(v13, *v10);
        ++v9;
        uint64_t v8 = (md::LabelPoint *)((char *)v8 + 48);
      }
      while (v9 < v3[23]);
    }
    else
    {
      float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      float64x2_t v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    }
  }
  float64x2_t result = vminnmq_f64(v5, *v2);
  float64x2_t v12 = vmaxnmq_f64(v2[1], v6);
  *uint64_t v2 = result;
  v2[1] = v12;
  return result;
}

void md::LabelLineStore::WorkUnit::~WorkUnit(md::LabelLineStore::WorkUnit *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), v4, *((void *)this + 11) - v4);
  }
  float64x2_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    float64x2_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    float64x2_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_15:
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void md::LabelLineStore::processWorkUnits(uint64_t a1, const md::LabelLineStore::WorkUnit **a2, const md::LabelLineStore::WorkUnit **a3)
{
  if (a2 != a3)
  {
    unint64_t v260 = (char *)(a1 + 120);
    v261 = (uint64_t *)(a1 + 128);
    int64x2_t v252 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v253 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    while (2)
    {
      unint64_t v265 = a2;
      unint64_t v3 = *a2;
      switch(*(_DWORD *)*a2)
      {
        case 0:
        case 3:
          md::LabelLineStore::addRoad((md::LabelLineStore *)a1, *a2);
          goto LABEL_4;
        case 1:
          uint64_t v4 = *((void *)v3 + 5);
          uint64_t v5 = *(void *)(v4 + 48);
          if (v5)
          {
            uint64_t v6 = *((void *)v3 + 16);
            int v7 = v6 ? (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 8))(v6, *((void *)v3 + 5)) : 0;
            uint64_t v129 = *(void *)(*(void *)(v5 + 32) + 8);
            uint64_t v130 = geo::codec::VectorTile::key(*((geo::codec::VectorTile **)v3 + 6));
            unsigned int v131 = *(_DWORD *)(v4 + 20);
            if (v131)
            {
              int v132 = *(unsigned char *)(v130 + 1) & 0x3F;
              char v133 = *((unsigned char *)v3 + 216);
              uint64_t v134 = *(void *)(v5 + 32);
              uint64_t v135 = *(void *)(v134 + 24);
              uint64_t v136 = *(void *)(v134 + 32);
              uint64_t v137 = (uint64_t)v3 + 184;
              uint64_t v138 = (uint64_t)v3 + 144;
              if (v135)
              {
                for (unsigned int i = 0; i < v131; ++i)
                {
                  uint64_t v140 = i + *(_DWORD *)(v4 + 16);
                  unint64_t v141 = *(void *)(v136 + 16 * v140 + 8);
                  if (v141 >= 2)
                  {
                    md::LabelLineStore::addSegment<GeoCodecsContourLinesFeature>(a1, v4, v140, v132, v133, v137, v138, v129 + 8 * *(void *)(v136 + 16 * v140), v135 + 4 * *(void *)(v136 + 16 * v140), v141, v7);
                    unsigned int v131 = *(_DWORD *)(v4 + 20);
                  }
                }
              }
              else
              {
                do
                {
                  uint64_t v142 = (v135 + *(_DWORD *)(v4 + 16));
                  unint64_t v143 = *(void *)(v136 + 16 * v142 + 8);
                  if (v143 >= 2)
                  {
                    md::LabelLineStore::addSegment<GeoCodecsContourLinesFeature>(a1, v4, v142, v132, v133, (uint64_t)v3 + 184, (uint64_t)v3 + 144, v129 + 8 * *(void *)(v136 + 16 * v142), 0, v143, v7);
                    unsigned int v131 = *(_DWORD *)(v4 + 20);
                  }
                  LODWORD(v135) = v135 + 1;
                }
                while (v135 < v131);
              }
            }
          }
          goto LABEL_4;
        case 2:
          uint64_t v14 = *((void *)v3 + 8);
          uint64_t v16 = *(void *)(v14 + 32);
          uint64_t v15 = *(void *)(v14 + 40);
          if (v15 != v16)
          {
            uint64_t v17 = 0;
            unsigned int v18 = 0;
            long long v19 = (char *)v3 + 144;
            int v20 = *((unsigned __int8 *)v3 + 145);
            char v21 = *((unsigned char *)v3 + 216);
            long long v22 = (_OWORD *)((char *)v3 + 184);
            do
            {
              uint64_t v24 = (uint64_t *)(v16 + 24 * v17);
              uint64_t v23 = *v24;
              uint64_t v25 = v24[1] - *v24;
              if ((unint64_t)v25 >= 0x10)
              {
                v268[0] = 0;
                LOWORD(v271) = *(_WORD *)(a1 + 121);
                HIDWORD(v271) = v18;
                LOBYTE(v272) = v21;
                HIBYTE(v272) = v20;
                v273 = v22;
                v274 = v19;
                int v279 = v25 >> 3;
                uint64_t v275 = v23;
                uint64_t v276 = 0;
                uint64_t v277 = 0;
                int v278 = 0;
                unint64_t v281 = 0;
                uint64_t v282 = 0;
                uint64_t v280 = 0;
                char v283 = *(unsigned char *)(a1 + 290);
                switch(v25 >> 3)
                {
                  case 2:
                    {
                      operator new();
                    }
                    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                    *(void *)(v26 + 8) = 0;
                    *(void *)(v26 + 16) = v14;
                    *(void *)(v26 + 24) = 0;
                    *(unsigned char *)(v26 + 32) = 4;
                    *(unsigned char *)(v26 + 33) = v283;
                    *(_WORD *)(v26 + 34) = v272;
                    *(_WORD *)(v26 + 36) = 0;
                    *(_DWORD *)(v26 + 40) = 0;
                    *(_WORD *)(v26 + 44) = WORD2(v271);
                    *(_WORD *)(v26 + 46) = v279;
                    *(void *)uint64_t v26 = &unk_1EF53F898;
                    *(_OWORD *)(v26 + 48) = 0u;
                    *(_OWORD *)(v26 + 64) = 0u;
                    *(void *)(v26 + 80) = 0;
                    *(_DWORD *)(v26 + 88) = 2139095039;
                    *(_WORD *)(v26 + 92) = 0;
                    *(unsigned char *)(v26 + 94) = 0;
                    *(_OWORD *)(v26 + 96) = 0u;
                    *(_OWORD *)(v26 + 112) = 0u;
                    *(void *)(v26 + 128) = 0;
                    *(_DWORD *)(v26 + 136) = 2139095039;
                    *(_WORD *)(v26 + 140) = 0;
                    *(unsigned char *)(v26 + 142) = 0;
                    *(void *)(v26 + 144) = 0x7F7F00007F7FLL;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v26, (uint64_t)&v271);
                    uint64_t v27 = a1;
                    goto LABEL_30;
                  case 3:
                    {
                      operator new();
                    }
                    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                    *(void *)(v26 + 8) = 0;
                    *(void *)(v26 + 16) = v14;
                    *(void *)(v26 + 24) = 0;
                    *(unsigned char *)(v26 + 32) = 4;
                    *(unsigned char *)(v26 + 33) = v283;
                    *(_WORD *)(v26 + 34) = v272;
                    *(_WORD *)(v26 + 36) = 0;
                    *(_DWORD *)(v26 + 40) = 0;
                    *(_WORD *)(v26 + 44) = WORD2(v271);
                    *(_WORD *)(v26 + 46) = v279;
                    *(void *)uint64_t v26 = &unk_1EF53F8F0;
                    *(_OWORD *)(v26 + 48) = 0u;
                    *(_OWORD *)(v26 + 64) = 0u;
                    *(void *)(v26 + 80) = 0;
                    *(_DWORD *)(v26 + 88) = 2139095039;
                    *(_WORD *)(v26 + 92) = 0;
                    *(unsigned char *)(v26 + 94) = 0;
                    *(_OWORD *)(v26 + 96) = 0u;
                    *(_OWORD *)(v26 + 112) = 0u;
                    *(void *)(v26 + 128) = 0;
                    *(_DWORD *)(v26 + 136) = 2139095039;
                    *(_WORD *)(v26 + 140) = 0;
                    *(unsigned char *)(v26 + 142) = 0;
                    *(_OWORD *)(v26 + 144) = 0u;
                    *(_OWORD *)(v26 + 160) = 0u;
                    *(void *)(v26 + 176) = 0;
                    *(_DWORD *)(v26 + 184) = 2139095039;
                    *(_WORD *)(v26 + 188) = 0;
                    *(unsigned char *)(v26 + 190) = 0;
                    *(void *)(v26 + 192) = 0x7F7F00007F7FLL;
                    *(_DWORD *)(v26 + 200) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v26, (uint64_t)&v271);
                    uint64_t v27 = a1;
                    goto LABEL_30;
                  case 4:
                    {
                      operator new();
                    }
                    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                    *(void *)(v26 + 8) = 0;
                    *(void *)(v26 + 16) = v14;
                    *(void *)(v26 + 24) = 0;
                    *(unsigned char *)(v26 + 32) = 4;
                    *(unsigned char *)(v26 + 33) = v283;
                    *(_WORD *)(v26 + 34) = v272;
                    *(_WORD *)(v26 + 36) = 0;
                    *(_DWORD *)(v26 + 40) = 0;
                    *(_WORD *)(v26 + 44) = WORD2(v271);
                    *(_WORD *)(v26 + 46) = v279;
                    *(void *)uint64_t v26 = &unk_1EF53F948;
                    *(_OWORD *)(v26 + 48) = 0u;
                    *(_OWORD *)(v26 + 64) = 0u;
                    *(void *)(v26 + 80) = 0;
                    *(_DWORD *)(v26 + 88) = 2139095039;
                    *(_WORD *)(v26 + 92) = 0;
                    *(unsigned char *)(v26 + 94) = 0;
                    *(_OWORD *)(v26 + 96) = 0u;
                    *(_OWORD *)(v26 + 112) = 0u;
                    *(void *)(v26 + 128) = 0;
                    *(_DWORD *)(v26 + 136) = 2139095039;
                    *(_WORD *)(v26 + 140) = 0;
                    *(unsigned char *)(v26 + 142) = 0;
                    *(_OWORD *)(v26 + 144) = 0u;
                    *(_OWORD *)(v26 + 160) = 0u;
                    *(void *)(v26 + 176) = 0;
                    *(_DWORD *)(v26 + 184) = 2139095039;
                    *(_WORD *)(v26 + 188) = 0;
                    *(unsigned char *)(v26 + 190) = 0;
                    *(_OWORD *)(v26 + 192) = 0u;
                    *(_OWORD *)(v26 + 208) = 0u;
                    *(void *)(v26 + 224) = 0;
                    *(_DWORD *)(v26 + 232) = 2139095039;
                    *(_WORD *)(v26 + 236) = 0;
                    *(unsigned char *)(v26 + 238) = 0;
                    *(_OWORD *)(v26 + 240) = xmmword_1A28FE520;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v26, (uint64_t)&v271);
                    uint64_t v27 = a1;
                    goto LABEL_30;
                  case 5:
                    {
                      operator new();
                    }
                    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                    *(void *)(v26 + 8) = 0;
                    *(void *)(v26 + 16) = v14;
                    *(void *)(v26 + 24) = 0;
                    *(unsigned char *)(v26 + 32) = 4;
                    *(unsigned char *)(v26 + 33) = v283;
                    *(_WORD *)(v26 + 34) = v272;
                    *(_WORD *)(v26 + 36) = 0;
                    *(_DWORD *)(v26 + 40) = 0;
                    *(_WORD *)(v26 + 44) = WORD2(v271);
                    *(_WORD *)(v26 + 46) = v279;
                    *(void *)uint64_t v26 = &unk_1EF53F9A0;
                    *(_OWORD *)(v26 + 48) = 0u;
                    *(_OWORD *)(v26 + 64) = 0u;
                    *(void *)(v26 + 80) = 0;
                    *(_DWORD *)(v26 + 88) = 2139095039;
                    *(_WORD *)(v26 + 92) = 0;
                    *(unsigned char *)(v26 + 94) = 0;
                    *(_OWORD *)(v26 + 96) = 0u;
                    *(_OWORD *)(v26 + 112) = 0u;
                    *(void *)(v26 + 128) = 0;
                    *(_DWORD *)(v26 + 136) = 2139095039;
                    *(_WORD *)(v26 + 140) = 0;
                    *(unsigned char *)(v26 + 142) = 0;
                    *(_OWORD *)(v26 + 144) = 0u;
                    *(_OWORD *)(v26 + 160) = 0u;
                    *(void *)(v26 + 176) = 0;
                    *(_DWORD *)(v26 + 184) = 2139095039;
                    *(_WORD *)(v26 + 188) = 0;
                    *(unsigned char *)(v26 + 190) = 0;
                    *(_OWORD *)(v26 + 192) = 0u;
                    *(_OWORD *)(v26 + 208) = 0u;
                    *(void *)(v26 + 224) = 0;
                    *(_DWORD *)(v26 + 232) = 2139095039;
                    *(_WORD *)(v26 + 236) = 0;
                    *(unsigned char *)(v26 + 238) = 0;
                    *(void *)(v26 + 272) = 0;
                    *(_OWORD *)(v26 + 240) = 0u;
                    *(_OWORD *)(v26 + 256) = 0u;
                    *(_DWORD *)(v26 + 280) = 2139095039;
                    *(_WORD *)(v26 + 284) = 0;
                    *(unsigned char *)(v26 + 286) = 0;
                    *(_OWORD *)(v26 + 288) = xmmword_1A28FE520;
                    *(_DWORD *)(v26 + 304) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v26, (uint64_t)&v271);
                    uint64_t v27 = a1;
LABEL_30:
                    v268[0] = v26;
                    break;
                  default:
                    {
                      operator new();
                    }
                    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                    *(void *)(v26 + 8) = 0;
                    *(void *)(v26 + 16) = v14;
                    *(void *)(v26 + 24) = 0;
                    *(unsigned char *)(v26 + 32) = 4;
                    *(unsigned char *)(v26 + 33) = v283;
                    *(_WORD *)(v26 + 34) = v272;
                    *(_WORD *)(v26 + 36) = 0;
                    *(_DWORD *)(v26 + 40) = 0;
                    *(_WORD *)(v26 + 44) = WORD2(v271);
                    *(_WORD *)(v26 + 46) = v279;
                    *(void *)uint64_t v26 = &unk_1EF53D950;
                    *(void *)(v26 + 48) = 0;
                    *(void *)(v26 + 56) = 0;
                    *(void *)(v26 + 64) = 0;
                    {
                      operator new();
                    }
                    *(void *)(v26 + 72) = mdm::Allocator::instance(void)::alloc;
                    *(void *)(v26 + 80) = 0;
                    *(void *)(v26 + 88) = 0;
                    *(void *)(v26 + 96) = 0;
                    {
                      operator new();
                    }
                    *(void *)(v26 + 104) = mdm::Allocator::instance(void)::alloc;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v26, (uint64_t)&v271);
                    v268[0] = v26;
                    uint64_t v27 = a1;
                    break;
                }
                LOBYTE(v270) = v20;
                LOBYTE(v269) = v21;
                uint64_t v29 = *(void *)(v27 + 128);
                unint64_t v28 = *(void *)(v27 + 136);
                if (v29 == v28)
                {
LABEL_34:
                  *(void *)&v267[0] = v27;
                  if (v28 >= *(void *)(v27 + 144))
                  {
                    uint64_t v30 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v261, (uint64_t *)v267, (char *)&v270, (char *)&v269, v260);
                  }
                  else
                  {
                    if (v28) {
                      unint64_t v28 = md::LabelLineZSet::LabelLineZSet(v28, v27, v20, v21, *(unsigned char *)(v27 + 120));
                    }
                    uint64_t v30 = v28 + 112;
                    *(void *)(v27 + 136) = v30;
                  }
                  *(void *)(v27 + 136) = v30;
                  uint64_t v29 = v30 - 112;
                }
                else
                {
                  while (*(unsigned __int8 *)(v29 + 1) != v20)
                  {
                    v29 += 112;
                    if (v29 == v28) {
                      goto LABEL_34;
                    }
                  }
                }
                uint64_t v31 = *(uint64_t **)(v29 + 24);
                if ((unint64_t)v31 >= *(void *)(v29 + 32))
                {
                  unint64_t v32 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v29 + 16, v268);
                  uint64_t v26 = v268[0];
                }
                else
                {
                  if (v31)
                  {
                    v268[0] = 0;
                    *uint64_t v31 = v26;
                    uint64_t v26 = 0;
                  }
                  unint64_t v32 = v31 + 1;
                }
                *(void *)(v29 + 24) = v32;
                atomic_store(0, (unsigned __int8 *)(v27 + 248));
                v268[0] = 0;
                if (v26) {
                  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
                }
                uint64_t v16 = *(void *)(v14 + 32);
                uint64_t v15 = *(void *)(v14 + 40);
              }
              uint64_t v17 = ++v18;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) > v18);
          }
          goto LABEL_4;
        case 4:
          uint64_t v9 = *(void *)(a1 + 128);
          uint64_t v8 = *(void *)(a1 + 136);
          if (v9 != v8)
          {
            do
              md::LabelLineZSet::~LabelLineZSet((md::LabelLineZSet *)(v8 - 112));
            while (v8 != v9);
            uint64_t v10 = a1;
            *(void *)(a1 + 136) = v9;
            goto LABEL_422;
          }
          goto LABEL_4;
        case 5:
          uint64_t v35 = (std::__shared_weak_count *)*((void *)v3 + 2);
          uint64_t v262 = (geo::codec::VectorTile *)*((void *)v3 + 1);
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v36 = *((void *)v3 + 13);
          v254 = v35;
          char v37 = *(unsigned char *)(geo::codec::VectorTile::key(v262) + 1);
          char v258 = *((unsigned char *)v3 + 216);
          {
            operator new();
          }
          unint64_t v38 = (geo::codec::VectorTile **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 64, 8);
          unint64_t v39 = v38;
          char v40 = *((unsigned char *)v3 + 226);
          char *v38 = v262;
          v38[1] = (geo::codec::VectorTile *)v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          v38[3] = 0;
          v38[2] = (geo::codec::VectorTile *)v36;
          v38[4] = 0;
          v38[5] = 0;
          uint64_t v255 = (uint64_t)(v38 + 3);
          {
            operator new();
          }
          v39[6] = (geo::codec::VectorTile *)mdm::Allocator::instance(void)::alloc;
          *((_DWORD *)v39 + 14) = 0;
          *((unsigned char *)v39 + 60) = v40;
          v256 = v39;
          uint64_t v41 = geo::codec::VectorTile::labelLineFeatureSections(v262);
          int v42 = v37 & 0x3F;
          unsigned int v43 = *(unsigned __int16 *)(v36 + 42);
          if (*(_WORD *)(v36 + 42))
          {
            unsigned int v44 = 0;
            uint64_t v45 = (unsigned __int16 *)(v41 + 40 * *(unsigned int *)(v36 + 32) + 24);
            do
            {
              if (!*((unsigned char *)v45 + 8))
              {
                unint64_t v46 = (void *)(geo::codec::VectorTile::lines(v262) + 168 * *((unsigned int *)v45 - 6));
                unint64_t v271 = 0;
                uint64_t v47 = geo::codec::multiSectionFeaturePoints(v46, *v45, &v271);
                *(void *)&v267[0] = 0;
                uint64_t v48 = geo::codec::multiSectionFeatureElevations((uint64_t)v46, *v45, v267);
                unint64_t v49 = v271;
                if (v271 >= 2)
                {
                  uint64_t v50 = v48;
                  unint64_t v51 = (uint64_t (***)(void, void *, void))*((void *)v3 + 16);
                  if (v51)
                  {
                    int v52 = (**v51)(v51, v46, *((unsigned __int8 *)v3 + 224));
                    LODWORD(v51) = (*(uint64_t (**)(void, void *))(**((void **)v3 + 16) + 8))(*((void *)v3 + 16), v46);
                    unint64_t v49 = v271;
                  }
                  else
                  {
                    int v52 = 0;
                  }
                  int v251 = v52;
                  unint64_t v39 = v256;
                  uint64_t v53 = md::LabelLineStore::addSegment<GeoCodecsRoadFeature>(a1, (uint64_t)v46, *v45, v42, v258, (uint64_t)v3 + 184, (uint64_t)v3 + 144, (uint64_t)v47, v50, v49, v251, (int)v51, *(void *)(v36 + 24));
                  *((_DWORD *)v256 + 14) += (*(uint64_t (**)(uint64_t))(*(void *)v53 + 16))(v53);
                  long long v54 = v256[3];
                  if (v256[4] - v54 == -16)
                  {
                    v256[4] = v54;
                  }
                  else
                  {
                    std::vector<md::LabelLineSegmentInfo,geo::StdAllocator<md::LabelLineSegmentInfo,mdm::Allocator>>::__append(v255, 1uLL);
                    long long v54 = v256[4];
                  }
                  *((void *)v54 - 2) = v53;
                  *((unsigned char *)v54 - 8) = *((unsigned char *)v45 + 6) ^ 1;
                }
                unsigned int v43 = *(unsigned __int16 *)(v36 + 42);
              }
              ++v44;
              v45 += 20;
            }
            while (v44 < v43);
          }
          uint64_t v63 = v39[3];
          if (v63 == v39[4])
          {
            long long v66 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            uint64_t v67 = v254;
            if (!v63) {
              goto LABEL_329;
            }
LABEL_328:
            v39[4] = v63;
            (*(void (**)(geo::codec::VectorTile *, geo::codec::VectorTile *, int64_t))(*(void *)v39[6] + 40))(v39[6], v63, v39[5] - v63);
            goto LABEL_329;
          }
          LOBYTE(v267[0]) = v42;
          LOBYTE(v268[0]) = v258;
          uint64_t v65 = *(void *)(a1 + 128);
          unint64_t v64 = *(void *)(a1 + 136);
          long long v66 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          uint64_t v67 = v254;
          if (v65 == v64)
          {
LABEL_99:
            unint64_t v271 = a1;
            if (v64 >= *(void *)(a1 + 144))
            {
              uint64_t v69 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v261, (uint64_t *)&v271, (char *)v267, (char *)v268, v260);
              uint64_t v68 = a1;
            }
            else
            {
              uint64_t v68 = a1;
              if (v64) {
                unint64_t v64 = md::LabelLineZSet::LabelLineZSet(v64, a1, v42, v258, *(unsigned char *)(a1 + 120));
              }
              uint64_t v69 = v64 + 112;
              *(void *)(a1 + 136) = v69;
            }
            *(void *)(v68 + 136) = v69;
            uint64_t v65 = v69 - 112;
          }
          else
          {
            while (*(unsigned __int8 *)(v65 + 1) != v42)
            {
              v65 += 112;
              if (v65 == v64) {
                goto LABEL_99;
              }
            }
          }
          uint64_t v144 = *(geo::codec::VectorTile ****)(v65 + 56);
          unint64_t v145 = *(void *)(v65 + 64);
          if ((unint64_t)v144 < v145)
          {
            if (v144)
            {
              *uint64_t v144 = v39;
              unint64_t v39 = 0;
            }
            BOOL v146 = v144 + 1;
            goto LABEL_326;
          }
          uint64_t v147 = *(void *)(v65 + 48);
          uint64_t v148 = ((uint64_t)v144 - v147) >> 3;
          unint64_t v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 61) {
            abort();
          }
          uint64_t v150 = v145 - v147;
          if (v150 >> 2 > v149) {
            unint64_t v149 = v150 >> 2;
          }
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v151 = v149;
          }
          if (v151)
          {
            uint64_t v152 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v65 + 72) + 16))(*(void *)(v65 + 72), 8 * v151, 8);
            v153 = (geo::codec::VectorTile ***)(v152 + 8 * v148);
            uint64_t v154 = v152 + 8 * v151;
            if (v152)
            {
              char *v153 = v39;
              unint64_t v39 = 0;
            }
          }
          else
          {
            uint64_t v154 = 0;
            v153 = (geo::codec::VectorTile ***)(8 * v148);
          }
          BOOL v146 = v153 + 1;
          v198 = *(char **)(v65 + 48);
          v199 = *(char **)(v65 + 56);
          if (v199 == v198)
          {
            *(void *)(v65 + 48) = v153;
            *(void *)(v65 + 56) = v146;
            uint64_t v206 = *(void *)(v65 + 64);
            *(void *)(v65 + 64) = v154;
            if (!v199) {
              goto LABEL_326;
            }
            goto LABEL_325;
          }
          unint64_t v200 = v199 - v198 - 8;
          if (v200 >= 0x58
            && ((unint64_t v201 = (v198 - v199 + 7) & 0xFFFFFFFFFFFFFFF8, &v199[v201] >= (char *)v153)
             || (char *)v153 + v201 >= v199))
          {
            v202 = v39;
            uint64_t v245 = (v200 >> 3) + 1;
            uint64_t v203 = &v199[-8 * (v245 & 0x3FFFFFFFFFFFFFFCLL)];
            v246 = v153 - 2;
            v247 = v199 - 32;
            uint64_t v248 = v245 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v250 = *(_OWORD *)v247;
              long long v249 = *((_OWORD *)v247 + 1);
              *(_OWORD *)v247 = 0uLL;
              *((_OWORD *)v247 + 1) = 0uLL;
              v247 -= 32;
              *((_OWORD *)v246 - 1) = v250;
              *(_OWORD *)v246 = v249;
              v246 -= 4;
              v248 -= 4;
            }
            while (v248);
            v153 -= v245 & 0x3FFFFFFFFFFFFFFCLL;
            if (v245 == (v245 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_313;
            }
          }
          else
          {
            v202 = v39;
            uint64_t v203 = *(char **)(v65 + 56);
          }
          do
          {
            v204 = (geo::codec::VectorTile **)*((void *)v203 - 1);
            v203 -= 8;
            *(void *)uint64_t v203 = 0;
            *--v153 = v204;
          }
          while (v203 != v198);
LABEL_313:
          v199 = *(char **)(v65 + 48);
          uint64_t v205 = *(char **)(v65 + 56);
          *(void *)(v65 + 48) = v153;
          *(void *)(v65 + 56) = v146;
          uint64_t v206 = *(void *)(v65 + 64);
          *(void *)(v65 + 64) = v154;
          while (v205 != v199)
          {
            uint64_t v208 = *((void *)v205 - 1);
            v205 -= 8;
            uint64_t v207 = v208;
            *(void *)uint64_t v205 = 0;
            if (v208)
            {
              uint64_t v209 = *(void *)(v207 + 24);
              if (v209)
              {
                *(void *)(v207 + 32) = v209;
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v207 + 48) + 40))(*(void *)(v207 + 48), v209, *(void *)(v207 + 40) - v209);
              }
              char v210 = *(std::__shared_weak_count **)(v207 + 8);
              if (v210) {
                std::__shared_weak_count::__release_weak(v210);
              }
              {
                operator new();
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v207, 64);
            }
          }
          unint64_t v39 = v202;
          if (!v199) {
            goto LABEL_326;
          }
LABEL_325:
          (*(void (**)(void, char *, uint64_t))(**(void **)(v65 + 72) + 40))(*(void *)(v65 + 72), v199, v206 - (void)v199);
LABEL_326:
          *(void *)(v65 + 56) = v146;
          if (!v39) {
            goto LABEL_333;
          }
          uint64_t v63 = v39[3];
          if (v63) {
            goto LABEL_328;
          }
LABEL_329:
          uint64_t v211 = (std::__shared_weak_count *)v39[1];
          if (v211) {
            std::__shared_weak_count::__release_weak(v211);
          }
          {
            operator new();
          }
          (*(void (**)(void, geo::codec::VectorTile **, uint64_t))(**((void **)v66 + 91) + 40))(*((void *)v66 + 91), v39, 64);
LABEL_333:
          if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
LABEL_4:
          a2 = v265 + 1;
          if (v265 + 1 == a3) {
            return;
          }
          continue;
        case 6:
          uint64_t v55 = (uint64_t (***)(void, void, void))*((void *)v3 + 16);
          if (v55)
          {
            unsigned int v56 = (**v55)(v55, *((void *)v3 + 5), *((unsigned __int8 *)v3 + 224));
            unsigned int v57 = (*(uint64_t (**)(void, void))(**((void **)v3 + 16) + 8))(*((void *)v3 + 16), *((void *)v3 + 5));
          }
          else
          {
            unsigned int v57 = 0;
            unsigned int v56 = 0;
          }
          uint64_t v77 = *((void *)v3 + 14);
          unint64_t v76 = (std::__shared_weak_count *)*((void *)v3 + 15);
          *(void *)&v267[0] = v77;
          *((void *)&v267[0] + 1) = v76;
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v78 = *(void *)(v77 + 216) - *(void *)(v77 + 208);
          if (v78)
          {
            uint64_t v79 = 0;
            unsigned int v80 = 0;
            char v81 = *(unsigned char *)(v77 + 177);
            unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * (v78 >> 5);
            do
            {
              uint64_t v83 = *(void *)(v77 + 208);
              uint64_t v84 = *(void *)(v83 + 96 * v79);
              uint64_t v85 = *(void *)(v83 + 96 * v79 + 8) - v84;
              if ((unint64_t)v85 >= 0x10)
              {
                uint64_t v86 = v83 + 96 * v79;
                uint64_t v88 = *(void *)(v86 + 32);
                uint64_t v87 = *(void *)(v86 + 40);
                uint64_t v89 = v85 >> 3;
                long long v90 = (_OWORD *)(v86 + 64);
                if (v87 == v88) {
                  uint64_t v91 = 0;
                }
                else {
                  uint64_t v91 = v88;
                }
                uint64_t v270 = 0;
                LOWORD(v271) = *(_WORD *)(a1 + 121);
                HIDWORD(v271) = v80;
                LOBYTE(v272) = v81;
                HIBYTE(v272) = v81;
                v273 = v90;
                v274 = 0;
                uint64_t v275 = v84;
                uint64_t v276 = v91;
                uint64_t v277 = 0;
                int v278 = 0;
                int v279 = v89;
                uint64_t v280 = 0;
                unint64_t v281 = __PAIR64__(v57, v56);
                uint64_t v282 = 0;
                char v283 = *(unsigned char *)(a1 + 290);
                switch(v89)
                {
                  case 2:
                    {
                      operator new();
                    }
                    uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                    md::LabelLineSegment::LabelLineSegment(v92, (uint64_t)v267, (uint64_t)&v271);
                  case 3:
                    {
                      operator new();
                    }
                    uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                    md::LabelLineSegment::LabelLineSegment(v95, (uint64_t)v267, (uint64_t)&v271);
                  case 4:
                    {
                      operator new();
                    }
                    uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                    md::LabelLineSegment::LabelLineSegment(v93, (uint64_t)v267, (uint64_t)&v271);
                  case 5:
                    {
                      operator new();
                    }
                    uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                    md::LabelLineSegment::LabelLineSegment(v94, (uint64_t)v267, (uint64_t)&v271);
                  default:
                    {
                      operator new();
                    }
                    uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                    md::LabelLineSegment::LabelLineSegment(v96, (uint64_t)v267, (uint64_t)&v271);
                }
              }
              uint64_t v79 = ++v80;
            }
            while (v82 > v80);
            unint64_t v76 = (std::__shared_weak_count *)*((void *)&v267[0] + 1);
          }
          if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
          goto LABEL_4;
        case 7:
          unint64_t v33 = (uint64_t (***)(void, void, void))*((void *)v3 + 16);
          if (v33)
          {
            unsigned int v34 = (**v33)(v33, *((void *)v3 + 5), *((unsigned __int8 *)v3 + 224));
            LODWORD(v33) = (*(uint64_t (**)(void, void))(**((void **)v3 + 16) + 8))(*((void *)v3 + 16), *((void *)v3 + 5));
          }
          else
          {
            unsigned int v34 = 0;
          }
          uint64_t v70 = *((void *)v3 + 14);
          long long v71 = (std::__shared_weak_count *)*((void *)v3 + 15);
          v268[0] = v70;
          v268[1] = (uint64_t)v71;
          if (v71) {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v73 = v70 + 184;
          uint64_t v72 = *(void *)(v70 + 184);
          unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v73 + 8) - v72) >> 3);
          v267[0] = v253;
          v267[1] = v252;
          if (v74 >= 2)
          {
            uint64_t v269 = 0;
            LOWORD(v271) = *(_WORD *)(a1 + 121);
            HIDWORD(v271) = 0;
            __int16 v272 = 0;
            v273 = v267;
            v274 = 0;
            uint64_t v275 = 0;
            uint64_t v276 = 0;
            uint64_t v277 = v72;
            int v278 = 0;
            int v279 = v74;
            uint64_t v280 = 0x3F80000000000000;
            unint64_t v281 = __PAIR64__(v33, v34);
            uint64_t v282 = 0;
            char v283 = *(unsigned char *)(a1 + 290);
            switch(v74)
            {
              case 2uLL:
                {
                  operator new();
                }
                uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                md::LabelLineSegment::LabelLineSegment(v75, (uint64_t)v268, (uint64_t)&v271);
              case 3uLL:
                {
                  operator new();
                }
                uint64_t v214 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                md::LabelLineSegment::LabelLineSegment(v214, (uint64_t)v268, (uint64_t)&v271);
              case 4uLL:
                {
                  operator new();
                }
                uint64_t v212 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                md::LabelLineSegment::LabelLineSegment(v212, (uint64_t)v268, (uint64_t)&v271);
              case 5uLL:
                {
                  operator new();
                }
                uint64_t v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                md::LabelLineSegment::LabelLineSegment(v213, (uint64_t)v268, (uint64_t)&v271);
              default:
                {
                  operator new();
                }
                uint64_t v215 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                md::LabelLineSegment::LabelLineSegment(v215, (uint64_t)v268, (uint64_t)&v271);
            }
          }
          if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
          goto LABEL_4;
        case 8:
          uint64_t v61 = (uint64_t (***)(void, void, void))*((void *)v3 + 16);
          if (v61)
          {
            unsigned int v62 = (**v61)(v61, *((void *)v3 + 5), *((unsigned __int8 *)v3 + 224));
            unsigned int v263 = (*(uint64_t (**)(void, void))(**((void **)v3 + 16) + 8))(*((void *)v3 + 16), *((void *)v3 + 5));
          }
          else
          {
            unsigned int v263 = 0;
            unsigned int v62 = 0;
          }
          uint64_t v97 = *((void *)v3 + 5);
          char v98 = *(unsigned char *)(geo::codec::VectorTile::key(*((geo::codec::VectorTile **)v3 + 6)) + 1);
          char v99 = *((unsigned char *)v3 + 216);
          uint64_t v100 = geo::codec::VectorTile::transitVertices(*((geo::codec::VectorTile **)v3 + 6));
          unint64_t v101 = *(unsigned int *)(v97 + 20);
          if (v101)
          {
            uint64_t v102 = v100;
            unint64_t v103 = 0;
            int v104 = v98 & 0x3F;
            v259 = (_OWORD *)((char *)v3 + 184);
            uint64_t v105 = (char *)v3 + 144;
            uint64_t v257 = v105;
            do
            {
              uint64_t v106 = *(void *)(v102 + 32) + 16 * *(unsigned int *)(v97 + 16);
              unint64_t v107 = *(void *)(v106 + 16 * v103 + 8);
              if (v107 >= 2)
              {
                uint64_t v108 = *(void *)(v102 + 8);
                uint64_t v109 = *(void *)(v106 + 16 * v103);
                v268[0] = 0;
                LOWORD(v271) = *(_WORD *)(a1 + 121);
                HIDWORD(v271) = v103;
                LOBYTE(v272) = v99;
                HIBYTE(v272) = v104;
                v273 = v259;
                v274 = v105;
                uint64_t v275 = v108 + 8 * v109;
                int v279 = v107;
                uint64_t v280 = 0;
                uint64_t v276 = 0;
                uint64_t v277 = 0;
                int v278 = 0;
                unint64_t v281 = __PAIR64__(v263, v62);
                uint64_t v282 = 0;
                char v283 = *(unsigned char *)(a1 + 290);
                switch(v107)
                {
                  case 2uLL:
                    {
                      operator new();
                    }
                    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
                    *(void *)(v110 + 8) = 0;
                    *(void *)(v110 + 16) = v97;
                    *(void *)(v110 + 24) = 0;
                    *(unsigned char *)(v110 + 32) = 2;
                    *(unsigned char *)(v110 + 33) = v283;
                    *(_WORD *)(v110 + 34) = v272;
                    *(_WORD *)(v110 + 36) = 0;
                    *(unsigned char *)(v110 + 38) = v281;
                    *(_DWORD *)(v110 + 40) = 0;
                    *(_WORD *)(v110 + 44) = WORD2(v271);
                    *(_WORD *)(v110 + 46) = v279;
                    *(void *)uint64_t v110 = &unk_1EF53F898;
                    *(void *)(v110 + 80) = 0;
                    *(_OWORD *)(v110 + 48) = 0u;
                    *(_OWORD *)(v110 + 64) = 0u;
                    *(_DWORD *)(v110 + 88) = 2139095039;
                    *(_WORD *)(v110 + 92) = 0;
                    *(unsigned char *)(v110 + 94) = 0;
                    *(_OWORD *)(v110 + 96) = 0u;
                    *(_OWORD *)(v110 + 112) = 0u;
                    *(void *)(v110 + 128) = 0;
                    *(_DWORD *)(v110 + 136) = 2139095039;
                    *(_WORD *)(v110 + 140) = 0;
                    *(unsigned char *)(v110 + 142) = 0;
                    *(void *)(v110 + 144) = 0x7F7F00007F7FLL;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v110, v97, (uint64_t)&v271);
                    uint64_t v111 = a1;
                    goto LABEL_160;
                  case 3uLL:
                    {
                      operator new();
                    }
                    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
                    *(void *)(v110 + 8) = 0;
                    *(void *)(v110 + 16) = v97;
                    *(void *)(v110 + 24) = 0;
                    *(unsigned char *)(v110 + 32) = 2;
                    *(unsigned char *)(v110 + 33) = v283;
                    *(_WORD *)(v110 + 34) = v272;
                    *(_WORD *)(v110 + 36) = 0;
                    *(unsigned char *)(v110 + 38) = v281;
                    *(_DWORD *)(v110 + 40) = 0;
                    *(_WORD *)(v110 + 44) = WORD2(v271);
                    *(_WORD *)(v110 + 46) = v279;
                    *(void *)uint64_t v110 = &unk_1EF53F8F0;
                    *(void *)(v110 + 80) = 0;
                    *(_OWORD *)(v110 + 48) = 0u;
                    *(_OWORD *)(v110 + 64) = 0u;
                    *(_DWORD *)(v110 + 88) = 2139095039;
                    *(_WORD *)(v110 + 92) = 0;
                    *(unsigned char *)(v110 + 94) = 0;
                    *(_OWORD *)(v110 + 96) = 0u;
                    *(_OWORD *)(v110 + 112) = 0u;
                    *(void *)(v110 + 128) = 0;
                    *(_DWORD *)(v110 + 136) = 2139095039;
                    *(_WORD *)(v110 + 140) = 0;
                    *(unsigned char *)(v110 + 142) = 0;
                    *(_OWORD *)(v110 + 144) = 0u;
                    *(_OWORD *)(v110 + 160) = 0u;
                    *(void *)(v110 + 176) = 0;
                    *(_DWORD *)(v110 + 184) = 2139095039;
                    *(_WORD *)(v110 + 188) = 0;
                    *(unsigned char *)(v110 + 190) = 0;
                    *(void *)(v110 + 192) = 0x7F7F00007F7FLL;
                    *(_DWORD *)(v110 + 200) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v110, v97, (uint64_t)&v271);
                    uint64_t v111 = a1;
                    goto LABEL_160;
                  case 4uLL:
                    {
                      operator new();
                    }
                    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
                    *(void *)(v110 + 8) = 0;
                    *(void *)(v110 + 16) = v97;
                    *(void *)(v110 + 24) = 0;
                    *(unsigned char *)(v110 + 32) = 2;
                    *(unsigned char *)(v110 + 33) = v283;
                    *(_WORD *)(v110 + 34) = v272;
                    *(_WORD *)(v110 + 36) = 0;
                    *(unsigned char *)(v110 + 38) = v281;
                    *(_DWORD *)(v110 + 40) = 0;
                    *(_WORD *)(v110 + 44) = WORD2(v271);
                    *(_WORD *)(v110 + 46) = v279;
                    *(void *)uint64_t v110 = &unk_1EF53F948;
                    *(void *)(v110 + 80) = 0;
                    *(_OWORD *)(v110 + 48) = 0u;
                    *(_OWORD *)(v110 + 64) = 0u;
                    *(_DWORD *)(v110 + 88) = 2139095039;
                    *(_WORD *)(v110 + 92) = 0;
                    *(unsigned char *)(v110 + 94) = 0;
                    *(_OWORD *)(v110 + 96) = 0u;
                    *(_OWORD *)(v110 + 112) = 0u;
                    *(void *)(v110 + 128) = 0;
                    *(_DWORD *)(v110 + 136) = 2139095039;
                    *(_WORD *)(v110 + 140) = 0;
                    *(unsigned char *)(v110 + 142) = 0;
                    *(_OWORD *)(v110 + 144) = 0u;
                    *(_OWORD *)(v110 + 160) = 0u;
                    *(void *)(v110 + 176) = 0;
                    *(_DWORD *)(v110 + 184) = 2139095039;
                    *(_WORD *)(v110 + 188) = 0;
                    *(unsigned char *)(v110 + 190) = 0;
                    *(_OWORD *)(v110 + 192) = 0u;
                    *(_OWORD *)(v110 + 208) = 0u;
                    *(void *)(v110 + 224) = 0;
                    *(_DWORD *)(v110 + 232) = 2139095039;
                    *(_WORD *)(v110 + 236) = 0;
                    *(unsigned char *)(v110 + 238) = 0;
                    *(_OWORD *)(v110 + 240) = xmmword_1A28FE520;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v110, v97, (uint64_t)&v271);
                    uint64_t v111 = a1;
                    goto LABEL_160;
                  case 5uLL:
                    {
                      operator new();
                    }
                    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
                    *(void *)(v110 + 8) = 0;
                    *(void *)(v110 + 16) = v97;
                    *(void *)(v110 + 24) = 0;
                    *(unsigned char *)(v110 + 32) = 2;
                    *(unsigned char *)(v110 + 33) = v283;
                    *(_WORD *)(v110 + 34) = v272;
                    *(_WORD *)(v110 + 36) = 0;
                    *(unsigned char *)(v110 + 38) = v281;
                    *(_DWORD *)(v110 + 40) = 0;
                    *(_WORD *)(v110 + 44) = WORD2(v271);
                    *(_WORD *)(v110 + 46) = v279;
                    *(void *)uint64_t v110 = &unk_1EF53F9A0;
                    *(void *)(v110 + 80) = 0;
                    *(_OWORD *)(v110 + 48) = 0u;
                    *(_OWORD *)(v110 + 64) = 0u;
                    *(_DWORD *)(v110 + 88) = 2139095039;
                    *(_WORD *)(v110 + 92) = 0;
                    *(unsigned char *)(v110 + 94) = 0;
                    *(_OWORD *)(v110 + 96) = 0u;
                    *(_OWORD *)(v110 + 112) = 0u;
                    *(void *)(v110 + 128) = 0;
                    *(_DWORD *)(v110 + 136) = 2139095039;
                    *(_WORD *)(v110 + 140) = 0;
                    *(unsigned char *)(v110 + 142) = 0;
                    *(_OWORD *)(v110 + 144) = 0u;
                    *(_OWORD *)(v110 + 160) = 0u;
                    *(void *)(v110 + 176) = 0;
                    *(_DWORD *)(v110 + 184) = 2139095039;
                    *(_WORD *)(v110 + 188) = 0;
                    *(unsigned char *)(v110 + 190) = 0;
                    *(_OWORD *)(v110 + 192) = 0u;
                    *(_OWORD *)(v110 + 208) = 0u;
                    *(void *)(v110 + 224) = 0;
                    *(_DWORD *)(v110 + 232) = 2139095039;
                    *(_WORD *)(v110 + 236) = 0;
                    *(unsigned char *)(v110 + 238) = 0;
                    *(void *)(v110 + 272) = 0;
                    *(_OWORD *)(v110 + 240) = 0u;
                    *(_OWORD *)(v110 + 256) = 0u;
                    *(_DWORD *)(v110 + 280) = 2139095039;
                    *(_WORD *)(v110 + 284) = 0;
                    *(unsigned char *)(v110 + 286) = 0;
                    *(_OWORD *)(v110 + 288) = xmmword_1A28FE520;
                    *(_DWORD *)(v110 + 304) = 32639;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v110, v97, (uint64_t)&v271);
                    uint64_t v111 = a1;
LABEL_160:
                    v268[0] = v110;
                    break;
                  default:
                    {
                      operator new();
                    }
                    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
                    *(void *)(v110 + 8) = 0;
                    *(void *)(v110 + 16) = v97;
                    *(void *)(v110 + 24) = 0;
                    *(unsigned char *)(v110 + 32) = 2;
                    *(unsigned char *)(v110 + 33) = v283;
                    *(_WORD *)(v110 + 34) = v272;
                    *(_WORD *)(v110 + 36) = 0;
                    *(unsigned char *)(v110 + 38) = v281;
                    *(_DWORD *)(v110 + 40) = 0;
                    *(_WORD *)(v110 + 44) = WORD2(v271);
                    *(_WORD *)(v110 + 46) = v279;
                    *(void *)uint64_t v110 = &unk_1EF53D950;
                    *(void *)(v110 + 48) = 0;
                    *(void *)(v110 + 56) = 0;
                    *(void *)(v110 + 64) = 0;
                    {
                      operator new();
                    }
                    *(void *)(v110 + 72) = mdm::Allocator::instance(void)::alloc;
                    *(void *)(v110 + 80) = 0;
                    *(void *)(v110 + 88) = 0;
                    *(void *)(v110 + 96) = 0;
                    {
                      operator new();
                    }
                    *(void *)(v110 + 104) = mdm::Allocator::instance(void)::alloc;
                    md::LabelLineSegment::createLists((unsigned __int16 *)v110, v97, (uint64_t)&v271);
                    v268[0] = v110;
                    uint64_t v111 = a1;
                    uint64_t v105 = v257;
                    break;
                }
                LOBYTE(v270) = v104;
                LOBYTE(v269) = v99;
                uint64_t v113 = *(void *)(v111 + 128);
                unint64_t v112 = *(void *)(v111 + 136);
                if (v113 == v112)
                {
LABEL_164:
                  *(void *)&v267[0] = v111;
                  if (v112 >= *(void *)(v111 + 144))
                  {
                    uint64_t v114 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(v261, (uint64_t *)v267, (char *)&v270, (char *)&v269, v260);
                  }
                  else
                  {
                    if (v112) {
                      unint64_t v112 = md::LabelLineZSet::LabelLineZSet(v112, v111, v104, v99, *(unsigned char *)(v111 + 120));
                    }
                    uint64_t v114 = v112 + 112;
                    *(void *)(v111 + 136) = v114;
                  }
                  *(void *)(v111 + 136) = v114;
                  uint64_t v113 = v114 - 112;
                }
                else
                {
                  while (*(unsigned __int8 *)(v113 + 1) != v104)
                  {
                    v113 += 112;
                    if (v113 == v112) {
                      goto LABEL_164;
                    }
                  }
                }
                v115 = *(uint64_t **)(v113 + 24);
                if ((unint64_t)v115 >= *(void *)(v113 + 32))
                {
                  uint64_t v116 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v113 + 16, v268);
                  uint64_t v110 = v268[0];
                }
                else
                {
                  if (v115)
                  {
                    v268[0] = 0;
                    uint64_t *v115 = v110;
                    uint64_t v110 = 0;
                  }
                  uint64_t v116 = v115 + 1;
                }
                *(void *)(v113 + 24) = v116;
                atomic_store(0, (unsigned __int8 *)(v111 + 248));
                v268[0] = 0;
                if (v110) {
                  (*(void (**)(uint64_t))(*(void *)v110 + 8))(v110);
                }
                unint64_t v101 = *(unsigned int *)(v97 + 20);
              }
              ++v103;
            }
            while (v103 < v101);
          }
          goto LABEL_4;
        case 9:
          uint64_t v11 = geo::codec::VectorTile::key(*((geo::codec::VectorTile **)v3 + 1));
          uint64_t v13 = *(void *)(a1 + 128);
          uint64_t v12 = *(void *)(a1 + 136);
          if (v13 == v12) {
            goto LABEL_4;
          }
          while (*(unsigned char *)(v13 + 1) != (*(unsigned char *)(v11 + 1) & 0x3F))
          {
            v13 += 112;
            if (v13 == v12) {
              goto LABEL_4;
            }
          }
          uint64_t v118 = *((void *)v3 + 1);
          unint64_t v117 = (std::__shared_weak_count *)*((void *)v3 + 2);
          if (v117)
          {
            atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
            float32x4x2_t v119 = *(void **)(v13 + 16);
            id v120 = (void **)(v13 + 24);
            long long v121 = *(void **)(v13 + 24);
            atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            float32x4x2_t v119 = *(void **)(v13 + 16);
            id v120 = (void **)(v13 + 24);
            long long v121 = *(void **)(v13 + 24);
          }
          while (2)
          {
            if (v119 == v121)
            {
              float32x4x2_t v119 = v121;
            }
            else
            {
              unsigned int v155 = *(unsigned __int8 *)(*v119 + 32);
              BOOL v156 = v155 > 3 || v155 == 1;
              if (v156
                || (unint64_t v157 = *(uint64_t **)(*v119 + 16)) == 0
                || (unint64_t v158 = (std::__shared_weak_count *)v157[1]) == 0
                || (BOOL v159 = std::__shared_weak_count::lock(v158)) == 0)
              {
                if (!v118) {
                  goto LABEL_241;
                }
LABEL_228:
                ++v119;
                continue;
              }
              uint64_t v160 = v159;
              uint64_t v161 = *v157;
              if (atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                if (v161 == v118) {
                  goto LABEL_241;
                }
                goto LABEL_228;
              }
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v160);
              if (v161 != v118) {
                goto LABEL_228;
              }
LABEL_241:
              if (v119 != v121)
              {
                for (j = v119 + 1; ; ++j)
                {
                  if (j == v121) {
                    goto LABEL_261;
                  }
                  unsigned int v163 = *(unsigned __int8 *)(*j + 32);
                  if (v163 > 3 || v163 == 1) {
                    break;
                  }
                  long long v165 = *(uint64_t **)(*j + 16);
                  if (!v165) {
                    break;
                  }
                  int v166 = (std::__shared_weak_count *)v165[1];
                  if (!v166) {
                    break;
                  }
                  v167 = std::__shared_weak_count::lock(v166);
                  if (!v167) {
                    break;
                  }
                  unint64_t v168 = v167;
                  uint64_t v169 = *v165;
                  if (!atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v168);
                  }
                  if (v169 != v118) {
                    goto LABEL_258;
                  }
LABEL_244:
                  ;
                }
                if (!v118) {
                  goto LABEL_244;
                }
LABEL_258:
                uint64_t v170 = *j;
                void *j = 0;
                uint64_t v171 = *v119;
                void *v119 = v170;
                if (v171) {
                  (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
                }
                ++v119;
                goto LABEL_244;
              }
            }
            break;
          }
LABEL_261:
          if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
          uint64_t v172 = *v120;
          BOOL v173 = v119 != *v120;
          if (v119 != *v120)
          {
            while (v172 != v119)
            {
              uint64_t v175 = *--v172;
              uint64_t v174 = v175;
              *uint64_t v172 = 0;
              if (v175) {
                (*(void (**)(uint64_t))(*(void *)v174 + 8))(v174);
              }
            }
            *id v120 = v119;
          }
          if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
            uint64_t v177 = *((void *)v3 + 1);
            uint64_t v176 = (std::__shared_weak_count *)*((void *)v3 + 2);
            if (v176)
            {
LABEL_273:
              atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
              int v178 = (uint64_t ***)(v13 + 56);
              unint64_t v179 = *(uint64_t ***)(v13 + 56);
              size_t v180 = *(uint64_t ***)(v13 + 48);
              atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_350;
            }
          }
          else
          {
            uint64_t v177 = *((void *)v3 + 1);
            uint64_t v176 = (std::__shared_weak_count *)*((void *)v3 + 2);
            if (v176) {
              goto LABEL_273;
            }
          }
          int v178 = (uint64_t ***)(v13 + 56);
          unint64_t v179 = *(uint64_t ***)(v13 + 56);
          size_t v180 = *(uint64_t ***)(v13 + 48);
LABEL_350:
          while (v180 != v179)
          {
            uint64_t v216 = *v180;
            v217 = (std::__shared_weak_count *)(*v180)[1];
            if (!v217 || (uint64_t v218 = std::__shared_weak_count::lock(v217)) == 0)
            {
              if (!v177) {
                goto LABEL_357;
              }
              goto LABEL_349;
            }
            uint64_t v219 = v218;
            uint64_t v220 = *v216;
            if (!atomic_fetch_add(&v218->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v219);
              if (v220 != v177) {
                goto LABEL_349;
              }
LABEL_357:
              if (v180 != v179)
              {
                for (k = v180 + 1; ; ++k)
                {
                  if (k == v179) {
                    goto LABEL_379;
                  }
                  v222 = *k;
                  v223 = (std::__shared_weak_count *)(*k)[1];
                  if (!v223) {
                    break;
                  }
                  v224 = std::__shared_weak_count::lock(v223);
                  if (!v224) {
                    break;
                  }
                  uint64_t v225 = v224;
                  uint64_t v226 = *v222;
                  if (!atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                    std::__shared_weak_count::__release_weak(v225);
                  }
                  if (v226 != v177) {
                    goto LABEL_371;
                  }
LABEL_362:
                  ;
                }
                if (!v177) {
                  goto LABEL_362;
                }
LABEL_371:
                unint64_t v227 = *k;
                void *k = 0;
                unint64_t v228 = *v180;
                *size_t v180 = v227;
                if (v228)
                {
                  uint64_t v229 = v228[3];
                  if (v229)
                  {
                    v228[4] = v229;
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v228[6] + 40))(v228[6], v229, v228[5] - v229);
                  }
                  v230 = (std::__shared_weak_count *)v228[1];
                  if (v230) {
                    std::__shared_weak_count::__release_weak(v230);
                  }
                  {
                    operator new();
                  }
                  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v228, 64);
                }
                ++v180;
                goto LABEL_362;
              }
LABEL_379:
              if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
              v231 = *v178;
              if (v180 != v231)
              {
                unint64_t v232 = *(uint64_t ***)(v13 + 56);
                if (v231 != v232)
                {
                  uint64_t v233 = v231 - v180;
                  do
                  {
                    uint64_t v234 = v180[v233];
                    v180[v233] = 0;
                    uint64_t v235 = *v180;
                    *size_t v180 = v234;
                    if (v235)
                    {
                      uint64_t v236 = v235[3];
                      if (v236)
                      {
                        v235[4] = v236;
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v235[6] + 40))(v235[6], v236, v235[5] - v236);
                      }
                      v237 = (std::__shared_weak_count *)v235[1];
                      if (v237) {
                        std::__shared_weak_count::__release_weak(v237);
                      }
                      {
                        operator new();
                      }
                      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v235, 64);
                    }
                    ++v180;
                  }
                  while (&v180[v233] != v232);
                  v231 = *(uint64_t ***)(v13 + 56);
                }
                while (v231 != v180)
                {
                  uint64_t v239 = (uint64_t)*--v231;
                  uint64_t v238 = v239;
                  char *v231 = 0;
                  if (v239)
                  {
                    uint64_t v240 = *(void *)(v238 + 24);
                    if (v240)
                    {
                      *(void *)(v238 + 32) = v240;
                      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v238 + 48) + 40))(*(void *)(v238 + 48), v240, *(void *)(v238 + 40) - v240);
                    }
                    v241 = *(std::__shared_weak_count **)(v238 + 8);
                    if (v241) {
                      std::__shared_weak_count::__release_weak(v241);
                    }
                    {
                      operator new();
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v238, 64);
                  }
                }
                *(void *)(v13 + 56) = v180;
                BOOL v173 = 1;
              }
              if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
                if (v173) {
                  goto LABEL_421;
                }
              }
              else if (v173)
              {
                goto LABEL_421;
              }
              goto LABEL_4;
            }
            if (v220 == v177) {
              goto LABEL_357;
            }
LABEL_349:
            ++v180;
          }
          size_t v180 = v179;
          goto LABEL_379;
        case 0xA:
          uint64_t v59 = *(void *)(a1 + 128);
          uint64_t v58 = *(void *)(a1 + 136);
          if (v59 == v58) {
            goto LABEL_4;
          }
          uint64_t v60 = *((void *)v3 + 3);
          while (*(unsigned __int8 *)(v59 + 1) != *(unsigned __int8 *)(v60 + 1))
          {
            v59 += 112;
            if (v59 == v58) {
              goto LABEL_4;
            }
          }
          id v122 = (std::__shared_weak_count *)*((void *)v3 + 4);
          if (v122)
          {
            atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
            int v125 = *(void **)(v59 + 16);
            uint64_t v123 = v59 + 16;
            uint64_t v124 = v125;
            uint64_t v128 = *(void **)(v123 + 8);
            uint64_t v126 = (void *)(v123 + 8);
            unint64_t v127 = v128;
            atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            unint64_t v182 = *(void **)(v59 + 16);
            uint64_t v181 = v59 + 16;
            uint64_t v124 = v182;
            v183 = *(void **)(v181 + 8);
            uint64_t v126 = (void *)(v181 + 8);
            unint64_t v127 = v183;
          }
          while (2)
          {
            if (v124 == v127)
            {
              uint64_t v124 = v127;
            }
            else
            {
              if (*(unsigned char *)(*v124 + 32) != 4
                || (uint64_t v184 = *(uint64_t **)(*v124 + 16), (v185 = (std::__shared_weak_count *)v184[1]) == 0)
                || (v186 = std::__shared_weak_count::lock(v185)) == 0)
              {
                if (!v60) {
                  goto LABEL_285;
                }
LABEL_276:
                ++v124;
                continue;
              }
              int v187 = v186;
              uint64_t v188 = *v184;
              if (atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                if (v188 == v60) {
                  goto LABEL_285;
                }
                goto LABEL_276;
              }
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v187);
              if (v188 != v60) {
                goto LABEL_276;
              }
LABEL_285:
              if (v124 != v127)
              {
                for (m = v124 + 1; ; ++m)
                {
                  if (m == v127) {
                    goto LABEL_301;
                  }
                  if (*(unsigned char *)(*m + 32) != 4) {
                    break;
                  }
                  v190 = *(uint64_t **)(*m + 16);
                  float32x4x2_t v191 = (std::__shared_weak_count *)v190[1];
                  if (!v191) {
                    break;
                  }
                  float32x4x3_t v192 = std::__shared_weak_count::lock(v191);
                  if (!v192) {
                    break;
                  }
                  v193 = v192;
                  uint64_t v194 = *v190;
                  if (!atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                    std::__shared_weak_count::__release_weak(v193);
                  }
                  if (v194 != v60) {
                    goto LABEL_298;
                  }
LABEL_288:
                  ;
                }
                if (!v60) {
                  goto LABEL_288;
                }
LABEL_298:
                uint64_t v195 = *m;
                void *m = 0;
                uint64_t v196 = *v124;
                *uint64_t v124 = v195;
                if (v196) {
                  (*(void (**)(uint64_t))(*(void *)v196 + 8))(v196);
                }
                ++v124;
                goto LABEL_288;
              }
            }
            break;
          }
LABEL_301:
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
          v197 = (void *)*v126;
          if (v124 != (void *)*v126)
          {
            uint64_t v242 = (void *)*v126;
            while (v242 != v124)
            {
              uint64_t v244 = *--v242;
              uint64_t v243 = v244;
              *uint64_t v242 = 0;
              if (v244) {
                (*(void (**)(uint64_t))(*(void *)v243 + 8))(v243);
              }
            }
            *uint64_t v126 = v124;
          }
          if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
          if (v124 != v197)
          {
LABEL_421:
            uint64_t v10 = a1;
LABEL_422:
            atomic_store(0, (unsigned __int8 *)(v10 + 248));
          }
          goto LABEL_4;
        default:
          goto LABEL_4;
      }
    }
  }
}

void sub_1A19923A4(_Unwind_Exception *a1)
{
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 88) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 104) + 40))(*(void *)(v3 + 104), v6, *(void *)(v3 + 96) - v6);
  }
  uint64_t v7 = *v1;
  if (*v1)
  {
    *(void *)(v3 + 56) = v7;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 72) + 40))(*(void *)(v3 + 72), v7, *(void *)(v3 + 64) - v7);
  }
  *(void *)uint64_t v3 = &unk_1EF536348;
  uint64_t v8 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  if (v8)
  {
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    MEMORY[0x1A6239270](v8, 0x1020C40457A241BLL);
  }
  {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v3, 112);
  uint64_t v10 = *(std::__shared_weak_count **)(v4 - 232);
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_117;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0x88B81689974D86F3;
    if (a3 <= 0x88B81689974D86F3) {
      unint64_t v4 = 0x88B81689974D86F3 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0x88B81689974D86F3;
  }
  uint64_t v9 = *(void **)(a2 + 8 * v4);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x88B81689974D86F3)
      {
        if (v10[2] == 0x88B81689974D86F3) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x88B81689974D86F3) {
      break;
    }
    if (v11 >= a3) {
      v11 %= a3;
    }
    if (v11 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x88B81689974D86F3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x88B81689974D86F3)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v14 = 0x12B1E486D3040E2CLL;
    if (a3 <= 0x12B1E486D3040E2CLL) {
      uint64_t v14 = 0x12B1E486D3040E2CLL % a3;
    }
  }
  else
  {
    uint64_t v14 = (a3 - 1) & 0x12B1E486D3040E2CLL;
  }
  uint64_t v15 = *(void **)(a2 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  uint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0x12B1E486D3040E2CLL)
      {
        if (v16[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0x12B1E486D3040E2CLL)
    {
      if (v17 >= a3) {
        v17 %= a3;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_35:
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v6 = *(void *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v20 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v20 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v20 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  char v21 = *(void **)(a2 + 8 * v20);
  if (!v21) {
    goto LABEL_71;
  }
  long long v22 = (void *)*v21;
  if (!v22) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0xFBD83FDA8879FF7ELL)
      {
        if (v22[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_69;
        }
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      long long v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = v22[1];
    if (v23 != 0xFBD83FDA8879FF7ELL)
    {
      if (v23 >= a3) {
        v23 %= a3;
      }
      if (v23 != v20) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v22[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_58:
      long long v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v25 = v22[5];
  if (*(void *)(v25 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v8 = *(void *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v26 = 0xDFC317497CF9A4BFLL;
    if (a3 <= 0xDFC317497CF9A4BFLL) {
      unint64_t v26 = 0xDFC317497CF9A4BFLL % a3;
    }
  }
  else
  {
    unint64_t v26 = (a3 - 1) & 0xDFC317497CF9A4BFLL;
  }
  uint64_t v27 = *(void **)(a2 + 8 * v26);
  if (!v27) {
    goto LABEL_94;
  }
  unint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0xDFC317497CF9A4BFLL)
      {
        if (v28[2] == 0xDFC317497CF9A4BFLL) {
          goto LABEL_92;
        }
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v29 = v28[1];
    if (v29 != 0xDFC317497CF9A4BFLL)
    {
      if (v29 >= a3) {
        v29 %= a3;
      }
      if (v29 != v26) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v28[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_81:
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v5 = *(void *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v32 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v32 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v32 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  unint64_t v33 = *(void **)(a2 + 8 * v32);
  if (!v33) {
    goto LABEL_117;
  }
  unsigned int v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0xE42D19AFCA302E68)
      {
        if (v34[2] == 0xE42D19AFCA302E68) {
          goto LABEL_115;
        }
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      unsigned int v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v35 >= a3) {
      v35 %= a3;
    }
    if (v35 != v32) {
      goto LABEL_117;
    }
LABEL_104:
    unsigned int v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_117;
    }
  }
  if (v34[2] != 0xE42D19AFCA302E68) {
    goto LABEL_104;
  }
LABEL_115:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) != 0xE42D19AFCA302E68)
  {
LABEL_117:
    uint64_t v38 = 0;
    goto LABEL_118;
  }
  uint64_t v38 = *(void *)(v37 + 32);
LABEL_118:
  *float64x2_t result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

void md::StyleLogic::setUsage(uint64_t a1, int a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 173) != a2 || *(unsigned __int8 *)(a1 + 174) != a3)
  {
    *(unsigned char *)(a1 + 173) = a2;
    *(unsigned char *)(a1 + 174) = a3;
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10071u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10071u, *(unsigned __int8 *)(a1 + 173));
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10072u, *(unsigned __int8 *)(a1 + 174));
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10072u, *(unsigned __int8 *)(a1 + 174));
    char v7 = 4;
    unint64_t v4 = *(char **)(a1 + 1128);
    uint64_t v5 = *(char **)(a1 + 1136);
    if (v4 != v5)
    {
      while (*v4 <= 3u)
      {
        if (++v4 == v5) {
          goto LABEL_9;
        }
      }
    }
    if (v4 == v5 || (uint64_t v5 = v4, *v4 != 4)) {
LABEL_9:
    }
      std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v5, &v7);
    uint64_t v6 = **(void **)(a1 + 1240);
    if (v6)
    {
      char v8 = 12;
      md::MapEngine::setNeedsTick(v6, &v8);
    }
  }
}

void md::StyleLogic::runBeforeLayout(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  v196[0] = &unk_1EF56D440;
  v196[1] = a2;
  v194[0] = &unk_1EF56D488;
  v194[1] = a2;
  uint64_t v195 = v194;
  v199 = v198;
  v197 = v196;
  v198[0] = &unk_1EF56D488;
  v198[1] = a2;
  _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv((uint64_t)v196);
  if (v195 == v194)
  {
    (*(void (**)(void *))(v194[0] + 32))(v194);
  }
  else if (v195)
  {
    (*(void (**)(void))(*v195 + 40))();
  }
  if (v197 == v196)
  {
    (*(void (**)(void *))(v196[0] + 32))(v196);
    if (*(void *)(a1 + 256)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v197) {
    (*(void (**)(void))(*v197 + 40))();
  }
  if (!*(void *)(a1 + 256)) {
LABEL_11:
  }
    md::StyleLogic::updateConfiguration((md::StyleLogic *)a1, 0);
LABEL_12:
  char v7 = *(void **)(a1 + 1256);
  uint64_t v9 = (void *)*v7;
  char v8 = (void *)v7[1];
  if ((void *)*v7 != v8)
  {
    do
    {
      __dst = (void **)a1;
      uint64_t v10 = v9[3];
      if (!v10)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_273;
      }
      (*(void (**)(uint64_t, void ***))(*(void *)v10 + 48))(v10, &__dst);
      v9 += 4;
    }
    while (v9 != v8);
    uint64_t v9 = (void *)*v7;
    uint64_t v11 = v7[1];
    if (v11 == *v7)
    {
      uint64_t v9 = (void *)v7[1];
    }
    else
    {
      uint64_t v12 = v11 - 32;
      uint64_t v13 = (void *)(v11 - 32);
      do
      {
        uint64_t v15 = (void *)v13[3];
        if (v13 == v15)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(void *))(*v15 + 40))(v15);
        }
        v12 -= 32;
        BOOL v14 = v13 == v9;
        v13 -= 4;
      }
      while (!v14);
    }
  }
  uint64_t v16 = (uint64_t *)(a1 + 256);
  v7[1] = v9;
  md::StyleLogicContext::operator=(a4, (uint64_t *)(a1 + 256));
  *(unsigned char *)(a4 + 82) = 0;
  *(unsigned char *)(a4 + 84) = *(unsigned char *)(a1 + 167);
  *(_DWORD *)(a4 + 88) = *(_DWORD *)(a1 + 1096);
  *(unsigned char *)(a4 + 92) = *(unsigned char *)(a1 + 164);
  *(unsigned char *)(a4 + 93) = *(unsigned char *)(a1 + 172);
  *(_WORD *)(a4 + 94) = *(_WORD *)(a1 + 173);
  *(_DWORD *)(a4 + 104) = *(_DWORD *)(a1 + 124);
  *(unsigned char *)(a4 + 83) = *(unsigned char *)(a1 + 1112);
  if (*(unsigned char *)(a1 + 168)) {
    char v17 = *(unsigned char *)(a1 + 169);
  }
  else {
    char v17 = 4;
  }
  *(unsigned char *)(a4 + 112) = v17;
  *(unsigned char *)(a4 + 97) = *(unsigned char *)(a1 + 176);
  id v18 = *a2;
  [v18 size];
  double v20 = v19;
  double v22 = v21;

  if (v20 > 0.0 && v22 > 0.0)
  {
    float v23 = log2(v20 * 0.001953125 * *(float *)(a1 + 124));
    *(float *)(a4 + 100) = v23;
  }
  uint64_t v24 = *(void *)(a1 + 1200);
  uint64_t v25 = *(void *)(a1 + 256);
  if (!v25)
  {
    md::StyleLogic::updateConfiguration((md::StyleLogic *)a1, *(_DWORD *)(a1 + 1096));
    uint64_t v25 = *v16;
  }
  unint64_t v26 = *(std::__shared_weak_count **)(a1 + 264);
  v186[0] = v25;
  v186[1] = (uint64_t)v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::World::setStyleManager(v24, v186);
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v27 = *(uint64_t **)(a1 + 184);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  if (v28 != v29)
  {
    while (*(unsigned char *)v28)
    {
      v28 += 16;
      if (v28 == v29) {
        goto LABEL_42;
      }
    }
  }
  if (v28 == v29) {
LABEL_42:
  }
    uint64_t v30 = 0;
  else {
    uint64_t v30 = *(void *)(v28 + 8);
  }
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10048u, v30 != 0);
  uint64_t v31 = *(uint64_t **)(a1 + 184);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  if (v32 != v33)
  {
    while (*(unsigned char *)v32 != 33)
    {
      v32 += 16;
      if (v32 == v33) {
        goto LABEL_49;
      }
    }
  }
  if (v32 == v33) {
LABEL_49:
  }
    uint64_t v34 = 0;
  else {
    uint64_t v34 = *(void *)(v32 + 8);
  }
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x1007Bu, v34 != 0);
  unint64_t v35 = [MEMORY[0x1E4F1CA20] currentLocale];
  uint64_t v36 = [v35 objectForKey:*MEMORY[0x1E4F1C408]];

  unint64_t v179 = v36;
  if (!v36) {
    goto LABEL_74;
  }
  uint64_t v37 = (const char *)[v36 UTF8String];
  size_t v38 = strlen(v37);
  if (v38 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v39 = v38;
  if (v38 >= 0x17)
  {
    uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17) {
      uint64_t v41 = v38 | 7;
    }
    uint64_t v42 = v41 + 1;
    p_dst = (void **)operator new(v41 + 1);
    uint64_t v188 = v39;
    int64_t v189 = v42 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_58;
  }
  HIBYTE(v189) = v38;
  p_dst = (void **)&__dst;
  if (v38) {
LABEL_58:
  }
    memmove(p_dst, v37, v39);
  *((unsigned char *)p_dst + v39) = 0;
  uint64_t v43 = *v16;
  if (!*v16)
  {
    md::StyleLogic::updateConfiguration((md::StyleLogic *)a1, *(_DWORD *)(a1 + 1096));
    uint64_t v43 = *v16;
  }
  uint64_t v44 = *(void *)(v43 + 16);
  uint64_t v45 = *(std::__shared_weak_count **)(v43 + 24);
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v46 = *(void **)(v44 + 104);
  if (v46
    && (uint64_t v47 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(v46, (uint64_t)&__dst)) != 0)
  {
    int v48 = *((_DWORD *)v47 + 10);
    if (!v45)
    {
LABEL_69:
      if ((SHIBYTE(v189) & 0x80000000) == 0) {
        goto LABEL_70;
      }
LABEL_73:
      operator delete(__dst);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_74;
    }
  }
  else
  {
    int v48 = -1;
    if (!v45) {
      goto LABEL_69;
    }
  }
  if (atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  if (SHIBYTE(v189) < 0) {
    goto LABEL_73;
  }
LABEL_70:
  if ((v48 & 0x80000000) == 0)
  {
LABEL_71:
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x5Du, (unsigned __int16)v48);
    goto LABEL_75;
  }
LABEL_74:
  gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 208), 0x5Du);
LABEL_75:
  if (*(unsigned char *)(a1 + 176) == 2)
  {
    int v49 = *(unsigned __int8 *)(a1 + 1112);
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10038u, v49);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10038u, v49);
    id v50 = *(id *)(a1 + 1160);
    int v51 = [v50 navCameraModeStyleAttribute];

    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10034u, v51);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10034u, v51);
    int v52 = *(unsigned __int8 *)(a1 + 1113);
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10074u, v52);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10074u, v52);
  }
  else
  {
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 208), 0x10034u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 208), 0x10038u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 208), 0x10074u);
  }
  uint64_t v53 = *(void *)(a1 + 224);
  __dst = (void **)(v53 + 16);
  long long v54 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v53 + 16));
  if (v54) {
    geo::read_write_lock::logFailure(v54, (uint64_t)"read lock", v55);
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map((uint64_t *)&v180, (uint64_t *)(v53 + 216));
  unsigned int v56 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v53 + 16));
  if (v56) {
    geo::read_write_lock::logFailure(v56, (uint64_t)"unlock", v57);
  }
  LOWORD(v58) = v182;
  if (v182)
  {
    if (v185)
    {
      if (v182 >= 0x1Eu)
      {
        uint64_t v63 = v180;
        unint64_t v64 = v182;
        do
        {
          unint64_t v65 = v64 >> 1;
          long long v66 = (unsigned int *)&v63[4 * (v64 >> 1)];
          unsigned int v68 = *v66;
          uint64_t v67 = (char *)(v66 + 1);
          v64 += ~(v64 >> 1);
          if (v68 < 0x10064) {
            uint64_t v63 = v67;
          }
          else {
            unint64_t v64 = v65;
          }
        }
        while (v64);
        if (v63 != &v180[4 * v182] && *(_DWORD *)v63 == 65636) {
          LOWORD(v58) = (unint64_t)(v63 - v180) >> 2;
        }
      }
      else
      {
        uint64_t v59 = 0;
        while (1)
        {
          unsigned int v60 = *(_DWORD *)&v180[4 * v59];
          if (v60 >= 0x10064) {
            break;
          }
          if (v182 == ++v59) {
            goto LABEL_104;
          }
        }
        if (v60 == 65636) {
          LOWORD(v58) = v59;
        }
      }
    }
    else
    {
      uint64_t v61 = 4 * v182;
      unsigned int v62 = v180;
      while (*(_DWORD *)v62 != 65636)
      {
        v62 += 4;
        v61 -= 4;
        if (!v61)
        {
          unsigned int v62 = &v180[4 * v182];
          break;
        }
      }
      unint64_t v58 = (unint64_t)(v62 - v180) >> 2;
    }
  }
LABEL_104:
  uint64_t v69 = +[VKDebugSettings sharedSettings];
  [v69 routeWindshieldAnimationTime];
  float v71 = v70;

  unsigned int v72 = v182;
  int v73 = v182 != (unsigned __int16)v58 && *(_WORD *)&v180[2 * (unsigned __int16)v58 + v181] != 0;
  if (*(unsigned __int8 *)(a1 + 1114) != v73)
  {
    unint64_t v74 = *(void **)(a1 + 1184);
    if (v74)
    {
      [v74 stop];
      unsigned int v72 = v182;
    }
    if (v72)
    {
      if (v185)
      {
        if (v72 >= 0x1E)
        {
          char v81 = v180;
          unint64_t v82 = v72;
          do
          {
            unint64_t v83 = v82 >> 1;
            uint64_t v84 = (unsigned int *)&v81[4 * (v82 >> 1)];
            unsigned int v86 = *v84;
            uint64_t v85 = (char *)(v84 + 1);
            v82 += ~(v82 >> 1);
            if (v86 < 0x1006B) {
              char v81 = v85;
            }
            else {
              unint64_t v82 = v83;
            }
          }
          while (v82);
          if (v81 == &v180[4 * v72] || *(_DWORD *)v81 != 65643) {
            goto LABEL_138;
          }
          unint64_t v77 = (unint64_t)(v81 - v180) >> 2;
        }
        else
        {
          uint64_t v75 = 0;
          while (1)
          {
            unsigned int v76 = *(_DWORD *)&v180[4 * v75];
            if (v76 >= 0x1006B) {
              break;
            }
            if (v72 == ++v75) {
              goto LABEL_138;
            }
          }
          if (v76 == 65643) {
            LOWORD(v77) = v75;
          }
          else {
            LOWORD(v77) = v72;
          }
        }
      }
      else
      {
        uint64_t v78 = 4 * v72;
        uint64_t v79 = &v180[v78];
        unsigned int v80 = v180;
        while (*(_DWORD *)v80 != 65643)
        {
          v80 += 4;
          v78 -= 4;
          if (!v78)
          {
            unsigned int v80 = v79;
            break;
          }
        }
        unint64_t v77 = (unint64_t)(v80 - v180) >> 2;
      }
    }
    else
    {
      LOWORD(v77) = 0;
    }
    if (v73)
    {
      if (v72 != (unsigned __int16)v77)
      {
        uint64_t v87 = (unsigned __int16)v77;
        uint64_t v88 = &v180[v181];
        if (*(_WORD *)&v88[2 * v87])
        {
          gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(void *)(a1 + 208), 0x1006Bu, *(unsigned __int16 *)&v88[2 * v87]);
          goto LABEL_139;
        }
      }
    }
LABEL_138:
    gss::ClientStyleState<gss::PropertyID>::removeTargetClientStyleAttribute(*(void *)(a1 + 208), 0x1006Bu);
LABEL_139:
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(void *)(a1 + 208), 0x10064u, v73);
    *(unsigned char *)(a1 + 1114) = v73;
    if (*(unsigned char *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), v71);
    }
    else
    {
      *(unsigned char *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = v71;
      LOBYTE(__dst) = 4;
      uint64_t v89 = *(char **)(a1 + 1128);
      long long v90 = *(char **)(a1 + 1136);
      if (v89 != v90)
      {
        while (*v89 <= 3u)
        {
          if (++v89 == v90) {
            goto LABEL_147;
          }
        }
      }
      if (v89 == v90 || (long long v90 = v89, *v89 != 4)) {
LABEL_147:
      }
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v90, (char *)&__dst);
      uint64_t v91 = **(void **)(a1 + 1240);
      if (v91)
      {
        LOBYTE(__dst) = 12;
        md::MapEngine::setNeedsTick(v91, &__dst);
      }
    }
  }
  unint64_t v92 = v182;
  if (v182)
  {
    if (v185)
    {
      if (v182 >= 0x1Eu)
      {
        uint64_t v97 = v180;
        unint64_t v98 = v182;
        do
        {
          unint64_t v99 = v98 >> 1;
          uint64_t v100 = (unsigned int *)&v97[4 * (v98 >> 1)];
          unsigned int v102 = *v100;
          unint64_t v101 = (char *)(v100 + 1);
          v98 += ~(v98 >> 1);
          if (v102 < 0x1006F) {
            uint64_t v97 = v101;
          }
          else {
            unint64_t v98 = v99;
          }
        }
        while (v98);
        if (v97 != &v180[4 * v182])
        {
          if (*(_DWORD *)v97 == 65647) {
            unint64_t v92 = ((unint64_t)(v97 - v180) >> 2);
          }
          else {
            unint64_t v92 = v182;
          }
        }
      }
      else
      {
        uint64_t v93 = 0;
        while (1)
        {
          unsigned int v94 = *(_DWORD *)&v180[4 * v93];
          if (v94 >= 0x1006F) {
            break;
          }
          if (v182 == ++v93) {
            goto LABEL_174;
          }
        }
        if (v94 == 65647) {
          unint64_t v92 = v93;
        }
        else {
          unint64_t v92 = v182;
        }
      }
    }
    else
    {
      uint64_t v95 = 4 * v182;
      uint64_t v96 = v180;
      while (*(_DWORD *)v96 != 65647)
      {
        v96 += 4;
        v95 -= 4;
        if (!v95)
        {
          uint64_t v96 = &v180[4 * v182];
          break;
        }
      }
      unint64_t v92 = (unint64_t)(v96 - v180) >> 2;
    }
  }
LABEL_174:
  unint64_t v103 = +[VKDebugSettings sharedSettings];
  [v103 routeIsCoveredAnimationTime];
  float v105 = v104;

  int v106 = v182 != (unsigned __int16)v92 && *(_WORD *)&v180[2 * (unsigned __int16)v92 + v181] != 0;
  if (*(unsigned __int8 *)(a1 + 1115) != v106)
  {
    unint64_t v107 = *(void **)(a1 + 1184);
    if (v107) {
      [v107 stop];
    }
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(void *)(a1 + 208), 0x1006Fu, v106);
    *(unsigned char *)(a1 + 1115) = v106;
    if (*(unsigned char *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), v105);
    }
    else
    {
      *(unsigned char *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = v105;
      LOBYTE(__dst) = 4;
      uint64_t v108 = *(char **)(a1 + 1128);
      uint64_t v109 = *(char **)(a1 + 1136);
      if (v108 != v109)
      {
        while (*v108 <= 3u)
        {
          if (++v108 == v109) {
            goto LABEL_188;
          }
        }
      }
      if (v108 == v109 || (uint64_t v109 = v108, *v108 != 4)) {
LABEL_188:
      }
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v109, (char *)&__dst);
      uint64_t v110 = **(void **)(a1 + 1240);
      if (v110)
      {
        LOBYTE(__dst) = 12;
        md::MapEngine::setNeedsTick(v110, &__dst);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1116))
  {
    *(unsigned char *)(a1 + 1116) = 0;
    float v111 = *(float *)(a1 + 1120);
    unint64_t v112 = +[VKDebugSettings sharedSettings];
    int v113 = [v112 disableStylesheetAnimations];
    BOOL v114 = v111 > 0.0;

    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    unint64_t v201 = ___ZN2md10StyleLogic18initiateTransitionEf_block_invoke;
    v202 = &__block_descriptor_40_e8_v12__0f8l;
    uint64_t v203 = a1;
    v115 = (void *)MEMORY[0x1A6239EB0](&buf);
    __dst = (void **)MEMORY[0x1E4F143A8];
    uint64_t v188 = 3221225472;
    int64_t v189 = (int64_t)___ZN2md10StyleLogic18initiateTransitionEf_block_invoke_2;
    v190 = &__block_descriptor_41_e8_v12__0B8l;
    int v116 = v114 & ~v113;
    uint64_t v191 = a1;
    char v192 = v114 & ~(_BYTE)v113;
    unint64_t v117 = (void *)MEMORY[0x1A6239EB0](&__dst);
    uint64_t v118 = [VKTimedAnimation alloc];
    double v119 = v111;
    if (!v116) {
      double v119 = 0.0;
    }
    uint64_t v120 = [(VKTimedAnimation *)v118 initWithDuration:v119];
    long long v121 = *(void **)(a1 + 1184);
    *(void *)(a1 + 1184) = v120;

    [*(id *)(a1 + 1184) setTimingFunction:VKAnimationCurveEaseOut];
    [*(id *)(a1 + 1184) setStepHandler:v115];
    [*(id *)(a1 + 1184) setCompletionHandler:v117];
    LOBYTE(v193) = 1;
    id v122 = *(char **)(a1 + 1128);
    uint64_t v123 = *(char **)(a1 + 1136);
    if (v122 != v123)
    {
      while (!*v122)
      {
        if (++v122 == v123) {
          goto LABEL_200;
        }
      }
    }
    if (v122 == v123 || (uint64_t v123 = v122, *v122 != 1)) {
LABEL_200:
    }
      std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v123, (char *)&v193);
    *(unsigned char *)(a1 + 336) = v116;
    *(unsigned char *)(a1 + 337) = v116;
    md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 200), *(VKAnimation **)(a1 + 1184));

    *(_DWORD *)(a1 + 1120) = 0;
  }
  uint64_t v178 = a4;
  uint64_t v124 = (unint64_t *)(a4 + 120);
  int v125 = *(char **)(a4 + 120);
  *(void *)(a4 + 128) = v125;
  uint64_t v126 = (unint64_t *)(a4 + 144);
  unint64_t v127 = *(char **)(a4 + 144);
  *(void *)(a4 + 152) = v127;
  uint64_t v128 = *(void *)(a1 + 208);
  __dst = (void **)(v128 + 16);
  uint64_t v129 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v128 + 16));
  if (v129) {
    geo::read_write_lock::logFailure(v129, (uint64_t)"read lock", v130);
  }
  int v131 = *(unsigned __int16 *)(v128 + 226);
  if (*(_WORD *)(v128 + 226))
  {
    int v132 = 0;
    unsigned int v133 = 0;
    unsigned int v134 = *(unsigned __int16 *)(v128 + 226);
    do
    {
      if (v133 < v134)
      {
        uint64_t v135 = *(void *)(v128 + 216);
        int v132 = (_DWORD *)(v135 + 4 * v133);
        unint64_t v92 = v135 + *(unsigned __int16 *)(v128 + 224) + 2 * v133;
      }
      LODWORD(buf) = *v132;
      WORD2(buf) = *(_WORD *)v92;
      int v125 = std::vector<std::pair<gss::StyleAttribute,unsigned short>>::insert(v124, (uint64_t)v125, (uint64_t)&buf) + 8;
      unsigned int v134 = *(unsigned __int16 *)(v128 + 226);
      if (v133 + 1 < v134) {
        ++v133;
      }
      else {
        unsigned int v133 = *(unsigned __int16 *)(v128 + 226);
      }
    }
    while (v133 != v131);
  }
  uint64_t v136 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v128 + 16));
  if (v136) {
    geo::read_write_lock::logFailure(v136, (uint64_t)"unlock", v137);
  }
  uint64_t v138 = *(void *)(a1 + 208);
  __dst = (void **)(v138 + 16);
  uint64_t v139 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v138 + 16));
  if (v139) {
    geo::read_write_lock::logFailure(v139, (uint64_t)"read lock", v140);
  }
  int v141 = *(unsigned __int16 *)(v138 + 242);
  if (*(_WORD *)(v138 + 242))
  {
    uint64_t v142 = 0;
    unsigned int v143 = 0;
    unsigned int v144 = *(unsigned __int16 *)(v138 + 242);
    do
    {
      if (v143 < v144)
      {
        uint64_t v145 = *(void *)(v138 + 232);
        uint64_t v142 = (_DWORD *)(v145 + 4 * v143);
        uint64_t v128 = v145 + *(unsigned __int16 *)(v138 + 240) + 2 * v143;
      }
      LODWORD(buf) = *v142;
      WORD2(buf) = *(_WORD *)v128;
      unint64_t v127 = std::vector<std::pair<gss::StyleAttribute,unsigned short>>::insert(v126, (uint64_t)v127, (uint64_t)&buf) + 8;
      unsigned int v144 = *(unsigned __int16 *)(v138 + 242);
      if (v143 + 1 < v144) {
        ++v143;
      }
      else {
        unsigned int v143 = *(unsigned __int16 *)(v138 + 242);
      }
    }
    while (v143 != v141);
  }
  BOOL v146 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v138 + 16));
  if (v146) {
    geo::read_write_lock::logFailure(v146, (uint64_t)"unlock", v147);
  }
  uint64_t v148 = *(unsigned int **)(v178 + 144);
  unint64_t v149 = *(unsigned int **)(v178 + 152);
  unint64_t v150 = 126 - 2 * __clz(((char *)v149 - (char *)v148) >> 3);
  if (v149 == v148) {
    uint64_t v151 = 0;
  }
  else {
    uint64_t v151 = v150;
  }
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(v148, v149, v151, 1);
  uint64_t v152 = *(unsigned int **)(v178 + 120);
  v153 = *(unsigned int **)(v178 + 128);
  unint64_t v154 = 126 - 2 * __clz(((char *)v153 - (char *)v152) >> 3);
  if (v153 == v152) {
    uint64_t v155 = 0;
  }
  else {
    uint64_t v155 = v154;
  }
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(v152, v153, v155, 1);
  unsigned int v156 = gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(*(void *)(a1 + 208), 0x10036u);
  if (v156 >= 0x10000) {
    *(unsigned char *)(v178 + 96) = v156;
  }
  *(unsigned char *)(v178 + 82) = 1;
  *(_DWORD *)(v178 + 108) = *(_DWORD *)(a1 + 120);
  uint64_t v157 = *(void *)(v178 + 48);
  *(void *)(v178 + 48) = *(void *)(a1 + 1128);
  *(void *)(a1 + 1128) = v157;
  uint64_t v158 = *(void *)(v178 + 56);
  *(void *)(v178 + 56) = *(void *)(a1 + 1136);
  *(void *)(a1 + 1136) = v158;
  uint64_t v159 = *(void *)(v178 + 64);
  *(void *)(v178 + 64) = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = v159;
  *(void *)(a1 + 1136) = *(void *)(a1 + 1128);
  if (GEOGetVectorKitStyleLogicLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitStyleLogicLog(void)::onceToken, &__block_literal_global_26104);
  }
  BOOL v160 = os_log_type_enabled((os_log_t)GEOGetVectorKitStyleLogicLog(void)::log, OS_LOG_TYPE_DEBUG);
  if (v160)
  {
    int v161 = *(_DWORD *)(*(void *)(a1 + 208) + 248);
    if (v161 != *(_DWORD *)(a1 + 1352))
    {
      *(_DWORD *)(a1 + 1352) = v161;
      unint64_t v162 = (id)GEOGetVectorKitStyleLogicLog(void)::log;
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v163 = *(void *)(a1 + 208);
        uint64_t v193 = v163 + 16;
        uint64_t v164 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v163 + 16));
        if (v164) {
          geo::read_write_lock::logFailure(v164, (uint64_t)"read lock", v165);
        }
        gss::attributesToString((unsigned __int16 *)(v163 + 216), 1, 0, 0, &__dst);
        int v166 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v163 + 16));
        if (v166) {
          geo::read_write_lock::logFailure(v166, (uint64_t)"unlock", v167);
        }
        unint64_t v168 = (void **)&__dst;
        if (v189 < 0) {
          unint64_t v168 = __dst;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v168;
        _os_log_impl(&dword_1A1780000, v162, OS_LOG_TYPE_DEBUG, "ClientStateDidChange:\n%s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v189) < 0) {
          operator delete(__dst);
        }
      }
    }
    int v169 = *(_DWORD *)(*(void *)(a1 + 224) + 248);
    if (v169 != *(_DWORD *)(a1 + 1356))
    {
      *(_DWORD *)(a1 + 1356) = v169;
      if (GEOGetVectorKitStyleLogicLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitStyleLogicLog(void)::onceToken, &__block_literal_global_26104);
      }
      uint64_t v170 = (id)GEOGetVectorKitStyleLogicLog(void)::log;
      if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v171 = *(void *)(a1 + 224);
        uint64_t v193 = v171 + 16;
        uint64_t v172 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v171 + 16));
        if (v172) {
          geo::read_write_lock::logFailure(v172, (uint64_t)"read lock", v173);
        }
        gss::attributesToString((unsigned __int16 *)(v171 + 216), 1, 0, 0, &__dst);
        uint64_t v174 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v171 + 16));
        if (v174) {
          geo::read_write_lock::logFailure(v174, (uint64_t)"unlock", v175);
        }
        uint64_t v176 = (void **)&__dst;
        if (v189 < 0) {
          uint64_t v176 = __dst;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v176;
        _os_log_impl(&dword_1A1780000, v170, OS_LOG_TYPE_DEBUG, "SceneClientStateDidChange:\n%s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v189) < 0) {
          operator delete(__dst);
        }
      }
    }
  }
  if (!v184 && v180)
  {
    uint64_t v177 = gss::Allocator::instance((gss::Allocator *)v160);
    (*(void (**)(uint64_t, char *, void))(*(void *)v177 + 40))(v177, v180, v183);
  }

  if (v199)
  {
    (*(void (**)(void *))(*v199 + 48))(v199);
    if (v199 == v198)
    {
      (*(void (**)(void *))(v198[0] + 32))(v198);
    }
    else if (v199)
    {
      (*(void (**)(void))(*v199 + 40))();
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_273:
    __break(1u);
  }
}

void sub_1A19954F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,pthread_rwlock_t *a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  geo::write_lock_guard::~write_lock_guard(&a25);

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a12);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a36);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<gss::StyleAttribute,unsigned short>>::insert(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *(void *)a3;
      a1[1] = (unint64_t)(v9 + 8);
    }
    else
    {
      uint64_t v11 = v5 - (void)(v9 + 8);
      uint64_t v12 = v11 >> 3;
      uint64_t v13 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        double v20 = (void *)a1[1];
      }
      else
      {
        unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
        uint64_t v15 = (char *)(v14 + v6);
        unint64_t v16 = v14 + v6 + 8;
        if (v5 > v16) {
          unint64_t v16 = a1[1];
        }
        unint64_t v17 = v16 + ~v6 - v14;
        unint64_t v18 = v5 - (void)v15;
        BOOL v19 = v17 >= 0x58 && v18 > 0x1F;
        double v20 = (void *)a1[1];
        if (!v19) {
          goto LABEL_66;
        }
        uint64_t v21 = (v17 >> 3) + 1;
        uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v13 = (uint64_t *)((char *)v13 + v22);
        float v23 = (_OWORD *)(v5 + 16);
        uint64_t v24 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
        uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *float v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        double v20 = (void *)(v5 + v22);
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_66:
          do
          {
            uint64_t v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = (unint64_t)v20;
      if ((char *)v5 != v9 + 8)
      {
        unint64_t v58 = (_WORD *)(v5 - 4);
        uint64_t v59 = 8 * v12;
        do
        {
          *((_DWORD *)v58 - 1) = *(_DWORD *)&v9[v59 - 8];
          _WORD *v58 = *(_WORD *)&v9[v59 - 4];
          v58 -= 4;
          v59 -= 8;
        }
        while (v59);
      }
      *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
      *(_WORD *)(v6 + 8 * v8 + 4) = *(_WORD *)(a3 + 4);
    }
    return v9;
  }
  unint64_t v28 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v28 >> 61) {
    abort();
  }
  uint64_t v29 = v10 - v6;
  if (v29 >> 2 > v28) {
    unint64_t v28 = v29 >> 2;
  }
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v30 = v28;
  }
  if (v30)
  {
    if (v30 >> 61) {
      goto LABEL_63;
    }
    uint64_t v31 = (char *)operator new(8 * v30);
  }
  else
  {
    uint64_t v31 = 0;
  }
  uint64_t v32 = &v31[8 * v8];
  uint64_t v33 = &v31[8 * v30];
  if (v8 != v30)
  {
LABEL_32:
    unint64_t v35 = (char *)v6;
    goto LABEL_33;
  }
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF8) >= 1)
  {
    unint64_t v34 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v34 = v8 + 1;
    }
    v32 -= 8 * (v34 >> 1);
    goto LABEL_32;
  }
  if ((unint64_t)v7 < 8) {
    unint64_t v61 = 1;
  }
  else {
    unint64_t v61 = (v7 >> 2) & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v61 >> 61) {
LABEL_63:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unsigned int v62 = (char *)operator new(8 * v61);
  uint64_t v32 = &v62[8 * (v61 >> 2)];
  uint64_t v33 = &v62[8 * v61];
  if (!v31) {
    goto LABEL_32;
  }
  operator delete(v31);
  unint64_t v35 = (char *)*a1;
LABEL_33:
  *(void *)uint64_t v32 = *(void *)a3;
  uint64_t v36 = v32 + 8;
  uint64_t v37 = v32;
  if (v35 != v9)
  {
    size_t v38 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v39 = v38 - v35 - 8;
    char v40 = v9;
    uint64_t v37 = v32;
    if (v39 < 0x58) {
      goto LABEL_67;
    }
    char v40 = v9;
    uint64_t v37 = v32;
    if ((unint64_t)(v38 - v32) < 0x20) {
      goto LABEL_67;
    }
    uint64_t v41 = (v39 >> 3) + 1;
    char v40 = &v9[-8 * (v41 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v42 = v32 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    uint64_t v37 = &v32[-8 * (v41 & 0x3FFFFFFFFFFFFFFCLL)];
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_67:
      do
      {
        uint64_t v46 = *((void *)v40 - 1);
        v40 -= 8;
        *((void *)v37 - 1) = v46;
        v37 -= 8;
      }
      while (v40 != v35);
    }
  }
  uint64_t v47 = (char *)a1[1];
  if (v47 != v9)
  {
    int v48 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v49 = v47 - v48 - 8;
    if (v49 < 0x38) {
      goto LABEL_68;
    }
    if ((unint64_t)(v36 - v48) < 0x20) {
      goto LABEL_68;
    }
    uint64_t v50 = (v49 >> 3) + 1;
    uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
    v9 += v51;
    int v52 = v32 + 24;
    uint64_t v53 = (long long *)(v6 + 8 * v8 + 16);
    uint64_t v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v55 = *v53;
      *(v52 - 1) = *(v53 - 1);
      *int v52 = v55;
      v52 += 2;
      v53 += 2;
      v54 -= 4;
    }
    while (v54);
    v36 += v51;
    if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_68:
      do
      {
        uint64_t v56 = *(void *)v9;
        v9 += 8;
        *(void *)uint64_t v36 = v56;
        v36 += 8;
      }
      while (v9 != v47);
    }
  }
  unsigned int v57 = (void *)*a1;
  *a1 = (unint64_t)v37;
  a1[1] = (unint64_t)v36;
  a1[2] = (unint64_t)v33;
  if (v57) {
    operator delete(v57);
  }
  return v32;
}

void sub_1A1995AEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = (pthread_rwlock_t *)(a1 + 16);
  unint64_t v49 = (pthread_rwlock_t *)(a1 + 16);
  uint64_t v8 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v8) {
    geo::read_write_lock::logFailure(v8, (uint64_t)"write lock", v9);
  }
  uint64_t v10 = *(unsigned __int16 *)(a1 + 226);
  if (!*(_WORD *)(a1 + 226)) {
    goto LABEL_24;
  }
  uint64_t v11 = *(void *)(a1 + 216);
  if (*(unsigned char *)(a1 + 231))
  {
    if (v10 >= 0x1E)
    {
      unint64_t v16 = *(_DWORD **)(a1 + 216);
      unint64_t v17 = *(unsigned __int16 *)(a1 + 226);
      do
      {
        unint64_t v18 = v17 >> 1;
        BOOL v19 = &v16[v17 >> 1];
        unsigned int v21 = *v19;
        double v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2) {
          unint64_t v16 = v20;
        }
        else {
          unint64_t v17 = v18;
        }
      }
      while (v17);
      if (v16 == (_DWORD *)(v11 + 4 * v10)) {
        goto LABEL_24;
      }
      if (*v16 != a2) {
        goto LABEL_24;
      }
      unint64_t v12 = ((unint64_t)v16 - v11) >> 2;
      if (v10 == (unsigned __int16)v12) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v12 = 0;
      while (1)
      {
        unsigned int v13 = *(_DWORD *)(v11 + 4 * v12);
        if (v13 >= a2) {
          break;
        }
        if (v10 == ++v12) {
          goto LABEL_24;
        }
      }
      if (v13 != a2) {
        LOWORD(v12) = *(_WORD *)(a1 + 226);
      }
      if (v10 == (unsigned __int16)v12) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t v14 = 4 * v10;
    uint64_t v15 = *(_DWORD **)(a1 + 216);
    while (*v15 != a2)
    {
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        uint64_t v15 = (_DWORD *)(v11 + 4 * v10);
        break;
      }
    }
    unint64_t v12 = ((unint64_t)v15 - v11) >> 2;
    if (v10 == (unsigned __int16)v12) {
      goto LABEL_24;
    }
  }
  if (v10 > (unsigned __int16)v12) {
    uint8x8_t v3 = (unsigned __int16 *)(v11 + *(unsigned __int16 *)(a1 + 224) + 2 * (unsigned __int16)v12);
  }
  if (*v3 == a3)
  {
    int v22 = 0;
    unint64_t v23 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242)) {
      goto LABEL_62;
    }
    goto LABEL_25;
  }
LABEL_24:
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 216), a2) = a3;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 216);
  int v22 = 1;
  unint64_t v23 = *(unsigned __int16 *)(a1 + 242);
  if (!*(_WORD *)(a1 + 242))
  {
LABEL_62:
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 232), a2) = a3;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 232);
    goto LABEL_63;
  }
LABEL_25:
  uint64_t v24 = *(void *)(a1 + 232);
  if (*(unsigned char *)(a1 + 247))
  {
    if (v23 >= 0x1E)
    {
      uint64_t v29 = *(_DWORD **)(a1 + 232);
      unint64_t v30 = v23;
      do
      {
        unint64_t v31 = v30 >> 1;
        uint64_t v32 = &v29[v30 >> 1];
        unsigned int v34 = *v32;
        uint64_t v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < a2) {
          uint64_t v29 = v33;
        }
        else {
          unint64_t v30 = v31;
        }
      }
      while (v30);
      if (v29 == (_DWORD *)(v24 + 4 * v23)) {
        goto LABEL_62;
      }
      if (*v29 != a2) {
        goto LABEL_62;
      }
      unint64_t v25 = ((unint64_t)v29 - v24) >> 2;
      if (v23 == (unsigned __int16)v25) {
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v25 = 0;
      while (1)
      {
        unsigned int v26 = *(_DWORD *)(v24 + 4 * v25);
        if (v26 >= a2) {
          break;
        }
        if (v23 == ++v25) {
          goto LABEL_62;
        }
      }
      if (v26 != a2) {
        LOWORD(v25) = v23;
      }
      if (v23 == (unsigned __int16)v25) {
        goto LABEL_62;
      }
    }
  }
  else
  {
    uint64_t v27 = 4 * v23;
    unint64_t v28 = *(_DWORD **)(a1 + 232);
    while (*v28 != a2)
    {
      ++v28;
      v27 -= 4;
      if (!v27)
      {
        unint64_t v28 = (_DWORD *)(v24 + 4 * v23);
        break;
      }
    }
    unint64_t v25 = ((unint64_t)v28 - v24) >> 2;
    if (v23 == (unsigned __int16)v25) {
      goto LABEL_62;
    }
  }
  if (v23 > (unsigned __int16)v25) {
    uint8x8_t v3 = (unsigned __int16 *)(v24 + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v25);
  }
  if (*v3 != a3) {
    goto LABEL_62;
  }
  if (!v22) {
    goto LABEL_75;
  }
LABEL_63:
  float v35 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  LOBYTE(v36) = 1;
  if (v35 <= 0.0)
  {
    unint64_t v36 = *(unsigned __int16 *)(a1 + 242);
    if (v36 != *(unsigned __int16 *)(a1 + 226))
    {
LABEL_73:
      LOBYTE(v36) = 1;
      goto LABEL_74;
    }
    if (*(_WORD *)(a1 + 242))
    {
      uint64_t v37 = *(_DWORD **)(a1 + 232);
      size_t v38 = *(_DWORD **)(a1 + 216);
      if (*v37 == *v38)
      {
        uint64_t v39 = *(unsigned __int16 *)(a1 + 224);
        uint64_t v40 = *(unsigned __int16 *)(a1 + 240);
        if (*(unsigned __int16 *)((char *)v37 + v40) == *(unsigned __int16 *)((char *)v38 + v39))
        {
          unint64_t v41 = 0;
          uint64_t v42 = v37 + 1;
          uint64_t v43 = v38 + 1;
          uint64_t v44 = (uint64_t)v37 + v40 + 2;
          uint64_t v45 = (uint64_t)v38 + v39 + 2;
          while (v36 - 1 != v41)
          {
            uint64_t v46 = v41++;
            if (v42[v46] != v43[v46]) {
              goto LABEL_81;
            }
            if (*(unsigned __int16 *)(v44 + 2 * v46) != *(unsigned __int16 *)(v45 + 2 * v46))
            {
              unint64_t v41 = v46 + 1;
              goto LABEL_81;
            }
          }
          unint64_t v41 = *(unsigned __int16 *)(a1 + 242);
LABEL_81:
          LOBYTE(v36) = v41 < v36;
          goto LABEL_74;
        }
      }
      goto LABEL_73;
    }
  }
LABEL_74:
  atomic_store(v36, (unsigned __int8 *)(a1 + 254));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  uint64_t v7 = v49;
LABEL_75:
  uint64_t v47 = (geo::read_write_lock *)pthread_rwlock_unlock(v7);
  if (v47)
  {
    geo::read_write_lock::logFailure(v47, (uint64_t)"unlock", v48);
  }
}

void sub_1A1995ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = (pthread_rwlock_t *)(a1 + 16);
  unint64_t v5 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"write lock", v6);
  }
  uint64_t v7 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(a1 + 216, a2);
  if (geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(a1 + 232, a2) | v7)
  {
    float v8 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    LOBYTE(v9) = 1;
    if (v8 <= 0.0)
    {
      unint64_t v9 = *(unsigned __int16 *)(a1 + 242);
      if (v9 != *(unsigned __int16 *)(a1 + 226))
      {
LABEL_14:
        LOBYTE(v9) = 1;
        goto LABEL_15;
      }
      if (*(_WORD *)(a1 + 242))
      {
        uint64_t v10 = *(_DWORD **)(a1 + 232);
        uint64_t v11 = *(_DWORD **)(a1 + 216);
        if (*v10 == *v11)
        {
          uint64_t v12 = *(unsigned __int16 *)(a1 + 224);
          uint64_t v13 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v10 + v13) == *(unsigned __int16 *)((char *)v11 + v12))
          {
            unint64_t v14 = 0;
            uint64_t v15 = v10 + 1;
            unint64_t v16 = v11 + 1;
            uint64_t v17 = (uint64_t)v10 + v13 + 2;
            uint64_t v18 = (uint64_t)v11 + v12 + 2;
            while (v9 - 1 != v14)
            {
              uint64_t v19 = v14++;
              if (v15[v19] != v16[v19]) {
                goto LABEL_22;
              }
              if (*(unsigned __int16 *)(v17 + 2 * v19) != *(unsigned __int16 *)(v18 + 2 * v19))
              {
                unint64_t v14 = v19 + 1;
                goto LABEL_22;
              }
            }
            unint64_t v14 = *(unsigned __int16 *)(a1 + 242);
LABEL_22:
            LOBYTE(v9) = v14 < v9;
            goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
    }
LABEL_15:
    atomic_store(v9, (unsigned __int8 *)(a1 + 254));
    atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  }
  double v20 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if (v20)
  {
    geo::read_write_lock::logFailure(v20, (uint64_t)"unlock", v21);
  }
}

uint64_t geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 14)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
  {
    uint64_t v8 = 0;
    LOWORD(v6) = 0;
    goto LABEL_27;
  }
  unint64_t v5 = *(char **)a1;
  if (!*(unsigned char *)(a1 + 15))
  {
    uint64_t v9 = 4 * v4;
    uint64_t v10 = *(char **)a1;
    while (*(_DWORD *)v10 != a2)
    {
      v10 += 4;
      v9 -= 4;
      if (!v9)
      {
        uint64_t v10 = &v5[4 * v4];
        break;
      }
    }
    unint64_t v6 = (unint64_t)(v10 - v5) >> 2;
    goto LABEL_26;
  }
  if (v4 < 0x1E)
  {
    unint64_t v6 = 0;
    while (1)
    {
      unsigned int v7 = *(_DWORD *)&v5[4 * v6];
      if (v7 >= a2) {
        break;
      }
      if (v4 == ++v6) {
        return 0;
      }
    }
    if (v7 != a2) {
      LOWORD(v6) = *(_WORD *)(a1 + 10);
    }
LABEL_26:
    uint64_t v8 = *(unsigned __int16 *)(a1 + 10);
    goto LABEL_27;
  }
  uint64_t v11 = *(char **)a1;
  unint64_t v12 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = &v11[4 * (v12 >> 1)];
    unsigned int v16 = *(_DWORD *)v14;
    uint64_t v15 = v14 + 4;
    v12 += ~(v12 >> 1);
    if (v16 < a2) {
      uint64_t v11 = v15;
    }
    else {
      unint64_t v12 = v13;
    }
  }
  while (v12);
  if (v11 == &v5[4 * v4] || *(_DWORD *)v11 != a2) {
    return 0;
  }
  unint64_t v6 = (unint64_t)(v11 - v5) >> 2;
  uint64_t v8 = *(unsigned __int16 *)(a1 + 10);
LABEL_27:
  unsigned int v17 = (unsigned __int16)v6;
  if ((unsigned __int16)v6 == v4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 15))
  {
    unsigned __int16 v18 = v4 - 1;
    *(_WORD *)(a1 + 10) = v18;
    int v19 = v18 - (unsigned __int16)v6;
    memmove((void *)(*(void *)a1 + 4 * (unsigned __int16)v6), (const void *)(*(void *)a1 + 4 * ((unsigned __int16)v6 + 1)), 4 * v19);
    uint64_t v20 = *(void *)a1 + *(unsigned __int16 *)(a1 + 8);
    memmove((void *)(v20 + 2 * v17), (const void *)(v20 + 2 * (v17 + 1)), 2 * v19);
  }
  else
  {
    uint64_t v21 = v8 - 1;
    int v22 = *(char **)a1;
    *(_DWORD *)(*(void *)a1 + 4 * (unsigned __int16)v6) = *(_DWORD *)(*(void *)a1 + 4 * v21);
    *(_WORD *)&v22[2 * (unsigned __int16)v6 + *(unsigned __int16 *)(a1 + 8)] = *(_WORD *)&v22[2 * v21
                                                                                            + *(unsigned __int16 *)(a1 + 8)];
    --*(_WORD *)(a1 + 10);
  }
  return 1;
}

unsigned int *_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(unsigned int *result, unsigned int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          uint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 3;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unsigned int v112 = *(_DWORD *)v11;
                if (*v10 >= *(_DWORD *)v11) {
                  return result;
                }
                *(_DWORD *)unint64_t v11 = *v10;
                *(a2 - 2) = v112;
                goto LABEL_103;
              case 3:
                unsigned int v113 = *(_DWORD *)(v11 + 8);
                unsigned int v114 = *(_DWORD *)v11;
                unsigned int v115 = *v10;
                if (v113 >= *(_DWORD *)v11)
                {
                  if (v115 < v113)
                  {
                    *(_DWORD *)(v11 + 8) = v115;
                    *(a2 - 2) = v113;
                    __int16 v164 = *(_WORD *)(v11 + 12);
                    *(_WORD *)(v11 + 12) = *((_WORD *)a2 - 2);
                    *((_WORD *)a2 - 2) = v164;
                    unsigned int v165 = *(_DWORD *)(v11 + 8);
                    unsigned int v166 = *(_DWORD *)v11;
                    if (v165 < *(_DWORD *)v11)
                    {
                      *(_DWORD *)unint64_t v11 = v165;
                      *(_DWORD *)(v11 + 8) = v166;
                      __int16 v126 = *(_WORD *)(v11 + 4);
                      __int16 v122 = *(_WORD *)(v11 + 12);
LABEL_174:
                      *(_WORD *)(v11 + 4) = v122;
                      *(_WORD *)(v11 + 12) = v126;
                    }
                  }
                }
                else if (v115 >= v113)
                {
                  *(_DWORD *)unint64_t v11 = v113;
                  *(_DWORD *)(v11 + 8) = v114;
                  __int16 v174 = *(_WORD *)(v11 + 4);
                  *(_WORD *)(v11 + 4) = *(_WORD *)(v11 + 12);
                  *(_WORD *)(v11 + 12) = v174;
                  if (*v10 < v114)
                  {
                    *(_DWORD *)(v11 + 8) = *v10;
                    *(a2 - 2) = v114;
                    *(_WORD *)(v11 + 12) = *((_WORD *)a2 - 2);
                    *((_WORD *)a2 - 2) = v174;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v11 = v115;
                  *(a2 - 2) = v114;
LABEL_103:
                  __int16 v116 = *(_WORD *)(v11 + 4);
                  *(_WORD *)(v11 + 4) = *((_WORD *)a2 - 2);
                  *((_WORD *)a2 - 2) = v116;
                }
                break;
              case 4:
                return _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)v11, (unsigned int *)(v11 + 8), (unsigned int *)(v11 + 16), a2 - 2);
              case 5:
                float64x2_t result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)v11, (unsigned int *)(v11 + 8), (unsigned int *)(v11 + 16), (unsigned int *)(v11 + 24));
                unsigned int v117 = *(_DWORD *)(v11 + 24);
                if (*v10 >= v117) {
                  return result;
                }
                *(_DWORD *)(v11 + 24) = *v10;
                *(a2 - 2) = v117;
                __int16 v118 = *(_WORD *)(v11 + 28);
                *(_WORD *)(v11 + 28) = *((_WORD *)a2 - 2);
                *((_WORD *)a2 - 2) = v118;
                unsigned int v119 = *(_DWORD *)(v11 + 24);
                unsigned int v120 = *(_DWORD *)(v11 + 16);
                if (v119 >= v120) {
                  return result;
                }
                *(_DWORD *)(v11 + 16) = v119;
                *(_DWORD *)(v11 + 24) = v120;
                __int16 v121 = *(_WORD *)(v11 + 20);
                __int16 v122 = *(_WORD *)(v11 + 28);
                *(_WORD *)(v11 + 20) = v122;
                *(_WORD *)(v11 + 28) = v121;
                unsigned int v123 = *(_DWORD *)(v11 + 8);
                if (v119 >= v123) {
                  return result;
                }
                *(_DWORD *)(v11 + 8) = v119;
                *(_DWORD *)(v11 + 16) = v123;
                __int16 v124 = *(_WORD *)(v11 + 12);
                *(_WORD *)(v11 + 12) = v122;
                *(_WORD *)(v11 + 20) = v124;
                unsigned int v125 = *(_DWORD *)v11;
                if (v119 >= *(_DWORD *)v11) {
                  return result;
                }
                *(_DWORD *)unint64_t v11 = v119;
                *(_DWORD *)(v11 + 8) = v125;
                __int16 v126 = *(_WORD *)(v11 + 4);
                goto LABEL_174;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            unint64_t v127 = (unsigned int *)(v11 + 8);
            BOOL v129 = (unsigned int *)v11 == a2 || v127 == a2;
            if (a4)
            {
              if (!v129)
              {
                uint64_t v130 = 0;
                int v131 = (unsigned int *)v11;
                do
                {
                  unsigned int v133 = v131[2];
                  unsigned int v134 = *v131;
                  int v131 = v127;
                  if (v133 < v134)
                  {
                    uint64_t v135 = *(void *)v127;
                    uint64_t v136 = v130;
                    do
                    {
                      uint64_t v137 = v11 + v136;
                      *(_DWORD *)(v137 + 8) = v134;
                      *(_WORD *)(v137 + 12) = *(_WORD *)(v11 + v136 + 4);
                      if (!v136)
                      {
                        uint64_t v132 = v11;
                        goto LABEL_122;
                      }
                      unsigned int v134 = *(_DWORD *)(v137 - 8);
                      v136 -= 8;
                    }
                    while (v134 > v135);
                    uint64_t v132 = v11 + v136 + 8;
LABEL_122:
                    *(_DWORD *)uint64_t v132 = v135;
                    *(_WORD *)(v132 + 4) = WORD2(v135);
                  }
                  unint64_t v127 = v131 + 2;
                  v130 += 8;
                }
                while (v131 + 2 != a2);
              }
            }
            else if (!v129)
            {
              v167 = (_WORD *)(v11 + 12);
              do
              {
                unsigned int v168 = *(_DWORD *)(v9 + 8);
                unsigned int v169 = *(_DWORD *)v9;
                unint64_t v9 = (unint64_t)v127;
                if (v168 < v169)
                {
                  uint64_t v170 = *(void *)v127;
                  uint64_t v171 = v167;
                  do
                  {
                    uint64_t v172 = v171;
                    *((_DWORD *)v171 - 1) = v169;
                    __int16 v173 = *(v171 - 4);
                    v171 -= 4;
                    *uint64_t v172 = v173;
                    unsigned int v169 = *((_DWORD *)v172 - 5);
                  }
                  while (v169 > v170);
                  *((_DWORD *)v171 - 1) = v170;
                  *uint64_t v171 = WORD2(v170);
                }
                unint64_t v127 = (unsigned int *)(v9 + 8);
                v167 += 4;
              }
              while ((unsigned int *)(v9 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((unsigned int *)v11 != a2)
            {
              int64_t v138 = (unint64_t)(v13 - 2) >> 1;
              int64_t v139 = v138;
              do
              {
                if (v138 >= v139)
                {
                  uint64_t v141 = (2 * v139) | 1;
                  unint64_t v142 = v11 + 8 * v141;
                  if (2 * v139 + 2 < v13)
                  {
                    unsigned int v144 = *(_DWORD *)(v142 + 8);
                    BOOL v143 = *(_DWORD *)v142 >= v144;
                    if (*(_DWORD *)v142 > v144) {
                      unsigned int v144 = *(_DWORD *)v142;
                    }
                    if (!v143)
                    {
                      v142 += 8;
                      uint64_t v141 = 2 * v139 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v144 = *(_DWORD *)v142;
                  }
                  unint64_t v145 = v11 + 8 * v139;
                  if (v144 >= *(_DWORD *)v145)
                  {
                    uint64_t v146 = *(void *)v145;
                    while (1)
                    {
                      unint64_t v148 = v145;
                      unint64_t v145 = v142;
                      *(_DWORD *)unint64_t v148 = v144;
                      *(_WORD *)(v148 + 4) = *(_WORD *)(v142 + 4);
                      if (v138 < v141) {
                        break;
                      }
                      uint64_t v149 = (2 * v141) | 1;
                      unint64_t v142 = v11 + 8 * v149;
                      uint64_t v141 = 2 * v141 + 2;
                      if (v141 < v13)
                      {
                        unsigned int v144 = *(_DWORD *)v142;
                        float64x2_t result = (unsigned int *)(v142 + 8);
                        unsigned int v147 = *(_DWORD *)(v142 + 8);
                        if (*(_DWORD *)v142 <= v147) {
                          unsigned int v144 = *(_DWORD *)(v142 + 8);
                        }
                        if (*(_DWORD *)v142 >= v147) {
                          uint64_t v141 = v149;
                        }
                        else {
                          v142 += 8;
                        }
                        if (v144 < v146) {
                          break;
                        }
                      }
                      else
                      {
                        unsigned int v144 = *(_DWORD *)v142;
                        uint64_t v141 = v149;
                        if (*(_DWORD *)v142 < v146) {
                          break;
                        }
                      }
                    }
                    *(_DWORD *)unint64_t v145 = v146;
                    *(_WORD *)(v145 + 4) = WORD2(v146);
                  }
                }
                BOOL v140 = v139-- <= 0;
              }
              while (!v140);
              uint64_t v150 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v151 = 0;
                uint64_t v152 = *(void *)v11;
                unint64_t v153 = v11;
                do
                {
                  uint64_t v156 = v153 + 8 * v151 + 8;
                  uint64_t v157 = (2 * v151) | 1;
                  uint64_t v151 = 2 * v151 + 2;
                  if (v151 < v150)
                  {
                    int v154 = *(_DWORD *)v156;
                    unsigned int v155 = *(_DWORD *)(v156 + 8);
                    if (*(_DWORD *)v156 <= v155) {
                      int v154 = *(_DWORD *)(v156 + 8);
                    }
                    if (*(_DWORD *)v156 >= v155) {
                      uint64_t v151 = v157;
                    }
                    else {
                      v156 += 8;
                    }
                  }
                  else
                  {
                    int v154 = *(_DWORD *)v156;
                    uint64_t v151 = v157;
                  }
                  *(_DWORD *)unint64_t v153 = v154;
                  *(_WORD *)(v153 + 4) = *(_WORD *)(v156 + 4);
                  unint64_t v153 = v156;
                }
                while (v151 <= (uint64_t)((unint64_t)(v150 - 2) >> 1));
                if ((unsigned int *)v156 == a2 - 2)
                {
                  *(_DWORD *)uint64_t v156 = v152;
                  *(_WORD *)(v156 + 4) = WORD2(v152);
                }
                else
                {
                  *(_DWORD *)uint64_t v156 = *(a2 - 2);
                  *(_WORD *)(v156 + 4) = *((_WORD *)a2 - 2);
                  *(a2 - 2) = v152;
                  *((_WORD *)a2 - 2) = WORD2(v152);
                  uint64_t v158 = v156 - v11 + 8;
                  if (v158 >= 9)
                  {
                    unint64_t v159 = (((unint64_t)v158 >> 3) - 2) >> 1;
                    uint64_t v160 = v11 + 8 * v159;
                    int v161 = *(_DWORD *)v160;
                    if (*(_DWORD *)v160 < *(_DWORD *)v156)
                    {
                      uint64_t v162 = *(void *)v156;
                      do
                      {
                        uint64_t v163 = v156;
                        uint64_t v156 = v160;
                        *(_DWORD *)uint64_t v163 = v161;
                        *(_WORD *)(v163 + 4) = *(_WORD *)(v160 + 4);
                        if (!v159) {
                          break;
                        }
                        unint64_t v159 = (v159 - 1) >> 1;
                        uint64_t v160 = v11 + 8 * v159;
                        int v161 = *(_DWORD *)v160;
                      }
                      while (*(_DWORD *)v160 < v162);
                      *(_DWORD *)uint64_t v156 = v162;
                      *(_WORD *)(v156 + 4) = WORD2(v162);
                    }
                  }
                }
                a2 -= 2;
                BOOL v140 = v150-- <= 2;
              }
              while (!v140);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = (unsigned int *)(v11 + 8 * ((unint64_t)v13 >> 1));
          unsigned int v16 = *v10;
          if ((unint64_t)v12 >= 0x401) {
            break;
          }
          unsigned int v20 = *(_DWORD *)v11;
          unsigned int v21 = *v15;
          if (*(_DWORD *)v11 < *v15)
          {
            int v22 = (__int16 *)(v11 + 8 * v14 + 4);
            if (v16 >= v20)
            {
              *uint64_t v15 = v20;
              *(_DWORD *)unint64_t v11 = v21;
              __int16 v23 = *v22;
              *int v22 = *(_WORD *)(v11 + 4);
              *(_WORD *)(v11 + 4) = v23;
              if (*v10 >= v21) {
                goto LABEL_32;
              }
              *(_DWORD *)unint64_t v11 = *v10;
              *(a2 - 2) = v21;
              *(_WORD *)(v11 + 4) = *((_WORD *)a2 - 2);
            }
            else
            {
              *uint64_t v15 = v16;
              *(a2 - 2) = v21;
              __int16 v23 = *v22;
              *int v22 = *((_WORD *)a2 - 2);
            }
            *((_WORD *)a2 - 2) = v23;
LABEL_32:
            --a3;
            if (a4) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          if (v16 >= v20) {
            goto LABEL_32;
          }
          *(_DWORD *)unint64_t v11 = v16;
          *(a2 - 2) = v20;
          __int16 v29 = *(_WORD *)(v11 + 4);
          *(_WORD *)(v11 + 4) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v29;
          unsigned int v30 = *v15;
          if (*(_DWORD *)v11 >= *v15) {
            goto LABEL_32;
          }
          *uint64_t v15 = *(_DWORD *)v11;
          *(_DWORD *)unint64_t v11 = v30;
          unint64_t v31 = v11 + 8 * v14;
          __int16 v32 = *(_WORD *)(v31 + 4);
          *(_WORD *)(v31 + 4) = *(_WORD *)(v11 + 4);
          *(_WORD *)(v11 + 4) = v32;
          --a3;
          if (a4) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(_DWORD *)(v11 - 8) < *(_DWORD *)v11) {
            goto LABEL_56;
          }
          uint64_t v102 = *(void *)v11;
          if (*v10 > *(void *)v11)
          {
            do
            {
              unsigned int v103 = *(_DWORD *)(v11 + 8);
              v11 += 8;
            }
            while (v103 <= v102);
          }
          else
          {
            unint64_t v104 = v11 + 8;
            do
            {
              unint64_t v11 = v104;
              if (v104 >= (unint64_t)a2) {
                break;
              }
              v104 += 8;
            }
            while (*(_DWORD *)v11 <= v102);
          }
          float v105 = a2;
          if (v11 < (unint64_t)a2)
          {
            float v105 = a2;
            do
            {
              unsigned int v106 = *(v105 - 2);
              v105 -= 2;
            }
            while (v106 > v102);
          }
          if (v11 < (unint64_t)v105)
          {
            unsigned int v107 = *(_DWORD *)v11;
            unsigned int v108 = *v105;
            do
            {
              *(_DWORD *)unint64_t v11 = v108;
              *float v105 = v107;
              __int16 v109 = *(_WORD *)(v11 + 4);
              *(_WORD *)(v11 + 4) = *((_WORD *)v105 + 2);
              *((_WORD *)v105 + 2) = v109;
              do
              {
                unsigned int v110 = *(_DWORD *)(v11 + 8);
                v11 += 8;
                unsigned int v107 = v110;
              }
              while (v110 <= v102);
              do
              {
                unsigned int v111 = *(v105 - 2);
                v105 -= 2;
                unsigned int v108 = v111;
              }
              while (v111 > v102);
            }
            while (v11 < (unint64_t)v105);
          }
          BOOL v4 = v11 - 8 >= v9;
          BOOL v5 = v11 - 8 == v9;
          if (v11 - 8 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v11 - 8);
            *(_WORD *)(v9 + 4) = *(_WORD *)(v11 - 4);
          }
          a4 = 0;
          *(_DWORD *)(v11 - 8) = v102;
          *(_WORD *)(v11 - 4) = WORD2(v102);
        }
        unsigned int v17 = *v15;
        unsigned int v18 = *(_DWORD *)v11;
        if (*v15 >= *(_DWORD *)v11)
        {
          if (v16 < v17)
          {
            *uint64_t v15 = v16;
            *(a2 - 2) = v17;
            unint64_t v24 = v11 + 8 * v14;
            __int16 v26 = *(_WORD *)(v24 + 4);
            unint64_t v25 = (_WORD *)(v24 + 4);
            *unint64_t v25 = *((_WORD *)a2 - 2);
            *((_WORD *)a2 - 2) = v26;
            unsigned int v27 = *(_DWORD *)v11;
            if (*v15 < *(_DWORD *)v11)
            {
              *(_DWORD *)unint64_t v11 = *v15;
              *uint64_t v15 = v27;
              __int16 v28 = *(_WORD *)(v11 + 4);
              *(_WORD *)(v11 + 4) = *v25;
              *unint64_t v25 = v28;
            }
          }
        }
        else if (v16 >= v17)
        {
          *(_DWORD *)unint64_t v11 = v17;
          *uint64_t v15 = v18;
          __int16 v33 = *(_WORD *)(v11 + 4);
          unsigned int v34 = (_WORD *)(v11 + 4 + 8 * v14);
          *(_WORD *)(v11 + 4) = *v34;
          *unsigned int v34 = v33;
          if (*v10 < v18)
          {
            *uint64_t v15 = *v10;
            *(a2 - 2) = v18;
            *unsigned int v34 = *((_WORD *)a2 - 2);
            *((_WORD *)a2 - 2) = v33;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v11 = v16;
          *(a2 - 2) = v18;
          __int16 v19 = *(_WORD *)(v11 + 4);
          *(_WORD *)(v11 + 4) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v19;
        }
        unint64_t v35 = v14 - 1;
        unint64_t v36 = (unsigned int *)(v11 + 8 * (v14 - 1));
        unsigned int v37 = *v36;
        unsigned int v38 = *(_DWORD *)(v11 + 8);
        unsigned int v39 = *(a2 - 4);
        if (*v36 >= v38)
        {
          if (v39 < v37)
          {
            *unint64_t v36 = v39;
            *(a2 - 4) = v37;
            unint64_t v41 = v11 + 8 * v35;
            __int16 v43 = *(_WORD *)(v41 + 4);
            uint64_t v42 = (_WORD *)(v41 + 4);
            *uint64_t v42 = *((_WORD *)a2 - 6);
            *((_WORD *)a2 - 6) = v43;
            unsigned int v44 = *(_DWORD *)(v11 + 8);
            if (*v36 < v44)
            {
              *(_DWORD *)(v11 + 8) = *v36;
              *unint64_t v36 = v44;
              __int16 v45 = *(_WORD *)(v11 + 12);
              *(_WORD *)(v11 + 12) = *v42;
              *uint64_t v42 = v45;
            }
          }
        }
        else if (v39 >= v37)
        {
          *(_DWORD *)(v11 + 8) = v37;
          unint64_t v46 = v11 + 8 * v35;
          __int16 v48 = *(_WORD *)(v46 + 4);
          uint64_t v47 = (_WORD *)(v46 + 4);
          *unint64_t v36 = v38;
          __int16 v49 = *(_WORD *)(v11 + 12);
          *(_WORD *)(v11 + 12) = v48;
          *uint64_t v47 = v49;
          unsigned int v50 = *(a2 - 4);
          if (v50 < v38)
          {
            *unint64_t v36 = v50;
            *(a2 - 4) = v38;
            *uint64_t v47 = *((_WORD *)a2 - 6);
            *((_WORD *)a2 - 6) = v49;
          }
        }
        else
        {
          *(_DWORD *)(v11 + 8) = v39;
          *(a2 - 4) = v38;
          __int16 v40 = *(_WORD *)(v11 + 12);
          *(_WORD *)(v11 + 12) = *((_WORD *)a2 - 6);
          *((_WORD *)a2 - 6) = v40;
        }
        unint64_t v51 = v14 + 1;
        int v52 = (unsigned int *)(v11 + 8 * (v14 + 1));
        unsigned int v53 = *v52;
        unsigned int v54 = *(_DWORD *)(v11 + 16);
        unsigned int v55 = *(a2 - 6);
        if (*v52 >= v54)
        {
          if (v55 < v53)
          {
            *int v52 = v55;
            *(a2 - 6) = v53;
            unint64_t v57 = v11 + 8 * v51;
            __int16 v59 = *(_WORD *)(v57 + 4);
            unint64_t v58 = (_WORD *)(v57 + 4);
            _WORD *v58 = *((_WORD *)a2 - 10);
            *((_WORD *)a2 - 10) = v59;
            unsigned int v60 = *(_DWORD *)(v11 + 16);
            if (*v52 < v60)
            {
              *(_DWORD *)(v11 + 16) = *v52;
              *int v52 = v60;
              __int16 v61 = *(_WORD *)(v11 + 20);
              *(_WORD *)(v11 + 20) = *v58;
              _WORD *v58 = v61;
            }
          }
        }
        else if (v55 >= v53)
        {
          *(_DWORD *)(v11 + 16) = v53;
          unint64_t v62 = v11 + 8 * v51;
          __int16 v64 = *(_WORD *)(v62 + 4);
          uint64_t v63 = (_WORD *)(v62 + 4);
          *int v52 = v54;
          __int16 v65 = *(_WORD *)(v11 + 20);
          *(_WORD *)(v11 + 20) = v64;
          *uint64_t v63 = v65;
          unsigned int v66 = *(a2 - 6);
          if (v66 < v54)
          {
            *int v52 = v66;
            *(a2 - 6) = v54;
            *uint64_t v63 = *((_WORD *)a2 - 10);
            *((_WORD *)a2 - 10) = v65;
          }
        }
        else
        {
          *(_DWORD *)(v11 + 16) = v55;
          *(a2 - 6) = v54;
          __int16 v56 = *(_WORD *)(v11 + 20);
          *(_WORD *)(v11 + 20) = *((_WORD *)a2 - 10);
          *((_WORD *)a2 - 10) = v56;
        }
        unsigned int v67 = *v15;
        unsigned int v68 = *v36;
        unsigned int v69 = *v52;
        if (*v15 >= *v36)
        {
          if (v69 >= v67) {
            goto LABEL_50;
          }
          *uint64_t v15 = v69;
          unint64_t v73 = v11 + 8 * v14;
          unsigned int v75 = *(unsigned __int16 *)(v73 + 4);
          unint64_t v74 = (_WORD *)(v73 + 4);
          float64x2_t result = (unsigned int *)v75;
          *int v52 = v67;
          unint64_t v76 = v11 + 8 * v51;
          __int16 v77 = *(_WORD *)(v76 + 4);
          _WORD *v74 = v77;
          *(_WORD *)(v76 + 4) = v75;
          if (v69 < v68)
          {
            *unint64_t v36 = v69;
            *uint64_t v15 = v68;
            unint64_t v78 = v11 + 8 * v35;
            __int16 v79 = *(_WORD *)(v78 + 4);
            *(_WORD *)(v78 + 4) = v77;
            _WORD *v74 = v79;
            goto LABEL_54;
          }
          goto LABEL_53;
        }
        float v70 = (__int16 *)(v11 + 8 * v35 + 4);
        if (v69 < v67)
        {
          *unint64_t v36 = v69;
          *int v52 = v68;
          unint64_t v71 = v11 + 8 * v51;
          __int16 v72 = *v70;
          __int16 *v70 = *(_WORD *)(v71 + 4);
          *(_WORD *)(v71 + 4) = v72;
LABEL_50:
          unsigned int v68 = v67;
          goto LABEL_54;
        }
        *unint64_t v36 = v67;
        *uint64_t v15 = v68;
        unint64_t v80 = v11 + 8 * v14;
        __int16 v82 = *(_WORD *)(v80 + 4);
        char v81 = (_WORD *)(v80 + 4);
        __int16 v83 = *v70;
        __int16 *v70 = v82;
        *char v81 = v83;
        if (v69 < v68)
        {
          *uint64_t v15 = v69;
          *int v52 = v68;
          unint64_t v84 = v11 + 8 * v51;
          *char v81 = *(_WORD *)(v84 + 4);
          *(_WORD *)(v84 + 4) = v83;
LABEL_53:
          unsigned int v68 = v69;
        }
LABEL_54:
        unsigned int v85 = *(_DWORD *)v11;
        *(_DWORD *)unint64_t v11 = v68;
        *uint64_t v15 = v85;
        unint64_t v86 = v11 + 8 * v14;
        __int16 v87 = *(_WORD *)(v11 + 4);
        *(_WORD *)(v11 + 4) = *(_WORD *)(v86 + 4);
        *(_WORD *)(v86 + 4) = v87;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_56:
        uint64_t v88 = *(void *)v11;
        unint64_t v89 = v11;
        do
        {
          unint64_t v90 = v89;
          unsigned int v92 = *(_DWORD *)(v89 + 8);
          v89 += 8;
          unsigned int v91 = v92;
        }
        while (v92 < v88);
        uint64_t v93 = a2;
        if (v90 == v11)
        {
          uint64_t v93 = a2;
          do
          {
            if (v89 >= (unint64_t)v93) {
              break;
            }
            unsigned int v95 = *(v93 - 2);
            v93 -= 2;
          }
          while (v95 >= v88);
        }
        else
        {
          do
          {
            unsigned int v94 = *(v93 - 2);
            v93 -= 2;
          }
          while (v94 >= v88);
        }
        if (v89 < (unint64_t)v93)
        {
          unsigned int v96 = *v93;
          unint64_t v11 = v89;
          uint64_t v97 = v93;
          do
          {
            *(_DWORD *)unint64_t v11 = v96;
            *uint64_t v97 = v91;
            __int16 v98 = *(_WORD *)(v11 + 4);
            *(_WORD *)(v11 + 4) = *((_WORD *)v97 + 2);
            *((_WORD *)v97 + 2) = v98;
            do
            {
              unsigned int v99 = *(_DWORD *)(v11 + 8);
              v11 += 8;
              unsigned int v91 = v99;
            }
            while (v99 < v88);
            do
            {
              unsigned int v100 = *(v97 - 2);
              v97 -= 2;
              unsigned int v96 = v100;
            }
            while (v100 >= v88);
          }
          while (v11 < (unint64_t)v97);
        }
        else
        {
          unint64_t v11 = v89;
        }
        if (v11 - 8 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v11 - 8);
          *(_WORD *)(v9 + 4) = *(_WORD *)(v11 - 4);
        }
        *(_DWORD *)(v11 - 8) = v88;
        *(_WORD *)(v11 - 4) = WORD2(v88);
        if (v89 >= (unint64_t)v93) {
          break;
        }
LABEL_76:
        float64x2_t result = (unsigned int *)_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(v9, v11 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v101 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEbT1_SO_T0_(v9, (unsigned int *)(v11 - 8));
      float64x2_t result = (unsigned int *)_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEbT1_SO_T0_(v11, a2);
      if (result) {
        break;
      }
      if (!v101) {
        goto LABEL_76;
      }
    }
    a2 = (unsigned int *)(v11 - 8);
    if (!v101) {
      continue;
    }
    return result;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEbT1_SO_T0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(a2 - 2) = v7;
        goto LABEL_7;
      }
      return result;
    case 3:
      unsigned int v8 = *(_DWORD *)(a1 + 8);
      unsigned int v9 = *(_DWORD *)a1;
      unsigned int v10 = *(a2 - 2);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 8) = v10;
          *(a2 - 2) = v8;
          __int16 v28 = *(_WORD *)(a1 + 12);
          *(_WORD *)(a1 + 12) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v28;
          unsigned int v29 = *(_DWORD *)(a1 + 8);
          unsigned int v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 8) = v30;
            __int16 v31 = *(_WORD *)(a1 + 4);
            *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
            *(_WORD *)(a1 + 12) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 8) = v9;
        __int16 v35 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
        *(_WORD *)(a1 + 12) = v35;
        unsigned int v36 = *(a2 - 2);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 8) = v36;
          *(a2 - 2) = v9;
          *(_WORD *)(a1 + 12) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(a2 - 2) = v9;
LABEL_7:
        __int16 v11 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v11;
      }
      return result;
    case 4:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), a2 - 2);
      return 1;
    case 5:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 24));
      unsigned int v17 = *(a2 - 2);
      unsigned int v18 = *(_DWORD *)(a1 + 24);
      if (v17 < v18)
      {
        *(_DWORD *)(a1 + 24) = v17;
        *(a2 - 2) = v18;
        __int16 v19 = *(_WORD *)(a1 + 28);
        *(_WORD *)(a1 + 28) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v19;
        unsigned int v20 = *(_DWORD *)(a1 + 24);
        unsigned int v21 = *(_DWORD *)(a1 + 16);
        if (v20 < v21)
        {
          *(_DWORD *)(a1 + 16) = v20;
          *(_DWORD *)(a1 + 24) = v21;
          __int16 v22 = *(_WORD *)(a1 + 20);
          __int16 v23 = *(_WORD *)(a1 + 28);
          *(_WORD *)(a1 + 20) = v23;
          *(_WORD *)(a1 + 28) = v22;
          unsigned int v24 = *(_DWORD *)(a1 + 8);
          if (v20 < v24)
          {
            *(_DWORD *)(a1 + 8) = v20;
            *(_DWORD *)(a1 + 16) = v24;
            __int16 v25 = *(_WORD *)(a1 + 12);
            *(_WORD *)(a1 + 12) = v23;
            *(_WORD *)(a1 + 20) = v25;
            unsigned int v26 = *(_DWORD *)a1;
            if (v20 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v20;
              *(_DWORD *)(a1 + 8) = v26;
              __int16 v27 = *(_WORD *)(a1 + 4);
              *(_WORD *)(a1 + 4) = v23;
              *(_WORD *)(a1 + 12) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = (unsigned int *)(a1 + 16);
      unsigned int v13 = *(_DWORD *)(a1 + 16);
      unsigned int v14 = *(_DWORD *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 8) = v13;
          *(_DWORD *)(a1 + 16) = v14;
          __int16 v32 = *(_WORD *)(a1 + 12);
          __int16 v33 = *(_WORD *)(a1 + 20);
          *(_WORD *)(a1 + 12) = v33;
          *(_WORD *)(a1 + 20) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 8) = v15;
            __int16 v34 = *(_WORD *)(a1 + 4);
            *(_WORD *)(a1 + 4) = v33;
            *(_WORD *)(a1 + 12) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 8) = v15;
        __int16 v37 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
        *(_WORD *)(a1 + 12) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 8) = v13;
          *(_DWORD *)(a1 + 16) = v15;
          *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 20);
          *(_WORD *)(a1 + 20) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 16) = v15;
        __int16 v16 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 20);
        *(_WORD *)(a1 + 20) = v16;
      }
      unsigned int v38 = (unsigned int *)(a1 + 24);
      if ((unsigned int *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      break;
  }
  while (1)
  {
    unsigned int v42 = *v12;
    if (*v38 < *v12)
    {
      uint64_t v43 = *(void *)v38;
      uint64_t v44 = v39;
      do
      {
        uint64_t v45 = a1 + v44;
        *(_DWORD *)(v45 + 24) = v42;
        *(_WORD *)(v45 + 28) = *(_WORD *)(a1 + v44 + 20);
        if (v44 == -16)
        {
          uint64_t v41 = a1;
          goto LABEL_30;
        }
        unsigned int v42 = *(_DWORD *)(v45 + 8);
        v44 -= 8;
      }
      while (v42 > v43);
      uint64_t v41 = a1 + v44 + 24;
LABEL_30:
      *(_DWORD *)uint64_t v41 = v43;
      *(_WORD *)(v41 + 4) = WORD2(v43);
      if (++v40 == 8) {
        return v38 + 2 == a2;
      }
    }
    uint64_t v12 = v38;
    v39 += 8;
    v38 += 2;
    if (v38 == a2) {
      return 1;
    }
  }
}

uint64_t md::StyleLogicContext::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((uint64_t *)a1 != a2) {
      goto LABEL_16;
    }
LABEL_32:
    long long v27 = *(_OWORD *)(a2 + 9);
    long long v28 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 97) = *(_OWORD *)((char *)a2 + 97);
    *(_OWORD *)(a1 + 88) = v28;
    *(_OWORD *)(a1 + 72) = v27;
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if ((uint64_t *)a1 == a2) {
    goto LABEL_32;
  }
LABEL_16:
  unint64_t v13 = a2[7] - a2[6];
  unsigned int v14 = *(unsigned char **)(a1 + 48);
  unsigned int v15 = *(unsigned char **)(a1 + 56);
  unint64_t v16 = v15 - v14;
  size_t v17 = v13 - (v15 - v14);
  if (v13 <= v15 - v14)
  {
    if (v13 < v15 - v14) {
      *(void *)(a1 + 56) = &v14[v13];
    }
    goto LABEL_48;
  }
  uint64_t v18 = *(void *)(a1 + 64);
  if (v18 - (uint64_t)v15 < v17)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v19 = v18 - (void)v14;
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= v13) {
      uint64_t v20 = a2[7] - a2[6];
    }
    if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v21 = v20;
    }
    __int16 v22 = (char *)operator new(v21);
    __int16 v23 = &v22[v16];
    unsigned int v24 = &v22[v21];
    __int16 v25 = &v22[v13];
    bzero(&v22[v16], v17);
    if (v15 == v14) {
      goto LABEL_46;
    }
    if (v16 < 8 || (unint64_t)(v14 - v22) < 0x20) {
      goto LABEL_43;
    }
    if (v16 >= 0x20)
    {
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v29 = (long long *)(v15 - 16);
      unsigned int v30 = &v22[v15 - 16 - v14];
      unint64_t v31 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v32 = *v29;
        *((_OWORD *)v30 - 1) = *(v29 - 1);
        *(_OWORD *)unsigned int v30 = v32;
        v30 -= 32;
        v29 -= 2;
        v31 -= 32;
      }
      while (v31);
      if (v16 == v26) {
        goto LABEL_45;
      }
      if ((v16 & 0x18) == 0)
      {
        v23 -= v26;
        v15 -= v26;
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v26 = 0;
    }
    unint64_t v33 = v26 - (v16 & 0xFFFFFFFFFFFFFFF8);
    __int16 v34 = &v15[-v26 - 8];
    int64_t v35 = v34 - v14;
    do
    {
      uint64_t v36 = *(void *)v34;
      v34 -= 8;
      *(void *)&v22[v35] = v36;
      v35 -= 8;
      v33 += 8;
    }
    while (v33);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_45;
    }
    v23 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v15 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_43:
    __int16 v37 = v23 - 1;
    do
    {
      char v38 = *--v15;
      *v37-- = v38;
    }
    while (v15 != v14);
LABEL_45:
    __int16 v23 = v22;
LABEL_46:
    *(void *)(a1 + 48) = v23;
    *(void *)(a1 + 56) = v25;
    *(void *)(a1 + 64) = v24;
    if (v14) {
      operator delete(v14);
    }
    goto LABEL_48;
  }
  bzero(*(void **)(a1 + 56), v13 - (v15 - v14));
  *(void *)(a1 + 56) = &v14[v13];
LABEL_48:
  uint64_t v39 = (unsigned char *)a2[6];
  int v40 = (unsigned char *)a2[7];
  if (v40 != v39) {
    memmove(*(void **)(a1 + 48), v39, v40 - v39);
  }
  long long v41 = *(_OWORD *)(a2 + 9);
  long long v42 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)((char *)a2 + 97);
  *(_OWORD *)(a1 + 88) = v42;
  *(_OWORD *)(a1 + 72) = v41;
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1 + 120, (char *)a2[15], (char *)a2[16], (a2[16] - a2[15]) >> 3);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1 + 144, (char *)a2[18], (char *)a2[19], (a2[19] - a2[18]) >> 3);
  return a1;
}

_WORD *std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  unsigned int v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  BOOL result = *(_WORD **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 61) {
      goto LABEL_32;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_32:
    }
      abort();
    uint64_t v13 = 4 * v12;
    BOOL result = operator new(8 * v12);
    unsigned int v14 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v13];
    unsigned int v15 = (char *)result;
    if (v6 != a3)
    {
      BOOL result = memcpy(result, v6, ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      unsigned int v15 = (char *)v14 + ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    int64_t v16 = v15 - (char *)v14;
    size_t v17 = (void *)(a1 + 8);
    goto LABEL_31;
  }
  uint64_t v18 = *(_WORD **)(a1 + 8);
  size_t v17 = (void *)(a1 + 8);
  unsigned int v14 = v18;
  int64_t v19 = (char *)v18 - (char *)result;
  unint64_t v20 = ((char *)v18 - (char *)result) >> 3;
  if (v20 < __sz)
  {
    size_t v21 = &a2[8 * v20];
    if (v14 != result)
    {
      __int16 v22 = a2;
      do
      {
        *(_DWORD *)BOOL result = *(_DWORD *)v22;
        result[2] = *((_WORD *)v22 + 2);
        v22 += 8;
        result += 4;
      }
      while (v22 != v21);
    }
    if (v21 == a3)
    {
      int64_t v16 = 0;
      goto LABEL_31;
    }
    __int16 v23 = &a2[v19];
    unint64_t v24 = a3 - v23 - 8;
    if (v24 < 0x38)
    {
      unint64_t v26 = (char *)v14;
    }
    else
    {
      unint64_t v25 = (char *)v14 - v23;
      unint64_t v26 = (char *)v14;
      if (v25 >= 0x20)
      {
        uint64_t v27 = (v24 >> 3) + 1;
        uint64_t v28 = 4 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v21 += v28 * 2;
        unsigned int v29 = v14 + 8;
        unsigned int v30 = &a2[8 * v20 + 16];
        uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *unsigned int v29 = v32;
          v29 += 2;
          v30 += 32;
          v31 -= 4;
        }
        while (v31);
        unint64_t v26 = (char *)&v14[v28];
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_30;
        }
      }
    }
    do
    {
      uint64_t v34 = *(void *)v21;
      v21 += 8;
      *(void *)unint64_t v26 = v34;
      v26 += 8;
    }
    while (v21 != a3);
LABEL_30:
    int64_t v16 = v26 - (char *)v14;
    goto LABEL_31;
  }
  unint64_t v33 = (char *)result;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)unint64_t v33 = *(_DWORD *)v6;
      *((_WORD *)v33 + 2) = *((_WORD *)v6 + 2);
      v33 += 8;
      v6 += 8;
    }
    while (v6 != a3);
  }
  int64_t v16 = v33 - (char *)result;
  unsigned int v14 = result;
LABEL_31:
  *size_t v17 = (char *)v14 + v16;
  return result;
}

void md::MapZoomLevelStyleLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint8x8_t v3 = (uint64_t *)a3[1];
  if (*((unsigned char *)v3 + 82))
  {
    uint64_t v5 = *a3;
    v45[0] = &unk_1EF575A20;
    v45[1] = a1;
    v45[2] = v3;
    unint64_t v46 = v45;
    unsigned int v6 = (unsigned char *)v3[6];
    uint64_t v7 = (unsigned char *)v3[7];
    if (v6 == v7) {
      goto LABEL_8;
    }
    do
    {
      LOBYTE(v36[0]) = *v6;
      if (!v46)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(void *, void *))(*v46 + 48))(v46, v36);
      ++v6;
    }
    while (v6 != v7);
    if (v46 == v45)
    {
LABEL_8:
      (*(void (**)(void *))(v45[0] + 32))(v45);
    }
    else if (v46)
    {
      (*(void (**)(void *))(*v46 + 40))(v46);
    }
    float v8 = *(float *)(v5 + 3072);
    float v9 = *(float *)(v5 + 3080);
    uint64_t v11 = v3[4];
    uint64_t v10 = (std::__shared_weak_count *)v3[5];
    uint64_t v34 = v11;
    int64_t v35 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v11 && !*(void *)(a1 + 128))
    {
      unsigned int v12 = gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(v11, 0x10036u);
      float v13 = fmaxf(v9 + v8, 1.0);
      uint64_t v14 = 148;
      if (*((_DWORD *)v3 + 22) == 5) {
        uint64_t v14 = 144;
      }
      float v15 = *(float *)(a1 + v14);
      if (v12 >= 0x10000)
      {
        BOOL v18 = v13 < (float)(v15 + -0.25) && v12 == 1;
        if ((_BYTE)v12) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v13 < (float)(v15 + 0.25);
        }
        if (!v19 || v18)
        {
          BOOL v20 = v13 >= v15;
          uint64_t v22 = *v3;
          size_t v21 = (std::__shared_weak_count *)v3[1];
          uint64_t v32 = *v3;
          unint64_t v33 = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 520);
            unint64_t v24 = *(std::__shared_weak_count **)(v22 + 528);
            uint64_t v43 = v23;
            uint64_t v44 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v23)
            {
              gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(v23, 0x10036u, v13 >= v15);
              unint64_t v25 = *(void **)(a1 + 128);
              if (v25) {
                objc_msgSend(v25, "stop", v32, v21, v34);
              }
              unint64_t v26 = [[VKTimedAnimation alloc] initWithDuration:0.300000012];
              uint64_t v27 = *(void **)(a1 + 128);
              *(void *)(a1 + 128) = v26;

              [*(id *)(a1 + 128) setTimingFunction:VKAnimationCurveEaseOut];
              v41[0] = MEMORY[0x1E4F143A8];
              v41[1] = 3321888768;
              v41[2] = ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke;
              v41[3] = &__block_descriptor_56_ea8_40c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE_e8_v12__0f8l;
              v41[4] = a1;
              v41[5] = v23;
              long long v42 = v24;
              if (v24) {
                atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              objc_msgSend(*(id *)(a1 + 128), "setStepHandler:", v41, v32, v33);
              v36[0] = MEMORY[0x1E4F143A8];
              v36[1] = 3321888768;
              v36[2] = ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke_1;
              v36[3] = &__block_descriptor_73_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE56c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE_e8_v12__0B8l;
              v36[4] = a1;
              v36[5] = v22;
              __int16 v37 = v21;
              if (v21) {
                atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v40 = v20;
              uint64_t v38 = v23;
              uint64_t v39 = v24;
              if (v24) {
                atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              [*(id *)(a1 + 128) setCompletionHandler:v36];
              md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 168), *(VKAnimation **)(a1 + 128));
              uint64_t v28 = v39;
              if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
              unsigned int v29 = v37;
              if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
              unsigned int v30 = v42;
              if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            uint64_t v31 = v44;
            if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v11, 0x10036u, v13 >= v15);
        uint64_t v16 = **(void **)(a1 + 160);
        if (v16)
        {
          LOBYTE(v36[0]) = 6;
          md::MapEngine::setNeedsTick(v16, v36);
        }
      }
    }
    if (v35)
    {
      if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
}

void sub_1A1997C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v11 - 152);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1A1997C7C(_Unwind_Exception *a1)
{
  std::function<void ()(md::StyleManagerEvent)>::~function((void *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t gss::ClientStyleState<gss::PropertyID>::sourceClientStyleAttribute(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (pthread_rwlock_t *)(a1 + 16);
  uint64_t v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  }
  uint64_t v7 = *(unsigned __int16 *)(a1 + 226);
  if (*(_WORD *)(a1 + 226))
  {
    uint64_t v8 = *(void *)(a1 + 216);
    if (!*(unsigned char *)(a1 + 231))
    {
      uint64_t v11 = 4 * v7;
      unsigned int v12 = *(_DWORD **)(a1 + 216);
      while (*v12 != a2)
      {
        ++v12;
        v11 -= 4;
        if (!v11)
        {
          unsigned int v12 = (_DWORD *)(v8 + 4 * v7);
          break;
        }
      }
      unint64_t v13 = ((unint64_t)v12 - v8) >> 2;
      if (v7 == (unsigned __int16)v13) {
        goto LABEL_30;
      }
      goto LABEL_25;
    }
    if (v7 < 0x1E)
    {
      uint64_t v9 = 0;
      while (1)
      {
        unsigned int v10 = *(_DWORD *)(v8 + 4 * v9);
        if (v10 >= a2) {
          break;
        }
        if (v7 == ++v9) {
          goto LABEL_30;
        }
      }
      if (v10 == a2) {
        LOWORD(v13) = v9;
      }
      else {
        LOWORD(v13) = *(_WORD *)(a1 + 226);
      }
      if (v7 == (unsigned __int16)v13) {
        goto LABEL_30;
      }
LABEL_25:
      int v20 = *(_WORD *)(*(void *)(a1 + 216) + *(unsigned __int16 *)(a1 + 224) + 2 * (unsigned __int16)v13) & 0xFF00;
      int v21 = *(_WORD *)(*(void *)(a1 + 216)
                                      + *(unsigned __int16 *)(a1 + 224)
                                      + 2 * (unsigned __int16)v13);
      int v22 = 0x10000;
      goto LABEL_31;
    }
    uint64_t v14 = *(_DWORD **)(a1 + 216);
    unint64_t v15 = *(unsigned __int16 *)(a1 + 226);
    do
    {
      unint64_t v16 = v15 >> 1;
      size_t v17 = &v14[v15 >> 1];
      unsigned int v19 = *v17;
      BOOL v18 = v17 + 1;
      v15 += ~(v15 >> 1);
      if (v19 < a2) {
        uint64_t v14 = v18;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
    if (v14 != (_DWORD *)(v8 + 4 * v7) && *v14 == a2)
    {
      unint64_t v13 = ((unint64_t)v14 - v8) >> 2;
      if (v7 != (unsigned __int16)v13) {
        goto LABEL_25;
      }
    }
  }
LABEL_30:
  int v22 = 0;
  int v21 = 0;
  int v20 = 0;
LABEL_31:
  uint64_t v23 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if (v23) {
    geo::read_write_lock::logFailure(v23, (uint64_t)"unlock", v24);
  }
  return v21 | v22 | v20;
}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "StyleLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "StyleLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEEclEOSN_(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 5)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)v2 + 16) + 2784));
      if (v4)
      {
        uint64_t v5 = *(void *)(*(void *)v2 + 16);
        if (v5)
        {
          unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 2784));
          if ((v6 & 1) == 0) {
            std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v5 + 2808));
          }
          uint64_t v8 = *(void *)(v5 + 120);
          uint64_t v7 = *(std::__shared_weak_count **)(v5 + 128);
          if (v7)
          {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (v8)
          {
            *(_DWORD *)(v3 + 148) = 1096810496;
            float v9 = 13.0;
            if (*(void *)v2)
            {
              uint64_t v10 = *(void *)(*(void *)v2 + 16);
              if (v10)
              {
                unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v10 + 2784));
                if ((v11 & 1) == 0) {
                  std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v10 + 2808));
                }
                uint64_t v12 = *(void *)(v10 + 120);
                unint64_t v13 = *(std::__shared_weak_count **)(v10 + 128);
                if (v13) {
                  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v12)
                {
                  float v9 = *(float *)(v12 + 288);
                  *(_DWORD *)(v3 + 148) = *(_DWORD *)(v12 + 292);
                }
                if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                  std::__shared_weak_count::__release_weak(v13);
                }
              }
            }
            float v14 = v9 <= 13.0 ? 13.25 : v9 + 0.25;
            if (*(float *)(v3 + 144) != v14)
            {
              uint64_t v15 = *(void *)(v3 + 152);
              unsigned int v20 = vcvtms_u32_f32(v9);
              v19[0] = 1;
              int v22 = 25;
              char v21 = 1;
              uint64_t v16 = *(void *)(v15 + 56);
              uint64_t v17 = *(void *)(v15 + 64);
              if (v16 != v17)
              {
                while (*(_WORD *)v16 != 13)
                {
                  v16 += 16;
                  if (v16 == v17) {
                    goto LABEL_33;
                  }
                }
              }
              if (v16 != v17)
              {
                uint64_t v18 = *(void *)(v16 + 8);
                if (v18) {
                  (*(void (**)(uint64_t, char *))(*(void *)v18 + 32))(v18, v19);
                }
              }
LABEL_33:
              *(float *)(v3 + 144) = v14;
            }
          }
        }
      }
    }
  }
}

BOOL md::AnimationRunner::runAnimation(md::MapEngine **this, VKAnimation *a2)
{
  uint64_t v3 = a2;
  unsigned __int8 v4 = v3;
  uint64_t v5 = *this;
  if (v5)
  {
    unsigned __int8 v6 = v3;
    (*(void (**)(void *, VKAnimation *))(**((void **)v5 + 13) + 24))(*((void **)v5 + 13), v6);
    md::MapEngine::updateRunLoopStatus(v5);
  }
  return v5 != 0;
}

void sub_1A199823C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19982AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::operator()(uint64_t a1, uint64_t *a2)
{
  __int16 v2 = *(_WORD *)(a1 + 8);
  float v3 = *(float *)(a1 + 12);
  uint64_t v4 = *a2;
  int v5 = *(unsigned __int8 *)(*a2 + 171);
  if ((v2 & 0xFF00) != 0 && v5 != 0)
  {
    if (*(unsigned __int8 *)(v4 + 170) == v2) {
      return;
    }
    *(_WORD *)(v4 + 170) = v2;
    uint64_t v7 = *(void *)(v4 + 208);
LABEL_15:
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(v7, 0x1007Cu, v2);
    if (*(unsigned char *)(v4 + 1116)) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  if (((v2 & 0xFF00) != 0) == (v5 != 0)) {
    return;
  }
  *(_WORD *)(v4 + 170) = v2;
  uint64_t v7 = *(void *)(v4 + 208);
  if ((v2 & 0xFF00) != 0) {
    goto LABEL_15;
  }
  gss::ClientStyleState<gss::PropertyID>::removeTargetClientStyleAttribute(v7, 0x1007Cu);
  if (*(unsigned char *)(v4 + 1116))
  {
LABEL_16:
    *(float *)(v4 + 1120) = fmaxf(*(float *)(v4 + 1120), v3);
    return;
  }
LABEL_9:
  *(unsigned char *)(v4 + 1116) = 1;
  *(float *)(v4 + 1120) = v3;
  char v11 = 4;
  uint64_t v8 = *(char **)(v4 + 1128);
  float v9 = *(char **)(v4 + 1136);
  if (v8 != v9)
  {
    while (*v8 <= 3u)
    {
      if (++v8 == v9) {
        goto LABEL_19;
      }
    }
  }
  if (v8 == v9 || (float v9 = v8, *v8 != 4)) {
LABEL_19:
  }
    std::vector<md::StyleManagerEvent>::insert(v4 + 1128, v9, &v11);
  uint64_t v10 = **(void **)(v4 + 1240);
  if (v10)
  {
    char v12 = 12;
    md::MapEngine::setNeedsTick(v10, &v12);
  }
}

uint64_t md::SingleGEOResourceDataRequester::setVisibleZoomRange(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 28);
  if (*(unsigned char *)a2)
  {
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 4);
    if (!v2) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else if (*(unsigned char *)(result + 28))
  {
    *(unsigned char *)(result + 28) = 0;
  }
  int v3 = *(unsigned __int8 *)(result + 36);
  if (*(unsigned char *)(a2 + 8))
  {
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 12);
    if (!v3) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else if (*(unsigned char *)(result + 36))
  {
    *(unsigned char *)(result + 36) = 0;
  }
  return result;
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_1,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int v2 = (id)GEOGetVectorKitPerformanceLog_log;
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RenderLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D4E0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D408;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D3C0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D330;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D2E8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D2A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D138;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D0F0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51D0A8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CE68;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CDD8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51CC70;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C718;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C6D0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C688;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C640;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C490;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C448;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C400;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C3B8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C2E0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C298;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C250;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C208;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C1C0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C178;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C130;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51C0E8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BF38;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BEF0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BE60;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BC68;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BC20;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BBD8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BB90;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BB48;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B8C0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B830;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B710;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B518;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B488;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B290;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B008;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AFC0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AE10;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51ADC8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AD80;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRenderableData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51ACF0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51ACA8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51ABD0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AB40;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateTileTransforms>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AA68;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A990;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A900;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A8B8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A870;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A6C0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A678;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A480;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A3F0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A360;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A1F8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A1B0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A168;
  a2[1] = *(void *)(result + 8);
  return result;
}

void sub_1A1999108(_Unwind_Exception *a1)
{
  os_signpost_id_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A1999358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1A1999540(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A19996E8(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1999780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1999A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

void sub_1A1999CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1999D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VKCameraCalculateEnclosingRegion(void *a1, void *a2, double *a3, float a4, float a5, float a6, float a7)
{
  v63[35] = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  float v14 = [v13 footprint];
  uint64_t v15 = [v14 cornerGroundPoints];

  uint64_t v16 = [v13 footprint];
  int v17 = [v16 cornerGroundPointsCount];

  uint64_t v18 = (double *)[v13 scaledViewProjectionMatrix];
  if (v13)
  {
    [v13 cameraState];
    if (v17 >= 1) {
      goto LABEL_3;
    }
LABEL_7:
    double v26 = INFINITY;
    double v27 = -INFINITY;
    double v20 = -INFINITY;
    double v21 = INFINITY;
    goto LABEL_8;
  }
  long long v61 = 0u;
  long long v62 = 0u;
  memset(&v60.var0._rotation._imaginary._e[1], 0, 48);
  if (v17 < 1) {
    goto LABEL_7;
  }
LABEL_3:
  double v58 = v18[1];
  double v59 = *v18;
  double v56 = v18[9];
  double v57 = v18[5];
  double v54 = a5 + -1.0;
  double v55 = v18[13];
  double v52 = a6 + -1.0;
  double v53 = 1.0 - a7;
  double v50 = v18[4];
  double v51 = 1.0 - a4;
  uint64_t v19 = v17;
  double v20 = -INFINITY;
  double v48 = v18[8];
  double v49 = v18[3];
  double v47 = v18[7];
  double v21 = INFINITY;
  int v22 = v63;
  double v24 = v18[11];
  double v23 = v18[12];
  unint64_t v25 = (double *)(v15 + 16);
  double v26 = INFINITY;
  double v27 = -INFINITY;
  double v28 = v18[15];
  do
  {
    double v29 = *(v25 - 2);
    double v30 = *(v25 - 1);
    double v31 = *v25;
    v25 += 3;
    double v32 = v23 + v29 * v59 + v30 * v50 + v31 * v48;
    double v33 = v55 + v29 * v58 + v30 * v57 + v31 * v56;
    double v34 = 1.0 / (v28 + v29 * v49 + v30 * v47 + v31 * v24);
    double v35 = fmin(fmin(fmax(v34 * v33, v52), v51), 1.0);
    v64.x = fmin(fmax(v34 * v32, v54), v53) * 0.5 + 0.5;
    v64.y = v35 * 0.5 + 0.5;
    VKCameraMakeGroundPoint(&v60, v64, v35, &v60.var0._rotation._imaginary._e[1]);
    double v21 = fmin(v21, v60.var0._translation._e[1]);
    double v20 = fmax(v20, v60.var0._translation._e[1]);
    *((void *)v22 - 1) = *(void *)&v60.var0._translation._e[1];
    double v26 = fmin(v26, v60.var0._translation._e[2]);
    double v27 = fmax(v27, v60.var0._translation._e[2]);
    *int v22 = *(_OWORD *)&v60.var0._translation._e[2];
    int v22 = (_OWORD *)((char *)v22 + 24);
    --v19;
  }
  while (v19);
LABEL_8:
  double v36 = *(double *)(MEMORY[0x1E4F63F10] + 8);
  double v37 = *MEMORY[0x1E4F63F10] * v21;
  double v38 = v36 - v27 * v36;
  double v39 = *MEMORY[0x1E4F63F10] * (v20 - v21);
  double v40 = v36 * (v27 - v26);
  if (a3)
  {
    *a3 = v37;
    a3[1] = v38;
    a3[2] = v39;
    a3[3] = v40;
  }
  if (a2)
  {
    long long v41 = objc_msgSend(objc_alloc(MEMORY[0x1E4F64700]), "initWithMapRect:", v37, v38, v39, v40);
    if (v17 >= 1)
    {
      uint64_t v42 = v17;
      uint64_t v43 = v63;
      do
      {
        id v44 = objc_alloc(MEMORY[0x1E4F64638]);
        GEOCoordinate2DForMapPoint();
        uint64_t v45 = objc_msgSend(v44, "initWithCoordinate:");
        [v41 addVertex:v45];

        v43 += 3;
        --v42;
      }
      while (v42);
    }
    id v46 = v41;
    *a2 = v46;
  }
}

void sub_1A199A20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::LayerDataLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  char v12 = (void (**)(void **))&unk_1EF5708D8;
  uint64_t v13 = a2;
  float v14 = (void **)&v12;
  v10[0] = &unk_1EF570920;
  v10[1] = a2;
  char v11 = v10;
  uint64_t v16 = v15;
  v15[0] = &unk_1EF570920;
  v15[1] = a2;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v6 = *(void *)(v13 + 80);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v7 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)float v9 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "LayerDataLogic", "", v9, 2u);
    }
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (v14 == (void **)&v12)
  {
    v12[4]((void **)&v12);
  }
  else if (v14)
  {
    (*((void (**)(void))*v14 + 5))();
  }
  *a4 = *(void *)(a1 + 120);
  if (!v16) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(void *))(*v16 + 48))(v16);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  if (v16) {
    return (*(uint64_t (**)(void))(*v16 + 40))();
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v2 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)os_signpost_id_t v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v2, "LayerDataLogic", "", v4, 2u);
    }
  }
}

void sub_1A199A6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t grl::TextLayerRenderer::TextLayerRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a1 + 8) = 3;
  *(unsigned char *)(a1 + 10) = 1;
  *(void *)a1 = &unk_1EF5670F0;
  grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)(a1 + 16), (const grl::codec::TextLayerData *)a2);
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 312) = &unk_1EF559338;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = &unk_1EF559338;
  *(void *)(a1 + 344) = 0;
  char v11 = (_OWORD *)(a2 + 144);
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *v11;
    v72.__r_.__value_.__r.__words[2] = *(void *)(a2 + 160);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v72.__r_.__value_.__l.__size_;
    operator delete(v72.__r_.__value_.__l.__data_);
    if (!size) {
      return a1;
    }
  }
  else if (!*((unsigned char *)&v72.__r_.__value_.__s + 23))
  {
    return a1;
  }
  unsigned int v69 = &unk_1EF5592F8;
  CFTypeRef cf = 0;
  if (*(char *)(a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else {
    std::string v72 = *(std::string *)(a2 + 40);
  }
  unsigned __int16 v53 = a6;
  uint64_t v54 = a5;
  uint64_t v13 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(a4, (const void **)&v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a4 + 8;
  if (a4 + 8 != v13)
  {
    uint64_t v15 = *(const __CTFont **)(v13 + 64);
    if (v15) {
      goto LABEL_21;
    }
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
  }
  uint64_t v16 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v72.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fontIt != fonts.end() && fontIt->second.get()";
    WORD2(v72.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    HIWORD(v72.__r_.__value_.__r.__words[2]) = 1024;
    int v73 = 528;
    _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "TextLayerRender: Digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v72, 0x1Cu);
  }
  if (v14 == v13 || (uint64_t v15 = *(const __CTFont **)(v13 + 64)) == 0)
  {
    CopyWithAttributes = cf;
  }
  else
  {
LABEL_21:
    CopyWithAttributes = CTFontCreateCopyWithAttributes(v15, *(float *)(a2 + 64), 0, 0);
    CFTypeRef cf = CopyWithAttributes;
  }
  unsigned int v67 = &unk_1EF5592F8;
  if (CopyWithAttributes) {
    CFRetain(CopyWithAttributes);
  }
  CFTypeRef v68 = CopyWithAttributes;
  uint64_t v18 = (_OWORD *)(a2 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *v18;
    v72.__r_.__value_.__r.__words[2] = *(void *)(a2 + 104);
  }
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v72.__r_.__value_.__s + 23)) {
      goto LABEL_30;
    }
LABEL_33:
    float v20 = *(float *)(a2 + 112);
    if (*(float *)(a2 + 64) == v20) {
      goto LABEL_49;
    }
    double v21 = (const __CTFont *)cf;
    goto LABEL_47;
  }
  std::string::size_type v19 = v72.__r_.__value_.__l.__size_;
  operator delete(v72.__r_.__value_.__l.__data_);
  if (!v19) {
    goto LABEL_33;
  }
LABEL_30:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *v18;
    v72.__r_.__value_.__r.__words[2] = *(void *)(a2 + 104);
  }
  uint64_t v22 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(a4, (const void **)&v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (v14 != v22)
  {
    double v21 = *(const __CTFont **)(v22 + 64);
    if (v21) {
      goto LABEL_46;
    }
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
  }
  double v23 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v72.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nonDigitFontIt != fonts.end() && nonDigitFontIt->second.get()";
    WORD2(v72.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    HIWORD(v72.__r_.__value_.__r.__words[2]) = 1024;
    int v73 = 544;
    _os_log_impl(&dword_1A1780000, v23, OS_LOG_TYPE_ERROR, "TextLayerRender: Non-digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v72, 0x1Cu);
  }
  if (v14 != v22)
  {
    double v21 = *(const __CTFont **)(v22 + 64);
    if (v21)
    {
LABEL_46:
      float v20 = *(float *)(a2 + 112);
LABEL_47:
      CTFontRef v24 = CTFontCreateCopyWithAttributes(v21, v20, 0, 0);
      CFTypeRef v25 = v68;
      CFTypeRef v68 = v24;
      if (v25) {
        CFRelease(v25);
      }
    }
  }
LABEL_49:
  LODWORD(v72.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 32);
  grl::createCGColor((__int32 *)&v72, &v65);
  LODWORD(v72.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 84);
  grl::createCGColor((__int32 *)&v72, &v63);
  LODWORD(v72.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 68);
  grl::createCGColor((__int32 *)&v72, &v61);
  LODWORD(v72.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 116);
  grl::createCGColor((__int32 *)&v72, &v59);
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *v11;
    v72.__r_.__value_.__r.__words[2] = *(void *)(a2 + 160);
  }
  grl::createCTLine((grl::Allocator *)&v72, (void *)cf, (void *)v68, (void *)v66, (void *)v64, 0, 0, &v57, 0.0, 0.0, 0.0, 0.0);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (!v58)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    double v39 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v72.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
      WORD2(v72.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      HIWORD(v72.__r_.__value_.__r.__words[2]) = 1024;
      int v73 = 560;
      _os_log_impl(&dword_1A1780000, v39, OS_LOG_TYPE_ERROR, "Failed to generate text line for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v72, 0x1Cu);
    }
    goto LABEL_70;
  }
  geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::operator=(a1 + 312, v58);
  float v27 = *(float *)(a2 + 72);
  float v28 = *(float *)(a2 + 120);
  if (v27 > 0.0 || v28 > 0.0)
  {
    if (*(char *)(a2 + 167) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 144), *(void *)(a2 + 152));
      float v27 = *(float *)(a2 + 72);
      float v28 = *(float *)(a2 + 120);
    }
    else
    {
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *v11;
      v72.__r_.__value_.__r.__words[2] = *(void *)(a2 + 160);
    }
    grl::createCTLine((grl::Allocator *)&v72, (void *)cf, (void *)v68, (void *)v66, (void *)v64, (void *)v62, (void *)v60, &v55, v27, v28, *(float *)(a2 + 64), *(float *)(a2 + 112));
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (v56)
    {
      geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::operator=(a1 + 336, v56);
      float OpticalBounds = grl::getOpticalBounds((grl *)v56, v40);
      int v43 = v42;
      int v45 = v44;
      int v47 = v46;
      unsigned __int16 v71 = v53;
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
      double v48 = std::__tree<std::__value_type<unsigned short,gm::Box<float,2>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,gm::Box<float,2>>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,gm::Box<float,2>>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v54 + 32), &v71, (uint64_t)&std::piecewise_construct, &v72);
      *((float *)v48 + 8) = OpticalBounds;
      *((_DWORD *)v48 + 9) = v43;
      *((_DWORD *)v48 + 10) = v45;
      *((_DWORD *)v48 + 11) = v47;
      float TextDescent = grl::getTextDescent((grl *)v56, v49);
      unsigned __int16 v71 = v53;
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
      *((float *)std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,float>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v54 + 64), &v71, (uint64_t)&std::piecewise_construct, &v72)+ 8) = TextDescent;
      double v55 = &unk_1EF559338;
      if (!v56) {
        goto LABEL_70;
      }
    }
    else
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
      }
      double v52 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v72.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
        WORD2(v72.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        HIWORD(v72.__r_.__value_.__r.__words[2]) = 1024;
        int v73 = 568;
        _os_log_impl(&dword_1A1780000, v52, OS_LOG_TYPE_ERROR, "Failed to generate text line for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v72, 0x1Cu);
      }
      double v55 = &unk_1EF559338;
      if (!v56) {
        goto LABEL_70;
      }
    }
    CFRelease(v56);
    goto LABEL_70;
  }
  float v29 = grl::getOpticalBounds((grl *)v58, v26);
  int v31 = v30;
  int v33 = v32;
  int v35 = v34;
  LOWORD(v55) = v53;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  double v36 = std::__tree<std::__value_type<unsigned short,gm::Box<float,2>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,gm::Box<float,2>>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,gm::Box<float,2>>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v54 + 32), (unsigned __int16 *)&v55, (uint64_t)&std::piecewise_construct, &v72);
  *((float *)v36 + 8) = v29;
  *((_DWORD *)v36 + 9) = v31;
  *((_DWORD *)v36 + 10) = v33;
  *((_DWORD *)v36 + 11) = v35;
  float v38 = grl::getTextDescent((grl *)v58, v37);
  LOWORD(v55) = v53;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  *((float *)std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,float>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v54 + 64), (unsigned __int16 *)&v55, (uint64_t)&std::piecewise_construct, &v72)+ 8) = v38;
LABEL_70:
  double v57 = &unk_1EF559338;
  if (v58) {
    CFRelease(v58);
  }
  double v59 = &unk_1EF5590F8;
  if (v60) {
    CFRelease(v60);
  }
  long long v61 = &unk_1EF5590F8;
  if (v62) {
    CFRelease(v62);
  }
  uint64_t v63 = &unk_1EF5590F8;
  if (v64) {
    CFRelease(v64);
  }
  __int16 v65 = &unk_1EF5590F8;
  if (v66) {
    CFRelease(v66);
  }
  unsigned int v67 = &unk_1EF5592F8;
  if (v68) {
    CFRelease(v68);
  }
  unsigned int v69 = &unk_1EF5592F8;
  if (cf) {
    CFRelease(cf);
  }
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::operator()(void *a1, int a2, grl::codec::TextLayerData *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)v28, a3);
  if (v35)
  {
    uint64_t v4 = a1[2];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = __p;
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
      operator delete(v40.__r_.__value_.__l.__data_);
      if (!size) {
        goto LABEL_74;
      }
    }
    else if (!*((unsigned char *)&v40.__r_.__value_.__s + 23))
    {
      goto LABEL_74;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = v30;
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v6 = v40.__r_.__value_.__l.__size_;
      operator delete(v40.__r_.__value_.__l.__data_);
      if (!v6) {
        goto LABEL_74;
      }
    }
    else if (!*((unsigned char *)&v40.__r_.__value_.__s + 23))
    {
      goto LABEL_74;
    }
    uint64_t v7 = (unsigned char *)a1[1];
    if (*v7 && v31 == 0.0)
    {
      uint64_t v8 = 0;
      int v9 = v7[6];
      float v10 = ceilf(*(float *)(v4 + 260));
      char v11 = grl::codec::textBalloonMetrics;
      while (*(float *)&grl::codec::textBalloonMetrics[v8] != v10)
      {
        v8 += 2;
        if (v8 == 8) {
          goto LABEL_23;
        }
      }
      char v11 = &grl::codec::textBalloonMetrics[v8];
LABEL_23:
      float v12 = *((float *)v11 + 1);
      if (v9) {
        float v12 = v12 + v12;
      }
      float v31 = v12;
    }
    float v38 = &unk_1EF5592F8;
    CTFontRef v39 = 0;
    uint64_t v13 = a1[3];
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = v30;
    }
    uint64_t v14 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(v13, (const void **)&v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (a1[3] + 8 == v14 || !*(void *)(v14 + 64))
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
      }
      uint64_t v15 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v40.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fontIt != fontMap.end() && fontIt->second.get()";
        WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
        HIWORD(v40.__r_.__value_.__r.__words[2]) = 1024;
        int v41 = 525;
        _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "TextLayerRender: Digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v40, 0x1Cu);
      }
    }
    if (a1[3] + 8 != v14)
    {
      uint64_t v16 = *(const __CTFont **)(v14 + 64);
      if (v16)
      {
        CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v16, v31, 0, 0);
        CTFontRef v18 = v39;
        CTFontRef v39 = CopyWithAttributes;
        if (!v18) {
          goto LABEL_42;
        }
        CFRelease(v18);
      }
    }
    CTFontRef CopyWithAttributes = v39;
LABEL_42:
    double v36 = &unk_1EF5592F8;
    if (CopyWithAttributes) {
      CFRetain(CopyWithAttributes);
    }
    CTFontRef v37 = CopyWithAttributes;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = v32;
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v20 = v40.__r_.__value_.__l.__size_;
      operator delete(v40.__r_.__value_.__l.__data_);
      if (v20) {
        goto LABEL_49;
      }
    }
    else if (*((unsigned char *)&v40.__r_.__value_.__s + 23))
    {
LABEL_49:
      uint64_t v19 = a1[3];
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v40, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else {
        std::string v40 = v32;
      }
      uint64_t v23 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(v19, (const void **)&v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (a1[3] + 8 == v23 || !*(void *)(v23 + 64))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
        }
        CTFontRef v24 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v40.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nonDigitFontIt != fontMap.end() && nonDigitFontIt->second.get()";
          WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
          HIWORD(v40.__r_.__value_.__r.__words[2]) = 1024;
          int v41 = 541;
          _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "TextLayerRender: Non-digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v40, 0x1Cu);
        }
      }
      if (a1[3] + 8 == v23 || (uint64_t v22 = *(const __CTFont **)(v23 + 64)) == 0)
      {
LABEL_68:
        uint64_t v27 = a1[1];
        if (*(unsigned char *)(v27 + 56))
        {
          if (*(char *)(v27 + 87) < 0) {
            std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v27 + 64), *(void *)(v27 + 72));
          }
          else {
            std::string v40 = *(std::string *)(v27 + 64);
          }
        }
        else
        {
          std::string::basic_string[abi:nn180100]<0>(&v40, "");
        }
        operator new();
      }
      float v21 = v33;
LABEL_66:
      CTFontRef v25 = CTFontCreateCopyWithAttributes(v22, v21, 0, 0);
      CTFontRef v26 = v37;
      CTFontRef v37 = v25;
      if (v26) {
        CFRelease(v26);
      }
      goto LABEL_68;
    }
    float v21 = v33;
    if (v31 == v33) {
      goto LABEL_68;
    }
    uint64_t v22 = v39;
    goto LABEL_66;
  }
LABEL_74:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    (*(void (**)(uint64_t, void, void))(*(void *)v29 + 40))(v29, v28[0], v28[2] - v28[0]);
  }
}

grl::codec::TextLayerData *grl::codec::TextLayerData::TextLayerData(grl::codec::TextLayerData *this, const grl::codec::TextLayerData *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v4;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)this, *(unsigned char **)a2, *((unsigned char **)a2 + 1), *((void *)a2 + 1) - *(void *)a2);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  int v5 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  uint64_t v7 = *((void *)a2 + 9);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((void *)this + 9) = v7;
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  uint64_t v8 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  uint64_t v10 = *((void *)a2 + 16);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((void *)this + 16) = v10;
  char v11 = (std::string *)((char *)this + 144);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 9);
    *((void *)this + 20) = *((void *)a2 + 20);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  uint64_t v13 = *((void *)a2 + 21);
  *((_WORD *)this + 88) = *((_WORD *)a2 + 88);
  *((void *)this + 21) = v13;
  return this;
}

void grl::createCGColor(__int32 *a1@<X0>, void *a2@<X8>)
{
  CGColorSpaceRef v4 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  uint64_t v15 = &unk_1EF559018;
  CGColorSpaceRef v16 = v4;
  if (v4)
  {
    v5.i32[0] = *a1;
    float32x4_t v6 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v5))), (float32x4_t)vdupq_n_s32(0x3B808081u));
    *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
    float64x2_t v14 = vcvt_hight_f64_f32(v6);
    CGColorRef v7 = CGColorCreate(v4, components);
    char v11 = &unk_1EF5590F8;
    CFTypeRef cf = v7;
    if (v7)
    {
      *a2 = &unk_1EF5590F8;
      a2[1] = v7;
    }
    else
    {
      if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_37_0);
      }
      long long v9 = GEOGetGeoResourceLibCoreGraphicsLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, "Failed to create a CGColor.", v10, 2u);
      }
      *a2 = &unk_1EF5590F8;
      a2[1] = 0;
      char v11 = &unk_1EF5590F8;
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_37_0);
    }
    uint64_t v8 = GEOGetGeoResourceLibCoreGraphicsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(components[0]) = 0;
      _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_ERROR, "Nullptr color space being used to generate a CGColor.", (uint8_t *)components, 2u);
    }
    *a2 = &unk_1EF5590F8;
    a2[1] = 0;
  }
  uint64_t v15 = &unk_1EF559018;
  if (v16) {
    CFRelease(v16);
  }
}

uint64_t std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 24;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:nn180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:nn180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t ***)(a1 + 8);
  if (*(char *)(a3 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else {
    std::string __p = *(std::string *)(a3 + 40);
  }
  std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_unique_key_args<std::string,std::string>(v5, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *(uint64_t ***)(a1 + 8);
  if (*(char *)(a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 88), *(void *)(a3 + 96));
  }
  else {
    std::string __p = *(std::string *)(a3 + 88);
  }
  std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_unique_key_args<std::string,std::string>(v6, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t *std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v5 = (uint64_t)a1[1];
  if (!v5)
  {
    uint64_t v8 = (uint64_t *)(a1 + 1);
LABEL_10:
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 56, 8);
    uint64_t v12 = *(void *)(a3 + 16);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)a3;
    *(void *)(v11 + 48) = v12;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = v8;
    *uint64_t v6 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      float64x2_t v14 = (uint64_t *)*v6;
    }
    else
    {
      float64x2_t v14 = (uint64_t *)v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t *)v5;
      long long v9 = (const void **)(v5 + 32);
      if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 3), a2, (const void **)(v5 + 32))) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 3), v9, a2);
    if (!result) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v6) {
    goto LABEL_10;
  }
  return result;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void grl::createCTLine(grl::Allocator *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>)
{
  uint64_t v293 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *((unsigned __int8 *)a1 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a1 + 1);
  }
  if (v13)
  {
    keys[0] = 0;
    keys[1] = 0;
    uint64_t v280 = 0;
    CTFontRef v24 = (grl::Allocator *)grl::Allocator::instance(a1);
    unint64_t v281 = v24;
    values = 0;
    uint64_t v276 = 0;
    unint64_t v277 = 0;
    int v278 = (grl::Allocator *)grl::Allocator::instance(v24);
    unint64_t v271 = 0;
    __int16 v272 = 0;
    unint64_t v273 = 0;
    v274 = (grl::Allocator *)grl::Allocator::instance(v278);
    uint64_t v266 = 0;
    v267 = 0;
    uint64_t v269 = 0;
    uint64_t v270 = grl::Allocator::instance(v274);
    CFNumberRef v265 = 0;
    CFNumberRef cf = 0;
    CTFontRef v25 = (void **)MEMORY[0x1E4F243F0];
    if (a2)
    {
      v285 = &v281;
      CTFontRef v26 = (void **)(*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, 8, 8);
      uint64_t v27 = v26 + 1;
      if (v26) {
        *CTFontRef v26 = *v25;
      }
      uint64_t v29 = keys[0];
      float v28 = keys[1];
      if (keys[1] == keys[0])
      {
        int64x2_t v31 = vdupq_n_s64((unint64_t)keys[1]);
      }
      else
      {
        do
        {
          std::string v30 = *--v28;
          *--CTFontRef v26 = v30;
        }
        while (v28 != v29);
        int64x2_t v31 = *(int64x2_t *)keys;
      }
      keys[0] = v26;
      int64x2_t str = v31;
      float v33 = v280;
      uint64_t v280 = v27;
      v284 = v33;
      *(void *)long long buf = v31.i64[0];
      std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      int v34 = v276;
      keys[1] = v27;
      if ((unint64_t)v276 >= v277)
      {
        uint64_t v36 = v276 - values;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v38 = v277 - (void)values;
        if ((uint64_t)(v277 - (void)values) >> 2 > v37) {
          unint64_t v37 = v38 >> 2;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v39 = v37;
        }
        v285 = &v278;
        if (v39)
        {
          uint64_t v40 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v278 + 16))(v278, 8 * v39, 8);
          int v41 = (void **)(v40 + 8 * v36);
          uint64_t v42 = v40 + 8 * v39;
          if (v40) {
            void *v41 = a2;
          }
        }
        else
        {
          uint64_t v42 = 0;
          int v41 = (void **)(8 * v36);
        }
        char v35 = v41 + 1;
        int v44 = values;
        int v43 = v276;
        if (v276 == values)
        {
          int v46 = v276;
        }
        else
        {
          do
          {
            int v45 = *--v43;
            *--int v41 = v45;
          }
          while (v43 != v44);
          int v46 = values;
          int v43 = v276;
        }
        values = v41;
        uint64_t v276 = v35;
        unint64_t v47 = v277;
        unint64_t v277 = v42;
        str.i64[1] = (uint64_t)v43;
        v284 = (void **)v47;
        *(void *)long long buf = v46;
        str.i64[0] = (uint64_t)v46;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v276) {
          *uint64_t v276 = a2;
        }
        char v35 = v34 + 1;
      }
      uint64_t v276 = v35;
    }
    if (a3)
    {
      double v48 = *v25;
      double v49 = v272;
      if ((unint64_t)v272 >= v273)
      {
        uint64_t v51 = v272 - v271;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v53 = v273 - (void)v271;
        if ((uint64_t)(v273 - (void)v271) >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v54 = v52;
        }
        v285 = &v274;
        if (v54)
        {
          uint64_t v55 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v274 + 16))(v274, 8 * v54, 8);
          CFTypeRef v56 = (void **)(v55 + 8 * v51);
          uint64_t v57 = v55 + 8 * v54;
          if (v55) {
            *CFTypeRef v56 = v48;
          }
        }
        else
        {
          uint64_t v57 = 0;
          CFTypeRef v56 = (void **)(8 * v51);
        }
        double v50 = v56 + 1;
        double v59 = v271;
        CFTypeRef v58 = v272;
        if (v272 == v271)
        {
          long long v61 = v272;
        }
        else
        {
          do
          {
            CFTypeRef v60 = *--v58;
            *--CFTypeRef v56 = v60;
          }
          while (v58 != v59);
          long long v61 = v271;
          CFTypeRef v58 = v272;
        }
        unint64_t v271 = v56;
        __int16 v272 = v50;
        unint64_t v62 = v273;
        unint64_t v273 = v57;
        str.i64[1] = (uint64_t)v58;
        v284 = (void **)v62;
        *(void *)long long buf = v61;
        str.i64[0] = (uint64_t)v61;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v272) {
          void *v272 = v48;
        }
        double v50 = v49 + 1;
      }
      __int16 v272 = v50;
      v285 = (grl::Allocator **)&v270;
      uint64_t v63 = (void **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v270 + 16))(v270, 8, 8);
      if (v63) {
        *uint64_t v63 = a3;
      }
      CFTypeRef v64 = (char *)(v63 + 1);
      uint64_t v266 = v63;
      uint64_t v269 = (char *)(v63 + 1);
      v284 = 0;
      *(void *)long long buf = 0;
      int64x2_t str = 0uLL;
      std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      v267 = v64;
    }
    __int16 v65 = (void **)MEMORY[0x1E4F24740];
    if (a4)
    {
      CFTypeRef v66 = (void *)*MEMORY[0x1E4F24740];
      unsigned int v67 = keys[1];
      if (keys[1] >= v280)
      {
        int64_t v69 = keys[1] - keys[0];
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v71 = (char *)v280 - (char *)keys[0];
        if (((char *)v280 - (char *)keys[0]) >> 2 > v70) {
          unint64_t v70 = v71 >> 2;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v72 = v70;
        }
        v285 = &v281;
        if (v72)
        {
          uint64_t v73 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v281 + 16))(v281, 8 * v72, 8);
          uint64_t v74 = (void **)(v73 + 8 * v69);
          unsigned int v75 = (void **)(v73 + 8 * v72);
          if (v73) {
            _WORD *v74 = v66;
          }
        }
        else
        {
          unsigned int v75 = 0;
          uint64_t v74 = (void **)(8 * v69);
        }
        CFTypeRef v68 = v74 + 1;
        __int16 v77 = keys[0];
        unint64_t v76 = keys[1];
        if (keys[1] == keys[0])
        {
          __int16 v79 = keys[1];
        }
        else
        {
          do
          {
            unint64_t v78 = *--v76;
            *--uint64_t v74 = v78;
          }
          while (v76 != v77);
          __int16 v79 = keys[0];
          unint64_t v76 = keys[1];
        }
        keys[0] = v74;
        keys[1] = v68;
        unint64_t v80 = v280;
        uint64_t v280 = v75;
        str.i64[1] = (uint64_t)v76;
        v284 = v80;
        *(void *)long long buf = v79;
        str.i64[0] = (uint64_t)v79;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (keys[1]) {
          *keys[1] = v66;
        }
        CFTypeRef v68 = v67 + 1;
      }
      keys[1] = v68;
      char v81 = v276;
      if ((unint64_t)v276 >= v277)
      {
        uint64_t v83 = v276 - values;
        unint64_t v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v85 = v277 - (void)values;
        if ((uint64_t)(v277 - (void)values) >> 2 > v84) {
          unint64_t v84 = v85 >> 2;
        }
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v86 = v84;
        }
        v285 = &v278;
        if (v86)
        {
          uint64_t v87 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v278 + 16))(v278, 8 * v86, 8);
          uint64_t v88 = (void **)(v87 + 8 * v83);
          uint64_t v89 = v87 + 8 * v86;
          if (v87) {
            *uint64_t v88 = a4;
          }
        }
        else
        {
          uint64_t v89 = 0;
          uint64_t v88 = (void **)(8 * v83);
        }
        __int16 v82 = v88 + 1;
        unsigned int v91 = values;
        unint64_t v90 = v276;
        if (v276 == values)
        {
          uint64_t v93 = v276;
        }
        else
        {
          do
          {
            unsigned int v92 = *--v90;
            *--uint64_t v88 = v92;
          }
          while (v90 != v91);
          uint64_t v93 = values;
          unint64_t v90 = v276;
        }
        values = v88;
        uint64_t v276 = v82;
        unint64_t v94 = v277;
        unint64_t v277 = v89;
        str.i64[1] = (uint64_t)v90;
        v284 = (void **)v94;
        *(void *)long long buf = v93;
        str.i64[0] = (uint64_t)v93;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v276) {
          *uint64_t v276 = a4;
        }
        __int16 v82 = v81 + 1;
      }
      uint64_t v276 = v82;
    }
    if (a5)
    {
      unsigned int v95 = *v65;
      unsigned int v96 = v272;
      if ((unint64_t)v272 >= v273)
      {
        uint64_t v98 = v272 - v271;
        unint64_t v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v100 = v273 - (void)v271;
        if ((uint64_t)(v273 - (void)v271) >> 2 > v99) {
          unint64_t v99 = v100 >> 2;
        }
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v101 = v99;
        }
        v285 = &v274;
        if (v101)
        {
          uint64_t v102 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v274 + 16))(v274, 8 * v101, 8);
          unsigned int v103 = (void **)(v102 + 8 * v98);
          uint64_t v104 = v102 + 8 * v101;
          if (v102) {
            *unsigned int v103 = v95;
          }
        }
        else
        {
          uint64_t v104 = 0;
          unsigned int v103 = (void **)(8 * v98);
        }
        uint64_t v97 = v103 + 1;
        unsigned int v106 = v271;
        float v105 = v272;
        if (v272 == v271)
        {
          unsigned int v108 = v272;
        }
        else
        {
          do
          {
            unsigned int v107 = *--v105;
            *--unsigned int v103 = v107;
          }
          while (v105 != v106);
          unsigned int v108 = v271;
          float v105 = v272;
        }
        unint64_t v271 = v103;
        __int16 v272 = v97;
        unint64_t v109 = v273;
        unint64_t v273 = v104;
        str.i64[1] = (uint64_t)v105;
        v284 = (void **)v109;
        *(void *)long long buf = v108;
        str.i64[0] = (uint64_t)v108;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v272) {
          void *v272 = v95;
        }
        uint64_t v97 = v96 + 1;
      }
      __int16 v272 = v97;
      if (v267 >= v269)
      {
        uint64_t v111 = (v267 - (char *)v266) >> 3;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v113 = v269 - (char *)v266;
        if ((v269 - (char *)v266) >> 2 > v112) {
          unint64_t v112 = v113 >> 2;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v114 = v112;
        }
        v285 = (grl::Allocator **)&v270;
        if (v114)
        {
          uint64_t v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v270 + 16))(v270, 8 * v114, 8);
          __int16 v116 = (void **)(v115 + 8 * v111);
          uint64_t v117 = v115 + 8 * v114;
          if (v115) {
            *__int16 v116 = a5;
          }
        }
        else
        {
          uint64_t v117 = 0;
          __int16 v116 = (void **)(8 * v111);
        }
        unsigned int v110 = (char *)(v116 + 1);
        __int16 v118 = (void **)v267;
        if (v267 == (char *)v266)
        {
          unsigned int v120 = (void **)v267;
        }
        else
        {
          do
          {
            unsigned int v119 = *--v118;
            *--__int16 v116 = v119;
          }
          while (v118 != v266);
          unsigned int v120 = v266;
          __int16 v118 = (void **)v267;
        }
        uint64_t v266 = v116;
        __int16 v121 = v269;
        uint64_t v269 = (char *)v117;
        str.i64[1] = (uint64_t)v118;
        v284 = (void **)v121;
        *(void *)long long buf = v120;
        str.i64[0] = (uint64_t)v120;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v267) {
          *(void *)v267 = a5;
        }
        unsigned int v110 = v267 + 8;
      }
      v267 = v110;
    }
    __int16 v122 = (void **)MEMORY[0x1E4F247B8];
    unsigned int v123 = (void **)MEMORY[0x1E4F247C0];
    if (a6)
    {
      __int16 v124 = (void *)*MEMORY[0x1E4F247B8];
      unsigned int v125 = keys[1];
      if (keys[1] >= v280)
      {
        int64_t v127 = keys[1] - keys[0];
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v129 = (char *)v280 - (char *)keys[0];
        if (((char *)v280 - (char *)keys[0]) >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v130 = v128;
        }
        v285 = &v281;
        if (v130)
        {
          uint64_t v131 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v281 + 16))(v281, 8 * v130, 8);
          uint64_t v132 = (void **)(v131 + 8 * v127);
          unsigned int v133 = (void **)(v131 + 8 * v130);
          if (v131) {
            _DWORD *v132 = v124;
          }
        }
        else
        {
          unsigned int v133 = 0;
          uint64_t v132 = (void **)(8 * v127);
        }
        __int16 v126 = v132 + 1;
        uint64_t v135 = keys[0];
        unsigned int v134 = keys[1];
        if (keys[1] == keys[0])
        {
          uint64_t v137 = keys[1];
        }
        else
        {
          do
          {
            uint64_t v136 = *--v134;
            *--uint64_t v132 = v136;
          }
          while (v134 != v135);
          uint64_t v137 = keys[0];
          unsigned int v134 = keys[1];
        }
        keys[0] = v132;
        keys[1] = v126;
        int64_t v138 = v280;
        uint64_t v280 = v133;
        str.i64[1] = (uint64_t)v134;
        v284 = v138;
        *(void *)long long buf = v137;
        str.i64[0] = (uint64_t)v137;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (keys[1]) {
          *keys[1] = v124;
        }
        __int16 v126 = v125 + 1;
      }
      keys[1] = v126;
      int64_t v139 = v276;
      if ((unint64_t)v276 >= v277)
      {
        uint64_t v141 = v276 - values;
        unint64_t v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v143 = v277 - (void)values;
        if ((uint64_t)(v277 - (void)values) >> 2 > v142) {
          unint64_t v142 = v143 >> 2;
        }
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v144 = v142;
        }
        v285 = &v278;
        if (v144)
        {
          uint64_t v145 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v278 + 16))(v278, 8 * v144, 8);
          uint64_t v146 = (void **)(v145 + 8 * v141);
          uint64_t v147 = v145 + 8 * v144;
          if (v145) {
            *uint64_t v146 = a6;
          }
        }
        else
        {
          uint64_t v147 = 0;
          uint64_t v146 = (void **)(8 * v141);
        }
        BOOL v140 = v146 + 1;
        uint64_t v149 = values;
        unint64_t v148 = v276;
        if (v276 == values)
        {
          uint64_t v151 = v276;
        }
        else
        {
          do
          {
            uint64_t v150 = *--v148;
            *--uint64_t v146 = v150;
          }
          while (v148 != v149);
          uint64_t v151 = values;
          unint64_t v148 = v276;
        }
        values = v146;
        uint64_t v276 = v140;
        unint64_t v152 = v277;
        unint64_t v277 = v147;
        str.i64[1] = (uint64_t)v148;
        v284 = (void **)v152;
        *(void *)long long buf = v151;
        str.i64[0] = (uint64_t)v151;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v276) {
          *uint64_t v276 = a6;
        }
        BOOL v140 = v139 + 1;
      }
      uint64_t v276 = v140;
      *(float *)&long long valuePtr = (float)(a9 / a11) / 0.01;
      CFNumberRef v153 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      *(void *)long long buf = &unk_1EF5591B8;
      str.i64[0] = (uint64_t)v153;
      CFNumberRef cf = v153;
      int v154 = *v123;
      unsigned int v155 = keys[1];
      if (keys[1] >= v280)
      {
        int64_t v157 = keys[1] - keys[0];
        unint64_t v158 = v157 + 1;
        if ((unint64_t)(v157 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v159 = (char *)v280 - (char *)keys[0];
        if (((char *)v280 - (char *)keys[0]) >> 2 > v158) {
          unint64_t v158 = v159 >> 2;
        }
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v160 = v158;
        }
        v285 = &v281;
        if (v160)
        {
          uint64_t v161 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v281 + 16))(v281, 8 * v160, 8);
          uint64_t v162 = (void **)(v161 + 8 * v157);
          uint64_t v163 = (void **)(v161 + 8 * v160);
          if (v161) {
            *uint64_t v162 = v154;
          }
        }
        else
        {
          uint64_t v163 = 0;
          uint64_t v162 = (void **)(8 * v157);
        }
        uint64_t v156 = v162 + 1;
        unsigned int v165 = keys[0];
        __int16 v164 = keys[1];
        if (keys[1] == keys[0])
        {
          v167 = keys[1];
        }
        else
        {
          do
          {
            unsigned int v166 = *--v164;
            *--uint64_t v162 = v166;
          }
          while (v164 != v165);
          v167 = keys[0];
          __int16 v164 = keys[1];
        }
        keys[0] = v162;
        keys[1] = v156;
        unsigned int v168 = v280;
        uint64_t v280 = v163;
        str.i64[1] = (uint64_t)v164;
        v284 = v168;
        *(void *)long long buf = v167;
        str.i64[0] = (uint64_t)v167;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (keys[1]) {
          *keys[1] = v154;
        }
        uint64_t v156 = v155 + 1;
      }
      keys[1] = v156;
      unsigned int v169 = v276;
      if ((unint64_t)v276 >= v277)
      {
        uint64_t v171 = v276 - values;
        unint64_t v172 = v171 + 1;
        if ((unint64_t)(v171 + 1) >> 61) {
          goto LABEL_388;
        }
        uint64_t v173 = v277 - (void)values;
        if ((uint64_t)(v277 - (void)values) >> 2 > v172) {
          unint64_t v172 = v173 >> 2;
        }
        if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v174 = v172;
        }
        v285 = &v278;
        if (v174)
        {
          uint64_t v175 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v278 + 16))(v278, 8 * v174, 8);
          uint64_t v176 = (void **)(v175 + 8 * v171);
          uint64_t v177 = v175 + 8 * v174;
          if (v175) {
            std::__shared_weak_count *v176 = cf;
          }
        }
        else
        {
          uint64_t v177 = 0;
          uint64_t v176 = (void **)(8 * v171);
        }
        uint64_t v170 = v176 + 1;
        unint64_t v179 = values;
        uint64_t v178 = v276;
        if (v276 == values)
        {
          unsigned __int16 v181 = v276;
        }
        else
        {
          do
          {
            size_t v180 = *--v178;
            *--uint64_t v176 = v180;
          }
          while (v178 != v179);
          unsigned __int16 v181 = values;
          uint64_t v178 = v276;
        }
        values = v176;
        uint64_t v276 = v170;
        unint64_t v182 = v277;
        unint64_t v277 = v177;
        str.i64[1] = (uint64_t)v178;
        v284 = (void **)v182;
        *(void *)long long buf = v181;
        str.i64[0] = (uint64_t)v181;
        std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        if (v276) {
          *uint64_t v276 = cf;
        }
        uint64_t v170 = v169 + 1;
      }
      uint64_t v276 = v170;
    }
    if (!a7)
    {
LABEL_294:
      uint64_t v238 = keys[0];
      v237 = keys[1];
      if ((unint64_t)(v272 - v271) >= 0x7FFFFFFFFFFFFFFFLL) {
        CFIndex v239 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        CFIndex v239 = v272 - v271;
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v240 = (const char *)a1;
      }
      else {
        uint64_t v240 = *(const char **)a1;
      }
      CFStringRef v241 = CFStringCreateWithCString(0, v240, 0x8000100u);
      *(void *)long long buf = &unk_1EF5591D8;
      str.i64[0] = (uint64_t)v241;
      if (v241)
      {
        if ((unint64_t)(v237 - v238) >= 0x7FFFFFFFFFFFFFFFLL) {
          CFIndex v242 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          CFIndex v242 = v237 - v238;
        }
        CFDictionaryRef v243 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)values, v242, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)&long long valuePtr = &unk_1EF5591F8;
        *((void *)&valuePtr + 1) = v243;
        if (v243)
        {
          CFDictionaryRef v244 = CFDictionaryCreate(0, (const void **)v271, (const void **)v266, v239, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)&long long v291 = &unk_1EF5591F8;
          *((void *)&v291 + 1) = v244;
          if (v244)
          {
            CFAttributedStringRef v245 = CFAttributedStringCreate(0, (CFStringRef)str.i64[0], *((CFDictionaryRef *)&valuePtr + 1));
            *(void *)&long long v290 = &unk_1EF559298;
            *((void *)&v290 + 1) = v245;
            if (v245)
            {
              CFMutableAttributedStringRef MutableCopy = CFAttributedStringCreateMutableCopy(0, 0, v245);
              *(void *)&long long v289 = &unk_1EF559098;
              *((void *)&v289 + 1) = MutableCopy;
              if (MutableCopy)
              {
                if (CFStringGetLength((CFStringRef)str.i64[0]) >= 1)
                {
                  CFIndex v247 = 0;
                  uint64_t v248 = MEMORY[0x1E4F14390];
                  do
                  {
                    unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex((CFStringRef)str.i64[0], v247);
                    if (CharacterAtIndex > 0xFF || (*(_DWORD *)(v248 + 4 * CharacterAtIndex + 60) & 0x400) == 0)
                    {
                      v294.location = v247;
                      v294.length = 1;
                      CFAttributedStringSetAttributes(*((CFMutableAttributedStringRef *)&v289 + 1), v294, *((CFDictionaryRef *)&v291 + 1), 0);
                    }
                    ++v247;
                  }
                  while (v247 < CFStringGetLength((CFStringRef)str.i64[0]));
                }
                CTLineRef v250 = CTLineCreateWithAttributedString(*((CFAttributedStringRef *)&v289 + 1));
                *(void *)&long long v288 = &unk_1EF559338;
                *((void *)&v288 + 1) = v250;
                if (v250)
                {
                  *a8 = &unk_1EF559338;
                  a8[1] = v250;
                }
                else
                {
                  if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
                    dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
                  }
                  v261 = GEOGetGeoResourceLibCoreFoundationLog::log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                  {
                    if (*((char *)a1 + 23) >= 0) {
                      uint64_t v262 = (const char *)a1;
                    }
                    else {
                      uint64_t v262 = *(const char **)a1;
                    }
                    *(_DWORD *)v286 = 136315138;
                    v287 = v262;
                    _os_log_impl(&dword_1A1780000, v261, OS_LOG_TYPE_ERROR, "Failed to create a CFMutableAttributedString for a CTLine for string \"%s\"", v286, 0xCu);
                  }
                  *a8 = &unk_1EF559338;
                  a8[1] = 0;
                  *(void *)&long long v288 = &unk_1EF559338;
                  if (*((void *)&v288 + 1)) {
                    CFRelease(*((CFTypeRef *)&v288 + 1));
                  }
                }
              }
              else
              {
                if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
                  dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
                }
                v259 = GEOGetGeoResourceLibCoreFoundationLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                {
                  if (*((char *)a1 + 23) >= 0) {
                    unint64_t v260 = (const char *)a1;
                  }
                  else {
                    unint64_t v260 = *(const char **)a1;
                  }
                  LODWORD(v288) = 136315138;
                  *(void *)((char *)&v288 + 4) = v260;
                  _os_log_impl(&dword_1A1780000, v259, OS_LOG_TYPE_ERROR, "Failed to create a CFMutableAttributedString for a CTLine for string \"%s\"", (uint8_t *)&v288, 0xCu);
                }
                *a8 = &unk_1EF559338;
                a8[1] = 0;
              }
              *(void *)&long long v289 = &unk_1EF559098;
              if (*((void *)&v289 + 1)) {
                CFRelease(*((CFTypeRef *)&v289 + 1));
              }
            }
            else
            {
              if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
                dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
              }
              uint64_t v257 = GEOGetGeoResourceLibCoreFoundationLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
              {
                if (*((char *)a1 + 23) >= 0) {
                  char v258 = (const char *)a1;
                }
                else {
                  char v258 = *(const char **)a1;
                }
                LODWORD(v289) = 136315138;
                *(void *)((char *)&v289 + 4) = v258;
                _os_log_impl(&dword_1A1780000, v257, OS_LOG_TYPE_ERROR, "Failed to create a CFAttributedString for a CTLine for string \"%s\"", (uint8_t *)&v289, 0xCu);
              }
              *a8 = &unk_1EF559338;
              a8[1] = 0;
            }
            *(void *)&long long v290 = &unk_1EF559298;
            if (*((void *)&v290 + 1)) {
              CFRelease(*((CFTypeRef *)&v290 + 1));
            }
          }
          else
          {
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
            }
            uint64_t v255 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              if (*((char *)a1 + 23) >= 0) {
                v256 = (const char *)a1;
              }
              else {
                v256 = *(const char **)a1;
              }
              LODWORD(v290) = 136315138;
              *(void *)((char *)&v290 + 4) = v256;
              _os_log_impl(&dword_1A1780000, v255, OS_LOG_TYPE_ERROR, "Failed to create a CFDictionary for a CTLine for string \"%s\"", (uint8_t *)&v290, 0xCu);
            }
            *a8 = &unk_1EF559338;
            a8[1] = 0;
          }
          *(void *)&long long v291 = &unk_1EF5591F8;
          if (*((void *)&v291 + 1)) {
            CFRelease(*((CFTypeRef *)&v291 + 1));
          }
        }
        else
        {
          if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
          }
          int64x2_t v253 = GEOGetGeoResourceLibCoreFoundationLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a1 + 23) >= 0) {
              v254 = (const char *)a1;
            }
            else {
              v254 = *(const char **)a1;
            }
            LODWORD(v291) = 136315138;
            *(void *)((char *)&v291 + 4) = v254;
            _os_log_impl(&dword_1A1780000, v253, OS_LOG_TYPE_ERROR, "Failed to create a CFDictionary to create a CTLine for string \"%s\"", (uint8_t *)&v291, 0xCu);
          }
          *a8 = &unk_1EF559338;
          a8[1] = 0;
        }
        *(void *)&long long valuePtr = &unk_1EF5591F8;
        if (*((void *)&valuePtr + 1)) {
          CFRelease(*((CFTypeRef *)&valuePtr + 1));
        }
      }
      else
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        int v251 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 23) >= 0) {
            int64x2_t v252 = (const char *)a1;
          }
          else {
            int64x2_t v252 = *(const char **)a1;
          }
          LODWORD(valuePtr) = 136315138;
          *(void *)((char *)&valuePtr + 4) = v252;
          _os_log_impl(&dword_1A1780000, v251, OS_LOG_TYPE_ERROR, "Failed to create CFString from %s.", (uint8_t *)&valuePtr, 0xCu);
        }
        *a8 = &unk_1EF559338;
        a8[1] = 0;
      }
      *(void *)long long buf = &unk_1EF5591D8;
      if (str.i64[0]) {
        CFRelease((CFTypeRef)str.i64[0]);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v265) {
        CFRelease(v265);
      }
      if (v266) {
        (*(void (**)(uint64_t, void **, int64_t))(*(void *)v270 + 40))(v270, v266, v269 - (char *)v266);
      }
      if (v271)
      {
        __int16 v272 = v271;
        (*(void (**)(grl::Allocator *, void **, unint64_t))(*(void *)v274 + 40))(v274, v271, v273 - (void)v271);
      }
      if (values)
      {
        uint64_t v276 = values;
        (*(void (**)(grl::Allocator *, void **, unint64_t))(*(void *)v278 + 40))(v278, values, v277 - (void)values);
      }
      if (keys[0])
      {
        keys[1] = keys[0];
        (*(void (**)(grl::Allocator *, void **, int64_t))(*(void *)v281 + 40))(v281, keys[0], (char *)v280 - (char *)keys[0]);
      }
      return;
    }
    unsigned __int16 v183 = *v122;
    char v184 = v272;
    if ((unint64_t)v272 >= v273)
    {
      uint64_t v186 = v272 - v271;
      unint64_t v187 = v186 + 1;
      if ((unint64_t)(v186 + 1) >> 61) {
        goto LABEL_388;
      }
      uint64_t v188 = v273 - (void)v271;
      if ((uint64_t)(v273 - (void)v271) >> 2 > v187) {
        unint64_t v187 = v188 >> 2;
      }
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v189 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v189 = v187;
      }
      v285 = &v274;
      if (v189)
      {
        uint64_t v190 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v274 + 16))(v274, 8 * v189, 8);
        uint64_t v191 = (void **)(v190 + 8 * v186);
        uint64_t v192 = v190 + 8 * v189;
        if (v190) {
          *uint64_t v191 = v183;
        }
      }
      else
      {
        uint64_t v192 = 0;
        uint64_t v191 = (void **)(8 * v186);
      }
      char v185 = v191 + 1;
      uint64_t v194 = v271;
      uint64_t v193 = v272;
      if (v272 == v271)
      {
        uint64_t v196 = v272;
      }
      else
      {
        do
        {
          uint64_t v195 = *--v193;
          *--uint64_t v191 = v195;
        }
        while (v193 != v194);
        uint64_t v196 = v271;
        uint64_t v193 = v272;
      }
      unint64_t v271 = v191;
      __int16 v272 = v185;
      unint64_t v197 = v273;
      unint64_t v273 = v192;
      str.i64[1] = (uint64_t)v193;
      v284 = (void **)v197;
      *(void *)long long buf = v196;
      str.i64[0] = (uint64_t)v196;
      std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      if (v272) {
        void *v272 = v183;
      }
      char v185 = v184 + 1;
    }
    __int16 v272 = v185;
    if (v267 >= v269)
    {
      uint64_t v199 = (v267 - (char *)v266) >> 3;
      unint64_t v200 = v199 + 1;
      if ((unint64_t)(v199 + 1) >> 61) {
        goto LABEL_388;
      }
      uint64_t v201 = v269 - (char *)v266;
      if ((v269 - (char *)v266) >> 2 > v200) {
        unint64_t v200 = v201 >> 2;
      }
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v202 = v200;
      }
      v285 = (grl::Allocator **)&v270;
      if (v202)
      {
        uint64_t v203 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v270 + 16))(v270, 8 * v202, 8);
        uint64_t v204 = (void **)(v203 + 8 * v199);
        uint64_t v205 = v203 + 8 * v202;
        if (v203) {
          *uint64_t v204 = a7;
        }
      }
      else
      {
        uint64_t v205 = 0;
        uint64_t v204 = (void **)(8 * v199);
      }
      v198 = v204 + 1;
      uint64_t v206 = (void **)v267;
      if (v267 == (char *)v266)
      {
        uint64_t v208 = (void **)v267;
      }
      else
      {
        do
        {
          uint64_t v207 = *--v206;
          *--uint64_t v204 = v207;
        }
        while (v206 != v266);
        uint64_t v208 = v266;
        uint64_t v206 = (void **)v267;
      }
      uint64_t v266 = v204;
      uint64_t v209 = v269;
      uint64_t v269 = (char *)v205;
      str.i64[1] = (uint64_t)v206;
      v284 = (void **)v209;
      *(void *)long long buf = v208;
      str.i64[0] = (uint64_t)v208;
      std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      if (v267) {
        *(void *)v267 = a7;
      }
      v198 = (void **)(v267 + 8);
    }
    v268 = v198;
    *(float *)&long long valuePtr = (float)(a10 / a12) / 0.01;
    CFNumberRef v210 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    *(void *)long long buf = &unk_1EF5591B8;
    str.i64[0] = (uint64_t)v210;
    CFNumberRef v265 = v210;
    uint64_t v211 = *v123;
    uint64_t v212 = v272;
    if ((unint64_t)v272 >= v273)
    {
      uint64_t v214 = v272 - v271;
      unint64_t v215 = v214 + 1;
      if ((unint64_t)(v214 + 1) >> 61) {
        goto LABEL_388;
      }
      uint64_t v216 = v273 - (void)v271;
      if ((uint64_t)(v273 - (void)v271) >> 2 > v215) {
        unint64_t v215 = v216 >> 2;
      }
      if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v217 = v215;
      }
      v285 = &v274;
      if (v217)
      {
        uint64_t v218 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(void *)v274 + 16))(v274, 8 * v217, 8);
        uint64_t v219 = (void **)(v218 + 8 * v214);
        uint64_t v220 = v218 + 8 * v217;
        if (v218) {
          *uint64_t v219 = v211;
        }
      }
      else
      {
        uint64_t v220 = 0;
        uint64_t v219 = (void **)(8 * v214);
      }
      uint64_t v213 = v219 + 1;
      v222 = v271;
      size_t v221 = v272;
      if (v272 == v271)
      {
        v224 = v272;
      }
      else
      {
        do
        {
          v223 = *--v221;
          *--uint64_t v219 = v223;
        }
        while (v221 != v222);
        v224 = v271;
        size_t v221 = v272;
      }
      unint64_t v271 = v219;
      __int16 v272 = v213;
      unint64_t v225 = v273;
      unint64_t v273 = v220;
      str.i64[1] = (uint64_t)v221;
      v284 = (void **)v225;
      *(void *)long long buf = v224;
      str.i64[0] = (uint64_t)v224;
      std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      if (v272) {
        void *v272 = v211;
      }
      uint64_t v213 = v212 + 1;
    }
    __int16 v272 = v213;
    if (v268 < (void **)v269)
    {
      if (v268) {
        void *v268 = v265;
      }
      goto LABEL_294;
    }
    uint64_t v226 = v268 - v266;
    unint64_t v227 = v226 + 1;
    if (!((unint64_t)(v226 + 1) >> 61))
    {
      uint64_t v228 = v269 - (char *)v266;
      if ((v269 - (char *)v266) >> 2 > v227) {
        unint64_t v227 = v228 >> 2;
      }
      if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v229 = v227;
      }
      v285 = (grl::Allocator **)&v270;
      if (v229)
      {
        uint64_t v230 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v270 + 16))(v270, 8 * v229, 8);
        v231 = (void **)(v230 + 8 * v226);
        uint64_t v232 = v230 + 8 * v229;
        if (v230) {
          char *v231 = v265;
        }
      }
      else
      {
        uint64_t v232 = 0;
        v231 = (void **)(8 * v226);
      }
      uint64_t v233 = v268;
      if (v268 == v266)
      {
        uint64_t v235 = v268;
      }
      else
      {
        do
        {
          uint64_t v234 = *--v233;
          *--v231 = v234;
        }
        while (v233 != v266);
        uint64_t v235 = v266;
        uint64_t v233 = v268;
      }
      uint64_t v266 = v231;
      uint64_t v236 = v269;
      uint64_t v269 = (char *)v232;
      str.i64[1] = (uint64_t)v233;
      v284 = (void **)v236;
      *(void *)long long buf = v235;
      str.i64[0] = (uint64_t)v235;
      std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer((uint64_t)buf);
      goto LABEL_294;
    }
LABEL_388:
    abort();
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
  }
  std::string v32 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A1780000, v32, OS_LOG_TYPE_ERROR, "Input text must be non-empty to create a CTLine.", buf, 2u);
  }
  *a8 = &unk_1EF559338;
  a8[1] = 0;
}

uint64_t std::__split_buffer<void const*,geo::StdAllocator<void const*,grl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,float>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  size_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        size_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        size_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v11 + 28) = **a4;
    *(_DWORD *)(v11 + 32) = 0;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,gm::Box<float,2>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,gm::Box<float,2>>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,gm::Box<float,2>>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  size_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        size_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        size_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 48, 8);
    *(_WORD *)(v11 + 28) = **a4;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

float grl::getOpticalBounds(grl *this, const __CTLine *a2)
{
  if (this)
  {
    CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(this, 0x10uLL);
    CGFloat x = BoundsWithOptions.origin.x;
    CGFloat y = BoundsWithOptions.origin.y;
    CGFloat width = BoundsWithOptions.size.width;
    CGFloat height = BoundsWithOptions.size.height;
    float MinX = CGRectGetMinX(BoundsWithOptions);
    v11.origin.CGFloat x = x;
    v11.origin.CGFloat y = y;
    v11.size.CGFloat width = width;
    v11.size.CGFloat height = height;
    CGRectGetMinY(v11);
    v12.origin.CGFloat x = x;
    v12.origin.CGFloat y = y;
    v12.size.CGFloat width = width;
    v12.size.CGFloat height = height;
    CGRectGetMaxX(v12);
    v13.origin.CGFloat x = x;
    v13.origin.CGFloat y = y;
    v13.size.CGFloat width = width;
    v13.size.CGFloat height = height;
    CGRectGetMaxY(v13);
  }
  else
  {
    if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_37_0);
    }
    size_t v7 = GEOGetGeoResourceLibCoreGraphicsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)size_t v9 = 0;
      _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_ERROR, "Input CTLine must be a valid pointer to get font bounds.", v9, 2u);
    }
    return 0.0;
  }
  return MinX;
}

float grl::getTextDescent(grl *this, const __CTLine *a2)
{
  if (this)
  {
    CGFloat descent = 0.0;
    ascent[0] = 0.0;
    uint64_t v6 = 0;
    CTLineGetTypographicBounds(this, ascent, &descent, (CGFloat *)&v6);
    float v2 = descent;
    return fabsf(v2);
  }
  else
  {
    if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_37_0);
    }
    int v4 = GEOGetGeoResourceLibCoreGraphicsLog::log;
    float v3 = 0.0;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(ascent[0]) = 0;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_ERROR, "Input CTLine must be a valid pointer to get text descent.", (uint8_t *)ascent, 2u);
    }
  }
  return v3;
}

uint64_t geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::operator=(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v4 = *(const void **)(a1 + 8);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 8) = cf;
  return a1;
}

void md::StandardLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a1;
  uint64_t v281 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 296)) {
    goto LABEL_79;
  }
  size_t v5 = (atomic_uchar *)(a1 + 296);
  uint64_t v6 = *(void **)(a1 + 280);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)(v4 + 32);
    size_t v9 = [v7 feature];
    unsigned int v10 = [v9 dataSource];
    md::LabelCustomFeatureSupport::featureForAnnotation(&v263, v8, v10, v7);
    std::__shared_count v11 = v263;
    std::__shared_count v263 = (std::__shared_count)0;
    CGRect v12 = *(std::__shared_weak_count **)(v4 + 320);
    *(std::__shared_count *)(v4 + 312) = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    shared_owners = (std::__shared_weak_count *)v263.__shared_owners_;
    if (v263.__shared_owners_
      && !atomic_fetch_add((atomic_ullong *volatile)(v263.__shared_owners_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  uint64_t v15 = v4 + 312;
  float64x2_t v14 = *(_DWORD **)(v4 + 312);
  if (!v14) {
    goto LABEL_71;
  }
  if (!v14[32])
  {
    if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 264))(v14) == 7)
    {
      CGColorSpaceRef v16 = *(id **)(v4 + 312);
      uint64_t v17 = *(std::__shared_weak_count **)(v4 + 320);
      v263.__vftable = (std::__shared_count_vtbl *)v16;
      v263.__shared_owners_ = (uint64_t)v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficIncidentLabelFeature::updateStyle(v16, *(md::LabelManager **)(v4 + 24));
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      goto LABEL_38;
    }
    CTFontRef v18 = *(void (__cdecl **)(std::__shared_count *__hidden))(v4 + 312);
    uint64_t v19 = *(std::__shared_weak_count **)(v4 + 320);
    *(void *)&long long v277 = v18;
    *((void *)&v277 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__shared_count v263 = (std::__shared_count)0;
    *(void *)&long long v264 = 0;
    {
      operator new();
    }
    *((void *)&v264 + 1) = mdm::Allocator::instance(void)::alloc;
    std::string::size_type v20 = (std::__shared_count_vtbl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 16, 8);
    v263.__vftable = v20;
    *(void *)&long long v264 = &v20->__on_zero_shared;
    if (v20)
    {
      v20->~__shared_count = v18;
      v20->~__shared_count_0 = (void (__cdecl *)(std::__shared_count *__hidden))v19;
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        v263.__shared_owners_ = (uint64_t)&v20->__on_zero_shared;
        goto LABEL_25;
      }
      v263.__shared_owners_ = (uint64_t)&v20->__on_zero_shared;
    }
    else
    {
      v263.__shared_owners_ = 16;
      if (v19)
      {
LABEL_25:
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(void *)(v4 + 24) + 296), (uint64_t **)&v263);
    float v21 = v263.__vftable;
    if (v263.__vftable)
    {
      uint64_t v22 = v263.__shared_owners_;
      uint64_t v23 = v263.__vftable;
      if ((std::__shared_count_vtbl *)v263.__shared_owners_ != v263.__vftable)
      {
        do
        {
          CTFontRef v24 = *(std::__shared_weak_count **)(v22 - 8);
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, std::__shared_count_vtbl *))v24->__on_zero_shared)(v24, v23);
            std::__shared_weak_count::__release_weak(v24);
          }
          v22 -= 16;
        }
        while ((std::__shared_count_vtbl *)v22 != v21);
        uint64_t v23 = v263.__vftable;
      }
      v263.__shared_owners_ = (uint64_t)v21;
      (*(void (**)(void, std::__shared_count_vtbl *, void))(**((void **)&v264 + 1) + 40))(*((void *)&v264 + 1), v23, v264 - (void)v23);
    }
    uint64_t v4 = a1;
  }
LABEL_38:
  if (*(void *)(*(uint64_t (**)(void, void, void, void, void))(**(void **)v15 + 552))(*(void *)v15, 0, 0, 0, 0))
  {
    uint64_t v25 = *(void *)(v4 + 48);
    uint64_t v26 = *(void *)(v4 + 24);
    LODWORD(v263.__vftable) = 1;
    md::LabelPool::labelForCustomFeature(&v277, v25, v26, (void *)v5 + 2, (unsigned int *)&v263, 0);
    if ((void)v277)
    {
      uint64_t v27 = (float *)a1;
      md::LabelPool::setAdoptedLabel(*(void *)(a1 + 48), (uint64_t *)&v277);
      uint64_t v28 = *(void *)(a1 + 296);
      v263.__vftable = 0;
      LOBYTE(v263.__shared_owners_) = 0;
      long long v264 = 0u;
      long long v265 = 0u;
      uint64_t v266 = 0;
      std::string v30 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      while (1)
      {
        uint64_t v267 = *((void *)v30 + 91);
        int v268 = 0;
        uint64_t v270 = 0;
        uint64_t v271 = 0;
        uint64_t v269 = 0;
        if ((atomic_load_explicit(v29, memory_order_acquire) & 1) == 0
        {
          operator new();
        }
        uint64_t v272 = *((void *)v30 + 91);
        uint64_t v273 = 0;
        uint64_t v274 = 0;
        uint64_t v275 = 0;
        if ((atomic_load_explicit(v29, memory_order_acquire) & 1) == 0
        {
          operator new();
        }
        uint64_t v276 = *((void *)v30 + 91);
        md::Label::populateFeatureInfo((md::Label *)v277, (md::LabelFeatureInfo *)&v263, 0);
        uint64_t v31 = *((void *)v27 + 3);
        std::string v32 = *(std::__shared_weak_count **)(v31 + 16);
        v254 = *(std::__shared_weak_count **)(v31 + 8);
        if (v32)
        {
          uint64_t v255 = std::__shared_weak_count::lock(v32);
          if (v255) {
            break;
          }
        }
        std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_443:
        __break(1u);
LABEL_444:
          operator new();
      }
      atomic_fetch_add((atomic_uchar *volatile)(v277 + 1297), 1u);
      atomic_fetch_add((atomic_uchar *volatile)(*(void *)(v28 + 288) + 1297), 0xFFu);
      long long v33 = v277;
      if (*((void *)&v277 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v277 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v34 = *(std::__shared_weak_count **)(v28 + 296);
      *(_OWORD *)(v28 + 288) = v33;
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      char v35 = v255;
      if (v255) {
        atomic_fetch_add_explicit(&v255->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v36 = *(std::__shared_weak_count **)(v28 + 240);
      *(void *)(v28 + 232) = v254;
      *(void *)(v28 + 240) = v35;
      if (v36) {
        std::__shared_weak_count::__release_weak(v36);
      }
      md::StandardLabelMarker::populateFromFeature((md::StandardLabelMarker *)v28, (const md::LabelFeatureInfo *)&v263);
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      if (SHIBYTE(v275) < 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v276 + 40))(v276, v273, v275 & 0x7FFFFFFFFFFFFFFFLL);
        if ((SHIBYTE(v271) & 0x80000000) == 0)
        {
LABEL_59:
          uint64_t v37 = v265;
          if (!(void)v265) {
            goto LABEL_61;
          }
          goto LABEL_60;
        }
      }
      else if ((SHIBYTE(v271) & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v272 + 40))(v272, v269, v271 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v37 = v265;
      if (!(void)v265)
      {
LABEL_61:
        uint64_t v38 = (std::__shared_weak_count *)*((void *)&v264 + 1);
        if (*((void *)&v264 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v264 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        uint64_t v39 = (std::__shared_weak_count *)*((void *)&v277 + 1);
        if (*((void *)&v277 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v277 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        (*(void (**)(float *, atomic_uchar *))(*(void *)v27 + 176))(v27, v5);
        goto LABEL_72;
      }
LABEL_60:
      *((void *)&v265 + 1) = v37;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v267 + 40))(v267, v37, v266 - v37);
      goto LABEL_61;
    }
    uint64_t v40 = (std::__shared_weak_count *)*((void *)&v277 + 1);
    uint64_t v4 = a1;
    if (*((void *)&v277 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v277 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_71:
  md::LabelManager::releaseAdoptedSelectedLabelMarker(*(md::LabelManager **)(v4 + 24), 1);
LABEL_72:
  uint64_t v4 = a1;
  int v41 = *(std::__shared_weak_count **)(a1 + 304);
  *(void *)size_t v5 = 0;
  *((void *)v5 + 1) = 0;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 320);
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  if (!v42 || atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v43 = *(void **)(a1 + 280);
    if (!v43) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  int v43 = *(void **)(a1 + 280);
  if (v43)
  {
LABEL_78:
    *(void *)(a1 + 280) = 0;

    uint64_t v4 = a1;
  }
LABEL_79:
  uint64_t v44 = *(void *)(v4 + 48);
  int v45 = *(_DWORD *)(*(void *)(v44 + 624) + 228);
  if (v45 == *(_DWORD *)(v44 + 752))
  {
    uint64_t v46 = *(void *)(v44 + 632);
    if (!*(unsigned char *)(v46 + 88)) {
      goto LABEL_205;
    }
    int v240 = *(_DWORD *)(*(void *)(v44 + 624) + 228);
    *(unsigned char *)(v46 + 88) = 0;
    unint64_t v47 = &v277;
    uint64_t v48 = *(void *)(v46 + 72);
    *(void *)&long long v277 = *(void *)(v46 + 64);
    *((void *)&v277 + 1) = v48;
    uint64_t v49 = *(void *)(v46 + 80);
    *(void *)(v46 + 72) = 0;
    *(void *)(v46 + 80) = 0;
    *(void *)&long long v278 = v49;
    double v50 = (long long *)(v48 + 16);
    if (v49) {
      unint64_t v47 = v50;
    }
    *(void *)unint64_t v47 = (char *)&v277 + 8;
    *(void *)(v46 + 64) = v46 + 72;
    uint64_t v51 = *(id **)(v46 + 40);
    CFDictionaryRef v244 = *(id **)(v46 + 48);
    CFAttributedStringRef v245 = (uint64_t **)(v46 + 72);
    uint64_t v243 = v46;
    if (v51 != v244)
    {
      unint64_t v52 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      do
      {
        id v53 = *v51;
        uint64_t v54 = v53;
        uint64_t v55 = (void *)*((void *)&v277 + 1);
        if (*((void *)&v277 + 1))
        {
          CFTypeRef v56 = (long long *)((char *)&v277 + 8);
          do
          {
            uint64_t v57 = v55;
            CFTypeRef v58 = v56;
            unint64_t v59 = v55[4];
            CFTypeRef v60 = v55 + 1;
            if (v59 >= (unint64_t)v53)
            {
              CFTypeRef v60 = v57;
              CFTypeRef v56 = v57;
            }
            uint64_t v55 = (void *)*v60;
          }
          while (v55);
          if (v56 != (long long *)((char *)&v277 + 8))
          {
            long long v61 = v59 >= (unint64_t)v53 ? v57 : v58;
            if ((unint64_t)v53 >= v61[4])
            {
              if (v59 >= (unint64_t)v53) {
                unsigned int v75 = v57;
              }
              else {
                unsigned int v75 = v58;
              }
              uint64_t v248 = v75;
              unint64_t v76 = v245;
              while (1)
              {
                __int16 v77 = *v76;
                unint64_t v78 = v76;
                if (!*v76) {
                  break;
                }
                while (1)
                {
                  unint64_t v76 = (uint64_t **)v77;
                  unint64_t v79 = v77[4];
                  if ((unint64_t)v53 < v79) {
                    break;
                  }
                  if (v79 >= (unint64_t)v53) {
                    goto LABEL_152;
                  }
                  __int16 v77 = v76[1];
                  if (!v77)
                  {
                    unint64_t v78 = v76 + 1;
                    goto LABEL_116;
                  }
                }
              }
LABEL_116:
              unint64_t v80 = (uint64_t *)operator new(0x38uLL);
              v80[4] = (uint64_t)v54;
              v80[5] = v248[5];
              if (v59 >= (unint64_t)v54) {
                char v81 = v57;
              }
              else {
                char v81 = v58;
              }
              uint64_t v82 = v81[6];
              v80[6] = v82;
              if (v82) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
              }
              *unint64_t v80 = 0;
              v80[1] = 0;
              v80[2] = (uint64_t)v76;
              *unint64_t v78 = v80;
              uint64_t v83 = **(void **)(v46 + 64);
              if (v83)
              {
                *(void *)(v46 + 64) = v83;
                unint64_t v80 = *v78;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v46 + 72), v80);
              ++*(void *)(v46 + 80);
              goto LABEL_152;
            }
          }
        }
        unint64_t v62 = (std::__shared_weak_count *)operator new(0x130uLL);
        v62->__shared_owners_ = 0;
        v62->__shared_weak_owners_ = 0;
        v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580988;
        id v63 = v54;
        v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5313F8;
        v62[1].__shared_owners_ = 850045863;
        std::__shared_count v64 = (std::__shared_count)0;
        *(_OWORD *)&v62[1].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v62[2].__shared_owners_ = 0u;
        v62[3].std::__shared_count = 0u;
        *(_OWORD *)&v62[3].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v62[4].__shared_owners_ = 0u;
        v62[5].std::__shared_count = 0u;
        v62[5].__shared_weak_owners_ = 0;
        {
          std::__shared_count v64 = (std::__shared_count)0;
          if (v100) {
            operator new();
          }
        }
        v62[6].__vftable = (std::__shared_weak_count_vtbl *)*((void *)v52 + 91);
        v62[6].__shared_owners_ = 0x100000000;
        v62[6].__shared_weak_owners_ = 0;
        LODWORD(v62[7].__vftable) = 0;
        *((std::__shared_count *)v62 + 11) = v64;
        v62[8].std::__shared_count = v64;
        {
          operator new();
        }
        v62[8].__shared_weak_owners_ = *((void *)v52 + 91);
        v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF53A718;
        __int16 v65 = (std::__shared_weak_count_vtbl *)v63;
        v62[9].__vftable = v65;
        v62[9].__shared_owners_ = 0;
        unsigned int v66 = [(std::__shared_weak_count_vtbl *)v65 type];
        unsigned int v67 = (char *)&traits + 2 * v66;
        if (v66 >= 3) {
          unsigned int v67 = (char *)&traits;
        }
        v62[9].__shared_weak_owners_ = (uint64_t)v67;
        v62[10].std::__shared_count = 0u;
        *(_OWORD *)&v62[10].__shared_weak_owners_ = 0u;
        v62[11].__shared_owners_ = 0;
        LODWORD(v62[11].__shared_weak_owners_) = 2139095039;
        WORD2(v62[11].__shared_weak_owners_) = 256;
        BYTE6(v62[11].__shared_weak_owners_) = 1;
        v62[12].__vftable = 0;
        v62[12].__shared_owners_ = 0;
        {
          operator new();
        }
        uint64_t v68 = *((void *)v52 + 91);
        uint64_t v69 = *(unsigned __int8 *)v62[9].__shared_weak_owners_;
        unint64_t v70 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68 + 16))(v68, 8, 4);
        uint64_t v71 = v70;
        if (v70) {
          uint64_t *v70 = (v69 << 32) | 0x10079;
        }
        _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v263);
        std::__shared_count v72 = v263;
        std::__shared_count v263 = (std::__shared_count)0;
        uint64_t v73 = (std::__shared_weak_count *)v62[12].__shared_owners_;
        v62[12].std::__shared_count = v72;
        if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
          uint64_t v74 = (std::__shared_weak_count *)v263.__shared_owners_;
          if (!v263.__shared_owners_) {
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v74 = (std::__shared_weak_count *)v263.__shared_owners_;
          if (!v263.__shared_owners_) {
            goto LABEL_125;
          }
        }
        if (!atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
LABEL_125:
        unint64_t v84 = v62[12].__vftable;
        uint64_t v85 = BYTE1(v84->__on_zero_shared_weak);
        uint64_t v86 = v84->~__shared_weak_count;
        if (BYTE1(v84->__on_zero_shared_weak))
        {
          int v87 = *(_DWORD *)v71;
          if (v85 >= 0x20)
          {
            uint64_t v88 = 0;
            unsigned int v92 = v84->~__shared_weak_count;
            while (1)
            {
              int v93 = *(_DWORD *)v92;
              unsigned int v92 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v92 + 8);
              if (v93 == v87) {
                break;
              }
              if (v85 == ++v88)
              {
                if (v71) {
                  goto LABEL_137;
                }
                goto LABEL_138;
              }
            }
          }
          else
          {
            uint64_t v88 = 0;
            uint64_t v89 = v84->~__shared_weak_count;
            while (1)
            {
              int v90 = *(_DWORD *)v89;
              uint64_t v89 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v89 + 8);
              if (v90 == v87) {
                break;
              }
              if (v85 == ++v88) {
                goto LABEL_130;
              }
            }
          }
          *((_DWORD *)v86 + 2 * v88 + 1) = *((_DWORD *)v71 + 1);
        }
        else
        {
LABEL_130:
          *((void *)v86 + v85) = *v71;
          unsigned __int8 v91 = BYTE1(v84->__on_zero_shared_weak) + 1;
          BYTE1(v84->__on_zero_shared_weak) = v91;
          qsort(v84->~__shared_weak_count, v91, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        }
LABEL_137:
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v68 + 40))(v68, v71, 8);
LABEL_138:

        v254 = v62 + 1;
        uint64_t v255 = v62;
        unint64_t v94 = v245;
        unsigned int v95 = v245;
        unsigned int v96 = *v245;
        if (*v245)
        {
          while (1)
          {
            while (1)
            {
              unsigned int v95 = (uint64_t **)v96;
              unint64_t v97 = v96[4];
              if ((unint64_t)v65 >= v97) {
                break;
              }
              unsigned int v96 = *v95;
              unint64_t v94 = v95;
              if (!*v95) {
                goto LABEL_145;
              }
            }
            if (v97 >= (unint64_t)v65) {
              break;
            }
            unsigned int v96 = v95[1];
            if (!v96)
            {
              unint64_t v94 = v95 + 1;
              goto LABEL_145;
            }
          }
          uint64_t v46 = v243;
        }
        else
        {
LABEL_145:
          uint64_t v98 = (uint64_t *)operator new(0x38uLL);
          v98[4] = (uint64_t)v65;
          v98[5] = (uint64_t)&v62[1];
          v98[6] = (uint64_t)v62;
          v254 = 0;
          uint64_t v255 = 0;
          *uint64_t v98 = 0;
          v98[1] = 0;
          v98[2] = (uint64_t)v95;
          *unint64_t v94 = v98;
          uint64_t v46 = v243;
          uint64_t v99 = **(void **)(v243 + 64);
          if (v99)
          {
            *(void *)(v243 + 64) = v99;
            uint64_t v98 = *v94;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v243 + 72), v98);
          ++*(void *)(v243 + 80);
          unint64_t v62 = v255;
          if (!v255) {
            goto LABEL_152;
          }
        }
        if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
LABEL_152:

        unint64_t v52 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        ++v51;
      }
      while (v51 != v244);
    }
    uint64_t v101 = v46;
    uint64_t v102 = *(void *)(v46 + 8);
    uint64_t v104 = *(void *)(v101 + 16);
    for (uint64_t i = v101 + 8; v104 != v102; v104 -= 16)
    {
      float v105 = *(std::__shared_weak_count **)(v104 - 8);
      if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    *(void *)(v243 + 16) = v102;
    std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve(i, *(void *)(v243 + 80));
    std::__shared_count v263 = (std::__shared_count)0;
    *(void *)&long long v264 = 0;
    {
      operator new();
    }
    *((void *)&v264 + 1) = mdm::Allocator::instance(void)::alloc;
    unsigned int v106 = *(uint64_t ***)(v243 + 64);
    if (v106 != v245)
    {
      do
      {
        unsigned int v107 = v106 + 5;
        unsigned int v108 = *(void **)(v243 + 16);
        if ((unint64_t)v108 >= *(void *)(v243 + 24))
        {
          unsigned int v110 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(i, (long long *)(v106 + 5));
        }
        else
        {
          if (v108)
          {
            *unsigned int v108 = v106[5];
            unint64_t v109 = v106[6];
            v108[1] = v109;
            if (v109) {
              atomic_fetch_add_explicit(v109 + 1, 1uLL, memory_order_relaxed);
            }
          }
          unsigned int v110 = v108 + 2;
        }
        *(void *)(v243 + 16) = v110;
        if (*(_DWORD *)(*v107 + 128))
        {
          uint64_t v111 = v106[1];
          if (v111) {
            goto LABEL_186;
          }
        }
        else
        {
          uint64_t v112 = v263.__shared_owners_;
          if (v263.__shared_owners_ >= (unint64_t)v264)
          {
            uint64_t v114 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v263, (long long *)(v106 + 5));
          }
          else
          {
            if (v263.__shared_owners_)
            {
              *(void *)v263.__shared_owners_ = *v107;
              uint64_t v113 = v106[6];
              *(void *)(v112 + 8) = v113;
              if (v113) {
                atomic_fetch_add_explicit(v113 + 1, 1uLL, memory_order_relaxed);
              }
            }
            uint64_t v114 = (_OWORD *)(v112 + 16);
          }
          v263.__shared_owners_ = (uint64_t)v114;
          uint64_t v111 = v106[1];
          if (v111)
          {
            do
            {
LABEL_186:
              uint64_t v115 = (uint64_t **)v111;
              uint64_t v111 = (uint64_t *)*v111;
            }
            while (v111);
            goto LABEL_169;
          }
        }
        do
        {
          uint64_t v115 = (uint64_t **)v106[2];
          BOOL v116 = *v115 == (uint64_t *)v106;
          unsigned int v106 = v115;
        }
        while (!v116);
LABEL_169:
        unsigned int v106 = v115;
      }
      while (v115 != v245);
    }
    uint64_t v117 = v263.__shared_owners_;
    __int16 v118 = v263.__vftable;
    if (v263.__vftable == (std::__shared_count_vtbl *)v263.__shared_owners_)
    {
      unsigned int v120 = v263.__vftable;
      if (v263.__vftable)
      {
LABEL_202:
        v263.__shared_owners_ = (uint64_t)v118;
        (*(void (**)(void, std::__shared_count_vtbl *, void))(**((void **)&v264 + 1) + 40))(*((void *)&v264 + 1), v120, v264 - (void)v120);
      }
    }
    else
    {
      md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(void *)v243 + 296), (uint64_t **)&v263);
      if (v118)
      {
        do
        {
          unsigned int v119 = *(std::__shared_weak_count **)(v117 - 8);
          if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
          v117 -= 16;
        }
        while ((std::__shared_count_vtbl *)v117 != v118);
        unsigned int v120 = v263.__vftable;
        goto LABEL_202;
      }
    }
    std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*((void **)&v277 + 1));
    int v45 = v240;
  }
  *(unsigned char *)(v44 + 760) = 0;
  *(_DWORD *)(v44 + 752) = v45;
LABEL_205:
  if (!a4) {
    goto LABEL_303;
  }
  __int16 v121 = *(unint64_t **)(v44 + 16);
  __int16 v122 = *(unint64_t **)(v44 + 24);
  unsigned int v123 = (char **)(v44 + 16);
  if (v121 == v122) {
    goto LABEL_213;
  }
  unint64_t v124 = (char *)v122 - (char *)v121 - 16;
  unsigned int v125 = *(unint64_t **)(v44 + 16);
  if (v124 > 0xF)
  {
    uint64_t v126 = (v124 >> 4) + 1;
    int64_t v127 = (uint64_t *)(v121 + 2);
    uint64_t v128 = v126 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v129 = *(v127 - 2);
      uint64_t v130 = *v127;
      v127 += 4;
      *(unsigned char *)(v129 + 121) = 0;
      *(unsigned char *)(v130 + 121) = 0;
      v128 -= 2;
    }
    while (v128);
    if (v126 == (v126 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_213;
    }
    unsigned int v125 = &v121[2 * (v126 & 0x1FFFFFFFFFFFFFFELL)];
  }
  do
  {
    unint64_t v131 = *v125;
    v125 += 2;
    *(unsigned char *)(v131 + 121) = 0;
  }
  while (v125 != v122);
LABEL_213:
  uint64_t v132 = *(void **)(a3 + 24);
  if (!v132) {
    goto LABEL_234;
  }
  unsigned int v133 = *(void **)(a3 + 24);
  do
  {
    *(unsigned char *)(v133[2] + 121) = 1;
    unsigned int v133 = (void *)*v133;
  }
  while (v133);
  do
  {
    unint64_t v134 = v132[2];
    if (!*(unsigned char *)(v134 + 130) || *(unsigned char *)(v134 + 129))
    {
      if (*(unsigned char *)(v134 + 120)) {
        goto LABEL_219;
      }
LABEL_223:
      *(unsigned char *)(v134 + 120) = 1;
      *(unsigned char *)(v134 + 122) = 1;
      *(unsigned char *)(v134 + 131) = 1;
      uint64_t v135 = *(std::mutex **)(v134 + 136);
      if (v135)
      {
        std::mutex::lock(*(std::mutex **)(v134 + 136));
        sig = (void (***)(void, unint64_t))v135[1].__m_.__sig;
        if (sig) {
          (**sig)(sig, v134);
        }
        std::mutex::unlock(v135);
        unint64_t v134 = v132[2];
      }
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__erase_unique<std::shared_ptr<md::LabelMapTile>>((void *)(v44 + 80), v134);
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__erase_unique<std::shared_ptr<md::LabelMapTile>>((void *)(v44 + 136), v132[2]);
      goto LABEL_219;
    }
    uint64_t v137 = *(void *)(v44 + 624);
    uint64_t v139 = *(void *)(v137 + 24);
    uint64_t v138 = *(void *)(v137 + 32);
    if (v138) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v138 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v140 = *(std::__shared_weak_count **)(v134 + 144);
    *(void *)(v134 + 136) = v139;
    *(void *)(v134 + 144) = v138;
    if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
    *(unsigned char *)(v134 + 129) = 1;
    unint64_t v134 = v132[2];
    if (!*(unsigned char *)(v134 + 120)) {
      goto LABEL_223;
    }
LABEL_219:
    uint64_t v132 = (void *)*v132;
  }
  while (v132);
  __int16 v121 = *(unint64_t **)(v44 + 16);
  __int16 v122 = *(unint64_t **)(v44 + 24);
LABEL_234:
  while (v121 != v122)
  {
    unint64_t v141 = *v121;
    if (!*(unsigned char *)(*v121 + 121))
    {
      *(unsigned char *)(v141 + 120) = 0;
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile> const&>(v44 + 80, v141, v121);
    }
    v121 += 2;
  }
  unint64_t v142 = *(void **)(a3 + 24);
  if (!v142)
  {
    uint64_t v151 = *v123;
    goto LABEL_252;
  }
  unint64_t v143 = -1;
  uint64_t v144 = *(void **)(a3 + 24);
  do
  {
    unint64_t v145 = v143;
    uint64_t v144 = (void *)*v144;
    ++v143;
  }
  while (v144);
  uint64_t v146 = *(void *)(v44 + 32);
  uint64_t v147 = *(char **)(v44 + 16);
  uint64_t v148 = v146 - (void)v147;
  if (v143 >= (v146 - (uint64_t)v147) >> 4)
  {
    if (v147)
    {
      unint64_t v158 = *(char **)(v44 + 24);
      if (v158 == v147)
      {
        uint64_t v165 = *(void *)(v44 + 16);
      }
      else
      {
        do
        {
          uint64_t v159 = (std::__shared_weak_count *)*((void *)v158 - 1);
          if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
          v158 -= 16;
        }
        while (v158 != v147);
        uint64_t v165 = *(void *)(v44 + 16);
        uint64_t v148 = *(void *)(v44 + 32) - v165;
      }
      *(void *)(v44 + 24) = v147;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v44 + 40) + 40))(*(void *)(v44 + 40), v165, v148);
      uint64_t v146 = 0;
      *unsigned int v123 = 0;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0;
    }
    if (v143 >= 0xFFFFFFFFFFFFFFFLL) {
      goto LABEL_439;
    }
    uint64_t v166 = v145 + 2;
    if (v146 >> 3 > v145 + 2) {
      uint64_t v166 = v146 >> 3;
    }
    unint64_t v167 = (unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v166;
    if (v167 >> 60) {
LABEL_439:
    }
      abort();
    uint64_t v168 = 16 * v167;
    j = (char *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v44 + 40) + 16))(*(void *)(v44 + 40), 16 * v167, 8);
    *(void *)(v44 + 16) = j;
    *(void *)(v44 + 24) = j;
    *(void *)(v44 + 32) = &j[v168];
    do
    {
      if (j)
      {
        *(void *)j = v142[2];
        uint64_t v169 = v142[3];
        *((void *)j + 1) = v169;
        if (v169) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v169 + 8), 1uLL, memory_order_relaxed);
        }
      }
      unint64_t v142 = (void *)*v142;
      j += 16;
    }
    while (v142);
  }
  else
  {
    uint64_t v149 = *(char **)(v44 + 24);
    unint64_t v150 = (v149 - v147) >> 4;
    if (v150 <= v143)
    {
      if (v149 - v147 >= 1)
      {
        unint64_t v160 = v150 + 1;
        uint64_t v161 = *(void **)(a3 + 24);
        do
        {
          uint64_t v161 = (void *)*v161;
          --v160;
        }
        while (v160 > 1);
        if (v161 != v142)
        {
          do
          {
            uint64_t v163 = v142[2];
            uint64_t v162 = v142[3];
            if (v162) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v162 + 8), 1uLL, memory_order_relaxed);
            }
            __int16 v164 = (std::__shared_weak_count *)*((void *)v147 + 1);
            *(void *)uint64_t v147 = v163;
            *((void *)v147 + 1) = v162;
            if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
            unint64_t v142 = (void *)*v142;
            v147 += 16;
          }
          while (v142 != v161);
          uint64_t v149 = *(char **)(v44 + 24);
          unint64_t v142 = v161;
        }
      }
      uint64_t v170 = v149;
      if (v142)
      {
        uint64_t v170 = v149;
        do
        {
          if (v170)
          {
            *(void *)uint64_t v170 = v142[2];
            uint64_t v171 = v142[3];
            *((void *)v170 + 1) = v171;
            if (v171) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v171 + 8), 1uLL, memory_order_relaxed);
            }
          }
          unint64_t v142 = (void *)*v142;
          v170 += 16;
        }
        while (v142);
      }
      j = v170;
    }
    else
    {
      uint64_t v151 = *(char **)(v44 + 16);
      do
      {
        uint64_t v153 = v142[2];
        uint64_t v152 = v142[3];
        if (v152) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v152 + 8), 1uLL, memory_order_relaxed);
        }
        int v154 = (std::__shared_weak_count *)*((void *)v151 + 1);
        *(void *)uint64_t v151 = v153;
        *((void *)v151 + 1) = v152;
        if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
        unint64_t v142 = (void *)*v142;
        v151 += 16;
      }
      while (v142);
LABEL_252:
      unsigned int v155 = *(char **)(v44 + 24);
      for (j = v151; v155 != v151; v155 -= 16)
      {
        int64_t v157 = (std::__shared_weak_count *)*((void *)v155 - 1);
        if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
    }
  }
  *(void *)(v44 + 24) = j;
LABEL_303:
  for (k = *(uint64_t ***)(v44 + 160); k; k = (uint64_t **)*k)
    md::LabelMapTile::broadcastLabelDeactivate((md::LabelMapTile *)k[2]);
  if (*(void *)(v44 + 176))
  {
    uint64_t v173 = *(void **)(v44 + 160);
    while (v173)
    {
      uint64_t v174 = v173;
      uint64_t v173 = (void *)*v173;
      uint64_t v175 = (std::__shared_weak_count *)v174[3];
      if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
      (*(void (**)(void, void *, uint64_t))(**(void **)(v44 + 168) + 40))(*(void *)(v44 + 168), v174, 32);
    }
    *(void *)(v44 + 160) = 0;
    uint64_t v176 = *(void *)(v44 + 144);
    if (v176)
    {
      for (uint64_t m = 0; m != v176; ++m)
        *(void *)(*(void *)(v44 + 136) + 8 * m) = 0;
    }
    *(void *)(v44 + 176) = 0;
  }
  *(int64x2_t *)(v44 + 48) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v44 + 64) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v29 = *(atomic_uchar **)(v44 + 16);
  size_t v5 = *(atomic_uchar **)(v44 + 24);
  uint64_t v28 = 1;
  if (v29 == v5)
  {
    uint64_t v178 = a1;
  }
  else
  {
    uint64_t v15 = -1;
    do
    {
      uint64_t v179 = *(void *)v29;
      double v180 = *(double *)(v44 + 56);
      *(double *)(v44 + 48) = fmin(*(double *)(*(void *)v29 + 40), *(double *)(v44 + 48));
      double v181 = *(double *)(v44 + 72);
      *(double *)(v44 + 64) = fmax(*(double *)(v44 + 64), *(double *)(v179 + 56));
      *(double *)(v44 + 56) = fmin(*(double *)(v179 + 48), v180);
      *(double *)(v44 + 72) = fmax(v181, *(double *)(v179 + 64));
      uint64_t v27 = *(float **)(v179 + 376);
      std::string v30 = *(float **)(v179 + 384);
      if (v27 != v30)
      {
        unint64_t v182 = *(std::__shared_count_vtbl **)(v44 + 8);
        do
        {
          uint64_t v183 = *(void *)v27;
          v263.__vftable = v182;
          uint64_t v184 = *(void *)(v183 + 32);
          if (!v184)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_443;
          }
          (*(void (**)(uint64_t, std::__shared_count *))(*(void *)v184 + 48))(v184, &v263);
          v27 += 4;
        }
        while (v27 != v30);
        uint64_t v185 = *(void *)(v179 + 376);
        for (uint64_t n = *(void *)(v179 + 384); n != v185; n -= 16)
        {
          unint64_t v187 = *(std::__shared_weak_count **)(n - 8);
          if (v187)
          {
            if (!atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
        }
        *(void *)(v179 + 384) = v185;
      }
      if (v28)
      {
        uint64_t v188 = *(unsigned char **)v29;
        if (*(char *)(*(void *)v29 + 492) == *(unsigned __int8 *)(*(void *)(v44 + 8) + 468))
        {
          uint64_t v178 = a1;
          BOOL v189 = v188[122] || v188[124] || v188[123] || v188[128] != 0;
        }
        else
        {
          BOOL v189 = 1;
          uint64_t v178 = a1;
        }
        uint64_t v28 = !v189;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v178 = a1;
      }
      v29 += 16;
    }
    while (v29 != v5);
  }
  *(unsigned char *)(v44 + 759) = v28;
  uint64_t v190 = *(void *)(v178 + 32);
  if (*(unsigned char *)(v190 + 232))
  {
    *(unsigned char *)(v190 + 232) = 0;
    v254 = 0;
    uint64_t v255 = 0;
    {
      operator new();
    }
    uint64_t v256 = mdm::Allocator::instance(void)::alloc;
    uint64_t v257 = 0;
    {
      operator new();
    }
    uint64_t v258 = mdm::Allocator::instance(void)::alloc;
    uint64_t v259 = 0;
    int v260 = 1065353216;
    uint64_t v191 = *(void **)(v190 + 72);
    long long v249 = (void *)(v190 + 80);
    if (v191 == (void *)(v190 + 80))
    {
      uint64_t v212 = 0;
    }
    else
    {
      uint64_t v246 = v190;
      do
      {
        uint64_t v192 = v191[24];
        if (!v192 || *(unsigned __int8 *)(v192 + 52) - 1 <= 1)
        {
          if (*((unsigned char *)v191 + 280))
          {
            uint64_t v193 = v191[34];
            if (!*(unsigned char *)(v193 + 129)) {
              md::LabelClusterProvider::initializeSourceAnnotations((md::LabelClusterProvider *)v191[34]);
            }
            id v194 = *(id *)(v193 + 56);
          }
          else
          {
            id v194 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v191[33]];
            uint64_t v207 = (void *)v191[30];
            if (v207 != v191 + 31)
            {
              do
              {
                uint64_t v208 = [(id)v207[4] feature];
                if ([v208 isPointFeature])
                {
                  BOOL v209 = *((_DWORD *)v207 + 14) > *((_DWORD *)v207 + 15);

                  if (v209) {
                    [v194 addObject:v207[4]];
                  }
                }
                else
                {
                }
                CFNumberRef v210 = (void *)v207[1];
                if (v210)
                {
                  do
                  {
                    uint64_t v211 = v210;
                    CFNumberRef v210 = (void *)*v210;
                  }
                  while (v210);
                }
                else
                {
                  do
                  {
                    uint64_t v211 = (void *)v207[2];
                    BOOL v116 = *v211 == (void)v207;
                    uint64_t v207 = v211;
                  }
                  while (!v116);
                }
                uint64_t v207 = v211;
              }
              while (v211 != v191 + 31);
            }
          }
          long long v279 = 0u;
          long long v280 = 0u;
          long long v277 = 0u;
          long long v278 = 0u;
          id v195 = v194;
          uint64_t v196 = [v195 countByEnumeratingWithState:&v277 objects:&v263 count:16];
          if (v196)
          {
            uint64_t v197 = *(void *)v278;
            do
            {
              for (iuint64_t i = 0; ii != v196; ++ii)
              {
                if (*(void *)v278 != v197) {
                  objc_enumerationMutation(v195);
                }
                uint64_t v199 = [*(id *)(*((void *)&v277 + 1) + 8 * ii) feature];
                unint64_t v200 = v199;
                if (v199 && *(void *)[v199 feature])
                {
                  uint64_t v201 = [v200 pointFeature];
                  uint64_t v202 = v201;
                  uint64_t v203 = *(uint64_t **)(v201 + 184);
                  if (v203 || (uint64_t v203 = *(uint64_t **)(v201 + 16)) != 0)
                  {
                    LOBYTE(v261) = 4;
                    *((void *)&v261 + 1) = v203;
                    std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)&v254, 4u, v203, &v261);
                  }
                  uint64_t v204 = *(uint64_t **)(v202 + 24);
                  if (v204)
                  {
                    LOBYTE(v261) = 3;
                    *((void *)&v261 + 1) = v204;
                    std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)&v254, 3u, v204, &v261);
                  }
                }
              }
              uint64_t v196 = [v195 countByEnumeratingWithState:&v277 objects:&v263 count:16];
            }
            while (v196);
          }
        }
        uint64_t v205 = (void *)v191[1];
        if (v205)
        {
          do
          {
            uint64_t v206 = v205;
            uint64_t v205 = (void *)*v205;
          }
          while (v205);
        }
        else
        {
          do
          {
            uint64_t v206 = (void *)v191[2];
            BOOL v116 = *v206 == (void)v191;
            uint64_t v191 = v206;
          }
          while (!v116);
        }
        uint64_t v191 = v206;
      }
      while (v206 != v249);
      uint64_t v212 = v259;
      uint64_t v190 = v246;
    }
    uint64_t v213 = *(void *)(v190 + 208);
    if (v213 == v212)
    {
      uint64_t v214 = (uint64_t *)(v190 + 192);
      while (1)
      {
        uint64_t v214 = (uint64_t *)*v214;
        if (!v214) {
          break;
        }
        int v215 = *((unsigned __int8 *)v214 + 16);
        uint64_t v216 = (uint64_t *)v214[3];
        uint64_t v217 = std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::find<md::LabelFeatureID>(&v254, *((unsigned char *)v214 + 16), v216);
        if (!v217 || v215 != *((unsigned __int8 *)v217 + 16) || v216 != v217[3]) {
          goto LABEL_395;
        }
      }
      int v228 = 0;
      unint64_t v225 = v257;
      if (!v257)
      {
LABEL_412:
        uint64_t v230 = v254;
        v254 = 0;
        if (v230) {
          (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v256 + 40))(v256, v230, 8 * (void)v255);
        }
        uint64_t v178 = a1;
        if (v228) {
          *(unsigned char *)(a1 + 372) = 1;
        }
        goto LABEL_416;
      }
    }
    else
    {
LABEL_395:
      if (v213)
      {
        uint64_t v218 = *(void **)(v190 + 192);
        if (v218)
        {
          do
          {
            uint64_t v219 = (void *)*v218;
            (*(void (**)(void))(**(void **)(v190 + 200) + 40))(*(void *)(v190 + 200));
            uint64_t v218 = v219;
          }
          while (v219);
        }
        *(void *)(v190 + 192) = 0;
        uint64_t v220 = *(void *)(v190 + 176);
        if (v220)
        {
          for (uint64_t jj = 0; jj != v220; ++jj)
            *(void *)(*(void *)(v190 + 168) + 8 * jj) = 0;
        }
        *(void *)(v190 + 208) = 0;
      }
      v222 = v254;
      v254 = 0;
      uint64_t v223 = *(void *)(v190 + 168);
      *(void *)(v190 + 168) = v222;
      if (v223) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v190 + 184) + 40))(*(void *)(v190 + 184), v223, 8 * *(void *)(v190 + 176));
      }
      unint64_t v224 = (unint64_t)v255;
      unint64_t v225 = v257;
      *(void *)(v190 + 192) = v257;
      *(void *)(v190 + 176) = v224;
      uint64_t v255 = 0;
      uint64_t v226 = v259;
      *(void *)(v190 + 208) = v259;
      *(_DWORD *)(v190 + 216) = v260;
      if (v226)
      {
        unint64_t v227 = v225[1];
        if ((v224 & (v224 - 1)) != 0)
        {
          if (v227 >= v224) {
            v227 %= v224;
          }
        }
        else
        {
          v227 &= v224 - 1;
        }
        unint64_t v225 = 0;
        *(void *)(*(void *)(v190 + 168) + 8 * v227) = v190 + 192;
        uint64_t v257 = 0;
        uint64_t v259 = 0;
      }
      ++*(_DWORD *)(v190 + 224);
      int v228 = 1;
      if (!v225) {
        goto LABEL_412;
      }
    }
    do
    {
      uint64_t v229 = (void *)*v225;
      (*(void (**)(uint64_t))(*(void *)v258 + 40))(v258);
      unint64_t v225 = v229;
    }
    while (v229);
    goto LABEL_412;
  }
LABEL_416:
  if (*(unsigned char *)(v178 + 368))
  {
    *(unsigned char *)(v178 + 368) = 0;
    v231 = *(void **)(v178 + 136);
    uint64_t v232 = *(void **)(v178 + 144);
    while (v232 != v231)
    {
      uint64_t v234 = *--v232;
      uint64_t v233 = v234;
      *uint64_t v232 = 0;
      if (v234) {
        (*(void (**)(uint64_t))(*(void *)v233 + 8))(v233);
      }
    }
    *(void *)(a1 + 144) = v231;
    long long v250 = 0u;
    long long v251 = 0u;
    long long v252 = 0u;
    long long v253 = 0u;
    id v235 = *(id *)(a1 + 168);
    uint64_t v236 = [v235 countByEnumeratingWithState:&v250 objects:v262 count:16];
    if (v236)
    {
      uint64_t v237 = *(void *)v251;
      do
      {
        for (uint64_t kk = 0; kk != v236; ++kk)
        {
          if (*(void *)v251 != v237) {
            objc_enumerationMutation(v235);
          }
          CFIndex v239 = *(void **)(*((void *)&v250 + 1) + 8 * kk);
          if (![v239 type])
          {
            [v239 rect];
            operator new();
          }
        }
        uint64_t v236 = [v235 countByEnumeratingWithState:&v250 objects:v262 count:16];
      }
      while (v236);
    }
  }
}

void sub_1A19A00EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
}

void sub_1A19A0100(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 224);
  _Unwind_Resume(a1);
}

void sub_1A19A0114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1A19A0128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a32);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&a57);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v57 - 224);
  _Unwind_Resume(a1);
}

void sub_1A19A015C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*(void *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_1A19A0164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19A0194(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A19A01A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,md::LabelFeature *a21)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 40))(v24, v21, 8);
  uint64_t v25 = *(std::__shared_weak_count **)(v22 + 296);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }

  md::LabelFeature::~LabelFeature(a21);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v22);
  operator delete(v26);
  JUMPOUT(0x1A19A02A0);
}

void sub_1A19A01B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_1A19A01D4()
{
}

void sub_1A19A01DC()
{
  if (v0) {
    JUMPOUT(0x1A19A01E4);
  }
  float v2 = *(std::__shared_weak_count **)(v1 + 296);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x1A19A026CLL);
}

void sub_1A19A029C()
{
  JUMPOUT(0x1A19A02A4);
}

void sub_1A19A02BC()
{
  JUMPOUT(0x1A19A0348);
}

void sub_1A19A0314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>(unint64_t result, unsigned __int8 a2, uint64_t *a3, _OWORD *a4)
{
  unint64_t v6 = result;
  unint64_t v7 = ((unint64_t)&a3[8 * (unint64_t)a2 - 0xC3910C8D016B07DLL] + ((unint64_t)a2 >> 2) - 3) ^ a2;
  unint64_t v8 = *(void *)(result + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = ((unint64_t)&a3[8 * (unint64_t)a2 - 0xC3910C8D016B07DLL] + ((unint64_t)a2 >> 2) - 3) ^ a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unsigned int v10 = *(uint64_t ****)(*(void *)result + 8 * v4);
    if (v10)
    {
      std::__shared_count v11 = *v10;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v11[1];
            if (v15 == (uint64_t *)v7)
            {
              if (*((unsigned __int8 *)v11 + 16) == a2 && v11[3] == a3) {
                return result;
              }
            }
            else if (((unint64_t)v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            std::__shared_count v11 = (uint64_t **)*v11;
            if (!v11) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v11[1];
          if (v13 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == a2 && v11[3] == a3) {
              return result;
            }
          }
          else
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
            if (v13 != v4) {
              break;
            }
          }
          std::__shared_count v11 = (uint64_t **)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 32) + 16))(*(void *)(result + 32), 32, 8);
  unint64_t v16 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = v7;
  *(_OWORD *)(result + 16) = *a4;
  float v17 = (float)(unint64_t)(*(void *)(v6 + 40) + 1);
  float v18 = *(float *)(v6 + 48);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    if (v22 == 1)
    {
      size_t v22 = 2;
    }
    else if ((v22 & (v22 - 1)) != 0)
    {
      uint64_t result = std::__next_prime(v22);
      size_t v22 = result;
    }
    unint64_t v8 = *(void *)(v6 + 8);
    if (v22 <= v8)
    {
      if (v22 >= v8) {
        goto LABEL_64;
      }
      uint64_t result = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 40) / *(float *)(v6 + 48));
      if (v8 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        uint64_t result = std::__next_prime(result);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(result - 1);
        if (result >= 2) {
          uint64_t result = v34;
        }
      }
      if (v22 <= result) {
        size_t v22 = result;
      }
      if (v22 >= v8)
      {
        unint64_t v8 = *(void *)(v6 + 8);
LABEL_64:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8) {
            unint64_t v4 = v7 % v8;
          }
          else {
            unint64_t v4 = v7;
          }
        }
        else
        {
          unint64_t v4 = (v8 - 1) & v7;
        }
        goto LABEL_77;
      }
      if (!v22)
      {
        uint64_t v40 = *(void *)v6;
        *(void *)unint64_t v6 = 0;
        if (v40) {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 16) + 40))(*(void *)(v6 + 16), v40, 8 * *(void *)(v6 + 8));
        }
        unint64_t v8 = 0;
        *(void *)(v6 + 8) = 0;
        goto LABEL_64;
      }
    }
    uint64_t result = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(v6 + 16) + 16))(*(void *)(v6 + 16), 8 * v22, 8);
    uint64_t v23 = *(void *)v6;
    *(void *)unint64_t v6 = result;
    if (v23) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 16) + 40))(*(void *)(v6 + 16), v23, 8 * *(void *)(v6 + 8));
    }
    uint64_t v24 = 0;
    *(void *)(v6 + 8) = v22;
    do
      *(void *)(*(void *)v6 + 8 * v24++) = 0;
    while (v22 != v24);
    unint64_t v26 = v6 + 24;
    uint64_t v25 = *(void **)(v6 + 24);
    if (!v25)
    {
LABEL_63:
      unint64_t v8 = v22;
      goto LABEL_64;
    }
    size_t v27 = v25[1];
    size_t v28 = v22 - 1;
    if ((v22 & (v22 - 1)) == 0)
    {
      size_t v29 = v27 & v28;
      *(void *)(*(void *)v6 + 8 * v29) = v26;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v31 = i[1] & v28;
        if (v31 == v29)
        {
          uint64_t v25 = i;
        }
        else if (*(void *)(*(void *)v6 + 8 * v31))
        {
          *uint64_t v25 = *i;
          uint64_t v32 = 8 * v31;
          void *i = **(void **)(*(void *)v6 + v32);
          **(void **)(*(void *)v6 + v32) = i;
        }
        else
        {
          *(void *)(*(void *)v6 + 8 * v31) = v25;
          uint64_t v25 = i;
          size_t v29 = v31;
        }
      }
      goto LABEL_63;
    }
    if (v27 >= v22) {
      v27 %= v22;
    }
    *(void *)(*(void *)v6 + 8 * v27) = v26;
    char v35 = (void *)*v25;
    if (!*v25) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= v22) {
        v37 %= v22;
      }
      if (v37 != v27)
      {
        if (!*(void *)(*(void *)v6 + 8 * v37))
        {
          *(void *)(*(void *)v6 + 8 * v37) = v25;
          goto LABEL_68;
        }
        *uint64_t v25 = *v35;
        uint64_t v36 = 8 * v37;
        *char v35 = **(void **)(*(void *)v6 + v36);
        **(void **)(*(void *)v6 + v36) = v35;
        char v35 = v25;
      }
      size_t v37 = v27;
LABEL_68:
      uint64_t v25 = v35;
      char v35 = (void *)*v35;
      size_t v27 = v37;
      if (!v35) {
        goto LABEL_63;
      }
    }
  }
LABEL_77:
  uint64_t v38 = *(unint64_t **)(*(void *)v6 + 8 * v4);
  if (v38)
  {
    *(void *)unint64_t v16 = *v38;
LABEL_85:
    unint64_t *v38 = v16;
    goto LABEL_86;
  }
  *(void *)unint64_t v16 = *(void *)(v6 + 24);
  *(void *)(v6 + 24) = v16;
  *(void *)(*(void *)v6 + 8 * v4) = v6 + 24;
  if (*(void *)v16)
  {
    unint64_t v39 = *(void *)(*(void *)v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v39 >= v8) {
        v39 %= v8;
      }
    }
    else
    {
      v39 &= v8 - 1;
    }
    uint64_t v38 = (unint64_t *)(*(void *)v6 + 8 * v39);
    goto LABEL_85;
  }
LABEL_86:
  ++*(void *)(v6 + 40);
  return result;
}

void sub_1A19A0874(_Unwind_Exception *a1)
{
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 32) + 40))(*(void *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::LabelMapTileCommand>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void md::LabelMapTile::loadResourcesTile(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = 0;
  unint64_t v6 = operator new(0x20uLL);
  *unint64_t v6 = &unk_1EF56F3C0;
  v6[1] = a1;
  v6[2] = a2;
  CGColorRef v6[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = v6;
  md::LabelMapTile::queueCommand(a1, 0, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    if (!a3) {
      return;
    }
    goto LABEL_12;
  }
  if (v10) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 40))(v10, v7, v8);
  }
  if (a3)
  {
LABEL_12:
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_1A19A0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void md::LabelMapTile::loadTrafficTile(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = 0;
  unint64_t v6 = operator new(0x20uLL);
  *unint64_t v6 = &unk_1EF56F378;
  v6[1] = a1;
  v6[2] = a2;
  CGColorRef v6[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = v6;
  md::LabelMapTile::queueCommand(a1, 2, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    if (!a3) {
      return;
    }
    goto LABEL_11;
  }
  if (v10) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 40))(v10, v7, v8);
  }
  if (a3)
  {
LABEL_11:
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_1A19A0CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void md::LabelMapTile::loadLabelTiles(md::LabelMapTile *this, const md::LabelTileSet *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 1);
  v24[0] = *(void *)a2;
  uint64_t v22 = v24[0];
  v24[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *((void *)a2 + 3);
  uint64_t v21 = *((void *)a2 + 2);
  v24[2] = v21;
  v24[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *((void *)a2 + 5);
  uint64_t v20 = *((void *)a2 + 4);
  v24[4] = v20;
  v24[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *((void *)a2 + 7);
  uint64_t v19 = *((void *)a2 + 6);
  v24[6] = v19;
  v24[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 9);
  uint64_t v18 = *((void *)a2 + 8);
  v24[8] = v18;
  v24[9] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 11);
  uint64_t v17 = *((void *)a2 + 10);
  v24[10] = v17;
  v24[11] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 13);
  uint64_t v16 = *((void *)a2 + 12);
  v24[12] = v16;
  v24[13] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *((void *)a2 + 15);
  uint64_t v15 = *((void *)a2 + 14);
  v24[14] = v15;
  v24[15] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)a2 + 17);
  uint64_t v14 = *((void *)a2 + 16);
  v24[16] = v14;
  v24[17] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *((void *)a2 + 19);
  uint64_t v13 = *((void *)a2 + 18);
  v24[18] = v13;
  v24[19] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  CGRect v12 = operator new(0xB0uLL);
  *CGRect v12 = &unk_1EF56F330;
  v12[1] = this;
  v12[2] = v22;
  uint64_t v12[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v12[4] = v21;
  v12[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v12[6] = v20;
  v12[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v12[8] = v19;
  v12[9] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  v12[10] = v18;
  v12[11] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v12[12] = v17;
  v12[13] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  v12[14] = v16;
  v12[15] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  v12[16] = v15;
  v12[17] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  v12[18] = v14;
  v12[19] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v12[20] = v13;
  v12[21] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = v12;
  md::LabelMapTile::queueCommand((uint64_t)this, 1, v25);
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v26)
  {
    (*(void (**)(void *))(*v26 + 40))(v26);
  }
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)v24);
}

void sub_1A19A1094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,md::LabelTileSet *a21)
{
  md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0::~$_0((void *)(v21 - 128));
  md::LabelTileSet::~LabelTileSet(a21);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::queueCommand(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = a1 + 376;
  uint64_t v7 = *(unsigned __int8 ***)(a1 + 376);
  uint64_t v8 = *(void *)(a1 + 384);
  if (v7 == (unsigned __int8 **)v8)
  {
    uint64_t v8 = *(void *)(a1 + 376);
  }
  else
  {
    while (**v7 != a2)
    {
      v7 += 2;
      if (v7 == (unsigned __int8 **)v8)
      {
        uint64_t v7 = *(unsigned __int8 ***)(a1 + 384);
        goto LABEL_16;
      }
    }
    if (v7 != (unsigned __int8 **)v8)
    {
      uint64_t v9 = v7 + 2;
      if (v7 + 2 != (unsigned __int8 **)v8)
      {
        do
        {
          uint64_t v10 = *v9;
          if (**v9 != a2)
          {
            uint64_t v11 = v9[1];
            void *v9 = 0;
            v9[1] = 0;
            CGRect v12 = (std::__shared_weak_count *)v7[1];
            NSObject *v7 = v10;
            v7[1] = v11;
            if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
            v7 += 2;
          }
          v9 += 2;
        }
        while (v9 != (unsigned __int8 **)v8);
        uint64_t v8 = *(void *)(a1 + 384);
      }
    }
  }
LABEL_16:
  std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase(v6, (uint64_t)v7, v8);
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D08;
  LOBYTE(v13[1].__vftable) = a2;
  uint64_t v14 = a3[3];
  if (!v14) {
    goto LABEL_19;
  }
  if ((void *)v14 != a3)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
LABEL_19:
    v13[2].__shared_owners_ = v14;
    goto LABEL_21;
  }
  v13[2].__shared_owners_ = (uint64_t)&v13[1].__shared_owners_;
  (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_21:
  *(void *)&long long v32 = v13 + 1;
  *((void *)&v32 + 1) = v13;
  uint64_t v15 = *(void **)(a1 + 384);
  unint64_t v16 = *(void *)(a1 + 392);
  if ((unint64_t)v15 < v16)
  {
    if (v15)
    {
      *uint64_t v15 = v13 + 1;
      v15[1] = v13;
      uint64_t v13 = 0;
    }
    *(void *)(a1 + 384) = v15 + 2;
    if (!v13) {
      return;
    }
LABEL_48:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  uint64_t v17 = *(void *)(a1 + 376);
  uint64_t v18 = ((uint64_t)v15 - v17) >> 4;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 60) {
    abort();
  }
  uint64_t v20 = v16 - v17;
  if (v20 >> 3 > v19) {
    unint64_t v19 = v20 >> 3;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v21 = v19;
  }
  if (v21)
  {
    uint64_t v22 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 400) + 16))(*(void *)(a1 + 400), 16 * v21, 8);
    uint64_t v23 = (_OWORD *)(v22 + 16 * v18);
    uint64_t v24 = v22 + 16 * v21;
    if (v22)
    {
      *uint64_t v23 = v32;
      long long v32 = 0uLL;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v23 = (_OWORD *)(16 * v18);
  }
  uint64_t v25 = v23 + 1;
  unint64_t v26 = *(void **)(a1 + 376);
  uint64_t v27 = *(void **)(a1 + 384);
  if (v27 == v26)
  {
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v25;
    uint64_t v30 = *(void *)(a1 + 392);
    *(void *)(a1 + 392) = v24;
  }
  else
  {
    do
    {
      long long v28 = *((_OWORD *)v27 - 1);
      v27 -= 2;
      *--uint64_t v23 = v28;
      *uint64_t v27 = 0;
      v27[1] = 0;
    }
    while (v27 != v26);
    uint64_t v27 = *(void **)(a1 + 376);
    size_t v29 = *(void **)(a1 + 384);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v25;
    uint64_t v30 = *(void *)(a1 + 392);
    for (*(void *)(a1 + 392) = v24; v29 != v27; v29 -= 2)
    {
      size_t v31 = (std::__shared_weak_count *)*(v29 - 1);
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  if (v27) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 400) + 40))(*(void *)(a1 + 400), v27, v30 - (void)v27);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  *(void *)(a1 + 384) = v25;
  if (*((void *)&v32 + 1)) {
    goto LABEL_48;
  }
}

void sub_1A19A14A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1A19A14B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      do
      {
        uint64_t v8 = (void *)(v3 + v7);
        long long v9 = *(_OWORD *)(v3 + v7);
        *uint64_t v8 = 0;
        v8[1] = 0;
        uint64_t v10 = *(std::__shared_weak_count **)(v3 + 8);
        *(_OWORD *)uint64_t v3 = v9;
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v3 += 16;
      }
      while (v3 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    for (; v5 != v3; v5 -= 16)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v5 - 8);
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    *(void *)(a1 + 8) = v3;
  }
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(uint64_t a1)
{
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 16));
  operator delete((void *)a1);
}

void md::LabelTileSet::~LabelTileSet(md::LabelTileSet *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    long long v9 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v9) {
      goto LABEL_25;
    }
  }
  else
  {
    long long v9 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_25:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v11) {
      return;
    }
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

char *std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1EF575318;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1EF56F3C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1EF56F378;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (*(void *)(v2 + 504) != v1)
  {
    uint64_t v3 = a1[3];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 512);
    *(void *)(v2 + 504) = v1;
    *(void *)(v2 + 512) = v3;
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(unsigned char *)(v2 + 122) = 1;
  }
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 != *(void *)(v2 + 152))
  {
    uint64_t v3 = a1[3];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 160);
    *(void *)(v2 + 152) = v1;
    *(void *)(v2 + 160) = v3;
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(unsigned char *)(v2 + 123) = 1;
  }
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (*(void *)(v2 + 328) != v1)
  {
    uint64_t v3 = a1[3];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 336);
    *(void *)(v2 + 328) = v1;
    *(void *)(v2 + 336) = v3;
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(unsigned char *)(v2 + 124) = 1;
  }
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::operator()(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = (std::__shared_weak_count **)(v2 + 176);
  uint64_t v4 = (std::__shared_weak_count **)(a1 + 24);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (*(v3 - 1) != v5)
    {
      uint64_t v6 = *v4;
      if (*v4) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *v3;
      *(v3 - 1) = v5;
      std::__shared_weak_count *v3 = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v2[122] = 1;
      if (v1 == 7)
      {
        v2[127] = 1;
      }
      else if (v1 == 3)
      {
        v2[126] = 1;
      }
    }
    ++v1;
    v3 += 2;
    v4 += 2;
  }
  while (v1 != 10);
}

void *std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = a1[1];
  uint64_t v4 = (char *)a1[2];
  *uint64_t v2 = &unk_1EF56F408;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v5 = a1[5];
  v2[4] = 0;
  v2[5] = v5;
  uint64_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v4;
  if (v6 != v4)
  {
    if (v7 < 0) {
      abort();
    }
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v5 + 16))(v5, v6 - v4, 8);
    v2[2] = v8;
    v2[3] = v8;
    v2[4] = &v8[2 * (v7 >> 4)];
    do
    {
      if (v8)
      {
        uint64_t v9 = *((void *)v4 + 1);
        *uint64_t v8 = *(void *)v4;
        v8[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v4 += 16;
      v8 += 2;
    }
    while (v4 != v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_1A19A1E34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::operator()(void *a1)
{
  uint64_t v1 = a1[1];
  if ((void *)(v1 + 344) != a1 + 2)
  {
    uint64_t v3 = (char *)a1[2];
    uint64_t v2 = (char *)a1[3];
    unint64_t v4 = (v2 - v3) >> 4;
    uint64_t v5 = *(void *)(v1 + 360);
    uint64_t v6 = *(char **)(v1 + 344);
    uint64_t v7 = v5 - (void)v6;
    if (v4 <= (v5 - (uint64_t)v6) >> 4)
    {
      uint64_t v10 = *(char **)(v1 + 352);
      unint64_t v11 = (v10 - v6) >> 4;
      if (v11 >= v4)
      {
        if (v3 != v2)
        {
          do
          {
            uint64_t v17 = *(void *)v3;
            uint64_t v16 = *((void *)v3 + 1);
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v18 = (std::__shared_weak_count *)*((void *)v6 + 1);
            *(void *)uint64_t v6 = v17;
            *((void *)v6 + 1) = v16;
            if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            v6 += 16;
            v3 += 16;
          }
          while (v3 != v2);
          uint64_t v10 = *(char **)(v1 + 352);
        }
        for (; v10 != v6; v10 -= 16)
        {
          uint64_t v22 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        *(void *)(v1 + 352) = v6;
      }
      else
      {
        CGRect v12 = &v3[16 * v11];
        if (v10 != v6)
        {
          do
          {
            uint64_t v14 = *(void *)v3;
            uint64_t v13 = *((void *)v3 + 1);
            if (v13) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v15 = (std::__shared_weak_count *)*((void *)v6 + 1);
            *(void *)uint64_t v6 = v14;
            *((void *)v6 + 1) = v13;
            if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            v3 += 16;
            v6 += 16;
          }
          while (v3 != v12);
          uint64_t v6 = *(char **)(v1 + 352);
        }
        uint64_t v20 = v6;
        if (v12 != v2)
        {
          uint64_t v20 = v6;
          do
          {
            if (v20)
            {
              uint64_t v21 = *((void *)v12 + 1);
              *(void *)uint64_t v20 = *(void *)v12;
              *((void *)v20 + 1) = v21;
              if (v21) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
              }
            }
            v12 += 16;
            v20 += 16;
          }
          while (v12 != v2);
        }
        *(void *)(v1 + 352) = v20;
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v8 = *(char **)(v1 + 352);
        if (v8 == v6)
        {
          uint64_t v19 = *(void *)(v1 + 344);
        }
        else
        {
          do
          {
            uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 - 1);
            if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
            v8 -= 16;
          }
          while (v8 != v6);
          uint64_t v19 = *(void *)(v1 + 344);
          uint64_t v7 = *(void *)(v1 + 360) - v19;
        }
        *(void *)(v1 + 352) = v6;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 368) + 40))(*(void *)(v1 + 368), v19, v7);
        uint64_t v5 = 0;
        *(void *)(v1 + 344) = 0;
        *(void *)(v1 + 352) = 0;
        *(void *)(v1 + 360) = 0;
      }
      if (v2 - v3 < 0) {
        goto LABEL_60;
      }
      uint64_t v23 = v5 >> 3;
      if (v5 >> 3 <= v4) {
        uint64_t v23 = (v2 - v3) >> 4;
      }
      BOOL v24 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      if (!v24) {
        unint64_t v25 = v23;
      }
      if (v25 >> 60) {
LABEL_60:
      }
        abort();
      uint64_t v26 = 2 * v25;
      uint64_t v27 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v1 + 368) + 16))(*(void *)(v1 + 368), 16 * v25, 8);
      *(void *)(v1 + 344) = v27;
      *(void *)(v1 + 352) = v27;
      for (*(void *)(v1 + 360) = &v27[v26]; v3 != v2; v27 += 2)
      {
        if (v27)
        {
          uint64_t v28 = *((void *)v3 + 1);
          *uint64_t v27 = *(void *)v3;
          v27[1] = v28;
          if (v28) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
          }
        }
        v3 += 16;
      }
      *(void *)(v1 + 352) = v27;
    }
  }
  *(unsigned char *)(v1 + 128) = 1;
}

void *std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__erase_unique<std::shared_ptr<md::LabelMapTile>>(void *result, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    unint64_t v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v4 >> 47) ^ v4);
    unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = v6;
      if (v6 >= *(void *)&v2) {
        unint64_t v8 = v6 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v8 = v6 & (*(void *)&v2 - 1);
    }
    uint64_t v9 = *result;
    uint64_t v10 = *(void ***)(*result + 8 * v8);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(void *)&v2 - 1;
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v6)
            {
              if (v11[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v13 & v12) != v8)
            {
              return result;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v14 = v11[1];
          if (v14 == v6)
          {
            if (v11[2] == a2)
            {
LABEL_22:
              if (v7.u32[0] > 1uLL)
              {
                if (v6 >= *(void *)&v2) {
                  v6 %= *(void *)&v2;
                }
              }
              else
              {
                v6 &= v12;
              }
              uint64_t v15 = *(void **)(v9 + 8 * v6);
              do
              {
                uint64_t v16 = v15;
                uint64_t v15 = (void *)*v15;
              }
              while (v15 != v11);
              if (v16 == result + 3) {
                goto LABEL_39;
              }
              unint64_t v17 = v16[1];
              if (v7.u32[0] > 1uLL)
              {
                if (v17 >= *(void *)&v2) {
                  v17 %= *(void *)&v2;
                }
              }
              else
              {
                v17 &= v12;
              }
              if (v17 != v6)
              {
LABEL_39:
                if (!*v11) {
                  goto LABEL_40;
                }
                unint64_t v18 = *(void *)(*v11 + 8);
                if (v7.u32[0] > 1uLL)
                {
                  if (v18 >= *(void *)&v2) {
                    v18 %= *(void *)&v2;
                  }
                }
                else
                {
                  v18 &= v12;
                }
                if (v18 != v6) {
LABEL_40:
                }
                  *(void *)(v9 + 8 * v6) = 0;
              }
              uint64_t v19 = *v11;
              if (*v11)
              {
                unint64_t v20 = *(void *)(v19 + 8);
                if (v7.u32[0] > 1uLL)
                {
                  if (v20 >= *(void *)&v2) {
                    v20 %= *(void *)&v2;
                  }
                }
                else
                {
                  v20 &= v12;
                }
                if (v20 != v6)
                {
                  *(void *)(*result + 8 * v20) = v16;
                  uint64_t v19 = *v11;
                }
              }
              *uint64_t v16 = v19;
              *unint64_t v11 = 0;
              --result[5];
              uint64_t v21 = (std::__shared_weak_count *)v11[3];
              if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
              uint64_t v22 = *(uint64_t (**)(void))(*(void *)v3[4] + 40);
              return (void *)v22();
            }
          }
          else
          {
            if (v14 >= *(void *)&v2) {
              v14 %= *(void *)&v2;
            }
            if (v14 != v8) {
              return result;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  return result;
}

void sub_1A19A2760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::MapEngine::prune(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 824) didReceiveMemoryWarning];
  uint64_t v4 = *(void *)(a1 + 856);
  if (v4)
  {
    if (*(void *)(a1 + 872) == v4) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = 2;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v5);
  }
  uint64_t v6 = *(void *)(a1 + 864);
  if (v6)
  {
    if (*(void *)(a1 + 872) == v6) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = 2;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v7);
  }
  uint64_t v8 = [*(id *)(a1 + 840) renderer];
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  v11[0] = &unk_1EF579848;
  v11[1] = a1;
  void v11[2] = a2;
  uint64_t v12 = v11;
  geo::TaskQueue::barrierSync(v9, v11);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

void sub_1A19A2918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A19A2A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__shared_ptr_emplace<std::vector<std::function<void ()(NSError *)>,geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void **)(result + 32);
    uint64_t v4 = *(void *)(result + 24);
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *, uint64_t))(*v8 + 40))(v8, v4);
        }
        v5 -= 4;
        BOOL v7 = v6 == v1;
        v6 -= 4;
      }
      while (!v7);
    }
    *(void *)(v2 + 32) = v1;
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v2 + 48) + 40);
    return v9();
  }
  return result;
}

void ggl::EndFrameParams::~EndFrameParams(ggl::EndFrameParams *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 17);
    uint64_t v4 = *((void *)this + 16);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *, uint64_t))(*v8 + 40))(v8, v4);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = *((void *)this + 16);
    }
    *((void *)this + 17) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 19) + 40))(*((void *)this + 19), v4, *((void *)this + 18) - v4);
  }
  uint64_t v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    uint64_t v10 = (void *)*((void *)this + 13);
    uint64_t v11 = *((void *)this + 12);
    if (v10 != v9)
    {
      uint64_t v12 = v10 - 4;
      uint64_t v13 = v10 - 4;
      do
      {
        unint64_t v14 = (void *)v13[3];
        if (v13 == v14)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v14)
        {
          (*(void (**)(void *, uint64_t))(*v14 + 40))(v14, v11);
        }
        v12 -= 4;
        BOOL v7 = v13 == v9;
        v13 -= 4;
      }
      while (!v7);
      uint64_t v11 = *((void *)this + 12);
    }
    *((void *)this + 13) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), v11, *((void *)this + 14) - v11);
  }
  uint64_t v15 = (void *)*((void *)this + 8);
  if (v15)
  {
    uint64_t v16 = (void *)*((void *)this + 9);
    uint64_t v17 = *((void *)this + 8);
    if (v16 != v15)
    {
      unint64_t v18 = v16 - 4;
      uint64_t v19 = v16 - 4;
      do
      {
        unint64_t v20 = (void *)v19[3];
        if (v19 == v20)
        {
          (*(void (**)(void *))(*v19 + 32))(v19);
        }
        else if (v20)
        {
          (*(void (**)(void *, uint64_t))(*v20 + 40))(v20, v17);
        }
        v18 -= 4;
        BOOL v7 = v19 == v15;
        v19 -= 4;
      }
      while (!v7);
      uint64_t v17 = *((void *)this + 8);
    }
    *((void *)this + 9) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v17, *((void *)this + 10) - v17);
  }
  uint64_t v21 = *((void *)this + 4);
  if (v21)
  {
    *((void *)this + 5) = v21;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v21, *((void *)this + 6) - v21);
  }
  uint64_t v22 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v22;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v22, *((void *)this + 2) - v22);
  }
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>,std::allocator<ecs2::ForwardToExecute<md::erq::EncodeRenderQueue>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::erq::RenderQueueToSubmit>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::erq::RenderTargetToSubmit>(v3);
  uint64_t v6 = gdc::Registry::storage<md::erq::GPUWorkCallbacks>(v3);
  BOOL v7 = (void *)v6;
  uint64_t v8 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v8 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  unint64_t v109 = v8;
  unsigned int v110 = v4;
  uint64_t v111 = v5;
  uint64_t v112 = (void *)v6;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  uint64_t v113 = v10;
  float v105 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v109))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      uint64_t v113 = v11;
      if (v11 == v105) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v109);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v105 != v10)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unsigned int v103 = v4;
    uint64_t v104 = v2;
    uint64_t v101 = v7;
    uint64_t v102 = v5;
    int v100 = result;
    while (1)
    {
      *uint64_t result = *v10;
      unint64_t v15 = *v10;
      uint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v4[4];
      if (v17 < (v4[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v4[7],
            uint64_t v21 = v4[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        unint64_t v25 = (uint64_t *)(v4[10] + 8 * v20);
      }
      else
      {
        unint64_t v25 = (uint64_t *)v4[11];
      }
      uint64_t v26 = v5[4];
      if (v17 < (v5[5] - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v30 = v5[7],
            uint64_t v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
      {
        uint64_t v33 = v5[10] + 8 * v28;
      }
      else
      {
        uint64_t v33 = v5[11];
      }
      unsigned int v107 = (uint64_t *)v33;
      uint64_t v34 = v7[4];
      if (v17 < (v7[5] - v34) >> 3
        && (uint64_t v35 = *(void *)(v34 + 8 * v17)) != 0
        && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v38 = v7[7],
            uint64_t v37 = v7[8],
            v36 < (v37 - v38) >> 3)
        && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v16) : (v40 = 0), v40))
      {
        uint64_t v41 = v7[11];
        uint64_t v42 = v7[10] + 24 * v36;
      }
      else
      {
        uint64_t v41 = v7[11];
        uint64_t v42 = v41;
      }
      if (v42 == v41) {
        int v43 = 0;
      }
      else {
        int v43 = (void *)v42;
      }
      uint64_t v44 = **(void **)(v2 + 8);
      int v45 = *(void **)v44;
      uint64_t v46 = *(void **)(v44 + 8);
      if (v45 != v46)
      {
        while (*v45 != 0x4987A5FEEF8688ACLL)
        {
          v45 += 5;
          if (v45 == v46) {
            goto LABEL_50;
          }
        }
      }
      if (v45 == v46)
      {
LABEL_50:
        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v48 = v45[3];
        unint64_t v47 = (std::__shared_weak_count *)v45[4];
        if (v47)
        {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      uint64_t v49 = **(void **)(v2 + 8);
      double v50 = *(void **)v49;
      uint64_t v51 = *(void **)(v49 + 8);
      if (v50 != v51)
      {
        while (*v50 != 0xCFC5133F599B8248)
        {
          v50 += 5;
          if (v50 == v51) {
            goto LABEL_59;
          }
        }
      }
      if (v50 == v51)
      {
LABEL_59:
        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v53 = v50[3];
        unint64_t v52 = (std::__shared_weak_count *)v50[4];
        if (v52)
        {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      (*(void (**)(uint64_t, void))(*(void *)v53 + 40))(v53, *v43);
      uint64_t v54 = *v43;
      uint64_t v55 = **(void **)(v2 + 8);
      CFTypeRef v56 = *(void **)v55;
      uint64_t v57 = *(void **)(v55 + 8);
      if (v56 != v57)
      {
        while (*v56 != 0xCFC5133F599B8248)
        {
          v56 += 5;
          if (v56 == v57) {
            goto LABEL_68;
          }
        }
      }
      if (v56 == v57)
      {
LABEL_68:
        uint64_t v106 = 0;
        CFTypeRef v58 = 0;
      }
      else
      {
        CFTypeRef v58 = (std::__shared_weak_count *)v56[4];
        uint64_t v106 = v56[3];
        if (v58)
        {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 8))(v48);
      unsigned int v108 = v43;
      uint64_t v60 = v43[1];
      uint64_t v61 = (**(uint64_t (***)(uint64_t))v48)(v48);
      (*(void (**)(uint64_t))(*(void *)v61 + 64))(v61);
      if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
      }
      unint64_t v62 = GEOGetVectorKitPerformanceLog_log;
      uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 8))(v48);
      if ((unint64_t)(v63 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v64 = v63;
        if (os_signpost_enabled(v62))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A1780000, v62, OS_SIGNPOST_INTERVAL_BEGIN, v64, "SubmitCommands", "", buf, 2u);
        }
      }
      uint64_t v65 = *v107;
      uint64_t v66 = *v25;
      unsigned int v67 = operator new(0x20uLL);
      *unsigned int v67 = &unk_1EF51F388;
      v67[1] = v59;
      v67[2] = v60;
      v67[3] = v53;
      unsigned int v119 = v67;
      if (v58)
      {
        atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v68 = v119;
      }
      else
      {
        uint64_t v68 = v67;
      }
      uint64_t v2 = v104;
      uint64_t v69 = operator new(0x20uLL);
      *uint64_t v69 = &unk_1EF51F340;
      v69[1] = v54;
      v69[2] = v106;
      void v69[3] = v58;
      uint64_t v117 = v69;
      uint64_t v115 = 0;
      if (v68)
      {
        if (v68 == v118)
        {
          unsigned int v125 = buf;
          (*(void (**)(void *, uint8_t *))(v118[0] + 24))(v118, buf);
        }
        else
        {
          unsigned int v125 = (uint8_t *)(*(uint64_t (**)(void *))(*v68 + 16))(v68);
        }
      }
      else
      {
        unsigned int v125 = 0;
      }
      if (v117)
      {
        if (v117 == v116)
        {
          unsigned int v123 = v122;
          (*(void (**)(void *, void *))(v116[0] + 24))(v116, v122);
          unint64_t v70 = v115;
          if (v115)
          {
LABEL_85:
            if (v70 == v114)
            {
              __int16 v121 = v120;
              (*(void (**)(void *, void *))(v114[0] + 24))(v114, v120);
            }
            else
            {
              __int16 v121 = (void *)(*(uint64_t (**)(void *))(*v70 + 16))(v70);
            }
            goto LABEL_92;
          }
        }
        else
        {
          unsigned int v123 = (void *)(*(uint64_t (**)(void))(*v117 + 16))();
          unint64_t v70 = v115;
          if (v115) {
            goto LABEL_85;
          }
        }
      }
      else
      {
        unsigned int v123 = 0;
        unint64_t v70 = v115;
        if (v115) {
          goto LABEL_85;
        }
      }
      __int16 v121 = 0;
LABEL_92:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *, void *, void *))(*(void *)v61 + 80))(v61, v65, v66, buf, v122, v120);
      if (v121 == v120)
      {
        (*(void (**)(void *))(v120[0] + 32))(v120);
        uint64_t v5 = v102;
      }
      else
      {
        uint64_t v5 = v102;
        if (v121) {
          (*(void (**)(void))(*v121 + 40))();
        }
      }
      if (v123 == v122)
      {
        (*(void (**)(void *))(v122[0] + 32))(v122);
      }
      else if (v123)
      {
        (*(void (**)(void))(*v123 + 40))();
      }
      if (v125 == buf)
      {
        (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
      }
      else if (v125)
      {
        (*(void (**)(void))(*(void *)v125 + 40))();
      }
      if (v115 == v114)
      {
        (*(void (**)(void *))(v114[0] + 32))(v114);
      }
      else if (v115)
      {
        (*(void (**)(void))(*v115 + 40))();
      }
      if (v117 == v116)
      {
        (*(void (**)(void *))(v116[0] + 32))(v116);
      }
      else if (v117)
      {
        (*(void (**)(void))(*v117 + 40))();
      }
      if (v119 == v118)
      {
        (*(void (**)(void *))(v118[0] + 32))(v118);
      }
      else if (v119)
      {
        (*(void (**)(void))(*v119 + 40))();
      }
      uint64_t v71 = ***(uint64_t ****)(v104 + 8);
      if (v71 != *(uint64_t **)(**(void **)(v104 + 8) + 8) && *v71 != 0xCFC5133F599B8248)
      {
        std::__shared_count v72 = v71 + 5;
        do
        {
          uint64_t v73 = *v72;
          v72 += 5;
        }
        while (v73 != 0xCFC5133F599B8248);
        uint64_t v71 = v72 - 5;
      }
      uint64_t v74 = v71[3];
      unsigned int v75 = (std::__shared_weak_count *)v71[4];
      if (v75)
      {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      (*(void (**)(uint64_t, void))(*(void *)v74 + 56))(v74, v108[2]);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 72))(v61, 1);
      if (v58) {
        std::__shared_weak_count::__release_weak(v58);
      }
      uint64_t v10 = (void *)v109[4];
      unint64_t v14 = v113 + 1;
      uint64_t v113 = v14;
      uint64_t v4 = v103;
      uint64_t result = v100;
      BOOL v7 = v101;
      if (v14 != v10)
      {
        uint64_t v76 = v110[4];
        while (1)
        {
          unint64_t v77 = *((unsigned int *)v14 + 1);
          unint64_t v78 = v77 >> 7;
          if (v77 >> 7 < (v110[5] - v76) >> 3)
          {
            uint64_t v79 = *(void *)(v76 + 8 * v78);
            if (v79)
            {
              uint64_t v80 = v77 & 0x7F;
              unint64_t v81 = *(unsigned __int16 *)(v79 + 2 * v80);
              uint64_t v82 = v110[7];
              uint64_t v83 = v110[8];
              if (v81 < (v83 - v82) >> 3)
              {
                uint64_t v84 = v82 + 8 * v81;
                if (v84 != v83 && *(_DWORD *)(v84 + 4) == v77)
                {
                  uint64_t v86 = v111[4];
                  if (v78 < (v111[5] - v86) >> 3)
                  {
                    uint64_t v87 = *(void *)(v86 + 8 * v78);
                    if (v87)
                    {
                      unint64_t v88 = *(unsigned __int16 *)(v87 + 2 * v80);
                      uint64_t v89 = v111[7];
                      uint64_t v90 = v111[8];
                      if (v88 < (v90 - v89) >> 3)
                      {
                        uint64_t v91 = v89 + 8 * v88;
                        if (v91 != v90 && *(_DWORD *)(v91 + 4) == v77)
                        {
                          uint64_t v93 = v112[4];
                          if (v78 < (v112[5] - v93) >> 3)
                          {
                            uint64_t v94 = *(void *)(v93 + 8 * v78);
                            if (v94)
                            {
                              unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * v80);
                              uint64_t v97 = v112[7];
                              uint64_t v96 = v112[8];
                              if (v95 < (v96 - v97) >> 3)
                              {
                                uint64_t v98 = v97 + 8 * v95;
                                if (*(_DWORD *)(v98 + 4) == v77 && v98 != v96) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            unint64_t v14 = v10;
            goto LABEL_13;
          }
        }
        uint64_t v10 = v14;
LABEL_13:
        uint64_t v113 = v14;
      }
      if (v105 == v10) {
        goto LABEL_157;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[5] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  uint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  uint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  uint64_t v23 = (void *)a1[3];
  uint64_t v24 = v23[4];
  if (v3 < (v23[5] - v24) >> 3 && (uint64_t v25 = *(void *)(v24 + 8 * v3)) != 0)
  {
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * v6);
    uint64_t v29 = v23 + 7;
    uint64_t v28 = v23[7];
    uint64_t v27 = v29[1];
    if (v26 < (v27 - v28) >> 3)
    {
      uint64_t v30 = v28 + 8 * v26;
      if (*(_DWORD *)(v30 + 4) == v2) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = v27;
      }
      return v31 != v27;
    }
  }
  else
  {
    uint64_t v27 = v23[8];
  }
  uint64_t v31 = v27;
  return v31 != v27;
}

void *std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  *uint64_t result = &unk_1EF51F340;
  result[1] = v3;
  uint64_t v5 = a1[3];
  result[2] = v4;
  result[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t MDDisplayLayerRendererProvider::signpost(id *this)
{
  return [this[1] signpost];
}

uint64_t gdc::Registry::storage<md::erq::RenderTargetToSubmit>(int8x8_t *a1)
{
  uint64_t v10 = 0x38B0ED5EA8D13426;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x38B0ED5EA8D13426;
    if (*(void *)&v1 <= 0x38B0ED5EA8D13426uLL) {
      uint64_t v3 = 0x38B0ED5EA8D13426uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x38B0ED5EA8D13426;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x38B0ED5EA8D13426)
      {
        if (v5[2] == 0x38B0ED5EA8D13426) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x38B0ED5EA8D13426) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x38B0ED5EA8D13426) {
    goto LABEL_11;
  }
  return v5[3];
}

uint64_t gdc::Registry::storage<md::erq::RenderQueueToSubmit>(int8x8_t *a1)
{
  uint64_t v10 = 0x17922920A08D336CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x17922920A08D336CLL;
    if (*(void *)&v1 <= 0x17922920A08D336CuLL) {
      uint64_t v3 = 0x17922920A08D336CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x17922920A08D336CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x17922920A08D336CLL)
      {
        if (v5[2] == 0x17922920A08D336CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x17922920A08D336CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x17922920A08D336CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

uint64_t gdc::Registry::storage<md::erq::GPUWorkCallbacks>(int8x8_t *a1)
{
  uint64_t v10 = 0x3D9415B0404B6523;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3D9415B0404B6523;
    if (*(void *)&v1 <= 0x3D9415B0404B6523uLL) {
      uint64_t v3 = 0x3D9415B0404B6523uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3D9415B0404B6523;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3D9415B0404B6523)
      {
        if (v5[2] == 0x3D9415B0404B6523) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3D9415B0404B6523) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3D9415B0404B6523) {
    goto LABEL_11;
  }
  return v5[3];
}

__n128 std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint8x8_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint8x8_t v2 = &unk_1EF51F388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

uint64_t MDDisplayLayerRendererProvider::renderer(id *this)
{
  return [this[1] renderer];
}

void md::MapEngineCallbackGraphService::retain(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 248);
  if (a2 >= (unint64_t)((*(void *)(a1 + 256) - v5) >> 3)
    || ((uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (uint64_t v8 = (uint64_t *)(*(void *)(a1 + 272) + 16 * v6), v8 == *(uint64_t **)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t v9 = (std::__shared_weak_count *)v8[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v9;
    std::__shared_mutex_base::unlock_shared(v4);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 12), 1u);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1A19A45E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A19A46FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 16);
  unint64_t v36 = (pthread_rwlock_t *)(a1 + 16);
  BOOL v7 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"write lock", v8);
  }
  uint64_t v9 = *(unsigned __int16 *)(a1 + 242);
  if (!*(_WORD *)(a1 + 242)) {
    goto LABEL_31;
  }
  uint64_t v10 = *(void *)(a1 + 232);
  if (*(unsigned char *)(a1 + 247))
  {
    if (v9 >= 0x1E)
    {
      unint64_t v16 = *(_DWORD **)(a1 + 232);
      unint64_t v17 = *(unsigned __int16 *)(a1 + 242);
      do
      {
        unint64_t v18 = v17 >> 1;
        uint64_t v19 = &v16[v17 >> 1];
        unsigned int v21 = *v19;
        uint64_t v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2) {
          unint64_t v16 = v20;
        }
        else {
          unint64_t v17 = v18;
        }
      }
      while (v17);
      if (v16 == (_DWORD *)(v10 + 4 * v9)) {
        goto LABEL_31;
      }
      if (*v16 != a2) {
        goto LABEL_31;
      }
      unint64_t v15 = ((unint64_t)v16 - v10) >> 2;
      if (v9 == (unsigned __int16)v15) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        unsigned int v12 = *(_DWORD *)(v10 + 4 * v11);
        if (v12 >= a2) {
          break;
        }
        if (v9 == ++v11) {
          goto LABEL_31;
        }
      }
      if (v12 == a2) {
        LOWORD(v15) = v11;
      }
      else {
        LOWORD(v15) = *(_WORD *)(a1 + 242);
      }
      if (v9 == (unsigned __int16)v15) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    uint64_t v13 = 4 * v9;
    uint64_t v14 = *(_DWORD **)(a1 + 232);
    while (*v14 != a2)
    {
      ++v14;
      v13 -= 4;
      if (!v13)
      {
        uint64_t v14 = (_DWORD *)(v10 + 4 * v9);
        break;
      }
    }
    unint64_t v15 = ((unint64_t)v14 - v10) >> 2;
    if (v9 == (unsigned __int16)v15) {
      goto LABEL_31;
    }
  }
  if (*(unsigned __int16 *)(*(void *)(a1 + 232) + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v15) == a3) {
    goto LABEL_43;
  }
LABEL_31:
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 232), a2) = a3;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 232);
  float v22 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  LOBYTE(v23) = 1;
  if (v22 <= 0.0)
  {
    unint64_t v23 = *(unsigned __int16 *)(a1 + 242);
    if (v23 != *(unsigned __int16 *)(a1 + 226))
    {
LABEL_41:
      LOBYTE(v23) = 1;
      goto LABEL_42;
    }
    if (*(_WORD *)(a1 + 242))
    {
      uint64_t v24 = *(_DWORD **)(a1 + 232);
      uint64_t v25 = *(_DWORD **)(a1 + 216);
      if (*v24 == *v25)
      {
        uint64_t v26 = *(unsigned __int16 *)(a1 + 224);
        uint64_t v27 = *(unsigned __int16 *)(a1 + 240);
        if (*(unsigned __int16 *)((char *)v24 + v27) == *(unsigned __int16 *)((char *)v25 + v26))
        {
          unint64_t v28 = 0;
          uint64_t v29 = v24 + 1;
          uint64_t v30 = v25 + 1;
          uint64_t v31 = (uint64_t)v24 + v27 + 2;
          uint64_t v32 = (uint64_t)v25 + v26 + 2;
          while (v23 - 1 != v28)
          {
            uint64_t v33 = v28++;
            if (v29[v33] != v30[v33]) {
              goto LABEL_49;
            }
            if (*(unsigned __int16 *)(v31 + 2 * v33) != *(unsigned __int16 *)(v32 + 2 * v33))
            {
              unint64_t v28 = v33 + 1;
              goto LABEL_49;
            }
          }
          unint64_t v28 = *(unsigned __int16 *)(a1 + 242);
LABEL_49:
          LOBYTE(v23) = v28 < v23;
          goto LABEL_42;
        }
      }
      goto LABEL_41;
    }
  }
LABEL_42:
  atomic_store(v23, (unsigned __int8 *)(a1 + 254));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  uint64_t v6 = v36;
LABEL_43:
  uint64_t v34 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if (v34)
  {
    geo::read_write_lock::logFailure(v34, (uint64_t)"unlock", v35);
  }
}

void sub_1A19A49A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void md::StyleLogic::reset(md::StyleLogic *this)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 54);
  uint64_t v4 = (char *)this + 424;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 56);
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 75);
  *((_OWORD *)this + 37) = 0u;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 77);
  *((void *)this + 76) = 0;
  *((void *)this + 77) = 0;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 96);
  *((void *)this + 95) = 0;
  *((void *)this + 96) = 0;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 98);
  *((void *)this + 97) = 0;
  *((void *)this + 98) = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 117);
  *((_OWORD *)this + 58) = 0u;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 119);
  *((void *)this + 118) = 0;
  *((void *)this + 119) = 0;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)((char *)&v116 + 7) = 0;
  *(void *)&long long v116 = 0;
  HIBYTE(v116) = 1;
  *(void *)((char *)&v115 + 7) = 0;
  *(void *)&long long v115 = 0;
  HIBYTE(v115) = 1;
  uint64_t v13 = *((void *)this + 28);
  if (v13)
  {
    uint64_t v117 = v13 + 16;
    uint64_t v14 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v13 + 16));
    if (v14) {
      geo::read_write_lock::logFailure(v14, (uint64_t)"read lock", v15);
    }
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map((uint64_t *)&v114, (uint64_t *)(v13 + 216));
    unint64_t v16 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v13 + 16));
    if (v16) {
      geo::read_write_lock::logFailure(v16, (uint64_t)"unlock", v17);
    }
    uint64_t v18 = *((void *)this + 28);
    long long v116 = v114;
    uint64_t v117 = v18 + 16;
    uint64_t v19 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v18 + 16));
    if (v19) {
      geo::read_write_lock::logFailure(v19, (uint64_t)"read lock", v20);
    }
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map((uint64_t *)&v114, (uint64_t *)(v18 + 232));
    unsigned int v21 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v18 + 16));
    if (v21) {
      geo::read_write_lock::logFailure(v21, (uint64_t)"unlock", v22);
    }
    if (!BYTE14(v115))
    {
      uint64_t v23 = v115;
      if ((void)v115)
      {
        uint64_t v24 = gss::Allocator::instance(v21);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 40))(v24, v23, WORD6(v115));
      }
    }
    long long v115 = v114;
  }
  md::StyleLogic::updateConfiguration(this, *((_DWORD *)this + 274));
  uint64_t v25 = *((void *)this + 28);
  if (v25)
  {
    if (!v13)
    {
      uint64_t v44 = gss::ClientStyleState<gss::PropertyID>::sourceMapDisplayStyle(*((void *)this + 26));
      gss::ClientStyleState<gss::ScenePropertyID>::setSourceMapDisplayStyle(v25, v44);
      uint64_t v45 = *((void *)this + 28);
      uint64_t v46 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(*((void *)this + 26));
      gss::ClientStyleState<gss::ScenePropertyID>::setTargetMapDisplayStyle(v45, v46);
      goto LABEL_90;
    }
    *(void *)&long long v114 = v25 + 16;
    uint64_t v26 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v25 + 16));
    if (v26) {
      geo::read_write_lock::logFailure(v26, (uint64_t)"write lock", v27);
    }
    unsigned int v28 = WORD5(v116);
    if (WORD5(v116))
    {
      uint64_t v29 = 0;
      unsigned int v30 = 0;
      uint64_t v31 = v116;
      uint64_t v32 = v116 + WORD4(v116);
      do
      {
        if (v30 < v28)
        {
          uint64_t v29 = (unsigned int *)(v31 + 4 * v30);
          int8x8_t v1 = (__int16 *)(v32 + 2 * v30);
        }
        __int16 v33 = *v1;
        *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(v25 + 216), *v29) = v33;
        unsigned int v34 = v30 + 1;
        if (v30 + 1 < v28) {
          ++v30;
        }
        else {
          unsigned int v30 = v28;
        }
      }
      while (v34 < v28);
    }
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(v25 + 216);
    float v35 = COERCE_FLOAT(atomic_load((unsigned int *)(v25 + 256)));
    LOBYTE(v36) = 1;
    if (v35 <= 0.0)
    {
      unint64_t v36 = *(unsigned __int16 *)(v25 + 242);
      if (v36 != *(unsigned __int16 *)(v25 + 226)) {
        goto LABEL_64;
      }
      if (!*(_WORD *)(v25 + 242)) {
        goto LABEL_65;
      }
      uint64_t v37 = *(_DWORD **)(v25 + 232);
      uint64_t v38 = *(_DWORD **)(v25 + 216);
      if (*v37 == *v38
        && (uint64_t v39 = (unsigned __int16 *)((char *)v38 + *(unsigned __int16 *)(v25 + 224)),
            BOOL v40 = (unsigned __int16 *)((char *)v37 + *(unsigned __int16 *)(v25 + 240)),
            *v40 == *v39))
      {
        unint64_t v41 = 0;
        uint64_t v42 = 1;
        while (1)
        {
          if (v36 == v42)
          {
            unint64_t v43 = *(unsigned __int16 *)(v25 + 242);
            goto LABEL_143;
          }
          unint64_t v43 = v42;
          ++v41;
          if (v37[v42] != v38[v42]) {
            break;
          }
          ++v42;
          if (v40[v43] != v39[v43]) {
            goto LABEL_143;
          }
        }
        unint64_t v43 = v41;
LABEL_143:
        LOBYTE(v36) = v43 < v36;
      }
      else
      {
LABEL_64:
        LOBYTE(v36) = 1;
      }
    }
LABEL_65:
    atomic_store(v36, (unsigned __int8 *)(v25 + 254));
    atomic_fetch_add((atomic_uint *volatile)(v25 + 248), 1u);
    uint64_t v49 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v114);
    if (v49) {
      geo::read_write_lock::logFailure(v49, (uint64_t)"unlock", v50);
    }
    uint64_t v51 = *((void *)this + 28);
    *(void *)&long long v114 = v51 + 16;
    unint64_t v52 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v51 + 16));
    if (v52) {
      geo::read_write_lock::logFailure(v52, (uint64_t)"write lock", v53);
    }
    unsigned int v54 = WORD5(v115);
    if (WORD5(v115))
    {
      uint64_t v55 = 0;
      unsigned int v56 = 0;
      uint64_t v57 = v115;
      uint64_t v58 = v115 + WORD4(v115);
      do
      {
        if (v56 < v54)
        {
          uint64_t v55 = (unsigned int *)(v57 + 4 * v56);
          int8x8_t v1 = (__int16 *)(v58 + 2 * v56);
        }
        __int16 v59 = *v1;
        *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(v51 + 232), *v55) = v59;
        unsigned int v60 = v56 + 1;
        if (v56 + 1 < v54) {
          ++v56;
        }
        else {
          unsigned int v56 = v54;
        }
      }
      while (v60 < v54);
    }
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(v51 + 232);
    float v61 = COERCE_FLOAT(atomic_load((unsigned int *)(v51 + 256)));
    LOBYTE(v62) = 1;
    if (v61 > 0.0) {
      goto LABEL_88;
    }
    unint64_t v62 = *(unsigned __int16 *)(v51 + 242);
    if (v62 == *(unsigned __int16 *)(v51 + 226))
    {
      if (!*(_WORD *)(v51 + 242)) {
        goto LABEL_88;
      }
      uint64_t v63 = *(_DWORD **)(v51 + 232);
      os_signpost_id_t v64 = *(_DWORD **)(v51 + 216);
      if (*v63 == *v64)
      {
        uint64_t v65 = (unsigned __int16 *)((char *)v64 + *(unsigned __int16 *)(v51 + 224));
        uint64_t v66 = (unsigned __int16 *)((char *)v63 + *(unsigned __int16 *)(v51 + 240));
        if (*v66 == *v65)
        {
          unint64_t v67 = 0;
          uint64_t v68 = 1;
          while (1)
          {
            if (v62 == v68)
            {
              unint64_t v69 = *(unsigned __int16 *)(v51 + 242);
              goto LABEL_145;
            }
            unint64_t v69 = v68;
            ++v67;
            if (v63[v68] != v64[v68]) {
              break;
            }
            ++v68;
            if (v66[v69] != v65[v69]) {
              goto LABEL_145;
            }
          }
          unint64_t v69 = v67;
LABEL_145:
          LOBYTE(v62) = v69 < v62;
          goto LABEL_88;
        }
      }
    }
    LOBYTE(v62) = 1;
LABEL_88:
    atomic_store(v62, (unsigned __int8 *)(v51 + 254));
    atomic_fetch_add((atomic_uint *volatile)(v51 + 248), 1u);
    unint64_t v70 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v114);
    if (v70) {
      geo::read_write_lock::logFailure(v70, (uint64_t)"unlock", v71);
    }
LABEL_90:
    uint64_t v72 = *((void *)this + 28);
    LODWORD(v47) = *(_DWORD *)(*((void *)this + 26) + 256);
    float v73 = COERCE_FLOAT(atomic_load((unsigned int *)(v72 + 256)));
    *(float *)&double v48 = v73;
    if (v73 == *(float *)&v47)
    {
LABEL_104:
      uint64_t v89 = *((void *)this + 28);
      objc_msgSend(*((id *)this + 19), "size", v47, v48);
      double v91 = v90;
      [*((id *)this + 19) size];
      double v93 = fmin(v92, v91);
      if (v93 <= 250.0)
      {
        int v94 = 0;
      }
      else if (v93 <= 450.0)
      {
        int v94 = 1;
      }
      else if (v93 <= 850.0)
      {
        int v94 = 2;
      }
      else
      {
        int v94 = 3;
      }
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(v89, 0x10018u, v94);
      goto LABEL_112;
    }
    *(_DWORD *)(v72 + 256) = *(_DWORD *)(*((void *)this + 26) + 256);
    float v74 = COERCE_FLOAT(atomic_load((unsigned int *)(v72 + 256)));
    *(float *)&double v47 = v74;
    if (v74 <= 0.0)
    {
      unint64_t v75 = *(unsigned __int16 *)(v72 + 242);
      if (v75 == *(unsigned __int16 *)(v72 + 226))
      {
        if (!*(_WORD *)(v72 + 242)) {
          goto LABEL_102;
        }
        uint64_t v76 = *(_DWORD **)(v72 + 232);
        unint64_t v77 = *(_DWORD **)(v72 + 216);
        if (*v76 == *v77)
        {
          uint64_t v78 = *(unsigned __int16 *)(v72 + 224);
          uint64_t v79 = *(unsigned __int16 *)(v72 + 240);
          if (*(unsigned __int16 *)((char *)v76 + v79) == *(unsigned __int16 *)((char *)v77 + v78))
          {
            unint64_t v80 = 0;
            unint64_t v81 = v76 + 1;
            uint64_t v82 = v77 + 1;
            uint64_t v83 = (uint64_t)v76 + v79 + 2;
            uint64_t v84 = (uint64_t)v77 + v78 + 2;
            while (v75 - 1 != v80)
            {
              uint64_t v85 = v80++;
              if (v81[v85] != v82[v85]) {
                goto LABEL_140;
              }
              if (*(unsigned __int16 *)(v83 + 2 * v85) != *(unsigned __int16 *)(v84 + 2 * v85))
              {
                unint64_t v80 = v85 + 1;
                goto LABEL_140;
              }
            }
            unint64_t v80 = *(unsigned __int16 *)(v72 + 242);
LABEL_140:
            LOBYTE(v75) = v80 < v75;
            goto LABEL_102;
          }
        }
      }
    }
    LOBYTE(v75) = 1;
LABEL_102:
    atomic_store(v75, (unsigned __int8 *)(v72 + 254));
    int v86 = *(unsigned __int8 *)(v72 + 253);
    unsigned __int8 v87 = atomic_load((unsigned __int8 *)(v72 + 254));
    if (v86 != (v87 & 1))
    {
      unsigned __int8 v88 = atomic_load((unsigned __int8 *)(v72 + 254));
      *(unsigned char *)(v72 + 253) = v88 & 1;
      atomic_fetch_add((atomic_uint *volatile)(v72 + 248), 1u);
    }
    goto LABEL_104;
  }
LABEL_112:
  id v95 = *((id *)this + 145);
  uint64_t v96 = v95;
  uint64_t v97 = (std::__shared_weak_count *)*((void *)this + 33);
  uint64_t v112 = *((void *)this + 32);
  uint64_t v113 = v97;
  if (v97) {
    atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v95 setStyleManager:&v112];
  uint64_t v98 = v113;
  if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }

  id v99 = *((id *)this + 145);
  int v100 = v99;
  uint64_t v101 = (std::__shared_weak_count *)*((void *)this + 29);
  uint64_t v110 = *((void *)this + 28);
  uint64_t v111 = v101;
  if (v101) {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v99 setSceneClientStyleState:&v110];
  uint64_t v102 = v111;
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }

  LOBYTE(v114) = 4;
  unsigned int v103 = (char *)*((void *)this + 141);
  uint64_t v104 = (char *)*((void *)this + 142);
  if (v103 != v104)
  {
    while (*v103 <= 3u)
    {
      if (++v103 == v104) {
        goto LABEL_128;
      }
    }
  }
  if (v103 == v104 || (uint64_t v104 = v103, *v103 != 4)) {
LABEL_128:
  }
    std::vector<md::StyleManagerEvent>::insert((uint64_t)this + 1128, v104, (char *)&v114);
  float v105 = (gss::Allocator *)**((void **)this + 155);
  if (v105)
  {
    LOBYTE(v114) = 8;
    md::MapEngine::setNeedsTick((uint64_t)v105, &v114);
  }
  if (!BYTE14(v115))
  {
    uint64_t v106 = v115;
    if ((void)v115)
    {
      uint64_t v107 = gss::Allocator::instance(v105);
      float v105 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v107 + 40))(v107, v106, WORD6(v115));
    }
  }
  if (!BYTE14(v116))
  {
    uint64_t v108 = v116;
    if ((void)v116)
    {
      uint64_t v109 = gss::Allocator::instance(v105);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v109 + 40))(v109, v108, WORD6(v116));
    }
  }
}

void sub_1A19A54C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va1);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va2);
  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v7 = (pthread_rwlock_t *)(a1 + 16);
  uint64_t v49 = (pthread_rwlock_t *)(a1 + 16);
  uint64_t v8 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v8) {
    geo::read_write_lock::logFailure(v8, (uint64_t)"write lock", v9);
  }
  uint64_t v10 = *(unsigned __int16 *)(a1 + 226);
  if (!*(_WORD *)(a1 + 226)) {
    goto LABEL_24;
  }
  uint64_t v11 = *(void *)(a1 + 216);
  if (*(unsigned char *)(a1 + 231))
  {
    if (v10 >= 0x1E)
    {
      unint64_t v16 = *(_DWORD **)(a1 + 216);
      unint64_t v17 = *(unsigned __int16 *)(a1 + 226);
      do
      {
        unint64_t v18 = v17 >> 1;
        uint64_t v19 = &v16[v17 >> 1];
        unsigned int v21 = *v19;
        uint64_t v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2) {
          unint64_t v16 = v20;
        }
        else {
          unint64_t v17 = v18;
        }
      }
      while (v17);
      if (v16 == (_DWORD *)(v11 + 4 * v10)) {
        goto LABEL_24;
      }
      if (*v16 != a2) {
        goto LABEL_24;
      }
      unint64_t v12 = ((unint64_t)v16 - v11) >> 2;
      if (v10 == (unsigned __int16)v12) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v12 = 0;
      while (1)
      {
        unsigned int v13 = *(_DWORD *)(v11 + 4 * v12);
        if (v13 >= a2) {
          break;
        }
        if (v10 == ++v12) {
          goto LABEL_24;
        }
      }
      if (v13 != a2) {
        LOWORD(v12) = *(_WORD *)(a1 + 226);
      }
      if (v10 == (unsigned __int16)v12) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t v14 = 4 * v10;
    unint64_t v15 = *(_DWORD **)(a1 + 216);
    while (*v15 != a2)
    {
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        unint64_t v15 = (_DWORD *)(v11 + 4 * v10);
        break;
      }
    }
    unint64_t v12 = ((unint64_t)v15 - v11) >> 2;
    if (v10 == (unsigned __int16)v12) {
      goto LABEL_24;
    }
  }
  if (v10 > (unsigned __int16)v12) {
    uint64_t v3 = (unsigned __int16 *)(v11 + *(unsigned __int16 *)(a1 + 224) + 2 * (unsigned __int16)v12);
  }
  if (*v3 == a3)
  {
    int v22 = 0;
    unint64_t v23 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242)) {
      goto LABEL_62;
    }
    goto LABEL_25;
  }
LABEL_24:
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 216), a2) = a3;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 216);
  int v22 = 1;
  unint64_t v23 = *(unsigned __int16 *)(a1 + 242);
  if (!*(_WORD *)(a1 + 242))
  {
LABEL_62:
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 232), a2) = a3;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 232);
    goto LABEL_63;
  }
LABEL_25:
  uint64_t v24 = *(void *)(a1 + 232);
  if (*(unsigned char *)(a1 + 247))
  {
    if (v23 >= 0x1E)
    {
      uint64_t v29 = *(_DWORD **)(a1 + 232);
      unint64_t v30 = v23;
      do
      {
        unint64_t v31 = v30 >> 1;
        uint64_t v32 = &v29[v30 >> 1];
        unsigned int v34 = *v32;
        __int16 v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < a2) {
          uint64_t v29 = v33;
        }
        else {
          unint64_t v30 = v31;
        }
      }
      while (v30);
      if (v29 == (_DWORD *)(v24 + 4 * v23)) {
        goto LABEL_62;
      }
      if (*v29 != a2) {
        goto LABEL_62;
      }
      unint64_t v25 = ((unint64_t)v29 - v24) >> 2;
      if (v23 == (unsigned __int16)v25) {
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v25 = 0;
      while (1)
      {
        unsigned int v26 = *(_DWORD *)(v24 + 4 * v25);
        if (v26 >= a2) {
          break;
        }
        if (v23 == ++v25) {
          goto LABEL_62;
        }
      }
      if (v26 != a2) {
        LOWORD(v25) = v23;
      }
      if (v23 == (unsigned __int16)v25) {
        goto LABEL_62;
      }
    }
  }
  else
  {
    uint64_t v27 = 4 * v23;
    unsigned int v28 = *(_DWORD **)(a1 + 232);
    while (*v28 != a2)
    {
      ++v28;
      v27 -= 4;
      if (!v27)
      {
        unsigned int v28 = (_DWORD *)(v24 + 4 * v23);
        break;
      }
    }
    unint64_t v25 = ((unint64_t)v28 - v24) >> 2;
    if (v23 == (unsigned __int16)v25) {
      goto LABEL_62;
    }
  }
  if (v23 > (unsigned __int16)v25) {
    uint64_t v3 = (unsigned __int16 *)(v24 + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v25);
  }
  if (*v3 != a3) {
    goto LABEL_62;
  }
  if (!v22) {
    goto LABEL_75;
  }
LABEL_63:
  float v35 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  LOBYTE(v36) = 1;
  if (v35 <= 0.0)
  {
    unint64_t v36 = *(unsigned __int16 *)(a1 + 242);
    if (v36 != *(unsigned __int16 *)(a1 + 226))
    {
LABEL_73:
      LOBYTE(v36) = 1;
      goto LABEL_74;
    }
    if (*(_WORD *)(a1 + 242))
    {
      uint64_t v37 = *(_DWORD **)(a1 + 232);
      uint64_t v38 = *(_DWORD **)(a1 + 216);
      if (*v37 == *v38)
      {
        uint64_t v39 = *(unsigned __int16 *)(a1 + 224);
        uint64_t v40 = *(unsigned __int16 *)(a1 + 240);
        if (*(unsigned __int16 *)((char *)v37 + v40) == *(unsigned __int16 *)((char *)v38 + v39))
        {
          unint64_t v41 = 0;
          uint64_t v42 = v37 + 1;
          unint64_t v43 = v38 + 1;
          uint64_t v44 = (uint64_t)v37 + v40 + 2;
          uint64_t v45 = (uint64_t)v38 + v39 + 2;
          while (v36 - 1 != v41)
          {
            uint64_t v46 = v41++;
            if (v42[v46] != v43[v46]) {
              goto LABEL_81;
            }
            if (*(unsigned __int16 *)(v44 + 2 * v46) != *(unsigned __int16 *)(v45 + 2 * v46))
            {
              unint64_t v41 = v46 + 1;
              goto LABEL_81;
            }
          }
          unint64_t v41 = *(unsigned __int16 *)(a1 + 242);
LABEL_81:
          LOBYTE(v36) = v41 < v36;
          goto LABEL_74;
        }
      }
      goto LABEL_73;
    }
  }
LABEL_74:
  atomic_store(v36, (unsigned __int8 *)(a1 + 254));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  uint64_t v7 = v49;
LABEL_75:
  double v47 = (geo::read_write_lock *)pthread_rwlock_unlock(v7);
  if (v47)
  {
    geo::read_write_lock::logFailure(v47, (uint64_t)"unlock", v48);
  }
}

void sub_1A19A5B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(uint64_t result)
{
  if (!*(unsigned char *)(result + 14))
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 15))
    {
      __int16 v2 = *(_WORD *)(result + 12);
      unsigned __int16 v3 = (4 * v2) | 2;
      uint64_t v4 = gss::Allocator::instance((gss::Allocator *)result);
      __n128 result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v4 + 16))(v4, (unsigned __int16)(v3 + 2 * v2) & 0xFFFE, 1);
      uint64_t v5 = result;
      if (*(void *)v1)
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1, (_DWORD *)result, (_WORD *)(result + v3), 1);
        uint64_t v7 = gss::Allocator::instance(v6);
        __n128 result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 40))(v7, *(void *)v1, *(unsigned __int16 *)(v1 + 12));
      }
      *(_WORD *)(v1 + 12) = v2;
      *(void *)uint64_t v1 = v5;
      *(_WORD *)(v1 + 8) = v3;
    }
  }
  return result;
}

void geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _DWORD *__dst, _WORD *a3, int a4)
{
  unint64_t v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return;
  }
  if (a4)
  {
    uint64_t v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    uint64_t v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      unint64_t v14 = ((4 * v4 - 4) >> 2) + 1;
      uint64_t v10 = v14 & 0x7FFFFFFFFFFFFFF8;
      int32x4_t v15 = (int32x4_t)xmmword_1A28FC7A0;
      unint64_t v16 = v8 + 1;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16[-1] = v15;
        *unint64_t v16 = vaddq_s32(v15, v17);
        int32x4_t v15 = vaddq_s32(v15, v18);
        v16 += 2;
        v19 -= 8;
      }
      while (v19);
      if (v14 == v10) {
        goto LABEL_15;
      }
      uint64_t v11 = (unsigned int *)v8 + (v14 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      uint64_t v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_15:
    unint64_t v23 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v23, 126 - 2 * __clz(v4), 1);
    if (*(_WORD *)(a1 + 10))
    {
      unint64_t v20 = 0;
      uint64_t v21 = *(void *)a1;
      do
      {
        uint64_t v22 = v8->u32[v20];
        __dst[v20] = *(_DWORD *)(v21 + 4 * v22);
        a3[v20++] = *(_WORD *)(v21 + *(unsigned __int16 *)(a1 + 8) + 2 * v22);
      }
      while (v20 < *(unsigned __int16 *)(a1 + 10));
    }
    *(unsigned char *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, 4 * v4);
  uint64_t v12 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    unsigned int v13 = (const void *)(*(void *)a1 + *(unsigned __int16 *)(a1 + 8));
    memmove(a3, v13, 2 * v12);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
LABEL_2:
  uint64_t v12 = a2 - 1;
  unsigned int v13 = v11;
  while (1)
  {
    uint64_t v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v91 = *v12;
          uint64_t v92 = *v13;
          if (*(_DWORD *)(**a3 + 4 * v91) < *(_DWORD *)(**a3 + 4 * v92))
          {
            *unsigned int v13 = v91;
            *uint64_t v12 = v92;
          }
          return result;
        case 3:
          uint64_t v93 = *v13;
          uint64_t v94 = v13[1];
          uint64_t v95 = **a3;
          unsigned int v96 = *(_DWORD *)(v95 + 4 * v94);
          unsigned int v97 = *(_DWORD *)(v95 + 4 * v93);
          uint64_t v98 = *v12;
          unsigned int v99 = *(_DWORD *)(v95 + 4 * v98);
          if (v96 >= v97)
          {
            if (v99 < v96)
            {
              v13[1] = v98;
              *uint64_t v12 = v94;
              uint64_t v137 = *v13;
              uint64_t v136 = v13[1];
              if (*(_DWORD *)(v95 + 4 * v136) < *(_DWORD *)(v95 + 4 * v137))
              {
                *unsigned int v13 = v136;
                v13[1] = v137;
              }
            }
          }
          else if (v99 >= v96)
          {
            *unsigned int v13 = v94;
            v13[1] = v93;
            uint64_t v162 = *v12;
            if (*(_DWORD *)(v95 + 4 * v162) < v97)
            {
              v13[1] = v162;
              *uint64_t v12 = v93;
            }
          }
          else
          {
            *unsigned int v13 = v98;
            *uint64_t v12 = v93;
          }
          return result;
        case 4:
          uint64_t v101 = v13 + 1;
          uint64_t v102 = v13[1];
          unsigned int v103 = v13 + 2;
          uint64_t v104 = v13[2];
          uint64_t v105 = *v13;
          uint64_t v106 = **a3;
          unsigned int v107 = *(_DWORD *)(v106 + 4 * v102);
          unsigned int v108 = *(_DWORD *)(v106 + 4 * v105);
          unsigned int v109 = v104;
          unsigned int v110 = *(_DWORD *)(v106 + 4 * v104);
          if (v107 >= v108)
          {
            if (v110 < v107)
            {
              uint64_t v111 = v13;
              *uint64_t v101 = v104;
              *unsigned int v103 = v102;
              __n128 result = (uint64_t)(v13 + 1);
              uint64_t v112 = v102;
              uint64_t v104 = v102;
              if (v110 >= v108) {
                goto LABEL_172;
              }
              goto LABEL_170;
            }
          }
          else
          {
            if (v110 < v107)
            {
              uint64_t v111 = v13;
              __n128 result = (uint64_t)(v13 + 2);
              uint64_t v112 = *v13;
              LODWORD(v102) = *v13;
LABEL_170:
              unsigned int *v111 = v109;
              *(_DWORD *)__n128 result = v105;
              uint64_t v104 = v112;
              goto LABEL_172;
            }
            uint64_t v111 = v13 + 1;
            *unsigned int v13 = v102;
            v13[1] = v105;
            __n128 result = (uint64_t)(v13 + 2);
            uint64_t v112 = v105;
            LODWORD(v102) = v105;
            if (v110 < v108) {
              goto LABEL_170;
            }
          }
          LODWORD(v102) = v104;
LABEL_172:
          uint64_t v163 = *v12;
          if (*(_DWORD *)(v106 + 4 * v163) < *(_DWORD *)(v106 + 4 * v104))
          {
            *unsigned int v103 = v163;
            *uint64_t v12 = v102;
            uint64_t v164 = *v103;
            uint64_t v165 = *v101;
            unsigned int v166 = *(_DWORD *)(v106 + 4 * v164);
            if (v166 < *(_DWORD *)(v106 + 4 * v165))
            {
              v13[1] = v164;
              void v13[2] = v165;
              uint64_t v167 = *v13;
              if (v166 < *(_DWORD *)(v106 + 4 * v167))
              {
                *unsigned int v13 = v164;
                v13[1] = v167;
              }
            }
          }
          return result;
        case 5:
          uint64_t v100 = **a3;
          return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, v100);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v123 = (unint64_t)(v15 - 2) >> 1;
        unint64_t v124 = *a3;
        int64_t v125 = v123;
        do
        {
          if (v123 >= v125)
          {
            uint64_t v127 = (2 * v125) | 1;
            uint64_t v128 = &v13[v127];
            uint64_t v129 = *v128;
            if (2 * v125 + 2 < v15)
            {
              uint64_t v130 = *v124;
              if (*(unsigned int *)(*v124 + 4 * v129) < (unint64_t)*(unsigned int *)(*v124 + 4 * v128[1]))
              {
                uint64_t v129 = v128[1];
                ++v128;
                uint64_t v127 = 2 * v125 + 2;
              }
            }
            else
            {
              uint64_t v130 = *v124;
            }
            unint64_t v131 = &v13[v125];
            uint64_t v132 = *v131;
            __n128 result = *(unsigned int *)(v130 + 4 * v132);
            if (*(_DWORD *)(v130 + 4 * v129) >= result)
            {
              do
              {
                unsigned int v133 = v128;
                *unint64_t v131 = v129;
                if (v123 < v127) {
                  break;
                }
                uint64_t v134 = (2 * v127) | 1;
                uint64_t v128 = &v13[v134];
                uint64_t v135 = 2 * v127 + 2;
                uint64_t v129 = *v128;
                if (v135 < v15
                  && *(unsigned int *)(v130 + 4 * v129) < (unint64_t)*(unsigned int *)(v130 + 4 * v128[1]))
                {
                  uint64_t v129 = v128[1];
                  ++v128;
                  uint64_t v134 = v135;
                }
                unint64_t v131 = v133;
                uint64_t v127 = v134;
              }
              while (*(_DWORD *)(v130 + 4 * v129) >= result);
              unsigned int *v133 = v132;
            }
          }
          BOOL v126 = v125-- <= 0;
        }
        while (!v126);
        uint64_t v144 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v145 = 0;
          unsigned int v146 = *v13;
          uint64_t v147 = *a3;
          uint64_t v148 = v13;
          do
          {
            uint64_t v151 = &v148[v145];
            unsigned int v152 = v151[1];
            unint64_t v150 = v151 + 1;
            uint64_t v149 = v152;
            uint64_t v153 = (2 * v145) | 1;
            uint64_t v145 = 2 * v145 + 2;
            if (v145 < v144)
            {
              __n128 result = v150[1];
              if (*(_DWORD *)(*v147 + 4 * v149) >= *(_DWORD *)(*v147 + 4 * result))
              {
                uint64_t v145 = v153;
              }
              else
              {
                LODWORD(v149) = v150[1];
                ++v150;
              }
            }
            else
            {
              uint64_t v145 = v153;
            }
            unsigned int *v148 = v149;
            uint64_t v148 = v150;
          }
          while (v145 <= (uint64_t)((unint64_t)(v144 - 2) >> 1));
          if (v150 == --a2)
          {
            *unint64_t v150 = v146;
          }
          else
          {
            *unint64_t v150 = *a2;
            *a2 = v146;
            uint64_t v154 = (char *)v150 - (char *)v13 + 4;
            if (v154 >= 5)
            {
              unint64_t v155 = (((unint64_t)v154 >> 2) - 2) >> 1;
              uint64_t v156 = &v13[v155];
              uint64_t v157 = *v156;
              uint64_t v158 = *v150;
              uint64_t v159 = *v147;
              unsigned int v160 = *(_DWORD *)(v159 + 4 * v158);
              if (*(_DWORD *)(v159 + 4 * v157) < v160)
              {
                do
                {
                  uint64_t v161 = v156;
                  *unint64_t v150 = v157;
                  if (!v155) {
                    break;
                  }
                  unint64_t v155 = (v155 - 1) >> 1;
                  uint64_t v156 = &v13[v155];
                  uint64_t v157 = *v156;
                  unint64_t v150 = v161;
                }
                while (*(_DWORD *)(v159 + 4 * v157) < v160);
                *uint64_t v161 = v158;
              }
            }
          }
          BOOL v126 = v144-- <= 2;
        }
        while (!v126);
      }
      return result;
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    int32x4_t v17 = &v13[(unint64_t)v15 >> 1];
    uint64_t v18 = **a3;
    uint64_t v19 = *v12;
    unsigned int v20 = *(_DWORD *)(v18 + 4 * v19);
    if ((unint64_t)v14 >= 0x201)
    {
      uint64_t v21 = *v17;
      uint64_t v22 = *v13;
      unsigned int v23 = *(_DWORD *)(v18 + 4 * v21);
      unsigned int v24 = *(_DWORD *)(v18 + 4 * v22);
      if (v23 >= v24)
      {
        if (v20 < v23)
        {
          *int32x4_t v17 = v19;
          *uint64_t v12 = v21;
          uint64_t v29 = *v17;
          uint64_t v30 = *v13;
          if (*(_DWORD *)(v18 + 4 * v29) < *(_DWORD *)(v18 + 4 * v30))
          {
            *unsigned int v13 = v29;
            *int32x4_t v17 = v30;
          }
        }
      }
      else
      {
        if (v20 < v23)
        {
          *unsigned int v13 = v19;
          goto LABEL_22;
        }
        *unsigned int v13 = v21;
        *int32x4_t v17 = v22;
        uint64_t v33 = *v12;
        if (*(_DWORD *)(v18 + 4 * v33) < v24)
        {
          *int32x4_t v17 = v33;
LABEL_22:
          *uint64_t v12 = v22;
        }
      }
      unsigned int v34 = &v13[v16];
      unsigned int v37 = *(v34 - 1);
      float v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v13[1];
      unsigned int v39 = *(_DWORD *)(v18 + 4 * v37);
      unsigned int v40 = *(_DWORD *)(v18 + 4 * v38);
      uint64_t v41 = *(a2 - 2);
      unsigned int v42 = *(_DWORD *)(v18 + 4 * v41);
      if (v39 >= v40)
      {
        if (v42 < v39)
        {
          *float v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v13[1];
          if (*(_DWORD *)(v18 + 4 * v43) < *(_DWORD *)(v18 + 4 * v44))
          {
            v13[1] = v43;
            *float v35 = v44;
          }
        }
      }
      else
      {
        if (v42 < v39)
        {
          v13[1] = v41;
          goto LABEL_34;
        }
        v13[1] = v36;
        *float v35 = v38;
        uint64_t v46 = *(a2 - 2);
        if (*(_DWORD *)(v18 + 4 * v46) < v40)
        {
          *float v35 = v46;
LABEL_34:
          *(a2 - 2) = v38;
        }
      }
      double v47 = &v13[v16];
      unsigned int v50 = v47[1];
      double v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v13[2];
      unsigned int v52 = *(_DWORD *)(v18 + 4 * v50);
      unsigned int v53 = *(_DWORD *)(v18 + 4 * v51);
      uint64_t v54 = *(a2 - 3);
      unsigned int v55 = *(_DWORD *)(v18 + 4 * v54);
      if (v52 >= v53)
      {
        if (v55 < v52)
        {
          *double v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v13[2];
          if (*(_DWORD *)(v18 + 4 * v56) < *(_DWORD *)(v18 + 4 * v57))
          {
            void v13[2] = v56;
            *double v48 = v57;
          }
        }
      }
      else
      {
        if (v55 < v52)
        {
          void v13[2] = v54;
          goto LABEL_43;
        }
        void v13[2] = v49;
        *double v48 = v51;
        uint64_t v58 = *(a2 - 3);
        if (*(_DWORD *)(v18 + 4 * v58) < v53)
        {
          *double v48 = v58;
LABEL_43:
          *(a2 - 3) = v51;
        }
      }
      uint64_t v59 = *v17;
      uint64_t v60 = *v35;
      unsigned int v61 = *(_DWORD *)(v18 + 4 * v59);
      unsigned int v62 = *(_DWORD *)(v18 + 4 * v60);
      uint64_t v63 = *v48;
      unsigned int v64 = *(_DWORD *)(v18 + 4 * v63);
      if (v61 >= v62)
      {
        if (v64 >= v61) {
          goto LABEL_51;
        }
        *int32x4_t v17 = v63;
        *double v48 = v59;
        double v48 = v17;
        LODWORD(v59) = v60;
        if (v64 >= v62)
        {
          LODWORD(v59) = v63;
          goto LABEL_51;
        }
      }
      else if (v64 >= v61)
      {
        *float v35 = v59;
        *int32x4_t v17 = v60;
        float v35 = v17;
        LODWORD(v59) = v63;
        if (v64 >= v62)
        {
          LODWORD(v59) = v60;
LABEL_51:
          unsigned int v65 = *v13;
          *unsigned int v13 = v59;
          *int32x4_t v17 = v65;
          goto LABEL_52;
        }
      }
      *float v35 = v63;
      *double v48 = v60;
      goto LABEL_51;
    }
    uint64_t v25 = *v13;
    uint64_t v26 = *v17;
    unsigned int v27 = *(_DWORD *)(v18 + 4 * v25);
    unsigned int v28 = *(_DWORD *)(v18 + 4 * v26);
    if (v27 >= v28)
    {
      if (v20 < v27)
      {
        *unsigned int v13 = v19;
        *uint64_t v12 = v25;
        uint64_t v31 = *v13;
        uint64_t v32 = *v17;
        if (*(_DWORD *)(v18 + 4 * v31) < *(_DWORD *)(v18 + 4 * v32))
        {
          *int32x4_t v17 = v31;
          *unsigned int v13 = v32;
        }
      }
      goto LABEL_52;
    }
    if (v20 < v27)
    {
      *int32x4_t v17 = v19;
LABEL_31:
      *uint64_t v12 = v26;
      goto LABEL_52;
    }
    *int32x4_t v17 = v25;
    *unsigned int v13 = v26;
    uint64_t v45 = *v12;
    if (*(_DWORD *)(v18 + 4 * v45) < v28)
    {
      *unsigned int v13 = v45;
      goto LABEL_31;
    }
LABEL_52:
    --a4;
    uint64_t v66 = *v13;
    if (a5)
    {
      unsigned int v67 = *(_DWORD *)(v18 + 4 * v66);
LABEL_55:
      uint64_t v68 = v13;
      do
      {
        unint64_t v69 = v68;
        unsigned int v71 = v68[1];
        ++v68;
        unsigned int v70 = v71;
      }
      while (*(_DWORD *)(v18 + 4 * v71) < v67);
      uint64_t v72 = a2;
      if (v69 == v13)
      {
        uint64_t v72 = a2;
        do
        {
          if (v68 >= v72) {
            break;
          }
          unsigned int v74 = *--v72;
        }
        while (*(_DWORD *)(v18 + 4 * v74) >= v67);
      }
      else
      {
        do
          unsigned int v73 = *--v72;
        while (*(_DWORD *)(v18 + 4 * v73) >= v67);
      }
      if (v68 < v72)
      {
        unsigned int v75 = *v72;
        unsigned int v76 = v70;
        unint64_t v77 = v68;
        uint64_t v78 = v72;
        do
        {
          unsigned int *v77 = v75;
          *uint64_t v78 = v76;
          do
          {
            unint64_t v69 = v77;
            unsigned int v79 = v77[1];
            ++v77;
            unsigned int v76 = v79;
          }
          while (*(_DWORD *)(v18 + 4 * v79) < v67);
          do
          {
            unsigned int v80 = *--v78;
            unsigned int v75 = v80;
          }
          while (*(_DWORD *)(v18 + 4 * v80) >= v67);
        }
        while (v77 < v78);
      }
      if (v69 != v13) {
        *unsigned int v13 = *v69;
      }
      *unint64_t v69 = v66;
      if (v68 < v72) {
        goto LABEL_74;
      }
      BOOL v81 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v69, *a3);
      unsigned int v13 = v69 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v69 + 1, a2, *a3);
      if (result)
      {
        a2 = v69;
        if (v81) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v81)
      {
LABEL_74:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v11, v69, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v13 = v69 + 1;
      }
    }
    else
    {
      unsigned int v67 = *(_DWORD *)(v18 + 4 * v66);
      if (*(_DWORD *)(v18 + 4 * *(v13 - 1)) < v67) {
        goto LABEL_55;
      }
      if (v67 < *(_DWORD *)(v18 + 4 * *v12))
      {
        do
        {
          unsigned int v82 = v13[1];
          ++v13;
        }
        while (v67 >= *(_DWORD *)(v18 + 4 * v82));
      }
      else
      {
        uint64_t v83 = v13 + 1;
        do
        {
          unsigned int v13 = v83;
          if (v83 >= a2) {
            break;
          }
          ++v83;
        }
        while (v67 >= *(_DWORD *)(v18 + 4 * *v13));
      }
      uint64_t v84 = a2;
      if (v13 < a2)
      {
        uint64_t v84 = a2;
        do
          unsigned int v85 = *--v84;
        while (v67 < *(_DWORD *)(v18 + 4 * v85));
      }
      if (v13 < v84)
      {
        unsigned int v86 = *v13;
        unsigned int v87 = *v84;
        do
        {
          *unsigned int v13 = v87;
          *uint64_t v84 = v86;
          do
          {
            unsigned int v88 = v13[1];
            ++v13;
            unsigned int v86 = v88;
          }
          while (v67 >= *(_DWORD *)(v18 + 4 * v88));
          do
          {
            unsigned int v89 = *--v84;
            unsigned int v87 = v89;
          }
          while (v67 < *(_DWORD *)(v18 + 4 * v89));
        }
        while (v13 < v84);
      }
      double v90 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        *uint64_t v11 = *v90;
      }
      a5 = 0;
      *double v90 = v66;
    }
  }
  if (a5)
  {
    if (v13 != a2)
    {
      uint64_t v113 = v13 + 1;
      if (v13 + 1 != a2)
      {
        uint64_t v114 = **a3;
        uint64_t v115 = 4;
        long long v116 = v13;
        do
        {
          uint64_t v119 = *v116;
          uint64_t v118 = v116[1];
          long long v116 = v113;
          unsigned int v120 = *(_DWORD *)(v114 + 4 * v118);
          if (v120 < *(_DWORD *)(v114 + 4 * v119))
          {
            uint64_t v121 = v115;
            do
            {
              *(unsigned int *)((char *)v13 + v121) = v119;
              uint64_t v122 = v121 - 4;
              if (v121 == 4)
              {
                uint64_t v117 = v13;
                goto LABEL_112;
              }
              uint64_t v119 = *(unsigned int *)((char *)v13 + v121 - 8);
              v121 -= 4;
            }
            while (v120 < *(_DWORD *)(v114 + 4 * v119));
            uint64_t v117 = (unsigned int *)((char *)v13 + v122);
LABEL_112:
            *uint64_t v117 = v118;
          }
          uint64_t v113 = v116 + 1;
          v115 += 4;
        }
        while (v116 + 1 != a2);
      }
    }
  }
  else if (v13 != a2)
  {
    uint64_t v138 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v139 = **a3;
      do
      {
        uint64_t v141 = *v11;
        uint64_t v140 = v11[1];
        uint64_t v11 = v138;
        unsigned int v142 = *(_DWORD *)(v139 + 4 * v140);
        if (v142 < *(_DWORD *)(v139 + 4 * v141))
        {
          unint64_t v143 = v11;
          do
          {
            *unint64_t v143 = v141;
            uint64_t v141 = *(v143 - 2);
            --v143;
          }
          while (v142 < *(_DWORD *)(v139 + 4 * v141));
          *unint64_t v143 = v140;
        }
        uint64_t v138 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(_DWORD *)(*a3 + 4 * v4) < *(_DWORD *)(*a3 + 4 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(_DWORD *)(*a3 + 4 * v17);
      unsigned int v20 = *(_DWORD *)(*a3 + 4 * v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(_DWORD *)(*a3 + 4 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v46 = *a1;
          uint64_t v45 = a1[1];
          if (*(_DWORD *)(v18 + 4 * v45) < *(_DWORD *)(v18 + 4 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v47 = *(a2 - 1);
        if (*(_DWORD *)(v18 + 4 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      unsigned int v23 = a1 + 1;
      uint64_t v24 = a1[1];
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1[2];
      uint64_t v27 = *a1;
      uint64_t v28 = *a3;
      unsigned int v29 = *(_DWORD *)(*a3 + 4 * v24);
      unsigned int v30 = *(_DWORD *)(*a3 + 4 * v27);
      int v31 = v26;
      unsigned int v32 = *(_DWORD *)(*a3 + 4 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          uint64_t v33 = a1;
          *unsigned int v23 = v26;
          *uint64_t v25 = v24;
          unsigned int v34 = a1 + 1;
          uint64_t v35 = v24;
          uint64_t v26 = v24;
          if (v32 >= v30) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          uint64_t v33 = a1;
          unsigned int v34 = a1 + 2;
          uint64_t v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *uint64_t v33 = v31;
          *unsigned int v34 = v27;
          uint64_t v26 = v35;
          goto LABEL_39;
        }
        uint64_t v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        unsigned int v34 = a1 + 2;
        uint64_t v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30) {
          goto LABEL_37;
        }
      }
      LODWORD(v24) = v26;
LABEL_39:
      uint64_t v48 = *(a2 - 1);
      if (*(_DWORD *)(v28 + 4 * v48) < *(_DWORD *)(v28 + 4 * v26))
      {
        *uint64_t v25 = v48;
        *(a2 - 1) = v24;
        uint64_t v49 = *v25;
        uint64_t v50 = *v23;
        unsigned int v51 = *(_DWORD *)(v28 + 4 * v49);
        if (v51 < *(_DWORD *)(v28 + 4 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          uint64_t v52 = *a1;
          if (v51 < *(_DWORD *)(v28 + 4 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(_DWORD *)(*a3 + 4 * v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(_DWORD *)(v9 + 4 * v11);
      unsigned int v13 = *(_DWORD *)(v9 + 4 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        unsigned int *v7 = v8;
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        uint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      *uint64_t v15 = v11;
LABEL_18:
      unsigned int v36 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v37 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v40 = *v36;
        uint64_t v41 = *v7;
        unsigned int v42 = *(_DWORD *)(v9 + 4 * v40);
        if (v42 < *(_DWORD *)(v9 + 4 * v41))
        {
          uint64_t v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            uint64_t v44 = v43 - 4;
            if (v43 == 4)
            {
              unsigned int v39 = a1;
              goto LABEL_21;
            }
            uint64_t v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(_DWORD *)(v9 + 4 * v41));
          unsigned int v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *unsigned int v39 = v40;
          if (++v37 == 8) {
            break;
          }
        }
        uint64_t v7 = v36++;
        if (v36 == a2) {
          return 1;
        }
      }
      return v36 + 1 == a2;
  }
}

void gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::GlyphMeshDescriptor>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,md::GlyphMeshDescriptor>::~sparse_map(void *a1)
{
  __int16 v2 = (void *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        uint64_t v7 = v6 - 1;
        v6 -= 5;
        v5 -= 5;
      }
      while (v7 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*a1;
  if (*a1)
  {
    uint64_t v11 = (void *)a1[1];
    unsigned int v12 = (void *)*a1;
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *--v11;
        uint64_t v13 = v14;
        *uint64_t v11 = 0;
        if (v14) {
          MEMORY[0x1A6239270](v13, 0x1000C40104B78CFLL);
        }
      }
      while (v11 != v10);
      unsigned int v12 = (void *)*a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    uint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    uint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (id *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v9 = ***(uint64_t ****)(a1 + 8);
  if (v9 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v9 != 0xD369A4D92C8FFE6CLL)
  {
    unsigned int v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0xD369A4D92C8FFE6CLL);
    uint64_t v9 = v10 - 5;
  }
  uint64_t v12 = v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
  *(_OWORD *)uint64_t v28 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v30 = 1065353216;
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v28, 0x12u, 18);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v28, 0xEu, 14);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v28, 0x10u, 16);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v28, 0xFu, 15);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v28, 0x11u, 17);
  if (!v28[1]) {
    goto LABEL_37;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v28[1]);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v14;
    if (v28[1] <= (void *)v14) {
      unint64_t v16 = v14 % (unint64_t)v28[1];
    }
  }
  else
  {
    unint64_t v16 = (LODWORD(v28[1]) - 1) & v14;
  }
  uint64_t v17 = (uint64_t ***)*((void *)v28[0] + v16);
  if (v17)
  {
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (v15.u32[0] < 2uLL)
      {
        while (1)
        {
          unsigned int v20 = v18[1];
          if (v20 == (uint64_t *)v14)
          {
            if (*((unsigned __int8 *)v18 + 16) == v14) {
              goto LABEL_38;
            }
          }
          else if (((unint64_t)v20 & ((unint64_t)v28[1] - 1)) != v16)
          {
            goto LABEL_37;
          }
          uint64_t v18 = (uint64_t **)*v18;
          if (!v18) {
            goto LABEL_38;
          }
        }
      }
      do
      {
        unint64_t v19 = (unint64_t)v18[1];
        if (v19 == v14)
        {
          if (*((unsigned __int8 *)v18 + 16) == v14) {
            break;
          }
        }
        else
        {
          if ((void *)v19 >= v28[1]) {
            v19 %= (unint64_t)v28[1];
          }
          if (v19 != v16) {
            goto LABEL_37;
          }
        }
        uint64_t v18 = (uint64_t **)*v18;
      }
      while (v18);
    }
  }
  else
  {
LABEL_37:
    uint64_t v18 = 0;
  }
LABEL_38:
  int v21 = (*((uint64_t (**)(id *))*v8 + 7))(v8);
  int v22 = [v8[13] supportsFramebufferFetch] ^ 1;
  if (v18) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v21 == 0;
  }
  if (v23) {
    int v24 = v22;
  }
  else {
    int v24 = 1;
  }
  if (v24 == 1) {
    (*((void (**)(id *))*v8 + 7))(v8);
  }
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(void *)(a1 + 8) + 16), 28850, v24 ^ 1);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(void *)(a1 + 8) + 16), 13110, v24);
  uint64_t v25 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v26 = (void *)*v25;
      operator delete(v25);
      uint64_t v25 = v26;
    }
    while (v26);
  }
  uint64_t v27 = v28[0];
  v28[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_1A19A71E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p)
{
  uint64_t v12 = __p;
  if (__p)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>(float *a1, unsigned __int8 a2, char a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unsigned int v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2) {
                return;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unsigned int v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unsigned int v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = 0;
  v13[1] = v6;
  *((unsigned char *)v13 + 16) = a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v20 = operator new(8 * prime);
    int v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    int v24 = (uint64_t *)(a1 + 4);
    BOOL v23 = (void *)*((void *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          BOOL v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          *BOOL v23 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          BOOL v23 = i;
          size_t v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    unsigned int v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *BOOL v23 = *v34;
        uint64_t v35 = 8 * v36;
        *unsigned int v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        unsigned int v34 = v23;
      }
      size_t v36 = v25;
LABEL_63:
      BOOL v23 = v34;
      unsigned int v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  int v37 = *(void **)a1;
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *uint64_t v13 = *v38;
LABEL_80:
    void *v38 = v13;
    goto LABEL_81;
  }
  *uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    uint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A19A7688(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  float v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    float v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::operator()();
}

void std::__function::__func<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>,std::allocator<ecs2::ForwardToExecute<ToggleFeatureFlagTasks>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, void **a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = (void *)**a2;
  if (v3 != (void *)(*a2)[1])
  {
    while (*v3 != 0x3815A15069F224CDLL)
      v3 += 5;
  }
  uint64_t v5 = v3[3];
  uint64_t v4 = (std::__shared_weak_count *)v3[4];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v6 = *(void **)(v5 + 56);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    uint64_t v9 = *(void *)&v7 - 1;
    uint64_t v10 = *(void *)&v7 != 1;
    if (v8.u32[0] < 2uLL) {
      uint64_t v10 = (v7.i8[0] & 1) == 0;
    }
    uint64_t v11 = *(uint64_t ***)(*v6 + 8 * v10);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (v12)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v12[1];
            if (v13 == 1)
            {
              if (*((unsigned char *)v12 + 16) == 1) {
                goto LABEL_48;
              }
            }
            else if ((v13 & v9) != v10)
            {
              goto LABEL_25;
            }
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_25;
            }
          }
        }
        while (1)
        {
          unint64_t v14 = v12[1];
          if (v14 == 1)
          {
            if (*((unsigned char *)v12 + 16) == 1)
            {
LABEL_48:
              BOOL v15 = *((unsigned __int8 *)v12 + 17) != 0;
              goto LABEL_27;
            }
          }
          else
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
            if (v14 != v10)
            {
LABEL_25:
              BOOL v15 = 0;
              goto LABEL_27;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            goto LABEL_25;
          }
        }
      }
    }
    BOOL v15 = 0;
LABEL_27:
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v7);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v17 = 2;
      if (*(void *)&v7 <= 2uLL) {
        uint64_t v17 = 2uLL % *(void *)&v7;
      }
    }
    else
    {
      uint64_t v17 = (v7.i8[0] - 1) & 2;
    }
    uint64_t v18 = *(uint64_t ***)(*v6 + 8 * v17);
    if (v18)
    {
      unint64_t v19 = *v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v19[1];
            if (v20 == 2)
            {
              if (*((unsigned char *)v19 + 16) == 2) {
                goto LABEL_74;
              }
            }
            else if ((v20 & v9) != v17)
            {
              goto LABEL_49;
            }
            unint64_t v19 = (uint64_t *)*v19;
            if (!v19) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v21 = v19[1];
          if (v21 == 2)
          {
            if (*((unsigned char *)v19 + 16) == 2)
            {
LABEL_74:
              BOOL v22 = *((unsigned char *)v19 + 17) != 0;
              goto LABEL_50;
            }
          }
          else
          {
            if (v21 >= *(void *)&v7) {
              v21 %= *(void *)&v7;
            }
            if (v21 != v17) {
              break;
            }
          }
          unint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
    }
  }
  else
  {
    BOOL v15 = 0;
  }
LABEL_49:
  BOOL v22 = 0;
LABEL_50:
  BOOL v23 = ***(uint64_t ****)(a1 + 8);
  if (v23 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v23 != 0xD369A4D92C8FFE6CLL)
  {
    int v24 = v23 + 5;
    do
    {
      uint64_t v25 = *v24;
      v24 += 5;
    }
    while (v25 != 0xD369A4D92C8FFE6CLL);
    BOOL v23 = v24 - 5;
  }
  uint64_t v26 = v23[3];
  size_t v27 = (std::__shared_weak_count *)v23[4];
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
  BOOL v30 = v28 == 5 || v28 == 12;
  int v31 = v15 && v22 || v15 && (v28 != 12 ? (v32 = v28 == 5) : (v32 = 1), !v32) || v22 && v30;
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(void *)(a1 + 8) + 16), 47386, v31);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(void *)(a1 + 8) + 16), 6966, v31);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(void *)(a1 + 8) + 16), 25691, v31);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(void *)(a1 + 8) + 16), 434, v31);
  *(void *)(a1 + 8) = 0;
}

void ecs2::UtilityContext::toggleTask(ecs2::UtilityContext *this, int a2, int a3)
{
  uint64_t v4 = (unsigned __int16 *)*((void *)this + 15);
  uint64_t v5 = (unsigned __int16 *)*((void *)this + 16);
  if (v4 != v5)
  {
    while (*v4 != a2)
    {
      v4 += 6;
      if (v4 == v5) {
        goto LABEL_7;
      }
    }
  }
  if (v4 == v5) {
LABEL_7:
  }
    unint64_t v6 = 0xFFFFFFFF00000000;
  else {
    unint64_t v6 = *(void *)(v4 + 2);
  }
  if (v6 < 0xFFFFFFFF00000000 || v6)
  {
    int8x8_t v7 = (void *)gdc::Registry::storage<ecs2::TaskDisabled>(*((int8x8_t **)this + 25));
    uint8x8_t v8 = v7;
    if (a3)
    {
      gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::remove(v7, v6);
      return;
    }
    unint64_t v27 = v6;
    uint64_t v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v7 + 4, (uint64_t)&v27);
    if (v10)
    {
      BOOL v15 = (unsigned char *)v8[11];
      unint64_t v14 = v8[12];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = (char *)v8[10];
        uint64_t v18 = v15 - v17;
        uint64_t v19 = v15 - v17 + 1;
        if (v19 < 0) {
          goto LABEL_42;
        }
        unint64_t v20 = v14 - (void)v17;
        if (2 * v20 > v19) {
          uint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21) {
          BOOL v22 = (char *)operator new(v21);
        }
        else {
          BOOL v22 = 0;
        }
        BOOL v23 = &v22[v21];
        uint64_t v16 = (uint64_t)&v22[v18 + 1];
        int v24 = (char *)(v17 - v15);
        if (v17 == v15) {
          int v24 = 0;
        }
        v8[10] = &v22[v18 + (void)v24];
        v8[11] = v16;
        v8[12] = v23;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        uint64_t v16 = (uint64_t)(v15 + 1);
      }
      v8[11] = v16;
      uint64_t v11 = v8[31];
    }
    else
    {
      uint64_t v11 = v8[31];
      if (v8[10] + (((uint64_t)v9 - v8[7]) >> 3) != v8[11])
      {
        uint64_t v12 = (void *)v8[16];
        if (!v12) {
          return;
        }
        while (1)
        {
          size_t v29 = &v27;
          uint64_t v30 = 1;
          uint64_t v28 = v11;
          uint64_t v13 = v12[6];
          if (!v13) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v13 + 48))(v13, &v28, &v29);
          uint64_t v12 = (void *)*v12;
          if (!v12) {
            return;
          }
        }
LABEL_41:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_42:
        abort();
      }
    }
    uint64_t v25 = (void *)v8[22];
    if (!v25) {
      return;
    }
    while (1)
    {
      size_t v29 = &v27;
      uint64_t v30 = 1;
      uint64_t v28 = v11;
      uint64_t v26 = v25[6];
      if (!v26) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v26 + 48))(v26, &v28, &v29);
      uint64_t v25 = (void *)*v25;
      if (!v25) {
        return;
      }
    }
    goto LABEL_41;
  }
}

uint64_t std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(uint64_t result, uint64_t *a2, long long *a3)
{
  unint64_t v3 = *(void **)(*(void *)(result + 8) + 184);
  if (v3)
  {
    uint64_t v4 = *a2;
    long long v7 = *a3;
    while (1)
    {
      long long v9 = v7;
      uint64_t v8 = v4;
      uint64_t v5 = v3[6];
      if (!v5) {
        break;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, long long *))(*(void *)v5 + 48))(v5, &v8, &v9);
      unint64_t v3 = (void *)*v3;
      if (!v3) {
        return result;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return RendererPassListProviderWrapper::mapEngineMode(v6);
  }
  return result;
}

uint64_t RendererPassListProviderWrapper::mapEngineMode(RendererPassListProviderWrapper *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t md::CartographicRenderer::type(md::CartographicRenderer *this)
{
  return 0;
}

__n128 __copy_helper_block_ea8_48c23_ZTSN3gdc11ResourceKeyE(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = &a1[5].n128_i8[8];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[3].n128_u64[1] = (unint64_t)v4;
  a1[4].n128_u64[0] = (unint64_t)v4;
  a1[4].n128_u64[1] = (unint64_t)v4;
  a1[5].n128_u64[0] = 32;
  uint64_t v5 = (__int8 *)a2[3].n128_u64[1];
  unint64_t v6 = (__int8 *)a2[4].n128_u64[0];
  unint64_t v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40) {
      size_t v8 = 64;
    }
    else {
      size_t v8 = v6 - v5;
    }
    uint64_t v4 = (__int8 *)malloc_type_malloc(v8, 0x100004077774924uLL);
    long long v9 = (__int8 *)a1[3].n128_u64[1];
    char v10 = (__int8 *)a1[4].n128_u64[0];
    if (v9 == v10) {
      goto LABEL_21;
    }
    unint64_t v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      uint64_t v12 = v4;
      goto LABEL_20;
    }
    uint64_t v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20) {
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v14 = (long long *)(v9 + 16);
      BOOL v15 = v4 + 16;
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *BOOL v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        uint64_t v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v20 = (uint64_t *)&v9[v13];
    size_t v21 = &v4[v13];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)size_t v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18) {
      goto LABEL_21;
    }
    v9 += v18;
    do
    {
LABEL_20:
      __int8 v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    a1[3].n128_u64[1] = (unint64_t)v4;
    a1[4].n128_u64[0] = (unint64_t)v4;
    a1[5].n128_u64[0] = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      uint64_t v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      uint64_t v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      unint64_t v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v26 = (long long *)(v5 + 16);
      unint64_t v27 = v4 + 16;
      unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *unint64_t v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24) {
        goto LABEL_39;
      }
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        uint64_t v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    unint64_t v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    BOOL v32 = (uint64_t *)&v5[v24];
    uint64_t v33 = &v4[v24];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)uint64_t v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30) {
      goto LABEL_39;
    }
    v5 += v30;
    do
    {
LABEL_38:
      __int8 v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    uint64_t v4 = (__int8 *)a1[4].n128_u64[0];
  }
  a1[4].n128_u64[0] = (unint64_t)&v4[v7];
  a1[7].n128_u64[1] = a2[7].n128_u64[1];
  __n128 result = a2[8];
  a1[8] = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19A83FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::BoundZScale>(v2);
  unint64_t v6 = (void *)gdc::Registry::storage<md::ls::BoundZAdjust>(v2);
  v98[0] = (uint64_t)v3;
  v98[1] = (uint64_t)v4;
  v98[2] = (uint64_t)v5;
  v98[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::BoundZScale,md::ls::BoundZAdjust,md::ls::MeshRenderableTransformConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v96, v98);
  unint64_t v7 = v3 + 4;
  if (v5[8] - v5[7] < v3[8] - v3[7]) {
    unint64_t v7 = v5 + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  if (v4[8] - v4[7] < v7[4] - v7[3]) {
    unint64_t v7 = v4 + 4;
  }
  size_t v8 = (unint64_t *)v7[4];
  long long v9 = v97;
  if (v8 == v97)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    char v10 = (void *)result;
LABEL_97:
    *char v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    char v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v96[0];
    uint64_t v12 = (void *)v96[1];
    unint64_t v13 = (void *)v96[2];
    uint64_t v93 = (void *)v96[4];
    uint64_t v94 = (void *)v96[3];
    while (1)
    {
      *char v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v5[4], v17 < (v5[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v5[7],
            uint64_t v31 = v5[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v5[11];
        uint64_t v36 = v5[10] + 4 * v30;
      }
      else
      {
        uint64_t v35 = v5[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = v6[4], v17 < (v6[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v6[7],
            uint64_t v41 = v6[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v6[11];
        uint64_t v46 = v6[10] + 4 * v40;
      }
      else
      {
        uint64_t v45 = v6[11];
        uint64_t v46 = v45;
      }
      uint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = v4[4], v17 < (v4[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v4[7],
            uint64_t v51 = v4[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = v4[11];
        uint64_t v56 = v4[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v4[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      unint64_t v14 = v9 + 1;
      unsigned int v97 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v94[4];
                          if (v63 < (v94[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v94[7];
                              uint64_t v81 = v94[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v93[4];
                                  if (v63 < (v93[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v93[7];
                                      uint64_t v88 = v93[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            unint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        unsigned int v97 = v14;
      }
      long long v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v92);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x1DBDEAE2D8DF6302;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1DBDEAE2D8DF6302;
    if (*(void *)&v1 <= 0x1DBDEAE2D8DF6302uLL) {
      uint64_t v3 = 0x1DBDEAE2D8DF6302uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1DBDEAE2D8DF6302;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1DBDEAE2D8DF6302)
      {
        if (v5[2] == 0x1DBDEAE2D8DF6302) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1DBDEAE2D8DF6302) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1DBDEAE2D8DF6302) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19A8AF0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BoundZAdjust>(int8x8_t *a1)
{
  unint64_t v10 = 0xA2CB76FD7F023F9CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA2CB76FD7F023F9CLL;
    if (*(void *)&v1 <= 0xA2CB76FD7F023F9CLL) {
      unint64_t v3 = 0xA2CB76FD7F023F9CLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA2CB76FD7F023F9CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA2CB76FD7F023F9CLL)
      {
        if (v5[2] == 0xA2CB76FD7F023F9CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA2CB76FD7F023F9CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA2CB76FD7F023F9CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19A8D60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::BoundZScale>(int8x8_t *a1)
{
  uint64_t v10 = 0x2DE7529E814754ABLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2DE7529E814754ABLL;
    if (*(void *)&v1 <= 0x2DE7529E814754ABuLL) {
      uint64_t v3 = 0x2DE7529E814754ABuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2DE7529E814754ABLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2DE7529E814754ABLL)
      {
        if (v5[2] == 0x2DE7529E814754ABLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2DE7529E814754ABLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2DE7529E814754ABLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19A8FD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::BoundZScale,md::ls::BoundZAdjust,md::ls::MeshRenderableTransformConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2 + 32;
  if (!*a2) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v3 + 32;
  if (!v3) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v4 + 32;
  if (!v4) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v6 + 32;
  if (!v6) {
    uint64_t v10 = 0;
  }
  uint64_t result = *(void *)(v7 + 24);
  if (*(void *)(v8 + 32) - *(void *)(v8 + 24) < (unint64_t)(*(void *)(v7 + 32) - result)) {
    uint64_t v7 = v8;
  }
  if (*(void *)(v9 + 32) - *(void *)(v9 + 24) < *(void *)(v7 + 32) - *(void *)(v7 + 24)) {
    uint64_t v7 = v9;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v7 + 32) - *(void *)(v7 + 24)) {
    uint64_t v7 = v10;
  }
  *a1 = v7;
  a1[1] = v5;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  uint64_t v13 = *(void *)(v7 + 24);
  uint64_t v12 = *(void *)(v7 + 32);
  a1[6] = v13;
  if (v12 != v13)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v14 = v13 + 8;
      do
      {
        a1[6] = v14;
        if (v14 == v12) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v14 += 8;
      }
      while (!result);
    }
  }
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateCameraStyleLight>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19A9500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  *uint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19A9ED4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::OrientedBox>(v3);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v3);
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 4;
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)(v6 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v68, v9, v4, v6, *(void *)(v9 + 24));
  if (v7[8] - v7[7] >= v4[8] - v4[7]) {
    uint64_t v10 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v10 = (uint64_t)v8;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v66, v10, v4, v7, *(void *)(v10 + 32));
  if (v67 == v71)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)result;
LABEL_67:
    *uint64_t v12 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *uint64_t v12 = *v11;
      unint64_t v13 = *v11;
      unint64_t v14 = HIDWORD(*v11);
      unint64_t v15 = v13 >> 39;
      uint64_t v16 = v4[4];
      if (v13 >> 39 < (v4[5] - v16) >> 3
        && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
        && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v20 = v4[7],
            uint64_t v19 = v4[8],
            v18 < (v19 - v20) >> 3)
        && ((uint64_t v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == v14) : (v22 = 0), v22))
      {
        uint64_t v23 = v4[11];
        uint64_t v24 = v4[10] + 8 * v18;
      }
      else
      {
        uint64_t v23 = v4[11];
        uint64_t v24 = v23;
      }
      if (v24 == v23) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = v5[4];
      if (v15 < (v5[5] - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v15)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v30 = v5[7],
            uint64_t v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v14) : (v32 = 0), v32))
      {
        uint64_t v33 = v5[11];
        uint64_t v34 = v5[10] + 104 * v28;
      }
      else
      {
        uint64_t v33 = v5[11];
        uint64_t v34 = v33;
      }
      if (v34 == v33) {
        uint64_t v34 = 0;
      }
      if ((uint64_t v35 = v7[4], v15 < (v7[5] - v35) >> 3)
        && (uint64_t v36 = *(void *)(v35 + 8 * v15)) != 0
        && (unint64_t v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v39 = v7[7],
            uint64_t v38 = v7[8],
            v37 < (v38 - v39) >> 3)
        && ((uint64_t v40 = v39 + 8 * v37, v40 != v38) ? (v41 = *(_DWORD *)(v40 + 4) == v14) : (v41 = 0), v41))
      {
        uint64_t v42 = v7[11];
        uint64_t v43 = v7[10] + 8 * v37;
      }
      else
      {
        uint64_t v42 = v7[11];
        uint64_t v43 = v42;
      }
      uint64_t v72 = v34;
      uint64_t v44 = *(void *)(a2 + 24);
      if (!v44) {
        break;
      }
      if (v43 == v42) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = v43;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v44 + 48))(v44, v25, &v72, v45);
      uint64_t v47 = v71;
      uint64_t v11 = *(unint64_t **)(v68 + 32);
      if (++v71 != v11)
      {
        uint64_t v48 = v69[4];
        unint64_t v49 = (v69[5] - v48) >> 3;
        uint64_t v50 = v47 + 2;
        while (1)
        {
          unint64_t v51 = *((unsigned int *)v50 - 1);
          unint64_t v52 = v51 >> 7;
          if (v51 >> 7 < v49)
          {
            uint64_t v53 = *(void *)(v48 + 8 * v52);
            if (v53)
            {
              unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * (v51 & 0x7F));
              uint64_t v55 = v69[7];
              uint64_t result = v69[8];
              if (v54 < (result - v55) >> 3)
              {
                uint64_t v56 = v55 + 8 * v54;
                if (v56 != result && *(_DWORD *)(v56 + 4) == v51)
                {
                  uint64_t v58 = v70[4];
                  uint64_t result = v70[5] - v58;
                  if (v52 < result >> 3)
                  {
                    uint64_t v59 = *(void *)(v58 + 8 * v52);
                    if (v59)
                    {
                      unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * (v51 & 0x7F));
                      uint64_t v62 = v70[7];
                      uint64_t v61 = v70[8];
                      uint64_t result = v61 - v62;
                      if (v60 < (v61 - v62) >> 3)
                      {
                        uint64_t v63 = v62 + 8 * v60;
                        if (v63 != v61 && *(_DWORD *)(v63 + 4) == v51) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v71 = v50;
          BOOL v22 = v50++ == v11;
          if (v22) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v50 - 1;
      }
LABEL_9:
      if (v67 == v11) {
        goto LABEL_67;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v65);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::StyleDataKeyHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x1BB343378E1EE5BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1BB343378E1EE5BLL;
    if (*(void *)&v1 <= 0x1BB343378E1EE5BuLL) {
      uint64_t v3 = 0x1BB343378E1EE5BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1BB343378E1EE5BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1BB343378E1EE5BLL)
      {
        if (v5[2] == 0x1BB343378E1EE5BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1BB343378E1EE5BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1BB343378E1EE5BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AA4D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::OrientedBox>(int8x8_t *a1)
{
  unint64_t v10 = 0xEA668AD3AE8488A2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEA668AD3AE8488A2;
    if (*(void *)&v1 <= 0xEA668AD3AE8488A2) {
      unint64_t v3 = 0xEA668AD3AE8488A2 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEA668AD3AE8488A2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEA668AD3AE8488A2)
      {
        if (v5[2] == 0xEA668AD3AE8488A2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEA668AD3AE8488A2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEA668AD3AE8488A2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AA748(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19AAB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  CanEnable = (void *)gdc::Registry::storage<md::ls::CanEnableTexture>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v2);
  v98[0] = (uint64_t)v3;
  v98[1] = (uint64_t)v4;
  v98[2] = (uint64_t)CanEnable;
  v98[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v96, v98);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (CanEnable[8] - CanEnable[7] < v7[4] - v7[3]) {
    unint64_t v7 = CanEnable + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v97;
  if (v8 == v97)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v10 = (void *)result;
LABEL_97:
    *unint64_t v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    unint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v96[0];
    uint64_t v12 = (void *)v96[1];
    unint64_t v13 = (void *)v96[2];
    uint64_t v93 = (void *)v96[4];
    uint64_t v94 = (void *)v96[3];
    while (1)
    {
      *unint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 4 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = CanEnable[4], v17 < (CanEnable[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = CanEnable[7],
            uint64_t v41 = CanEnable[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = CanEnable[11];
        unint64_t v46 = CanEnable[10] + v40;
      }
      else
      {
        unint64_t v45 = CanEnable[11];
        unint64_t v46 = v45;
      }
      unint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 32 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      unint64_t v60 = *(unint64_t **)(v11 + 32);
      unint64_t v14 = v9 + 1;
      unsigned int v97 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v94[4];
                          if (v63 < (v94[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v94[7];
                              uint64_t v81 = v94[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v93[4];
                                  if (v63 < (v93[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v93[7];
                                      uint64_t v88 = v93[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            unint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        unint64_t v60 = v14;
LABEL_10:
        unsigned int v97 = v14;
      }
      uint64_t v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::CanEnableTexture>(v92);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::CanEnableTexture>(int8x8_t *a1)
{
  uint64_t v10 = 0x20D1AB8FE4B8A761;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x20D1AB8FE4B8A761;
    if (*(void *)&v1 <= 0x20D1AB8FE4B8A761uLL) {
      uint64_t v3 = 0x20D1AB8FE4B8A761uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x20D1AB8FE4B8A761;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x20D1AB8FE4B8A761)
      {
        if (v5[2] == 0x20D1AB8FE4B8A761) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x20D1AB8FE4B8A761) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x20D1AB8FE4B8A761) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AB220(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19AB774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 == v17)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
  }
  else if (a15)
  {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t LayoutContextProviderWrapper::layoutContext(LayoutContextProviderWrapper *this)
{
  return *((void *)this + 1);
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::~Model()
{
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::SharedTileMatrix>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v3);
  uint64_t v10 = (void *)v6;
  uint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  unint64_t v14 = *(void **)(v12 + 24);
  unint64_t v13 = *(void **)(v12 + 32);
  uint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      unint64_t v14 = v15;
      uint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  uint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v4[11];
      uint64_t v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v4[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v5[10] + 8 * v36;
    }
    else
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = *(void **)(v12 + 32);
    unint64_t v20 = v14 + 1;
    uint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          unint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      uint64_t v83 = v20;
    }
    unint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 8 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SharedTileMatrix>(int8x8_t *a1)
{
  uint64_t v10 = 0x412941A9C4AFE129;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x412941A9C4AFE129;
    if (*(void *)&v1 <= 0x412941A9C4AFE129uLL) {
      uint64_t v3 = 0x412941A9C4AFE129uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x412941A9C4AFE129;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x412941A9C4AFE129)
      {
        if (v5[2] == 0x412941A9C4AFE129) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x412941A9C4AFE129) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x412941A9C4AFE129) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19ABED0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupServices>,std::allocator<ecs2::ForwardToExecute<CleanupServices>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xCFC5133F599B8248)
  {
    uint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xCFC5133F599B8248);
    uint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  unint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
  uint64_t v8 = *(uint64_t ****)(a1 + 8);
  uint64_t v9 = **v8;
  uint64_t v10 = (*v8)[1];
  if (v9 != v10)
  {
    while (*v9 != 0xC5B557B9C9754C35)
    {
      v9 += 5;
      if (v9 == v10) {
        goto LABEL_27;
      }
    }
  }
  if (v9 != v10)
  {
    uint64_t v12 = v9[3];
    uint64_t v11 = (std::__shared_weak_count *)v9[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    uint64_t v8 = *(uint64_t ****)(a1 + 8);
    if (v12)
    {
      unint64_t v13 = (*v8)[1];
      unint64_t v14 = **v8;
      if (v14 != v13 && *v14 != 0xC5B557B9C9754C35)
      {
        uint64_t v15 = v14 + 5;
        do
        {
          uint64_t v16 = *v15;
          v15 += 5;
        }
        while (v16 != 0xC5B557B9C9754C35);
        unint64_t v14 = v15 - 5;
      }
      uint64_t v17 = v14[3];
      uint64_t v18 = (std::__shared_weak_count *)v14[4];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
      uint64_t v8 = *(uint64_t ****)(a1 + 8);
    }
  }
LABEL_27:
  uint64_t v19 = (*v8)[1];
  unint64_t v20 = **v8;
  if (v20 != v19 && *v20 != 0x8C3843AC816FCBCLL)
  {
    unint64_t v21 = v20 + 5;
    do
    {
      uint64_t v22 = *v21;
      v21 += 5;
    }
    while (v22 != 0x8C3843AC816FCBCLL);
    unint64_t v20 = v21 - 5;
  }
  uint64_t v23 = v20[3];
  uint64_t v24 = (std::__shared_weak_count *)v20[4];
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 80))(v23);
  *(void *)(a1 + 8) = 0;
  return result;
}

void MDDisplayLayerSwapchainProvider::cleanup(MDDisplayLayerSwapchainProvider *this)
{
  for (uint64_t i = *((void *)this + 32); i != *((void *)this + 31); *((void *)this + 23) = v3)
  {
    uint64_t v5 = *(void *)(i - 8);
    i -= 8;
    uint64_t v4 = v5;
    uint64_t v6 = *((void *)this + 25);
    unint64_t v7 = *((void *)this + 26) - v6;
    uint64_t v8 = v6 + 8 * v5;
    unint64_t v9 = (unint64_t)*(unsigned int *)(v8 + 4) << 32;
    *(_DWORD *)(v8 + 4) = (v9 + 0x100000000) >> 32;
    *(void *)(*((void *)this + 25) + 8 * v5) = v9 & 0xFFFFFFFF00000000 | (v7 >> 3);
    uint64_t v11 = (char *)*((void *)this + 23);
    unint64_t v10 = *((void *)this + 24);
    if ((unint64_t)v11 < v10)
    {
      *(void *)uint64_t v11 = v4;
      uint64_t v3 = v11 + 8;
    }
    else
    {
      uint64_t v12 = (char *)*((void *)this + 22);
      uint64_t v13 = (v11 - v12) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        abort();
      }
      uint64_t v15 = v10 - (void)v12;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v17 = operator new(8 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[8 * v13];
      *uint64_t v18 = v4;
      uint64_t v3 = v18 + 1;
      if (v11 != v12)
      {
        unint64_t v19 = v11 - 8 - v12;
        if (v19 < 0x58) {
          goto LABEL_36;
        }
        if ((unint64_t)(v12 - v17) < 0x20) {
          goto LABEL_36;
        }
        uint64_t v20 = (v19 >> 3) + 1;
        unint64_t v21 = &v17[8 * v13 - 16];
        uint64_t v22 = v11 - 16;
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *unint64_t v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v18 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          do
          {
            uint64_t v25 = *((void *)v11 - 1);
            v11 -= 8;
            *--uint64_t v18 = v25;
          }
          while (v11 != v12);
        }
      }
      *((void *)this + 22) = v18;
      *((void *)this + 23) = v3;
      *((void *)this + 24) = &v17[8 * v16];
      if (v12) {
        operator delete(v12);
      }
    }
  }
  *((void *)this + 32) = i;
  uint64_t v26 = *((void *)this + 28);
  for (uint64_t j = *((void *)this + 29); j != v26; j -= 16)
  {
    uint64_t v28 = *(std::__shared_weak_count **)(j - 8);
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *((void *)this + 29) = v26;
}

uint64_t std::__shared_ptr_emplace<ggl::MetalSwapchainDrawableRef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ggl::MetalSwapchainDrawableRef::~MetalSwapchainDrawableRef(ggl::MetalSwapchainDrawableRef *this)
{
  *(void *)this = &unk_1EF55FEC8;
  uint8x8_t v2 = (ggl::MetalSwapchainDrawable *)*((void *)this + 1);
  if (v2) {
    ggl::MetalSwapchainDrawable::removeRef(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  ggl::MetalSwapchainDrawable *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF55FEC8;
  uint8x8_t v2 = (ggl::MetalSwapchainDrawable *)*((void *)this + 1);
  if (v2) {
    ggl::MetalSwapchainDrawable::removeRef(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

void sub_1A19AC500(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ggl::MetalSwapchainDrawable::removeRef(ggl::MetalSwapchainDrawable *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::mutex::lock((std::mutex *)this);
  int v2 = *((_DWORD *)this + 32);
  if (v2)
  {
    int v3 = v2 - 1;
    *((_DWORD *)this + 32) = v3;
    if (!v3)
    {
      atomic_exchange((atomic_uint *volatile)this + 33, 0);
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
      *((void *)this + 14) = 0;
      *((void *)this + 15) = 0;
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  else
  {
    if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_53121);
    }
    uint64_t v5 = GEOGetGeoGLMetalSwapchainLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_FAULT))
    {
      int v6 = 136315650;
      unint64_t v7 = "false";
      __int16 v8 = 2080;
      unint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchainDrawable.mm";
      __int16 v10 = 1024;
      int v11 = 178;
      _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_FAULT, "Attempting to set to negative ref count on drawable: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v6, 0x1Cu);
    }
  }
  std::mutex::unlock((std::mutex *)this);
}

uint64_t std::__shared_ptr_pointer<ggl::MetalSurfaceDrawable *,std::shared_ptr<ggl::MetalSurfaceDrawable>::__shared_ptr_default_delete<ggl::MetalSurfaceDrawable,ggl::MetalSurfaceDrawable>,std::allocator<ggl::MetalSurfaceDrawable>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(id **)(result + 24);
  if (v1)
  {

    JUMPOUT(0x1A6239270);
  }
  return result;
}

void md::MapEngineCallbackGraphService::cleanup(md::MapEngineCallbackGraphService *this)
{
  int v2 = (std::__shared_mutex_base *)((char *)this + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 8));
  int v3 = (gdc::tf::Taskflow ***)*((void *)this + 34);
  while (v3 != *((gdc::tf::Taskflow ****)this + 35))
  {
    int v5 = atomic_load((unsigned int *)*v3 + 3);
    if (v5 > 0 || (unsigned int v6 = atomic_load((unsigned int *)*v3 + 2)) != 0)
    {
      uint64_t v4 = *v3;
      v3 += 2;
      atomic_store(0, (unsigned int *)v4 + 2);
    }
    else
    {
      unint64_t v7 = **v3;
      if (v7 && *((void *)this + 24))
      {
        gdc::tf::Taskflow::~Taskflow(v7);
        *__int16 v8 = *((void *)this + 27);
        *((void *)this + 27) = v8;
      }
      unint64_t v9 = (gdc::tf::Taskflow ***)*((void *)this + 35);
      if (v9 != v3)
      {
        uint64_t v10 = *((void *)this + 34);
        uint64_t v11 = (uint64_t)v3 - v10;
        uint64_t v12 = *((void *)this + 37);
        unint64_t v13 = *(void *)(v12 + (((uint64_t)v3 - v10) >> 1));
        uint64_t v14 = *((void *)this + 31);
        if (v13 >= (*((void *)this + 32) - v14) >> 3)
        {
          int v3 = (gdc::tf::Taskflow ***)*((void *)this + 35);
        }
        else
        {
          unint64_t v15 = *(void *)(v14 + 8 * v13);
          BOOL v17 = v15 == 0;
          unint64_t v16 = HIDWORD(v15);
          BOOL v17 = !v17 && HIDWORD(*(void *)(v14 + 8 * *(void *)(v12 + (((uint64_t)v3 - v10) >> 1)))) == v16;
          if (v17)
          {
            uint64_t v51 = v2;
            unint64_t v19 = (unint64_t *)*((void *)this + 29);
            unint64_t v18 = *((void *)this + 30);
            if ((unint64_t)v19 >= v18)
            {
              unint64_t v21 = (unint64_t *)*((void *)this + 28);
              int64_t v22 = (char *)v19 - (char *)v21;
              uint64_t v23 = v19 - v21;
              unint64_t v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 61) {
                abort();
              }
              uint64_t v25 = v18 - (void)v21;
              if (v25 >> 2 > v24) {
                unint64_t v24 = v25 >> 2;
              }
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v26 = v24;
              }
              if (v26)
              {
                if (v26 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                unint64_t v27 = v26;
                uint64_t v28 = operator new(8 * v26);
                unint64_t v26 = v27;
                int64_t v22 = (char *)v19 - (char *)v21;
                uint64_t v23 = v19 - v21;
              }
              else
              {
                uint64_t v28 = 0;
              }
              uint64_t v29 = (unint64_t *)&v28[8 * v23];
              *uint64_t v29 = v13;
              uint64_t v20 = v29 + 1;
              if (v19 != v21)
              {
                unint64_t v30 = (char *)v19 - (char *)v21 - 8;
                if (v30 < 0x58) {
                  goto LABEL_55;
                }
                if ((unint64_t)((char *)v19 - v28 - v22) < 0x20) {
                  goto LABEL_55;
                }
                uint64_t v31 = (v30 >> 3) + 1;
                uint64_t v32 = &v28[8 * v23 - 16];
                uint64_t v33 = v19 - 2;
                uint64_t v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v35 = *(_OWORD *)v33;
                  *(v32 - 1) = *((_OWORD *)v33 - 1);
                  *uint64_t v32 = v35;
                  v32 -= 2;
                  v33 -= 4;
                  v34 -= 4;
                }
                while (v34);
                v29 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
                v19 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
                if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_55:
                  do
                  {
                    unint64_t v36 = *--v19;
                    *--uint64_t v29 = v36;
                  }
                  while (v19 != v21);
                }
              }
              *((void *)this + 28) = v29;
              *((void *)this + 29) = v20;
              *((void *)this + 30) = &v28[8 * v26];
              if (v21)
              {
                uint64_t v37 = v20;
                operator delete(v21);
                uint64_t v20 = v37;
                uint64_t v14 = *((void *)this + 31);
                uint64_t v10 = *((void *)this + 34);
                unint64_t v9 = (gdc::tf::Taskflow ***)*((void *)this + 35);
                uint64_t v12 = *((void *)this + 37);
              }
            }
            else
            {
              *unint64_t v19 = v13;
              uint64_t v20 = v19 + 1;
            }
            *((void *)this + 29) = v20;
            uint64_t v38 = *(unsigned int *)(v14 + 8 * v13);
            uint64_t v39 = *(void *)(v12 + (((uint64_t)v9 - v10) >> 1) - 8);
            BOOL v40 = (long long *)(v10 + 16 * v38);
            long long v41 = *v40;
            *(void *)BOOL v40 = 0;
            *((void *)v40 + 1) = 0;
            long long v42 = *((_OWORD *)v9 - 1);
            *(v9 - 2) = 0;
            *(v9 - 1) = 0;
            uint64_t v43 = (std::__shared_weak_count *)*((void *)v40 + 1);
            *BOOL v40 = v42;
            if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              long long v50 = v41;
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              long long v41 = v50;
            }
            uint64_t v44 = (std::__shared_weak_count *)*(v9 - 1);
            *((_OWORD *)v9 - 1) = v41;
            if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
            *(_DWORD *)(*((void *)this + 31) + 8 * v39) = v38;
            uint64_t v45 = *((void *)this + 37);
            uint64_t v46 = *((void *)this + 38);
            uint64_t v47 = *(void *)(v45 + 8 * v38);
            *(void *)(v45 + 8 * v38) = *(void *)(v46 - 8);
            *(void *)(v46 - 8) = v47;
            uint64_t v48 = *((void *)this + 35);
            uint64_t v49 = *(std::__shared_weak_count **)(v48 - 8);
            if (v49)
            {
              if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            *((void *)this + 35) = v48 - 16;
            *((void *)this + 38) -= 8;
            *(_DWORD *)(*((void *)this + 31) + 8 * v13 + 4) = (((unint64_t)*(unsigned int *)(*((void *)this + 31) + 8 * v13 + 4) << 32)
                                                               + 0x100000000) >> 32;
            *(_DWORD *)(*((void *)this + 31) + 8 * v13) = (*((void *)this + 32) - *((void *)this + 31)) >> 3;
            int v3 = (gdc::tf::Taskflow ***)(*((void *)this + 34) + 16 * (v11 >> 4));
            int v2 = v51;
          }
          else
          {
            int v3 = (gdc::tf::Taskflow ***)*((void *)this + 35);
          }
        }
      }
    }
  }
  std::__shared_mutex_base::unlock(v2);
}

void sub_1A19ACB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_mutex_base *a14)
{
}

void gdc::tf::Taskflow::~Taskflow(gdc::tf::Taskflow *this)
{
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2)
  {
    geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(v2);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v2 + 8));
    MEMORY[0x1A6239270](v2, 0x1020C407A7143E5);
  }
  int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    do
    {
      unsigned int v6 = (void *)*v4;
      uint64_t v7 = v4[5];
      v4[5] = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6);
  }
  int v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    operator delete(v5);
  }
}

void sub_1A19ACC10(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(uint64_t a1)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = &v32;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v32;
      int v5 = &v32;
      if (v32)
      {
        unsigned int v6 = v32;
        while (1)
        {
          while (1)
          {
            int v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            unsigned int v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          unsigned int v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        __int16 v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *__int16 v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        void *v4 = v8;
        if (*v31)
        {
          uint64_t v31 = (uint64_t **)*v31;
          __int16 v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v32, v8);
        uint64_t v3 = ++v33;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_54;
    }
    goto LABEL_56;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        unint64_t v17 = v16 + 152 * v15;
        unint64_t v18 = v32;
        if (!v32) {
          goto LABEL_39;
        }
        unint64_t v19 = &v32;
        do
        {
          uint64_t v20 = v18;
          unint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            unint64_t v19 = (uint64_t **)v20;
          }
          unint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v32) {
          goto LABEL_39;
        }
        if (v22 < v17) {
          uint64_t v20 = (uint64_t *)v21;
        }
        if (v17 < v20[4])
        {
LABEL_39:
          unint64_t v24 = *(void **)(v17 + 128);
          if (v24)
          {
            *(void *)(v17 + 136) = v24;
            operator delete(v24);
          }
          uint64_t v25 = *(void **)(v17 + 104);
          if (v25)
          {
            *(void *)(v17 + 112) = v25;
            operator delete(v25);
          }
          if (*(char *)(v17 + 95) < 0) {
            operator delete(*(void **)(v17 + 72));
          }
          uint64_t v26 = *(unsigned int *)(v17 + 64);
          if (v26 != -1) {
            ((void (*)(char *, unint64_t))off_1EF590688[v26])(&v34, v16 + 152 * v15);
          }
          *(_DWORD *)(v17 + 64) = -1;
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    unint64_t v27 = (void *)v10[1];
    if (v27)
    {
      do
      {
        uint64_t v28 = v27;
        unint64_t v27 = (void *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        uint64_t v28 = (void *)v10[2];
        BOOL v12 = *v28 == (void)v10;
        uint64_t v10 = v28;
      }
      while (!v12);
    }
    uint64_t v10 = v28;
  }
  while (v28 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_56:
      free((void *)v10[4]);
      uint64_t v29 = (void *)v10[1];
      if (v29)
      {
        do
        {
          unint64_t v30 = v29;
          uint64_t v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          unint64_t v30 = (void *)v10[2];
          BOOL v12 = *v30 == (void)v10;
          uint64_t v10 = v30;
        }
        while (!v12);
      }
      uint64_t v10 = v30;
    }
    while (v30 != v11);
  }
LABEL_54:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v32);
}

void sub_1A19ACEE4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource *,std::shared_ptr<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>::__shared_ptr_default_delete<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource,md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>,std::allocator<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3gdc2tf8TaskData6StaticENSB_17StaticWithContextENSB_12StaticModuleENSB_13DynamicModuleENSB_13ModuleFactoryEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  uint64_t result = a2[3];
  if ((void *)result == a2) {
    return (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void md::MapEngineFrameService::cleanup(md::MapEngineFrameService *this)
{
  uint64_t v1 = *((void *)this + 14);
  for (i = *((void *)this + 15); v1 != i; uint64_t v1 = *((void *)this + 14) + 8 * v34)
  {
    while (1)
    {
      uint64_t v4 = *(void **)v1;
      if (!*(void *)(*(void *)v1 + 120)) {
        break;
      }
      v4[15] = 0;
      v1 += 8;
      if (v1 == i) {
        return;
      }
    }
    if (*((void *)this + 4))
    {
      int v5 = (void *)v4[12];
      if (v5)
      {
        v4[13] = v5;
        operator delete(v5);
      }
      uint64_t v6 = v4[11];
      v4[11] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      unint64_t v7 = (ggl::RenderQueue *)v4[10];
      v4[10] = 0;
      if (v7)
      {
        ggl::RenderQueue::~RenderQueue(v7);
        MEMORY[0x1A6239270]();
      }
      void *v4 = *((void *)this + 7);
      *((void *)this + 7) = v4;
      uint64_t i = *((void *)this + 15);
    }
    if (i == v1) {
      break;
    }
    uint64_t v8 = *((void *)this + 14);
    uint64_t v9 = v1 - v8;
    uint64_t v10 = *((void *)this + 17);
    unint64_t v11 = *(void *)(v10 + v1 - v8);
    uint64_t v12 = *((void *)this + 11);
    if (v11 >= (*((void *)this + 12) - v12) >> 3) {
      break;
    }
    unint64_t v13 = *(void *)(v12 + 8 * v11);
    BOOL v15 = v13 == 0;
    unint64_t v14 = HIDWORD(v13);
    BOOL v15 = !v15 && HIDWORD(*(void *)(v12 + 8 * *(void *)(v10 + v1 - v8))) == v14;
    if (!v15) {
      break;
    }
    unint64_t v17 = (unint64_t *)*((void *)this + 9);
    unint64_t v16 = *((void *)this + 10);
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)*((void *)this + 8);
      uint64_t v20 = ((char *)v17 - v19) >> 3;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61) {
        abort();
      }
      uint64_t v22 = v16 - (void)v19;
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v43 = v21;
      uint64_t v44 = v9;
      if (v21)
      {
        if (v21 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v23 = (char *)operator new(8 * v21);
      }
      else
      {
        uint64_t v23 = 0;
      }
      unint64_t v24 = (unint64_t *)&v23[8 * v20];
      *unint64_t v24 = v11;
      unint64_t v18 = v24 + 1;
      if (v17 != (unint64_t *)v19)
      {
        unint64_t v25 = (char *)v17 - v19 - 8;
        if (v25 < 0x58) {
          goto LABEL_49;
        }
        if ((unint64_t)(v19 - v23) < 0x20) {
          goto LABEL_49;
        }
        uint64_t v26 = (v25 >> 3) + 1;
        unint64_t v27 = &v23[8 * v20 - 16];
        uint64_t v28 = v17 - 2;
        uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)unint64_t v27 = v30;
          v27 -= 32;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        v24 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v17 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            unint64_t v31 = *--v17;
            *--unint64_t v24 = v31;
          }
          while (v17 != (unint64_t *)v19);
        }
      }
      *((void *)this + 8) = v24;
      *((void *)this + 9) = v18;
      *((void *)this + 10) = &v23[8 * v43];
      if (v19)
      {
        uint64_t v32 = v19;
        uint64_t v33 = v18;
        operator delete(v32);
        unint64_t v18 = v33;
        uint64_t v12 = *((void *)this + 11);
        uint64_t v8 = *((void *)this + 14);
        uint64_t i = *((void *)this + 15);
        uint64_t v10 = *((void *)this + 17);
      }
      uint64_t v9 = v44;
    }
    else
    {
      *unint64_t v17 = v11;
      unint64_t v18 = v17 + 1;
    }
    uint64_t v34 = v9 >> 3;
    *((void *)this + 9) = v18;
    uint64_t v35 = *(void *)(v12 + 8 * v11);
    uint64_t v36 = *(void *)(i - v8 + v10 - 8);
    uint64_t v37 = 8 * v35;
    uint64_t v38 = *(void *)(v8 + v37);
    *(void *)(v8 + v37) = *(void *)(i - 8);
    *(void *)(i - 8) = v38;
    *(_DWORD *)(*((void *)this + 11) + 8 * v36) = v35;
    uint64_t v39 = *((void *)this + 17);
    BOOL v40 = (void *)*((void *)this + 18);
    uint64_t v41 = *(void *)(v39 + v37);
    uint64_t v42 = *--v40;
    *(void *)(v39 + v37) = v42;
    *BOOL v40 = v41;
    *((void *)this + 15) -= 8;
    *((void *)this + 18) = v40;
    *(_DWORD *)(*((void *)this + 11) + 8 * v11 + 4) = (((unint64_t)*(unsigned int *)(*((void *)this + 11)
                                                                                            + 8 * v11
                                                                                            + 4) << 32)
                                                       + 0x100000000) >> 32;
    *(_DWORD *)(*((void *)this + 11) + 8 * v11) = (*((void *)this + 12) - *((void *)this + 11)) >> 3;
    uint64_t i = *((void *)this + 15);
  }
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v74 = (void *)(a1 + 8);
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(v2);
  uint8x8_t v5 = (void *)gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(v2);
  unint64_t v6 = (void *)gdc::Registry::storage<md::ls::TileType>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::PendingProcessing>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  uint64_t v9 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  gdc::Registry::storage<md::ls::HasMaterialRaster>(v2);
  gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v2);
  gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v2);
  gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ColorDataHandle>(v2);
  gdc::Registry::storage<md::ls::IndexRange>(v2);
  gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(v2);
  gdc::Registry::storage<md::ls::AssociationHandle>(v2);
  gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  gdc::Registry::storage<md::ls::UVsHandle>(v2);
  gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v2);
  gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v2);
  gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v2);
  gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(v2);
  gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v2);
  gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(v2);
  gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(v2);
  gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(v2);
  gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(v2);
  gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v2);
  gdc::Registry::storage<md::ls::NeedsClimateTint>(v2);
  gdc::Registry::storage<md::ls::CustomRenderState>(v2);
  gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  gdc::Registry::storage<md::ls::IsOpaque>(v2);
  gdc::Registry::storage<md::ls::IsTransparent>(v2);
  gdc::Registry::storage<md::ls::NeedsZBias>(v2);
  gdc::Registry::storage<md::ls::PreserveHeight>(v2);
  gdc::Registry::storage<md::ls::InstanceCount>(v2);
  gdc::Registry::storage<md::ls::IsDecal>(v2);
  unint64_t v77 = (void *)gdc::Registry::storage<md::ls::IsMaterial>(v2);
  gdc::Registry::storage<md::ls::IsMercator>(v2);
  gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  BOOL v76 = (void *)gdc::Registry::storage<md::ls::CustomZIndex>(v2);
  gdc::Registry::storage<md::ls::RenderableHash>(v2);
  gdc::Registry::storage<md::ls::PredefinedRenderState>(v2);
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    unint64_t v10 = (void *)(v3 + 32);
  }
  else {
    unint64_t v10 = (void *)(v4 + 32);
  }
  if (v5[8] - v5[7] < v10[4] - v10[3]) {
    unint64_t v10 = v5 + 4;
  }
  if (v6[8] - v6[7] < v10[4] - v10[3]) {
    unint64_t v10 = v6 + 4;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < v10[4] - v10[3]) {
    unint64_t v10 = (void *)(v7 + 32);
  }
  if (v8[8] - v8[7] < v10[4] - v10[3]) {
    unint64_t v10 = v8 + 4;
  }
  if (*(void *)(v9 + 64) - *(void *)(v9 + 56) < v10[4] - v10[3]) {
    unint64_t v10 = (void *)(v9 + 32);
  }
  v78[0] = v10;
  v78[1] = v3;
  v78[2] = v4;
  v78[3] = v5;
  v78[4] = v6;
  v78[5] = v7;
  v78[6] = v8;
  v78[7] = v9;
  uint64_t v73 = (void *)v9;
  uint64_t v11 = (void *)v10[3];
  uint64_t v12 = (void *)v10[4];
  unint64_t v79 = v11;
  if (v12 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v78))
  {
    uint64_t v13 = v11 + 1;
    do
    {
      uint64_t v11 = v13;
      unint64_t v79 = v13;
      if (v13 == v12) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(v78);
      uint64_t v13 = v11 + 1;
    }
    while (!isValid);
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v16 != v11)
  {
    *uint64_t result = *v11;
    unint64_t v17 = *v11;
    uint64_t v18 = HIDWORD(*v11);
    unint64_t v19 = *v11 >> 39;
    uint64_t v20 = v5[4];
    if (v19 < (v5[5] - v20) >> 3
      && (uint64_t v21 = *(void *)(v20 + 8 * v19)) != 0
      && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F)), v24 = v5[7], v23 = v5[8], v22 < (v23 - v24) >> 3)
      && ((uint64_t v25 = v24 + 8 * v22, v25 != v23) ? (v26 = *(_DWORD *)(v25 + 4) == v18) : (v26 = 0), v26))
    {
      unint64_t v27 = v5[11];
      unint64_t v28 = v5[10] + v22;
    }
    else
    {
      unint64_t v27 = v5[11];
      unint64_t v28 = v27;
    }
    if (v28 == v27) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    uint64_t v30 = v6[4];
    if (v19 < (v6[5] - v30) >> 3
      && (uint64_t v31 = *(void *)(v30 + 8 * v19)) != 0
      && (v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)), v34 = v6[7], uint64_t v33 = v6[8], v32 < (v33 - v34) >> 3)
      && ((uint64_t v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == v18) : (v36 = 0), v36))
    {
      unint64_t v37 = v6[11];
      unint64_t v38 = v6[10] + v32;
    }
    else
    {
      unint64_t v37 = v6[11];
      unint64_t v38 = v37;
    }
    if (v38 == v37) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = v38;
    }
    uint64_t v40 = v8[4];
    if (v19 < (v8[5] - v40) >> 3
      && (uint64_t v41 = *(void *)(v40 + 8 * v19)) != 0
      && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)), v44 = v8[7], v43 = v8[8], v42 < (v43 - v44) >> 3)
      && ((uint64_t v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == v18) : (v46 = 0), v46))
    {
      uint64_t v47 = (char *)(v8[10] + v42);
    }
    else
    {
      uint64_t v47 = (char *)v8[11];
    }
    unint64_t v75 = v47;
    uint64_t v48 = v73[4];
    if (v19 < (v73[5] - v48) >> 3
      && (uint64_t v49 = *(void *)(v48 + 8 * v19)) != 0
      && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v17) & 0x7F)),
          uint64_t v52 = v73[7],
          uint64_t v51 = v73[8],
          v50 < (v51 - v52) >> 3)
      && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v18) : (v54 = 0), v54))
    {
      unint64_t v55 = v73[11];
      unint64_t v56 = v73[10] + v50;
    }
    else
    {
      unint64_t v55 = v73[11];
      unint64_t v56 = v55;
    }
    if (v56 == v55) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = (unsigned __int8 *)v56;
    }
    uint64_t v58 = v77[4];
    if (v19 < (v77[5] - v58) >> 3
      && (uint64_t v59 = *(void *)(v58 + 8 * v19)) != 0
      && (unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * (HIDWORD(v17) & 0x7F)),
          uint64_t v62 = v77[7],
          uint64_t v61 = v77[8],
          v60 < (v61 - v62) >> 3)
      && (uint64_t v63 = v62 + 8 * v60, v63 != v61)
      && *(_DWORD *)(v63 + 4) == v18)
    {
      uint64_t v64 = v57;
      uint64_t v65 = v29;
    }
    else
    {
      uint64_t v64 = v57;
      uint64_t v65 = v29;
    }
    uint64_t v66 = v76[4];
    if (v19 < (v76[5] - v66) >> 3
      && (uint64_t v67 = *(void *)(v66 + 8 * v19)) != 0
      && (unint64_t v68 = *(unsigned __int16 *)(v67 + 2 * (HIDWORD(v17) & 0x7F)),
          uint64_t v69 = v76[7],
          uint64_t v70 = v76[8],
          v68 < (v70 - v69) >> 3)
      && (uint64_t v71 = v69 + 8 * v68, v71 != v70)
      && *(_DWORD *)(v71 + 4) == v18)
    {
      uint64_t v72 = v39;
    }
    else
    {
      uint64_t v72 = v39;
    }
    md::ita::CreateMainRenderItems::operator()((uint64_t)v74, v65, v72, *v75, v64);
  }
  *uint64_t result = 0xFFFFFFFF00000000;
  void *v74 = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::FlyoverInstance>(int8x8_t *a1)
{
  uint64_t v10 = 0x69465F3BE0BF85FBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x69465F3BE0BF85FBLL;
    if (*(void *)&v1 <= 0x69465F3BE0BF85FBuLL) {
      uint64_t v3 = 0x69465F3BE0BF85FBuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x69465F3BE0BF85FBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x69465F3BE0BF85FBLL)
      {
        if (v5[2] == 0x69465F3BE0BF85FBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x69465F3BE0BF85FBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x69465F3BE0BF85FBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AF588(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileType>(int8x8_t *a1)
{
  uint64_t v10 = 0x751B872B282C3971;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x751B872B282C3971;
    if (*(void *)&v1 <= 0x751B872B282C3971uLL) {
      uint64_t v3 = 0x751B872B282C3971uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x751B872B282C3971;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x751B872B282C3971)
      {
        if (v5[2] == 0x751B872B282C3971) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x751B872B282C3971) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x751B872B282C3971) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AF7F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TransformConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x74DC502726E97929;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x74DC502726E97929;
    if (*(void *)&v1 <= 0x74DC502726E97929uLL) {
      uint64_t v3 = 0x74DC502726E97929uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x74DC502726E97929;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x74DC502726E97929)
      {
        if (v5[2] == 0x74DC502726E97929) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x74DC502726E97929) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x74DC502726E97929) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AFA68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x1EBB3E0519E8FF9DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1EBB3E0519E8FF9DLL;
    if (*(void *)&v1 <= 0x1EBB3E0519E8FF9DuLL) {
      uint64_t v3 = 0x1EBB3E0519E8FF9DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1EBB3E0519E8FF9DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1EBB3E0519E8FF9DLL)
      {
        if (v5[2] == 0x1EBB3E0519E8FF9DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1EBB3E0519E8FF9DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1EBB3E0519E8FF9DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AFCD8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PreserveHeight>(int8x8_t *a1)
{
  unint64_t v10 = 0x98A9F01DBB8BCCCELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x98A9F01DBB8BCCCELL;
    if (*(void *)&v1 <= 0x98A9F01DBB8BCCCELL) {
      unint64_t v3 = 0x98A9F01DBB8BCCCELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x98A9F01DBB8BCCCELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x98A9F01DBB8BCCCELL)
      {
        if (v5[2] == 0x98A9F01DBB8BCCCELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x98A9F01DBB8BCCCELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x98A9F01DBB8BCCCELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19AFF48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ViewConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xCFE242268B958ADALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCFE242268B958ADALL;
    if (*(void *)&v1 <= 0xCFE242268B958ADALL) {
      unint64_t v3 = 0xCFE242268B958ADALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCFE242268B958ADALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCFE242268B958ADALL)
      {
        if (v5[2] == 0xCFE242268B958ADALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCFE242268B958ADALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCFE242268B958ADALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B01B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::HasMeshHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xCD844FF303308290;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCD844FF303308290;
    if (*(void *)&v1 <= 0xCD844FF303308290) {
      unint64_t v3 = 0xCD844FF303308290 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCD844FF303308290;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCD844FF303308290)
      {
        if (v5[2] == 0xCD844FF303308290) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCD844FF303308290) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCD844FF303308290) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B0428(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IndexRange>(int8x8_t *a1)
{
  uint64_t v10 = 0x71CBA64B1A9CA230;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x71CBA64B1A9CA230;
    if (*(void *)&v1 <= 0x71CBA64B1A9CA230uLL) {
      uint64_t v3 = 0x71CBA64B1A9CA230uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x71CBA64B1A9CA230;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x71CBA64B1A9CA230)
      {
        if (v5[2] == 0x71CBA64B1A9CA230) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x71CBA64B1A9CA230) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x71CBA64B1A9CA230) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B0698(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x9292F9031FE6DB5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x9292F9031FE6DB5;
    if (*(void *)&v1 <= 0x9292F9031FE6DB5uLL) {
      uint64_t v3 = 0x9292F9031FE6DB5uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x9292F9031FE6DB5;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9292F9031FE6DB5)
      {
        if (v5[2] == 0x9292F9031FE6DB5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9292F9031FE6DB5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9292F9031FE6DB5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B0908(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsTransparent>(int8x8_t *a1)
{
  uint64_t v10 = 0x73F0259EC1934FB1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x73F0259EC1934FB1;
    if (*(void *)&v1 <= 0x73F0259EC1934FB1uLL) {
      uint64_t v3 = 0x73F0259EC1934FB1uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x73F0259EC1934FB1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x73F0259EC1934FB1)
      {
        if (v5[2] == 0x73F0259EC1934FB1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x73F0259EC1934FB1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x73F0259EC1934FB1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B0B78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsDecal>(int8x8_t *a1)
{
  uint64_t v10 = 0x76B9BA390004E44ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x76B9BA390004E44ELL;
    if (*(void *)&v1 <= 0x76B9BA390004E44EuLL) {
      uint64_t v3 = 0x76B9BA390004E44EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x76B9BA390004E44ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x76B9BA390004E44ELL)
      {
        if (v5[2] == 0x76B9BA390004E44ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x76B9BA390004E44ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x76B9BA390004E44ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B0DE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(int8x8_t *a1)
{
  unint64_t v10 = 0xE8C803AC798645E1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE8C803AC798645E1;
    if (*(void *)&v1 <= 0xE8C803AC798645E1) {
      unint64_t v3 = 0xE8C803AC798645E1 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE8C803AC798645E1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE8C803AC798645E1)
      {
        if (v5[2] == 0xE8C803AC798645E1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE8C803AC798645E1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE8C803AC798645E1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B1058(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SharedUniqueID>(int8x8_t *a1)
{
  uint64_t v10 = 0x7931433C9A6EB2C6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7931433C9A6EB2C6;
    if (*(void *)&v1 <= 0x7931433C9A6EB2C6uLL) {
      uint64_t v3 = 0x7931433C9A6EB2C6uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7931433C9A6EB2C6;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7931433C9A6EB2C6)
      {
        if (v5[2] == 0x7931433C9A6EB2C6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7931433C9A6EB2C6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7931433C9A6EB2C6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19B12C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A19B142C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A19B178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A19B1FF4(_Unwind_Exception *a1)
{
  if (v7)
  {
    if (*(unsigned char *)(v8 - 184)) {
      *(unsigned char *)(v8 - 184) = 0;
    }
  }
  if (*(unsigned char *)(v8 - 240)) {
    *(unsigned char *)(v8 - 240) = 0;
  }

  _Unwind_Resume(a1);
}

void sub_1A19B2748(_Unwind_Exception *a1)
{
  std::function<BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::~function((void *)(v2 - 88));

  _Unwind_Resume(a1);
}

void sub_1A19B2BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A19B33C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19B34D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id md::StandardRouteOverlayCache::polylineForRoute(md::StandardRouteOverlayCache *this, GEOComposedRoute *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = (char *)*((void *)this + 6);
  uint8x8_t v5 = (char *)this + 56;
  if (v4 == (char *)this + 56)
  {
LABEL_19:
    id v19 = 0;
    goto LABEL_22;
  }
  while (1)
  {
    id v6 = *((id *)v4 + 4);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      int v7 = objc_msgSend(v6, "polylines", 0);
      uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v22;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v22 != v9) {
              objc_enumerationMutation(v7);
            }
            uint64_t v11 = *(void **)(*((void *)&v21 + 1) + 8 * i);
            uint64_t v12 = [v11 composedRoute];
            BOOL v13 = v12 == v3;

            if (v13)
            {
              id v19 = v11;

              goto LABEL_21;
            }
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }

      goto LABEL_13;
    }
    uint64_t v14 = [v6 composedRoute];
    BOOL v15 = v14 == v3;

    if (v15) {
      break;
    }
LABEL_13:

    unint64_t v16 = (char *)*((void *)v4 + 1);
    if (v16)
    {
      do
      {
        unint64_t v17 = v16;
        unint64_t v16 = *(char **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        unint64_t v17 = (char *)*((void *)v4 + 2);
        BOOL v18 = *(void *)v17 == (void)v4;
        uint64_t v4 = v17;
      }
      while (!v18);
    }
    uint64_t v4 = v17;
    if (v17 == v5) {
      goto LABEL_19;
    }
  }
  id v6 = v6;
  id v19 = v6;
LABEL_21:

LABEL_22:
  return v19;
}

void sub_1A19B36DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19B38F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19B3B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::MercatorTerrainAnchor::setCoordinate(unint64_t a1, double *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 64))(__p);
  double v4 = *a2;
  if (*a2 != *(double *)__p || a2[1] != *(double *)&__p[1] || a2[2] != *(double *)&__p[2])
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      id v6 = *(void **)(v5 + 24);
      if (v6)
      {
        int v7 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(void **)(v5 + 24), a1);
        if (v7)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v7);
          if (__p[0]) {
            operator delete(__p[0]);
          }
          double v4 = *a2;
        }
      }
      double v8 = a2[1];
      double v9 = a2[2];
      if (v4 != *(double *)(a1 + 40) || v8 != *(double *)(a1 + 48) || v9 != *(double *)(a1 + 56))
      {
        *(double *)(a1 + 40) = v4;
        *(double *)(a1 + 48) = v8;
        *(double *)(a1 + 56) = v9;
        float64_t v19 = v8;
        long double v10 = tan(v4 * 0.00872664626 + 0.785398163);
        long double v11 = log(v10);
        v12.f64[0] = v19;
        v12.f64[1] = v11;
        __asm { FMOV            V1.2D, #0.5 }
        *(float64x2_t *)(a1 + 16) = vmlaq_f64(_Q1, (float64x2_t)xmmword_1A28FCBE0, v12);
        *(double *)(a1 + 32) = v9;
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
        [WeakRetained anchorWorldPointDidChange:a1];
      }
    }
  }
}

void sub_1A19B3D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19B40D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double md::Anchor::coordinate@<D0>(md::Anchor *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
  double result = *((double *)this + 7);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t md::GlobeMercatorTerrainAnchor::isMercator(md::GlobeMercatorTerrainAnchor *this)
{
  return 0;
}

uint64_t md::GlobeMercatorTerrainAnchor::worldIndexWithContext()
{
  return 0;
}

double md::GlobeMercatorTerrainAnchor::worldPoint(md::GlobeMercatorTerrainAnchor *this)
{
  uint64_t v2 = *((void *)this + 1);
  double v3 = (*(double (**)(md::GlobeMercatorTerrainAnchor *))(*(void *)this + 56))(this);
  double v5 = v4;
  double v7 = v6;
  if (v2)
  {
    double v8 = *(md::MercatorTerrainHeightCache **)(v2 + 24);
    if (v8) {
      double v9 = md::MercatorTerrainHeightCache::heightForAnchor(v8, (unint64_t)this);
    }
    else {
      double v9 = 0.0;
    }
    double v7 = v7 + v9 * *(float *)(v2 + 72);
  }
  long double v10 = exp(v5 * 6.28318531 + -3.14159265);
  long double v11 = atan(v10);
  __double2 v12 = __sincos_stret(v11 * 2.0 + -1.57079633);
  long double v13 = fmod(v3 * 6.28318531, 6.28318531);
  long double v14 = fmod(v13 + 6.28318531, 6.28318531);
  return (6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0) + v7)
       * v12.__cosval
       * __sincos_stret(v14 + -3.14159265).__cosval;
}

double md::Anchor::mercatorPoint(md::Anchor *this)
{
  return *((double *)this + 2);
}

double md::MercatorTerrainHeightCache::heightForAnchor(md::MercatorTerrainHeightCache *this, unint64_t a2)
{
  double v5 = (float *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(this, a2);
  if (v5) {
    return v5[6];
  }
  double v7 = (uint64_t (***)(void, void *))*((void *)this + 5);
  if (!v7) {
    return 0.0;
  }
  v50[0] = (*(double (**)(unint64_t))(*(void *)a2 + 56))(a2);
  v50[1] = v8;
  v50[2] = v9;
  uint64_t v10 = (**v7)(v7, v50);
  if (!v11) {
    return 0.0;
  }
  double v12 = *(double *)&v10;
  unint64_t v13 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v14 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v13 >> 47) ^ v13);
  unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
  unint64_t v16 = *((void *)this + 1);
  if (v16)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
      if (v15 >= v16) {
        unint64_t v2 = v15 % v16;
      }
    }
    else
    {
      unint64_t v2 = v15 & (v16 - 1);
    }
    BOOL v18 = *(void ***)(*(void *)this + 8 * v2);
    if (v18)
    {
      float64_t v19 = *v18;
      if (*v18)
      {
        if (v17.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v19[1];
            if (v21 == v15)
            {
              if (v19[2] == a2) {
                goto LABEL_87;
              }
            }
            else if ((v21 & (v16 - 1)) != v2)
            {
              goto LABEL_27;
            }
            float64_t v19 = (void *)*v19;
            if (!v19) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v20 = v19[1];
          if (v20 == v15)
          {
            if (v19[2] == a2) {
              goto LABEL_87;
            }
          }
          else
          {
            if (v20 >= v16) {
              v20 %= v16;
            }
            if (v20 != v2) {
              break;
            }
          }
          float64_t v19 = (void *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_27:
  float64_t v19 = operator new(0x20uLL);
  *float64_t v19 = 0;
  v19[1] = v15;
  void v19[2] = a2;
  *((_DWORD *)v19 + 6) = 0;
  float v22 = (float)(unint64_t)(*((void *)this + 3) + 1);
  float v23 = *((float *)this + 8);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    BOOL v24 = 1;
    if (v16 >= 3) {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v16);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v16 = *((void *)this + 1);
    }
    if (prime <= v16)
    {
      if (prime >= v16) {
        goto LABEL_64;
      }
      unint64_t v39 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v16 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v16)
      {
        unint64_t v16 = *((void *)this + 1);
LABEL_64:
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v15 >= v16) {
            unint64_t v2 = v15 % v16;
          }
          else {
            unint64_t v2 = v15;
          }
        }
        else
        {
          unint64_t v2 = (v16 - 1) & v15;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        uint64_t v49 = *(void **)this;
        *(void *)this = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v16 = 0;
        *((void *)this + 1) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v28 = operator new(8 * prime);
    uint64_t v29 = *(void **)this;
    *(void *)this = v28;
    if (v29) {
      operator delete(v29);
    }
    uint64_t v30 = 0;
    *((void *)this + 1) = prime;
    do
      *(void *)(*(void *)this + 8 * v30++) = 0;
    while (prime != v30);
    unint64_t v32 = (char *)this + 16;
    uint64_t v31 = (void *)*((void *)this + 2);
    if (!v31)
    {
LABEL_63:
      unint64_t v16 = prime;
      goto LABEL_64;
    }
    size_t v33 = v31[1];
    size_t v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v35 = v33 & v34;
      *(void *)(*(void *)this + 8 * v35) = v32;
      for (uint64_t i = (void *)*v31; *v31; uint64_t i = (void *)*v31)
      {
        size_t v37 = i[1] & v34;
        if (v37 == v35)
        {
          uint64_t v31 = i;
        }
        else if (*(void *)(*(void *)this + 8 * v37))
        {
          *uint64_t v31 = *i;
          uint64_t v38 = 8 * v37;
          void *i = **(void **)(*(void *)this + v38);
          **(void **)(*(void *)this + v38) = i;
        }
        else
        {
          *(void *)(*(void *)this + 8 * v37) = v31;
          uint64_t v31 = i;
          size_t v35 = v37;
        }
      }
      goto LABEL_63;
    }
    if (v33 >= prime) {
      v33 %= prime;
    }
    *(void *)(*(void *)this + 8 * v33) = v32;
    unint64_t v42 = (void *)*v31;
    if (!*v31) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v44 = v42[1];
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v33)
      {
        if (!*(void *)(*(void *)this + 8 * v44))
        {
          *(void *)(*(void *)this + 8 * v44) = v31;
          goto LABEL_68;
        }
        *uint64_t v31 = *v42;
        uint64_t v43 = 8 * v44;
        *unint64_t v42 = **(void **)(*(void *)this + v43);
        **(void **)(*(void *)this + v43) = v42;
        unint64_t v42 = v31;
      }
      size_t v44 = v33;
LABEL_68:
      uint64_t v31 = v42;
      unint64_t v42 = (void *)*v42;
      size_t v33 = v44;
      if (!v42) {
        goto LABEL_63;
      }
    }
  }
LABEL_77:
  uint64_t v45 = *(void *)this;
  BOOL v46 = *(void **)(*(void *)this + 8 * v2);
  if (v46)
  {
    *float64_t v19 = *v46;
  }
  else
  {
    *float64_t v19 = *((void *)this + 2);
    *((void *)this + 2) = v19;
    *(void *)(v45 + 8 * v2) = (char *)this + 16;
    if (!*v19) {
      goto LABEL_86;
    }
    unint64_t v47 = *(void *)(*v19 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v47 >= v16) {
        v47 %= v16;
      }
    }
    else
    {
      v47 &= v16 - 1;
    }
    BOOL v46 = (void *)(*(void *)this + 8 * v47);
  }
  *BOOL v46 = v19;
LABEL_86:
  ++*((void *)this + 3);
LABEL_87:
  double result = v12;
  float v48 = v12;
  *((float *)v19 + 6) = v48;
  return result;
}

void sub_1A19B479C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  double result = (void *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2) {
            return result;
          }
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        double result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t md::GlobeMercatorTerrainAnchor::isGeocentric(md::GlobeMercatorTerrainAnchor *this)
{
  return 1;
}

uint64_t md::ElevatedTerrainHeightProvider::heightAtPoint(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return md::World::getElevation(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

void sub_1A19B4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A19B4E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19B501C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::clearScene(void)::$_0,std::allocator<md::MapEngine::clearScene(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 1120);
  unint64_t v3 = (void (**)(void *))&unk_1EF56F450;
  v8[0] = &unk_1EF56F450;
  uint64_t v9 = v8;
  unint64_t v4 = *(void **)(v2 + 24);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v7 = v4[5];
  unint64_t v5 = v8;
  while (1)
  {
    (*(void (**)(void *, uint64_t *))(*v5 + 48))(v5, &v7);
    unint64_t v4 = (void *)*v4;
    unint64_t v5 = v9;
    if (!v4) {
      break;
    }
    uint64_t v7 = v4[5];
    if (!v9)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      break;
    }
  }
  if (v5 == v8)
  {
    unint64_t v3 = (void (**)(void *))v8[0];
LABEL_10:
    v3[4](v8);
    goto LABEL_11;
  }
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
LABEL_11:
  md::World::clearAllData(*(md::World **)(v1 + 896));
  (*(void (**)(void))(**(void **)(v1 + 872) + 40))(*(void *)(v1 + 872));
  uint64_t v6 = **(void **)(v1 + 120);
  if (v6)
  {
    LOBYTE(v8[0]) = 5;
    md::MapEngine::setNeedsTick(v6, v8);
  }
}

void sub_1A19B52E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 16))();
}

void geo::Pool<md::TexturedRenderable>::disposeElements(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      unint64_t v4 = &v29;
      unint64_t v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            unint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            unint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            unint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        void *v4 = v8;
        if (*v28)
        {
          unint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  unint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        uint8x8_t v17 = (void (***)(void))(v16 + 312 * v15);
        BOOL v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        float64_t v19 = &v29;
        do
        {
          unint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          float v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            float v23 = (uint64_t **)v20;
            float64_t v19 = (uint64_t **)v20;
          }
          BOOL v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          unint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    BOOL v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        unint64_t v25 = v24;
        BOOL v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        unint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        uint64_t v10 = v25;
      }
      while (!v12);
    }
    uint64_t v10 = v25;
  }
  while (v25 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      unint64_t v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          unint64_t v27 = v26;
          unint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unint64_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          uint64_t v10 = v27;
        }
        while (!v12);
      }
      uint64_t v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A19B560C(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (unsigned char *)a1[1];
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != (unsigned char *)a1)
    {
      do
      {
        if (v3[112]) {
          v3[112] = 0;
        }
        uint64_t v8 = (unsigned char *)*((void *)v3 + 1);
        unint64_t v9 = (void *)*((void *)v3 + 4);
        if (v9 != *((void **)v3 + 6)) {
          free(v9);
        }
        operator delete(v3);
        uint64_t v3 = v8;
      }
      while (v8 != (unsigned char *)a1);
    }
  }
  if (a1[6])
  {
    unint64_t v5 = (unsigned char *)a1[5];
    if (v5)
    {
      do
      {
        if (v5[112]) {
          v5[112] = 0;
        }
        uint64_t v10 = *(unsigned char **)v5;
        unint64_t v11 = (void *)*((void *)v5 + 4);
        if (v11 != *((void **)v5 + 6)) {
          free(v11);
        }
        operator delete(v5);
        unint64_t v5 = v10;
      }
      while (v10);
    }
    a1[5] = 0;
    uint64_t v6 = a1[4];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(a1[3] + 8 * i) = 0;
    }
    a1[6] = 0;
  }
  a1[8] = a1;
  a1[9] = 0;
}

void md::ARExternalAssetDataRequestLogic::reset(gdc::LayerDataCollector **this)
{
}

void md::ARRenderEntityGenerationLogic::reset(md::ARRenderEntityGenerationLogic *this)
{
  uint64_t v2 = (int8x8_t *)*((void *)this + 15);
  if (v2 && *((void *)this + 16))
  {
    uint64_t v3 = (void *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v2);
    uint64_t v4 = (void *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(*((int8x8_t **)this + 16));
    uint64_t v5 = v3[7];
    uint64_t v6 = v3[8];
    if (v5 != v6)
    {
      unint64_t v7 = (uint64_t *)(v3[10] + 8);
      do
      {
        uint64_t v8 = *v7;
        if (*v7 && *(void *)(v8 + 24))
        {
          unint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 16) = 0;
          *(void *)(v8 + 24) = 0;
          if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          ++*(_DWORD *)(v8 + 32);
        }
        v5 += 8;
        v7 += 3;
      }
      while (v5 != v6);
    }
    uint64_t v10 = v4[7];
    uint64_t v11 = v4[8];
    if (v10 != v11)
    {
      BOOL v12 = (uint64_t *)(v4[10] + 8);
      do
      {
        uint64_t v13 = *v12;
        if (*v12 && *(void *)(v13 + 24))
        {
          uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          if (v14)
          {
            if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          ++*(_DWORD *)(v13 + 32);
        }
        v10 += 8;
        v12 += 3;
      }
      while (v10 != v11);
    }
  }
}

void md::ARAssetOcclusionMeshDataLogic::reset(gdc::LayerDataCollector **this)
{
}

void md::FlyoverCompleteTileDataLogic::reset(md::FlyoverCompleteTileDataLogic *this)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (void *)*((void *)this + 71); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = i[15];
    uint64_t v5 = (std::__shared_weak_count *)i[16];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_store(1u, (unsigned __int8 *)(v4 + 32));
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      atomic_store(1u, (unsigned __int8 *)(v4 + 32));
    }
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v6 = *(void *)(*((void *)this + 22) + 128);
  v60[0] = &unk_1EF51F268;
  uint64_t v61 = v60;
  geo::TaskQueue::barrierSync(v6, v60);
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
  }
  else if (v61)
  {
    (*(void (**)(void))(*v61 + 40))();
  }
  std::mutex::lock((std::mutex *)((char *)this + 488));
  std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap((uint64_t)this + 592, (uint64_t)this + 632);
  std::mutex::unlock((std::mutex *)((char *)this + 488));
  for (uint64_t j = (uint64_t *)*((void *)this + 71); j; uint64_t j = (uint64_t *)*j)
  {
    while (1)
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(j[15] + 33));
      if ((v8 & 1) == 0)
      {
        unsigned __int8 v9 = atomic_load((unsigned __int8 *)(j[15] + 32));
        if ((v9 & 1) == 0) {
          break;
        }
      }
      uint64_t j = (uint64_t *)std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::erase((void *)this + 69, j);
      if (!j) {
        goto LABEL_23;
      }
    }
  }
LABEL_23:
  if (*((void *)this + 72))
  {
    uint64_t v10 = (void *)*((void *)this + 71);
    while (v10)
    {
      uint64_t v11 = v10;
      uint64_t v10 = (void *)*v10;
      BOOL v12 = (std::__shared_weak_count *)v11[16];
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        uint64_t v13 = (std::__shared_weak_count *)v11[3];
        if (v13)
        {
LABEL_30:
          if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
        uint64_t v13 = (std::__shared_weak_count *)v11[3];
        if (v13) {
          goto LABEL_30;
        }
      }
      operator delete(v11);
    }
    *((void *)this + 71) = 0;
    uint64_t v14 = *((void *)this + 70);
    if (v14)
    {
      for (uint64_t k = 0; k != v14; ++k)
        *(void *)(*((void *)this + 69) + 8 * k) = 0;
    }
    *((void *)this + 72) = 0;
  }
  if (*((void *)this + 77))
  {
    uint64_t v16 = (void *)*((void *)this + 76);
    if (v16)
    {
      do
      {
        uint8x8_t v17 = (void *)*v16;
        std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v16 + 2);
        operator delete(v16);
        uint64_t v16 = v17;
      }
      while (v17);
    }
    *((void *)this + 76) = 0;
    uint64_t v18 = *((void *)this + 75);
    if (v18)
    {
      for (uint64_t m = 0; m != v18; ++m)
        *(void *)(*((void *)this + 74) + 8 * m) = 0;
    }
    *((void *)this + 77) = 0;
  }
  if (*((void *)this + 82))
  {
    unint64_t v20 = (void *)*((void *)this + 81);
    if (v20)
    {
      do
      {
        uint64_t v21 = (void *)*v20;
        std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v20 + 2);
        operator delete(v20);
        unint64_t v20 = v21;
      }
      while (v21);
    }
    *((void *)this + 81) = 0;
    uint64_t v22 = *((void *)this + 80);
    if (v22)
    {
      for (uint64_t n = 0; n != v22; ++n)
        *(void *)(*((void *)this + 79) + 8 * n) = 0;
    }
    *((void *)this + 82) = 0;
  }
  if (*((void *)this + 26))
  {
    BOOL v24 = (void *)*((void *)this + 25);
    if (v24)
    {
      do
      {
        uint64_t v53 = (void *)*v24;
        BOOL v54 = (void *)v24[8];
        if (v54)
        {
          v24[9] = v54;
          operator delete(v54);
        }
        operator delete(v24);
        BOOL v24 = v53;
      }
      while (v53);
    }
    *((void *)this + 25) = 0;
    uint64_t v25 = *((void *)this + 24);
    if (v25)
    {
      for (iuint64_t i = 0; ii != v25; ++ii)
        *(void *)(*((void *)this + 23) + 8 * ii) = 0;
    }
    *((void *)this + 26) = 0;
  }
  std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear((uint64_t *)this + 28);
  if (*((void *)this + 34))
  {
    unint64_t v27 = (void *)*((void *)this + 33);
    if (v27)
    {
      do
      {
        unint64_t v28 = (void *)*v27;
        operator delete(v27);
        unint64_t v27 = v28;
      }
      while (v28);
    }
    *((void *)this + 33) = 0;
    uint64_t v29 = *((void *)this + 32);
    if (v29)
    {
      for (uint64_t jj = 0; jj != v29; ++jj)
        *(void *)(*((void *)this + 31) + 8 * jj) = 0;
    }
    *((void *)this + 34) = 0;
  }
  *((void *)this + 36) = (char *)this + 224;
  *((void *)this + 37) = 0;
  if (*((void *)this + 41))
  {
    uint64_t v31 = (void *)*((void *)this + 40);
    if (v31)
    {
      do
      {
        unint64_t v55 = (void *)*v31;
        unint64_t v56 = (void *)v31[12];
        if (v56)
        {
          v31[13] = v56;
          operator delete(v56);
        }
        operator delete(v31);
        uint64_t v31 = v55;
      }
      while (v55);
    }
    *((void *)this + 40) = 0;
    uint64_t v32 = *((void *)this + 39);
    if (v32)
    {
      for (uint64_t kk = 0; kk != v32; ++kk)
        *(void *)(*((void *)this + 38) + 8 * kk) = 0;
    }
    *((void *)this + 41) = 0;
  }
  if (*((void *)this + 46))
  {
    size_t v34 = (void *)*((void *)this + 45);
    if (v34)
    {
      do
      {
        uint64_t v57 = (void *)*v34;
        uint64_t v58 = (void *)v34[11];
        if (v58)
        {
          v34[12] = v58;
          operator delete(v58);
        }
        uint64_t v59 = (void *)v34[8];
        if (v59)
        {
          v34[9] = v59;
          operator delete(v59);
        }
        operator delete(v34);
        size_t v34 = v57;
      }
      while (v57);
    }
    *((void *)this + 45) = 0;
    uint64_t v35 = *((void *)this + 44);
    if (v35)
    {
      for (muint64_t m = 0; mm != v35; ++mm)
        *(void *)(*((void *)this + 43) + 8 * mm) = 0;
    }
    *((void *)this + 46) = 0;
  }
  if (*((void *)this + 90))
  {
    size_t v37 = (void *)*((void *)this + 89);
    if (v37)
    {
      do
      {
        uint64_t v38 = (void *)*v37;
        operator delete(v37);
        size_t v37 = v38;
      }
      while (v38);
    }
    *((void *)this + 89) = 0;
    uint64_t v39 = *((void *)this + 88);
    if (v39)
    {
      for (nuint64_t n = 0; nn != v39; ++nn)
        *(void *)(*((void *)this + 87) + 8 * nn) = 0;
    }
    *((void *)this + 90) = 0;
  }
  if (*((void *)this + 53))
  {
    uint64_t v41 = (void *)*((void *)this + 52);
    if (v41)
    {
      do
      {
        unint64_t v42 = (void *)*v41;
        operator delete(v41);
        uint64_t v41 = v42;
      }
      while (v42);
    }
    *((void *)this + 52) = 0;
    uint64_t v43 = *((void *)this + 51);
    if (v43)
    {
      for (uint64_t i1 = 0; i1 != v43; ++i1)
        *(void *)(*((void *)this + 50) + 8 * i1) = 0;
    }
    *((void *)this + 53) = 0;
  }
  if (*((void *)this + 57))
  {
    uint64_t v46 = *((void *)this + 55);
    uint64_t v45 = (md::FlyoverCompleteTileDataLogic *)*((void *)this + 56);
    uint64_t v47 = *(void *)v45;
    *(void *)(v47 + 8) = *(void *)(v46 + 8);
    **(void **)(v46 + 8) = v47;
    *((void *)this + 57) = 0;
    if (v45 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440))
    {
      do
      {
        float v48 = (md::FlyoverCompleteTileDataLogic *)*((void *)v45 + 1);
        operator delete(v45);
        uint64_t v45 = v48;
      }
      while (v48 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440));
    }
  }
  if (*((void *)this + 99))
  {
    uint64_t v49 = (void *)*((void *)this + 98);
    if (v49)
    {
      do
      {
        unint64_t v50 = (void *)*v49;
        operator delete(v49);
        uint64_t v49 = v50;
      }
      while (v50);
    }
    *((void *)this + 98) = 0;
    uint64_t v51 = *((void *)this + 97);
    if (v51)
    {
      for (uint64_t i2 = 0; i2 != v51; ++i2)
        *(void *)(*((void *)this + 96) + 8 * i2) = 0;
    }
    *((void *)this + 99) = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 85));
  *((void *)this + 84) = (char *)this + 680;
  *((void *)this + 86) = 0;
  *((void *)this + 85) = 0;
  std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*((void **)this + 93));
  *((void *)this + 92) = (char *)this + 744;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
}

void sub_1A19B5F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)a1[34]);
    operator delete(a1);
  }
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  uint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(void *)(a1 + 24))
  {
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14) {
        v15 %= v14;
      }
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v17) = a2 + 16;
  }
}

void std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t *)v3[1];
        if (v3[14])
        {
          uint64_t v6 = v3[12];
          unint64_t v7 = (uint64_t *)v3[13];
          uint64_t v8 = *v7;
          *(void *)(v8 + 8) = *(void *)(v6 + 8);
          **(void **)(v6 + 8) = v8;
          v3[14] = 0;
          if (v7 != v3 + 12) {
            break;
          }
        }
LABEL_4:
        operator delete(v3);
        uint64_t v3 = v5;
        if (v5 == a1) {
          return;
        }
      }
      while (1)
      {
        uint64_t v9 = (uint64_t *)v7[1];
        uint64_t v10 = (std::__shared_weak_count *)v7[7];
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          uint64_t v11 = (std::__shared_weak_count *)v7[5];
          if (v11)
          {
LABEL_12:
            if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
        else
        {
          uint64_t v11 = (std::__shared_weak_count *)v7[5];
          if (v11) {
            goto LABEL_12;
          }
        }
        uint64_t v12 = (std::__shared_weak_count *)v7[3];
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v7);
        unint64_t v7 = v9;
        if (v9 == v3 + 12) {
          goto LABEL_4;
        }
      }
    }
  }
}

void *md::TerrainMeshProviderLogic::reset(void *this)
{
  uint64_t v1 = this;
  if (this[19])
  {
    this = (void *)this[18];
    if (this)
    {
      do
      {
        uint64_t v2 = (void *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[18] = 0;
    uint64_t v3 = v1[17];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(v1[16] + 8 * i) = 0;
    }
    v1[19] = 0;
  }
  if (v1[24])
  {
    this = (void *)v1[23];
    if (this)
    {
      do
      {
        uint64_t v5 = (void *)*this;
        operator delete(this);
        this = v5;
      }
      while (v5);
    }
    v1[23] = 0;
    uint64_t v6 = v1[22];
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(v1[21] + 8 * j) = 0;
    }
    v1[24] = 0;
  }
  return this;
}

gdc::Registry *md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  md::FlyoverRenderResources::prunePools(v7);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  md::DaVinciGroundRenderResources::prunePools(v8);
  uint64_t result = *(gdc::Registry **)(a1 + 120);
  if (result) {
    gdc::Registry::create(result);
  }
  return result;
}

void sub_1A19B67DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

gdc::Registry *md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  md::FlyoverRenderResources::prunePools(v7);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  md::DaVinciGroundRenderResources::prunePools(v8);
  uint64_t result = *(gdc::Registry **)(a1 + 120);
  if (result) {
    gdc::Registry::create(result);
  }
  return result;
}

void sub_1A19B6C34(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

gdc::Registry *md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  md::FlyoverRenderResources::prunePools(v7);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  md::DaVinciGroundRenderResources::prunePools(v8);
  uint64_t result = *(gdc::Registry **)(a1 + 120);
  if (result) {
    gdc::Registry::create(result);
  }
  return result;
}

void sub_1A19B708C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *md::FlyoverRenderResources::prunePools(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[140];
  uint64_t v4 = *(void ***)v2;
  uint64_t v3 = *(void ***)(v2 + 8);
  if (*(void ***)v2 != v3)
  {
    do
    {
      this = *v4;
      if (*v4)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v3 = *(void ***)(v2 + 8);
      }
      ++v4;
    }
    while (v4 != v3);
    uint64_t v4 = *(void ***)v2;
  }
  *(void *)(v2 + 8) = v4;
  uint64_t v5 = v1[143];
  unint64_t v7 = *(void ***)v5;
  uint64_t v6 = *(void ***)(v5 + 8);
  if (*(void ***)v5 != v6)
  {
    do
    {
      this = *v7;
      if (*v7)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v6 = *(void ***)(v5 + 8);
      }
      ++v7;
    }
    while (v7 != v6);
    unint64_t v7 = *(void ***)v5;
  }
  *(void *)(v5 + 8) = v7;
  uint64_t v8 = v1[146];
  uint64_t v10 = *(void ***)v8;
  uint64_t v9 = *(void ***)(v8 + 8);
  if (*(void ***)v8 != v9)
  {
    do
    {
      this = *v10;
      if (*v10)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v9 = *(void ***)(v8 + 8);
      }
      ++v10;
    }
    while (v10 != v9);
    uint64_t v10 = *(void ***)v8;
  }
  *(void *)(v8 + 8) = v10;
  uint64_t v11 = v1[149];
  int v13 = *(void ***)v11;
  uint64_t v12 = *(void ***)(v11 + 8);
  if (*(void ***)v11 != v12)
  {
    do
    {
      this = *v13;
      if (*v13)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v12 = *(void ***)(v11 + 8);
      }
      ++v13;
    }
    while (v13 != v12);
    int v13 = *(void ***)v11;
  }
  *(void *)(v11 + 8) = v13;
  uint64_t v14 = v1[152];
  unint64_t v16 = *(void ***)v14;
  unint64_t v15 = *(void ***)(v14 + 8);
  if (*(void ***)v14 != v15)
  {
    do
    {
      this = *v16;
      if (*v16)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        unint64_t v15 = *(void ***)(v14 + 8);
      }
      ++v16;
    }
    while (v16 != v15);
    unint64_t v16 = *(void ***)v14;
  }
  *(void *)(v14 + 8) = v16;
  uint64_t v17 = v1[153];
  float64_t v19 = *(void ***)v17;
  uint64_t v18 = *(void ***)(v17 + 8);
  if (*(void ***)v17 != v18)
  {
    do
    {
      this = *v19;
      if (*v19)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v18 = *(void ***)(v17 + 8);
      }
      ++v19;
    }
    while (v19 != v18);
    float64_t v19 = *(void ***)v17;
  }
  *(void *)(v17 + 8) = v19;
  uint64_t v20 = v1[154];
  uint64_t v22 = *(void ***)v20;
  uint64_t v21 = *(void ***)(v20 + 8);
  if (*(void ***)v20 != v21)
  {
    do
    {
      this = *v22;
      if (*v22)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        uint64_t v21 = *(void ***)(v20 + 8);
      }
      ++v22;
    }
    while (v22 != v21);
    uint64_t v22 = *(void ***)v20;
  }
  *(void *)(v20 + 8) = v22;
  uint64_t v23 = v1[155];
  uint64_t v25 = *(void ***)v23;
  BOOL v24 = *(void ***)(v23 + 8);
  if (*(void ***)v23 != v24)
  {
    do
    {
      this = *v25;
      if (*v25)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        BOOL v24 = *(void ***)(v23 + 8);
      }
      ++v25;
    }
    while (v25 != v24);
    uint64_t v25 = *(void ***)v23;
  }
  *(void *)(v23 + 8) = v25;
  uint64_t v26 = v1[156];
  unint64_t v28 = *(void ***)v26;
  unint64_t v27 = *(void ***)(v26 + 8);
  if (*(void ***)v26 != v27)
  {
    do
    {
      this = *v28;
      if (*v28)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        unint64_t v27 = *(void ***)(v26 + 8);
      }
      ++v28;
    }
    while (v28 != v27);
    unint64_t v28 = *(void ***)v26;
  }
  *(void *)(v26 + 8) = v28;
  return this;
}

uint64_t md::RenderLayerProviderWrapper::legacyFlyoverRenderResources(md::RenderLayerProviderWrapper *this)
{
  return *((void *)this + 1) + 2896;
}

gdc::Registry *md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  md::FlyoverRenderResources::prunePools(v7);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  md::DaVinciGroundRenderResources::prunePools(v8);
  uint64_t result = *(gdc::Registry **)(a1 + 120);
  if (result) {
    gdc::Registry::create(result);
  }
  return result;
}

void sub_1A19B7854(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

gdc::Registry *md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  md::FlyoverRenderResources::prunePools(v7);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  md::DaVinciGroundRenderResources::prunePools(v8);
  uint64_t result = *(gdc::Registry **)(a1 + 120);
  if (result) {
    gdc::Registry::create(result);
  }
  return result;
}

void sub_1A19B7CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

gdc::Registry *md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 0xC94DD89A7B09BE9CLL)
    {
      v3 += 5;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[3];
    uint64_t v6 = (std::__shared_weak_count *)v3[4];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  unint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  md::FlyoverRenderResources::prunePools(v7);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  md::DaVinciGroundRenderResources::prunePools(v8);
  uint64_t result = *(gdc::Registry **)(a1 + 120);
  if (result) {
    gdc::Registry::create(result);
  }
  return result;
}

void sub_1A19B8104(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void md::DrapingTaskScheduler::reset(md::DrapingTaskScheduler *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)((char *)this + 8);
  for (uint64_t i = (unsigned __int8 *)*((void *)this + 3); i; uint64_t i = *(unsigned __int8 **)i)
  {
    uint64_t v4 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>(v2, i + 16);
    if (v4)
    {
      for (uint64_t j = v4[8]; j; uint64_t j = *(void *)j)
      {
        if (!atomic_load(*(unsigned __int8 **)(j + 64)))
        {
          atomic_store(3u, *(unsigned __int8 **)(j + 64));
          atomic_store(1u, (unsigned __int8 *)(*(void *)(*(void *)(j + 64) + 8) + 32));
        }
      }
    }
  }
  uint64_t v7 = *(void *)(*(void *)this + 128);
  v16[0] = &unk_1EF5750D8;
  uint64_t v17 = v16;
  geo::TaskQueue::barrierSync(v7, v16);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
    if (!*((void *)this + 4)) {
      return;
    }
    goto LABEL_16;
  }
  if (v17) {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (*((void *)this + 4))
  {
LABEL_16:
    uint64_t v8 = (void *)*((void *)this + 3);
    if (v8)
    {
      do
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v10 = (void *)v8[8];
        while (v10)
        {
          uint64_t v12 = v10;
          uint64_t v10 = (void *)*v10;
          int v13 = (std::__shared_weak_count *)v12[9];
          if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          operator delete(v12);
        }
        uint64_t v11 = (void *)v8[6];
        v8[6] = 0;
        if (v11) {
          operator delete(v11);
        }
        operator delete(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    *((void *)this + 3) = 0;
    uint64_t v14 = *((void *)this + 2);
    if (v14)
    {
      for (uint64_t k = 0; k != v14; ++k)
        *(void *)(*v2 + 8 * k) = 0;
    }
    *((void *)this + 4) = 0;
  }
}

void sub_1A19B8388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::MeshRenderableLogic::reset(md::MeshRenderableLogic *this)
{
  if (*((void *)this + 40))
  {
    uint64_t v2 = (void *)*((void *)this + 39);
    if (v2)
    {
      do
      {
        uint64_t v5 = (void *)*v2;
        uint64_t v6 = (void *)v2[3];
        if (v6)
        {
          v2[4] = v6;
          operator delete(v6);
        }
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5);
    }
    *((void *)this + 39) = 0;
    uint64_t v3 = *((void *)this + 38);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 37) + 8 * i) = 0;
    }
    *((void *)this + 40) = 0;
  }
  *((unsigned char *)this + 416) = 1;
  geo::Pool<md::TexturedRenderable>::disposeElements((uint64_t)this + 224);
}

void md::PendingSceneLogic::reset(md::PendingSceneLogic *this)
{
}

void md::LayerDataLogic::reset(md::LayerDataLogic *this)
{
  uint64_t v1 = (void *)*((void *)this + 15);
  uint64_t v2 = v1[1];
  for (uint64_t i = v1[2]; v2 != i; v2 += 24)
    gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v2 + 8));
  uint64_t v4 = (gdc::ResourceManager *)v1[7];
  gdc::ResourceManager::cleanupResources(v4);
}

void md::World::clearAllData(md::World *this)
{
  uint64_t v2 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); v2 != i; v2 += 16)
    gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v2 + 8));
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = *((void *)this + 11);
  while (v4 != v5)
  {
    uint64_t v6 = *(void **)(v4 + 8);
    std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(v6);
    if (v6[6])
    {
      uint64_t v7 = (unsigned char *)v6[5];
      if (v7)
      {
        do
        {
          if (v7[112]) {
            v7[112] = 0;
          }
          uint64_t v10 = *(unsigned char **)v7;
          uint64_t v11 = (void *)*((void *)v7 + 4);
          if (v11 != *((void **)v7 + 6)) {
            free(v11);
          }
          operator delete(v7);
          uint64_t v7 = v10;
        }
        while (v10);
      }
      v6[5] = 0;
      uint64_t v8 = v6[4];
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(v6[3] + 8 * j) = 0;
      }
      void v6[6] = 0;
    }
    v6[8] = v6;
    v6[9] = 0;
    v4 += 16;
  }
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*((void *)this + 3) + 56));
  uint64_t v12 = *((void *)this + 42);
  if (v12)
  {
    int v13 = *(void **)v12;
    if (*(void *)(*(void *)v12 + 32))
    {
      uint64_t v14 = (void *)v13[3];
      if (v14)
      {
        do
        {
          unint64_t v15 = (void *)*v14;
          operator delete(v14);
          uint64_t v14 = v15;
        }
        while (v15);
      }
      v13[3] = 0;
      uint64_t v16 = v13[2];
      if (v16)
      {
        for (uint64_t k = 0; k != v16; ++k)
          *(void *)(v13[1] + 8 * k) = 0;
      }
      v13[4] = 0;
    }
    std::__list_imp<std::pair<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>>>::clear(v13 + 6);
  }
  uint64_t v18 = (void *)*((void *)this + 44);
  if (v18)
  {
    if (v18[6])
    {
      float64_t v19 = (void *)v18[5];
      if (v19)
      {
        do
        {
          uint64_t v20 = (void *)*v19;
          operator delete(v19);
          float64_t v19 = v20;
        }
        while (v20);
      }
      v18[5] = 0;
      uint64_t v21 = v18[4];
      if (v21)
      {
        for (uint64_t m = 0; m != v21; ++m)
          *(void *)(v18[3] + 8 * m) = 0;
      }
      v18[6] = 0;
    }
    if (v18[10])
    {
      uint64_t v24 = v18[8];
      uint64_t v23 = (uint64_t *)v18[9];
      uint64_t v25 = *v23;
      *(void *)(v25 + 8) = *(void *)(v24 + 8);
      **(void **)(v24 + 8) = v25;
      v18[10] = 0;
      if (v23 != v18 + 8)
      {
        do
        {
          uint64_t v26 = (uint64_t *)v23[1];
          operator delete(v23);
          uint64_t v23 = v26;
        }
        while (v26 != v18 + 8);
      }
    }
    if (v18[14])
    {
      unint64_t v27 = (void *)v18[13];
      if (v27)
      {
        do
        {
          unint64_t v28 = (void *)*v27;
          operator delete(v27);
          unint64_t v27 = v28;
        }
        while (v28);
      }
      v18[13] = 0;
      uint64_t v29 = v18[12];
      if (v29)
      {
        for (uint64_t n = 0; n != v29; ++n)
          *(void *)(v18[11] + 8 * n) = 0;
      }
      v18[14] = 0;
    }
  }
}

void gdc::LayerDataSource::cancelAllLayerDataRequests(gdc::LayerDataSource *this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v2 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_DEBUG, "cancelAllLayerDataRequests", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = (uint64_t **)*((void *)this + 7);
  if (v3)
  {
    uint64_t v4 = GEOGetGeoDisplayCoreResourceLoadingLog::onceToken;
    do
    {
      while (1)
      {
        if (v4 != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        uint64_t v5 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
        {
          gdc::LayerDataRequestKey::keysInt32Str(&buf, (unsigned __int16 *)v3[16]);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint8x8_t v40 = 136315138;
          *(void *)&v40[4] = p_buf;
          _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_DEBUG, "Cancelling layer data request: %s", v40, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
        }
        os_signpost_id_t v7 = v3[16][14];
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v8 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log)) {
            break;
          }
        }
        uint64_t v4 = -1;
        uint64_t v3 = (uint64_t **)*v3;
        if (!v3) {
          goto LABEL_21;
        }
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_END, v7, "LayerDataRequest", "status=cancelled", (uint8_t *)&buf, 2u);
      uint64_t v4 = GEOGetGeoDisplayCoreResourceLoadingLog::onceToken;
      uint64_t v3 = (uint64_t **)*v3;
    }
    while (v3);
LABEL_21:
    uint64_t v9 = (uint64_t *)*((void *)this + 7);
    *(_OWORD *)uint8x8_t v40 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v42 = 1065353216;
    if (v9)
    {
      while (1)
      {
        buf.__r_.__value_.__s.__data_[0] = *((unsigned char *)v9 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&buf.__r_.__value_.__l.__size_, (uint64_t)(v9 + 3));
        char v35 = 0;
        if (*((unsigned char *)v9 + 112))
        {
          int v36 = *((_DWORD *)v9 + 29);
          char v35 = 1;
        }
        uint64_t v10 = v9[16];
        uint64_t v37 = v9[15];
        uint64_t v38 = v10;
        uint64_t v11 = (std::__shared_weak_count *)v9[17];
        uint64_t v39 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v40, (unsigned __int8 *)&buf, (uint64_t)&buf);
        if (*(unsigned char *)(v38 + 209)) {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)this + 160, *(void *)(v38 + 112), *(void *)(v38 + 112));
        }
        uint64_t v12 = v39;
        if (v39)
        {
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v35) {
          goto LABEL_33;
        }
LABEL_34:
        if (buf.__r_.__value_.__r.__words[2] != v34) {
          free((void *)buf.__r_.__value_.__r.__words[2]);
        }
        uint64_t v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_39;
        }
      }
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v35) {
        goto LABEL_34;
      }
LABEL_33:
      char v35 = 0;
      goto LABEL_34;
    }
  }
  else
  {
    *(_OWORD *)uint8x8_t v40 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v42 = 1065353216;
  }
LABEL_39:
  for (uint64_t i = (unsigned __int8 *)*((void *)this + 12); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v40, i + 16, (uint64_t)(i + 16));
  for (uint64_t j = (unsigned __int8 *)*((void *)this + 17); j; uint64_t j = *(unsigned __int8 **)j)
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v40, j + 16, (uint64_t)(j + 16));
  unint64_t v15 = (unsigned __int8 *)__p[0];
  if (__p[0])
  {
    uint64_t v16 = (void *)*((void *)this + 59);
    do
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      gdc::LayerDataRequestTracker::_processKey(v16, v15 + 16, (uint64_t *)&buf, 1);
      unint64_t v15 = *(unsigned __int8 **)v15;
    }
    while (v15);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear((void *)this + 5);
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear((void *)this + 10);
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear((void *)this + 15);
  uint64_t v17 = *((void *)this + 2);
  std::mutex::lock((std::mutex *)(v17 + 80));
  if (*(void *)(v17 + 168))
  {
    uint64_t v18 = *(unsigned char **)(v17 + 160);
    if (v18)
    {
      while (1)
      {
        float64_t v19 = *(unsigned char **)v18;
        uint64_t v20 = (std::__shared_weak_count *)*((void *)v18 + 17);
        if (v20)
        {
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v18[112]) {
          goto LABEL_53;
        }
LABEL_54:
        uint64_t v21 = (void *)*((void *)v18 + 4);
        if (v21 != *((void **)v18 + 6)) {
          free(v21);
        }
        operator delete(v18);
        uint64_t v18 = v19;
        if (!v19) {
          goto LABEL_58;
        }
      }
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!v18[112]) {
        goto LABEL_54;
      }
LABEL_53:
      v18[112] = 0;
      goto LABEL_54;
    }
LABEL_58:
    *(void *)(v17 + 160) = 0;
    uint64_t v22 = *(void *)(v17 + 152);
    if (v22)
    {
      for (uint64_t k = 0; k != v22; ++k)
        *(void *)(*(void *)(v17 + 144) + 8 * k) = 0;
    }
    *(void *)(v17 + 168) = 0;
  }
  if (*(void *)(v17 + 208))
  {
    uint64_t v24 = *(unsigned char **)(v17 + 200);
    if (v24)
    {
      do
      {
        if (v24[112]) {
          v24[112] = 0;
        }
        uint64_t v31 = *(unsigned char **)v24;
        uint64_t v32 = (void *)*((void *)v24 + 4);
        if (v32 != *((void **)v24 + 6)) {
          free(v32);
        }
        operator delete(v24);
        uint64_t v24 = v31;
      }
      while (v31);
    }
    *(void *)(v17 + 200) = 0;
    uint64_t v25 = *(void *)(v17 + 192);
    if (v25)
    {
      for (uint64_t m = 0; m != v25; ++m)
        *(void *)(*(void *)(v17 + 184) + 8 * m) = 0;
    }
    *(void *)(v17 + 208) = 0;
  }
  std::mutex::unlock((std::mutex *)(v17 + 80));
  unint64_t v27 = __p[0];
  if (__p[0])
  {
    do
    {
      if (v27[112]) {
        v27[112] = 0;
      }
      uint64_t v29 = *(unsigned char **)v27;
      uint64_t v30 = (void *)*((void *)v27 + 4);
      if (v30 != *((void **)v27 + 6)) {
        free(v30);
      }
      operator delete(v27);
      unint64_t v27 = v29;
    }
    while (v29);
  }
  unint64_t v28 = *(void **)v40;
  *(void *)uint8x8_t v40 = 0;
  if (v28) {
    operator delete(v28);
  }
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::clear(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (unsigned char *)a1[2];
    if (v2)
    {
      while (1)
      {
        uint64_t v3 = *(unsigned char **)v2;
        uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 17);
        if (v4)
        {
          if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v2[112]) {
          goto LABEL_8;
        }
LABEL_9:
        uint64_t v5 = (void *)*((void *)v2 + 4);
        if (v5 != *((void **)v2 + 6)) {
          free(v5);
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_13;
        }
      }
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v2[112]) {
        goto LABEL_9;
      }
LABEL_8:
      v2[112] = 0;
      goto LABEL_9;
    }
LABEL_13:
    a1[2] = 0;
    uint64_t v6 = a1[1];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (unsigned char *)a1[1];
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != (unsigned char *)a1)
    {
      while (1)
      {
        uint64_t v5 = (unsigned char *)*((void *)v3 + 1);
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 17);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v3[112]) {
          goto LABEL_8;
        }
LABEL_9:
        os_signpost_id_t v7 = (void *)*((void *)v3 + 4);
        if (v7 != *((void **)v3 + 6)) {
          free(v7);
        }
        operator delete(v3);
        uint64_t v3 = v5;
        if (v5 == (unsigned char *)a1) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!v3[112]) {
        goto LABEL_9;
      }
LABEL_8:
      v3[112] = 0;
      goto LABEL_9;
    }
  }
}

void md::MaterialLogic::reset(md::MaterialLogic *this)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2[5])
  {
    uint64_t v3 = (void *)v2[4];
    while (v3)
    {
      uint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
      uint64_t v5 = (std::__shared_weak_count *)v4[4];
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      operator delete(v4);
    }
    v2[4] = 0;
    uint64_t v6 = v2[3];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(v2[2] + 8 * i) = 0;
    }
    v2[5] = 0;
  }
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear((uint64_t)(v2 + 13));
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear((uint64_t)(v2 + 25));
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear((uint64_t)(v2 + 37));
  if (*((void *)this + 27))
  {
    uint64_t v8 = (void *)*((void *)this + 26);
    if (v8)
    {
      do
      {
        uint64_t v9 = (void *)*v8;
        operator delete(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    *((void *)this + 26) = 0;
    uint64_t v10 = *((void *)this + 25);
    if (v10)
    {
      for (uint64_t j = 0; j != v10; ++j)
        *(void *)(*((void *)this + 24) + 8 * j) = 0;
    }
    *((void *)this + 27) = 0;
  }
}

void md::LightingLogic::reset(md::LightingLogic *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;

  *((void *)this + 21) = 0x7FFFFFFFFFFFFFFFLL;
  *((unsigned char *)this + 288) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 34));
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = (char *)this + 272;
}

void md::DrapingLogic::reset(md::DrapingTaskScheduler **this)
{
}

void md::VenueLogic::reset(md::VenueLogic *this)
{
  if (*((void *)this + 29))
  {
    uint64_t v2 = (void *)*((void *)this + 28);
    while (v2)
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v3[4];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      operator delete(v3);
    }
    *((void *)this + 28) = 0;
    uint64_t v5 = *((void *)this + 27);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*((void *)this + 26) + 8 * i) = 0;
    }
    *((void *)this + 29) = 0;
  }
  if (*((void *)this + 34))
  {
    os_signpost_id_t v7 = (void *)*((void *)this + 33);
    if (v7)
    {
      do
      {
        uint64_t v8 = (void *)*v7;
        operator delete(v7);
        os_signpost_id_t v7 = v8;
      }
      while (v8);
    }
    *((void *)this + 33) = 0;
    uint64_t v9 = *((void *)this + 32);
    if (v9)
    {
      for (uint64_t j = 0; j != v9; ++j)
        *(void *)(*((void *)this + 31) + 8 * j) = 0;
    }
    *((void *)this + 34) = 0;
  }
  if (*((void *)this + 39))
  {
    uint64_t v11 = (void *)*((void *)this + 38);
    if (v11)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        uint64_t v11 = v12;
      }
      while (v12);
    }
    *((void *)this + 38) = 0;
    uint64_t v13 = *((void *)this + 37);
    if (v13)
    {
      for (uint64_t k = 0; k != v13; ++k)
        *(void *)(*((void *)this + 36) + 8 * k) = 0;
    }
    *((void *)this + 39) = 0;
  }
  *((void *)this + 60) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  if (*((void *)this + 78))
  {
    unint64_t v15 = (void *)*((void *)this + 77);
    if (v15)
    {
      do
      {
        uint64_t v18 = (void *)*v15;
        float64_t v19 = (void *)v15[3];
        if (v19)
        {
          uint64_t v15[4] = v19;
          operator delete(v19);
        }
        operator delete(v15);
        unint64_t v15 = v18;
      }
      while (v18);
    }
    *((void *)this + 77) = 0;
    uint64_t v16 = *((void *)this + 76);
    if (v16)
    {
      for (uint64_t m = 0; m != v16; ++m)
        *(void *)(*((void *)this + 75) + 8 * m) = 0;
    }
    *((void *)this + 78) = 0;
  }
}

uint64_t stringForLayoutReasonsMask(unsigned char *a1, unint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v17);
  char v4 = 0;
  for (uint64_t i = 0; i != 14; ++i)
  {
    char v8 = md::NeedsLayoutReasonList[i];
    if ((a2 >> v8))
    {
      if (v4) {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"|", 1);
      }
      uint64_t v6 = off_1E5A92D78[v8];
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v6, v7);
      char v4 = 1;
    }
  }
  if ((v24 & 0x10) != 0)
  {
    unint64_t v10 = v23;
    if (v23 < v20)
    {
      unint64_t v23 = v20;
      unint64_t v10 = v20;
    }
    uint64_t v11 = (const void **)&v19;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      size_t v9 = 0;
      a1[23] = 0;
      goto LABEL_22;
    }
    uint64_t v11 = (const void **)v18;
    unint64_t v10 = v18[2];
  }
  uint64_t v12 = *v11;
  size_t v9 = v10 - (void)*v11;
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    unint64_t v15 = operator new(v13 + 1);
    *((void *)a1 + 1) = v9;
    *((void *)a1 + 2) = v14 | 0x8000000000000000;
    *(void *)a1 = v15;
    a1 = v15;
    goto LABEL_21;
  }
  a1[23] = v9;
  if (v9) {
LABEL_21:
  }
    memmove(a1, v12, v9);
LABEL_22:
  a1[v9] = 0;
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v25);
}

void sub_1A19B94F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::GenericKey::keysInt32Str(gdc::GenericKey *this, void *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v5 = MEMORY[0x1E4FBA498] + 64;
  v28[0] = MEMORY[0x1E4FBA498] + 64;
  uint64_t v6 = (uint64_t *)MEMORY[0x1E4FBA418];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v20 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v7;
  char v8 = (std::ios_base *)((char *)&v20 + *(void *)(v20 - 24));
  std::ios_base::init(v8, &v21);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v20 = v4;
  v28[0] = v5;
  std::streambuf::basic_streambuf();
  unint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  uint64_t v21 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v26 = 0u;
  int v27 = 16;
  unint64_t v11 = a2[1] - *a2;
  if (v11 < 4) {
    goto LABEL_9;
  }
  std::ostream::operator<<();
  if (v11 >= 8)
  {
    uint64_t v12 = 1;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)".", 1);
      std::ostream::operator<<();
      ++v12;
    }
    while (v11 >> 2 != v12);
  }
  if ((v27 & 0x10) != 0)
  {
    unint64_t v9 = *((void *)&v26 + 1);
LABEL_9:
    if (v9 < v24)
    {
      *((void *)&v26 + 1) = v24;
      unint64_t v9 = v24;
    }
    uint64_t v14 = (const void **)&v23;
    goto LABEL_12;
  }
  if ((v27 & 8) == 0)
  {
    size_t v13 = 0;
    *((unsigned char *)this + 23) = 0;
    goto LABEL_20;
  }
  uint64_t v14 = (const void **)v22;
  unint64_t v9 = v22[2];
LABEL_12:
  unint64_t v15 = *v14;
  size_t v13 = v9 - (void)*v14;
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = (gdc::GenericKey *)operator new(v16 + 1);
    *((void *)this + 1) = v13;
    *((void *)this + 2) = v17 | 0x8000000000000000;
    *(void *)this = v18;
    this = v18;
    goto LABEL_19;
  }
  *((unsigned char *)this + 23) = v13;
  if (v13) {
LABEL_19:
  }
    memmove(this, v15, v13);
LABEL_20:
  *((unsigned char *)this + v13) = 0;
  uint64_t v20 = *v6;
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v6[3];
  uint64_t v21 = v10;
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](v28);
}

uint64_t md::debugString<geo::QuadTile>(unsigned char *a1, char *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v16);
  uint64_t v4 = (void *)std::ostream::operator<<();
  char v26 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)&v26, 1);
  uint64_t v5 = (void *)std::ostream::operator<<();
  char v26 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&v26, 1);
  std::ostream::operator<<();
  unint64_t v6 = *a2;
  if (v6 <= 5) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)off_1E5A9A0C0[v6], qword_1A29CD210[v6]);
  }
  if ((v24 & 0x10) != 0)
  {
    unint64_t v8 = v23;
    if (v23 < v20)
    {
      unint64_t v23 = v20;
      unint64_t v8 = v20;
    }
    unint64_t v9 = (const void **)&v19;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      size_t v7 = 0;
      a1[23] = 0;
      goto LABEL_18;
    }
    unint64_t v9 = (const void **)v18;
    unint64_t v8 = v18[2];
  }
  uint64_t v10 = *v9;
  size_t v7 = v8 - (void)*v9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    size_t v13 = operator new(v11 + 1);
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v12 | 0x8000000000000000;
    *(void *)a1 = v13;
    a1 = v13;
    goto LABEL_17;
  }
  a1[23] = v7;
  if (v7) {
LABEL_17:
  }
    memmove(a1, v10, v7);
LABEL_18:
  a1[v7] = 0;
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v17[0] = v14;
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v25);
}

void sub_1A19B9AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::StylesheetVendor::stylesheetWithName<gss::PropertyID>(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, float a5)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v92);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)"_", 1);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"_", 1);
  size_t v13 = gss::to_string(a4);
  size_t v14 = strlen(v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  unint64_t v15 = (os_unfair_lock_s *)(a2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 24));
  if ((v99 & 0x10) != 0)
  {
    unint64_t v18 = v98;
    if (v98 < v95)
    {
      unint64_t v98 = v95;
      unint64_t v18 = v95;
    }
    uint64_t v19 = (const void **)&v94;
  }
  else
  {
    if ((v99 & 8) == 0)
    {
      std::string::size_type v16 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_22;
    }
    uint64_t v19 = (const void **)v93;
    unint64_t v18 = v93[2];
  }
  unint64_t v20 = *v19;
  std::string::size_type v16 = v18 - (void)*v19;
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v16 >= 0x17)
  {
    uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v21 = v16 | 7;
    }
    uint64_t v22 = v21 + 1;
    p_dst = (std::string *)operator new(v21 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    unint64_t v15 = (os_unfair_lock_s *)(a2 + 24);
    goto LABEL_21;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v18 - *(unsigned char *)v19;
  p_dst = &__dst;
  if (v16) {
LABEL_21:
  }
    memmove(p_dst, v20, v16);
LABEL_22:
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  std::string::value_type v91 = 0;
  unint64_t v23 = *(unsigned __int8 **)(a2 + 48);
  int v24 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(*(unsigned __int8 **)(a2 + 40), v23, (unsigned __int8 *)&__dst);
  if (v23 != v24)
  {
    *a1 = *((void *)v24 + 4);
    uint64_t v25 = *((void *)v24 + 5);
    a1[1] = v25;
    if (v25)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_25;
    }
LABEL_62:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_63;
  }
  uint64_t v88 = v15;
  id v26 = *(id *)(a2 + 16);
  uint64_t v130 = 0;
  unint64_t v131 = &v130;
  uint64_t v132 = 0x3032000000;
  unsigned int v133 = __Block_byref_object_copy__8664;
  uint64_t v134 = __Block_byref_object_dispose__8665;
  id v135 = 0;
  uint64_t v124 = 0;
  int64_t v125 = &v124;
  uint64_t v126 = 0x3032000000;
  uint64_t v127 = __Block_byref_object_copy__8664;
  uint64_t v128 = __Block_byref_object_dispose__8665;
  id v129 = 0;
  uint64_t v115 = (std::string *)MEMORY[0x1E4F143A8];
  uint64_t v116 = 3221225472;
  uint64_t v117 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke;
  uint64_t v118 = (std::string *)&unk_1E5A93590;
  unsigned int v120 = &v124;
  uint64_t v122 = a3;
  id v27 = v26;
  float v123 = a5;
  id v119 = v27;
  uint64_t v121 = &v130;
  unint64_t v28 = (void *)MEMORY[0x1A6239EB0](&v115);
  v107.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  v107.__r_.__value_.__l.__size_ = 3221225472;
  v107.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4;
  unsigned int v108 = &unk_1E5A935B8;
  char v114 = a4;
  uint64_t v85 = v28;
  unsigned int v110 = v85;
  uint64_t v111 = &v130;
  uint64_t v112 = &v124;
  uint64_t v113 = a3;
  id v86 = v27;
  id v109 = v86;
  unint64_t v87 = (void (**)(void, void))MEMORY[0x1A6239EB0](&v107);
  ((void (**)(void, __CFString *))v87)[2](v87, @"styl");
  *a1 = 0;
  a1[1] = 0;
  if (v131[5])
  {
    _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_10PropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
    uint64_t v83 = *(void *)buf;
    *(_OWORD *)a1 = *(_OWORD *)buf;
    char v29 = [v86 isDevResourceWithName:v125[5]];
    id v30 = (id)v131[5];
    uint64_t v105 = &unk_1EF559D98;
    id v106 = v30;
    if (VectorKitDebugConfig_DecodeStyleNames && *((void *)&VectorKitDebugConfig_DecodeStyleNames + 1)) {
      char BOOL = GEOConfigGetBOOL();
    }
    id v84 = (id)v125[5];
    uint64_t v31 = [ (id) v131[5] bytes];
    uint64_t v32 = [(id)v131[5] length];
    md::StyleSheetExtension::localizationMap((md::StyleSheetExtension *)&v103, (md::StylesheetVendor *)a2);
    md::StyleSheetExtension::currencyMap((md::StyleSheetExtension *)&v101, (md::StylesheetVendor *)a2);
    *(void *)std::string buf = &unk_1EF559D98;
    *(void *)&uint8_t buf[8] = 0;
    id v33 = v106;
    uint64_t v34 = *(void **)&buf[8];
    *(void *)&uint8_t buf[8] = v33;

    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v137 = *(std::string *)a3;
    }
    id v40 = v84;
    id v138 = v40;
    uint64_t v140 = 0;
    uint64_t v41 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v41 = &unk_1EF574E50;
    *((void *)v41 + 1) = &unk_1EF559D98;
    *((void *)v41 + 2) = 0;
    objc_storeStrong((id *)v41 + 2, *(id *)&buf[8]);
    int v42 = *(void **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;

    uint64_t v43 = (std::string *)(v41 + 32);
    char v44 = BOOL;
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v43, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
      char v44 = BOOL;
    }
    else
    {
      *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
      *((void *)v41 + 6) = *((void *)&v137.__r_.__value_.__l + 2);
    }
    id v45 = v138;
    id v138 = 0;
    *((void *)v41 + 7) = v45;
    uint64_t v140 = v41;
    gss::StyleSheet<gss::PropertyID>::decodeStylesheetData(v83, v31, v32, (void **)a3, a4, v29, &v103, &v101, a5, v44 & 1, v139);
    if (v140 == v139)
    {
      (*(void (**)(void *))(v139[0] + 32))(v139);
    }
    else if (v140)
    {
      (*(void (**)(void))(*v140 + 40))();
    }

    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    *(void *)std::string buf = &unk_1EF559D98;

    uint64_t v46 = v102;
    if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    uint64_t v47 = v104;
    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }

    uint64_t v105 = &unk_1EF559D98;
  }
  else
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    char v35 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v36 = *(char *)(a3 + 23);
      uint64_t v37 = *(const std::string::value_type **)a3;
      uint64_t v38 = [ (id) v125[5] UTF8String];
      if (v36 >= 0) {
        uint64_t v39 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v39 = v37;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&buf[4] = v39;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v38;
      _os_log_impl(&dword_1A1780000, v35, OS_LOG_TYPE_ERROR, "Couldn't find %s.styl in framework, file name %s", buf, 0x16u);
    }
  }
  _Block_object_dispose(&v124, 8);

  _Block_object_dispose(&v130, 8);
  float v48 = *(unsigned __int8 **)(a2 + 40);
  uint64_t v49 = *(std::string **)(a2 + 48);
  unint64_t v50 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v48, (unsigned __int8 *)v49, (unsigned __int8 *)&__dst);
  if (v49 == (std::string *)v50)
  {
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      float v48 = *(unsigned __int8 **)(a2 + 40);
      uint64_t v49 = *(std::string **)(a2 + 48);
    }
    else
    {
      std::string v107 = __dst;
    }
    std::string::value_type v55 = v91;
    LOBYTE(v108) = v91;
    id v109 = 0;
    unsigned int v110 = 0;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    unint64_t v50 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v48, (unsigned __int8 *)v49, (unsigned __int8 *)&v107);
    if (v49 == (std::string *)v50)
    {
      unint64_t v57 = *(void *)(a2 + 56);
      if (v57 <= (unint64_t)v49)
      {
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 4);
        unint64_t v60 = v59 + 1;
        if (v59 + 1 > 0x555555555555555) {
          abort();
        }
        unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (void)v48) >> 4);
        if (2 * v61 > v60) {
          unint64_t v60 = 2 * v61;
        }
        if (v61 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v62 = 0x555555555555555;
        }
        else {
          unint64_t v62 = v60;
        }
        id v119 = (id)(a2 + 56);
        if (v62)
        {
          if (v62 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v63 = (std::string *)operator new(48 * v62);
        }
        else
        {
          uint64_t v63 = 0;
        }
        uint64_t v66 = v63 + 2 * v59;
        uint64_t v115 = v63;
        uint64_t v116 = (uint64_t)v66;
        uint64_t v117 = (void (*)(uint64_t, void *, void *))v66;
        uint64_t v118 = &v63[2 * v62];
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v63 + 2 * v59, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
          std::string::size_type v69 = (std::string::size_type)v109;
          unint64_t v68 = v110;
          v66[1].__r_.__value_.__s.__data_[0] = (char)v108;
          uint64_t v70 = v63 + 2 * v59;
          v70[1].__r_.__value_.__l.__size_ = v69;
          v70[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v68;
          if (v68) {
            atomic_fetch_add_explicit(v68 + 1, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          std::string *v66 = v107;
          v66[1].__r_.__value_.__s.__data_[0] = v55;
          uint64_t v67 = v63 + 2 * v59;
          v67[1].__r_.__value_.__l.__size_ = 0;
          v67[1].__r_.__value_.__r.__words[2] = 0;
        }
        uint64_t v71 = v116;
        uint64_t v65 = (std::string *)((char *)v117 + 48);
        uint64_t v72 = *(void (**)(uint64_t, void *, void *))(a2 + 40);
        uint64_t v73 = *(void (**)(uint64_t, void *, void *))(a2 + 48);
        if (v73 == v72)
        {
          uint64_t v78 = *(void (**)(uint64_t, void *, void *))(a2 + 48);
        }
        else
        {
          uint64_t v74 = 0;
          do
          {
            uint64_t v75 = v71 + v74;
            BOOL v76 = (char *)v73 + v74;
            long long v77 = *(_OWORD *)((char *)v73 + v74 - 48);
            *(void *)(v75 - 32) = *(void *)((char *)v73 + v74 - 32);
            *(_OWORD *)(v75 - 48) = v77;
            *((void *)v76 - 5) = 0;
            *((void *)v76 - 4) = 0;
            *((void *)v76 - 6) = 0;
            *(unsigned char *)(v75 - 24) = *((unsigned char *)v73 + v74 - 24);
            *(_OWORD *)(v75 - 16) = *(_OWORD *)((char *)v73 + v74 - 16);
            *((void *)v76 - 2) = 0;
            *((void *)v76 - 1) = 0;
            v74 -= 48;
          }
          while ((void (*)(uint64_t, void *, void *))((char *)v73 + v74) != v72);
          v71 += v74;
          uint64_t v78 = *(void (**)(uint64_t, void *, void *))(a2 + 40);
          uint64_t v73 = *(void (**)(uint64_t, void *, void *))(a2 + 48);
        }
        *(void *)(a2 + 40) = v71;
        *(void *)(a2 + 48) = v65;
        unint64_t v79 = *(std::string **)(a2 + 56);
        *(void *)(a2 + 56) = v118;
        uint64_t v118 = v79;
        uint64_t v116 = (uint64_t)v78;
        uint64_t v115 = (std::string *)v78;
        if (v73 != v78)
        {
          do
          {
            uint64_t v117 = (void (*)(uint64_t, void *, void *))((char *)v73 - 48);
            uint64_t v80 = (std::__shared_weak_count *)*((void *)v73 - 1);
            if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
            if (*((char *)v73 - 25) < 0) {
              operator delete(*((void **)v73 - 6));
            }
            uint64_t v73 = v117;
          }
          while (v117 != v78);
          uint64_t v73 = (void (*)(uint64_t, void *, void *))v115;
        }
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v49, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v58 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
          v49->__r_.__value_.__r.__words[2] = v107.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v58;
        }
        v49[1].__r_.__value_.__s.__data_[0] = (char)v108;
        v49[1].__r_.__value_.__l.__size_ = (std::string::size_type)v109;
        uint64_t v64 = v110;
        v49[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v110;
        if (v64) {
          atomic_fetch_add_explicit(v64 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v65 = v49 + 2;
        *(void *)(a2 + 48) = v49 + 2;
      }
      *(void *)(a2 + 48) = v65;
      unint64_t v50 = (unsigned __int8 *)&v65[-2];
      uint64_t v81 = (std::__shared_weak_count *)v110;
      if (v110 && !atomic_fetch_add(v110 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    unint64_t v15 = v88;
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    unint64_t v56 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  uint64_t v52 = *a1;
  uint64_t v51 = a1[1];
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = (std::__shared_weak_count *)*((void *)v50 + 5);
  *((void *)v50 + 4) = v52;
  *((void *)v50 + 5) = v51;
  if (!v53 || atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_62;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
LABEL_63:
  os_unfair_lock_unlock(v15);
  v92[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v92 + *(void *)(v92[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v92[1] = MEMORY[0x1E4FBA470] + 16;
  if (v97 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v100);
}

void sub_1A19BA840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_unfair_lock_s *lock, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>::~__split_buffer((uint64_t)&STACK[0x218]);
  std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>::~pair((uint64_t)&a68);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v68 - 208);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a20);
  if (a26 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(lock);
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

unsigned __int8 *geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *((void *)a3 + 1);
    if ((a3[23] & 0x80u) == 0) {
      uint64_t v6 = a3[23];
    }
    else {
      uint64_t v6 = *((void *)a3 + 1);
    }
    int v7 = a3[24];
    if ((a3[23] & 0x80) != 0)
    {
      size_t v14 = *(const void **)a3;
      while (1)
      {
        uint64_t v15 = v3[23];
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *((void *)v3 + 1);
        }
        if (v6 == v15)
        {
          uint64_t v17 = v16 >= 0 ? v3 : *(unsigned __int8 **)v3;
          if (!memcmp(v14, v17, v5) && v7 == v3[24]) {
            break;
          }
        }
        v3 += 48;
        if (v3 == a2) {
          return a2;
        }
      }
    }
    else if (a3[23])
    {
      do
      {
        uint64_t v8 = v3[23];
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *((void *)v3 + 1);
        }
        if (v6 == v8)
        {
          if (v9 >= 0) {
            uint64_t v10 = v3;
          }
          else {
            uint64_t v10 = *(unsigned __int8 **)v3;
          }
          uint64_t v11 = a3;
          uint64_t v12 = a3[23];
          while (*v11 == *v10)
          {
            ++v11;
            ++v10;
            if (!--v12)
            {
              if (v7 != v3[24]) {
                break;
              }
              return v3;
            }
          }
        }
        v3 += 48;
      }
      while (v3 != a2);
      return a2;
    }
    else
    {
      while (1)
      {
        uint64_t v13 = v3[23];
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *((void *)v3 + 1);
        }
        if (v6 == v13 && v7 == v3[24]) {
          break;
        }
        v3 += 48;
        if (v3 == a2) {
          return a2;
        }
      }
    }
  }
  return v3;
}

const char *gss::to_string(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB1FC0[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB2698[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB2650[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB2398[(char)a1];
  }
}

{
  if (a1 > 0xB) {
    return "Unknown";
  }
  else {
    return off_1E5A9A0F0[(char)a1];
  }
}

{
  if (a1 > 0x76) {
    return "Unknown";
  }
  else {
    return off_1E5A9A150[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB2330[(char)a1];
  }
}

{
  if (a1 > 0xA) {
    return "Unknown";
  }
  else {
    return off_1E5A9A508[(char)a1];
  }
}

{
  if (a1 > 0x15) {
    return "Unknown";
  }
  else {
    return off_1E5A9A560[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB26B0[(char)a1];
  }
}

{
  if (a1 > 0xC) {
    return "Unknown";
  }
  else {
    return off_1E5A9A610[(char)a1];
  }
}

{
  if (a1 > 0x102) {
    return "Unknown";
  }
  else {
    return off_1E5A9A678[(__int16)a1];
  }
}

{
  if (a1 > 0x12E) {
    return "Unknown";
  }
  else {
    return off_1E5A9AE90[(__int16)a1];
  }
}

{
  if (a1 > 0xF) {
    return "Unknown";
  }
  else {
    return off_1E5A9B808[(char)a1];
  }
}

{
  if (a1 > 0xB) {
    return "Unknown";
  }
  else {
    return off_1E5A9B888[(char)a1];
  }
}

{
  if (a1 > 0x20) {
    return "Unknown";
  }
  else {
    return off_1E5A9B8E8[(char)a1];
  }
}

{
  if (a1 > 0x10) {
    return "Unknown";
  }
  else {
    return off_1E5A9B9F0[(char)a1];
  }
}

{
  if (a1 > 0x14) {
    return "Unknown";
  }
  else {
    return off_1E5AAA250[(char)a1];
  }
}

{
  if (a1 > 0x13) {
    return "Unknown";
  }
  else {
    return off_1E5A9BC28[(char)a1];
  }
}

{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E5AB24A0[(char)a1];
  }
}

{
  if (a1 > 0x32) {
    return "Unknown";
  }
  else {
    return off_1E5A9BD88[(char)a1];
  }
}

{
  if (a1 > 0xC) {
    return "Unknown";
  }
  else {
    return off_1E5A9BF20[(char)a1];
  }
}

{
  if (a1 > 0x27) {
    return "Unknown";
  }
  else {
    return off_1E5A9BF88[(char)a1];
  }
}

{
  if (a1 > 0x27) {
    return "Unknown";
  }
  else {
    return off_1E5A9C0C8[(char)a1];
  }
}

{
  if (a1 > 0x1D) {
    return "Unknown";
  }
  else {
    return off_1E5A9C208[(char)a1];
  }
}

{
  if (a1 > 0x7E) {
    return "Unknown";
  }
  else {
    return off_1E5A9C2F8[(char)a1];
  }
}

{
  if (a1 > 0x12) {
    return "Unknown";
  }
  else {
    return off_1E5A9C7F0[(char)a1];
  }
}

{
  if (a1 > 0x1B) {
    return "Unknown";
  }
  else {
    return off_1E5A9C888[(char)a1];
  }
}

{
  if (a1 > 0x37) {
    return "Unknown";
  }
  else {
    return off_1E5A9C9D0[(char)a1];
  }
}

{
  if (a1 > 0xE) {
    return "Unknown";
  }
  else {
    return off_1E5A9CB90[(char)a1];
  }
}

{
  if (a1 > 0x315) {
    return "Unknown";
  }
  else {
    return off_1E5A9D408[(__int16)a1];
  }
}

{
  if (a1 > 0x1E9) {
    return "Unknown";
  }
  else {
    return off_1E5A9ECB8[(__int16)a1];
  }
}

{
  if (a1 > 0x10) {
    return "Unknown";
  }
  else {
    return off_1E5AA0408[(char)a1];
  }
}

{
  if (a1 > 0x14) {
    return "Unknown";
  }
  else {
    return off_1E5AA0490[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB2470[(char)a1];
  }
}

{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E5AB26C8[(char)a1];
  }
}

{
  if (a1 > 0xC) {
    return "Unknown";
  }
  else {
    return off_1E5AA0538[(char)a1];
  }
}

{
  if (a1 > 0x10) {
    return "Unknown";
  }
  else {
    return off_1E5AA05A0[(char)a1];
  }
}

{
  if (a1 > 0xA) {
    return "Unknown";
  }
  else {
    return off_1E5AA0BF0[(char)a1];
  }
}

{
  if (a1 > 0x7A) {
    return "Unknown";
  }
  else {
    return off_1E5AA0C48[(char)a1];
  }
}

{
  if (a1 > 0x14) {
    return "Unknown";
  }
  else {
    return off_1E5AB1610[(char)a1];
  }
}

{
  if (a1 > 0xA) {
    return "Unknown";
  }
  else {
    return off_1E5AB16B8[(char)a1];
  }
}

{
  if (a1 > 0x11) {
    return "Unknown";
  }
  else {
    return off_1E5AB1710[(char)a1];
  }
}

{
  if (a1 > 0x12) {
    return "Unknown";
  }
  else {
    return off_1E5AB17A0[(char)a1];
  }
}

{
  if (a1 > 4) {
    return "Unknown";
  }
  else {
    return off_1E5AB1FF0[(char)a1];
  }
}

void md::LogicManager::setLogicExecutionGraph(int8x8_t *a1, unint64_t ***a2)
{
  uint64_t v3 = a1;
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 6;
  if (a1[9].i8[0])
  {
    size_t v5 = (void *)*v4;
    if (*v4)
    {
      v3[7] = (int8x8_t)v5;
      operator delete(v5);
    }
    v3[9].i8[0] = 0;
  }
  *(_OWORD *)uint64_t v158 = 0u;
  *(_OWORD *)uint64_t v159 = 0u;
  int v160 = 1065353216;
  uint64_t v6 = **a2;
  int v7 = (*a2)[1];
  uint64_t v151 = v3;
  if (v6 == v7)
  {
    uint64_t v10 = 0;
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_62;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    int8x8_t v11 = v3[2];
    if (!*(void *)&v11) {
      break;
    }
    unint64_t v12 = *v6;
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v14 = *v6;
      if (v12 >= *(void *)&v11) {
        unint64_t v14 = v12 % *(void *)&v11;
      }
    }
    else
    {
      unint64_t v14 = (*(void *)&v11 - 1) & v12;
    }
    uint64_t v15 = *(void **)(*(void *)&v3[1] + 8 * v14);
    if (!v15) {
      break;
    }
    int v16 = (void *)*v15;
    if (!v16) {
      break;
    }
    if (v13.u32[0] < 2uLL)
    {
      uint64_t v17 = *(void *)&v11 - 1;
      while (1)
      {
        uint64_t v19 = v16[1];
        if (v19 == v12)
        {
          if (v16[2] == v12) {
            goto LABEL_28;
          }
        }
        else if ((v19 & v17) != v14)
        {
          goto LABEL_59;
        }
        int v16 = (void *)*v16;
        if (!v16) {
          goto LABEL_59;
        }
      }
    }
    while (1)
    {
      unint64_t v18 = v16[1];
      if (v18 == v12) {
        break;
      }
      if (v18 >= *(void *)&v11) {
        v18 %= *(void *)&v11;
      }
      if (v18 != v14) {
        goto LABEL_59;
      }
LABEL_17:
      int v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_59;
      }
    }
    if (v16[2] != v12) {
      goto LABEL_17;
    }
LABEL_28:
    uint64_t v20 = v16[5];
    if (v9 < v10)
    {
      *(void *)int v9 = v20;
      v9 += 8;
      goto LABEL_47;
    }
    uint64_t v21 = (v9 - v8) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      abort();
    }
    if ((v10 - v8) >> 2 > v22) {
      unint64_t v22 = (v10 - v8) >> 2;
    }
    if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      if (!(v23 >> 61))
      {
        int v24 = operator new(8 * v23);
        goto LABEL_40;
      }
LABEL_294:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v24 = 0;
LABEL_40:
    uint64_t v25 = &v24[8 * v21];
    *(void *)uint64_t v25 = v20;
    id v26 = v25 + 8;
    if (v9 != v8)
    {
      unint64_t v27 = v9 - 8 - v8;
      if (v27 < 0x168)
      {
        unint64_t v28 = v9;
        goto LABEL_43;
      }
      if (&v24[v9 - v8 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v24[v9 - v8 - 8])
      {
        unint64_t v28 = v9;
        goto LABEL_43;
      }
      if (&v9[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
      {
        unint64_t v28 = v9;
        goto LABEL_43;
      }
      if ((unint64_t)(v8 - v24) < 0x20)
      {
        unint64_t v28 = v9;
        goto LABEL_43;
      }
      uint64_t v30 = (v27 >> 3) + 1;
      unint64_t v28 = &v9[-8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v31 = &v24[8 * v21 - 16];
      uint64_t v32 = v9 - 16;
      uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *(_OWORD *)v32;
        *(v31 - 1) = *((_OWORD *)v32 - 1);
        *uint64_t v31 = v34;
        v31 -= 2;
        v32 -= 32;
        v33 -= 4;
      }
      while (v33);
      v25 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_43:
          uint64_t v29 = *((void *)v28 - 1);
          v28 -= 8;
          *((void *)v25 - 1) = v29;
          v25 -= 8;
        }
        while (v28 != v8);
      }
    }
    uint64_t v10 = &v24[8 * v23];
    if (v8)
    {
      int v9 = v26;
      operator delete(v8);
      uint64_t v8 = v25;
    }
    else
    {
      uint64_t v8 = v25;
      int v9 = v26;
    }
LABEL_47:
    std::__hash_table<gdc::TypeInfo,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,std::allocator<gdc::TypeInfo>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo const&>((float *)v158, *v6, (uint64_t)v6);
    v6 += 4;
    uint64_t v3 = v151;
    if (v6 == v7)
    {
LABEL_62:
      for (uint64_t i = (void *)v3[3]; i; uint64_t i = (void *)*i)
      {
        if (v158[1])
        {
          unint64_t v36 = i[2];
          uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v158[1]);
          v37.i16[0] = vaddlv_u8(v37);
          if (v37.u32[0] > 1uLL)
          {
            unint64_t v38 = i[2];
            if ((void *)v36 >= v158[1]) {
              unint64_t v38 = v36 % (unint64_t)v158[1];
            }
          }
          else
          {
            unint64_t v38 = ((unint64_t)v158[1] - 1) & v36;
          }
          uint64_t v39 = (void *)*((void *)v158[0] + v38);
          if (v39)
          {
            id v40 = (void *)*v39;
            if (v40)
            {
              if (v37.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v42 = v40[1];
                  if (v42 == v36)
                  {
                    if (v40[2] == v36) {
                      goto LABEL_88;
                    }
                  }
                  else if ((v42 & ((unint64_t)v158[1] - 1)) != v38)
                  {
                    goto LABEL_86;
                  }
                  id v40 = (void *)*v40;
                  if (!v40) {
                    goto LABEL_86;
                  }
                }
              }
              do
              {
                unint64_t v41 = v40[1];
                if (v41 == v36)
                {
                  if (v40[2] == v36)
                  {
LABEL_88:
                    id v45 = (unsigned char *)i[5];
                    if (!v45[56])
                    {
                      v45[56] = 1;
                      char v44 = (void (**)(void))(*(void *)v45 + 32);
LABEL_64:
                      (*v44)();
                    }
                    goto LABEL_65;
                  }
                }
                else
                {
                  if ((void *)v41 >= v158[1]) {
                    v41 %= (unint64_t)v158[1];
                  }
                  if (v41 != v38) {
                    break;
                  }
                }
                id v40 = (void *)*v40;
              }
              while (v40);
            }
          }
        }
LABEL_86:
        uint64_t v43 = (unsigned char *)i[5];
        if (v43[56])
        {
          v43[56] = 0;
          char v44 = (void (**)(void))(*(void *)v43 + 40);
          goto LABEL_64;
        }
LABEL_65:
        ;
      }
      v3[10].i8[0] = 1;
      if (v3[9].i8[0])
      {
        uint64_t v46 = (void *)*v4;
        if (*v4)
        {
          v3[7] = (int8x8_t)v46;
          operator delete(v46);
          int8x8_t *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
        }
        v3[6] = (int8x8_t)v8;
        v3[7] = (int8x8_t)v9;
        v3[8] = (int8x8_t)v10;
      }
      else
      {
        v3[6] = (int8x8_t)v8;
        v3[7] = (int8x8_t)v9;
        v3[8] = (int8x8_t)v10;
        v3[9].i8[0] = 1;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v47 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_INFO)) {
        goto LABEL_281;
      }
      uint64_t v149 = v47;
      if (!v3[9].i8[0])
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        goto LABEL_294;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v161);
      float v48 = (uint64_t **)v3[6];
      unint64_t v150 = (uint64_t **)v3[7];
      if (v48 != v150)
      {
        while (2)
        {
          uint64_t v49 = *v48;
          if (*((unsigned char *)*v48 + 56))
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, v49[2], v49[3]);
            unsigned int v152 = v49;
            uint64_t v153 = v48;
            if (v49[11])
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)" (", 2);
              unint64_t v50 = (void *)v49[9];
              uint64_t v51 = v49 + 10;
              if (v50 != v51)
              {
                uint64_t v154 = v51;
                do
                {
                  uint64_t v53 = v50[4];
                  uint64_t v52 = v50[5];
                  std::streamsize v54 = v50[6];
                  MEMORY[0x1A6238CF0](v171, v162);
                  if (!v171[0]) {
                    goto LABEL_137;
                  }
                  std::string::value_type v55 = (const std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24));
                  rdstd::string buf = v55->__rdbuf_;
                  std::ios_base::fmtflags fmtflags = v55->__fmtflags_;
                  int v58 = v55[1].__fmtflags_;
                  if (v58 == -1)
                  {
                    std::ios_base::getloc(v55);
                    unint64_t v59 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
                    int v58 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 32);
                    std::locale::~locale(&__b);
                    v55[1].__fmtflags_ = v58;
                  }
                  int v60 = fmtflags & 0xB0;
                  uint64_t v61 = v52 + v54;
                  if (v60 == 32) {
                    uint64_t v62 = v52 + v54;
                  }
                  else {
                    uint64_t v62 = v52;
                  }
                  if (!rdbuf) {
                    goto LABEL_136;
                  }
                  std::streamsize width = v55->__width_;
                  size_t v64 = width <= v54 ? 0 : width - v54;
                  if (v62 - v52 >= 1
                    && (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)rdbuf + 96))(rdbuf, v52, v62 - v52) != v62 - v52)
                  {
                    goto LABEL_136;
                  }
                  if ((uint64_t)v64 >= 1)
                  {
                    if (v64 > 0x7FFFFFFFFFFFFFF7) {
                      abort();
                    }
                    if (v64 >= 0x17)
                    {
                      uint64_t v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v64 | 7) != 0x17) {
                        uint64_t v66 = v64 | 7;
                      }
                      uint64_t v67 = v66 + 1;
                      p_b = (std::locale::__imp *)operator new(v66 + 1);
                      size_t v173 = v64;
                      int64_t v174 = v67 | 0x8000000000000000;
                      __b.__locale_ = p_b;
                    }
                    else
                    {
                      HIBYTE(v174) = v64;
                      p_b = (std::locale::__imp *)&__b;
                    }
                    memset(p_b, v58, v64);
                    *((unsigned char *)p_b + v64) = 0;
                    if (v174 >= 0) {
                      locale = &__b;
                    }
                    else {
                      locale = __b.__locale_;
                    }
                    uint64_t v69 = (*(uint64_t (**)(void *, void *, size_t))(*(void *)rdbuf + 96))(rdbuf, locale, v64);
                    uint64_t v70 = v69;
                    if (SHIBYTE(v174) < 0)
                    {
                      operator delete(__b.__locale_);
                      if (v70 != v64) {
                        goto LABEL_136;
                      }
                    }
                    else if (v69 != v64)
                    {
                      goto LABEL_136;
                    }
                  }
                  if (v61 - v62 < 1
                    || (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)rdbuf + 96))(rdbuf, v62, v61 - v62) == v61 - v62)
                  {
                    v55->__width_ = 0;
                    uint64_t v51 = v154;
                    goto LABEL_137;
                  }
LABEL_136:
                  std::ios_base::clear((std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24)), *(_DWORD *)((char *)&v163[1] + *(void *)(v162[0] - 24)) | 5);
                  uint64_t v51 = v154;
LABEL_137:
                  MEMORY[0x1A6238D00](v171);
                  uint64_t v71 = (void *)*v51;
                  uint64_t v72 = v51;
                  if (*v51)
                  {
                    do
                    {
                      uint64_t v73 = v71;
                      uint64_t v71 = (void *)v71[1];
                    }
                    while (v71);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v73 = (void *)v72[2];
                      BOOL v74 = *v73 == (void)v72;
                      uint64_t v72 = v73;
                    }
                    while (v74);
                  }
                  if (v53 == v73[4]) {
                    goto LABEL_173;
                  }
                  MEMORY[0x1A6238CF0](v171, v162);
                  if (v171[0])
                  {
                    uint64_t v75 = (char *)v162 + *(void *)(v162[0] - 24);
                    uint64_t v76 = *((void *)v75 + 5);
                    int v77 = *((_DWORD *)v75 + 2);
                    int v78 = *((_DWORD *)v75 + 36);
                    if (v78 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24)));
                      unint64_t v79 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
                      int v78 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 32);
                      std::locale::~locale(&__b);
                      *((_DWORD *)v75 + 36) = v78;
                    }
                    if ((v77 & 0xB0) == 0x20) {
                      uint64_t v80 = "";
                    }
                    else {
                      uint64_t v80 = ", ";
                    }
                    if (!v76) {
                      goto LABEL_171;
                    }
                    uint64_t v81 = *((void *)v75 + 3);
                    BOOL v82 = v81 <= 2;
                    uint64_t v83 = v81 - 2;
                    size_t v84 = v82 ? 0 : v83;
                    if (v80 - ", " >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v76 + 96))(v76, ", ", v80 - ", ") != v80 - ", ")
                    {
                      goto LABEL_171;
                    }
                    if ((uint64_t)v84 >= 1)
                    {
                      if (v84 > 0x7FFFFFFFFFFFFFF7) {
                        abort();
                      }
                      if (v84 >= 0x17)
                      {
                        uint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v84 | 7) != 0x17) {
                          uint64_t v86 = v84 | 7;
                        }
                        uint64_t v87 = v86 + 1;
                        uint64_t v85 = (std::locale::__imp *)operator new(v86 + 1);
                        size_t v173 = v84;
                        int64_t v174 = v87 | 0x8000000000000000;
                        __b.__locale_ = v85;
                      }
                      else
                      {
                        HIBYTE(v174) = v84;
                        uint64_t v85 = (std::locale::__imp *)&__b;
                      }
                      memset(v85, v78, v84);
                      *((unsigned char *)v85 + v84) = 0;
                      if (v174 >= 0) {
                        uint64_t v88 = &__b;
                      }
                      else {
                        uint64_t v88 = __b.__locale_;
                      }
                      uint64_t v89 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v76 + 96))(v76, v88, v84);
                      uint64_t v90 = v89;
                      if (SHIBYTE(v174) < 0)
                      {
                        operator delete(__b.__locale_);
                        if (v90 != v84) {
                          goto LABEL_171;
                        }
                      }
                      else if (v89 != v84)
                      {
                        goto LABEL_171;
                      }
                    }
                    uint64_t v91 = ", " - v80 + 2;
                    if (v91 >= 1
                      && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v76 + 96))(v76, v80, ", " - v80 + 2) != v91)
                    {
LABEL_171:
                      std::ios_base::clear((std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24)), *(_DWORD *)((char *)&v163[1] + *(void *)(v162[0] - 24)) | 5);
                      uint64_t v51 = v154;
                      goto LABEL_172;
                    }
                    *((void *)v75 + 3) = 0;
                    uint64_t v51 = v154;
                  }
LABEL_172:
                  MEMORY[0x1A6238D00](v171);
LABEL_173:
                  uint64_t v92 = (void *)v50[1];
                  if (v92)
                  {
                    do
                    {
                      uint64_t v93 = v92;
                      uint64_t v92 = (void *)*v92;
                    }
                    while (v92);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v93 = (void *)v50[2];
                      BOOL v74 = *v93 == (void)v50;
                      unint64_t v50 = v93;
                    }
                    while (!v74);
                  }
                  unint64_t v50 = v93;
                }
                while (v93 != v51);
              }
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)")", 1);
              uint64_t v3 = v151;
              uint64_t v49 = v152;
              float v48 = v153;
            }
            if (v49[14])
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)", (", 3);
              uint64_t v94 = (void *)v49[12];
              unint64_t v95 = v49 + 13;
              if (v94 != v95)
              {
                unint64_t v155 = v95;
                do
                {
                  uint64_t v97 = v94[4];
                  uint64_t v96 = v94[5];
                  std::streamsize v98 = v94[6];
                  MEMORY[0x1A6238CF0](v171, v162);
                  if (!v171[0]) {
                    goto LABEL_214;
                  }
                  int v99 = (const std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24));
                  uint64_t v100 = v99->__rdbuf_;
                  std::ios_base::fmtflags v101 = v99->__fmtflags_;
                  int v102 = v99[1].__fmtflags_;
                  if (v102 == -1)
                  {
                    std::ios_base::getloc(v99);
                    uint64_t v103 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
                    int v102 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 32);
                    std::locale::~locale(&__b);
                    v99[1].__fmtflags_ = v102;
                  }
                  int v104 = v101 & 0xB0;
                  uint64_t v105 = v96 + v98;
                  if (v104 == 32) {
                    uint64_t v106 = v96 + v98;
                  }
                  else {
                    uint64_t v106 = v96;
                  }
                  if (!v100) {
                    goto LABEL_213;
                  }
                  std::streamsize v107 = v99->__width_;
                  size_t v108 = v107 <= v98 ? 0 : v107 - v98;
                  if (v106 - v96 >= 1
                    && (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v100 + 96))(v100, v96, v106 - v96) != v106 - v96)
                  {
                    goto LABEL_213;
                  }
                  if ((uint64_t)v108 >= 1)
                  {
                    if (v108 > 0x7FFFFFFFFFFFFFF7) {
                      abort();
                    }
                    if (v108 >= 0x17)
                    {
                      uint64_t v110 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v108 | 7) != 0x17) {
                        uint64_t v110 = v108 | 7;
                      }
                      uint64_t v111 = v110 + 1;
                      id v109 = (std::locale::__imp *)operator new(v110 + 1);
                      size_t v173 = v108;
                      int64_t v174 = v111 | 0x8000000000000000;
                      __b.__locale_ = v109;
                    }
                    else
                    {
                      HIBYTE(v174) = v108;
                      id v109 = (std::locale::__imp *)&__b;
                    }
                    memset(v109, v102, v108);
                    *((unsigned char *)v109 + v108) = 0;
                    if (v174 >= 0) {
                      uint64_t v112 = &__b;
                    }
                    else {
                      uint64_t v112 = __b.__locale_;
                    }
                    uint64_t v113 = (*(uint64_t (**)(void *, void *, size_t))(*(void *)v100 + 96))(v100, v112, v108);
                    uint64_t v114 = v113;
                    if (SHIBYTE(v174) < 0)
                    {
                      operator delete(__b.__locale_);
                      if (v114 != v108) {
                        goto LABEL_213;
                      }
                    }
                    else if (v113 != v108)
                    {
                      goto LABEL_213;
                    }
                  }
                  if (v105 - v106 < 1
                    || (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v100 + 96))(v100, v106, v105 - v106) == v105 - v106)
                  {
                    v99->__width_ = 0;
                    unint64_t v95 = v155;
                    goto LABEL_214;
                  }
LABEL_213:
                  std::ios_base::clear((std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24)), *(_DWORD *)((char *)&v163[1] + *(void *)(v162[0] - 24)) | 5);
                  unint64_t v95 = v155;
LABEL_214:
                  MEMORY[0x1A6238D00](v171);
                  uint64_t v115 = (void *)*v95;
                  uint64_t v116 = v95;
                  if (*v95)
                  {
                    do
                    {
                      uint64_t v117 = v115;
                      uint64_t v115 = (void *)v115[1];
                    }
                    while (v115);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v117 = (void *)v116[2];
                      BOOL v74 = *v117 == (void)v116;
                      uint64_t v116 = v117;
                    }
                    while (v74);
                  }
                  if (v97 == v117[4]) {
                    goto LABEL_250;
                  }
                  MEMORY[0x1A6238CF0](v171, v162);
                  if (v171[0])
                  {
                    uint64_t v118 = (char *)v162 + *(void *)(v162[0] - 24);
                    uint64_t v119 = *((void *)v118 + 5);
                    int v120 = *((_DWORD *)v118 + 2);
                    int v121 = *((_DWORD *)v118 + 36);
                    if (v121 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24)));
                      uint64_t v122 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
                      int v121 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v122->__vftable[2].~facet_0)(v122, 32);
                      std::locale::~locale(&__b);
                      *((_DWORD *)v118 + 36) = v121;
                    }
                    if ((v120 & 0xB0) == 0x20) {
                      float v123 = "";
                    }
                    else {
                      float v123 = ", ";
                    }
                    if (!v119) {
                      goto LABEL_248;
                    }
                    uint64_t v124 = *((void *)v118 + 3);
                    BOOL v82 = v124 <= 2;
                    uint64_t v125 = v124 - 2;
                    size_t v126 = v82 ? 0 : v125;
                    if (v123 - ", " >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v119 + 96))(v119, ", ", v123 - ", ") != v123 - ", ")
                    {
                      goto LABEL_248;
                    }
                    if ((uint64_t)v126 >= 1)
                    {
                      if (v126 > 0x7FFFFFFFFFFFFFF7) {
                        abort();
                      }
                      if (v126 >= 0x17)
                      {
                        uint64_t v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v126 | 7) != 0x17) {
                          uint64_t v128 = v126 | 7;
                        }
                        uint64_t v129 = v128 + 1;
                        uint64_t v127 = (std::locale::__imp *)operator new(v128 + 1);
                        size_t v173 = v126;
                        int64_t v174 = v129 | 0x8000000000000000;
                        __b.__locale_ = v127;
                      }
                      else
                      {
                        HIBYTE(v174) = v126;
                        uint64_t v127 = (std::locale::__imp *)&__b;
                      }
                      memset(v127, v121, v126);
                      *((unsigned char *)v127 + v126) = 0;
                      if (v174 >= 0) {
                        uint64_t v130 = &__b;
                      }
                      else {
                        uint64_t v130 = __b.__locale_;
                      }
                      uint64_t v131 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v119 + 96))(v119, v130, v126);
                      uint64_t v132 = v131;
                      if (SHIBYTE(v174) < 0)
                      {
                        operator delete(__b.__locale_);
                        if (v132 != v126) {
                          goto LABEL_248;
                        }
                      }
                      else if (v131 != v126)
                      {
                        goto LABEL_248;
                      }
                    }
                    uint64_t v133 = ", " - v123 + 2;
                    if (v133 >= 1
                      && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v119 + 96))(v119, v123, ", " - v123 + 2) != v133)
                    {
LABEL_248:
                      std::ios_base::clear((std::ios_base *)((char *)v162 + *(void *)(v162[0] - 24)), *(_DWORD *)((char *)&v163[1] + *(void *)(v162[0] - 24)) | 5);
                      unint64_t v95 = v155;
                      goto LABEL_249;
                    }
                    *((void *)v118 + 3) = 0;
                    unint64_t v95 = v155;
                  }
LABEL_249:
                  MEMORY[0x1A6238D00](v171);
LABEL_250:
                  uint64_t v134 = (void *)v94[1];
                  if (v134)
                  {
                    do
                    {
                      id v135 = v134;
                      uint64_t v134 = (void *)*v134;
                    }
                    while (v134);
                  }
                  else
                  {
                    do
                    {
                      id v135 = (void *)v94[2];
                      BOOL v74 = *v135 == (void)v94;
                      uint64_t v94 = v135;
                    }
                    while (!v74);
                  }
                  uint64_t v94 = v135;
                }
                while (v135 != v95);
              }
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)")", 1);
              uint64_t v3 = v151;
              uint64_t v49 = v152;
              float v48 = v153;
            }
            if (v49 != *(uint64_t **)(*(void *)&v3[7] - 8)) {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)", ", 2);
            }
          }
          if (++v48 == v150) {
            break;
          }
          continue;
        }
      }
      if ((v169 & 0x10) != 0)
      {
        unint64_t v139 = v168;
        uint64_t v136 = v149;
        if (v168 < v165)
        {
          unint64_t v168 = v165;
          unint64_t v139 = v165;
        }
        uint64_t v140 = (const void **)&v164;
      }
      else
      {
        uint64_t v136 = v149;
        if ((v169 & 8) == 0)
        {
          size_t v137 = 0;
          HIBYTE(v157) = 0;
          id v138 = __dst;
          goto LABEL_274;
        }
        uint64_t v140 = (const void **)v163;
        unint64_t v139 = v163[2];
      }
      uint64_t v141 = *v140;
      size_t v137 = v139 - (void)*v140;
      if (v137 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      if (v137 >= 0x17)
      {
        uint64_t v142 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v137 | 7) != 0x17) {
          uint64_t v142 = v137 | 7;
        }
        uint64_t v143 = v142 + 1;
        id v138 = (void **)operator new(v142 + 1);
        __dst[1] = (void *)v137;
        int64_t v157 = v143 | 0x8000000000000000;
        __dst[0] = v138;
      }
      else
      {
        HIBYTE(v157) = v139 - *(unsigned char *)v140;
        id v138 = __dst;
        if (!v137)
        {
LABEL_274:
          *((unsigned char *)v138 + v137) = 0;
          v161[0] = *MEMORY[0x1E4FBA408];
          uint64_t v144 = *(void *)(MEMORY[0x1E4FBA408] + 72);
          *(void *)((char *)v161 + *(void *)(v161[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
          v162[0] = v144;
          v162[1] = MEMORY[0x1E4FBA470] + 16;
          if (v167 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1A62391A0](&v170);
          uint64_t v145 = __dst;
          if (v157 < 0) {
            uint64_t v145 = (void **)__dst[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v176 = v145;
          _os_log_impl(&dword_1A1780000, v136, OS_LOG_TYPE_INFO, "Current active logic execution order:%s", buf, 0xCu);
          if (SHIBYTE(v157) < 0) {
            operator delete(__dst[0]);
          }
          uint64_t v47 = v149;
LABEL_281:

          goto LABEL_282;
        }
      }
      memmove(v138, v141, v137);
      goto LABEL_274;
    }
  }
LABEL_59:
  if (v8) {
    operator delete(v8);
  }
LABEL_282:
  unsigned int v146 = v159[0];
  if (v159[0])
  {
    do
    {
      uint64_t v147 = (void *)*v146;
      operator delete(v146);
      unsigned int v146 = v147;
    }
    while (v147);
  }
  uint64_t v148 = v158[0];
  v158[0] = 0;
  if (v148) {
    operator delete(v148);
  }
}

void sub_1A19BBF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (v25) {
    operator delete(v25);
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A6238CF0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A6238D00](v13);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  unsigned char v13[16];
  std::locale v14;

  MEMORY[0x1A6238CF0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      int v9 = v8;
    }
    else {
      int v9 = a2;
    }
    uint64_t v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A6238D00](v13);
  return a1;
}

void sub_1A19BC134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint8x8_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint8x8_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        int v16 = __b;
      }
      else {
        int v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      uint8x8_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1A19BC470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<gdc::TypeInfo,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,std::allocator<gdc::TypeInfo>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint8x8_t v13 = operator new(0x28uLL);
  *uint8x8_t v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  v13[4] = *(void *)(a3 + 16);
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_72;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v20 = operator new(8 * prime);
    uint64_t v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    int v24 = (uint64_t *)(a1 + 4);
    unint64_t v23 = (void *)*((void *)a1 + 2);
    if (!v23) {
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          unint64_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          *unint64_t v23 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          unint64_t v23 = i;
          size_t v27 = v29;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    long long v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *unint64_t v23 = *v34;
        uint64_t v35 = 8 * v36;
        *long long v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        long long v34 = v23;
      }
      size_t v36 = v25;
LABEL_64:
      unint64_t v23 = v34;
      long long v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    unint64_t v31 = std::__next_prime(v31);
  }
  else
  {
    uint64_t v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2) {
      unint64_t v31 = v33;
    }
  }
  if (prime <= v31) {
    size_t prime = v31;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      id v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  uint8x8_t v37 = *(void **)a1;
  unint64_t v38 = *(void **)(*(void *)a1 + 8 * v5);
  if (v38)
  {
    *uint8x8_t v13 = *v38;
LABEL_80:
    void *v38 = v13;
    goto LABEL_81;
  }
  *uint8x8_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v5] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    unint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A19BCA48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint8x8_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v2 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = a1 + 16;
  unint64_t v5 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v6 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint8x8_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v8;
  *(void *)(a1 + *(void *)(v8 - 24)) = v7;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 24));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v6[5];
  uint64_t v11 = v6[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v4 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v6[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v6[6];
  *(void *)a1 = v2;
  *(void *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v5;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A19BCD10(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](v1);
  _Unwind_Resume(a1);
}

void md::StyleSheetExtension::localizationMap(md::StyleSheetExtension *this, md::StylesheetVendor *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)((char *)a2 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 7);
  if (!*((unsigned char *)a2 + 88))
  {
    unint64_t v5 = [*((id *)a2 + 2) dataForResourceWithName:@"LocalizationStyleAttributes.plist"];
    if (v5)
    {
      uint64_t v6 = [MEMORY[0x1E4F28F98] propertyListWithData:v5 options:0 format:0 error:0];
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = (gss::Allocator *)operator new(0x50uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = &unk_1EF58B118;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 3) = 0;
    uint8x8_t v8 = (gss::Allocator *)gss::Allocator::instance(v7);
    *((void *)v7 + 5) = v8;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = gss::Allocator::instance(v8);
    *((void *)v7 + 8) = 0;
    *((_DWORD *)v7 + 18) = 1065353216;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 13);
    *((void *)a2 + 12) = (char *)v7 + 24;
    *((void *)a2 + 13) = v7;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v6) {
        goto LABEL_9;
      }
    }
    else if (!v6)
    {
LABEL_9:
      *((unsigned char *)a2 + 88) = 1;

      goto LABEL_10;
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = ___ZN2md16StylesheetVendor15localizationMapEv_block_invoke;
    void v11[3] = &__block_descriptor_40_e15_v32__0_8_16_B24l;
    v11[4] = a2;
    [v6 enumerateKeysAndObjectsUsingBlock:v11];
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v10 = *((void *)a2 + 13);
  *(void *)this = *((void *)a2 + 12);
  *((void *)this + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1A19BD1B8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void md::StyleSheetExtension::currencyMap(md::StyleSheetExtension *this, md::StylesheetVendor *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)((char *)a2 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 8);
  if (!*((unsigned char *)a2 + 112))
  {
    unint64_t v5 = [*((id *)a2 + 2) dataForResourceWithName:@"CurrencyStyleAttributes.plist"];
    if (v5)
    {
      uint64_t v6 = [MEMORY[0x1E4F28F98] propertyListWithData:v5 options:0 format:0 error:0];
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = (gss::Allocator *)operator new(0x50uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = &unk_1EF58B118;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 3) = 0;
    uint8x8_t v8 = (gss::Allocator *)gss::Allocator::instance(v7);
    *((void *)v7 + 5) = v8;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = gss::Allocator::instance(v8);
    *((void *)v7 + 8) = 0;
    *((_DWORD *)v7 + 18) = 1065353216;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 16);
    *((void *)a2 + 15) = (char *)v7 + 24;
    *((void *)a2 + 16) = v7;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v6) {
        goto LABEL_9;
      }
    }
    else if (!v6)
    {
LABEL_9:
      *((unsigned char *)a2 + 112) = 1;

      goto LABEL_10;
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = ___ZN2md16StylesheetVendor11currencyMapEv_block_invoke;
    void v11[3] = &__block_descriptor_40_e15_v32__0_8_16_B24l;
    v11[4] = a2;
    [v6 enumerateKeysAndObjectsUsingBlock:v11];
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v10 = *((void *)a2 + 16);
  *(void *)this = *((void *)a2 + 15);
  *((void *)this + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1A19BD3B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2md21DaVinciGroundSettings13_readSettingsEP12NSDictionary_block_invoke_2(uint64_t a1, NSString *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = ___ZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionary_block_invoke;
      void v9[3] = &__block_descriptor_42_e15_v32__0_8_16_B24l;
      v9[4] = v6;
      __int16 v10 = v8;
      [v5 enumerateKeysAndObjectsUsingBlock:v9];
    }
  }
}

void sub_1A19BD4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19BD570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4(uint64_t a1, void *a2)
{
  id v14 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 == 2)
  {
    uint64_t v4 = @"-iosmac";
LABEL_5:
    id v5 = [&stru_1EF593218 stringByAppendingString:v4];
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    uint64_t v4 = @"-car";
    goto LABEL_5;
  }
  id v5 = &stru_1EF593218;
LABEL_8:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_9:
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      uint64_t v6 = *(uint64_t **)(a1 + 64);
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      char v7 = [NSString stringWithCString:v6 encoding:4];
      uint64_t v8 = [v7 stringByAppendingPathExtension:v14];
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
      __int16 v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t v11 = [*(id *)(a1 + 32) dataForResourceWithName:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
      uint8x8_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
  }
}

void sub_1A19BD6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2;
  void v22[3] = &unk_1E5A93540;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v26 = v7;
  id v8 = v6;
  id v23 = v8;
  id v24 = *(id *)(a1 + 32);
  uint64_t v9 = (void *)MEMORY[0x1A6239EB0](v22);
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  unint64_t v18 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3;
  uint64_t v19 = &unk_1E5A93568;
  id v10 = v9;
  id v20 = v10;
  int v21 = *(_DWORD *)(a1 + 64);
  uint64_t v11 = (void (**)(void, void))MEMORY[0x1A6239EB0](&v16);
  uint64_t v12 = &stru_1EF593218;
  if (objc_msgSend(v5, "length", v16, v17, v18, v19))
  {
    uint64_t v12 = [&stru_1EF593218 stringByAppendingString:v5];
  }
  uint64_t v13 = ((void (**)(void, __CFString *))v11)[2](v11, v12);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  float v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;
}

void sub_1A19BD8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (*(void (**)(float))(*(void *)(a1 + 32) + 16))(*(float *)(a1 + 40));
  if (!v4)
  {
    float v5 = *(float *)(a1 + 40);
    if (v5 >= 2.6)
    {
      uint64_t v4 = (*(void (**)(float))(*(void *)(a1 + 32) + 16))(2.6);
      if (v4) {
        goto LABEL_9;
      }
      float v5 = *(float *)(a1 + 40);
    }
    float v6 = ceilf(v5);
    if (v6 <= 0.0)
    {
LABEL_8:
      uint64_t v4 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v4 = (*(void (**)(float))(*(void *)(a1 + 32) + 16))(v6);
        if (v4) {
          break;
        }
        float v6 = v6 + -1.0;
        if (v6 <= 0.0) {
          goto LABEL_8;
        }
      }
    }
  }
LABEL_9:

  return v4;
}

void sub_1A19BD9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_10PropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0xBD0uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A510;
  v2[1].std::__shared_count = 0u;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  HIBYTE(v2[3].__vftable) = 0;
  LODWORD(v2[3].__shared_owners_) = 0;
  BYTE4(v2[3].__shared_owners_) = 0;
  v2[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v2[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[6].std::__shared_count = 0u;
  v2[7].__vftable = 0;
  LOWORD(v2[4].__shared_owners_) = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v2[7].__vftable + 5) = 0;
  v2[7].__shared_weak_owners_ = 0;
  LOBYTE(v2[2].__shared_owners_) = 0;
  *(_DWORD *)((char *)&v2[6].__shared_owners_ + 7) = 0;
  v2[8].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[8].__shared_owners_ = 0u;
  v2[9].std::__shared_count = 0u;
  *(_OWORD *)&v2[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[10].__shared_owners_ = 0u;
  v2[11].std::__shared_count = 0u;
  *(_OWORD *)((char *)&v2[11].__shared_owners_ + 4) = 0u;
  HIDWORD(v2[12].__vftable) = 0x4000;
  *(_OWORD *)&v2[12].__shared_owners_ = 0u;
  v2[13].std::__shared_count = 0u;
  v2[13].__shared_weak_owners_ = 0x400000000000;
  v2[14].std::__shared_count = 0u;
  *(_OWORD *)&v2[14].__shared_weak_owners_ = 0u;
  v2[15].__shared_owners_ = 0x400000000000;
  v2[15].__shared_weak_owners_ = 0;
  v2[16].__vftable = 0;
  v2[16].__shared_owners_ = 0;
  LODWORD(v2[16].__shared_weak_owners_) = 100;
  v2[17].__vftable = 0;
  v2[17].__shared_owners_ = 0;
  v2[17].__shared_weak_owners_ = 0;
  LODWORD(v2[18].__vftable) = 100;
  v2[18].__shared_owners_ = 0;
  v2[18].__shared_weak_owners_ = 0;
  v2[19].__vftable = 0;
  LODWORD(v2[19].__shared_owners_) = 1024;
  v2[19].__shared_weak_owners_ = 0;
  v2[20].__vftable = 0;
  v2[20].__shared_owners_ = 0;
  LODWORD(v2[20].__shared_weak_owners_) = 1024;
  v2[21].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[21].__shared_owners_ = 0u;
  v2[22].std::__shared_count = 0u;
  *(_OWORD *)&v2[22].__shared_weak_owners_ = 0u;
  v2[23].__shared_owners_ = 0;
  v2[23].__shared_weak_owners_ = 850045863;
  v2[26].__vftable = 0;
  *(_OWORD *)&v2[24].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[25].__shared_owners_ = 0u;
  v2[24].std::__shared_count = 0u;
  v2[26].__shared_owners_ = 850045863;
  v2[28].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[27].__shared_owners_ = 0u;
  v2[28].std::__shared_count = 0u;
  *(_OWORD *)&v2[26].__shared_weak_owners_ = 0u;
  v2[29].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[31].__shared_owners_ = 0;
  v2[30].std::__shared_count = 0u;
  *(_OWORD *)&v2[30].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[29].__shared_owners_ = 0u;
  v2[31].__shared_weak_owners_ = 850045863;
  v2[34].__vftable = 0;
  *(_OWORD *)&v2[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[33].__shared_owners_ = 0u;
  v2[32].std::__shared_count = 0u;
  v2[34].__shared_owners_ = 850045863;
  v2[36].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[35].__shared_owners_ = 0u;
  v2[36].std::__shared_count = 0u;
  *(_OWORD *)&v2[34].__shared_weak_owners_ = 0u;
  v2[37].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[39].__shared_owners_ = 0;
  v2[38].std::__shared_count = 0u;
  *(_OWORD *)&v2[38].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[37].__shared_owners_ = 0u;
  v2[39].__shared_weak_owners_ = 850045863;
  v2[42].__vftable = 0;
  *(_OWORD *)&v2[40].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[41].__shared_owners_ = 0u;
  v2[40].std::__shared_count = 0u;
  v2[42].__shared_owners_ = 850045863;
  v2[44].__shared_weak_owners_ = 0;
  v2[44].std::__shared_count = 0u;
  *(_OWORD *)&v2[43].__shared_owners_ = 0u;
  *(_OWORD *)&v2[42].__shared_weak_owners_ = 0u;
  v2[45].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[47].__shared_owners_ = 0;
  *(_OWORD *)&v2[46].__shared_weak_owners_ = 0u;
  v2[46].std::__shared_count = 0u;
  *(_OWORD *)&v2[45].__shared_owners_ = 0u;
  v2[47].__shared_weak_owners_ = 850045863;
  v2[50].__vftable = 0;
  *(_OWORD *)&v2[49].__shared_owners_ = 0u;
  *(_OWORD *)&v2[48].__shared_weak_owners_ = 0u;
  v2[48].std::__shared_count = 0u;
  v2[50].__shared_owners_ = 850045863;
  v2[52].__shared_weak_owners_ = 0;
  v2[52].std::__shared_count = 0u;
  *(_OWORD *)&v2[51].__shared_owners_ = 0u;
  *(_OWORD *)&v2[50].__shared_weak_owners_ = 0u;
  v2[53].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[55].__shared_owners_ = 0;
  *(_OWORD *)&v2[54].__shared_weak_owners_ = 0u;
  v2[54].std::__shared_count = 0u;
  *(_OWORD *)&v2[53].__shared_owners_ = 0u;
  v2[55].__shared_weak_owners_ = 850045863;
  v2[58].__vftable = 0;
  *(_OWORD *)&v2[57].__shared_owners_ = 0u;
  *(_OWORD *)&v2[56].__shared_weak_owners_ = 0u;
  v2[56].std::__shared_count = 0u;
  v2[58].__shared_owners_ = 850045863;
  v2[60].__shared_weak_owners_ = 0;
  v2[60].std::__shared_count = 0u;
  *(_OWORD *)&v2[59].__shared_owners_ = 0u;
  *(_OWORD *)&v2[58].__shared_weak_owners_ = 0u;
  v2[61].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[63].__shared_owners_ = 0;
  *(_OWORD *)&v2[62].__shared_weak_owners_ = 0u;
  v2[62].std::__shared_count = 0u;
  *(_OWORD *)&v2[61].__shared_owners_ = 0u;
  v2[63].__shared_weak_owners_ = 850045863;
  v2[66].__vftable = 0;
  *(_OWORD *)&v2[65].__shared_owners_ = 0u;
  *(_OWORD *)&v2[64].__shared_weak_owners_ = 0u;
  v2[64].std::__shared_count = 0u;
  v2[66].__shared_owners_ = 850045863;
  v2[68].__shared_weak_owners_ = 0;
  v2[68].std::__shared_count = 0u;
  *(_OWORD *)&v2[67].__shared_owners_ = 0u;
  *(_OWORD *)&v2[66].__shared_weak_owners_ = 0u;
  v2[69].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[71].__shared_owners_ = 0;
  *(_OWORD *)&v2[70].__shared_weak_owners_ = 0u;
  v2[70].std::__shared_count = 0u;
  *(_OWORD *)&v2[69].__shared_owners_ = 0u;
  v2[71].__shared_weak_owners_ = 850045863;
  v2[74].__vftable = 0;
  *(_OWORD *)&v2[73].__shared_owners_ = 0u;
  *(_OWORD *)&v2[72].__shared_weak_owners_ = 0u;
  v2[72].std::__shared_count = 0u;
  v2[74].__shared_owners_ = 850045863;
  v2[76].__shared_weak_owners_ = 0;
  v2[76].std::__shared_count = 0u;
  *(_OWORD *)&v2[75].__shared_owners_ = 0u;
  *(_OWORD *)&v2[74].__shared_weak_owners_ = 0u;
  v2[77].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[79].__shared_owners_ = 0;
  *(_OWORD *)&v2[78].__shared_weak_owners_ = 0u;
  v2[78].std::__shared_count = 0u;
  *(_OWORD *)&v2[77].__shared_owners_ = 0u;
  v2[79].__shared_weak_owners_ = 850045863;
  v2[82].__vftable = 0;
  *(_OWORD *)&v2[81].__shared_owners_ = 0u;
  *(_OWORD *)&v2[80].__shared_weak_owners_ = 0u;
  v2[80].std::__shared_count = 0u;
  v2[82].__shared_owners_ = 850045863;
  v2[84].__shared_weak_owners_ = 0;
  v2[84].std::__shared_count = 0u;
  *(_OWORD *)&v2[83].__shared_owners_ = 0u;
  *(_OWORD *)&v2[82].__shared_weak_owners_ = 0u;
  v2[85].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[87].__shared_owners_ = 0;
  *(_OWORD *)&v2[86].__shared_weak_owners_ = 0u;
  v2[86].std::__shared_count = 0u;
  *(_OWORD *)&v2[85].__shared_owners_ = 0u;
  v2[87].__shared_weak_owners_ = 850045863;
  v2[90].__vftable = 0;
  *(_OWORD *)&v2[89].__shared_owners_ = 0u;
  *(_OWORD *)&v2[88].__shared_weak_owners_ = 0u;
  v2[88].std::__shared_count = 0u;
  v2[90].__shared_owners_ = 850045863;
  v2[92].__shared_weak_owners_ = 0;
  v2[92].std::__shared_count = 0u;
  *(_OWORD *)&v2[91].__shared_owners_ = 0u;
  *(_OWORD *)&v2[90].__shared_weak_owners_ = 0u;
  v2[93].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[95].__shared_owners_ = 0;
  *(_OWORD *)&v2[94].__shared_weak_owners_ = 0u;
  v2[94].std::__shared_count = 0u;
  *(_OWORD *)&v2[93].__shared_owners_ = 0u;
  v2[95].__shared_weak_owners_ = 850045863;
  v2[98].__vftable = 0;
  *(_OWORD *)&v2[97].__shared_owners_ = 0u;
  *(_OWORD *)&v2[96].__shared_weak_owners_ = 0u;
  v2[96].std::__shared_count = 0u;
  v2[98].__shared_owners_ = 850045863;
  v2[100].__shared_weak_owners_ = 0;
  v2[100].std::__shared_count = 0u;
  *(_OWORD *)&v2[99].__shared_owners_ = 0u;
  *(_OWORD *)&v2[98].__shared_weak_owners_ = 0u;
  v2[101].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[103].__shared_owners_ = 0;
  *(_OWORD *)&v2[102].__shared_weak_owners_ = 0u;
  v2[102].std::__shared_count = 0u;
  *(_OWORD *)&v2[101].__shared_owners_ = 0u;
  v2[103].__shared_weak_owners_ = 850045863;
  v2[114].std::__shared_count = 0u;
  *(_OWORD *)&v2[113].__shared_owners_ = 0u;
  *(_OWORD *)&v2[112].__shared_weak_owners_ = 0u;
  v2[112].std::__shared_count = 0u;
  *(_OWORD *)&v2[111].__shared_owners_ = 0u;
  *(_OWORD *)&v2[110].__shared_weak_owners_ = 0u;
  v2[110].std::__shared_count = 0u;
  *(_OWORD *)&v2[109].__shared_owners_ = 0u;
  *(_OWORD *)&v2[108].__shared_weak_owners_ = 0u;
  v2[108].std::__shared_count = 0u;
  *(_OWORD *)&v2[107].__shared_owners_ = 0u;
  *(_OWORD *)&v2[106].__shared_weak_owners_ = 0u;
  v2[106].std::__shared_count = 0u;
  *(_OWORD *)&v2[105].__shared_owners_ = 0u;
  *(_OWORD *)&v2[104].__shared_weak_owners_ = 0u;
  v2[104].std::__shared_count = 0u;
  id v3 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)&v2[106].__shared_owners_, 0);
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"initialization", v4);
  }
  *(_OWORD *)&v2[114].__shared_weak_owners_ = 0u;
  float v5 = (gss::Allocator *)gss::Allocator::instance(v3);
  v2[115].__shared_owners_ = (uint64_t)v5;
  v2[115].__shared_weak_owners_ = 0;
  v2[116].__vftable = (std::__shared_weak_count_vtbl *)gss::Allocator::instance(v5);
  v2[116].__shared_owners_ = 0;
  LODWORD(v2[116].__shared_weak_owners_) = 1065353216;
  LODWORD(v2[117].__vftable) = 0;
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_owners_);
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_weak_owners_);
  v2[118].std::__shared_count = 0u;
  v2[118].__shared_weak_owners_ = 850045863;
  v2[121].__vftable = 0;
  v2[119].std::__shared_count = 0u;
  *(_OWORD *)&v2[119].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[120].__shared_owners_ = 0u;
  v2[121].__shared_owners_ = 850045863;
  HIBYTE(v2[125].__shared_weak_owners_) = 0;
  LOBYTE(v2[125].__vftable) = 0;
  *(_OWORD *)&v2[121].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[122].__shared_owners_ = 0u;
  v2[123].std::__shared_count = 0u;
  *(_OWORD *)&v2[123].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v2[124].std::__shared_count + 4) = 0u;
  atomic_store(0, (unsigned __int8 *)&v2[117]);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 1);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 2);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 3);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_owners_);
  state = v11.__state_;
  uint64_t v7 = (std::__assoc_sub_state *)v2[118].__vftable;
  v11.__state_ = 0;
  v12.__state_ = v7;
  v2[118].__vftable = (std::__shared_weak_count_vtbl *)state;
  std::future<void>::~future(&v12);
  std::future<void>::~future(&v11);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_weak_owners_);
  id v8 = v11.__state_;
  shared_owners = (std::__assoc_sub_state *)v2[118].__shared_owners_;
  v11.__state_ = 0;
  v12.__state_ = shared_owners;
  v2[118].__shared_owners_ = (uint64_t)v8;
  std::future<void>::~future(&v12);
  std::future<void>::~future(&v11);
  HIDWORD(v2[12].__vftable) = 1024;
  HIDWORD(v2[13].__shared_weak_owners_) = 1024;
  HIDWORD(v2[15].__shared_owners_) = 1024;
  LODWORD(v2[18].__vftable) = 20;
  LODWORD(v2[16].__shared_weak_owners_) = 20;
  *a1 = v2 + 1;
  a1[1] = v2;
  id v10 = (std::__shared_weak_count *)v2[1].__shared_owners_;
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1A19BE008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::mutex *a15, std::mutex *a16, std::mutex *a17, std::mutex *a18, std::mutex *a19, std::mutex *a20,std::mutex *a21,std::mutex *a22,std::mutex *a23,std::mutex *a24,std::mutex *a25,std::mutex *a26,std::mutex *a27,std::mutex *a28,std::mutex *a29,std::mutex *a30,std::mutex *a31,std::mutex *a32)
{
  *(void *)(v38 - 176) = v32 + 2976;
  *(void *)(v38 - 168) = v32 + 2912;
  if (*(char *)(v32 + 3023) < 0) {
    operator delete(*(void **)(v32 + 3000));
  }
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v32 + 2984));
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100](*(uint64_t **)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 2848));
  std::future<void>::~future((std::future<void> *)(v32 + 2840));
  std::future<void>::~future(v36);
  MEMORY[0x1A62390B0](v35);
  MEMORY[0x1A62390B0](v34);
  std::unordered_map<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,geo::StdAllocator<std::pair<gss::StyleSheetResultCacheKey const,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~unordered_map[abi:nn180100]((gss::Allocator *)(v32 + 2752));
  geo::read_write_lock::~read_write_lock(v33);
  *(void *)(v38 - 176) = v32 + 632;
  *(void *)(v38 - 168) = v32 + 568;
  std::mutex::~mutex((std::mutex *)(v32 + 2488));
  std::mutex::~mutex((std::mutex *)(v32 + 2424));
  std::mutex::~mutex((std::mutex *)(v32 + 2360));
  std::mutex::~mutex((std::mutex *)(v32 + 2296));
  std::mutex::~mutex((std::mutex *)(v32 + 2232));
  std::mutex::~mutex((std::mutex *)(v32 + 2168));
  std::mutex::~mutex((std::mutex *)(v32 + 2104));
  std::mutex::~mutex((std::mutex *)(v32 + 2040));
  std::mutex::~mutex((std::mutex *)(v32 + 1976));
  std::mutex::~mutex((std::mutex *)(v32 + 1912));
  std::mutex::~mutex((std::mutex *)(v32 + 1848));
  std::mutex::~mutex((std::mutex *)(v32 + 1784));
  std::mutex::~mutex((std::mutex *)(v32 + 1720));
  std::mutex::~mutex((std::mutex *)(v32 + 1656));
  std::mutex::~mutex((std::mutex *)(v32 + 1592));
  std::mutex::~mutex((std::mutex *)(v32 + 1528));
  std::mutex::~mutex((std::mutex *)(v32 + 1464));
  std::mutex::~mutex((std::mutex *)(v32 + 1400));
  std::mutex::~mutex((std::mutex *)(v32 + 1336));
  std::mutex::~mutex((std::mutex *)(v32 + 1272));
  std::mutex::~mutex((std::mutex *)(v32 + 1208));
  std::mutex::~mutex((std::mutex *)(v32 + 1144));
  std::mutex::~mutex((std::mutex *)(v32 + 1080));
  std::mutex::~mutex((std::mutex *)(v32 + 1016));
  std::mutex::~mutex((std::mutex *)(v32 + 952));
  std::mutex::~mutex((std::mutex *)(v32 + 888));
  std::mutex::~mutex((std::mutex *)(v32 + 824));
  std::mutex::~mutex((std::mutex *)(v32 + 760));
  std::mutex::~mutex((std::mutex *)(v32 + 696));
  std::mutex::~mutex(*(std::mutex **)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators(v32 + 256);
  std::mutex::~mutex(v37);
  std::unique_ptr<gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>>::~unique_ptr[abi:nn180100](*(gss::Allocator ***)(v38 - 160));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(void **)(v38 - 152));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 144));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 136));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 128));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(void **)(v38 - 120));
  if (*(char *)(v32 + 79) < 0) {
    operator delete(*(void **)(v32 + 56));
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](*(void *)(v38 - 112));
  id v40 = *(std::__shared_weak_count **)(v32 + 32);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v41);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_4,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = v2[140];
  uint64_t v4 = (md::LayoutContext *)v2[135];
  uint64_t v5 = v2[115];
  v92[0] = &unk_1EF56F570;
  v92[1] = v4;
  v90[0] = &unk_1EF56F5B8;
  v90[1] = v4;
  uint64_t v91 = v90;
  unint64_t v95 = v94;
  uint64_t v93 = v92;
  v94[0] = &unk_1EF56F5B8;
  v94[1] = v4;
  std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()((uint64_t)v92);
  if (v91 == v90)
  {
    (*(void (**)(void *))(v90[0] + 32))(v90);
  }
  else if (v91)
  {
    (*(void (**)(void *))(*v91 + 40))(v91);
  }
  if (v93 == v92)
  {
    (*(void (**)(void *))(v92[0] + 32))(v92);
    if (!*(unsigned char *)(v3 + 80)) {
      goto LABEL_22;
    }
LABEL_11:
    float v6 = (void (**)(void *))&unk_1EF56F600;
    v88[0] = &unk_1EF56F600;
    v88[1] = v5;
    uint64_t v89 = v88;
    uint64_t v7 = *(void **)(v3 + 24);
    if (v7)
    {
      *(void *)std::string buf = v7[5];
      id v8 = v88;
      while (1)
      {
        (*(void (**)(void *, uint8_t *))(*v8 + 48))(v8, buf);
        uint64_t v7 = (void *)*v7;
        id v8 = v89;
        if (!v7) {
          break;
        }
        *(void *)std::string buf = v7[5];
        if (!v89)
        {
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_201:
          __break(1u);
          return;
        }
      }
      if (v89 != v88)
      {
        if (v89) {
          (*(void (**)(void *))(*v89 + 40))(v89);
        }
        goto LABEL_21;
      }
      float v6 = (void (**)(void *))v88[0];
    }
    v6[4](v88);
LABEL_21:
    *(unsigned char *)(v3 + 80) = 0;
    goto LABEL_22;
  }
  if (v93) {
    (*(void (**)(void *))(*v93 + 40))(v93);
  }
  if (*(unsigned char *)(v3 + 80)) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v73 = +[VKDebugSettings sharedSettings];
  uint64_t v9 = md::LayoutContext::frameState(v4);
  if (!*(unsigned char *)(v3 + 82)
    || (float v11 = gdc::DisplayZoomLevel::centerZoomLevel((gdc::DisplayZoomLevel *)(v9 + 128), v10),
        unint64_t v12 = *(void *)(v3 + 88),
        v12 == 1)
    || (v12 % *(void *)(v3 + 112) ? (BOOL v13 = v11 < 2.0) : (BOOL v13 = 1), v13))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v14 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_DEBUG, "[VLR] Heavy Frame - Run Before", buf, 2u);
    }

    int v72 = 1;
  }
  else
  {
    int v72 = 0;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)buf);
  {
    __cxa_atexit((void (*)(void *))std::vector<md::LogicBase *>::~vector[abi:nn180100], &md::LogicManager::executionOrder(void)const::empty, &dword_1A1780000);
  }
  float v15 = &md::LogicManager::executionOrder(void)const::empty;
  uint64_t v70 = v3;
  if (*(unsigned char *)(v3 + 72)) {
    float v15 = (void *)(v3 + 48);
  }
  uint64_t v16 = (void *)*v15;
  uint64_t v17 = (void *)v15[1];
  if ((void *)*v15 == v17) {
    goto LABEL_161;
  }
  uint64_t v71 = (void *)(v5 + 16);
  while (2)
  {
    unint64_t v18 = (void *)*v16;
    if (!*(unsigned char *)(*v16 + 56)) {
      goto LABEL_40;
    }
    unint64_t v19 = v18[4];
    int8x8_t v20 = *(int8x8_t *)(v5 + 8);
    if (v20)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        unint64_t v22 = v18[4];
        if (v19 >= *(void *)&v20) {
          unint64_t v22 = v19 % *(void *)&v20;
        }
      }
      else
      {
        unint64_t v22 = (*(void *)&v20 - 1) & v19;
      }
      id v23 = *(void **)(*(void *)v5 + 8 * v22);
      if (v23)
      {
        id v24 = (void *)*v23;
        if (v24)
        {
          if (v21.u32[0] < 2uLL)
          {
            uint64_t v25 = *(void *)&v20 - 1;
            while (1)
            {
              uint64_t v27 = v24[1];
              if (v19 == v27)
              {
                if (v24[2] == v19) {
                  goto LABEL_63;
                }
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_64;
              }
              id v24 = (void *)*v24;
              if (!v24) {
                goto LABEL_64;
              }
            }
          }
          do
          {
            unint64_t v26 = v24[1];
            if (v19 == v26)
            {
              if (v24[2] == v19)
              {
LABEL_63:
                uint64_t v28 = v24[5];
                if (v28) {
                  goto LABEL_149;
                }
                break;
              }
            }
            else
            {
              if (v26 >= *(void *)&v20) {
                v26 %= *(void *)&v20;
              }
              if (v26 != v22) {
                break;
              }
            }
            id v24 = (void *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_64:
    (*(void (**)(unsigned char *__return_ptr))(*v18 + 64))(__p);
    uint64_t v29 = *(void *)__p;
    uint64_t v30 = *(void *)__p + 8;
    unint64_t v31 = *(void *)(*(void *)__p + 8);
    unint64_t v32 = *(void *)(v5 + 8);
    if (v32)
    {
      uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        unint64_t v1 = *(void *)(*(void *)__p + 8);
        if (v31 >= v32) {
          unint64_t v1 = v31 % v32;
        }
      }
      else
      {
        unint64_t v1 = (v32 - 1) & v31;
      }
      uint64_t v34 = *(void ***)(*(void *)v5 + 8 * v1);
      if (v34)
      {
        uint64_t v35 = *v34;
        if (*v34)
        {
          if (v33.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v37 = v35[1];
              if (v37 == v31)
              {
                if (v35[2] == v31) {
                  goto LABEL_123;
                }
              }
              else if ((v37 & (v32 - 1)) != v1)
              {
                goto LABEL_84;
              }
              uint64_t v35 = (void *)*v35;
              if (!v35) {
                goto LABEL_84;
              }
            }
          }
          do
          {
            unint64_t v36 = v35[1];
            if (v36 == v31)
            {
              if (v35[2] == v31) {
                goto LABEL_123;
              }
            }
            else
            {
              if (v36 >= v32) {
                v36 %= v32;
              }
              if (v36 != v1) {
                break;
              }
            }
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
        }
      }
    }
LABEL_84:
    uint64_t v35 = operator new(0x30uLL);
    *uint64_t v35 = 0;
    v35[1] = v31;
    uint64_t v38 = *(void *)(v30 + 16);
    *((_OWORD *)v35 + 1) = *(_OWORD *)v30;
    v35[4] = v38;
    v35[5] = 0;
    float v39 = (float)(unint64_t)(*(void *)(v5 + 24) + 1);
    float v40 = *(float *)(v5 + 32);
    if (!v32 || (float)(v40 * (float)v32) < v39)
    {
      BOOL v41 = v32 < 3 || (v32 & (v32 - 1)) != 0;
      unint64_t v42 = v41 | (2 * v32);
      unint64_t v43 = vcvtps_u32_f32(v39 / v40);
      if (v42 <= v43) {
        size_t prime = v43;
      }
      else {
        size_t prime = v42;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v32 = *(void *)(v5 + 8);
      }
      if (prime > v32) {
        goto LABEL_97;
      }
      if (prime < v32)
      {
        unint64_t v45 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 24) / *(float *)(v5 + 32));
        if (v32 < 3 || (uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
        {
          unint64_t v45 = std::__next_prime(v45);
        }
        else
        {
          uint64_t v47 = 1 << -(char)__clz(v45 - 1);
          if (v45 >= 2) {
            unint64_t v45 = v47;
          }
        }
        if (prime <= v45) {
          size_t prime = v45;
        }
        if (prime < v32) {
LABEL_97:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5, prime);
      }
      unint64_t v32 = *(void *)(v5 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v31 >= v32) {
          unint64_t v1 = v31 % v32;
        }
        else {
          unint64_t v1 = v31;
        }
      }
      else
      {
        unint64_t v1 = (v32 - 1) & v31;
      }
    }
    uint64_t v48 = *(void *)v5;
    uint64_t v49 = *(void **)(*(void *)v5 + 8 * v1);
    if (v49)
    {
      *uint64_t v35 = *v49;
    }
    else
    {
      *uint64_t v35 = *v71;
      *uint64_t v71 = v35;
      *(void *)(v48 + 8 * v1) = v71;
      if (!*v35) {
        goto LABEL_122;
      }
      unint64_t v50 = *(void *)(*v35 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v50 >= v32) {
          v50 %= v32;
        }
      }
      else
      {
        v50 &= v32 - 1;
      }
      uint64_t v49 = (void *)(*(void *)v5 + 8 * v50);
    }
    *uint64_t v49 = v35;
LABEL_122:
    ++*(void *)(v5 + 24);
    uint64_t v29 = *(void *)__p;
LABEL_123:
    *(void *)std::string __p = 0;
    uint64_t v51 = v35[5];
    v35[5] = v29;
    if (v51)
    {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
      unint64_t v32 = *(void *)(v5 + 8);
    }
    if (!v32) {
      goto LABEL_145;
    }
    uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
    v52.i16[0] = vaddlv_u8(v52);
    if (v52.u32[0] > 1uLL)
    {
      unint64_t v53 = v19;
      if (v19 >= v32) {
        unint64_t v53 = v19 % v32;
      }
    }
    else
    {
      unint64_t v53 = (v32 - 1) & v19;
    }
    std::streamsize v54 = *(void **)(*(void *)v5 + 8 * v53);
    if (!v54 || (std::string::value_type v55 = (void *)*v54) == 0)
    {
LABEL_145:
      uint64_t v28 = 0;
      goto LABEL_146;
    }
    if (v52.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v57 = v55[1];
        if (v19 == v57)
        {
          if (v55[2] == v19) {
            goto LABEL_160;
          }
        }
        else if ((v57 & (v32 - 1)) != v53)
        {
          goto LABEL_145;
        }
        std::string::value_type v55 = (void *)*v55;
        if (!v55) {
          goto LABEL_145;
        }
      }
    }
    while (1)
    {
      unint64_t v56 = v55[1];
      if (v19 == v56) {
        break;
      }
      if (v56 >= v32) {
        v56 %= v32;
      }
      if (v56 != v53) {
        goto LABEL_145;
      }
LABEL_135:
      std::string::value_type v55 = (void *)*v55;
      if (!v55) {
        goto LABEL_145;
      }
    }
    if (v55[2] != v19) {
      goto LABEL_135;
    }
LABEL_160:
    uint64_t v28 = v55[5];
LABEL_146:
    uint64_t v58 = *(void *)__p;
    *(void *)std::string __p = 0;
    if (v58) {
      (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
    }
    unint64_t v18 = (void *)*v16;
LABEL_149:
    (*(void (**)(void *, md::LayoutContext *, uint64_t))(*v18 + 88))(v18, v4, v28);
    if (v72) {
      (*(void (**)(void, md::LayoutContext *, uint64_t))(*(void *)*v16 + 72))(*v16, v4, v28);
    }
    if ([v73 isLogicConsoleEnabled:*(void *)(*v16 + 8)])
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*v16 + 104))(__p);
      if ((v87 & 0x80u) == 0) {
        unint64_t v59 = __p;
      }
      else {
        unint64_t v59 = *(unsigned char **)__p;
      }
      if ((v87 & 0x80u) == 0) {
        uint64_t v60 = v87;
      }
      else {
        uint64_t v60 = *(void *)&__p[8];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)v59, v60);
      if ((char)v87 < 0) {
        operator delete(*(void **)__p);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"\n", 1);
    }
LABEL_40:
    if (++v16 != v17) {
      continue;
    }
    break;
  }
LABEL_161:
  if ([v73 isAnyLogicConsoleEnabled])
  {
    if ((v84 & 0x10) != 0)
    {
      unint64_t v64 = v83;
      if (v83 < v80)
      {
        unint64_t v83 = v80;
        unint64_t v64 = v80;
      }
      uint64_t v65 = (const void **)&v79;
    }
    else
    {
      if ((v84 & 8) == 0)
      {
        size_t v61 = 0;
        HIBYTE(v75) = 0;
        uint64_t v62 = __dst;
        goto LABEL_182;
      }
      uint64_t v65 = (const void **)v78;
      unint64_t v64 = v78[2];
    }
    uint64_t v66 = *v65;
    size_t v61 = v64 - (void)*v65;
    if (v61 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v61 >= 0x17)
    {
      uint64_t v67 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v61 | 7) != 0x17) {
        uint64_t v67 = v61 | 7;
      }
      uint64_t v68 = v67 + 1;
      uint64_t v62 = (void **)operator new(v67 + 1);
      __dst[1] = (void *)v61;
      unint64_t v75 = v68 | 0x8000000000000000;
      __dst[0] = v62;
    }
    else
    {
      HIBYTE(v75) = v64 - *(unsigned char *)v65;
      uint64_t v62 = __dst;
      if (!v61) {
        goto LABEL_182;
      }
    }
    memmove(v62, v66, v61);
LABEL_182:
    *((unsigned char *)v62 + v61) = 0;
    if (*(void *)v4)
    {
      if (objc_opt_respondsToSelector())
      {
        uint64_t v69 = (ggl::DebugConsole *)[*(id *)v4 debugConsoleForId:19];
        if (v69) {
          ggl::DebugConsole::begin(v69);
        }
      }
    }
    if (SHIBYTE(v75) < 0) {
      operator delete(__dst[0]);
    }
    *(unsigned char *)(v70 + 81) = 1;
  }
  else if (*(unsigned char *)(v70 + 81))
  {
    *(unsigned char *)(v70 + 81) = 0;
    if (*(void *)v4)
    {
      if (objc_opt_respondsToSelector())
      {
        uint64_t v63 = (ggl::DebugConsole *)[*(id *)v4 debugConsoleForId:19];
        if (v63) {
          ggl::DebugConsole::begin(v63);
        }
      }
    }
  }
  *(void *)std::string buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v77 = MEMORY[0x1E4FBA470] + 16;
  if (v82 < 0) {
    operator delete(v81);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&v85);

  if (!v95)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_201;
  }
  (*(void (**)(void *))(*v95 + 48))(v95);
  if (v95 == v94)
  {
    (*(void (**)(void *))(v94[0] + 32))(v94);
  }
  else if (v95)
  {
    (*(void (**)(void))(*v95 + 40))();
  }
}

void sub_1A19BF4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  a20 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a20 + *(void *)(a20 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a21 = MEMORY[0x1E4FBA470] + 16;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&a37);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v64 - 152));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::operator()(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)a2 + 56))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    int8x8_t v3 = (int8x8_t)v2[1];
    if (v3)
    {
      unint64_t v4 = *(void *)(*(void *)a2 + 32);
      uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v6 = *(void *)(*(void *)a2 + 32);
        if (v4 >= *(void *)&v3) {
          unint64_t v6 = v4 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v6 = (*(void *)&v3 - 1) & v4;
      }
      uint64_t v7 = *v2;
      id v8 = *(uint64_t ***)(*v2 + 8 * v6);
      if (v8)
      {
        uint64_t v9 = *v8;
        if (*v8)
        {
          uint64_t v10 = *(void *)&v3 - 1;
          if (v5.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v11 = v9[1];
              if (v11 == v4)
              {
                if (v9[2] == v4) {
                  goto LABEL_24;
                }
              }
              else if ((v11 & v10) != v6)
              {
                return;
              }
              uint64_t v9 = (uint64_t *)*v9;
              if (!v9) {
                return;
              }
            }
          }
          do
          {
            unint64_t v12 = v9[1];
            if (v12 == v4)
            {
              if (v9[2] == v4)
              {
LABEL_24:
                if (v5.u32[0] > 1uLL)
                {
                  if (v4 >= *(void *)&v3) {
                    v4 %= *(void *)&v3;
                  }
                }
                else
                {
                  v4 &= v10;
                }
                BOOL v13 = *(uint64_t **)(v7 + 8 * v4);
                do
                {
                  uint64_t v14 = v13;
                  BOOL v13 = (uint64_t *)*v13;
                }
                while (v13 != v9);
                if (v14 == v2 + 2) {
                  goto LABEL_41;
                }
                unint64_t v15 = v14[1];
                if (v5.u32[0] > 1uLL)
                {
                  if (v15 >= *(void *)&v3) {
                    v15 %= *(void *)&v3;
                  }
                }
                else
                {
                  v15 &= v10;
                }
                if (v15 != v4)
                {
LABEL_41:
                  if (!*v9) {
                    goto LABEL_42;
                  }
                  unint64_t v16 = *(void *)(*v9 + 8);
                  if (v5.u32[0] > 1uLL)
                  {
                    if (v16 >= *(void *)&v3) {
                      v16 %= *(void *)&v3;
                    }
                  }
                  else
                  {
                    v16 &= v10;
                  }
                  if (v16 != v4) {
LABEL_42:
                  }
                    *(void *)(v7 + 8 * v4) = 0;
                }
                uint64_t v17 = *v9;
                if (*v9)
                {
                  unint64_t v18 = *(void *)(v17 + 8);
                  if (v5.u32[0] > 1uLL)
                  {
                    if (v18 >= *(void *)&v3) {
                      v18 %= *(void *)&v3;
                    }
                  }
                  else
                  {
                    v18 &= v10;
                  }
                  if (v18 != v4)
                  {
                    *(void *)(*v2 + 8 * v18) = v14;
                    uint64_t v17 = *v9;
                  }
                }
                *uint64_t v14 = v17;
                uint64_t *v9 = 0;
                --v2[3];
                uint64_t v19 = v9[5];
                void v9[5] = 0;
                if (v19) {
                  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
                }
                operator delete(v9);
                return;
              }
            }
            else
            {
              if (v12 >= *(void *)&v3) {
                v12 %= *(void *)&v3;
              }
              if (v12 != v6) {
                return;
              }
            }
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
      }
    }
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint8x8_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  uint64_t v2 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint8x8_t v5 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1A19BFCF8(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LogicManagerRunLogic", "", v5, 2u);
  }
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::SkyLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v26[0] = &unk_1EF579260;
  v26[1] = a2;
  uint64_t v27 = v26;
  v24[0] = &unk_1EF5792A8;
  v24[1] = a2;
  uint64_t v25 = v24;
  uint64_t v29 = v28;
  v28[0] = &unk_1EF5792A8;
  v28[1] = a2;
  _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v26);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (*(unsigned char *)(v7 + 82))
  {
    v22[0] = &unk_1EF5792F0;
    v22[1] = a1;
    void v22[2] = v7;
    id v23 = v22;
    uint64_t v9 = *(unsigned char **)(v7 + 48);
    uint64_t v10 = *(unsigned char **)(v7 + 56);
    if (v9 == v10) {
      goto LABEL_16;
    }
    while (1)
    {
      LOBYTE(v20[0]) = *v9;
      if (!v23) {
        break;
      }
      (*(void (**)(void *, uint64_t *))(*v23 + 48))(v23, v20);
      if (++v9 == v10)
      {
        if (v23 != v22)
        {
          if (v23) {
            (*(void (**)(void))(*v23 + 40))();
          }
          goto LABEL_17;
        }
LABEL_16:
        (*(void (**)(void *))(v22[0] + 32))(v22);
        goto LABEL_17;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
    __break(1u);
  }
LABEL_17:
  float v11 = *(float *)(v8 + 3076);
  float v12 = *(float *)(v8 + 3080);
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 128);
  v19[0] = (uint16x4_t)v13;
  v19[1] = (uint16x4_t)v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v20, v13, (uint64_t)v14);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v21) {
      goto LABEL_22;
    }
  }
  else if (v21)
  {
LABEL_22:
    float v15 = fminf(fmaxf(fmaxf(v12 + v11, 1.0), 0.0), 23.0);
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v19, *(void *)(v20[0] + 24), 0x5Cu, 2u, v15);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x37800080u);
    *(float32x4_t *)(a1 + 136) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v19[0])), v18);
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v19, *(void *)(v20[0] + 24), 0xEEu, 2u, v15);
    float32x4_t v16 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v19[0])), v18);
    goto LABEL_27;
  }
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor, (uint64_t)&md::kSkyDayDefaultFillColor);
  }
  *(_OWORD *)(a1 + 136) = md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor;
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor, (uint64_t)&md::kSkyDayDefaultHorizonColor);
  }
  float32x4_t v16 = (float32x4_t)md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor;
LABEL_27:
  *(float32x4_t *)(a1 + 152) = v16;
  *(_DWORD *)a4 = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 152);
  *(_DWORD *)(a4 + 20) = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a4 + 28) = *(_DWORD *)(a1 + 164);
  *(unsigned char *)(a4 + 32) = *(unsigned char *)(a1 + 168);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v20);
  if (!v29)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_35;
  }
  (*(void (**)(void *))(*v29 + 48))(v29);
  uint64_t result = (uint64_t)v29;
  if (v29 == v28) {
    return (*(uint64_t (**)(void *))(v28[0] + 32))(v28);
  }
  if (v29) {
    return (*(uint64_t (**)(void *))(*v29 + 40))(v29);
  }
  return result;
}

void sub_1A19C05C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v5 - 120));
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SkyLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SkyLogic", "", v5, 2u);
  }
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v4 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v6 = 0x1B8B241A8D896A1DuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v4 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v6 = 0x1B8B241A8D896A1DuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v8 = *(void **)(a2 + 8 * v4);
  if (!v8) {
    goto LABEL_25;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= a3) {
      v10 %= a3;
    }
    if (v10 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v13 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v13 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v13 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  uint64_t v14 = *(void **)(a2 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  float v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0xFBD83FDA8879FF7ELL)
      {
        if (v15[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_46;
        }
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      float v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 0xFBD83FDA8879FF7ELL)
    {
      if (v16 >= a3) {
        v16 %= a3;
      }
      if (v16 != v13) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v15[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_35:
      float v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v6 = *(void *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v19 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v19 = 0x1B8B241A8D896A1DLL % a3;
    }
  }
  else
  {
    uint64_t v19 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  int8x8_t v20 = *(void **)(a2 + 8 * v19);
  if (!v20) {
    goto LABEL_71;
  }
  char v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x1B8B241A8D896A1DLL)
      {
        if (v21[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_69;
        }
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      char v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x1B8B241A8D896A1DLL)
    {
      if (v22 >= a3) {
        v22 %= a3;
      }
      if (v22 != v19) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v21[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_58:
      char v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v5 = *(void *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v25 = 0x4927EB92E562CC46;
    if (a3 <= 0x4927EB92E562CC46) {
      uint64_t v25 = 0x4927EB92E562CC46 % a3;
    }
  }
  else
  {
    uint64_t v25 = (a3 - 1) & 0x4927EB92E562CC46;
  }
  unint64_t v26 = *(void **)(a2 + 8 * v25);
  if (!v26) {
    goto LABEL_94;
  }
  uint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0x4927EB92E562CC46)
      {
        if (v27[2] == 0x4927EB92E562CC46) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0x4927EB92E562CC46) {
      break;
    }
    if (v28 >= a3) {
      v28 %= a3;
    }
    if (v28 != v25) {
      goto LABEL_94;
    }
LABEL_81:
    uint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_94;
    }
  }
  if (v27[2] != 0x4927EB92E562CC46) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0x4927EB92E562CC46)
  {
LABEL_94:
    uint64_t v31 = 0;
    goto LABEL_95;
  }
  uint64_t v31 = *(void *)(v30 + 32);
LABEL_95:
  *uint64_t result = v7;
  result[1] = v6;
  result[2] = v5;
  result[3] = v31;
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46) {
      uint64_t v3 = 0x1AF456233693CD46 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x1AF456233693CD46)
      {
        if (v6[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x1AF456233693CD46) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v11 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v11 = 0x99BED48DEFBBD82BLL % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  unint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x99BED48DEFBBD82BLL)
      {
        if (v13[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      unint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x99BED48DEFBBD82BLL)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      unint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x99BED48DEFBBD82BLL) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x90B6813830DCB581)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x90B6813830DCB581)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x90B6813830DCB581)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v3 = 0x99BED48DEFBBD82BLL % a2;
    }
  }
  else
  {
    unint64_t v3 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x99BED48DEFBBD82BLL)
      {
        if (v6[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x12B1E486D3040E2CLL;
    if (a2 <= 0x12B1E486D3040E2CLL) {
      uint64_t v11 = 0x12B1E486D3040E2CLL % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x12B1E486D3040E2CLL;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x12B1E486D3040E2CLL)
      {
        if (v13[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x12B1E486D3040E2CLL)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x12B1E486D3040E2CLL) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8E4587A431F9C696)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(uint64_t **)(a2 + 8);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildRequiredTuple<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>(v14, *v6, v8);
      uint64_t v9 = md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>::buildOptionalTuple<md::PuckContext,md::RouteOverlayContext>(v7, v8);
      v11[0] = v14[0];
      v11[1] = v14[1];
      uint64_t v12 = v9;
      uint64_t v13 = v10;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)v5 + 128))(v5, a2, v11, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x4927EB92E562CC46)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x88B81689974D86F3 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x12B1E486D3040E2CLL;
    if (*(void *)&v4 <= 0x12B1E486D3040E2CuLL) {
      uint64_t v6 = 0x12B1E486D3040E2CuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x12B1E486D3040E2CLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x88B81689974D86F3 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x12B1E486D3040E2CLL;
    if (*(void *)&v4 <= 0x12B1E486D3040E2CuLL) {
      uint64_t v6 = 0x12B1E486D3040E2CuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x12B1E486D3040E2CLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LogicManagerRunLogic", "", v5, 2u);
  }
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x336A901A15BB7353)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x1AF456233693CD46 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v4 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v6 = 0x8BD499FBD96FBB9ELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

void md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(a1, v4, 0x4Bu, a4);
    uint64_t v8 = *(void *)(a3 + 8);
    if (v8)
    {
      md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(a1, v8, 0x4Cu, a4);
      uint64_t v9 = *(void *)(a3 + 8);
      if (v9)
      {
        md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(a1, v9, 0x4Du, a4);
      }
    }
  }
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x9F2276D081C2CB20;
    if (*(void *)&v4 <= 0x9F2276D081C2CB20) {
      unint64_t v6 = 0x9F2276D081C2CB20 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x9F2276D081C2CB20) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::ResolvedSceneLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, void *a4)
{
  uint64_t v7 = **a3;
  uint64_t v6 = (*a3)[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  *a4 = v7;
  a4[1] = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)(a1 + 120) = a4;
}

void _ZNSt3__110__function6__funcIZN2md8SkyLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15SkyLogicContextEE3__2NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEEclEOSN_(gss::Allocator *a1, unsigned __int8 *a2)
{
  if ((*a2 | 4) == 4)
  {
    uint64_t v2 = *((void *)a1 + 1);
    uint64_t v3 = (uint64_t *)*((void *)a1 + 2);
    int8x8_t v4 = *(std::__shared_weak_count **)(v2 + 128);
    *(void *)(v2 + 120) = 0;
    *(void *)(v2 + 128) = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!*v3) {
        return;
      }
    }
    else if (!*v3)
    {
      return;
    }
    uint64_t v5 = gss::Allocator::instance(a1);
    uint64_t v15 = v5;
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 8, 4);
    uint64_t v7 = v6;
    *(void *)&long long v13 = v6;
    uint64_t v14 = v6 + 1;
    if (v6) {
      *uint64_t v6 = 0x700000005;
    }
    *((void *)&v13 + 1) = v6 + 1;
    gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v16, (uint64_t)&v13);
    if (v7) {
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 40))(v5, v7, 8);
    }
    uint64_t v8 = *v3;
    *(void *)((char *)&v13 + 7) = 0;
    *(void *)&long long v13 = 0;
    HIBYTE(v13) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v12, v8, (gss::FeatureAttributeSet *)v16, (gss::QueryOverrides *)&v13);
    long long v9 = v12;
    unint64_t v10 = *(std::__shared_weak_count **)(v2 + 128);
    long long v12 = 0uLL;
    *(_OWORD *)(v2 + 120) = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v16[0])
    {
      v16[1] = v16[0];
      (*(void (**)(uint64_t, void, void))(*(void *)v17 + 40))(v17, v16[0], v16[2] - v16[0]);
    }
  }
}

void sub_1A19C3AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a18 + 40))(a18);
  }
  _Unwind_Resume(exception_object);
}

void md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C3C94(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1A28FD1F0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 72) = _Q1;
  *(_OWORD *)(a1 + 88) = xmmword_1A28FD200;
  *(_OWORD *)(a1 + 104) = xmmword_1A28FD210;
  *(unsigned char *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 132) = xmmword_1A28FD1F0;
  *(_OWORD *)(a1 + 148) = _Q1;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FD200;
  *(_OWORD *)(a1 + 180) = xmmword_1A28FD210;
  *(unsigned char *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = 0;
  *(_WORD *)(a1 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 216) = 0x3FF0000000000000;
  *(void *)(a1 + 256) = 0x3FF0000000000000;
  *(void *)(a1 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = _Q1;
  *(void *)(a1 + 384) = 0x3FF0000000000000;
  *(void *)(a1 + 424) = 0x3FF0000000000000;
  *(void *)(a1 + 464) = 0x3FF0000000000000;
  return result;
}

void md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_allocateContext()
{
}

void sub_1A19C3E54(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

__n128 md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::allocateContext@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  {
    uint64_t v6 = a1;
    a1 = v6;
    if (v4)
    {
      md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_1A28FF7E0;
      a1 = v6;
    }
  }
  *(_OWORD *)a1 = v1[52];
  uint64_t v2 = (__n128 *)&unk_1E9581000;
  {
    uint64_t v7 = a1;
    uint64_t v2 = (__n128 *)&unk_1E9581000;
    a1 = v7;
    if (v5)
    {
      md::GridLogic::_defaultDrivingStrokeColor(void)::_defaultDrivingStrokeLinearColor = xmmword_1A28FF7C0;
      uint64_t v2 = (__n128 *)&unk_1E9581000;
      a1 = v7;
    }
  }
  __n128 result = v2[156];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4050(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.000407606188;
  *(_OWORD *)a1 = xmmword_1A28FE890;
  *(_OWORD *)(a1 + 16) = xmmword_1A28FE8A0;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

void md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4158(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4248(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_allocateContext()
{
}

void sub_1A19C4438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::ResolvedTileSelectionContext::~ResolvedTileSelectionContext((md::ResolvedTileSelectionContext *)va);
  MEMORY[0x1A6239270](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_allocateContext()
{
}

void sub_1A19C47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::IdentifiedResourceContext::~IdentifiedResourceContext((md::IdentifiedResourceContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  return result;
}

void md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4910(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_allocateContext()
{
}

void sub_1A19C4A10(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4B14(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4C14(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4D04(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C4EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

void md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C50E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::AssetInjectionContext::~AssetInjectionContext((md::AssetInjectionContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  return result;
}

void md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_allocateContext()
{
}

void sub_1A19C521C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C544C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::NonTiledAssetContext::~NonTiledAssetContext((md::NonTiledAssetContext *)va);
  MEMORY[0x1A6239270](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  return result;
}

void md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_allocateContext()
{
}

void sub_1A19C5570(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C5814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::RouteOverlayContext::~RouteOverlayContext((md::RouteOverlayContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return result;
}

void md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C5B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::SceneQueryContext::~SceneQueryContext((md::SceneQueryContext *)va);
  MEMORY[0x1A6239270](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_WORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

void md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_allocateContext()
{
}

void sub_1A19C5DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::NavigationContext::~NavigationContext((md::NavigationContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 8) = -1082130432;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 1072483533;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  return result;
}

void md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C5F40(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::_allocateContext()
{
}

void sub_1A19C616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::RouteLineContext::~RouteLineContext((md::RouteLineContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::RouteLineLogic,md::RouteLineContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext,md::ElevationContext,md::CameraContext,md::SceneContext>,gdc::TypeList<md::PuckContext,md::RouteOverlayContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  return result;
}

void md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_allocateContext()
{
}

void sub_1A19C6390(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 8) = xmmword_1A28FD460;
  return result;
}

void md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C64A0(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C6610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::SettingsContext::~SettingsContext((md::SettingsContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = a1 + 4;
}

void md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C6730(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C69AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::OverlaysContext::~OverlaysContext((md::OverlaysContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 176) = 257;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = 0;
  return result;
}

void md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C6B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::MaterialContext::~MaterialContext((md::MaterialContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_WORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 74) = 0;
  return result;
}

void md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C6E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  md::LightingLogicContext::~LightingLogicContext(&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::allocateContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = operator new(0xE8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EF587790;
  uint64_t v3 = ggl::BufferData::BufferData((uint64_t)(v2 + 3), qword_1E956FA38, 2, 1, 6, 1);
  v2[28] = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
  v2[3] = &unk_1EF55E958;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  int v4 = operator new(0xE8uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EF5877C8;
  uint64_t v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), qword_1E956F938, 2, 1, 6, 1);
  v4[28] = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
  v4[3] = &unk_1EF55E978;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EF587800;
  uint64_t result = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1E956F998, 2, 1, 6, 1);
  v6[28] = ggl::Lighting::LightSpecularConfiguration::reflection(void)::reflection;
  void v6[3] = &unk_1EF55E998;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 192) = 0x3D4CCCCD3F800000;
  *(_DWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 228) = 0;
  return result;
}

void sub_1A19C6FFC(_Unwind_Exception *exception_object)
{
  int v4 = v3;
  if (!atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C7180(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::allocateContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C7298(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::allocateContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_allocateContext()
{
}

void sub_1A19C73B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::allocateContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C74CC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::allocateContext()
{
  return 0x3F80000000000000;
}

void md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1)
{
}

void sub_1A19C79D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(v10 + 352)) {
    *(unsigned char *)(v10 + 352) = 0;
  }
  if (*(unsigned char *)(v10 + 336)) {
    *(unsigned char *)(v10 + 336) = 0;
  }
  MEMORY[0x1A6239270](v10, 0x1060C408871453BLL);
  md::CameraContext::~CameraContext((md::CameraContext *)&a9);
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  int64x2_t v2 = vdupq_n_s64(0xC00921FB54442D18);
  *(int64x2_t *)(a1 + 8) = v2;
  uint64_t v3 = a1 + 264;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  int64x2_t v4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 136) = v4;
  int64x2_t v5 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 152) = v5;
  *(int64x2_t *)(a1 + 168) = v4;
  *(int64x2_t *)(a1 + 184) = v5;
  *(int64x2_t *)(a1 + 200) = v4;
  *(int64x2_t *)(a1 + 216) = v5;
  *(int64x2_t *)(a1 + 232) = v4;
  *(int64x2_t *)(a1 + 248) = v5;
  *(int64x2_t *)(a1 + 264) = v4;
  *(int64x2_t *)(a1 + 280) = v5;
  *(int64x2_t *)(a1 + 296) = v4;
  *(int64x2_t *)(a1 + 312) = v5;
  *(unsigned char *)(a1 + 328) = 1;
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  int64x2_t v13 = v2;
  *(_OWORD *)(a1 + 464) = xmmword_1A28FE5B0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(void *)(a1 + 544) = 0x3FF0000000000000;
  *(void *)(a1 + 936) = 0xBFF0000000000000;
  *(void *)(a1 + 944) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 956) = 2;
  *(void *)(a1 + 1392) = 0;
  uint64_t v6 = (_OWORD *)(a1 + 1400);
  *(int64x2_t *)(a1 + 1408) = v2;
  *(void *)(a1 + 1520) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(int64x2_t *)(a1 + 1536) = v4;
  *(int64x2_t *)(a1 + 1552) = v5;
  *(int64x2_t *)(a1 + 1568) = v4;
  *(int64x2_t *)(a1 + 1584) = v5;
  *(int64x2_t *)(a1 + 1600) = v4;
  *(int64x2_t *)(a1 + 1616) = v5;
  *(int64x2_t *)(a1 + 1632) = v4;
  *(int64x2_t *)(a1 + 1648) = v5;
  *(int64x2_t *)(a1 + 1664) = v4;
  *(int64x2_t *)(a1 + 1680) = v5;
  int64x2_t v14 = v5;
  int64x2_t v15 = v4;
  *(int64x2_t *)(a1 + 1696) = v4;
  *(int64x2_t *)(a1 + 1712) = v5;
  *(unsigned char *)(a1 + 1728) = 1;
  *(unsigned char *)(a1 + 1736) = 0;
  *(unsigned char *)(a1 + 1752) = 0;
  v6[23] = 0u;
  v6[24] = 0u;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1832) = 0;
  *(_DWORD *)(a1 + 1848) = 0;
  *(void *)(a1 + 1864) = 0x3FF0000000000000;
  *(void *)(a1 + 1872) = 0x4059000000000000;
  v6[32] = 0u;
  v6[33] = 0u;
  v6[30] = 0u;
  v6[31] = 0u;
  *(void *)(a1 + 1944) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2336) = xmmword_1A28FCC30;
  *(_DWORD *)(a1 + 2356) = 2;
  *(void *)(a1 + 2768) = 0;
  memset(v16, 0, sizeof(v16));
  *(void *)(a1 + 2960) = 0;
  *(void *)(a1 + 2976) = 0;
  *(void *)(a1 + 2968) = 0;
  geo::ConvexHull2<double>::getConvexHullPoints(v16, (void *)(a1 + 2960), (float64x2_t)xmmword_1A28FCC30);
  *(_DWORD *)(v3 + 2816) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(void *)(v3 + 2808) = _Q0;
  *(unsigned char *)(a1 + 3084) = 1;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(void *)(a1 + 3336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 3728) = xmmword_1A28FCC30;
  *(_DWORD *)(a1 + 3748) = 2;
  *(unsigned char *)(a1 + 3776) = 0;
  *(unsigned char *)(a1 + 3784) = 0;
  *(int64x2_t *)(a1 + 3800) = v13;
  *(void *)(a1 + 3904) = 0;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(void *)(a1 + 3864) = 0;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  *(int64x2_t *)(a1 + 3928) = v15;
  *(int64x2_t *)(a1 + 3944) = v14;
  *(int64x2_t *)(a1 + 3960) = v15;
  *(int64x2_t *)(a1 + 3976) = v14;
  *(int64x2_t *)(a1 + 3992) = v15;
  *(int64x2_t *)(a1 + 4008) = v14;
  *(int64x2_t *)(a1 + 4024) = v15;
  *(int64x2_t *)(a1 + 4040) = v14;
  *(int64x2_t *)(a1 + 4056) = v15;
  *(int64x2_t *)(a1 + 4072) = v14;
  *(int64x2_t *)(a1 + 4088) = v15;
  *(int64x2_t *)(a1 + 4104) = v14;
  *(unsigned char *)(a1 + 4120) = 1;
  *(unsigned char *)(a1 + 4128) = 0;
  *(unsigned char *)(a1 + 4144) = 0;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4160) = 0u;
  *(_DWORD *)(a1 + 4240) = 0;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4256) = xmmword_1A28FE5B0;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(void *)(a1 + 4336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 4728) = xmmword_1A28FCC30;
  *(_DWORD *)(a1 + 4748) = 2;
  *(void *)(a1 + 5240) = 0;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5464) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 5432) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5220) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(void *)(a1 + 5376) = 0x3FF0000000000000;
  *(void *)(a1 + 5416) = 0x3FF0000000000000;
  *(void *)(a1 + 5456) = 0x3FF0000000000000;
  *(void *)(a1 + 5496) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_OWORD *)(a1 + 5576) = 0u;
  double result = 0.0078125;
  *(void *)(a1 + 5592) = 0x3F80000000000000;
  return result;
}

void sub_1A19C7D2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  int64x2_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 2968) = v5;
    operator delete(v5);
  }
  if (*(unsigned char *)(v1 + 1752)) {
    *(unsigned char *)(v1 + 1752) = 0;
  }
  if (*(unsigned char *)(v1 + 1736)) {
    *(unsigned char *)(v1 + 1736) = 0;
  }
  if (*(unsigned char *)(v1 + 352)) {
    *(unsigned char *)(v1 + 352) = 0;
  }
  if (*(unsigned char *)(v1 + 336)) {
    *(unsigned char *)(v1 + 336) = 0;
  }
  _Unwind_Resume(exception_object);
}

void md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_allocateContext()
{
}

void sub_1A19C7E50(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C811C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::VenueLogicContext::~VenueLogicContext((md::VenueLogicContext *)va);
  MEMORY[0x1A6239270](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 292) = 1065353216;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(void *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  return result;
}

void md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A19C829C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::ResolvedSceneLogic::allocateContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::PendingSceneLogic::allocateContext(md::PendingSceneLogic *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 49);
  int64x2_t v5 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v4;
    a2[1] = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v4;
    a2[1] = 0;
  }
  a2[2] = (char *)this + 280;
}

void md::IdentifiedResourceContext::~IdentifiedResourceContext(md::IdentifiedResourceContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 30);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = (std::__shared_weak_count *)v3[4];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  int64x2_t v5 = (void *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 25);
  while (v6)
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
    uint64_t v8 = (std::__shared_weak_count *)v7[4];
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    operator delete(v7);
  }
  uint64_t v9 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 20);
  if (v10)
  {
    *((void *)this + 21) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 17);
  if (v11)
  {
    do
    {
      long long v12 = (void *)*v11;
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  int64x2_t v13 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v13) {
    operator delete(v13);
  }
  int64x2_t v14 = (void *)*((void *)this + 12);
  if (v14)
  {
    do
    {
      int64x2_t v15 = (void *)*v14;
      operator delete(v14);
      int64x2_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 7);
  while (v17)
  {
    uint64_t v18 = v17;
    uint64_t v17 = (void *)*v17;
    uint64_t v19 = (std::__shared_weak_count *)v18[4];
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    operator delete(v18);
  }
  int8x8_t v20 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v20) {
    operator delete(v20);
  }
  char v21 = (void *)*((void *)this + 2);
  while (v21)
  {
    unint64_t v22 = v21;
    char v21 = (void *)*v21;
    uint64_t v23 = (std::__shared_weak_count *)v22[4];
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    operator delete(v22);
  }
  uint64_t v24 = *(void **)this;
  *(void *)this = 0;
  if (v24) {
    operator delete(v24);
  }
}

void md::NonTiledAssetContext::~NonTiledAssetContext(md::NonTiledAssetContext *this)
{
  uint64_t v2 = (void **)*((void *)this + 12);
  if (v2)
  {
    do
    {
      uint64_t v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v8;
    }
    while (v8);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void **)*((void *)this + 7);
  if (v4)
  {
    do
    {
      uint64_t v9 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v9;
    }
    while (v9);
  }
  int64x2_t v5 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)*((void *)this + 2);
  if (v6)
  {
    do
    {
      uint64_t v10 = (void **)*v6;
      if (*((char *)v6 + 39) < 0) {
        operator delete(v6[2]);
      }
      operator delete(v6);
      uint64_t v6 = v10;
    }
    while (v10);
  }
  uint64_t v7 = *(void **)this;
  *(void *)this = 0;
  if (v7) {
    operator delete(v7);
  }
}

void md::RouteOverlayContext::~RouteOverlayContext(md::RouteOverlayContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 20));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 17));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 14));

  uint64_t v3 = (void (***)(void))*((void *)this + 9);
  if (v3)
  {
    uint64_t v4 = (void (***)(void))*((void *)this + 10);
    int64x2_t v5 = (void *)*((void *)this + 9);
    if (v4 != v3)
    {
      uint64_t v6 = v4 - 3;
      uint64_t v7 = v4 - 3;
      uint64_t v8 = v4 - 3;
      do
      {
        uint64_t v9 = *v8;
        v8 -= 3;
        (*v9)(v7);
        v6 -= 3;
        BOOL v10 = v7 == v3;
        uint64_t v7 = v8;
      }
      while (!v10);
      int64x2_t v5 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v3;
    operator delete(v5);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 7));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 4));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 1));
}

void md::VenueLogicContext::~VenueLogicContext(md::VenueLogicContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 40);
  if (v2)
  {
    do
    {
      long long v12 = (void *)*v2;
      int64x2_t v13 = (void *)v2[3];
      if (v13)
      {
        v2[4] = v13;
        operator delete(v13);
      }
      operator delete(v2);
      uint64_t v2 = v12;
    }
    while (v12);
  }
  uint64_t v3 = (void *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  int64x2_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      int64x2_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  BOOL v10 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 2);
  while (v11)
  {
    int64x2_t v14 = v11;
    uint64_t v11 = (void *)*v11;
    int64x2_t v15 = (std::__shared_weak_count *)v14[4];
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    operator delete(v14);
  }
  unint64_t v16 = *(void **)this;
  *(void *)this = 0;
  if (v16) {
    operator delete(v16);
  }
}

void md::OverlaysContext::~OverlaysContext(md::OverlaysContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    do
    {
      int64x2_t v5 = (void *)*v4;
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v9) {
    operator delete(v9);
  }
  BOOL v10 = (void *)*((void *)this + 2);
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      BOOL v10 = v11;
    }
    while (v11);
  }
  long long v12 = *(void **)this;
  *(void *)this = 0;
  if (v12) {
    operator delete(v12);
  }
}

void md::MaterialContext::~MaterialContext(md::MaterialContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = (std::__shared_weak_count *)v3[4];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  int64x2_t v5 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7) {
      return;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7) {
      return;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x9F2276D081C2CB20;
    if (*(void *)&v4 <= 0x9F2276D081C2CB20) {
      unint64_t v6 = 0x9F2276D081C2CB20 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x9F2276D081C2CB20) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::SharedResourcesLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v9[0] = &unk_1EF575288;
  v9[1] = a2;
  v7[0] = &unk_1EF5752D0;
  v7[1] = a2;
  uint64_t v8 = v7;
  uint64_t v12 = v11;
  unint64_t v10 = v9;
  v11[0] = &unk_1EF5752D0;
  v11[1] = a2;
  _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEEclEv((uint64_t)v9);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  objc_storeStrong(a4, *(id *)(a1 + 128));
  if (!v12)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v12 + 48))(v12);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

void sub_1A19C8ED8(_Unwind_Exception *exception_object)
{
}

void sub_1A19C8EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v21)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  std::function<void ()(void)>::~function(&a10);
  std::function<void ()(void)>::~function(&a14);
  _Unwind_Resume(a1);
}

void sub_1A19C8F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (!a21) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(*a21 + 40))();
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SharedResourcesLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SharedResourcesLogic", "", v5, 2u);
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = 1;
  switch(0x8E38E38E38E38E39 * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint8x8_t v5 = a2 - 144;
      unsigned int v6 = *(a2 - 31);
      unsigned int v7 = a1[113];
      BOOL v8 = v6 >= v7;
      if (v6 != v7) {
        goto LABEL_113;
      }
      int v9 = *((_DWORD *)a2 - 7);
      int v10 = *((_DWORD *)a1 + 29);
      BOOL v11 = v9 < v10;
      if (v9 == v10 && (v12 = *((_DWORD *)a2 - 6), v13 = *((_DWORD *)a1 + 30), BOOL v11 = v12 < v13, v12 == v13))
      {
        unsigned int v14 = *((unsigned __int16 *)a2 - 68);
        unsigned int v15 = *((unsigned __int16 *)a1 + 4);
        BOOL v8 = v14 >= v15;
        if (v14 == v15)
        {
          if (*((void *)a2 - 8) != *((void *)a1 + 10)
            || (unint64_t v16 = (const void *)*((void *)a2 - 16),
                size_t v17 = *((void *)a2 - 15) - (void)v16,
                uint64_t v18 = (const void *)*((void *)a1 + 2),
                v17 != *((void *)a1 + 3) - (void)v18)
            || memcmp(v16, v18, v17))
          {
            if (!gdc::GenericKey::operator<(*((void *)a2 - 16), *((void *)a2 - 15), *((void *)a1 + 2), *((void *)a1 + 3)))return v4; {
            goto LABEL_114;
            }
          }
          BOOL v8 = *v5 >= *a1;
        }
LABEL_113:
        if (v8) {
          return v4;
        }
      }
      else if (!v11)
      {
        return v4;
      }
LABEL_114:
      std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a1, (uint64_t)(a2 - 144));
      return v4;
    case 3uLL:
      return v4;
    case 4uLL:
      return v4;
    case 5uLL:
      return v4;
    default:
      uint64_t v19 = a1 + 288;
      int8x8_t v20 = a1 + 432;
      uint64_t v4 = 1;
      if (a1 + 432 == a2) {
        return v4;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (2)
  {
    unsigned int v23 = v20[113];
    unsigned int v24 = v19[113];
    BOOL v25 = v23 >= v24;
    if (v23 != v24) {
      goto LABEL_28;
    }
    int v26 = *((_DWORD *)v20 + 29);
    int v27 = *((_DWORD *)v19 + 29);
    BOOL v28 = v26 < v27;
    if (v26 != v27 || (v29 = *((_DWORD *)v20 + 30), v30 = *((_DWORD *)v19 + 30), BOOL v28 = v29 < v30, v29 != v30))
    {
      if (!v28) {
        goto LABEL_14;
      }
      goto LABEL_29;
    }
    unsigned int v31 = *((unsigned __int16 *)v20 + 4);
    unsigned int v32 = *((unsigned __int16 *)v19 + 4);
    BOOL v25 = v31 >= v32;
    if (v31 != v32) {
      goto LABEL_28;
    }
    if (*((void *)v20 + 10) == *((void *)v19 + 10))
    {
      uint8x8_t v33 = (const void *)*((void *)v20 + 2);
      size_t v34 = *((void *)v20 + 3) - (void)v33;
      uint64_t v35 = (const void *)*((void *)v19 + 2);
      if (v34 == *((void *)v19 + 3) - (void)v35 && !memcmp(v33, v35, v34))
      {
        BOOL v25 = *v20 >= *v19;
LABEL_28:
        if (v25) {
          goto LABEL_14;
        }
        goto LABEL_29;
      }
    }
    if (!gdc::GenericKey::operator<(*((void *)v20 + 2), *((void *)v20 + 3), *((void *)v19 + 2), *((void *)v19 + 3)))goto LABEL_14; {
LABEL_29:
    }
    unsigned __int8 v82 = *v20;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v83, (uint64_t)(v20 + 8));
    char v88 = 0;
    if (v20[96])
    {
      int v89 = *((_DWORD *)v20 + 25);
      char v88 = 1;
    }
    uint64_t v90 = *((void *)v20 + 13);
    LOWORD(v91) = *((_WORD *)v20 + 56);
    *(void *)((char *)&v91 + 4) = *(void *)(v20 + 116);
    uint64_t v93 = *((void *)v20 + 17);
    for (uint64_t i = v21; ; i -= 144)
    {
      uint64_t v38 = &a1[i];
      gdc::LayerDataRequestKey::operator=((uint64_t)&a1[i + 432], (uint64_t)&a1[i + 288]);
      *((_OWORD *)v38 + 34) = *((_OWORD *)v38 + 25);
      uint64_t v39 = *(void *)&a1[i + 424];
      *((void *)v38 + 70) = *((void *)v38 + 52);
      *((void *)v38 + 71) = v39;
      if (i == -288) {
        break;
      }
      unsigned int v40 = v38[257];
      BOOL v37 = BYTE1(v91) >= v40;
      if (BYTE1(v91) != v40) {
        goto LABEL_33;
      }
      int v41 = *(_DWORD *)&a1[i + 260];
      if (DWORD1(v91) == v41)
      {
        int v42 = *(_DWORD *)&a1[i + 264];
        if (DWORD2(v91) != v42)
        {
          if (SDWORD2(v91) >= v42)
          {
            uint64_t v19 = &a1[i + 288];
            uint64_t v45 = (uint64_t)&a1[i + 400];
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        unsigned int v43 = *(unsigned __int16 *)&a1[i + 152];
        BOOL v37 = v83 >= v43;
        if (v83 != v43) {
          goto LABEL_33;
        }
        if ((void)v87 == *(void *)&a1[i + 224])
        {
          char v44 = *(const void **)&a1[i + 160];
          if (v85 - (void)v84 == *(void *)&a1[i + 168] - (void)v44 && !memcmp(v84, v44, v85 - (void)v84))
          {
            BOOL v37 = v82 >= v38[144];
LABEL_33:
            if (v37) {
              goto LABEL_50;
            }
            goto LABEL_34;
          }
        }
        if (!gdc::GenericKey::operator<((uint64_t)v84, v85, *(void *)&a1[i + 160], *(void *)&a1[i + 168])) {
          goto LABEL_50;
        }
      }
      else if (SDWORD1(v91) >= v41)
      {
        goto LABEL_50;
      }
LABEL_34:
      v19 -= 144;
    }
    uint64_t v19 = a1;
LABEL_50:
    uint64_t v45 = (uint64_t)(v38 + 400);
LABEL_51:
    *uint64_t v19 = v82;
    *((_WORD *)v19 + 4) = v83;
    if (v19 == &v82) {
      goto LABEL_94;
    }
    uint8x8_t v46 = (void *)*((void *)v19 + 2);
    if (v46 != *((void **)v19 + 4)) {
      free(v46);
    }
    uint64_t v47 = (char *)(v19 + 48);
    *((void *)v19 + 2) = v19 + 48;
    *((void *)v19 + 3) = v19 + 48;
    *((void *)v19 + 4) = v19 + 48;
    *((void *)v19 + 5) = 32;
    uint64_t v48 = (char *)v84;
    uint64_t v49 = v85;
    unint64_t v50 = v85 - (void)v84;
    if ((unint64_t)(v85 - (void)v84) < 0x21) {
      goto LABEL_75;
    }
    if (v50 <= 0x40) {
      size_t v51 = 64;
    }
    else {
      size_t v51 = v85 - (void)v84;
    }
    size_t v81 = v51;
    uint64_t v47 = (char *)malloc_type_malloc(v51, 0x100004077774924uLL);
    uint8x8_t v52 = (char *)*((void *)v19 + 2);
    unint64_t v53 = (char *)*((void *)v19 + 3);
    if (v52 == v53) {
      goto LABEL_74;
    }
    unint64_t v54 = v53 - v52;
    if ((unint64_t)(v53 - v52) < 8)
    {
      std::string::value_type v55 = v47;
      goto LABEL_73;
    }
    std::string::value_type v55 = v47;
    if ((unint64_t)(v47 - v52) < 0x20) {
      goto LABEL_73;
    }
    if (v54 >= 0x20)
    {
      unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v57 = (long long *)(v52 + 16);
      uint64_t v58 = v47 + 16;
      unint64_t v59 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v60 = *v57;
        *(v58 - 1) = *(v57 - 1);
        _OWORD *v58 = v60;
        v57 += 2;
        v58 += 2;
        v59 -= 32;
      }
      while (v59);
      if (v54 == v56) {
        goto LABEL_74;
      }
      if ((v54 & 0x18) != 0) {
        goto LABEL_68;
      }
      v52 += v56;
      std::string::value_type v55 = &v47[v56];
      do
      {
LABEL_73:
        char v66 = *v52++;
        *v55++ = v66;
      }
      while (v52 != v53);
      goto LABEL_74;
    }
    unint64_t v56 = 0;
LABEL_68:
    unint64_t v61 = v54 & 0xFFFFFFFFFFFFFFF8;
    std::string::value_type v55 = &v47[v54 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v62 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v63 = (uint64_t *)&v52[v56];
    uint64_t v64 = &v47[v56];
    do
    {
      uint64_t v65 = *v63++;
      *(void *)uint64_t v64 = v65;
      v64 += 8;
      v62 += 8;
    }
    while (v62);
    if (v54 != v61)
    {
      v52 += v61;
      goto LABEL_73;
    }
LABEL_74:
    *((void *)v19 + 2) = v47;
    *((void *)v19 + 3) = v47;
    *((void *)v19 + 5) = v81;
LABEL_75:
    if (v48 == (char *)v49) {
      goto LABEL_93;
    }
    if (v50 < 8)
    {
      uint64_t v68 = v47;
      goto LABEL_91;
    }
    if ((unint64_t)(v47 - v48) < 0x20)
    {
      uint64_t v68 = v47;
      goto LABEL_91;
    }
    if (v50 >= 0x20)
    {
      unint64_t v67 = v50 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v69 = (long long *)(v48 + 16);
      uint64_t v70 = v47 + 16;
      unint64_t v71 = v50 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v72 = *v69;
        *(v70 - 1) = *(v69 - 1);
        _OWORD *v70 = v72;
        v69 += 2;
        v70 += 2;
        v71 -= 32;
      }
      while (v71);
      if (v50 == v67) {
        goto LABEL_92;
      }
      if ((v50 & 0x18) != 0) {
        goto LABEL_86;
      }
      v48 += v67;
      uint64_t v68 = &v47[v67];
      do
      {
LABEL_91:
        char v78 = *v48++;
        *v68++ = v78;
      }
      while (v48 != (char *)v49);
      goto LABEL_92;
    }
    unint64_t v67 = 0;
LABEL_86:
    unint64_t v73 = v50 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v68 = &v47[v50 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v74 = v67 - (v50 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v75 = (uint64_t *)&v48[v67];
    uint64_t v76 = &v47[v67];
    do
    {
      uint64_t v77 = *v75++;
      *(void *)uint64_t v76 = v77;
      v76 += 8;
      v74 += 8;
    }
    while (v74);
    if (v50 != v73)
    {
      v48 += v73;
      goto LABEL_91;
    }
LABEL_92:
    uint64_t v47 = (char *)*((void *)v19 + 3);
LABEL_93:
    *((void *)v19 + 3) = &v47[v50];
LABEL_94:
    *((_OWORD *)v19 + 5) = v87;
    int v79 = v19[96];
    if (v88)
    {
      *((_DWORD *)v19 + 25) = v89;
      if (!v79) {
        v19[96] = 1;
      }
    }
    else if (v19[96])
    {
      v19[96] = 0;
    }
    *((void *)v19 + 13) = v90;
    *(_OWORD *)uint64_t v45 = v91;
    *(void *)(v45 + 16) = v92;
    *((void *)v19 + 17) = v93;
    if (v88) {
      char v88 = 0;
    }
    if (v84 != v86) {
      free(v84);
    }
    if (++v22 == 8) {
      return v20 + 144 == a2;
    }
LABEL_14:
    uint64_t v19 = v20;
    v21 += 144;
    v20 += 144;
    if (v20 != a2) {
      continue;
    }
    return 1;
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *,0>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned int v10 = a5[113];
  unsigned int v11 = a4[113];
  BOOL v12 = v10 >= v11;
  if (v10 != v11) {
    goto LABEL_10;
  }
  int v13 = *((_DWORD *)a5 + 29);
  int v14 = *((_DWORD *)a4 + 29);
  BOOL v15 = v13 < v14;
  if (v13 != v14 || (v16 = *((_DWORD *)a5 + 30), v17 = *((_DWORD *)a4 + 30), BOOL v15 = v16 < v17, v16 != v17))
  {
    if (!v15) {
      return;
    }
    goto LABEL_14;
  }
  unsigned int v18 = *((unsigned __int16 *)a5 + 4);
  unsigned int v19 = *((unsigned __int16 *)a4 + 4);
  BOOL v12 = v18 >= v19;
  if (v18 != v19)
  {
LABEL_10:
    if (v12) {
      return;
    }
    goto LABEL_14;
  }
  if (*((void *)a5 + 10) == *((void *)a4 + 10)
    && (int8x8_t v20 = (const void *)*((void *)a5 + 2),
        size_t v21 = *((void *)a5 + 3) - (void)v20,
        int v22 = (const void *)*((void *)a4 + 2),
        v21 == *((void *)a4 + 3) - (void)v22)
    && !memcmp(v20, v22, v21))
  {
    if (*a5 >= *a4) {
      return;
    }
  }
  else if (!gdc::GenericKey::operator<(*((void *)a5 + 2), *((void *)a5 + 3), *((void *)a4 + 2), *((void *)a4 + 3)))
  {
    return;
  }
LABEL_14:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a4, (uint64_t)a5);
  unsigned int v23 = a4[113];
  unsigned int v24 = a3[113];
  BOOL v25 = v23 >= v24;
  if (v23 == v24)
  {
    int v26 = *((_DWORD *)a4 + 29);
    int v27 = *((_DWORD *)a3 + 29);
    BOOL v28 = v26 < v27;
    if (v26 != v27 || (v29 = *((_DWORD *)a4 + 30), v30 = *((_DWORD *)a3 + 30), BOOL v28 = v29 < v30, v29 != v30))
    {
      if (!v28) {
        return;
      }
      goto LABEL_27;
    }
    unsigned int v31 = *((unsigned __int16 *)a4 + 4);
    unsigned int v32 = *((unsigned __int16 *)a3 + 4);
    BOOL v25 = v31 >= v32;
    if (v31 == v32)
    {
      if (*((void *)a4 + 10) == *((void *)a3 + 10)
        && (uint8x8_t v33 = (const void *)*((void *)a4 + 2),
            size_t v34 = *((void *)a4 + 3) - (void)v33,
            uint64_t v35 = (const void *)*((void *)a3 + 2),
            v34 == *((void *)a3 + 3) - (void)v35)
        && !memcmp(v33, v35, v34))
      {
        if (*a4 >= *a3) {
          return;
        }
      }
      else if (!gdc::GenericKey::operator<(*((void *)a4 + 2), *((void *)a4 + 3), *((void *)a3 + 2), *((void *)a3 + 3)))
      {
        return;
      }
      goto LABEL_27;
    }
  }
  if (v25) {
    return;
  }
LABEL_27:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a3, (uint64_t)a4);
  unsigned int v36 = a3[113];
  unsigned int v37 = a2[113];
  BOOL v38 = v36 >= v37;
  if (v36 != v37) {
    goto LABEL_36;
  }
  int v39 = *((_DWORD *)a3 + 29);
  int v40 = *((_DWORD *)a2 + 29);
  BOOL v41 = v39 < v40;
  if (v39 != v40 || (int v42 = *((_DWORD *)a3 + 30), v43 = *((_DWORD *)a2 + 30), v41 = v42 < v43, v42 != v43))
  {
    if (!v41) {
      return;
    }
    goto LABEL_40;
  }
  unsigned int v44 = *((unsigned __int16 *)a3 + 4);
  unsigned int v45 = *((unsigned __int16 *)a2 + 4);
  BOOL v38 = v44 >= v45;
  if (v44 == v45)
  {
    if (*((void *)a3 + 10) == *((void *)a2 + 10)
      && (uint8x8_t v46 = (const void *)*((void *)a3 + 2),
          size_t v47 = *((void *)a3 + 3) - (void)v46,
          uint64_t v48 = (const void *)*((void *)a2 + 2),
          v47 == *((void *)a2 + 3) - (void)v48)
      && !memcmp(v46, v48, v47))
    {
      if (*a3 >= *a2) {
        return;
      }
    }
    else if (!gdc::GenericKey::operator<(*((void *)a3 + 2), *((void *)a3 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
    {
      return;
    }
  }
  else
  {
LABEL_36:
    if (v38) {
      return;
    }
  }
LABEL_40:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a2, (uint64_t)a3);
  unsigned int v49 = a2[113];
  unsigned int v50 = *(unsigned __int8 *)(a1 + 113);
  if (v49 == v50)
  {
    int v51 = *((_DWORD *)a2 + 29);
    int v52 = *(_DWORD *)(a1 + 116);
    BOOL v53 = v51 < v52;
    if (v51 == v52 && (v54 = *((_DWORD *)a2 + 30), v55 = *(_DWORD *)(a1 + 120), BOOL v53 = v54 < v55, v54 == v55))
    {
      if (!gdc::LayerDataRequestKey::operator<(a2, (unsigned __int8 *)a1)) {
        return;
      }
    }
    else if (!v53)
    {
      return;
    }
  }
  else if (v49 >= v50)
  {
    return;
  }
  std::swap[abi:nn180100]<gdc::LayerDataIndex>(a1, (uint64_t)a2);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v8 = a4[113];
  unsigned int v9 = a3[113];
  BOOL v10 = v8 >= v9;
  if (v8 != v9) {
    goto LABEL_10;
  }
  int v11 = *((_DWORD *)a4 + 29);
  int v12 = *((_DWORD *)a3 + 29);
  BOOL v13 = v11 < v12;
  if (v11 != v12 || (v14 = *((_DWORD *)a4 + 30), v15 = *((_DWORD *)a3 + 30), BOOL v13 = v14 < v15, v14 != v15))
  {
    if (!v13) {
      return;
    }
    goto LABEL_14;
  }
  unsigned int v16 = *((unsigned __int16 *)a4 + 4);
  unsigned int v17 = *((unsigned __int16 *)a3 + 4);
  BOOL v10 = v16 >= v17;
  if (v16 != v17)
  {
LABEL_10:
    if (v10) {
      return;
    }
    goto LABEL_14;
  }
  if (*((void *)a4 + 10) == *((void *)a3 + 10)
    && (unsigned int v18 = (const void *)*((void *)a4 + 2),
        size_t v19 = *((void *)a4 + 3) - (void)v18,
        int8x8_t v20 = (const void *)*((void *)a3 + 2),
        v19 == *((void *)a3 + 3) - (void)v20)
    && !memcmp(v18, v20, v19))
  {
    if (*a4 >= *a3) {
      return;
    }
  }
  else if (!gdc::GenericKey::operator<(*((void *)a4 + 2), *((void *)a4 + 3), *((void *)a3 + 2), *((void *)a3 + 3)))
  {
    return;
  }
LABEL_14:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a3, (uint64_t)a4);
  unsigned int v21 = a3[113];
  unsigned int v22 = a2[113];
  BOOL v23 = v21 >= v22;
  if (v21 == v22)
  {
    int v24 = *((_DWORD *)a3 + 29);
    int v25 = *((_DWORD *)a2 + 29);
    BOOL v26 = v24 < v25;
    if (v24 != v25 || (v27 = *((_DWORD *)a3 + 30), v28 = *((_DWORD *)a2 + 30), BOOL v26 = v27 < v28, v27 != v28))
    {
      if (!v26) {
        return;
      }
      goto LABEL_27;
    }
    unsigned int v29 = *((unsigned __int16 *)a3 + 4);
    unsigned int v30 = *((unsigned __int16 *)a2 + 4);
    BOOL v23 = v29 >= v30;
    if (v29 == v30)
    {
      if (*((void *)a3 + 10) == *((void *)a2 + 10)
        && (unsigned int v31 = (const void *)*((void *)a3 + 2),
            size_t v32 = *((void *)a3 + 3) - (void)v31,
            uint8x8_t v33 = (const void *)*((void *)a2 + 2),
            v32 == *((void *)a2 + 3) - (void)v33)
        && !memcmp(v31, v33, v32))
      {
        if (*a3 >= *a2) {
          return;
        }
      }
      else if (!gdc::GenericKey::operator<(*((void *)a3 + 2), *((void *)a3 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
      {
        return;
      }
      goto LABEL_27;
    }
  }
  if (v23) {
    return;
  }
LABEL_27:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a2, (uint64_t)a3);
  unsigned int v34 = a2[113];
  unsigned int v35 = a1[113];
  BOOL v36 = v34 >= v35;
  if (v34 != v35) {
    goto LABEL_36;
  }
  int v37 = *((_DWORD *)a2 + 29);
  int v38 = *((_DWORD *)a1 + 29);
  BOOL v39 = v37 < v38;
  if (v37 != v38 || (v40 = *((_DWORD *)a2 + 30), v41 = *((_DWORD *)a1 + 30), BOOL v39 = v40 < v41, v40 != v41))
  {
    if (!v39) {
      return;
    }
    goto LABEL_40;
  }
  unsigned int v42 = *((unsigned __int16 *)a2 + 4);
  unsigned int v43 = *((unsigned __int16 *)a1 + 4);
  BOOL v36 = v42 >= v43;
  if (v42 == v43)
  {
    if (*((void *)a2 + 10) == *((void *)a1 + 10)
      && (unsigned int v44 = (const void *)*((void *)a2 + 2),
          size_t v45 = *((void *)a2 + 3) - (void)v44,
          uint8x8_t v46 = (const void *)*((void *)a1 + 2),
          v45 == *((void *)a1 + 3) - (void)v46)
      && !memcmp(v44, v46, v45))
    {
      if (*a2 >= *a1) {
        return;
      }
    }
    else if (!gdc::GenericKey::operator<(*((void *)a2 + 2), *((void *)a2 + 3), *((void *)a1 + 2), *((void *)a1 + 3)))
    {
      return;
    }
  }
  else
  {
LABEL_36:
    if (v36) {
      return;
    }
  }
LABEL_40:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a1, (uint64_t)a2);
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6 = a2[113];
  unsigned int v7 = a1[113];
  BOOL v8 = v6 >= v7;
  if (v6 == v7)
  {
    int v9 = *((_DWORD *)a2 + 29);
    int v10 = *((_DWORD *)a1 + 29);
    BOOL v11 = v9 < v10;
    if (v9 != v10 || (v12 = *((_DWORD *)a2 + 30), v13 = *((_DWORD *)a1 + 30), BOOL v11 = v12 < v13, v12 != v13))
    {
      if (!v11) {
        goto LABEL_21;
      }
      goto LABEL_11;
    }
    unsigned int v14 = *((unsigned __int16 *)a2 + 4);
    unsigned int v15 = *((unsigned __int16 *)a1 + 4);
    BOOL v8 = v14 >= v15;
    if (v14 == v15)
    {
      if (*((void *)a2 + 10) == *((void *)a1 + 10)
        && (unsigned int v16 = (const void *)*((void *)a2 + 2),
            size_t v17 = *((void *)a2 + 3) - (void)v16,
            unsigned int v18 = (const void *)*((void *)a1 + 2),
            v17 == *((void *)a1 + 3) - (void)v18)
        && !memcmp(v16, v18, v17))
      {
        if (*a2 >= *a1)
        {
LABEL_21:
          unsigned int v31 = a3[113];
          BOOL v32 = v31 >= v6;
          if (v31 == v6)
          {
            int v33 = *((_DWORD *)a3 + 29);
            int v34 = *((_DWORD *)a2 + 29);
            BOOL v35 = v33 < v34;
            if (v33 != v34 || (v36 = *((_DWORD *)a3 + 30), v37 = *((_DWORD *)a2 + 30), BOOL v35 = v36 < v37, v36 != v37))
            {
              if (!v35) {
                return;
              }
              goto LABEL_46;
            }
            unsigned int v38 = *((unsigned __int16 *)a3 + 4);
            unsigned int v39 = *((unsigned __int16 *)a2 + 4);
            BOOL v32 = v38 >= v39;
            if (v38 == v39)
            {
              if (*((void *)a3 + 10) == *((void *)a2 + 10)
                && (int v40 = (const void *)*((void *)a3 + 2),
                    size_t v41 = *((void *)a3 + 3) - (void)v40,
                    unsigned int v42 = (const void *)*((void *)a2 + 2),
                    v41 == *((void *)a2 + 3) - (void)v42)
                && !memcmp(v40, v42, v41))
              {
                if (*a3 >= *a2) {
                  return;
                }
              }
              else if (!gdc::GenericKey::operator<(*((void *)a3 + 2), *((void *)a3 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
              {
                return;
              }
              goto LABEL_46;
            }
          }
          if (v32) {
            return;
          }
LABEL_46:
          std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a2, (uint64_t)a3);
          unsigned int v57 = a2[113];
          unsigned int v58 = a1[113];
          BOOL v59 = v57 >= v58;
          if (v57 != v58) {
            goto LABEL_57;
          }
          int v60 = *((_DWORD *)a2 + 29);
          int v61 = *((_DWORD *)a1 + 29);
          BOOL v62 = v60 < v61;
          if (v60 != v61 || (v63 = *((_DWORD *)a2 + 30), v64 = *((_DWORD *)a1 + 30), BOOL v62 = v63 < v64, v63 != v64))
          {
            if (!v62) {
              return;
            }
            goto LABEL_65;
          }
          unsigned int v65 = *((unsigned __int16 *)a2 + 4);
          unsigned int v66 = *((unsigned __int16 *)a1 + 4);
          BOOL v59 = v65 >= v66;
          if (v65 == v66)
          {
            if (*((void *)a2 + 10) == *((void *)a1 + 10)
              && (unint64_t v67 = (const void *)*((void *)a2 + 2),
                  size_t v68 = *((void *)a2 + 3) - (void)v67,
                  uint64_t v69 = (const void *)*((void *)a1 + 2),
                  v68 == *((void *)a1 + 3) - (void)v69)
              && !memcmp(v67, v69, v68))
            {
              if (*a2 >= *a1) {
                return;
              }
            }
            else if (!gdc::GenericKey::operator<(*((void *)a2 + 2), *((void *)a2 + 3), *((void *)a1 + 2), *((void *)a1 + 3)))
            {
              return;
            }
          }
          else
          {
LABEL_57:
            if (v59) {
              return;
            }
          }
LABEL_65:
          uint64_t v43 = (uint64_t)a1;
          uint64_t v70 = (uint64_t)a2;
          goto LABEL_66;
        }
      }
      else if (!gdc::GenericKey::operator<(*((void *)a2 + 2), *((void *)a2 + 3), *((void *)a1 + 2), *((void *)a1 + 3)))
      {
        goto LABEL_21;
      }
      goto LABEL_11;
    }
  }
  if (v8) {
    goto LABEL_21;
  }
LABEL_11:
  unsigned int v19 = a3[113];
  BOOL v20 = v19 >= v6;
  if (v19 != v6) {
    goto LABEL_30;
  }
  int v21 = *((_DWORD *)a3 + 29);
  int v22 = *((_DWORD *)a2 + 29);
  BOOL v23 = v21 < v22;
  if (v21 != v22 || (v24 = *((_DWORD *)a3 + 30), v25 = *((_DWORD *)a2 + 30), BOOL v23 = v24 < v25, v24 != v25))
  {
    if (!v23) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  unsigned int v26 = *((unsigned __int16 *)a3 + 4);
  unsigned int v27 = *((unsigned __int16 *)a2 + 4);
  BOOL v20 = v26 >= v27;
  if (v26 != v27)
  {
LABEL_30:
    if (v20) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  if (*((void *)a3 + 10) == *((void *)a2 + 10)
    && (int v28 = (const void *)*((void *)a3 + 2),
        size_t v29 = *((void *)a3 + 3) - (void)v28,
        unsigned int v30 = (const void *)*((void *)a2 + 2),
        v29 == *((void *)a2 + 3) - (void)v30)
    && !memcmp(v28, v30, v29))
  {
    if (*a3 >= *a2)
    {
LABEL_35:
      std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a1, (uint64_t)a2);
      unsigned int v44 = a3[113];
      unsigned int v45 = a2[113];
      BOOL v46 = v44 >= v45;
      if (v44 == v45)
      {
        int v47 = *((_DWORD *)a3 + 29);
        int v48 = *((_DWORD *)a2 + 29);
        BOOL v49 = v47 < v48;
        if (v47 != v48 || (v50 = *((_DWORD *)a3 + 30), v51 = *((_DWORD *)a2 + 30), BOOL v49 = v50 < v51, v50 != v51))
        {
          if (!v49) {
            return;
          }
          goto LABEL_61;
        }
        unsigned int v52 = *((unsigned __int16 *)a3 + 4);
        unsigned int v53 = *((unsigned __int16 *)a2 + 4);
        BOOL v46 = v52 >= v53;
        if (v52 == v53)
        {
          if (*((void *)a3 + 10) == *((void *)a2 + 10)
            && (int v54 = (const void *)*((void *)a3 + 2),
                size_t v55 = *((void *)a3 + 3) - (void)v54,
                unint64_t v56 = (const void *)*((void *)a2 + 2),
                v55 == *((void *)a2 + 3) - (void)v56)
            && !memcmp(v54, v56, v55))
          {
            if (*a3 >= *a2) {
              return;
            }
          }
          else if (!gdc::GenericKey::operator<(*((void *)a3 + 2), *((void *)a3 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
          {
            return;
          }
          goto LABEL_61;
        }
      }
      if (v46) {
        return;
      }
LABEL_61:
      uint64_t v43 = (uint64_t)a2;
      goto LABEL_62;
    }
  }
  else if (!gdc::GenericKey::operator<(*((void *)a3 + 2), *((void *)a3 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
  {
    goto LABEL_35;
  }
LABEL_31:
  uint64_t v43 = (uint64_t)a1;
LABEL_62:
  uint64_t v70 = (uint64_t)a3;
LABEL_66:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>(v43, v70);
}

BOOL gdc::LayerDataRequestKey::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *((unsigned __int16 *)a1 + 4);
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  BOOL v4 = v2 >= v3;
  if (v2 != v3) {
    return !v4;
  }
  if (*((void *)a1 + 10) == *((void *)a2 + 10))
  {
    unsigned int v7 = (const void *)*((void *)a1 + 2);
    size_t v8 = *((void *)a1 + 3) - (void)v7;
    int v9 = (const void *)*((void *)a2 + 2);
    if (v8 == *((void *)a2 + 3) - (void)v9 && !memcmp(v7, v9, v8))
    {
      BOOL v4 = *a1 >= *a2;
      return !v4;
    }
  }
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = *((void *)a1 + 3);
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = *((void *)a2 + 3);
  return gdc::GenericKey::operator<(v10, v11, v12, v13);
}

uint64_t MDDisplayLayerRenderTargetPreparer::prepareInteractiveTargets(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 8) prepareTexture:a2];
  uint64_t v3 = [*(id *)(a1 + 8) finalRenderTarget];
  [*(id *)(a1 + 8) blitRenderTarget];
  return v3;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::ita::FrameHandle>(*(int8x8_t **)(a2 + 8));
  BOOL v4 = v3;
  uint64_t v6 = v3[7];
  uint64_t v5 = v3[8];
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v8 = *(unsigned int *)(v6 + 4), v9 = v3[4], unint64_t v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) == 0
      || (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((uint64_t v13 = v6 + 8 * v12, v13 != v5) ? (v14 = *(_DWORD *)(v13 + 4) == v8) : (v14 = 0), !v14))
    {
      unint64_t v15 = v7 >> 3;
      uint64_t v16 = v6 + 8;
      do
      {
        if (v16 == v5) {
          goto LABEL_76;
        }
        unint64_t v17 = *(unsigned int *)(v16 + 4);
        uint64_t v18 = v3[8];
        if (v17 >> 7 < v10)
        {
          uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
          uint64_t v18 = v3[8];
          if (v19)
          {
            unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            uint64_t v18 = v3[8];
            if (v15 > v20)
            {
              uint64_t v18 = v6 + 8 * v20;
              if (*(_DWORD *)(v18 + 4) != v17) {
                uint64_t v18 = v3[8];
              }
            }
          }
        }
        v16 += 8;
      }
      while (v18 == v5);
      uint64_t v6 = v16 - 8;
    }
  }
  if (v5 != v6)
  {
    unint64_t v56 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *unint64_t v56 = *(void *)v6;
      int v22 = ***(uint64_t ****)(a1 + 8);
      if (v22 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v22 != 0x22D45F5AAD4BF408)
      {
        BOOL v23 = v22 + 5;
        do
        {
          uint64_t v24 = *v23;
          v23 += 5;
        }
        while (v24 != 0x22D45F5AAD4BF408);
        int v22 = v23 - 5;
      }
      int v25 = (uint64_t (***)(void))v22[3];
      unsigned int v26 = (std::__shared_weak_count *)v22[4];
      if (v26)
      {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      unsigned int v27 = (md::LayoutContext *)(**v25)(v25);
      if (!*(unsigned char *)(md::LayoutContext::frameState(v27) + 117)) {
        break;
      }
      uint64_t v28 = v4[4];
      uint64_t v29 = v4[7];
      uint64_t v21 = v4[8];
      uint64_t v30 = v6 + 8;
      while (v30 != v21)
      {
        unint64_t v31 = *(unsigned int *)(v30 + 4);
        uint64_t v32 = v4[8];
        if (v31 >> 7 < (v4[5] - v28) >> 3)
        {
          uint64_t v33 = *(void *)(v28 + 8 * (v31 >> 7));
          uint64_t v32 = v4[8];
          if (v33)
          {
            unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (v31 & 0x7F));
            uint64_t v32 = v4[8];
            if ((v21 - v29) >> 3 > v34)
            {
              uint64_t v32 = v29 + 8 * v34;
              if (*(_DWORD *)(v32 + 4) != v31) {
                uint64_t v32 = v4[8];
              }
            }
          }
        }
        v30 += 8;
        if (v32 != v21)
        {
          uint64_t v21 = v30 - 8;
          break;
        }
      }
      uint64_t v6 = v21;
      if (v5 == v21) {
        goto LABEL_76;
      }
    }
    BOOL v35 = ***(uint64_t ****)(a1 + 8);
    if (v35 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v35 != 0xD369A4D92C8FFE6CLL)
    {
      int v36 = v35 + 5;
      do
      {
        uint64_t v37 = *v36;
        v36 += 5;
      }
      while (v37 != 0xD369A4D92C8FFE6CLL);
      BOOL v35 = v36 - 5;
    }
    uint64_t v38 = v35[3];
    unsigned int v39 = (std::__shared_weak_count *)v35[4];
    if (v39)
    {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 16))(v38);
    uint64_t v41 = [*(id *)(v40 + 104) finalRenderTarget];
    uint64_t v42 = *(void *)(v40 + 32);
    if (!v41) {
LABEL_75:
    }
      operator new();
    uint64_t v43 = *(void *)(v41 + 336);
    if (v43)
    {
      uint64_t v45 = v43 + 36;
      LODWORD(v43) = *(_DWORD *)(v43 + 36);
      LODWORD(v44) = *(_DWORD *)(v45 + 4);
LABEL_74:
      *(_DWORD *)(v42 + 40) = v43;
      *(_DWORD *)(v42 + 44) = v44;
      long long v54 = *(_OWORD *)(v41 + 72);
      *(_OWORD *)(v42 + 48) = *(_OWORD *)(v41 + 56);
      *(_OWORD *)(v42 + 64) = v54;
      goto LABEL_75;
    }
    uint64_t v44 = *(void *)(v41 + 88);
    if (v44)
    {
      BOOL v46 = (_DWORD *)(v41 + 96);
    }
    else
    {
      uint64_t v44 = *(void *)(v41 + 280);
      if (!v44) {
        goto LABEL_63;
      }
      BOOL v46 = (_DWORD *)(v41 + 288);
    }
    uint64_t v47 = 196;
    if (*(_DWORD *)(v44 + 56) != 3) {
      uint64_t v47 = 84;
    }
    unsigned int v48 = *(_DWORD *)(v44 + v47);
    unsigned int v49 = v48 >> *v46;
    if (v49 <= 1) {
      unsigned int v49 = 1;
    }
    if (v48) {
      LODWORD(v44) = v49;
    }
    else {
      LODWORD(v44) = 0;
    }
LABEL_63:
    uint64_t v43 = *(void *)(v41 + 88);
    if (v43)
    {
      int v50 = (_DWORD *)(v41 + 96);
    }
    else
    {
      uint64_t v43 = *(void *)(v41 + 280);
      if (!v43) {
        goto LABEL_74;
      }
      int v50 = (_DWORD *)(v41 + 288);
    }
    uint64_t v51 = 80;
    if (*(_DWORD *)(v43 + 56) == 3) {
      uint64_t v51 = 196;
    }
    unsigned int v52 = *(_DWORD *)(v43 + v51);
    unsigned int v53 = v52 >> *v50;
    if (v53 <= 1) {
      unsigned int v53 = 1;
    }
    if (v52) {
      LODWORD(v43) = v53;
    }
    else {
      LODWORD(v43) = 0;
    }
    goto LABEL_74;
  }
LABEL_76:
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A19CB708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19CB718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *md::GlobeSkyRenderLayer::layout(md::GlobeSkyRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  v272[0] = &unk_1EF574820;
  v272[1] = a2;
  v270[0] = &unk_1EF574868;
  v270[1] = a2;
  uint64_t v271 = v270;
  uint64_t v275 = v274;
  uint64_t v273 = v272;
  v274[0] = &unk_1EF574868;
  v274[1] = a2;
  std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v272);
  if (v271 == v270)
  {
    (*(void (**)(void *))(v270[0] + 32))(v270);
  }
  else if (v271)
  {
    (*(void (**)(void *))(*v271 + 40))(v271);
  }
  if (v273 == v272)
  {
    (*(void (**)(void *))(v272[0] + 32))(v272);
  }
  else if (v273)
  {
    (*(void (**)(void *))(*v273 + 40))(v273);
  }
  BOOL v4 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_148;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x7C7EC6C7C111B0D0;
    if (*(void *)&v5 <= 0x7C7EC6C7C111B0D0uLL) {
      uint64_t v7 = 0x7C7EC6C7C111B0D0uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x7C7EC6C7C111B0D0;
  }
  uint64_t v8 = *v4;
  uint64_t v9 = *(void **)(*v4 + 8 * v7);
  if (!v9) {
    goto LABEL_148;
  }
  unint64_t v10 = (void *)*v9;
  if (!*v9) {
    goto LABEL_148;
  }
  uint64_t v11 = *(void *)&v5 - 1;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x7C7EC6C7C111B0D0)
      {
        if (v10[2] == 0x7C7EC6C7C111B0D0) {
          goto LABEL_30;
        }
      }
      else if ((v12 & v11) != v7)
      {
        goto LABEL_148;
      }
      unint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_148;
      }
    }
  }
  while (1)
  {
    unint64_t v13 = v10[1];
    if (v13 == 0x7C7EC6C7C111B0D0) {
      break;
    }
    if (v13 >= *(void *)&v5) {
      v13 %= *(void *)&v5;
    }
    if (v13 != v7) {
      goto LABEL_148;
    }
LABEL_24:
    unint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_148;
    }
  }
  if (v10[2] != 0x7C7EC6C7C111B0D0) {
    goto LABEL_24;
  }
LABEL_30:
  uint64_t v14 = v10[5];
  if (*(void *)(v14 + 8) != 0x7C7EC6C7C111B0D0) {
    goto LABEL_148;
  }
  unint64_t v15 = *(float **)(v14 + 32);
  if (!v15) {
    goto LABEL_148;
  }
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v16 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v5 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v16 = 0x3070CB6B3C7F21D3uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v16 = v11 & 0x3070CB6B3C7F21D3;
  }
  unint64_t v17 = *(void **)(v8 + 8 * v16);
  if (!v17) {
    goto LABEL_148;
  }
  uint64_t v18 = (void *)*v17;
  if (!v18) {
    goto LABEL_148;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v19 = v18[1];
      if (v19 == 0x3070CB6B3C7F21D3)
      {
        if (v18[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_52;
        }
      }
      else if ((v19 & v11) != v16)
      {
        goto LABEL_148;
      }
      uint64_t v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_148;
      }
    }
  }
  while (2)
  {
    unint64_t v20 = v18[1];
    if (v20 != 0x3070CB6B3C7F21D3)
    {
      if (v20 >= *(void *)&v5) {
        v20 %= *(void *)&v5;
      }
      if (v20 != v16) {
        goto LABEL_148;
      }
      goto LABEL_46;
    }
    if (v18[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_46:
      uint64_t v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_148;
      }
      continue;
    }
    break;
  }
LABEL_52:
  uint64_t v21 = v18[5];
  if (*(void *)(v21 + 8) != 0x3070CB6B3C7F21D3 || !*(void *)(v21 + 32)) {
    goto LABEL_148;
  }
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v22 = 0x1AF456233693CD46;
    if (*(void *)&v5 <= 0x1AF456233693CD46uLL) {
      uint64_t v22 = 0x1AF456233693CD46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v22 = v11 & 0x1AF456233693CD46;
  }
  BOOL v23 = *(void **)(v8 + 8 * v22);
  if (!v23) {
    goto LABEL_76;
  }
  uint64_t v24 = (void *)*v23;
  if (!v24) {
    goto LABEL_76;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v25 = v24[1];
      if (v25 == 0x1AF456233693CD46)
      {
        if (v24[2] == 0x1AF456233693CD46) {
          goto LABEL_74;
        }
      }
      else if ((v25 & v11) != v22)
      {
        goto LABEL_76;
      }
      uint64_t v24 = (void *)*v24;
      if (!v24) {
        goto LABEL_76;
      }
    }
  }
  while (2)
  {
    unint64_t v26 = v24[1];
    if (v26 != 0x1AF456233693CD46)
    {
      if (v26 >= *(void *)&v5) {
        v26 %= *(void *)&v5;
      }
      if (v26 != v22) {
        goto LABEL_76;
      }
      goto LABEL_68;
    }
    if (v24[2] != 0x1AF456233693CD46)
    {
LABEL_68:
      uint64_t v24 = (void *)*v24;
      if (!v24) {
        goto LABEL_76;
      }
      continue;
    }
    break;
  }
LABEL_74:
  uint64_t v27 = v24[5];
  if (*(void *)(v27 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v28 = *(void *)(v27 + 32);
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v28 = 0;
LABEL_77:
  uint64_t v29 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 56), *((unsigned char *)this + 57));
  BOOL v30 = *(float *)(v28 + 3076) < 4.0;
  float v31 = 0.0;
  if (*(float *)(v28 + 3076) < 4.0) {
    float v31 = 1.0;
  }
  float v196 = v31;
  uint64_t v32 = (md::GlobeSkyRenderResources *)*((void *)this + 6);
  if (!*((void *)v32 + 18))
  {
    md::GlobeSkyRenderResources::buildAtmosphereModel(v32);
    uint64_t v33 = operator new(0xE8uLL);
    v33[1] = 0;
    v33[2] = 0;
    *uint64_t v33 = &unk_1EF586300;
    uint64_t v34 = ggl::BufferData::BufferData((uint64_t)(v33 + 3), qword_1E954C988, 2, 1, 6, 1);
    v33[28] = ggl::GlobeAtmosphere::AtmosphereConstants::reflection(void)::reflection;
    v33[3] = &unk_1EF55DBF8;
    uint64_t v35 = *((void *)this + 6);
    int v36 = *(atomic_ullong **)(v35 + 152);
    *(void *)(v35 + 144) = v34;
    *(void *)(v35 + 152) = v33;
    if (v36 && !atomic_fetch_add(v36 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v37 = (std::__shared_weak_count *)v36;
      (*(void (**)(atomic_ullong *))(*v36 + 16))(v36);
      std::__shared_weak_count::__release_weak(v37);
    }
    uint64_t v38 = *((void *)this + 6);
    unsigned int v39 = operator new(0x100uLL);
    v39[1] = 0;
    v39[2] = 0;
    *unsigned int v39 = &unk_1EF584188;
    uint64_t v40 = ggl::GlobeAtmosphere::BasePipelineSetup::BasePipelineSetup(v39 + 3, *(void *)(v38 + 192), *(std::__shared_weak_count **)(v38 + 200));
    uint64_t v41 = *((void *)this + 6);
    uint64_t v42 = *(atomic_ullong **)(v41 + 168);
    *(void *)(v41 + 160) = v40;
    *(void *)(v41 + 168) = v39;
    if (v42 && !atomic_fetch_add(v42 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v43 = (std::__shared_weak_count *)v42;
      (*(void (**)(atomic_ullong *))(*v42 + 16))(v42);
      std::__shared_weak_count::__release_weak(v43);
    }
    ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(void **)(*(void *)(*((void *)this + 6) + 160) + 64), *(void **)(*(void *)(*((void *)this + 6) + 160) + 160), *(void *)(*((void *)this + 6) + 144), *(void *)(*((void *)this + 6) + 152));
    uint64_t v44 = operator new(0xF0uLL);
    v44[1] = 0;
    v44[2] = 0;
    *uint64_t v44 = &unk_1EF583548;
    v44[5] = 0;
    v44[6] = 0;
    *((_DWORD *)v44 + 14) = 0;
    v44[3] = &unk_1EF55A890;
    v44[4] = 0;
    *(void *)((char *)v44 + 60) = 768;
    *((_DWORD *)v44 + 17) = 0;
    v44[9] = 1;
    *((_WORD *)v44 + 40) = 0;
    *((unsigned char *)v44 + 82) = 3;
    *(void *)((char *)v44 + 91) = 0;
    *(void *)((char *)v44 + 83) = 0;
    *((unsigned char *)v44 + 99) = 0;
    *(void *)((char *)v44 + 156) = 0;
    *(void *)((char *)v44 + 148) = 0;
    *((_WORD *)v44 + 106) = 257;
    v44[27] = 0;
    v44[28] = 0;
    *((unsigned char *)v44 + 232) = 0;
    uint64_t v45 = *((void *)this + 6);
    BOOL v46 = *(std::__shared_weak_count **)(v45 + 216);
    *(void *)(v45 + 208) = v44 + 3;
    *(void *)(v45 + 216) = v44;
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    *(unsigned char *)(*(void *)(*((void *)this + 6) + 208) + 58) = 3;
    operator new();
  }
  uint64_t v47 = (void *)*((void *)a2 + 1);
  int8x8_t v48 = (int8x8_t)v47[1];
  if (!*(void *)&v48) {
    goto LABEL_113;
  }
  uint8x8_t v49 = (uint8x8_t)vcnt_s8(v48);
  v49.i16[0] = vaddlv_u8(v49);
  if (v49.u32[0] > 1uLL)
  {
    uint64_t v50 = 0x41E8D6E445F4145;
    if (*(void *)&v48 <= 0x41E8D6E445F4145uLL) {
      uint64_t v50 = 0x41E8D6E445F4145uLL % *(void *)&v48;
    }
  }
  else
  {
    uint64_t v50 = (*(void *)&v48 - 1) & 0x41E8D6E445F4145;
  }
  uint64_t v51 = *(void **)(*v47 + 8 * v50);
  if (!v51) {
    goto LABEL_113;
  }
  unsigned int v52 = (void *)*v51;
  if (!v52) {
    goto LABEL_113;
  }
  if (v49.u32[0] < 2uLL)
  {
    uint64_t v53 = *(void *)&v48 - 1;
    while (1)
    {
      uint64_t v55 = v52[1];
      if (v55 == 0x41E8D6E445F4145)
      {
        if (v52[2] == 0x41E8D6E445F4145) {
          goto LABEL_111;
        }
      }
      else if ((v55 & v53) != v50)
      {
        goto LABEL_113;
      }
      unsigned int v52 = (void *)*v52;
      if (!v52) {
        goto LABEL_113;
      }
    }
  }
  while (2)
  {
    unint64_t v54 = v52[1];
    if (v54 != 0x41E8D6E445F4145)
    {
      if (v54 >= *(void *)&v48) {
        v54 %= *(void *)&v48;
      }
      if (v54 != v50) {
        goto LABEL_113;
      }
      goto LABEL_100;
    }
    if (v52[2] != 0x41E8D6E445F4145)
    {
LABEL_100:
      unsigned int v52 = (void *)*v52;
      if (!v52) {
        goto LABEL_113;
      }
      continue;
    }
    break;
  }
LABEL_111:
  uint64_t v56 = v52[5];
  if (*(void *)(v56 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v57 = *(void *)(v56 + 32);
    goto LABEL_114;
  }
LABEL_113:
  uint64_t v57 = 0;
LABEL_114:
  uint64_t v58 = *(void *)(*((void *)this + 6) + 144);
  std::__shared_count v263 = 0;
  uint64_t v264 = 0;
  v262[0] = 0;
  v262[1] = 0;
  uint64_t v59 = *(void *)(v58 + 8);
  uint64_t v265 = v58;
  uint64_t v266 = 0;
  uint64_t v267 = v59;
  __int16 v268 = 1;
  if (v59) {
    uint64_t v60 = *(void *)(v58 + 72);
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v269 = v60;
  ggl::BufferMemory::operator=(v262, (uint64_t)&v264);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v264);
  double v244 = *(double *)(v28 + 608);
  double v246 = *(double *)(v28 + 600);
  double v240 = *(double *)(v28 + 624);
  double v242 = *(double *)(v28 + 616);
  double v236 = *(double *)(v28 + 640);
  double v238 = *(double *)(v28 + 632);
  double v232 = *(double *)(v28 + 656);
  double v234 = *(double *)(v28 + 648);
  double v228 = *(double *)(v28 + 672);
  double v230 = *(double *)(v28 + 664);
  double v207 = *(double *)(v28 + 3168);
  double v61 = *(double *)(v28 + 528);
  double v62 = *(double *)(v28 + 536);
  double v63 = *(double *)(v28 + 520);
  double v64 = *(double *)(v28 + 544);
  double v65 = v61 * -2.0 * v62;
  double v66 = -((v63 + v63) * v62 - v64 * (v61 * -2.0));
  double v67 = v65 + (v63 + v63) * v64;
  double v68 = -(v61 * -2.0 * v61 + 1.0 - (v63 + v63) * v63);
  double v69 = 1.0 / sqrt(v66 * v66 + v67 * v67 + v68 * v68);
  double v70 = v69 * v66;
  double v71 = v69 * v67;
  double v72 = v69 * v68;
  double v73 = *(double *)(v28 + 496);
  double v74 = *(double *)(v28 + 504);
  double v75 = *(double *)(v28 + 512);
  double v76 = sqrt(v73 * v73 + v74 * v74 + v75 * v75);
  double v77 = -(v73 * (1.0 / v76));
  double v78 = -(v74 * (1.0 / v76));
  double v79 = -(v75 * (1.0 / v76));
  double v80 = v77 * v70 + v78 * v71 + v79 * v72;
  double v226 = *(double *)(v28 + 3256);
  double v224 = *(double *)(v28 + 3264);
  double v222 = *(double *)(v28 + 3272);
  double v208 = *(double *)(v28 + 3192);
  double v209 = *(double *)(v28 + 3160);
  double v205 = *(double *)(v28 + 3184);
  double v206 = *(double *)(v28 + 3176);
  double v203 = *(double *)(v28 + 3248);
  double v204 = *(double *)(v28 + 3200);
  double v201 = *(double *)(v28 + 3232);
  double v202 = *(double *)(v28 + 3240);
  double v199 = *(double *)(v28 + 3224);
  double v200 = *(double *)(v28 + 3280);
  double v197 = *(double *)(v28 + 3208);
  double v198 = *(double *)(v28 + 3216);
  double v256 = *(double *)(v28 + 560);
  double v258 = *(double *)(v28 + 552);
  double v252 = *(double *)(v28 + 576);
  double v254 = *(double *)(v28 + 568);
  double v248 = *(double *)(v28 + 592);
  double v250 = *(double *)(v28 + 584);
  if (v80 >= 0.9999999)
  {
    float v211 = 0.0;
    float v220 = 1.0;
    float v97 = 1.0;
    float v217 = 0.0;
    float v96 = 0.0;
    float v94 = 1.0;
    float v214 = 0.0;
    float v95 = 0.0;
    float v93 = 0.0;
  }
  else
  {
    double v216 = -(v79 * v70 - v77 * v72);
    double v219 = -(v77 * v71 - v78 * v70);
    double v213 = -(v78 * v72 - v79 * v71);
    double v81 = *(double *)(v28 + 3160) * v213 + *(double *)(v28 + 3192) * v216 + *(double *)(v28 + 3224) * v219;
    float v82 = acos(v80);
    __float2 v83 = __sincosf_stret(v82 * 0.5);
    float64x2_t v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v28 + 3168), v213), *(float64x2_t *)(v28 + 3200), v216), *(float64x2_t *)(v28 + 3232), v219);
    float64x2_t v85 = vmulq_f64(v84, v84);
    v85.f64[0] = 1.0 / sqrt(v85.f64[0] + v81 * v81 + v85.f64[1]);
    float64x2_t v86 = vmulq_n_f64(v84, v85.f64[0]);
    *(float *)v85.f64 = v85.f64[0] * v81;
    *(float *)v85.f64 = v83.__sinval * *(float *)v85.f64;
    float32x2_t v87 = vmul_n_f32(vcvt_f32_f64(v86), v83.__sinval);
    *(float32x2_t *)&v86.f64[0] = vadd_f32(v87, v87);
    float32x2_t v88 = vmul_f32(*(float32x2_t *)&v86.f64[0], v87);
    float v220 = 1.0 - vaddv_f32(v88);
    float v89 = *(float *)v85.f64 + *(float *)v85.f64;
    float v90 = (float)(*(float *)v85.f64 + *(float *)v85.f64) * v87.f32[0];
    float v91 = vmuls_lane_f32(v83.__cosval, *(float32x2_t *)&v86.f64[0], 1);
    float v92 = vmuls_lane_f32(*(float *)v85.f64 + *(float *)v85.f64, v87, 1);
    float v217 = (float)(v83.__cosval * *(float *)v86.f64) + v92;
    float v93 = v91 + v90;
    *(float *)v85.f64 = 1.0 - (float)((float)(*(float *)v85.f64 + *(float *)v85.f64) * *(float *)v85.f64);
    float v94 = *(float *)v85.f64 - v88.f32[1];
    v87.f32[0] = vmuls_lane_f32(*(float *)v86.f64, v87, 1);
    float v211 = v87.f32[0] - (float)(v89 * v83.__cosval);
    float v214 = v90 - v91;
    float v95 = v92 - (float)(v83.__cosval * *(float *)v86.f64);
    float v96 = (float)(v89 * v83.__cosval) + v87.f32[0];
    float v97 = *(float *)v85.f64 - v88.f32[0];
  }
  double v98 = tan(*(double *)(v28 + 456) * 0.5);
  int v99 = +[VKDebugSettings sharedSettings];
  [v99 daVinciAtmosphereMaxHeight];
  float v101 = v100;

  double v102 = fmax(v76 + -6356752.31, 100.0);
  float v103 = sqrt((v102 + 12713504.6) * v102) * 0.000000157313035;
  int v104 = v263;
  v263[16] = v220;
  v104[17] = v93;
  v104[18] = v95;
  v104[20] = v214;
  v104[21] = v94;
  v104[22] = v96;
  v104[24] = v217;
  v104[25] = v211;
  v104[26] = v97;
  double v105 = v102 + 6356752.31 + v103 * (6992427.55 * v98);
  float v106 = v258;
  float v107 = v256;
  float v108 = v254;
  float v109 = v252;
  float v110 = v250;
  float v111 = v248;
  float v112 = v246;
  float v113 = v244;
  float v114 = v242;
  float v115 = v240;
  float v116 = v238;
  float v117 = v236;
  float v118 = v234;
  float v119 = v232;
  float v120 = v230;
  float v121 = v228;
  float v122 = v226;
  float v123 = v224;
  float v124 = v222;
  float v227 = v106;
  *int v104 = v106;
  v104[1] = v107;
  float v229 = v107;
  float v231 = v108;
  v104[2] = v108;
  v104[3] = v109;
  float v233 = v109;
  float v235 = v110;
  v104[4] = v110;
  v104[5] = v111;
  float v237 = v111;
  float v239 = v112;
  v104[6] = v112;
  v104[7] = v113;
  float v241 = v113;
  float v243 = v114;
  v104[8] = v114;
  v104[9] = v115;
  float v245 = v115;
  float v247 = v116;
  v104[10] = v116;
  v104[11] = v117;
  float v249 = v117;
  float v251 = v118;
  v104[12] = v118;
  v104[13] = v119;
  float v253 = v119;
  v104[14] = v120;
  v104[15] = v121;
  v104[19] = 0.0;
  v104[23] = 0.0;
  v104[27] = 0.0;
  v104[28] = v122;
  v104[29] = v123;
  float v257 = v123;
  float v259 = v124;
  v104[30] = v124;
  v104[31] = 1.0;
  v104[38] = 6356800.0;
  float v125 = v105;
  v104[36] = v103;
  v104[37] = v125;
  v104[44] = v15[4];
  v104[45] = v15[5];
  v104[46] = v15[6];
  v104[47] = v15[7];
  v104[48] = *v15;
  v104[49] = v15[1];
  v104[50] = v15[2];
  v104[51] = v15[3];
  *((_OWORD *)v104 + 13) = xmmword_1A28FCDD0;
  if (v57)
  {
    int v126 = *(_DWORD *)(v57 + 424);
    int v104 = v263;
  }
  else
  {
    int v126 = 0;
  }
  *((_DWORD *)v104 + 56) = v126;
  double v127 = v101;
  uint64_t v128 = *((void *)this + 6);
  uint64_t v129 = *(ggl::PipelineSetup **)(v128 + 160);
  float v255 = v121;
  float v221 = v120;
  if (v102 >= v127)
  {
    ggl::Flyover::FlyoverPipelineSetup::setState(v129, *(void *)(v128 + 176), *(std::__shared_weak_count **)(v128 + 184));
    uint64_t v136 = +[VKDebugSettings sharedSettings];
    [v136 daVinciAtmosphereColorMidpoint];
    float v137 = (v102 - v127) / v127;
    double v138 = fmin(fmax(v137, 0.0), 1.0);
    float v140 = -(v138 * v139 + -1.0);
    v263[39] = v140;

    float v141 = v138;
    id v135 = v263;
    float v196 = v141;
    v263[40] = v141;
    float v142 = v127 + 6356752.31;
    float v143 = v125 + v138 * (float)(v142 - v125);
    v135[37] = v143;
    BOOL v30 = 1;
  }
  else
  {
    ggl::Flyover::FlyoverPipelineSetup::setState(v129, *(void *)(v128 + 192), *(std::__shared_weak_count **)(v128 + 200));
    float v130 = *(double *)(v28 + 3040);
    v263[41] = fminf(v130, 1.0);
    id v131 = *(id *)a2;
    [v131 sizeInPixels];
    float v133 = v132;
    v263[42] = v133;

    id v135 = v263;
    v263[37] = v125;
    *(void *)(v135 + 39) = 1065353216;
  }
  float v144 = v209;
  float v145 = v207;
  float v146 = v206;
  float v147 = v205;
  float v148 = v208;
  float v149 = v204;
  float v150 = v197;
  float v152 = v199;
  float v153 = v201;
  float v154 = v202;
  float v155 = v203;
  float v156 = v200;
  float v225 = v149;
  float v223 = v150;
  float v218 = v152;
  float v212 = v154;
  float v215 = v153;
  float v210 = v155;
  if (v57)
  {
    float v157 = *(double *)(v57 + 160);
    float v158 = *(double *)(v57 + 168);
    float v159 = *(double *)(v57 + 176);
    float v160 = *(double *)(v57 + 184);
    float v161 = (float)((float)((float)(v157 * v144) + (float)(v158 * v148)) + (float)(v159 * v152)) + (float)(v160 * v122);
    float v162 = (float)((float)((float)(v157 * v145) + (float)(v158 * v149)) + (float)(v159 * v153)) + (float)(v160 * v257);
    float v163 = (float)((float)((float)(v157 * v146) + (float)(v158 * v150)) + (float)(v159 * v154)) + (float)(v160 * v259);
    float v164 = v198;
    float v151 = v198;
    float v165 = (float)((float)((float)(v157 * v147) + (float)(v158 * v151)) + (float)(v159 * v155)) + (float)(v160 * v156);
    float v166 = 1.0
         / sqrtf((float)((float)((float)(v161 * v161) + (float)(v162 * v162)) + (float)(v163 * v163)) + (float)(v165 * v165));
    v135[32] = v166 * v161;
    v135[33] = v166 * v162;
    v135[34] = v166 * v163;
    v135[35] = v166 * v165;
    uint64_t v167 = *(void *)(*((void *)this + 6) + 160);
    uint64_t v168 = *(void *)(v167 + 64);
    uint64_t v169 = *(void *)(v167 + 160);
    uint64_t v170 = *(void *)v57;
    uint64_t v171 = *(void *)(v57 + 8);
  }
  else
  {
    float v164 = v198;
    uint64_t v172 = *(void *)(*((void *)this + 6) + 160);
    md::LightingLogicContext::defaultLightingConstantData(v134);
    uint64_t v168 = *(void *)(v172 + 64);
    uint64_t v169 = *(void *)(v172 + 160);
    uint64_t v170 = md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData;
    uint64_t v171 = qword_1E9590618;
  }
  ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(v168, v169, v170, v171);
  ggl::CommandBuffer::pushRenderItem(v29, *(void *)(*((void *)this + 6) + 224));
  if (v30)
  {
    uint64_t v173 = *((void *)this + 6);
    if (!*(void *)(v173 + 24)
      && md::GlobeSkyRenderResources::loadStarsModel((std::__shared_weak_count **)v173))
    {
      int64_t v174 = operator new(0xE8uLL);
      v174[1] = 0;
      v174[2] = 0;
      void *v174 = &unk_1EF585960;
      uint64_t v175 = ggl::BufferData::BufferData((uint64_t)(v174 + 3), qword_1E955F8F0, 2, 1, 6, 1);
      v174[28] = ggl::GlobeStars::View::reflection(void)::reflection;
      v174[3] = &unk_1EF55D638;
      uint64_t v176 = *((void *)this + 6);
      uint64_t v177 = *(atomic_ullong **)(v176 + 32);
      *(void *)(v176 + 24) = v175;
      *(void *)(v176 + 32) = v174;
      if (v177 && !atomic_fetch_add(v177 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v178 = (std::__shared_weak_count *)v177;
        (*(void (**)(atomic_ullong *))(*v177 + 16))(v177);
        std::__shared_weak_count::__release_weak(v178);
      }
      uint64_t v179 = *((void *)this + 6);
      double v180 = operator new(0x100uLL);
      v180[1] = 0;
      v180[2] = 0;
      *double v180 = &unk_1EF583190;
      double v181 = ggl::GlobeStars::StarsPipelineSetup::StarsPipelineSetup(v180 + 3, *(void *)(v179 + 72), *(std::__shared_weak_count **)(v179 + 80), (uint64_t *)(v179 + 24));
      uint64_t v182 = *((void *)this + 6);
      uint64_t v183 = *(atomic_ullong **)(v182 + 64);
      *(void *)(v182 + 56) = v181;
      *(void *)(v182 + 64) = v180;
      if (v183 && !atomic_fetch_add(v183 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v184 = (std::__shared_weak_count *)v183;
        (*(void (**)(atomic_ullong *))(*v183 + 16))(v183);
        std::__shared_weak_count::__release_weak(v184);
      }
      uint64_t v185 = operator new(0xF0uLL);
      v185[1] = 0;
      v185[2] = 0;
      void *v185 = &unk_1EF583548;
      v185[5] = 0;
      v185[6] = 0;
      *((_DWORD *)v185 + 14) = 0;
      v185[3] = &unk_1EF55A890;
      v185[4] = 0;
      *(void *)((char *)v185 + 60) = 768;
      *((_DWORD *)v185 + 17) = 0;
      v185[9] = 1;
      *((_WORD *)v185 + 40) = 0;
      *((unsigned char *)v185 + 82) = 3;
      *(void *)((char *)v185 + 91) = 0;
      *(void *)((char *)v185 + 83) = 0;
      *((unsigned char *)v185 + 99) = 0;
      *(void *)((char *)v185 + 156) = 0;
      *(void *)((char *)v185 + 148) = 0;
      *((_WORD *)v185 + 106) = 257;
      v185[27] = 0;
      v185[28] = 0;
      *((unsigned char *)v185 + 232) = 0;
      uint64_t v186 = *((void *)this + 6);
      unint64_t v187 = *(std::__shared_weak_count **)(v186 + 96);
      *(void *)(v186 + 88) = v185 + 3;
      *(void *)(v186 + 96) = v185;
      if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
      *(unsigned char *)(*(void *)(*((void *)this + 6) + 88) + 58) = 0;
      operator new();
    }
    uint64_t v188 = *(void *)(*((void *)this + 6) + 104);
    if (v188)
    {
      ggl::CommandBuffer::pushRenderItem(v29, v188);
      uint64_t v189 = **(void **)(*(void *)(*((void *)this + 6) + 56) + 64);
      uint64_t v261 = 0;
      v260[0] = 0;
      v260[1] = 0;
      uint64_t v190 = *(void *)(v189 + 8);
      uint64_t v264 = 0;
      uint64_t v265 = v189;
      uint64_t v266 = 0;
      uint64_t v267 = v190;
      __int16 v268 = 1;
      if (v190) {
        uint64_t v191 = *(void *)(v189 + 72);
      }
      else {
        uint64_t v191 = 0;
      }
      uint64_t v269 = v191;
      ggl::BufferMemory::operator=(v260, (uint64_t)&v264);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v264);
      uint64_t v192 = (float *)v261;
      *(float *)(v261 + 64) = v227;
      v192[17] = v229;
      v192[18] = v231;
      v192[19] = v233;
      v192[20] = v235;
      v192[21] = v237;
      v192[22] = v239;
      v192[23] = v241;
      v192[24] = v243;
      v192[25] = v245;
      v192[26] = v247;
      v192[27] = v249;
      v192[28] = v251;
      v192[29] = v253;
      v192[30] = v221;
      v192[31] = v255;
      float *v192 = v144;
      v192[1] = v145;
      v192[2] = v146;
      v192[3] = v147;
      v192[4] = v148;
      v192[5] = v225;
      v192[6] = v223;
      v192[7] = v164;
      v192[8] = v218;
      v192[9] = v215;
      v192[10] = v212;
      v192[11] = v210;
      v192[12] = v122;
      v192[13] = v257;
      v192[14] = v259;
      v192[15] = v156;
      v192[32] = v196;
      id v193 = *(id *)a2;
      [v193 contentScale];
      *(float *)&double v194 = v194;
      *(_DWORD *)(v261 + 132) = LODWORD(v194);

      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v260);
    }
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v262);
LABEL_148:
  if (!v275)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v275 + 48))(v275);
  uint64_t result = v275;
  if (v275 == v274) {
    return (void *)(*(uint64_t (**)(void *))(v274[0] + 32))(v274);
  }
  if (v275) {
    return (void *)(*(uint64_t (**)(void *))(*v275 + 40))(v275);
  }
  return result;
}

void sub_1A19CCD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a56);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v56 - 184));
  _Unwind_Resume(a1);
}

void sub_1A19CCD90(_Unwind_Exception *exception_object)
{
}

void sub_1A19CCD9C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 160);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)(v2 - 184) + 32))(v2 - 184);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  std::function<void ()(void)>::~function((void *)(v2 - 248));
  std::function<void ()(void)>::~function((void *)(v2 - 216));
  _Unwind_Resume(a1);
}

void sub_1A19CCE1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 160);
  if (v3 == v1 - 184)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 184) + 32))(v1 - 184);
    _Unwind_Resume(exception_object);
  }
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GlobeSkyLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeSkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GlobeSkyLayout", "", v5, 2u);
  }
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCommonDataTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19CDD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void ggl::BufferMemory::~BufferMemory(ggl::BufferMemory *this)
{
  if (*((void *)this + 5))
  {
    unint64_t v3 = *((void *)this + 2);
    unint64_t v2 = *((void *)this + 3);
    if (v2 != v3)
    {
      uint64_t v4 = *(void *)this;
      uint64_t v5 = *((void *)this + 1);
      int v6 = *((unsigned __int8 *)this + 32);
      int v7 = *((unsigned __int8 *)this + 33);
      if (*(void *)this && *(unsigned char *)(v5 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
      }
      if (v6 && !v7)
      {
        unint64_t v9 = *(void *)(v5 + 56);
        unint64_t v8 = *(void *)(v5 + 64);
        if (v8 == v9) {
          unint64_t v9 = *(void *)(v5 + 80) - *(void *)(v5 + 72);
        }
        if (v3 < v9) {
          unint64_t v9 = v3;
        }
        if (v8 <= v2) {
          unint64_t v8 = v2;
        }
        if (v8 == v9) {
          unint64_t v8 = v9 + *(void *)(v5 + 80) - *(void *)(v5 + 72);
        }
        *(void *)(v5 + 56) = v9;
        *(void *)(v5 + 64) = v8;
      }
    }
  }
}

uint64_t *ggl::BufferMemory::operator=(uint64_t *a1, uint64_t a2)
{
  if (a1[5])
  {
    unint64_t v5 = a1[2];
    unint64_t v4 = a1[3];
    if (v4 != v5)
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1];
      int v8 = *((unsigned __int8 *)a1 + 32);
      int v9 = *((unsigned __int8 *)a1 + 33);
      if (*a1 && *(unsigned char *)(v7 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
      }
      if (v8 && !v9)
      {
        unint64_t v11 = *(void *)(v7 + 56);
        unint64_t v10 = *(void *)(v7 + 64);
        if (v10 == v11) {
          unint64_t v11 = *(void *)(v7 + 80) - *(void *)(v7 + 72);
        }
        if (v5 < v11) {
          unint64_t v11 = v5;
        }
        if (v10 <= v4) {
          unint64_t v10 = v4;
        }
        if (v10 == v11) {
          unint64_t v10 = v11 + *(void *)(v7 + 80) - *(void *)(v7 + 72);
        }
        *(void *)(v7 + 56) = v11;
        *(void *)(v7 + 64) = v10;
      }
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  a1[5] = *(void *)(a2 + 40);
  *((_WORD *)a1 + 16) = *(_WORD *)(a2 + 32);
  *(void *)(a2 + 40) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  return a1;
}

uint64_t md::PassList::commandBufferForId(void *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v5 >> 3;
  while (1)
  {
    int v8 = *(unsigned __int8 **)(v3 + 8 * v6);
    if (*v8 == a2)
    {
      unint64_t v9 = *((void *)v8 + 1);
      uint64_t v10 = a1[15];
      if (v9 < (a1[16] - v10) >> 3) {
        break;
      }
    }
    if (++v6 >= v7) {
      return 0;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  if (!v11) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v11 + 24) + 8 * a3);
  }
}

void ecs2::Query<md::ls::RegisterHandle &>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle &>>::~Model()
{
}

void ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 24);
  *(void *)(a2 + 16) = a3;
  *(void *)(a2 + 24) = a4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A19CE72C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *ggl::GlobeAtmosphere::BasePipelineSetup::BasePipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF55BC60;
  return a1;
}

void ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *a1 = a3;
  a1[1] = 0;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = a3;
  a2[1] = a4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void md::GlobeSkyRenderResources::buildAtmosphereModel(md::GlobeSkyRenderResources *this)
{
  unint64_t v2 = operator new(0xA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *unint64_t v2 = &unk_1EF584150;
  uint64_t v3 = v2 + 3;
  {
    {
      ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GlobeAtmosphere::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r;
    unk_1EB32C708 = 1;
  }
  v2[11] = 0;
  uint64_t v4 = (char *)(v2 + 11);
  v2[7] = 0;
  v2[8] = 0;
  *((_DWORD *)v2 + 18) = 0;
  v2[3] = &unk_1EF5606B0;
  v2[4] = "/Atmosphere/Mesh";
  v2[5] = &unk_1EF5606D0;
  v2[6] = 0;
  v2[10] = &ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r;
  v2[12] = 0;
  v2[13] = 0;
  {
    operator new();
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  v2[18] = 0;
  v2[15] = 0;
  v2[16] = 0;
  v2[14] = v5;
  {
    operator new();
  }
  v2[19] = ggl::Allocator::instance(void)::alloc;
  v2[20] = 0;
  v2[17] = v2 + 18;
  v2[3] = &unk_1EF5622E0;
  v2[5] = &unk_1EF562300;
  uint64_t v6 = v2[11];
  unint64_t v7 = *(void *)(v2[10] + 8);
  uint64_t v8 = v2[12];
  unint64_t v9 = (v8 - v6) >> 4;
  unint64_t v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      for (uint64_t i = v6 + 16 * v7; v8 != i; v8 -= 16)
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v2[12] = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)(v2 + 11), v10);
  }
  void *v3 = &unk_1EF55BC20;
  v2[5] = &unk_1EF55BC40;
  {
    operator new();
  }
  uint64_t v13 = ggl::Allocator::instance(void)::alloc;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v14 = &unk_1EF584A48;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = v14 + 32;
  *(void *)(v14 + 32) = &unk_1EF55A1F0;
  *(void *)(v14 + 40) = 16;
  *(_DWORD *)(v14 + 48) = 6;
  long long v16 = 0uLL;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(void *)(v14 + 120) = 0;
  {
    uint64_t v61 = v14;
    long long v16 = 0uLL;
    int v63 = v62;
    uint64_t v14 = v61;
    if (v63) {
      operator new();
    }
  }
  *(void *)(v14 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v14 + 136) = 0;
  *(_OWORD *)(v14 + 200) = v16;
  *(_OWORD *)(v14 + 184) = v16;
  *(_OWORD *)(v14 + 168) = v16;
  *(void *)(v14 + 216) = 0;
  *(void *)(v14 + 224) = -1;
  *(_OWORD *)(v14 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v14 + 144) = 0;
  *(void *)(v14 + 240) = "/Atmosphere/Mesh";
  *(void *)(v14 + 248) = &ggl::GlobeAtmosphere::defaultVboReflection;
  *(void *)(v14 + 32) = &unk_1EF55C648;
  *(void *)(v14 + 232) = &unk_1EF55C668;
  unint64_t v17 = *(uint64_t **)v4;
  uint64_t v18 = *(std::__shared_weak_count **)(*(void *)v4 + 8);
  *unint64_t v17 = v15;
  v17[1] = v14;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = v3;
  *((void *)this + 15) = v2;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = **(void **)(*((void *)this + 14) + 64);
  uint64_t v21 = *(void *)(v20 + 8);
  unint64_t v22 = 201 * v21;
  uint64_t v23 = *(void *)(v20 + 72);
  unint64_t v24 = *(void *)(v20 + 80) - v23;
  if (201 * v21 != v24)
  {
    if (201 * v21 <= v24)
    {
      if (v22 < v24) {
        *(void *)(v20 + 80) = v23 + v22;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v20 + 72, 201 * v21 - v24);
    }
    uint64_t v25 = *(std::__shared_weak_count **)(v20 + 32);
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    *(void *)(v20 + 120) = 0;
    *(_DWORD *)(v20 + 112) = 0;
    uint64_t v26 = *(void *)(v20 + 80) - *(void *)(v20 + 72);
    *(void *)(v20 + 40) = 0;
    *(void *)(v20 + 48) = v26;
    *(void *)(v20 + 56) = 0;
    *(void *)(v20 + 64) = v26;
    uint64_t v20 = **(void **)(*((void *)this + 14) + 64);
    uint64_t v21 = *(void *)(v20 + 8);
    unint64_t v22 = 201 * v21;
  }
  *(void *)&long long v27 = 0;
  *((void *)&v27 + 1) = v20;
  if (v21) {
    uint64_t v28 = *(void *)(v20 + 72);
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = 0;
  long long v64 = v27;
  unint64_t v65 = v22;
  uint64_t v66 = v28;
  BOOL v30 = (float *)(v28 + 8);
  do
  {
    __double2 v31 = __sincos_stret((double)v29 * 0.0314159265);
    float cosval = v31.__cosval;
    float sinval = v31.__sinval;
    *(v30 - 2) = cosval;
    *(v30 - 1) = sinval;
    *BOOL v30 = 0.0;
    v30 += 4;
    ++v29;
  }
  while (v29 != 200);
  *(_DWORD *)(v28 + 3208) = 0;
  *(void *)(v28 + 3200) = 0;
  uint64_t v34 = operator new(0xF8uLL);
  v34[1] = 0;
  v34[2] = 0;
  *uint64_t v34 = &unk_1EF583D28;
  uint64_t v35 = ggl::BufferData::BufferData((uint64_t)(v34 + 3), 2, 1, 0, 6, 600);
  *((_DWORD *)v34 + 60) = 0;
  void v34[3] = &unk_1EF55B630;
  v34[4] = 2;
  v34[28] = &unk_1EF55B650;
  v34[29] = "/Atmosphere/IndexData";
  int v36 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v35;
  *((void *)this + 17) = v34;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v37 = (void *)*((void *)this + 16);
  unint64_t v38 = 600 * v37[1];
  if (v38) {
    uint64_t v39 = v37[9];
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = 0;
  __n128 v41 = (__n128)xmmword_1A28FC8F0;
  __n128 v42 = (__n128)xmmword_1A28FC900;
  __n128 v43 = (__n128)xmmword_1A28FC910;
  __n128 v44 = (__n128)xmmword_1A28FC760;
  __n128 v45 = (__n128)xmmword_1A28FD560;
  uint64x2_t v46 = (uint64x2_t)vdupq_n_s64(0xC7uLL);
  int64x2_t v47 = vdupq_n_s64(8uLL);
  v48.i64[0] = 0x1000100010001;
  v48.i64[1] = 0x1000100010001;
  v49.i64[0] = 0xC600C600C600C6;
  v49.i64[1] = 0xC600C600C600C6;
  *(void *)&long long v50 = 0xC800C800C800C8;
  *((void *)&v50 + 1) = 0xC800C800C800C8;
  v51.i64[0] = 0x8000800080008;
  v51.i64[1] = 0x8000800080008;
  do
  {
    int8x16_t v52 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v46, (uint64x2_t)v44), (int32x4_t)vcgtq_u64(v46, (uint64x2_t)v43)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v46, (uint64x2_t)v42), (int32x4_t)vcgtq_u64(v46, (uint64x2_t)v41))), (int8x16_t)vaddq_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v43), (int16x8_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v41)), v48), (int8x16_t)vaddq_s16((int16x8_t)v45, v49));
    uint64_t v53 = (__int16 *)(v39 + v40);
    __n128 v54 = v45;
    vst3q_s16(v53, *(int16x8x3_t *)&v50);
    __n128 v42 = (__n128)vaddq_s64((int64x2_t)v42, v47);
    __n128 v43 = (__n128)vaddq_s64((int64x2_t)v43, v47);
    __n128 v44 = (__n128)vaddq_s64((int64x2_t)v44, v47);
    __n128 v41 = (__n128)vaddq_s64((int64x2_t)v41, v47);
    __n128 v45 = (__n128)vaddq_s16((int16x8_t)v45, v51);
    v40 += 48;
  }
  while (v40 != 1200);
  uint64_t v55 = *((void *)this + 14);
  uint64_t v56 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v56)
  {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = *(std::__shared_weak_count **)(v55 + 104);
  *(void *)(v55 + 96) = v37;
  *(void *)(v55 + 104) = v56;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128))v57->__on_zero_shared)(v57, v41, v42, v43, v44, v45);
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128))v56->__on_zero_shared)(v56, v41, v42, v43, v44, v45);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v39 && v38)
  {
    unint64_t v58 = v37[8];
    if (v58 <= v38) {
      unint64_t v58 = v38;
    }
    v37[7] = 0;
    v37[8] = v58;
  }
  if (v66 && v65)
  {
    if ((void)v64 && *(unsigned char *)(*((void *)&v64 + 1) + 17) != 2) {
      (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(void *)v64 + 64))(v41, v42, v43, v44, v45);
    }
    uint64_t v60 = *(void *)(*((void *)&v64 + 1) + 56);
    unint64_t v59 = *(void *)(*((void *)&v64 + 1) + 64);
    if (v59 == v60) {
      uint64_t v60 = *(void *)(*((void *)&v64 + 1) + 80) - *(void *)(*((void *)&v64 + 1) + 72);
    }
    if (v60) {
      uint64_t v60 = 0;
    }
    if (v59 <= v65) {
      unint64_t v59 = v65;
    }
    if (v59 == v60) {
      unint64_t v59 = v60 + *(void *)(*((void *)&v64 + 1) + 80) - *(void *)(*((void *)&v64 + 1) + 72);
    }
    *(void *)(*((void *)&v64 + 1) + 56) = v60;
    *(void *)(*((void *)&v64 + 1) + 64) = v59;
  }
}

void sub_1A19CF444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void loadASTCTexture(void *a1, uint64_t a2, unint64_t a3, void *a4, int a5)
{
  if (a3 >= 0x10 && *(_DWORD *)a2 == 1554098963)
  {
    int v7 = (*(unsigned __int8 *)(a2 + 9) << 16) | (*(unsigned __int8 *)(a2 + 8) << 8) | *(unsigned __int8 *)(a2 + 7);
    int v8 = (*(unsigned __int8 *)(a2 + 12) << 16) | (*(unsigned __int8 *)(a2 + 11) << 8) | *(unsigned __int8 *)(a2 + 10);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 5);
    size_t v10 = 16
        * (v7 + *(unsigned __int8 *)(a2 + 4) - 1)
        / *(unsigned __int8 *)(a2 + 4)
        * ((v8 + v9 - 1)
         / v9)
        * ((((*(unsigned __int8 *)(a2 + 15) << 16) | (*(unsigned __int8 *)(a2 + 14) << 8) | *(unsigned __int8 *)(a2 + 13))
          + *(unsigned __int8 *)(a2 + 6)
          - 1)
         / *(unsigned __int8 *)(a2 + 6));
    if (v10 + 16 <= a3)
    {
      switch(*(unsigned char *)(a2 + 4))
      {
        case 4:
          if (a5) {
            int v13 = 44;
          }
          else {
            int v13 = 28;
          }
          if (v9 == 4) {
            goto LABEL_43;
          }
          break;
        case 5:
          if (v9 == 5)
          {
            BOOL v14 = a5 == 0;
            int v15 = 30;
            int v16 = 46;
          }
          else
          {
            if (v9 != 4) {
              break;
            }
            BOOL v14 = a5 == 0;
            int v15 = 29;
            int v16 = 45;
          }
          goto LABEL_40;
        case 6:
          if (v9 == 6)
          {
            BOOL v14 = a5 == 0;
            int v15 = 32;
            int v16 = 48;
          }
          else
          {
            if (v9 != 5) {
              break;
            }
            BOOL v14 = a5 == 0;
            int v15 = 31;
            int v16 = 47;
          }
          goto LABEL_40;
        case 8:
          switch(v9)
          {
            case 8u:
              BOOL v14 = a5 == 0;
              int v15 = 35;
              int v16 = 51;
              break;
            case 6u:
              BOOL v14 = a5 == 0;
              int v15 = 34;
              int v16 = 50;
              break;
            case 5u:
              BOOL v14 = a5 == 0;
              int v15 = 33;
              int v16 = 49;
              break;
            default:
              goto LABEL_4;
          }
          goto LABEL_40;
        case 0xA:
          switch(*(unsigned char *)(a2 + 5))
          {
            case 5:
              BOOL v14 = a5 == 0;
              int v15 = 36;
              int v16 = 52;
              goto LABEL_40;
            case 6:
              BOOL v14 = a5 == 0;
              int v15 = 37;
              int v16 = 53;
              goto LABEL_40;
            case 8:
              BOOL v14 = a5 == 0;
              int v15 = 38;
              int v16 = 54;
              goto LABEL_40;
            case 0xA:
              BOOL v14 = a5 == 0;
              int v15 = 39;
              int v16 = 55;
              goto LABEL_40;
            default:
              goto LABEL_4;
          }
        case 0xC:
          if (v9 == 12)
          {
            BOOL v14 = a5 == 0;
            int v15 = 41;
            int v16 = 57;
          }
          else
          {
            if (v9 != 10) {
              break;
            }
            BOOL v14 = a5 == 0;
            int v15 = 40;
            int v16 = 56;
          }
LABEL_40:
          if (v14) {
            int v13 = v15;
          }
          else {
            int v13 = v16;
          }
LABEL_43:
          unint64_t v17 = operator new(8uLL);
          *unint64_t v17 = v10;
          uint64_t v18 = (std::__shared_weak_count *)operator new(0x60uLL);
          v18->__shared_owners_ = 0;
          v18->__shared_weak_owners_ = 0;
          v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
          uint64_t v19 = (uint64_t)&v18[1];
          LODWORD(v18[1].__shared_owners_) = 1;
          HIDWORD(v18[1].__shared_owners_) = v13;
          LODWORD(v18[1].__shared_weak_owners_) = v7;
          HIDWORD(v18[1].__shared_weak_owners_) = v8;
          v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B298;
          v18[2].__shared_owners_ = 0;
          uint64_t p_shared_owners = (uint64_t)&v18[2].__shared_owners_;
          v18[2].__shared_weak_owners_ = 0;
          v18[3].__vftable = 0;
          {
            uint64_t p_shared_owners = (uint64_t)&v18[2].__shared_owners_;
            if (v28) {
              operator new();
            }
          }
          v18[3].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
          v18[3].__shared_weak_owners_ = 0;
          uint64_t shared_owners = v18[2].__shared_owners_;
          unint64_t v22 = v18[2].__shared_weak_owners_ - shared_owners;
          if (v22)
          {
            if (v22 < 9)
            {
              uint64_t shared_weak_owners = 0;
            }
            else
            {
              uint64_t shared_weak_owners = 0;
              v18[2].__shared_weak_owners_ = shared_owners + 8;
            }
          }
          else
          {
            std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(p_shared_owners, 1uLL);
            uint64_t shared_weak_owners = v18[3].__shared_weak_owners_;
          }
          uint64_t v24 = shared_weak_owners + *v17;
          v18[3].__shared_weak_owners_ = v24;
          if (v24)
          {
            {
              operator new();
            }
            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                       + 16))(ggl::Allocator::instance(void)::alloc, v18[3].__shared_weak_owners_, 8);
            v18[2].__vftable = (std::__shared_weak_count_vtbl *)v25;
          }
          else
          {
            uint64_t v25 = 0;
            v18[2].__vftable = 0;
          }
          *(void *)v18[2].__shared_owners_ = v25;
          uint64_t v29 = v18;
          uint64_t v26 = (void *)((uint64_t (*)(uint64_t, void))v18[1].__on_zero_shared)(v19, 0);
          memcpy(v26, (const void *)(a2 + 16), v10);
          operator delete(v17);
          if (v18 == (std::__shared_weak_count *)-24) {
            goto LABEL_5;
          }
          long long v27 = operator new(0xB0uLL);
          v27[1] = 0;
          v27[2] = 0;
          *long long v27 = &unk_1EF589EF0;
          std::allocator<ggl::Texture2D>::construct[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> const&>((uint64_t)(v27 + 3), v19, v18, a4);
          *a1 = v27 + 3;
          a1[1] = v27;
          uint64_t v11 = v18;
          if (!v18) {
            return;
          }
          goto LABEL_6;
        default:
          break;
      }
    }
  }
LABEL_4:
  uint64_t v29 = 0;
LABEL_5:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = v29;
  if (v29)
  {
LABEL_6:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1A19CF9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A19CFA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void std::allocator<ggl::Texture2D>::construct[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> const&>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, void *a4)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0x100000001;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v5;
  *(void *)(a1 + 72) = 0x100000001;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_1EF562EE0;
  *(void *)(a1 + 40) = &unk_1EF562F00;
  *(void *)(a1 + 48) = "";
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 130) = 1;
  uint64_t v6 = a4[1];
  *(void *)(a1 + 136) = *a4;
  *(void *)(a1 + 144) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 16);
  if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
}

void ggl::IsoAlphaAtlas::IsoAlphaAtlas(ggl::IsoAlphaAtlas *this, unsigned int a2, float a3, float a4, ggl::Device *a5, float a6, float a7)
{
  v10[6] = *MEMORY[0x1E4F143B8];
  *(void *)this = 0x800000080;
  *((float *)this + 2) = a3;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  ggl::AlphaAtlas::generateTexture((ggl::AlphaAtlas *)v10, 0x80u, 0x80u, a3, 0.15, a6, a7);
  int v8 = (char *)operator new(0x58uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)int v8 = &unk_1EF583858;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((_DWORD *)v8 + 14) = 0;
  *((void *)v8 + 3) = &unk_1EF55AE58;
  *((void *)v8 + 4) = 0;
  *(_OWORD *)(v8 + 60) = xmmword_1A28FC780;
  *(void *)(v8 + 76) = 0x100000001;
  *((_DWORD *)v8 + 21) = 0;
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = v8 + 24;
  *((void *)this + 4) = v8;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator new();
}

void ggl::AlphaAtlas::generateTexture(ggl::AlphaAtlas *this, unsigned int a2, unsigned int a3, float a4, float a5, float a6, float a7)
{
  size_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *size_t v10 = &unk_1EF583AF8;
  uint64_t v11 = v10 + 3;
  uint64_t v12 = ggl::TextureData2D::TextureData2D((uint64_t)(v10 + 3), a2, a2, 8u, 2, 0);
  *(void *)this = v10 + 3;
  *((void *)this + 1) = v10;
  int v13 = (void *)(*(uint64_t (**)(void *, void))(v10[3] + 16))(v12, 0);
  memset(v13, 128, v10[11]);
  uint64_t v14 = 0;
  float v15 = 1.0;
  __asm { FMOV            V0.2S, #1.0 }
  float32x2_t v59 = _D0;
  __asm { FMOV            V0.2S, #3.0 }
  float32x2_t v56 = _D0;
  float v53 = 1.0 / a4;
  while (1)
  {
    unint64_t v22 = (unsigned char *)(*(uint64_t (**)(void *, uint64_t))(*v11 + 16))(v11, v14);
    uint64_t v25 = a2 >> v14;
    unsigned int v26 = a3 >> v14;
    if (a3 >> v14 >= v25) {
      unsigned int v27 = a2 >> v14;
    }
    else {
      unsigned int v27 = a3 >> v14;
    }
    *(float *)v23.i32 = a5;
    if (v27 > 2) {
      *(float *)v23.i32 = v15;
    }
    float v28 = 0.5;
    if (v26 && v25)
    {
      float v29 = (float)v25;
      float v30 = fminf(fmaxf((float)((float)v27 - *(float *)v23.i32) + -0.5, 0.0), (float)v25 * v53);
      float v31 = 1.0 / (float)v25;
      float v57 = 1.0 / (float)v26;
      float v58 = (float)v26;
      *(float *)v24.i32 = -*(float *)v23.i32;
      float32x2_t v32 = (float32x2_t)vdup_lane_s32(v24, 0);
      int v33 = 0;
      unsigned int v34 = 0;
      if (*(float *)v23.i32 == 0.0)
      {
        do
        {
          uint64_t v35 = 0;
          float v36 = (float)((float)((float)v34 + v28) * v57) * v58;
          do
          {
            float v37 = hypotf((float)((float)((float)v35 + v28) * v31) * v29, v36);
            float v28 = 0.5;
            v38.f32[0] = v37 + v30;
            v38.f32[1] = v37 - v30;
            float32x2_t v39 = (float32x2_t)vand_s8((int8x8_t)vcge_f32(v38, v32), (int8x8_t)v59);
            float32x2_t v40 = vmul_f32(vmul_f32(v39, v39), vmla_f32(v56, (float32x2_t)0xC0000000C0000000, v39));
            float v41 = fmaxf(vsub_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).f32[0], 0.0);
            if (v41 <= 1.0) {
              float v42 = v41 * 255.0;
            }
            else {
              float v42 = 255.0;
            }
            v22[(v33 + v35++)] = llroundf(v42);
          }
          while (v25 != v35);
          ++v34;
          v33 += v25;
        }
        while (v34 != v26);
      }
      else
      {
        float32x2_t v43 = (float32x2_t)vdup_lane_s32(v23, 0);
        float32x2_t v44 = vdiv_f32(v59, v43);
        do
        {
          uint64_t v45 = 0;
          float v46 = (float)((float)((float)v34 + v28) * v57) * v58;
          do
          {
            float v47 = hypotf((float)((float)((float)v45 + v28) * v31) * v29, v46);
            float v28 = 0.5;
            v48.f32[0] = v47 + v30;
            v48.f32[1] = v47 - v30;
            float32x2_t v49 = vmul_f32(vadd_f32(vminnm_f32(vmaxnm_f32(v32, v48), v43), v43), vmul_f32((float32x2_t)0x3F0000003F000000, v44));
            float32x2_t v50 = vmul_f32(vmul_f32(v49, v49), vmla_f32(v56, (float32x2_t)0xC0000000C0000000, v49));
            float v51 = fmaxf(vsub_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).f32[0], 0.0);
            if (v51 <= 1.0) {
              float v52 = v51 * 255.0;
            }
            else {
              float v52 = 255.0;
            }
            v22[(v33 + v45++)] = llroundf(v52);
          }
          while (v25 != v45);
          ++v34;
          v33 += v25;
        }
        while (v34 != v26);
      }
    }
    if (v14 == 7) {
      break;
    }
    uint64_t v14 = (v14 + 1);
    float v15 = 1.0;
  }
  *unint64_t v22 = 25;
}

void md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates(md::realistic::RoadRenderLayer::RoadModelPipelineStates *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    int v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7) {
      return;
    }
  }
  else
  {
    int v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7) {
      return;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::TextureData2D>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ggl::TextureData2D::~TextureData2D(ggl::TextureData2D *this)
{
  *(void *)this = &unk_1EF55B298;
  unint64_t v2 = &qword_1EB32C000;
  {
    unint64_t v2 = &qword_1EB32C000;
    if (v4) {
      operator new();
    }
  }
  (*(void (**)(uint64_t, void, void))(*(void *)v2[287] + 40))(v2[287], *((void *)this + 3), 0);
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v3, *((void *)this + 6) - v3);
  }
}

{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF55B298;
  unint64_t v2 = &qword_1EB32C000;
  {
    unint64_t v2 = &qword_1EB32C000;
    if (v4) {
      operator new();
    }
  }
  (*(void (**)(uint64_t, void, void))(*(void *)v2[287] + 40))(v2[287], *((void *)this + 3), 0);
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v3, *((void *)this + 6) - v3);
  }
  JUMPOUT(0x1A6239270);
}

void altitude::util::createAtmosphereLookupTexture(altitude::util *this, altitude::Context *a2)
{
  unint64_t v2 = (char *)operator new(0x58uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_1EF583858;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((_DWORD *)v2 + 14) = 0;
  *((void *)v2 + 3) = &unk_1EF55AE58;
  *((void *)v2 + 4) = 0;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  *(_OWORD *)(v2 + 60) = v3;
  *(void *)(v2 + 76) = 0x100000001;
  *((_DWORD *)v2 + 21) = 0;
  int v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EF583AF8;
  ggl::TextureData2D::TextureData2D((uint64_t)(v4 + 3), 1024, 1, 1u, 2, 0);
  operator new();
}

void sub_1A19D0A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void md::PointLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  int v8 = [VKImage alloc];
  grl::IconImage::image(*(grl::IconImage **)(a1 + 152), &v20);
  CFTypeRef v9 = cf;
  double v10 = *(float *)(*(void *)(a1 + 32) + 56);
  uint64_t v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v18 = *a4;
  uint64_t v19 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = [(VKImage *)v8 initWithCGImage:v9 scale:&v18 resourceStore:v10];
  unint64_t v22 = &unk_1EF559EB8;
  int32x2_t v23 = v12;
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = &unk_1EF559118;
  if (cf) {
    CFRelease(cf);
  }
  float v13 = *(float *)grl::IconMetrics::anchor((grl::IconMetrics *)(*(void *)(a1 + 152) + 24));
  uint64_t v14 = grl::IconMetrics::anchor((grl::IconMetrics *)(*(void *)(a1 + 152) + 24));
  -[VKImage setAnchorPoint:](v23, "setAnchorPoint:", v13, *(float *)(v14 + 4), v18);
  float v15 = v23;
  float v16 = *(float *)grl::IconMetrics::labelingPoint((grl::IconMetrics *)(*(void *)(a1 + 152) + 24));
  -[VKImage setLabelingPoint:](v15, "setLabelingPoint:", v16, *(float *)(grl::IconMetrics::labelingPoint((grl::IconMetrics *)(*(void *)(a1 + 152) + 24)) + 4));

  if (*(unsigned char *)(a1 + 168))
  {
    unint64_t v17 = (float *)grl::IconMetrics::collisionRect((grl::IconMetrics *)(*(void *)(a1 + 152) + 24));
    -[VKImage setCollisionRect:](v23, "setCollisionRect:", *v17, v17[1], (float)(v17[2] - *v17), (float)(v17[3] - v17[1]));
  }
  md::LabelIcon::setImage(a1, (uint64_t)&v22, a2, a3);
  unint64_t v22 = &unk_1EF559EB8;
}

void sub_1A19D0C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t grl::IconMetrics::anchor(grl::IconMetrics *this)
{
  return (uint64_t)this + 56;
}

uint64_t grl::IconMetrics::labelingPoint(grl::IconMetrics *this)
{
  return (uint64_t)this + 64;
}

void md::LabelIcon::setImage(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 144));
  if ((v8 & 1) == 0)
  {
    [*(id *)(a2 + 8) size];
    double v10 = v9;
    double v12 = v11;
    [*(id *)(a2 + 8) anchorPoint];
    double v14 = v13;
    double v16 = v15;
    [*(id *)(a2 + 8) labelingPoint];
    *(float *)&double v17 = v17;
    *(float *)&double v18 = v18;
    *(_DWORD *)(a1 + 88) = LODWORD(v17);
    *(_DWORD *)(a1 + 92) = LODWORD(v18);
    *(float *)&double v17 = v14;
    *(float *)&double v18 = v16;
    *(_DWORD *)(a1 + 80) = LODWORD(v17);
    *(_DWORD *)(a1 + 84) = LODWORD(v18);
    float v19 = v10;
    float v20 = v12;
    *(float *)(a1 + 48) = -*(float *)&v17;
    *(float *)(a1 + 52) = -*(float *)&v18;
    *(float *)(a1 + 56) = v19 - *(float *)&v17;
    *(float *)(a1 + 60) = v20 - *(float *)&v18;
    [*(id *)(a2 + 8) collisionRect];
    v21.i64[0] = *(void *)(a1 + 80);
    v23.f64[1] = v22;
    float32x2_t v24 = vcvt_f32_f64(v23);
    v26.f64[1] = v25;
    float32x2_t v27 = vsub_f32(vcvt_f32_f64(v26), *(float32x2_t *)v21.f32);
    float32x2_t v28 = vadd_f32(v27, v24);
    *(float32x2_t *)&long long v29 = v27;
    *((float32x2_t *)&v29 + 1) = v28;
    *(_OWORD *)(a1 + 64) = v29;
    float v30 = *(float *)(a1 + 136);
    if (v30 != 1.0)
    {
      v21.i64[1] = *(void *)(a1 + 88);
      *(float32x4_t *)(a1 + 80) = vmulq_n_f32(v21, v30);
      v31.i32[0] = *(_DWORD *)(a1 + 56);
      v21.i32[0] = *(_DWORD *)(a1 + 48);
      if (v31.f32[0] >= v21.f32[0] && *(float *)(a1 + 60) >= *(float *)(a1 + 52))
      {
        v31.i32[1] = *(_DWORD *)(a1 + 60);
        v21.i32[1] = *(_DWORD *)(a1 + 52);
        float32x2_t v32 = vsub_f32(v31, *(float32x2_t *)v21.f32);
        float32x2_t v33 = vmla_f32(*(float32x2_t *)v21.f32, (float32x2_t)0x3F0000003F000000, v32);
        float32x2_t v34 = vmaxnm_f32(v32, 0);
        float32x2_t v35 = vsub_f32(v33, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v34), v30 * 0.5)));
        *(float32x2_t *)(a1 + 48) = v35;
        *(float32x2_t *)(a1 + 56) = vmla_n_f32(v35, v34, v30);
      }
      int32x2_t v36 = vcgt_f32(v27, v28);
      if (((v36.i32[0] | v36.i32[1]) & 1) == 0)
      {
        float32x2_t v37 = vmla_f32(v27, (float32x2_t)0x3F0000003F000000, v24);
        float32x2_t v38 = vmaxnm_f32(v24, 0);
        float32x2_t v39 = vsub_f32(v37, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v38), v30 * 0.5)));
        *(float32x2_t *)(a1 + 64) = v39;
        *(float32x2_t *)(a1 + 72) = vmla_n_f32(v39, v38, v30);
      }
    }
  }
  [*(id *)(a2 + 8) prepareTextureWithAtlas:a4];
  *(unsigned char *)(a1 + 141) = 1;
  id v40 = *(id *)(a2 + 8);
  float v41 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v40;

  if (!a3)
  {
    if (*(void *)(a1 + 16))
    {
      atomic_store(1u, (unsigned __int8 *)(a1 + 143));
      atomic_store(1u, (unsigned __int8 *)(a1 + 144));
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 142));
  }
}

void sub_1A19D0F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1A19D151C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A19D15F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1A19D1664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A19D1760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *ggl::CommandBuffer::pushLoadItem(ggl::CommandBuffer *this, const ggl::Texture2DLoadItem *a2)
{
  unint64_t v3 = *((void *)this + 26);
  if (v3 < *((void *)this + 27))
  {
    if (v3)
    {
      *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
      *(unsigned char *)(v3 + 16) = 0;
      if (*((unsigned char *)a2 + 16))
      {
        *(unsigned char *)(v3 + 17) = *((unsigned char *)a2 + 17);
        *(unsigned char *)(v3 + 16) = 1;
      }
      *(unsigned char *)(v3 + 20) = 0;
      if (*((unsigned char *)a2 + 20))
      {
        *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 6);
        *(unsigned char *)(v3 + 20) = 1;
      }
      *(_OWORD *)(v3 + 28) = *(_OWORD *)((char *)a2 + 28);
      uint64_t v4 = (const ggl::Texture2DLoadItem *)*((void *)a2 + 9);
      if (v4)
      {
        if (v4 == (const ggl::Texture2DLoadItem *)((char *)a2 + 48))
        {
          *(void *)(v3 + 72) = v3 + 48;
          (*(void (**)(void, unint64_t))(**((void **)a2 + 9) + 24))(*((void *)a2 + 9), v3 + 48);
          goto LABEL_13;
        }
        uint64_t v4 = (const ggl::Texture2DLoadItem *)(*(uint64_t (**)(const ggl::Texture2DLoadItem *))(*(void *)v4 + 16))(v4);
      }
      *(void *)(v3 + 72) = v4;
    }
LABEL_13:
    uint64_t result = (_OWORD *)(v3 + 80);
    *((void *)this + 26) = v3 + 80;
    goto LABEL_14;
  }
  uint64_t result = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__push_back_slow_path<ggl::Texture2DLoadItem const&>((void *)this + 25, (uint64_t)a2);
LABEL_14:
  *((void *)this + 26) = result;
  return result;
}

void sub_1A19D18B8(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 20))
  {
    *(unsigned char *)(v2 + 20) = 0;
    if (!*(unsigned char *)(v2 + 16))
    {
LABEL_3:
      *(void *)(v1 + 208) = v2;
      _Unwind_Resume(a1);
    }
  }
  else if (!*(unsigned char *)(v2 + 16))
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v2 + 16) = 0;
  *(void *)(v1 + 208) = v2;
  _Unwind_Resume(a1);
}

_OWORD *std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__push_back_slow_path<ggl::Texture2DLoadItem const&>(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    abort();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999) {
    uint64_t v6 = 0x333333333333333;
  }
  else {
    uint64_t v6 = v3;
  }
  float32x2_t v33 = a1 + 3;
  if (v6) {
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 80 * v6, 8);
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned __int8 v8 = (_OWORD *)(v7 + 80 * v2);
  *((void *)&v32 + 1) = v7 + 80 * v6;
  if (!v7) {
    goto LABEL_19;
  }
  *unsigned __int8 v8 = *(_OWORD *)a2;
  unint64_t v9 = v7 + 80 * v2;
  *(unsigned char *)(v9 + 16) = 0;
  double v10 = (unsigned char *)(v9 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(v7 + 80 * v2 + 17) = *(unsigned char *)(a2 + 17);
    *double v10 = 1;
  }
  unint64_t v11 = v7 + 80 * v2;
  *(unsigned char *)(v11 + 20) = 0;
  double v12 = (unsigned char *)(v11 + 20);
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(v7 + 80 * v2 + 24) = *(_DWORD *)(a2 + 24);
    *double v12 = 1;
  }
  unint64_t v13 = v7 + 80 * v2;
  *(_OWORD *)(v13 + 28) = *(_OWORD *)(a2 + 28);
  uint64_t v14 = *(void *)(a2 + 72);
  if (!v14)
  {
LABEL_18:
    *(void *)(v7 + 80 * v2 + 72) = v14;
LABEL_19:
    double v15 = (_OWORD *)(v7 + 80 * v2);
    goto LABEL_20;
  }
  if (v14 != a2 + 48)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    goto LABEL_18;
  }
  *(void *)(v7 + 80 * v2 + 72) = v13 + 48;
  (*(void (**)(void))(**(void **)(a2 + 72) + 24))(*(void *)(a2 + 72));
  unsigned __int8 v8 = (_OWORD *)(v7 + 80 * v2);
  double v15 = v8;
LABEL_20:
  double v16 = v15 + 5;
  *(void *)&long long v32 = v15 + 5;
  double v18 = (void *)*a1;
  double v17 = (void *)a1[1];
  if (v17 == (void *)*a1)
  {
    *a1 = v8;
    a1[1] = v16;
    uint64_t v26 = a1[2];
    a1[2] = *((void *)&v32 + 1);
  }
  else
  {
    unint64_t v19 = 0;
    do
    {
      float v20 = &v8[v19 / 0x10];
      float32x4_t v21 = &v17[v19 / 8];
      *(v20 - 5) = *(_OWORD *)&v17[v19 / 8 - 10];
      *((unsigned char *)v20 - 64) = 0;
      if (LOBYTE(v17[v19 / 8 - 8]))
      {
        *((unsigned char *)v20 - 63) = *((unsigned char *)v21 - 63);
        *((unsigned char *)v20 - 64) = 1;
      }
      *((unsigned char *)v20 - 60) = 0;
      if (*((unsigned char *)v21 - 60))
      {
        *((_DWORD *)&v8[v19 / 0x10 - 3] - 2) = v17[v19 / 8 - 7];
        *((unsigned char *)v20 - 60) = 1;
      }
      float64_t v22 = &v8[v19 / 0x10];
      float64x2_t v23 = &v17[v19 / 8];
      *(_OWORD *)((char *)&v8[v19 / 0x10 - 3] - 4) = *(_OWORD *)((char *)&v17[v19 / 8 - 6] - 4);
      float32x2_t v24 = (void *)v17[v19 / 8 - 1];
      if (v24)
      {
        if (v23 - 4 == v24)
        {
          *((void *)v22 - 1) = v22 - 2;
          (*(void (**)(void))(*(void *)*(v23 - 1) + 24))(*(v23 - 1));
        }
        else
        {
          *((void *)v22 - 1) = v24;
          *(v23 - 1) = 0;
        }
      }
      else
      {
        *((void *)v22 - 1) = 0;
      }
      v19 -= 80;
    }
    while (&v17[v19 / 8] != v18);
    double v17 = (void *)*a1;
    float64_t v25 = (void *)a1[1];
    *a1 = &v8[v19 / 0x10];
    uint64_t v26 = a1[2];
    *(_OWORD *)(a1 + 1) = v32;
    double v16 = (_OWORD *)v32;
    if (v25 != v17)
    {
      float32x2_t v27 = v25 - 4;
      float32x2_t v28 = v25 - 4;
      do
      {
        float v30 = (void *)v28[3];
        if (v28 == v30)
        {
          (*(void (**)(void *))(*v28 + 32))(v28);
          if (!*((unsigned char *)v28 - 28)) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v30) {
            (*(void (**)(void *))(*v30 + 40))(v30);
          }
          if (!*((unsigned char *)v28 - 28)) {
            goto LABEL_40;
          }
        }
        *((unsigned char *)v28 - 28) = 0;
LABEL_40:
        if (*((unsigned char *)v28 - 32)) {
          *((unsigned char *)v28 - 32) = 0;
        }
        long long v29 = v28 - 6;
        v28 -= 10;
        v27 -= 10;
      }
      while (v29 != v17);
    }
  }
  if (v17) {
    (*(void (**)(void, void *, uint64_t))(*(void *)*v33 + 40))(*v33, v17, v26 - (void)v17);
  }
  return v16;
}

void sub_1A19D1CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v3) {
    unsigned char *v3 = 0;
  }
  if (*v2) {
    *unint64_t v2 = 0;
  }
  std::__split_buffer<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderer *this, uint32x2_t *a2, unsigned int a3)
{
  a2[17].i32[0] = a3;
  unsigned int v3 = (a2[6].i32[1] + 1) % 3u;
  a2[6].i32[1] = v3;
  if (a3 >= 0x100) {
    unsigned int v4 = 256;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a3 >= 0xF0) {
    unsigned int v5 = 240;
  }
  else {
    unsigned int v5 = a3;
  }
  unsigned int v6 = (a3 - 1) / v5;
  uint64_t v7 = &a2[2 * v3];
  unsigned int v9 = v7[7].u32[0];
  unsigned __int8 v8 = (char *)&v7[7];
  if (v9 >= v4 && *((_DWORD *)v8 + 1) > v6 && *(void *)v8 == *a2) {
    operator new();
  }
  *(uint32x2_t *)unsigned __int8 v8 = vmax_u32(vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)__PAIR64__(v6 + 1, v4), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL)), *a2);
  operator new();
}

void sub_1A19D2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  ggl::Texture2DLoadItem::~Texture2DLoadItem((ggl::Texture2DLoadItem *)va1);
  std::function<void ()(ggl::Texture2DLoadItem const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56F7B0;
}

uint64_t ggl::TextureData2DNoCopy::TextureData2DNoCopy(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_1EF55F580;
  *(void *)(a1 + 32) = 0;
  uint64_t v10 = a1 + 32;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  {
    uint64_t v15 = v10;
    uint64_t v10 = v15;
    if (v16) {
      operator new();
    }
  }
  *(void *)(a1 + 56) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 64) = 0;
  unint64_t v11 = *(void **)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40) - (void)v11;
  if (v12)
  {
    uint64_t v13 = 0;
    if (v12 >= 9) {
      *(void *)(a1 + 40) = v11 + 1;
    }
  }
  else
  {
    std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(v10, 1uLL);
    uint64_t v13 = *(void *)(a1 + 64);
    unint64_t v11 = *(void **)(a1 + 32);
  }
  *(void *)(a1 + 64) = ggl::pixelFormatPixelsSize(a4, a2, a3) + v13;
  *(void *)(a1 + 24) = a5;
  *unint64_t v11 = a5 + v13;
  return a1;
}

void *ggl::TextureData2D::TextureData2D(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6)
{
  LODWORD(v9) = a3;
  LODWORD(v10) = a2;
  unint64_t v11 = (void *)a1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)a1 = &unk_1EF55B298;
  *(void *)(a1 + 32) = 0;
  uint64_t v12 = a1 + 32;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  {
    if (a1) {
      operator new();
    }
  }
  v11[7] = ggl::Allocator::instance(void)::alloc;
  v11[8] = 0;
  uint64_t v13 = a4;
  uint64_t v14 = v11[4];
  unint64_t v15 = (v11[5] - v14) >> 3;
  if (a4 <= v15)
  {
    uint64_t v16 = 0;
    if (a4 < v15) {
      void v11[5] = v14 + 8 * a4;
    }
  }
  else
  {
    a1 = std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(v12, a4 - v15);
    uint64_t v16 = v11[8];
  }
  size_t v17 = 8 * a4;
  MEMORY[0x1F4188790](a1);
  bzero(&v23[-((v17 + 15) & 0xFFFFFFFF0)], v17);
  if (a4)
  {
    int v24 = a6;
    unint64_t v9 = v9;
    double v18 = &v23[-((v17 + 15) & 0xFFFFFFFF0)];
    unint64_t v10 = v10;
    do
    {
      *v18++ = v16;
      v16 += ggl::pixelFormatPixelsSize(a5, v10, v9);
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      else {
        v10 >>= 1;
      }
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      else {
        v9 >>= 1;
      }
      --v13;
    }
    while (v13);
    v11[8] = v16;
    a6 = v24;
  }
  if (!v16)
  {
    void v11[3] = 0;
    if (!a4) {
      return v11;
    }
    goto LABEL_24;
  }
  {
    operator new();
  }
  uint64_t v19 = *(void *)ggl::Allocator::instance(void)::alloc;
  if (a6) {
    uint64_t v20 = (*(uint64_t (**)(void))(v19 + 24))();
  }
  else {
    uint64_t v20 = (*(uint64_t (**)(void))(v19 + 16))();
  }
  void v11[3] = v20;
  if (a4)
  {
LABEL_24:
    uint64_t v21 = 0;
    do
    {
      *(void *)(v11[4] + v21) = v11[3] + *(void *)&v23[v21 - ((v17 + 15) & 0xFFFFFFFF0)];
      v21 += 8;
    }
    while (v17 != v21);
  }
  return v11;
}

uint64_t std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(void **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 3)
  {
    if (a2)
    {
      uint64_t v11 = 8 * a2;
      uint64_t v12 = &v4[a2];
      do
      {
        if (v4) {
          void *v4 = 0;
        }
        ++v4;
        v11 -= 8;
      }
      while (v11);
      unsigned int v4 = v12;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *(void *)result;
    uint64_t v7 = v6 >> 3;
    unint64_t v8 = (v6 >> 3) + a2;
    if (v8 >> 61) {
      abort();
    }
    uint64_t v9 = v5 - *(void *)result;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v10, 8);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v13 = (void *)(result + 8 * v7);
    uint64_t v14 = 8 * a2;
    unint64_t v15 = &v13[a2];
    uint64_t v16 = v13;
    do
    {
      if (v16) {
        *uint64_t v16 = 0;
      }
      ++v16;
      v14 -= 8;
    }
    while (v14);
    uint64_t v17 = result + 8 * v10;
    uint64_t v19 = *(void *)v3;
    uint64_t v18 = *(void *)(v3 + 8);
    if (v18 != *(void *)v3)
    {
      unint64_t v20 = v18 - *(void *)v3 - 8;
      if (v20 < 0x58) {
        goto LABEL_38;
      }
      if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
        goto LABEL_38;
      }
      uint64_t v21 = (v20 >> 3) + 1;
      float64_t v22 = (_OWORD *)(result + 8 * v7 - 16);
      float64x2_t v23 = (long long *)(v18 - 16);
      uint64_t result = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *float64_t v22 = v24;
        v22 -= 2;
        v23 -= 2;
        result -= 4;
      }
      while (result);
      v13 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      v18 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          uint64_t v25 = *(void *)(v18 - 8);
          v18 -= 8;
          *--uint64_t v13 = v25;
        }
        while (v18 != v19);
      }
      uint64_t v18 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    *(void *)(v3 + 16) = v17;
    if (v18)
    {
      uint64_t v26 = *(uint64_t (**)(void))(**(void **)(v3 + 24) + 40);
      return v26();
    }
  }
  return result;
}

void *geo::MallocZoneAllocator::callocate(geo::MallocZoneAllocator *this, size_t a2, size_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  }
  uint64_t v9 = malloc_type_zone_calloc(*((malloc_zone_t **)this + 6), a2, a3, 0x2C8B3229uLL);
  atomic_fetch_add((atomic_ullong *volatile)this + 5, 1uLL);
  uint64_t v10 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if (v10) {
    geo::read_write_lock::logFailure(v10, (uint64_t)"unlock", v11);
  }
  return v9;
}

{
  pthread_rwlock_t *v6;
  void *v7;

  uint64_t v6 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)((char *)this + 56));
  uint64_t v7 = malloc_type_zone_calloc(*((malloc_zone_t **)this + 6), a2, a3, 0x2C8B3229uLL);
  atomic_fetch_add((atomic_ullong *volatile)this + 5, 1uLL);
  geo::read_write_lock::unlock(v6);
  return v7;
}

void sub_1A19D2D28(_Unwind_Exception *a1)
{
  geo::read_write_lock::unlock(v1);
  _Unwind_Resume(a1);
}

void md::RouteRenderLayer::setActive(md::RouteRenderLayer *this, char a2)
{
  id v4 = +[VKDebugSettings sharedSettings];
  *((unsigned char *)this + 32) = a2 & ~[v4 disableRoute];
}

void sub_1A19D2DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  int v104 = v7;
  double v105 = v3;
  float v106 = (void *)v4;
  float v107 = (void *)v5;
  unint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  float v108 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        unint64_t v8 = v11;
        float v108 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    float v103 = result;
    while (1)
    {
      *uint64_t result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        long long v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        long long v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        float32x2_t v34 = 0;
      }
      else {
        float32x2_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      int32x2_t v36 = *(void **)v35;
      float32x2_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        float32x2_t v38 = 0;
      }
      else
      {
        float32x2_t v38 = (void *)v36[3];
        float32x2_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        float v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        float v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          double v67 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        float v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      float32x2_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        double v67 = 0;
      }
      else
      {
        uint64_t v66 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v66[3];
        double v67 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      uint64_t v55 = md::VKMRenderResourcesStore::getConstantData<ggl::Tile::LinearDepth>((uint64_t)v38, *v24);
      if (v55)
      {
        uint64_t v56 = v55;
        {
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::indeCGFloat x = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
        }
        unint64_t v57 = v47[1];
        if (v57)
        {
          unint64_t v58 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index;
          uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            uint64_t v60 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index >= v57) {
              uint64_t v60 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index % v57;
            }
          }
          else
          {
            uint64_t v60 = (v57 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index;
          }
          uint64_t v61 = *(void **)(*v47 + 8 * v60);
          if (v61)
          {
            int v62 = (void *)*v61;
            if (v62)
            {
              if (v59.u32[0] < 2uLL)
              {
                unint64_t v63 = v57 - 1;
                while (1)
                {
                  uint64_t v65 = v62[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index == v65)
                  {
                    if (v62[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index) {
                      goto LABEL_88;
                    }
                  }
                  else if ((v65 & v63) != v60)
                  {
                    goto LABEL_113;
                  }
                  int v62 = (void *)*v62;
                  if (!v62) {
                    goto LABEL_113;
                  }
                }
              }
              do
              {
                unint64_t v64 = v62[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index == v64)
                {
                  if (v62[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index)
                  {
LABEL_88:
                    {
                      if (v101)
                      {
                        md::typeToIntMap(v101);
                        uint64_t v10 = a1;
                      }
                    }
                    if (!qword_1E957F030) {
                      goto LABEL_149;
                    }
                    uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                    v68.i16[0] = vaddlv_u8(v68);
                    if (v68.u32[0] > 1uLL)
                    {
                      unint64_t v69 = v58;
                      if (v58 >= qword_1E957F030) {
                        unint64_t v69 = v58 % qword_1E957F030;
                      }
                    }
                    else
                    {
                      unint64_t v69 = (qword_1E957F030 - 1) & v58;
                    }
                    double v70 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v69);
                    if (!v70 || (double v71 = *v70) == 0) {
LABEL_149:
                    }
                      abort();
                    if (v68.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        double v73 = v71[1];
                        if ((uint64_t *)v58 == v73)
                        {
                          if (v71[2] == (uint64_t *)v58) {
                            goto LABEL_109;
                          }
                        }
                        else if (((unint64_t)v73 & (qword_1E957F030 - 1)) != v69)
                        {
                          goto LABEL_149;
                        }
                        double v71 = (uint64_t **)*v71;
                        if (!v71) {
                          goto LABEL_149;
                        }
                      }
                    }
                    while (1)
                    {
                      unint64_t v72 = (unint64_t)v71[1];
                      if (v58 == v72)
                      {
                        if (v71[2] == (uint64_t *)v58)
                        {
LABEL_109:
                          uint64_t v74 = *((int *)v71 + 6);
                          uint64_t v75 = *((int *)v71 + 7);
                          if (v74 != -1) {
                            ggl::PipelineSetup::setConstantData(v67, v74, v56, 1);
                          }
                          if (v75 != -1) {
                            ggl::PipelineSetup::setConstantData(v67, v75, v56, 2);
                          }
                          goto LABEL_113;
                        }
                      }
                      else
                      {
                        if (v72 >= qword_1E957F030) {
                          v72 %= (unint64_t)qword_1E957F030;
                        }
                        if (v72 != v69) {
                          goto LABEL_149;
                        }
                      }
                      double v71 = (uint64_t **)*v71;
                      if (!v71) {
                        goto LABEL_149;
                      }
                    }
                  }
                }
                else
                {
                  if (v64 >= v57) {
                    v64 %= v57;
                  }
                  if (v64 != v60) {
                    break;
                  }
                }
                int v62 = (void *)*v62;
              }
              while (v62);
            }
          }
        }
      }
LABEL_113:
      unint64_t v8 = (void *)v104[4];
      double v76 = v108 + 1;
      float v108 = v76;
      if (v76 == v8)
      {
        uint64_t result = v103;
        if (v9 == v8) {
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v77 = v105[4];
        uint64_t result = v103;
        do
        {
          unint64_t v78 = *((unsigned int *)v76 + 1);
          unint64_t v79 = v78 >> 7;
          if (v78 >> 7 < (v105[5] - v77) >> 3)
          {
            uint64_t v80 = *(void *)(v77 + 8 * v79);
            if (v80)
            {
              uint64_t v81 = v78 & 0x7F;
              unint64_t v82 = *(unsigned __int16 *)(v80 + 2 * v81);
              uint64_t v83 = v105[7];
              uint64_t v84 = v105[8];
              if (v82 < (v84 - v83) >> 3)
              {
                uint64_t v85 = v83 + 8 * v82;
                if (v85 != v84 && *(_DWORD *)(v85 + 4) == v78)
                {
                  uint64_t v87 = v106[4];
                  if (v79 < (v106[5] - v87) >> 3)
                  {
                    uint64_t v88 = *(void *)(v87 + 8 * v79);
                    if (v88)
                    {
                      unint64_t v89 = *(unsigned __int16 *)(v88 + 2 * v81);
                      uint64_t v90 = v106[7];
                      uint64_t v91 = v106[8];
                      if (v89 < (v91 - v90) >> 3)
                      {
                        uint64_t v92 = v90 + 8 * v89;
                        if (v92 != v91 && *(_DWORD *)(v92 + 4) == v78)
                        {
                          uint64_t v94 = v107[4];
                          if (v79 < (v107[5] - v94) >> 3)
                          {
                            uint64_t v95 = *(void *)(v94 + 8 * v79);
                            if (v95)
                            {
                              unint64_t v96 = *(unsigned __int16 *)(v95 + 2 * v81);
                              uint64_t v98 = v107[7];
                              uint64_t v97 = v107[8];
                              if (v96 < (v97 - v98) >> 3)
                              {
                                uint64_t v99 = v98 + 8 * v96;
                                if (*(_DWORD *)(v99 + 4) == v78 && v99 != v97)
                                {
                                  unint64_t v8 = v76;
                                  goto LABEL_141;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v76;
        }
        while (v76 != v8);
        double v76 = v8;
LABEL_141:
        float v108 = v76;
        if (v9 == v8) {
          goto LABEL_148;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_148:
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A19D3500(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x6CB2880B0A690EDBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6CB2880B0A690EDBLL;
    if (*(void *)&v1 <= 0x6CB2880B0A690EDBuLL) {
      uint64_t v3 = 0x6CB2880B0A690EDBuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6CB2880B0A690EDBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6CB2880B0A690EDBLL)
      {
        if (v5[2] == 0x6CB2880B0A690EDBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6CB2880B0A690EDBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6CB2880B0A690EDBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D3754(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  unint64_t v7 = (void *)v6;
  uint64_t v8 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v8 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  float v118 = v8;
  float v119 = v3;
  float v120 = (void *)v4;
  float v121 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  float v122 = (void *)v6;
  float v123 = v9;
  if (v10 == v9)
  {
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118))
    {
      uint64_t v12 = v9 + 1;
      do
      {
        uint64_t v9 = v12;
        float v123 = v12;
        if (v12 == v10) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118);
        uint64_t v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  float v117 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *float v117 = *v9;
    unint64_t v15 = *v9;
    uint64_t v16 = HIDWORD(*v9);
    unint64_t v17 = *v9 >> 39;
    uint64_t v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
    {
      uint64_t v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      uint64_t v25 = (unint64_t *)v3[11];
    }
    uint64_t v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
      && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v7[10] + 8 * v28;
    }
    else
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v33;
    }
    if (v34 == v33) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = (unint64_t *)v34;
    }
    uint64_t v36 = **(void **)(v11 + 8);
    float32x2_t v37 = *(void **)v36;
    float32x2_t v38 = *(void **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38) {
          goto LABEL_46;
        }
      }
    }
    if (v37 == v38)
    {
LABEL_46:
      float32x2_t v39 = 0;
    }
    else
    {
      float32x2_t v39 = (void *)v37[3];
      unint64_t v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    unint64_t v41 = *v35;
    unint64_t v42 = *v35;
    uint64_t v43 = v39[50];
    unint64_t v44 = (v39[51] - v43) >> 3;
    if (v42 < v44
      && (uint64_t v45 = *(void *)(v43 + 8 * v42)) != 0
      && HIDWORD(v41) == HIDWORD(v45)
      && ((uint64_t v46 = v39[53], v46 + 16 * v45 != v39[54]) ? (v47 = v46 == 0) : (v47 = 1), !v47))
    {
      uint64_t v53 = *(void *)(v43 + 8 * v42);
      uint64_t v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v41, v35);
      ++v54[3];
      uint64_t v55 = v46 + 16 * v53;
      uint64_t v11 = a1;
      uint64_t v48 = *(void **)(v55 + 8);
      unint64_t v41 = *v35;
      uint64_t v43 = v39[50];
      unint64_t v42 = *v35;
      if (v42 >= (v39[51] - v43) >> 3)
      {
LABEL_67:
        float v101 = 0;
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v48 = 0;
      if (v42 >= v44) {
        goto LABEL_67;
      }
    }
    uint64_t v49 = *(void *)(v43 + 8 * v42);
    if (!v49 || HIDWORD(v41) != HIDWORD(v49)) {
      goto LABEL_67;
    }
    uint64_t v50 = v39[53];
    float v51 = (void **)(v50 + 16 * v49);
    if (v51 == (void **)v39[54] || v50 == 0)
    {
      float v101 = 0;
    }
    else
    {
      float v100 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v41, v35);
      ++v100[3];
      float v101 = *v51;
    }
    uint64_t v11 = a1;
LABEL_68:
    unint64_t v56 = *v25;
    unint64_t v124 = v56;
    uint64_t v57 = v39[635];
    if (v56 < (unint64_t)((v39[636] - v57) >> 3))
    {
      uint64_t v58 = *(void *)(v57 + 8 * v56);
      if (v58 && HIDWORD(v56) == HIDWORD(v58))
      {
        uint64_t v91 = v39[638];
        uint64_t v92 = (uint64_t *)(v91 + 24 * v58);
        if (v92 != (uint64_t *)v39[639] && v91 != 0)
        {
          uint64_t v94 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>> const&>,std::tuple<>>((uint64_t)(v39 + 622), v56, &v124);
          ++v94[3];
          uint64_t v95 = *v92;
          if (*v92)
          {
            {
              gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::indeCGFloat x = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
            }
            unint64_t v96 = v48[1];
            if (v96)
            {
              unint64_t v97 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index;
              uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
              v98.i16[0] = vaddlv_u8(v98);
              if (v98.u32[0] > 1uLL)
              {
                uint64_t v99 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index;
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index >= v96) {
                  uint64_t v99 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index % v96;
                }
              }
              else
              {
                uint64_t v99 = (v96 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index;
              }
              double v102 = *(void **)(*v48 + 8 * v99);
              if (v102)
              {
                float v103 = (void *)*v102;
                if (v103)
                {
                  if (v98.u32[0] < 2uLL)
                  {
                    unint64_t v104 = v96 - 1;
                    while (1)
                    {
                      uint64_t v106 = v103[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index == v106)
                      {
                        if (v103[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index) {
                          goto LABEL_136;
                        }
                      }
                      else if ((v106 & v104) != v99)
                      {
                        goto LABEL_73;
                      }
                      float v103 = (void *)*v103;
                      if (!v103) {
                        goto LABEL_73;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v105 = v103[1];
                    if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index == v105)
                    {
                      if (v103[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index)
                      {
LABEL_136:
                        {
                          if (v115)
                          {
                            md::typeToIntMap(v115);
                            uint64_t v11 = a1;
                          }
                        }
                        if (!qword_1E957F030) {
                          goto LABEL_166;
                        }
                        uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                        v107.i16[0] = vaddlv_u8(v107);
                        if (v107.u32[0] > 1uLL)
                        {
                          unint64_t v108 = v97;
                          if (v97 >= qword_1E957F030) {
                            unint64_t v108 = v97 % qword_1E957F030;
                          }
                        }
                        else
                        {
                          unint64_t v108 = (qword_1E957F030 - 1) & v97;
                        }
                        float v109 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v108);
                        if (!v109 || (float v110 = *v109) == 0) {
LABEL_166:
                        }
                          abort();
                        if (v107.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            float v112 = v110[1];
                            if ((uint64_t *)v97 == v112)
                            {
                              if (v110[2] == (uint64_t *)v97) {
                                goto LABEL_157;
                              }
                            }
                            else if (((unint64_t)v112 & (qword_1E957F030 - 1)) != v108)
                            {
                              goto LABEL_166;
                            }
                            float v110 = (uint64_t **)*v110;
                            if (!v110) {
                              goto LABEL_166;
                            }
                          }
                        }
                        while (1)
                        {
                          unint64_t v111 = (unint64_t)v110[1];
                          if (v97 == v111)
                          {
                            if (v110[2] == (uint64_t *)v97)
                            {
LABEL_157:
                              uint64_t v113 = *((int *)v110 + 6);
                              uint64_t v114 = *((int *)v110 + 7);
                              if (v113 != -1) {
                                ggl::PipelineSetup::setConstantData(v101, v113, v95, 1);
                              }
                              if (v114 != -1) {
                                ggl::PipelineSetup::setConstantData(v101, v114, v95, 2);
                              }
                              goto LABEL_73;
                            }
                          }
                          else
                          {
                            if (v111 >= qword_1E957F030) {
                              v111 %= (unint64_t)qword_1E957F030;
                            }
                            if (v111 != v108) {
                              goto LABEL_166;
                            }
                          }
                          float v110 = (uint64_t **)*v110;
                          if (!v110) {
                            goto LABEL_166;
                          }
                        }
                      }
                    }
                    else
                    {
                      if (v105 >= v96) {
                        v105 %= v96;
                      }
                      if (v105 != v99) {
                        break;
                      }
                    }
                    float v103 = (void *)*v103;
                  }
                  while (v103);
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    uint64_t v9 = (void *)v118[4];
    unint64_t v14 = v123 + 1;
    float v123 = v14;
    if (v14 != v9)
    {
      uint64_t v60 = v119[4];
      while (1)
      {
        unint64_t v61 = *((unsigned int *)v14 + 1);
        unint64_t v62 = v61 >> 7;
        if (v61 >> 7 < (v119[5] - v60) >> 3)
        {
          uint64_t v63 = *(void *)(v60 + 8 * v62);
          if (v63)
          {
            uint64_t v64 = v61 & 0x7F;
            unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
            uint64_t v67 = v119[7];
            uint64_t v66 = v119[8];
            if (v65 < (v66 - v67) >> 3)
            {
              uint64_t v68 = v67 + 8 * v65;
              if (v68 != v66 && *(_DWORD *)(v68 + 4) == v61)
              {
                uint64_t v70 = v120[4];
                if (v62 < (v120[5] - v70) >> 3)
                {
                  uint64_t v71 = *(void *)(v70 + 8 * v62);
                  if (v71)
                  {
                    unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                    uint64_t v74 = v120[7];
                    uint64_t v73 = v120[8];
                    if (v72 < (v73 - v74) >> 3)
                    {
                      uint64_t v75 = v74 + 8 * v72;
                      if (v75 != v73 && *(_DWORD *)(v75 + 4) == v61)
                      {
                        uint64_t v77 = v121[4];
                        if (v62 < (v121[5] - v77) >> 3)
                        {
                          uint64_t v78 = *(void *)(v77 + 8 * v62);
                          if (v78)
                          {
                            unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                            uint64_t v81 = v121[7];
                            uint64_t v80 = v121[8];
                            if (v79 < (v80 - v81) >> 3)
                            {
                              uint64_t v82 = v81 + 8 * v79;
                              if (v82 != v80 && *(_DWORD *)(v82 + 4) == v61)
                              {
                                uint64_t v84 = v122[4];
                                if (v62 < (v122[5] - v84) >> 3)
                                {
                                  uint64_t v85 = *(void *)(v84 + 8 * v62);
                                  if (v85)
                                  {
                                    unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * v64);
                                    uint64_t v87 = v122[7];
                                    uint64_t v88 = v122[8];
                                    if (v86 < (v88 - v87) >> 3)
                                    {
                                      uint64_t v89 = v87 + 8 * v86;
                                      if (*(_DWORD *)(v89 + 4) == v61 && v89 != v88) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          unint64_t v14 = v9;
          goto LABEL_17;
        }
      }
      uint64_t v9 = v14;
LABEL_17:
      float v123 = v14;
    }
  }
  *float v117 = 0xFFFFFFFF00000000;
  *(void *)(v11 + 8) = 0;
}

void sub_1A19D3F94(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x5B12559DCF20DC9ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5B12559DCF20DC9ALL;
    if (*(void *)&v1 <= 0x5B12559DCF20DC9AuLL) {
      uint64_t v3 = 0x5B12559DCF20DC9AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5B12559DCF20DC9ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5B12559DCF20DC9ALL)
      {
        if (v5[2] == 0x5B12559DCF20DC9ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5B12559DCF20DC9ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5B12559DCF20DC9ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D41E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(int8x8_t *a1)
{
  uint64_t v10 = 0xCB8B71FD962316ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0xCB8B71FD962316ALL;
    if (*(void *)&v1 <= 0xCB8B71FD962316AuLL) {
      uint64_t v3 = 0xCB8B71FD962316AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0xCB8B71FD962316ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCB8B71FD962316ALL)
      {
        if (v5[2] == 0xCB8B71FD962316ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCB8B71FD962316ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCB8B71FD962316ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D4458(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint8x8_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  unint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    unint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    unint64_t v7 = (void *)(v5 + 32);
  }
  uint64_t v85 = v7;
  unint64_t v86 = v3;
  uint64_t v87 = (void *)v4;
  uint64_t v88 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v89 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v85))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v89 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v85);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v84 = result;
    while (1)
    {
      *uint64_t result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        BOOL v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        BOOL v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      float32x2_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        float32x2_t v38 = 0;
      }
      else
      {
        float32x2_t v38 = (void *)v36[3];
        float32x2_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        BOOL v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3) {
          goto LABEL_63;
        }
      }
      else
      {
        BOOL v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (v48 && HIDWORD(v40) == HIDWORD(v48))
      {
        uint64_t v49 = v38[53];
        uint64_t v50 = (void **)(v49 + 16 * v48);
        if (v50 == (void **)v38[54] || v49 == 0)
        {
          uint64_t v82 = 0;
        }
        else
        {
          uint64_t v81 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
          ++v81[3];
          uint64_t v82 = *v50;
        }
        uint64_t v10 = a1;
        goto LABEL_64;
      }
LABEL_63:
      uint64_t v82 = 0;
LABEL_64:
      uint64_t v55 = md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>((uint64_t)v38, *v24);
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(v47, v82, v55);
      uint64_t v8 = (void *)v85[4];
      unint64_t v56 = v89 + 1;
      uint64_t v89 = v56;
      if (v56 == v8)
      {
        uint64_t result = v84;
        if (v9 == v8) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v57 = v86[4];
        do
        {
          unint64_t v58 = *((unsigned int *)v56 + 1);
          unint64_t v59 = v58 >> 7;
          if (v58 >> 7 < (v86[5] - v57) >> 3)
          {
            uint64_t v60 = *(void *)(v57 + 8 * v59);
            if (v60)
            {
              uint64_t v61 = v58 & 0x7F;
              unint64_t v62 = *(unsigned __int16 *)(v60 + 2 * v61);
              uint64_t v64 = v86[7];
              uint64_t v63 = v86[8];
              if (v62 < (v63 - v64) >> 3)
              {
                uint64_t v65 = v64 + 8 * v62;
                if (v65 != v63 && *(_DWORD *)(v65 + 4) == v58)
                {
                  uint64_t v67 = v87[4];
                  if (v59 < (v87[5] - v67) >> 3)
                  {
                    uint64_t v68 = *(void *)(v67 + 8 * v59);
                    if (v68)
                    {
                      unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * v61);
                      uint64_t v71 = v87[7];
                      uint64_t v70 = v87[8];
                      if (v69 < (v70 - v71) >> 3)
                      {
                        uint64_t v72 = v71 + 8 * v69;
                        if (v72 != v70 && *(_DWORD *)(v72 + 4) == v58)
                        {
                          uint64_t v74 = v88[4];
                          if (v59 < (v88[5] - v74) >> 3)
                          {
                            uint64_t v75 = *(void *)(v74 + 8 * v59);
                            if (v75)
                            {
                              unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * v61);
                              uint64_t v78 = v88[7];
                              uint64_t v77 = v88[8];
                              if (v76 < (v77 - v78) >> 3)
                              {
                                uint64_t v79 = v78 + 8 * v76;
                                if (*(_DWORD *)(v79 + 4) == v58 && v79 != v77)
                                {
                                  uint64_t v8 = v56;
                                  goto LABEL_92;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v56;
        }
        while (v56 != v8);
        unint64_t v56 = v8;
LABEL_92:
        uint64_t result = v84;
        uint64_t v89 = v56;
        if (v9 == v8) {
          goto LABEL_96;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_96:
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x58EA03DA808C73B1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x58EA03DA808C73B1;
    if (*(void *)&v1 <= 0x58EA03DA808C73B1uLL) {
      uint64_t v3 = 0x58EA03DA808C73B1uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x58EA03DA808C73B1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x58EA03DA808C73B1)
      {
        if (v5[2] == 0x58EA03DA808C73B1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x58EA03DA808C73B1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x58EA03DA808C73B1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D4BA8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(v3);
  uint64_t v6 = v3;
  unint64_t v7 = (void *)v4;
  uint64_t v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v4 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v5 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  uint64_t v152 = v10;
  float v153 = (void *)v4;
  float v154 = (void *)v5;
  float v155 = (void *)v8;
  uint64_t v12 = *(void **)(v10 + 24);
  uint64_t v11 = *(void **)(v10 + 32);
  float v156 = v12;
  float v151 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152))
  {
    uint64_t v13 = v12 + 1;
    do
    {
      uint64_t v12 = v13;
      float v156 = v13;
      if (v13 == v151) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152);
      uint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v151 != v12)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    float v148 = v7;
    float v149 = result;
    float v150 = v9;
    while (1)
    {
      *uint64_t result = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v26 = (uint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        uint64_t v26 = (uint64_t *)v7[11];
      }
      uint64_t v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v9[7],
            uint64_t v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v9[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v2 + 8);
      float32x2_t v38 = *(void **)v37;
      float32x2_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_41;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_41:
        unint64_t v41 = 0;
      }
      else
      {
        unint64_t v41 = (void *)v38[3];
        unint64_t v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v42 = **(void **)(v2 + 8);
      unint64_t v43 = *(void **)v42;
      uint64_t v44 = *(void **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x348A0B0E758C07C2)
        {
          v43 += 5;
          if (v43 == v44) {
            goto LABEL_50;
          }
        }
      }
      if (v43 == v44)
      {
LABEL_50:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = v43[3];
        BOOL v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      uint64_t v47 = (uint64_t)(v41 + 37);
      unint64_t v48 = *v36;
      unint64_t v49 = *v36;
      uint64_t v50 = v41[50];
      unint64_t v51 = (v41[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v41[53], v53 + 16 * v52 != v41[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v63 = v2;
        uint64_t v64 = *(void *)(v50 + 8 * v49);
        uint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v48, v36);
        ++v65[3];
        uint64_t v66 = v53 + 16 * v64;
        uint64_t v2 = v63;
        unint64_t v7 = v148;
        uint64_t v55 = *(void **)(v66 + 8);
        unint64_t v48 = *v36;
        uint64_t v50 = v41[50];
        unint64_t v49 = *v36;
        if (v49 >= (v41[51] - v50) >> 3) {
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v55 = 0;
        if (v49 >= v51) {
          goto LABEL_70;
        }
      }
      uint64_t v56 = *(void *)(v50 + 8 * v49);
      if (!v56
        || HIDWORD(v48) != HIDWORD(v56)
        || ((v57 = v41[53], v58 = (uint64_t *)v41[54], unint64_t v59 = (uint64_t *)(v57 + 16 * v56), v59 != v58)
          ? (BOOL v60 = v57 == 0)
          : (BOOL v60 = 1),
            v60))
      {
LABEL_70:
        uint64_t v62 = 0;
        goto LABEL_71;
      }
      uint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v36);
      ++v61[3];
      uint64_t v62 = *v59;
LABEL_71:
      uint64_t v67 = *v26;
      uint64_t v68 = (std::__shared_mutex_base *)(v45 + 104);
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v69 = *(void *)(v45 + 600);
      if (v67 < (unint64_t)((*(void *)(v45 + 608) - v69) >> 3)
        && ((v70 = *(void *)(v69 + 8 * v67)) != 0 ? (BOOL v71 = HIDWORD(v67) == HIDWORD(v70)) : (BOOL v71 = 0),
            v71))
      {
        uint64_t v73 = (uint64_t *)(*(void *)(v45 + 624) + 40 * v70);
        uint64_t v72 = *(uint64_t **)(v45 + 632);
      }
      else
      {
        uint64_t v72 = *(uint64_t **)(v45 + 632);
        uint64_t v73 = v72;
      }
      std::__shared_mutex_base::unlock_shared(v68);
      uint64_t v74 = 0;
      if (v73 != v72 && v73) {
        uint64_t v74 = *v73;
      }
      {
        gdc::typeIndex<DaVinci::Gradient2Texture>(void)::indeCGFloat x = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v75 = v55[1];
      if (!v75) {
        goto LABEL_152;
      }
      unint64_t v76 = gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index;
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        uint64_t v78 = gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index;
        if (gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index >= v75) {
          uint64_t v78 = gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index % v75;
        }
      }
      else
      {
        uint64_t v78 = (v75 - 1) & gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index;
      }
      uint64_t v79 = *(void **)(*v55 + 8 * v78);
      if (!v79) {
        goto LABEL_152;
      }
      uint64_t v80 = (void *)*v79;
      if (!v80) {
        goto LABEL_152;
      }
      if (v77.u32[0] < 2uLL)
      {
        unint64_t v81 = v75 - 1;
        while (1)
        {
          uint64_t v83 = v80[1];
          if (gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index == v83)
          {
            if (v80[2] == gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index) {
              goto LABEL_103;
            }
          }
          else if ((v83 & v81) != v78)
          {
            goto LABEL_152;
          }
          uint64_t v80 = (void *)*v80;
          if (!v80) {
            goto LABEL_152;
          }
        }
      }
      while (1)
      {
        unint64_t v82 = v80[1];
        if (gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index == v82) {
          break;
        }
        if (v82 >= v75) {
          v82 %= v75;
        }
        if (v82 != v78) {
          goto LABEL_152;
        }
LABEL_91:
        uint64_t v80 = (void *)*v80;
        if (!v80) {
          goto LABEL_152;
        }
      }
      if (v80[2] != gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index) {
        goto LABEL_91;
      }
LABEL_103:
      {
        if (v147)
        {
          md::typeToIntMap(v147);
          unint64_t v7 = v148;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_187;
      }
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        unint64_t v85 = v76;
        if (v76 >= qword_1E957F030) {
          unint64_t v85 = v76 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v85 = (qword_1E957F030 - 1) & v76;
      }
      unint64_t v86 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v85);
      if (!v86 || (uint64_t v87 = *v86) == 0) {
LABEL_187:
      }
        abort();
      if (v84.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v89 = v87[1];
          if ((uint64_t *)v76 == v89)
          {
            if (v87[2] == (uint64_t *)v76) {
              goto LABEL_124;
            }
          }
          else if (((unint64_t)v89 & (qword_1E957F030 - 1)) != v85)
          {
            goto LABEL_187;
          }
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v87[1];
        if (v76 != v88)
        {
          if (v88 >= qword_1E957F030) {
            v88 %= (unint64_t)qword_1E957F030;
          }
          if (v88 != v85) {
            goto LABEL_187;
          }
LABEL_114:
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
          continue;
        }
        break;
      }
      if (v87[2] != (uint64_t *)v76) {
        goto LABEL_114;
      }
LABEL_124:
      uint64_t v91 = *((int *)v87 + 6);
      uint64_t v90 = *((int *)v87 + 7);
      if (v91 != -1)
      {
        uint64_t v92 = *(void *)(v62 + 16);
        if (v92)
        {
          uint64_t v93 = *(void *)(*(void *)(v92 + 48) + 72);
          uint64_t v94 = *(void *)(v93 + 8);
          uint64_t v95 = *(void *)(v94 + 72);
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = *(void *)(v94 + 64);
            uint8x8_t v98 = (unsigned __int8 *)(v97 + 1);
            while (1)
            {
              int v99 = *v98;
              v98 += 2;
              if (v99 == v91) {
                break;
              }
              if (v95 == ++v96) {
                goto LABEL_130;
              }
            }
            uint64_t v106 = (unsigned __int8 *)(v97 + 2 * v96);
LABEL_137:
            *(void *)(*(void *)(v62 + 96) + 8 * *v106) = v74;
          }
          else
          {
LABEL_130:
            uint64_t v100 = *(void *)(v93 + 24);
            uint64_t v101 = *(void *)(v100 + 72);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = *(void *)(v100 + 64);
              unint64_t v104 = (unsigned __int8 *)(v103 + 1);
              while (1)
              {
                int v105 = *v104;
                v104 += 2;
                if (v105 == v91) {
                  break;
                }
                if (v101 == ++v102) {
                  goto LABEL_138;
                }
              }
              uint64_t v106 = (unsigned __int8 *)(v103 + 2 * v102);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v90 != -1)
      {
        uint64_t v107 = *(void *)(v62 + 16);
        if (v107)
        {
          uint64_t v108 = *(void *)(*(void *)(v107 + 48) + 72);
          uint64_t v109 = *(void *)(v108 + 8);
          uint64_t v110 = *(void *)(v109 + 72);
          if (v110)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *(void *)(v109 + 64);
            uint64_t v113 = (unsigned __int8 *)(v112 + 1);
            while (1)
            {
              int v114 = *v113;
              v113 += 2;
              if (v114 == v90) {
                break;
              }
              if (v110 == ++v111) {
                goto LABEL_144;
              }
            }
            float v121 = (unsigned __int8 *)(v112 + 2 * v111);
LABEL_151:
            *(void *)(*(void *)(v62 + 96) + 8 * *v121) = v74;
          }
          else
          {
LABEL_144:
            uint64_t v115 = *(void *)(v108 + 24);
            uint64_t v116 = *(void *)(v115 + 72);
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v118 = *(void *)(v115 + 64);
              float v119 = (unsigned __int8 *)(v118 + 1);
              while (1)
              {
                int v120 = *v119;
                v119 += 2;
                if (v120 == v90) {
                  break;
                }
                if (v116 == ++v117) {
                  goto LABEL_152;
                }
              }
              float v121 = (unsigned __int8 *)(v118 + 2 * v117);
              goto LABEL_151;
            }
          }
        }
      }
LABEL_152:
      uint64_t v12 = *(void **)(v152 + 32);
      float v122 = v156 + 1;
      float v156 = v122;
      if (v122 == v12)
      {
        uint64_t v9 = v150;
      }
      else
      {
        uint64_t v123 = v153[4];
        uint64_t v9 = v150;
        do
        {
          unint64_t v124 = *((unsigned int *)v122 + 1);
          unint64_t v125 = v124 >> 7;
          if (v124 >> 7 < (v153[5] - v123) >> 3)
          {
            uint64_t v126 = *(void *)(v123 + 8 * v125);
            if (v126)
            {
              uint64_t v127 = v124 & 0x7F;
              unint64_t v128 = *(unsigned __int16 *)(v126 + 2 * v127);
              uint64_t v130 = v153[7];
              uint64_t v129 = v153[8];
              if (v128 < (v129 - v130) >> 3)
              {
                uint64_t v131 = v130 + 8 * v128;
                if (v131 != v129 && *(_DWORD *)(v131 + 4) == v124)
                {
                  uint64_t v133 = v154[4];
                  if (v125 < (v154[5] - v133) >> 3)
                  {
                    uint64_t v134 = *(void *)(v133 + 8 * v125);
                    if (v134)
                    {
                      unint64_t v135 = *(unsigned __int16 *)(v134 + 2 * v127);
                      uint64_t v137 = v154[7];
                      uint64_t v136 = v154[8];
                      if (v135 < (v136 - v137) >> 3)
                      {
                        uint64_t v138 = v137 + 8 * v135;
                        if (v138 != v136 && *(_DWORD *)(v138 + 4) == v124)
                        {
                          uint64_t v140 = v155[4];
                          if (v125 < (v155[5] - v140) >> 3)
                          {
                            uint64_t v141 = *(void *)(v140 + 8 * v125);
                            if (v141)
                            {
                              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * v127);
                              uint64_t v144 = v155[7];
                              uint64_t v143 = v155[8];
                              if (v142 < (v143 - v144) >> 3)
                              {
                                uint64_t v145 = v144 + 8 * v142;
                                if (*(_DWORD *)(v145 + 4) == v124 && v145 != v143)
                                {
                                  uint64_t v12 = v122;
                                  goto LABEL_180;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v122;
        }
        while (v122 != v12);
        float v122 = v12;
LABEL_180:
        float v156 = v122;
      }
      uint64_t result = v149;
      if (v151 == v12) {
        goto LABEL_186;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_186:
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A19D5524(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  unint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    unint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    unint64_t v7 = (void *)(v5 + 32);
  }
  double v132 = v7;
  uint64_t v133 = v3;
  uint64_t v134 = (void *)v4;
  unint64_t v135 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v136 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132))
  {
    uint64_t v10 = v8 + 1;
    do
    {
      uint64_t v8 = v10;
      uint64_t v136 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132);
      uint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_171;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v130 = result;
  do
  {
LABEL_13:
    *uint64_t result = *v8;
    unint64_t v13 = *v8;
    uint64_t v14 = HIDWORD(*v8);
    unint64_t v15 = *v8 >> 39;
    uint64_t v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
      && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((uint64_t v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == v14) : (v22 = 0), v22))
    {
      uint64_t v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      uint64_t v23 = (unint64_t *)v3[11];
    }
    uint64_t v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (uint64_t v25 = *(void *)(v24 + 8 * v15)) != 0
      && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((uint64_t v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == v14) : (v30 = 0), v30))
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v6[10] + 8 * v26;
    }
    else
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v31;
    }
    if (v32 == v31) {
      BOOL v33 = 0;
    }
    else {
      BOOL v33 = (unint64_t *)v32;
    }
    uint64_t v34 = **(void **)(a1 + 8);
    uint64_t v35 = *(void **)v34;
    uint64_t v36 = *(void **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36) {
          goto LABEL_40;
        }
      }
    }
    if (v35 == v36)
    {
LABEL_40:
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = (void *)v35[3];
      float32x2_t v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    unint64_t v39 = *v33;
    unint64_t v40 = *v33;
    uint64_t v41 = v37[50];
    unint64_t v42 = (v37[51] - v41) >> 3;
    if (v40 < v42
      && (uint64_t v43 = *(void *)(v41 + 8 * v40)) != 0
      && HIDWORD(v39) == HIDWORD(v43)
      && ((uint64_t v44 = v37[53], v44 + 16 * v43 != v37[54]) ? (v45 = v44 == 0) : (v45 = 1), !v45))
    {
      uint64_t v53 = *(void *)(v41 + 8 * v40);
      BOOL v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
      ++v54[3];
      BOOL v46 = *(void **)(v44 + 16 * v53 + 8);
      unint64_t v39 = *v33;
      uint64_t v41 = v37[50];
      unint64_t v40 = *v33;
      if (v40 >= (v37[51] - v41) >> 3) {
        goto LABEL_60;
      }
    }
    else
    {
      BOOL v46 = 0;
      if (v40 >= v42) {
        goto LABEL_60;
      }
    }
    uint64_t v47 = *(void *)(v41 + 8 * v40);
    if (!v47
      || HIDWORD(v39) != HIDWORD(v47)
      || ((v48 = v37[53], unint64_t v49 = (void *)(v48 + 16 * v47), v49 != (void *)v37[54])
        ? (BOOL v50 = v48 == 0)
        : (BOOL v50 = 1),
          v50))
    {
LABEL_60:
      uint64_t v52 = 0;
      goto LABEL_61;
    }
    unint64_t v51 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
    ++v51[3];
    uint64_t v52 = (void *)*v49;
LABEL_61:
    unint64_t v55 = *v23;
    unint64_t v137 = v55;
    uint64_t v56 = v37[1298];
    if (v55 < (unint64_t)((v37[1299] - v56) >> 3)
      && ((v57 = *(void *)(v56 + 8 * v55)) != 0 ? (BOOL v58 = HIDWORD(v55) == HIDWORD(v57)) : (BOOL v58 = 0), v58))
    {
      BOOL v60 = (uint64_t *)(v37[1301] + 8 * v57);
      unint64_t v59 = (uint64_t *)v37[1302];
    }
    else
    {
      unint64_t v59 = (uint64_t *)v37[1302];
      BOOL v60 = v59;
    }
    uint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v55, &v137);
    uint64_t v62 = 0;
    ++v61[3];
    if (v60 != v59 && v60) {
      uint64_t v62 = *v60;
    }
    {
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::indeCGFloat x = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v63 = v46[1];
    if (!v63) {
      goto LABEL_134;
    }
    unint64_t v64 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index;
    uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index >= v63) {
        uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index % v63;
      }
    }
    else
    {
      uint64_t v66 = (v63 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index;
    }
    uint64_t v67 = *(void **)(*v46 + 8 * v66);
    if (!v67) {
      goto LABEL_134;
    }
    uint64_t v68 = (void *)*v67;
    if (!v68) {
      goto LABEL_134;
    }
    if (v65.u32[0] < 2uLL)
    {
      unint64_t v69 = v63 - 1;
      while (1)
      {
        uint64_t v71 = v68[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index == v71)
        {
          if (v68[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index) {
            goto LABEL_93;
          }
        }
        else if ((v71 & v69) != v66)
        {
          goto LABEL_134;
        }
        uint64_t v68 = (void *)*v68;
        if (!v68) {
          goto LABEL_134;
        }
      }
    }
    while (1)
    {
      unint64_t v70 = v68[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index == v70) {
        break;
      }
      if (v70 >= v63) {
        v70 %= v63;
      }
      if (v70 != v66) {
        goto LABEL_134;
      }
LABEL_81:
      uint64_t v68 = (void *)*v68;
      if (!v68) {
        goto LABEL_134;
      }
    }
    if (v68[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index) {
      goto LABEL_81;
    }
LABEL_93:
    {
      if (v129)
      {
        md::typeToIntMap(v129);
      }
    }
    if (!qword_1E957F030) {
      goto LABEL_172;
    }
    uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
    v72.i16[0] = vaddlv_u8(v72);
    if (v72.u32[0] > 1uLL)
    {
      unint64_t v73 = v64;
      if (v64 >= qword_1E957F030) {
        unint64_t v73 = v64 % qword_1E957F030;
      }
    }
    else
    {
      unint64_t v73 = (qword_1E957F030 - 1) & v64;
    }
    uint64_t v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
    if (!v74 || (unint64_t v75 = *v74) == 0) {
LABEL_172:
    }
      abort();
    if (v72.u32[0] < 2uLL)
    {
      while (1)
      {
        uint8x8_t v77 = v75[1];
        if ((uint64_t *)v64 == v77)
        {
          if (v75[2] == (uint64_t *)v64) {
            goto LABEL_114;
          }
        }
        else if (((unint64_t)v77 & (qword_1E957F030 - 1)) != v73)
        {
          goto LABEL_172;
        }
        unint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
      }
    }
    while (2)
    {
      unint64_t v76 = (unint64_t)v75[1];
      if (v64 != v76)
      {
        if (v76 >= qword_1E957F030) {
          v76 %= (unint64_t)qword_1E957F030;
        }
        if (v76 != v73) {
          goto LABEL_172;
        }
LABEL_104:
        unint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
        continue;
      }
      break;
    }
    if (v75[2] != (uint64_t *)v64) {
      goto LABEL_104;
    }
LABEL_114:
    uint64_t v78 = *((int *)v75 + 6);
    uint64_t v79 = *((int *)v75 + 7);
    if (v78 != -1)
    {
      uint64_t v80 = v52[2];
      if (v80
        && (uint64_t v81 = *(void *)(*(void *)(*(void *)(v80 + 48) + 72) + 8), (v82 = *(void *)(v81 + 56)) != 0))
      {
        uint64_t v83 = 0;
        uint64_t v84 = *(void *)(v81 + 48);
        unint64_t v85 = (unsigned __int8 *)(v84 + 1);
        while (1)
        {
          int v86 = *v85;
          v85 += 2;
          if (v86 == v78) {
            break;
          }
          if (v82 == ++v83) {
            goto LABEL_120;
          }
        }
        uint64_t v87 = *(unsigned __int8 *)(v84 + 2 * v83);
      }
      else
      {
LABEL_120:
        uint64_t v87 = -1;
      }
      uint64_t v88 = 16 * v87;
      uint64_t v89 = (void *)(v52[4] + v88);
      *uint64_t v89 = v62;
      v89[1] = 0;
      uint64_t v90 = (void *)(v52[16] + v88);
      uint64_t v91 = (std::__shared_weak_count *)v90[1];
      *uint64_t v90 = 0;
      v90[1] = 0;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v79 != -1)
    {
      uint64_t v92 = v52[2];
      if (v92
        && (uint64_t v93 = *(void *)(*(void *)(*(void *)(v92 + 48) + 72) + 24), (v94 = *(void *)(v93 + 56)) != 0))
      {
        uint64_t v95 = 0;
        uint64_t v96 = *(void *)(v93 + 48);
        uint64_t v97 = (unsigned __int8 *)(v96 + 1);
        while (1)
        {
          int v98 = *v97;
          v97 += 2;
          if (v98 == v79) {
            break;
          }
          if (v94 == ++v95) {
            goto LABEL_130;
          }
        }
        uint64_t v99 = *(unsigned __int8 *)(v96 + 2 * v95);
      }
      else
      {
LABEL_130:
        uint64_t v99 = -1;
      }
      uint64_t v100 = 16 * v99;
      uint64_t v101 = (void *)(v52[4] + v100);
      *uint64_t v101 = v62;
      v101[1] = 0;
      uint64_t v102 = (void *)(v52[16] + v100);
      uint64_t v103 = (std::__shared_weak_count *)v102[1];
      *uint64_t v102 = 0;
      v102[1] = 0;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
LABEL_134:
    uint64_t v8 = (void *)v132[4];
    unint64_t v104 = v136 + 1;
    uint64_t v136 = v104;
    if (v104 == v8)
    {
      uint64_t result = v130;
      if (v9 == v8) {
        break;
      }
      goto LABEL_13;
    }
    uint64_t v105 = v133[4];
    uint64_t result = v130;
    do
    {
      unint64_t v106 = *((unsigned int *)v104 + 1);
      unint64_t v107 = v106 >> 7;
      if (v106 >> 7 < (v133[5] - v105) >> 3)
      {
        uint64_t v108 = *(void *)(v105 + 8 * v107);
        if (v108)
        {
          uint64_t v109 = v106 & 0x7F;
          unint64_t v110 = *(unsigned __int16 *)(v108 + 2 * v109);
          uint64_t v111 = v133[7];
          uint64_t v112 = v133[8];
          if (v110 < (v112 - v111) >> 3)
          {
            uint64_t v113 = v111 + 8 * v110;
            if (v113 != v112 && *(_DWORD *)(v113 + 4) == v106)
            {
              uint64_t v115 = v134[4];
              if (v107 < (v134[5] - v115) >> 3)
              {
                uint64_t v116 = *(void *)(v115 + 8 * v107);
                if (v116)
                {
                  unint64_t v117 = *(unsigned __int16 *)(v116 + 2 * v109);
                  uint64_t v118 = v134[7];
                  uint64_t v119 = v134[8];
                  if (v117 < (v119 - v118) >> 3)
                  {
                    uint64_t v120 = v118 + 8 * v117;
                    if (v120 != v119 && *(_DWORD *)(v120 + 4) == v106)
                    {
                      uint64_t v122 = v135[4];
                      if (v107 < (v135[5] - v122) >> 3)
                      {
                        uint64_t v123 = *(void *)(v122 + 8 * v107);
                        if (v123)
                        {
                          unint64_t v124 = *(unsigned __int16 *)(v123 + 2 * v109);
                          uint64_t v126 = v135[7];
                          uint64_t v125 = v135[8];
                          if (v124 < (v125 - v126) >> 3)
                          {
                            uint64_t v127 = v126 + 8 * v124;
                            if (*(_DWORD *)(v127 + 4) == v106 && v127 != v125)
                            {
                              uint64_t v8 = v104;
                              goto LABEL_162;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v104;
    }
    while (v104 != v8);
    unint64_t v104 = v8;
LABEL_162:
    uint64_t v136 = v104;
  }
  while (v9 != v8);
LABEL_171:
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A19D5E18(_Unwind_Exception *a1)
{
}

uint64_t gdc::Registry::storage<md::ls::PipelineSetup>(int8x8_t *a1)
{
  unint64_t v10 = 0x9C4E7BCF9B8D6334;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9C4E7BCF9B8D6334;
    if (*(void *)&v1 <= 0x9C4E7BCF9B8D6334) {
      unint64_t v3 = 0x9C4E7BCF9B8D6334 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9C4E7BCF9B8D6334;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9C4E7BCF9B8D6334)
      {
        if (v5[2] == 0x9C4E7BCF9B8D6334) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9C4E7BCF9B8D6334) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9C4E7BCF9B8D6334) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D606C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF2AA04C63467A586;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF2AA04C63467A586;
    if (*(void *)&v1 <= 0xF2AA04C63467A586) {
      unint64_t v3 = 0xF2AA04C63467A586 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF2AA04C63467A586;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF2AA04C63467A586)
      {
        if (v5[2] == 0xF2AA04C63467A586) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF2AA04C63467A586) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF2AA04C63467A586) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D62DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x662527E578BE28E3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x662527E578BE28E3;
    if (*(void *)&v1 <= 0x662527E578BE28E3uLL) {
      uint64_t v3 = 0x662527E578BE28E3uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x662527E578BE28E3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x662527E578BE28E3)
      {
        if (v5[2] == 0x662527E578BE28E3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x662527E578BE28E3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x662527E578BE28E3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D654C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC55E4C6C5DFCA74ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC55E4C6C5DFCA74ALL;
    if (*(void *)&v1 <= 0xC55E4C6C5DFCA74ALL) {
      unint64_t v3 = 0xC55E4C6C5DFCA74ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC55E4C6C5DFCA74ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC55E4C6C5DFCA74ALL)
      {
        if (v5[2] == 0xC55E4C6C5DFCA74ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC55E4C6C5DFCA74ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC55E4C6C5DFCA74ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D67BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::FrameGraphUtils::prepareGraphBuilderForRenderTarget(uint64_t result, uint64_t a2, void *a3, const void *a4, unint64_t a5, const void *a6, unint64_t a7, uint64_t a8, const void *a9, unint64_t a10)
{
  uint64_t v10 = result;
  if (a3[9])
  {
    uint64_t v37 = result + 76;
    unsigned int v12 = *(_DWORD *)(a3[11] + 80);
    unsigned int v11 = *(_DWORD *)(a3[11] + 84);
    int v14 = *(_DWORD *)(a3[11] + 72);
    unsigned int v13 = *(_DWORD *)(a3[11] + 76);
    uint64_t v15 = *(unsigned int *)(a3[11] + 68);
    if (v15) {
      uint64_t v16 = v15 | 0x100000000;
    }
    else {
      uint64_t v16 = 0;
    }
    v38[0] = 0;
    unsigned int v39 = v12;
    int v40 = 0;
    unsigned int v41 = v11;
    int v42 = 0;
    uint64_t v43 = v16;
    char v44 = 0;
    char v45 = 0;
    unsigned int v46 = v13;
    LODWORD(v47) = 1;
    HIDWORD(v47) = v14;
    char v48 = 0;
    uint64_t Resource = md::FrameGraphBuilder::createResource(a2, (uint64_t)v38, a4, a5, 0);
    *(void *)uint64_t v10 = Resource;
    if (!*(unsigned char *)(v10 + 72))
    {
      long long v18 = *(_OWORD *)(Resource + 88);
      *(_DWORD *)(v37 + 16) = *(_DWORD *)(Resource + 104);
      *(_OWORD *)uint64_t v37 = v18;
      *(unsigned char *)(v10 + 72) = 1;
    }
    uint64_t v49 = *(void *)v10;
    operator new();
  }
  uint64_t v19 = (unsigned int *)a3[35];
  if (v19)
  {
    unsigned int v21 = v19[20];
    unsigned int v20 = v19[21];
    unsigned int v23 = v19[18];
    unsigned int v22 = v19[19];
    uint64_t v24 = v19[17];
    if (v24) {
      uint64_t v25 = v24 | 0x100000000;
    }
    else {
      uint64_t v25 = 0;
    }
    v38[0] = 0;
    unsigned int v39 = v21;
    int v40 = 0;
    unsigned int v41 = v20;
    int v42 = 0;
    uint64_t v43 = v25;
    char v44 = 0;
    char v45 = 0;
    unsigned int v46 = v22;
    LODWORD(v47) = 1;
    HIDWORD(v47) = v23;
    char v48 = 1;
    uint64_t v26 = md::FrameGraphBuilder::createResource(a2, (uint64_t)v38, a6, a7, 0);
    *(void *)(v10 + 64) = v26;
    if (!*(unsigned char *)(v10 + 72))
    {
      long long v27 = *(_OWORD *)(v26 + 88);
      *(_DWORD *)(v10 + 92) = *(_DWORD *)(v26 + 104);
      *(_OWORD *)(v10 + 76) = v27;
      *(unsigned char *)(v10 + 72) = 1;
    }
    uint64_t v49 = v26;
    operator new();
  }
  uint64_t v28 = (unsigned int *)a3[23];
  if (v28)
  {
    uint64_t v29 = (uint64_t *)(result + 32);
    unsigned int v31 = v28[20];
    unsigned int v30 = v28[21];
    uint64_t v32 = v28[17];
    unsigned int v33 = v28[19];
    if (v32) {
      uint64_t v34 = v32 | 0x100000000;
    }
    else {
      uint64_t v34 = 0;
    }
    v38[0] = 0;
    unsigned int v39 = v31;
    int v40 = 0;
    unsigned int v41 = v30;
    int v42 = 0;
    uint64_t v43 = v34;
    char v44 = 0;
    char v45 = 0;
    unsigned int v46 = v33;
    uint64_t v47 = 0x100000001;
    char v48 = 2;
    uint64_t v35 = md::FrameGraphBuilder::createResource(a2, (uint64_t)v38, a9, a10, 0);
    *uint64_t v29 = v35;
    if (!*(unsigned char *)(v10 + 72))
    {
      long long v36 = *(_OWORD *)(v35 + 88);
      *(_DWORD *)(v10 + 92) = *(_DWORD *)(v35 + 104);
      *(_OWORD *)(v10 + 76) = v36;
      *(unsigned char *)(v10 + 72) = 1;
    }
    uint64_t v49 = *v29;
    operator new();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unsigned int v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unsigned int v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unsigned int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unsigned int v12 = operator new(0x20uLL);
  *unsigned int v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  uint64_t v12[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        int v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v21 = operator new(8 * prime);
    unsigned int v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    uint64_t v25 = (uint64_t *)(a1 + 4);
    uint64_t v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          *uint64_t v24 = *i;
          uint64_t v31 = 8 * v30;
          void *i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          uint64_t v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    uint64_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *uint64_t v24 = *v35;
        uint64_t v36 = 8 * v37;
        *uint64_t v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        uint64_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      uint64_t v24 = v35;
      uint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  float32x2_t v38 = *(void **)a1;
  unsigned int v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    *unsigned int v12 = *v39;
LABEL_80:
    *unsigned int v39 = v12;
    goto LABEL_81;
  }
  *unsigned int v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    unsigned int v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

uint64_t md::FrameGraphBuilder::createResource(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v6 = a5;
  v84[0] = a3;
  v84[1] = a4;
  unint64_t v83 = a5;
  unsigned int v11 = operator new(0x20uLL);
  *unsigned int v11 = &unk_1EF573038;
  v11[1] = a2;
  _OWORD v11[2] = v84;
  void v11[3] = &v83;
  unint64_t v12 = HIDWORD(a4);
  unint64_t v13 = *(void *)(a1 + 56);
  if (v13)
  {
    unint64_t v82 = v6;
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v16 = HIDWORD(a4);
      if (v13 <= v12) {
        unint64_t v16 = v12 % v13;
      }
    }
    else
    {
      unint64_t v16 = (v13 - 1) & HIDWORD(a4);
    }
    BOOL v17 = *(void ***)(*(void *)(a1 + 48) + 8 * v16);
    if (v17)
    {
      unint64_t v18 = (char *)*v17;
      if (*v17)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = *((void *)v18 + 1);
            if (v20 == v12)
            {
              if (*((void *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4)) {
                goto LABEL_38;
              }
            }
            else if ((v20 & (v13 - 1)) != v16)
            {
              goto LABEL_25;
            }
            unint64_t v18 = *(char **)v18;
            if (!v18) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v18 + 1);
          if (v19 == v12)
          {
            if (*((void *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4))
            {
LABEL_38:
              unint64_t v6 = v82;
              goto LABEL_109;
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v16) {
              break;
            }
          }
          unint64_t v18 = *(char **)v18;
        }
        while (v18);
      }
    }
LABEL_25:
    if (v15 > 1)
    {
      unint64_t v5 = HIDWORD(a4);
      if (v13 <= v12) {
        unint64_t v5 = v12 % v13;
      }
    }
    else
    {
      unint64_t v5 = (v13 - 1) & HIDWORD(a4);
    }
    unsigned int v21 = *(void ***)(*(void *)(a1 + 48) + 8 * v5);
    if (v21)
    {
      unint64_t v18 = (char *)*v21;
      if (*v21)
      {
        if (v15 < 2)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v18 + 1);
            if (v22 == v12)
            {
              if (*((void *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4)) {
                goto LABEL_38;
              }
            }
            else if ((v22 & (v13 - 1)) != v5)
            {
              goto LABEL_39;
            }
            unint64_t v18 = *(char **)v18;
            if (!v18) {
              goto LABEL_39;
            }
          }
        }
        unint64_t v6 = v82;
        while (1)
        {
          unint64_t v44 = *((void *)v18 + 1);
          if (v44 == v12)
          {
            if (*((void *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4)) {
              goto LABEL_109;
            }
          }
          else
          {
            if (v44 >= v13) {
              v44 %= v13;
            }
            if (v44 != v5) {
              goto LABEL_40;
            }
          }
          unint64_t v18 = *(char **)v18;
          if (!v18) {
            goto LABEL_40;
          }
        }
      }
    }
LABEL_39:
    unint64_t v6 = v82;
  }
LABEL_40:
  unint64_t v18 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v18 = 0;
  *((void *)v18 + 1) = v12;
  *((void *)v18 + 2) = a3;
  *((void *)v18 + 3) = a4;
  *((void *)v18 + 5) = 0;
  *((void *)v18 + 6) = 0;
  *((void *)v18 + 4) = 0;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v24 = *(float *)(a1 + 80);
  if (!v13 || (float)(v24 * (float)v13) < v23)
  {
    BOOL v25 = 1;
    if (v13 >= 3) {
      BOOL v25 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v13);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v13 = *(void *)(a1 + 56);
    }
    if (prime <= v13)
    {
      if (prime >= v13) {
        goto LABEL_86;
      }
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v13 < 3 || (uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime >= v13)
      {
        unint64_t v13 = *(void *)(a1 + 56);
LABEL_86:
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v13 <= v12) {
            unint64_t v5 = v12 % v13;
          }
          else {
            unint64_t v5 = v12;
          }
        }
        else
        {
          unint64_t v5 = (v13 - 1) & v12;
        }
        goto LABEL_99;
      }
      if (!prime)
      {
        uint64_t v81 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        if (v81) {
          operator delete(v81);
        }
        unint64_t v13 = 0;
        *(void *)(a1 + 56) = 0;
        goto LABEL_86;
      }
    }
    if (prime >> 61) {
      goto LABEL_154;
    }
    uint64_t v29 = operator new(8 * prime);
    size_t v30 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = 0;
    *(void *)(a1 + 56) = prime;
    do
      *(void *)(*(void *)(a1 + 48) + 8 * v31++) = 0;
    while (prime != v31);
    uint64_t v33 = a1 + 64;
    unint64_t v32 = *(void **)(a1 + 64);
    if (!v32)
    {
LABEL_85:
      unint64_t v13 = prime;
      goto LABEL_86;
    }
    size_t v34 = v32[1];
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(*(void *)(a1 + 48) + 8 * v36) = v33;
      for (uint64_t i = (void *)*v32; *v32; uint64_t i = (void *)*v32)
      {
        size_t v38 = i[1] & v35;
        if (v38 == v36)
        {
          unint64_t v32 = i;
        }
        else
        {
          uint64_t v39 = *(void *)(a1 + 48);
          if (*(void *)(v39 + 8 * v38))
          {
            *unint64_t v32 = *i;
            uint64_t v40 = 8 * v38;
            void *i = **(void **)(*(void *)(a1 + 48) + v40);
            **(void **)(*(void *)(a1 + 48) + v40) = i;
          }
          else
          {
            *(void *)(v39 + 8 * v38) = v32;
            unint64_t v32 = i;
            size_t v36 = v38;
          }
        }
      }
      goto LABEL_85;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(*(void *)(a1 + 48) + 8 * v34) = v33;
    char v45 = (void *)*v32;
    if (!*v32) {
      goto LABEL_85;
    }
    while (1)
    {
      size_t v47 = v45[1];
      if (v47 >= prime) {
        v47 %= prime;
      }
      if (v47 != v34)
      {
        uint64_t v48 = *(void *)(a1 + 48);
        if (!*(void *)(v48 + 8 * v47))
        {
          *(void *)(v48 + 8 * v47) = v32;
          goto LABEL_90;
        }
        *unint64_t v32 = *v45;
        uint64_t v46 = 8 * v47;
        *char v45 = **(void **)(*(void *)(a1 + 48) + v46);
        **(void **)(*(void *)(a1 + 48) + v46) = v45;
        char v45 = v32;
      }
      size_t v47 = v34;
LABEL_90:
      unint64_t v32 = v45;
      char v45 = (void *)*v45;
      size_t v34 = v47;
      if (!v45) {
        goto LABEL_85;
      }
    }
  }
LABEL_99:
  uint64_t v49 = *(void *)(a1 + 48);
  BOOL v50 = *(void **)(v49 + 8 * v5);
  if (v50)
  {
    *(void *)unint64_t v18 = *v50;
LABEL_107:
    *BOOL v50 = v18;
    goto LABEL_108;
  }
  *(void *)unint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v18;
  *(void *)(v49 + 8 * v5) = a1 + 64;
  if (*(void *)v18)
  {
    unint64_t v51 = *(void *)(*(void *)v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v51 >= v13) {
        v51 %= v13;
      }
    }
    else
    {
      v51 &= v13 - 1;
    }
    BOOL v50 = (void *)(*(void *)(a1 + 48) + 8 * v51);
    goto LABEL_107;
  }
LABEL_108:
  ++*(void *)(a1 + 72);
LABEL_109:
  uint64_t v52 = *((void *)v18 + 4);
  uint64_t v53 = v18 + 32;
  unint64_t v54 = (*((void *)v18 + 5) - v52) >> 3;
  if (v54 <= v6)
  {
    if (v6 + 1 <= v54)
    {
      if (v6 + 1 < v54) {
        *((void *)v18 + 5) = v52 + 8 * (v6 + 1);
      }
    }
    else
    {
      std::vector<altitude::TextureMap *>::__append((uint64_t)(v18 + 32), v6 + 1 - v54);
    }
    goto LABEL_116;
  }
  if (!*(void *)(v52 + 8 * v6))
  {
LABEL_116:
    uint64_t v56 = (*(uint64_t (**)(void *))(*v11 + 48))(v11);
    uint64_t v55 = v56;
    BOOL v58 = *(char **)(a1 + 32);
    unint64_t v57 = *(void *)(a1 + 40);
    if ((unint64_t)v58 < v57)
    {
      *(void *)BOOL v58 = v56;
      unint64_t v59 = v58 + 8;
LABEL_143:
      *(void *)(a1 + 32) = v59;
      *(void *)(*v53 + 8 * v6) = v55;
      goto LABEL_144;
    }
    unint64_t v60 = v6;
    uint64_t v61 = *(char **)(a1 + 24);
    uint64_t v62 = (v58 - v61) >> 3;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61) {
      abort();
    }
    uint64_t v64 = v57 - (void)v61;
    if (v64 >> 2 > v63) {
      unint64_t v63 = v64 >> 2;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    if (!v65)
    {
      uint64_t v66 = 0;
      goto LABEL_128;
    }
    if (!(v65 >> 61))
    {
      uint64_t v66 = (char *)operator new(8 * v65);
LABEL_128:
      uint64_t v67 = (uint64_t *)&v66[8 * v62];
      uint64_t v68 = &v66[8 * v65];
      *uint64_t v67 = v55;
      unint64_t v59 = v67 + 1;
      if (v58 == v61)
      {
        *(void *)(a1 + 24) = v67;
        *(void *)(a1 + 32) = v59;
        *(void *)(a1 + 40) = v68;
      }
      else
      {
        unint64_t v69 = v58 - v61 - 8;
        if (v69 <= 0x77
          || &v58[-(v69 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v67
          && &v66[v58 - v61 - (v69 & 0xFFFFFFFFFFFFFFF8) - 8] < v58)
        {
          goto LABEL_158;
        }
        uint64_t v70 = (v69 >> 3) + 1;
        uint64_t v71 = &v66[8 * v62 - 16];
        uint8x8_t v72 = v58 - 32;
        uint64_t v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v72;
          long long v74 = *((_OWORD *)v72 + 1);
          *(_OWORD *)uint8x8_t v72 = 0uLL;
          *((_OWORD *)v72 + 1) = 0uLL;
          v72 -= 32;
          *((_OWORD *)v71 - 1) = v75;
          *(_OWORD *)uint64_t v71 = v74;
          v71 -= 32;
          v73 -= 4;
        }
        while (v73);
        v67 -= v70 & 0x3FFFFFFFFFFFFFFCLL;
        v58 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            uint64_t v76 = *((void *)v58 - 1);
            v58 -= 8;
            *(void *)BOOL v58 = 0;
            *--uint64_t v67 = v76;
          }
          while (v58 != v61);
        }
        BOOL v58 = *(char **)(a1 + 24);
        uint8x8_t v77 = *(char **)(a1 + 32);
        *(void *)(a1 + 24) = v67;
        *(void *)(a1 + 32) = v59;
        *(void *)(a1 + 40) = v68;
        while (v77 != v58)
        {
          uint64_t v79 = *((void *)v77 - 1);
          v77 -= 8;
          uint64_t v78 = v79;
          *(void *)uint8x8_t v77 = 0;
          if (v79)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v78 + 72));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v78 + 48));
            MEMORY[0x1A6239270](v78, 0x1070C4044CBF76DLL);
          }
        }
      }
      unint64_t v6 = v60;
      if (v58) {
        operator delete(v58);
      }
      goto LABEL_143;
    }
LABEL_154:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v55 = 0;
LABEL_144:
  (*(void (**)(void *))(*v11 + 40))(v11);
  return v55;
}

void std::vector<altitude::TextureMap *>::__append(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v13 = operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint8x8_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    BOOL v17 = &v14[v15];
    if (v5 == v7)
    {
      unint64_t v7 = v5;
    }
    else
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_33;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      unint64_t v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v20 = &v13[8 * v9 - 16];
      unsigned int v21 = v5 - 16;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *uint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          uint64_t v24 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
        unint64_t v7 = *(char **)a1;
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::__function::__func<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0,std::allocator<md::FrameGraphBuilder::createResource(md::FrameGraphAttachmentDescriptor const&,geo::StringLiteral,unsigned long)::$_0>,md::FrameGraphLogicalResource * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ita::FrameHandle>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::RenderTargetToPrepare>(v3);
  unint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v60, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v58, v9, v4, v6, *(void *)(v9 + 32));
  if (v59 == v63)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = (void **)result;
  }
  else
  {
    uint64_t v11 = (void **)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = (unint64_t)*v10;
      uint64_t v13 = v4[4];
      if (v12 >> 39 < (v4[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v4[7],
            uint64_t v16 = v4[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v4[11];
        uint64_t v22 = v4[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v4[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        long long v23 = 0;
      }
      else {
        long long v23 = (void *)v22;
      }
      uint64_t v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v24 != 0x8C3843AC816FCBCLL)
      {
        BOOL v25 = v24 + 5;
        do
        {
          uint64_t v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0x8C3843AC816FCBCLL);
        uint64_t v24 = v25 - 5;
      }
      uint64_t v27 = v24[3];
      size_t v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr, uint64_t, void))(*(void *)v27 + 56))(v64, v27, *v23);
      if (v65)
      {
        size_t v30 = *(void **)(a1 + 8);
        uint64_t v31 = *v11;
        uint64_t v67 = (void (**)(void **))&unk_1EF5261C8;
        *(void *)&long long v68 = v64[1];
        *((void *)&v68 + 1) = v31;
        unint64_t v69 = (void **)&v67;
        uint8x8_t v72 = &v70;
        uint64_t v70 = &unk_1EF5261C8;
        long long v71 = v68;
        int v73 = 0;
        ecs2::Runtime::queueCommand(v30, (uint64_t)&v70);
        if (v73 != -1) {
          ((void (*)(char *, void **))off_1EF5904C0[v73])(&v66, &v70);
        }
        int v73 = -1;
        if (v69 == (void **)&v67)
        {
          v67[4]((void **)&v67);
          if (!v65) {
            goto LABEL_73;
          }
        }
        else
        {
          if (v69) {
            (*((void (**)(void))*v69 + 5))();
          }
          if (!v65)
          {
LABEL_73:
            std::__throw_bad_optional_access[abi:nn180100]();
            __break(1u);
          }
        }
        unint64_t v32 = *(void **)(a1 + 8);
        uint64_t v33 = *v11;
        uint64_t v67 = (void (**)(void **))&unk_1EF526210;
        *(void *)&long long v68 = v64[0];
        *((void *)&v68 + 1) = v33;
        unint64_t v69 = (void **)&v67;
        uint8x8_t v72 = &v70;
        uint64_t v70 = &unk_1EF526210;
        long long v71 = v68;
        int v73 = 0;
        ecs2::Runtime::queueCommand(v32, (uint64_t)&v70);
        if (v73 != -1) {
          ((void (*)(char *, void **))off_1EF5904C0[v73])(&v66, &v70);
        }
        int v73 = -1;
        if (v69 == (void **)&v67)
        {
          v67[4]((void **)&v67);
        }
        else if (v69)
        {
          (*((void (**)(void))*v69 + 5))();
        }
        uint64_t v34 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v27 + 72))(v27, *v23, 3);
        uint64_t v35 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 72))(v27, *v23, 0);
        uint64_t v36 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v27 + 72))(v27, *v23, 1);
        size_t v37 = *(void **)(a1 + 8);
        size_t v38 = *v11;
        uint64_t v39 = (void **)operator new(0x28uLL);
        *uint64_t v39 = &unk_1EF526180;
        v39[1] = (void *)v34;
        v39[2] = (void *)v35;
        v39[3] = (void *)v36;
        v39[4] = v38;
        uint8x8_t v72 = v39;
        unint64_t v69 = 0;
        int v73 = 0;
        ecs2::Runtime::queueCommand(v37, (uint64_t)&v70);
        if (v73 != -1) {
          ((void (*)(char *, void **))off_1EF5904C0[v73])(&v66, &v70);
        }
        int v73 = -1;
        uint64_t result = (uint64_t)v69;
        if (v69 == (void **)&v67)
        {
          uint64_t result = ((uint64_t (*)(void **))v67[4])((void **)&v67);
        }
        else if (v69)
        {
          uint64_t result = (*((uint64_t (**)(void))*v69 + 5))();
        }
      }
      uint64_t v40 = v63;
      unint64_t v10 = *(void ***)(v60 + 32);
      if (++v63 != v10)
      {
        uint64_t v41 = v61[4];
        unint64_t v42 = (v61[5] - v41) >> 3;
        uint64_t v43 = v40 + 2;
        while (1)
        {
          unint64_t v44 = *((unsigned int *)v43 - 1);
          unint64_t v45 = v44 >> 7;
          if (v44 >> 7 < v42)
          {
            uint64_t v46 = *(void *)(v41 + 8 * v45);
            if (v46)
            {
              unint64_t v47 = *(unsigned __int16 *)(v46 + 2 * (v44 & 0x7F));
              uint64_t v48 = v61[7];
              uint64_t result = v61[8];
              if (v47 < (result - v48) >> 3)
              {
                uint64_t v49 = v48 + 8 * v47;
                if (v49 != result && *(_DWORD *)(v49 + 4) == v44)
                {
                  uint64_t v51 = v62[4];
                  uint64_t result = v62[5] - v51;
                  if (v45 < result >> 3)
                  {
                    uint64_t v52 = *(void *)(v51 + 8 * v45);
                    if (v52)
                    {
                      unint64_t v53 = *(unsigned __int16 *)(v52 + 2 * (v44 & 0x7F));
                      uint64_t v55 = v62[7];
                      uint64_t v54 = v62[8];
                      uint64_t result = v54 - v55;
                      if (v53 < (v54 - v55) >> 3)
                      {
                        uint64_t v56 = v55 + 8 * v53;
                        if (v56 != v54 && *(_DWORD *)(v56 + 4) == v44) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v63 = v43;
          BOOL v20 = v43++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        unint64_t v10 = v43 - 1;
      }
LABEL_9:
      ;
    }
    while (v59 != v10);
  }
  *uint64_t v11 = (void *)0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t md::MapEngineFrameService::callbackGraphHandle(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1[11];
  if (a2 >= (unint64_t)((a1[12] - v3) >> 3)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  if (!v4) {
    return 0;
  }
  if (HIDWORD(a2) != HIDWORD(v4)) {
    return 0;
  }
  unint64_t v5 = (void *)(a1[14] + 8 * v4);
  if (v5 == (void *)a1[15]) {
    return 0;
  }
  unint64_t v6 = (char **)(*v5 + 96);
  unint64_t v7 = *v6;
  ++v6[3];
  uint64_t v8 = v6[1];
  if (v7 != v8)
  {
    while (*v7 != a3)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_12;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10[0] = a3;
    uint64_t v11 = 0;
    unint64_t v7 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert((uint64_t)v6, v10);
  }
  return *((void *)v7 + 1);
}

uint64_t gdc::Registry::storage<md::ls::RenderTargetToPrepare>(int8x8_t *a1)
{
  unint64_t v10 = 0x90024251D45E5EE8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x90024251D45E5EE8;
    if (*(void *)&v1 <= 0x90024251D45E5EE8) {
      unint64_t v3 = 0x90024251D45E5EE8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x90024251D45E5EE8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x90024251D45E5EE8)
      {
        if (v5[2] == 0x90024251D45E5EE8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x90024251D45E5EE8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x90024251D45E5EE8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D854C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A19D8C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v18)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void sub_1A19D8EEC()
{
}

void sub_1A19D8EF4()
{
}

void sub_1A19D8EFC()
{
}

void sub_1A19D8F04()
{
}

void ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsDecal>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  uint64_t v14 = *(void **)(v12 + 24);
  uint64_t v13 = *(void **)(v12 + 32);
  unint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      uint64_t v14 = v15;
      unint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  uint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      unint64_t v31 = v4[11];
      unint64_t v32 = v4[10] + v26;
    }
    else
    {
LABEL_23:
      unint64_t v31 = v4[11];
      unint64_t v32 = v31;
    }
    unint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v5[10] + 24 * v36;
    }
    else
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = *(void **)(v12 + 32);
    BOOL v20 = v14 + 1;
    unint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          BOOL v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      unint64_t v83 = v20;
    }
    uint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 8 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v98[0] = (uint64_t)v3;
  v98[1] = (uint64_t)v4;
  v98[2] = (uint64_t)v5;
  v98[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v96, v98);
  uint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    uint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] < v7[4] - v7[3]) {
    uint64_t v7 = v5 + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    uint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v97;
  if (v8 == v97)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v10 = (void *)result;
LABEL_97:
    *unint64_t v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    unint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v96[0];
    uint64_t v12 = (void *)v96[1];
    uint64_t v13 = (void *)v96[2];
    uint64_t v93 = (void *)v96[4];
    uint64_t v94 = (void *)v96[3];
    while (1)
    {
      *unint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = v5[11];
        unint64_t v46 = v5[10] + v40;
      }
      else
      {
        unint64_t v45 = v5[11];
        unint64_t v46 = v45;
      }
      unint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      uint64_t v14 = v9 + 1;
      uint64_t v97 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v94[4];
                          if (v63 < (v94[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v94[7];
                              uint64_t v81 = v94[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v93[4];
                                  if (v63 < (v93[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v93[7];
                                      uint64_t v88 = v93[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        uint64_t v97 = v14;
      }
      uint64_t v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v92);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(int8x8_t *a1)
{
  uint64_t v10 = 0xE7D1C5E790E8E07;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0xE7D1C5E790E8E07;
    if (*(void *)&v1 <= 0xE7D1C5E790E8E07uLL) {
      uint64_t v3 = 0xE7D1C5E790E8E07uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0xE7D1C5E790E8E07;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE7D1C5E790E8E07)
      {
        if (v5[2] == 0xE7D1C5E790E8E07) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE7D1C5E790E8E07) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE7D1C5E790E8E07) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19D9994(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v98[0] = (uint64_t)v3;
  v98[1] = (uint64_t)v4;
  v98[2] = (uint64_t)v5;
  v98[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v96, v98);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] < v7[4] - v7[3]) {
    unint64_t v7 = v5 + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v97;
  if (v8 == v97)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v10 = (void *)result;
LABEL_97:
    *uint64_t v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v96[0];
    uint64_t v12 = (void *)v96[1];
    uint64_t v13 = (void *)v96[2];
    uint64_t v93 = (void *)v96[4];
    uint64_t v94 = (void *)v96[3];
    while (1)
    {
      *uint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 24 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = v5[11];
        unint64_t v46 = v5[10] + v40;
      }
      else
      {
        unint64_t v45 = v5[11];
        unint64_t v46 = v45;
      }
      unint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      uint64_t v14 = v9 + 1;
      uint64_t v97 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v94[4];
                          if (v63 < (v94[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v94[7];
                              uint64_t v81 = v94[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v93[4];
                                  if (v63 < (v93[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v93[7];
                                      uint64_t v88 = v93[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        uint64_t v97 = v14;
      }
      uint64_t v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v92);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(int8x8_t *a1)
{
  uint64_t v10 = 0x3EB2A2A09E298E0ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3EB2A2A09E298E0ELL;
    if (*(void *)&v1 <= 0x3EB2A2A09E298E0EuLL) {
      uint64_t v3 = 0x3EB2A2A09E298E0EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3EB2A2A09E298E0ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3EB2A2A09E298E0ELL)
      {
        if (v5[2] == 0x3EB2A2A09E298E0ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3EB2A2A09E298E0ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3EB2A2A09E298E0ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DA078(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IsMaterial>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  unint64_t v7 = (void *)gdc::Registry::storage<md::ls::IsOpaque>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v125[0] = (uint64_t)v3;
  v125[1] = (uint64_t)v4;
  v125[2] = (uint64_t)v5;
  v125[3] = (uint64_t)v6;
  v125[4] = (uint64_t)v7;
  v125[5] = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v123, v125);
  uint64_t v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    uint64_t v9 = v4 + 4;
  }
  if (v5[8] - v5[7] < v9[4] - v9[3]) {
    uint64_t v9 = v5 + 4;
  }
  if (v6[8] - v6[7] < v9[4] - v9[3]) {
    uint64_t v9 = v6 + 4;
  }
  if (v8[8] - v8[7] < v9[4] - v9[3]) {
    uint64_t v9 = v8 + 4;
  }
  uint64_t v10 = v124;
  float v121 = (unint64_t *)v9[4];
  if (v121 == v124)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = (void *)result;
LABEL_125:
    *uint64_t v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)v123[1];
    uint64_t v13 = (void *)v123[2];
    uint64_t v119 = (void *)v123[3];
    uint64_t v120 = v123[0];
    unint64_t v117 = (void *)v123[5];
    uint64_t v118 = (void *)v123[4];
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v15 = *v10;
      unint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 24 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 8 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      if (v46 == v45) {
        uint64_t v47 = 0;
      }
      else {
        uint64_t v47 = v46;
      }
      uint64_t v48 = v7[4];
      if (v17 < (v7[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v7[7],
            uint64_t v51 = v7[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        unint64_t v55 = v7[11];
        unint64_t v56 = v7[10] + v50;
      }
      else
      {
        unint64_t v55 = v7[11];
        unint64_t v56 = v55;
      }
      if (v56 == v55) {
        unint64_t v56 = 0;
      }
      if ((uint64_t v57 = v6[4], v17 < (v6[5] - v57) >> 3)
        && (uint64_t v58 = *(void *)(v57 + 8 * v17)) != 0
        && (unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v61 = v6[7],
            uint64_t v60 = v6[8],
            v59 < (v60 - v61) >> 3)
        && ((uint64_t v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == v16) : (v63 = 0), v63))
      {
        uint64_t v64 = v6[11];
        uint64_t v65 = v6[10] + 8 * v59;
      }
      else
      {
        uint64_t v64 = v6[11];
        uint64_t v65 = v64;
      }
      uint64_t v66 = v65 == v64 ? 0 : v65;
      if ((uint64_t v67 = v8[4], v17 < (v8[5] - v67) >> 3)
        && (uint64_t v68 = *(void *)(v67 + 8 * v17)) != 0
        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v71 = v8[7],
            uint64_t v70 = v8[8],
            v69 < (v70 - v71) >> 3)
        && ((uint64_t v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == v16) : (v73 = 0), v73))
      {
        uint64_t v74 = v8[11];
        uint64_t v75 = v8[10] + 8 * v69;
      }
      else
      {
        uint64_t v74 = v8[11];
        uint64_t v75 = v74;
      }
      unint64_t v126 = v56;
      uint64_t v76 = *(void *)(a2 + 24);
      if (!v76) {
        break;
      }
      if (v75 == v74) {
        uint64_t v77 = 0;
      }
      else {
        uint64_t v77 = v75;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v76 + 48))(v76, v27, v37, v47, &v126, v66, v77);
      uint64_t v79 = *(unint64_t **)(v120 + 32);
      uint64_t v14 = v10 + 1;
      unint64_t v124 = v10 + 1;
      if (v10 + 1 != v79)
      {
        uint64_t v80 = v12[4];
        while (1)
        {
          unint64_t v81 = *((unsigned int *)v14 + 1);
          unint64_t v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            uint64_t v83 = *(void *)(v80 + 8 * v82);
            if (v83)
            {
              uint64_t v84 = v81 & 0x7F;
              unint64_t v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              uint64_t v87 = v12[7];
              uint64_t v86 = v12[8];
              uint64_t result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                uint64_t v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == v81)
                {
                  uint64_t v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    uint64_t v91 = *(void *)(v90 + 8 * v82);
                    if (v91)
                    {
                      unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      uint64_t v94 = v13[7];
                      uint64_t v93 = v13[8];
                      uint64_t result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        uint64_t v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == v81)
                        {
                          uint64_t v97 = v119[4];
                          if (v82 < (v119[5] - v97) >> 3)
                          {
                            uint64_t v98 = *(void *)(v97 + 8 * v82);
                            if (v98)
                            {
                              unint64_t v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              uint64_t v101 = v119[7];
                              uint64_t v100 = v119[8];
                              uint64_t result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                uint64_t v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == v81)
                                {
                                  uint64_t v104 = v118[4];
                                  if (v82 < (v118[5] - v104) >> 3)
                                  {
                                    uint64_t v105 = *(void *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      uint64_t v108 = v118[7];
                                      uint64_t v107 = v118[8];
                                      uint64_t result = v107 - v108;
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        uint64_t v109 = v108 + 8 * v106;
                                        if (v109 != v107 && *(_DWORD *)(v109 + 4) == v81)
                                        {
                                          uint64_t v110 = v117[4];
                                          if (v82 < (v117[5] - v110) >> 3)
                                          {
                                            uint64_t v111 = *(void *)(v110 + 8 * v82);
                                            if (v111)
                                            {
                                              unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v84);
                                              uint64_t v114 = v117[7];
                                              uint64_t v113 = v117[8];
                                              if (v112 < (v113 - v114) >> 3)
                                              {
                                                uint64_t v115 = v114 + 8 * v112;
                                                if (*(_DWORD *)(v115 + 4) == v81 && v115 != v113) {
                                                  break;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            uint64_t v14 = v79;
            goto LABEL_12;
          }
        }
        uint64_t v79 = v14;
LABEL_12:
        unint64_t v124 = v14;
      }
      uint64_t v10 = v79;
      if (v121 == v79) {
        goto LABEL_125;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::RenderItemID>(v116);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RenderItemID>(int8x8_t *a1)
{
  unint64_t v10 = 0xD68EA0DE832DEC03;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD68EA0DE832DEC03;
    if (*(void *)&v1 <= 0xD68EA0DE832DEC03) {
      unint64_t v3 = 0xD68EA0DE832DEC03 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD68EA0DE832DEC03;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD68EA0DE832DEC03)
      {
        if (v5[2] == 0xD68EA0DE832DEC03) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD68EA0DE832DEC03) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD68EA0DE832DEC03) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DA8C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderableHash>(int8x8_t *a1)
{
  uint64_t v10 = 0x763953A644184BA9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x763953A644184BA9;
    if (*(void *)&v1 <= 0x763953A644184BA9uLL) {
      uint64_t v3 = 0x763953A644184BA9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x763953A644184BA9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x763953A644184BA9)
      {
        if (v5[2] == 0x763953A644184BA9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x763953A644184BA9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x763953A644184BA9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DAB34(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderOrderToUse>(int8x8_t *a1)
{
  unint64_t v10 = 0x9158B59D97A4E38DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9158B59D97A4E38DLL;
    if (*(void *)&v1 <= 0x9158B59D97A4E38DLL) {
      unint64_t v3 = 0x9158B59D97A4E38DLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9158B59D97A4E38DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9158B59D97A4E38DLL)
      {
        if (v5[2] == 0x9158B59D97A4E38DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9158B59D97A4E38DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9158B59D97A4E38DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DADA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsOpaque>(int8x8_t *a1)
{
  uint64_t v10 = 0x7087983DEF28DBFELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7087983DEF28DBFELL;
    if (*(void *)&v1 <= 0x7087983DEF28DBFEuLL) {
      uint64_t v3 = 0x7087983DEF28DBFEuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7087983DEF28DBFELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7087983DEF28DBFELL)
      {
        if (v5[2] == 0x7087983DEF28DBFELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7087983DEF28DBFELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7087983DEF28DBFELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DB014(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsMaterial>(int8x8_t *a1)
{
  uint64_t v10 = 0x3E8485C60908F920;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3E8485C60908F920;
    if (*(void *)&v1 <= 0x3E8485C60908F920uLL) {
      uint64_t v3 = 0x3E8485C60908F920uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3E8485C60908F920;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3E8485C60908F920)
      {
        if (v5[2] == 0x3E8485C60908F920) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3E8485C60908F920) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3E8485C60908F920) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DB284(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[5];
  uint64_t v8 = *a2 + 32;
  if (!*a2) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v4 + 32;
  if (!v4) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v5 + 32;
  if (!v5) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v6 + 32;
  if (!v6) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v7 + 32;
  if (!v7) {
    uint64_t v12 = 0;
  }
  if (*(void *)(v9 + 32) - *(void *)(v9 + 24) < *(void *)(v8 + 32) - *(void *)(v8 + 24)) {
    uint64_t v8 = v9;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v8 + 32) - *(void *)(v8 + 24)) {
    uint64_t v8 = v10;
  }
  uint64_t result = *(void *)(v8 + 24);
  if (*(void *)(v11 + 32) - *(void *)(v11 + 24) < (unint64_t)(*(void *)(v8 + 32) - result)) {
    uint64_t v8 = v11;
  }
  if (*(void *)(v12 + 32) - *(void *)(v12 + 24) < *(void *)(v8 + 32) - *(void *)(v8 + 24)) {
    uint64_t v8 = v12;
  }
  *a1 = v8;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  uint64_t v15 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(v8 + 32);
  a1[7] = v15;
  if (v14 != v15)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v16 = v15 + 8;
      do
      {
        a1[7] = v16;
        if (v16 == v14) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v16 += 8;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0x9705908F280836EDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9705908F280836EDLL;
    if (*(void *)&v1 <= 0x9705908F280836EDLL) {
      unint64_t v3 = 0x9705908F280836EDLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9705908F280836EDLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9705908F280836EDLL)
      {
        if (v5[2] == 0x9705908F280836EDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9705908F280836EDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9705908F280836EDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DB60C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::IsMaterial>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::CustomZIndex>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderableHash>(v2);
  unint64_t v7 = (void *)gdc::Registry::storage<md::ls::IsOpaque>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v125[0] = (uint64_t)v3;
  v125[1] = (uint64_t)v4;
  v125[2] = (uint64_t)v5;
  v125[3] = (uint64_t)v6;
  v125[4] = (uint64_t)v7;
  v125[5] = (uint64_t)v8;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v123, v125);
  uint64_t v9 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    uint64_t v9 = v4 + 4;
  }
  if (v5[8] - v5[7] < v9[4] - v9[3]) {
    uint64_t v9 = v5 + 4;
  }
  if (v6[8] - v6[7] < v9[4] - v9[3]) {
    uint64_t v9 = v6 + 4;
  }
  if (v8[8] - v8[7] < v9[4] - v9[3]) {
    uint64_t v9 = v8 + 4;
  }
  unint64_t v10 = v124;
  float v121 = (unint64_t *)v9[4];
  if (v121 == v124)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = (void *)result;
LABEL_125:
    *uint64_t v11 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)v123[1];
    uint64_t v13 = (void *)v123[2];
    uint64_t v119 = (void *)v123[3];
    uint64_t v120 = v123[0];
    unint64_t v117 = (void *)v123[5];
    uint64_t v118 = (void *)v123[4];
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v15 = *v10;
      unint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 24 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 8 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      if (v46 == v45) {
        uint64_t v47 = 0;
      }
      else {
        uint64_t v47 = v46;
      }
      uint64_t v48 = v7[4];
      if (v17 < (v7[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v7[7],
            uint64_t v51 = v7[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        unint64_t v55 = v7[11];
        unint64_t v56 = v7[10] + v50;
      }
      else
      {
        unint64_t v55 = v7[11];
        unint64_t v56 = v55;
      }
      if (v56 == v55) {
        unint64_t v56 = 0;
      }
      if ((uint64_t v57 = v6[4], v17 < (v6[5] - v57) >> 3)
        && (uint64_t v58 = *(void *)(v57 + 8 * v17)) != 0
        && (unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v61 = v6[7],
            uint64_t v60 = v6[8],
            v59 < (v60 - v61) >> 3)
        && ((uint64_t v62 = v61 + 8 * v59, v62 != v60) ? (v63 = *(_DWORD *)(v62 + 4) == v16) : (v63 = 0), v63))
      {
        uint64_t v64 = v6[11];
        uint64_t v65 = v6[10] + 8 * v59;
      }
      else
      {
        uint64_t v64 = v6[11];
        uint64_t v65 = v64;
      }
      uint64_t v66 = v65 == v64 ? 0 : v65;
      if ((uint64_t v67 = v8[4], v17 < (v8[5] - v67) >> 3)
        && (uint64_t v68 = *(void *)(v67 + 8 * v17)) != 0
        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v71 = v8[7],
            uint64_t v70 = v8[8],
            v69 < (v70 - v71) >> 3)
        && ((uint64_t v72 = v71 + 8 * v69, v72 != v70) ? (v73 = *(_DWORD *)(v72 + 4) == v16) : (v73 = 0), v73))
      {
        uint64_t v74 = v8[11];
        uint64_t v75 = v8[10] + 8 * v69;
      }
      else
      {
        uint64_t v74 = v8[11];
        uint64_t v75 = v74;
      }
      unint64_t v126 = v56;
      uint64_t v76 = *(void *)(a2 + 24);
      if (!v76) {
        break;
      }
      if (v75 == v74) {
        uint64_t v77 = 0;
      }
      else {
        uint64_t v77 = v75;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v76 + 48))(v76, v27, v37, v47, &v126, v66, v77);
      uint64_t v79 = *(unint64_t **)(v120 + 32);
      uint64_t v14 = v10 + 1;
      unint64_t v124 = v10 + 1;
      if (v10 + 1 != v79)
      {
        uint64_t v80 = v12[4];
        while (1)
        {
          unint64_t v81 = *((unsigned int *)v14 + 1);
          unint64_t v82 = v81 >> 7;
          if (v81 >> 7 < (v12[5] - v80) >> 3)
          {
            uint64_t v83 = *(void *)(v80 + 8 * v82);
            if (v83)
            {
              uint64_t v84 = v81 & 0x7F;
              unint64_t v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              uint64_t v87 = v12[7];
              uint64_t v86 = v12[8];
              uint64_t result = v86 - v87;
              if (v85 < (v86 - v87) >> 3)
              {
                uint64_t v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == v81)
                {
                  uint64_t v90 = v13[4];
                  if (v82 < (v13[5] - v90) >> 3)
                  {
                    uint64_t v91 = *(void *)(v90 + 8 * v82);
                    if (v91)
                    {
                      unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      uint64_t v94 = v13[7];
                      uint64_t v93 = v13[8];
                      uint64_t result = v93 - v94;
                      if (v92 < (v93 - v94) >> 3)
                      {
                        uint64_t v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == v81)
                        {
                          uint64_t v97 = v119[4];
                          if (v82 < (v119[5] - v97) >> 3)
                          {
                            uint64_t v98 = *(void *)(v97 + 8 * v82);
                            if (v98)
                            {
                              unint64_t v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              uint64_t v101 = v119[7];
                              uint64_t v100 = v119[8];
                              uint64_t result = v100 - v101;
                              if (v99 < (v100 - v101) >> 3)
                              {
                                uint64_t v102 = v101 + 8 * v99;
                                if (v102 != v100 && *(_DWORD *)(v102 + 4) == v81)
                                {
                                  uint64_t v104 = v118[4];
                                  if (v82 < (v118[5] - v104) >> 3)
                                  {
                                    uint64_t v105 = *(void *)(v104 + 8 * v82);
                                    if (v105)
                                    {
                                      unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * v84);
                                      uint64_t v108 = v118[7];
                                      uint64_t v107 = v118[8];
                                      uint64_t result = v107 - v108;
                                      if (v106 < (v107 - v108) >> 3)
                                      {
                                        uint64_t v109 = v108 + 8 * v106;
                                        if (v109 != v107 && *(_DWORD *)(v109 + 4) == v81)
                                        {
                                          uint64_t v110 = v117[4];
                                          if (v82 < (v117[5] - v110) >> 3)
                                          {
                                            uint64_t v111 = *(void *)(v110 + 8 * v82);
                                            if (v111)
                                            {
                                              unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v84);
                                              uint64_t v114 = v117[7];
                                              uint64_t v113 = v117[8];
                                              if (v112 < (v113 - v114) >> 3)
                                              {
                                                uint64_t v115 = v114 + 8 * v112;
                                                if (*(_DWORD *)(v115 + 4) == v81 && v115 != v113) {
                                                  break;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v79)
          {
            uint64_t v14 = v79;
            goto LABEL_12;
          }
        }
        uint64_t v79 = v14;
LABEL_12:
        unint64_t v124 = v14;
      }
      unint64_t v10 = v79;
      if (v121 == v79) {
        goto LABEL_125;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::CustomZIndex>(v116);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::CustomZIndex>(int8x8_t *a1)
{
  uint64_t v10 = 0x3EAAB620EAA88EC8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3EAAB620EAA88EC8;
    if (*(void *)&v1 <= 0x3EAAB620EAA88EC8uLL) {
      uint64_t v3 = 0x3EAAB620EAA88EC8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3EAAB620EAA88EC8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3EAAB620EAA88EC8)
      {
        if (v5[2] == 0x3EAAB620EAA88EC8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3EAAB620EAA88EC8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3EAAB620EAA88EC8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19DBE58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VenueModeSwitchLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v12[0] = &unk_1EF575360;
  v12[1] = a2;
  v10[0] = &unk_1EF5753A8;
  v10[1] = a2;
  uint64_t v11 = v10;
  unint64_t v15 = v14;
  uint64_t v13 = v12;
  v14[0] = &unk_1EF5753A8;
  v14[1] = a2;
  std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::operator()((uint64_t)v12);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (v13) {
    (*(void (**)(void))(*v13 + 40))();
  }
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 160))
    {
      uint64_t v8 = *(void *)(v7 + 272);
      if (v8)
      {
        if (!**(unsigned char **)(a3 + 16))
        {
          *(unsigned char *)(a1 + 168) = *(unsigned char *)(a1 + 160);
          *(void *)(a1 + 176) = v8 + 16;
          *a4 = *(_OWORD *)(a1 + 168);
        }
      }
    }
  }
LABEL_15:
  if (!v15)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v15 + 48))(v15);
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void sub_1A19DC10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v21)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  std::function<void ()(void)>::~function(&a10);
  std::function<void ()(void)>::~function(&a14);
  _Unwind_Resume(a1);
}

void sub_1A19DC18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (a21) {
    (*(void (**)(void))(*a21 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "VenueModeSwitchLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "VenueModeSwitchLogic", "", v5, 2u);
  }
}

void md::RegionMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 46)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_12;
      }
    }
  }
  if (v5 == v6 || *(void *)(v5 + 32) != 1)
  {
LABEL_12:
    uint64_t v9 = 0;
LABEL_13:
    uint64_t v178 = 0;
    if (v9) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v7 + 112);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v8) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v178 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v9) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v11 = operator new(0x300uLL);
    uint64_t v169 = a3;
    v11[1] = 0;
    _OWORD v11[2] = 0;
    *uint64_t v11 = &unk_1EF580950;
    memset(__p, 0, 24);
    uint64_t v12 = (geo::codec::VectorTile **)(v9 + 144);
    uint64_t v170 = md::MapTileData::MapTileData((uint64_t)(v11 + 3), a1, (uint64_t)__p, (uint64_t *)(v9 + 144), 1);
    void v11[3] = &unk_1EF53A5D0;
    v11[82] = &unk_1EF53A610;
    uint64_t v171 = (int64x2_t *)(v11 + 93);
    v11[93] = 0;
    v11[95] = 0;
    v11[94] = 0;
    uint64_t v13 = *(uint64_t **)(v9 + 144);
    uint64_t v14 = (uint64_t *)geo::codec::VectorTile::regionFeatures((geo::codec::VectorTile *)v13);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (*v14 == v16) {
      goto LABEL_37;
    }
    unint64_t v17 = v16 - v15 - 128;
    if (v17 > 0x7F)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = (v17 >> 7) + 1;
      uint64_t v22 = (void *)(v15 + 136);
      uint64_t v23 = v21 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        if (*(v22 - 16)) {
          ++v19;
        }
        if (*v22) {
          ++v20;
        }
        v22 += 32;
        v23 -= 2;
      }
      while (v23);
      unint64_t v18 = v20 + v19;
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFELL)) {
        goto LABEL_28;
      }
      v15 += (v21 & 0x3FFFFFFFFFFFFFELL) << 7;
    }
    else
    {
      unint64_t v18 = 0;
    }
    do
    {
      if (*(void *)(v15 + 8)) {
        ++v18;
      }
      v15 += 128;
    }
    while (v15 != v16);
LABEL_28:
    uint64_t v24 = v11[95];
    unint64_t v25 = v11[93];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v25) >> 4) < v18)
    {
      if (v18 > 0x555555555555555) {
        abort();
      }
      uint64_t v26 = v11[94];
      *(void *)&__p[32] = v11 + 95;
      uint64_t v27 = (char *)operator new(48 * v18);
      uint64_t v28 = &v27[v26 - v25];
      if (v26 == v25)
      {
        int64x2_t v31 = vdupq_n_s64(v25);
        uint64_t v29 = &v27[v26 - v25];
      }
      else
      {
        uint64_t v29 = &v27[v26 - v25];
        do
        {
          long long v30 = *(_OWORD *)(v26 - 48);
          *((void *)v29 - 4) = *(void *)(v26 - 32);
          *((_OWORD *)v29 - 3) = v30;
          *(_OWORD *)(v29 - 24) = *(_OWORD *)(v26 - 24);
          *((void *)v29 - 1) = *(void *)(v26 - 8);
          v29 -= 48;
          *(void *)(v26 - 24) = 0;
          *(void *)(v26 - 16) = 0;
          *(void *)(v26 - 8) = 0;
          v26 -= 48;
        }
        while (v26 != v25);
        int64x2_t v31 = *v171;
        uint64_t v24 = v11[95];
      }
      v11[93] = v29;
      v11[94] = v28;
      *(int64x2_t *)&__p[8] = v31;
      v11[95] = &v27[48 * v18];
      *(void *)&__p[24] = v24;
      *(void *)std::string __p = v31.i64[0];
      std::__split_buffer<md::MetaDataRegion>::__destruct_at_end[abi:nn180100]((uint64_t)__p, v31.i64[0]);
      if (*(void *)__p) {
        operator delete(*(void **)__p);
      }
    }
LABEL_37:
    uint64_t v173 = v11;
    uint64_t v32 = (uint64_t *)geo::codec::VectorTile::regionFeatures(*v12);
    uint64_t v33 = *v32;
    uint64_t v172 = v32[1];
    if (*v32 == v172)
    {
LABEL_190:
      *uint64_t v169 = v170;
      v169[1] = (uint64_t)v173;
      uint64_t v10 = v178;
      if (!v178) {
        return;
      }
      goto LABEL_191;
    }
    while (1)
    {
      if (*(void *)(v33 + 8))
      {
        memset(&__p[16], 0, 32);
        *(_OWORD *)std::string __p = 0u;
        *(int8x16_t *)std::string __p = vextq_s8(*(int8x16_t *)(v33 + 8), *(int8x16_t *)(v33 + 8), 8uLL);
        *(void *)&__p[16] = *(void *)v33;
        uint64_t v35 = *(unsigned __int16 *)(v33 + 24);
        if (*(_WORD *)(v33 + 24))
        {
          *(void *)&__p[24] = operator new(v35 << 6);
          *(void *)&__p[32] = *(void *)&__p[24];
          *(void *)&__p[40] = *(void *)&__p[24] + (v35 << 6);
          if (*(_WORD *)(v33 + 24))
          {
            uint64_t v176 = 0;
            unsigned int v36 = 0;
            while (1)
            {
              v179[0] = 0;
              v179[1] = 0;
              double v180 = 0;
              uint64_t v37 = v36;
              uint64_t v38 = *(void *)(v33 + 32);
              uint64_t v39 = 32 * v36;
              unint64_t v40 = (uint64_t *)(v38 + v39);
              uint64_t v41 = *(void *)(v38 + v39);
              uint64_t v42 = *(void *)(v38 + v39 + 8);
              if (v42 == v41)
              {
                uint64_t v52 = 0;
                uint64_t v51 = 0;
LABEL_62:
                int64x2_t v175 = vdupq_n_s64((unint64_t)v51);
                v179[0] = 0;
                v179[1] = 0;
                double v180 = 0;
LABEL_63:
                float v53 = 3.4028e38;
                float v54 = -3.4028e38;
                float v55 = 3.4028e38;
                float v56 = -3.4028e38;
                goto LABEL_64;
              }
              unint64_t v43 = (v42 - v41) >> 1;
              uint64_t v44 = *(void *)(v13[440] + 32);
              unint64_t v45 = v43 <= 1 ? 1 : (v42 - v41) >> 1;
              if (v45 < 2) {
                break;
              }
              if (!(_WORD)v45 || (v45 - 1) >> 16 != 0) {
                break;
              }
              uint64_t v127 = 0;
              uint64_t v128 = 0;
              unint64_t v47 = v45 & 0xFFFFFFFFFFFFFFFELL;
              uint64_t v129 = (unsigned __int16 *)(v41 + 2);
              unint64_t v130 = v45 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                uint64_t v131 = *(v129 - 1);
                unsigned int v132 = *v129;
                v129 += 2;
                v127 += *(void *)(v44 + 16 * v131 + 8);
                v128 += *(void *)(v44 + 16 * v132 + 8);
                v130 -= 2;
              }
              while (v130);
              unint64_t v49 = v128 + v127;
              int v48 = v45 & 0xFFFFFFFE;
              if (v45 != v47) {
                goto LABEL_56;
              }
LABEL_57:
              uint64_t v50 = *(void *)(v33 + 64);
              if (v49)
              {
                if (v49 >> 61) {
                  abort();
                }
                uint64_t v51 = (char *)operator new(8 * v49);
                uint64_t v52 = &v51[8 * v49];
                v179[0] = v51;
                v179[1] = v51;
                double v180 = v52;
                uint64_t v41 = *v40;
                if (*(void *)(v38 + 32 * v37 + 8) == *v40) {
                  goto LABEL_62;
                }
              }
              else
              {
                uint64_t v52 = 0;
                uint64_t v51 = 0;
                if (v42 == v41) {
                  goto LABEL_62;
                }
              }
              unint64_t v119 = 0;
              int v120 = 0;
              float v121 = (void *)(v50 + v39);
              uint64_t v122 = (void *)(v38 + 32 * v37 + 8);
              do
              {
                unint64_t v119 = (unsigned __int16)++v120;
                uint64_t v41 = *v40;
              }
              while ((unsigned __int16)v120 < (unint64_t)((*v122 - *v40) >> 1));
              int64x2_t v123 = *(int64x2_t *)v179;
              uint64_t v52 = v180;
              v179[1] = 0;
              double v180 = 0;
              v179[0] = 0;
              unint64_t v124 = (float *)v123.i64[0];
              int64x2_t v175 = v123;
              uint64_t v125 = (float *)v123.i64[1];
              if (v123.i64[0] == v123.i64[1]) {
                goto LABEL_63;
              }
              unint64_t v126 = v123.i64[1] - v123.i64[0] - 8;
              if (v126 < 0x38)
              {
                float v55 = 3.4028e38;
                float v56 = -3.4028e38;
                float v53 = 3.4028e38;
                float v54 = -3.4028e38;
                goto LABEL_157;
              }
              uint64_t v133 = (v126 >> 3) + 1;
              float32x4_t v134 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
              unint64_t v135 = (const float *)(v123.i64[0] + 32);
              v136.i64[0] = 0x80000000800000;
              v136.i64[1] = 0x80000000800000;
              uint64_t v137 = v133 & 0x3FFFFFFFFFFFFFF8;
              v138.i64[0] = 0x80000000800000;
              v138.i64[1] = 0x80000000800000;
              float32x4_t v139 = v134;
              float32x4_t v140 = v134;
              float32x4_t v141 = v134;
              v142.i64[0] = 0x80000000800000;
              v142.i64[1] = 0x80000000800000;
              v143.i64[0] = 0x80000000800000;
              v143.i64[1] = 0x80000000800000;
              do
              {
                uint64_t v144 = v135 - 8;
                float32x4x2_t v184 = vld2q_f32(v144);
                float32x4x2_t v185 = vld2q_f32(v135);
                float32x4_t v134 = vminnmq_f32(v184.val[0], v134);
                float32x4_t v139 = vminnmq_f32(v185.val[0], v139);
                float32x4_t v142 = vmaxnmq_f32(v142, v184.val[0]);
                float32x4_t v143 = vmaxnmq_f32(v143, v185.val[0]);
                float32x4_t v140 = vminnmq_f32(v184.val[1], v140);
                float32x4_t v141 = vminnmq_f32(v185.val[1], v141);
                float32x4_t v136 = vmaxnmq_f32(v136, v184.val[1]);
                float32x4_t v138 = vmaxnmq_f32(v138, v185.val[1]);
                v135 += 16;
                v137 -= 8;
              }
              while (v137);
              float v54 = vmaxnmvq_f32(vmaxnmq_f32(v142, v143));
              float v53 = vminnmvq_f32(vminnmq_f32(v140, v141));
              float v55 = vminnmvq_f32(vminnmq_f32(v134, v139));
              float v56 = vmaxnmvq_f32(vmaxnmq_f32(v136, v138));
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFF8))
              {
                v124 += 2 * (v133 & 0x3FFFFFFFFFFFFFF8);
                do
                {
LABEL_157:
                  float v145 = *v124;
                  float v146 = v124[1];
                  v124 += 2;
                  float v55 = fminf(v145, v55);
                  float v54 = fmaxf(v54, v145);
                  float v53 = fminf(v146, v53);
                  float v56 = fmaxf(v56, v146);
                }
                while (v124 != v125);
              }
LABEL_64:
              int64_t v174 = v52;
              uint64_t v57 = *(void *)(v33 + 96);
              uint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v176);
              if (*(_WORD *)(v57 + 2 * v176))
              {
                unint64_t v59 = (char *)operator new(24 * v58);
                uint64_t v60 = &v59[24 * v58];
                int64x2_t v177 = vdupq_n_s64((unint64_t)v59);
                unsigned int v36 = v37 + 1;
                if (*(_WORD *)(*(void *)(v33 + 96) + 2 * v176))
                {
                  unsigned int v61 = 0;
                  while (2)
                  {
                    memset(v182, 0, 24);
                    uint64_t v62 = v36;
                    uint64_t v63 = *(void *)(v33 + 32);
                    uint64_t v64 = 32 * v36;
                    uint64_t v65 = (uint64_t *)(v63 + v64);
                    uint64_t v66 = *(void *)(v63 + v64);
                    uint64_t v67 = *(void *)(v63 + v64 + 8);
                    if (v67 == v66) {
                      goto LABEL_86;
                    }
                    unint64_t v68 = (v67 - v66) >> 1;
                    uint64_t v69 = *(void *)(v13[440] + 32);
                    if (v68 <= 1) {
                      unint64_t v70 = 1;
                    }
                    else {
                      unint64_t v70 = (v67 - v66) >> 1;
                    }
                    if (v70 < 2 || ((_WORD)v70 ? (BOOL v71 = (v70 - 1) >> 16 == 0) : (BOOL v71 = 0), !v71))
                    {
                      unint64_t v72 = 0;
                      int v73 = 0;
                      unint64_t v74 = 0;
                      goto LABEL_79;
                    }
                    uint64_t v95 = 0;
                    uint64_t v96 = 0;
                    unint64_t v72 = v70 & 0xFFFFFFFFFFFFFFFELL;
                    uint64_t v97 = (unsigned __int16 *)(v66 + 2);
                    unint64_t v98 = v70 & 0xFFFFFFFFFFFFFFFELL;
                    do
                    {
                      uint64_t v99 = *(v97 - 1);
                      unsigned int v100 = *v97;
                      v97 += 2;
                      v95 += *(void *)(v69 + 16 * v99 + 8);
                      v96 += *(void *)(v69 + 16 * v100 + 8);
                      v98 -= 2;
                    }
                    while (v98);
                    unint64_t v74 = v96 + v95;
                    int v73 = v70 & 0xFFFFFFFE;
                    if (v70 != v72)
                    {
                      do
                      {
LABEL_79:
                        v74 += *(void *)(v69 + 16 * *(unsigned __int16 *)(v66 + 2 * v72) + 8);
                        unint64_t v72 = (unsigned __int16)++v73;
                      }
                      while (v68 > (unsigned __int16)v73);
                    }
                    uint64_t v75 = *(void *)(v33 + 64);
                    if (v74)
                    {
                      if (v74 >> 61) {
                        goto LABEL_196;
                      }
                      *(void *)uint64_t v182 = operator new(8 * v74);
                      *(void *)&v182[8] = *(void *)v182;
                      *(void *)&v182[16] = *(void *)v182 + 8 * v74;
                      uint64_t v67 = *(void *)(v63 + 32 * v62 + 8);
                      uint64_t v66 = *v65;
                    }
                    if (v67 != v66)
                    {
                      unint64_t v76 = 0;
                      int v77 = 0;
                      uint64_t v78 = (void *)(v75 + v64);
                      uint64_t v79 = (void *)(v63 + 32 * v62 + 8);
                      do
                      {
                        unint64_t v76 = (unsigned __int16)++v77;
                        uint64_t v66 = *v65;
                      }
                      while ((unsigned __int16)v77 < (unint64_t)((*v79 - *v65) >> 1));
                    }
LABEL_86:
                    uint64_t v80 = (char *)v177.i64[1];
                    v81.i64[0] = v177.i64[0];
                    if (v177.i64[1] >= (unint64_t)v60)
                    {
                      unint64_t v82 = (char *)v177.i64[0];
                      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v177.i64[1] - v177.i64[0]) >> 3) + 1;
                      if (v83 > 0xAAAAAAAAAAAAAAALL) {
LABEL_196:
                      }
                        abort();
                      if (0x5555555555555556 * ((uint64_t)&v60[-v177.i64[0]] >> 3) > v83) {
                        unint64_t v83 = 0x5555555555555556 * ((uint64_t)&v60[-v177.i64[0]] >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v60[-v177.i64[0]] >> 3) >= 0x555555555555555) {
                        unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v84 = v83;
                      }
                      if (v84)
                      {
                        if (v84 > 0xAAAAAAAAAAAAAAALL) {
                          goto LABEL_197;
                        }
                        unint64_t v85 = (char *)operator new(24 * v84);
                      }
                      else
                      {
                        unint64_t v85 = 0;
                      }
                      uint64_t v86 = &v85[8 * ((v177.i64[1] - v177.i64[0]) >> 3)];
                      *(_OWORD *)uint64_t v86 = *(_OWORD *)v182;
                      *((void *)v86 + 2) = *(void *)&v182[16];
                      memset(v182, 0, 24);
                      uint64_t v87 = v86 + 24;
                      uint64_t v88 = (void *)v177.i64[1];
                      if (v177.i64[1] == v177.i64[0])
                      {
                        v177.i64[0] = (uint64_t)&v85[8 * ((v177.i64[1] - v177.i64[0]) >> 3)];
                        if (v177.i64[1]) {
                          goto LABEL_104;
                        }
                      }
                      else
                      {
                        do
                        {
                          *((void *)v86 - 2) = 0;
                          *((void *)v86 - 1) = 0;
                          long long v89 = *(_OWORD *)(v88 - 3);
                          v88 -= 3;
                          *(_OWORD *)(v86 - 24) = v89;
                          uint64_t v90 = (uint64_t)(v86 - 24);
                          *((void *)v86 - 1) = v88[2];
                          *uint64_t v88 = 0;
                          v88[1] = 0;
                          v88[2] = 0;
                          v86 -= 24;
                        }
                        while (v88 != (void *)v177.i64[0]);
                        v177.i64[0] = v90;
                        uint64_t v91 = (char *)v177.i64[1];
                        do
                        {
                          uint64_t v93 = (void *)*((void *)v91 - 3);
                          v91 -= 24;
                          unint64_t v92 = v93;
                          if (v93)
                          {
                            *((void *)v80 - 2) = v92;
                            operator delete(v92);
                          }
                          uint64_t v80 = v91;
                        }
                        while (v91 != v82);
                        uint64_t v80 = v82;
                        if (v82) {
LABEL_104:
                        }
                          operator delete(v80);
                      }
                      uint64_t v60 = &v85[24 * v84];
                      v94.i64[0] = v177.i64[0];
                      v94.i64[1] = (uint64_t)v87;
                      int64x2_t v177 = v94;
                      if (*(void *)v182) {
                        operator delete(*(void **)v182);
                      }
                      goto LABEL_68;
                    }
                    *(_OWORD *)v177.i64[1] = *(_OWORD *)v182;
                    *(void *)(v177.i64[1] + 16) = *(void *)&v182[16];
                    v81.i64[1] = v177.i64[1] + 24;
                    int64x2_t v177 = v81;
LABEL_68:
                    ++v61;
                    unsigned int v36 = v62 + 1;
                    if (v61 >= *(unsigned __int16 *)(*(void *)(v33 + 96) + 2 * v176)) {
                      break;
                    }
                    continue;
                  }
                }
              }
              else
              {
                uint64_t v60 = 0;
                unsigned int v36 = v37 + 1;
                int64x2_t v177 = 0u;
              }
              uint64_t v101 = *(void *)&__p[32];
              if (*(void *)&__p[32] >= *(void *)&__p[40])
              {
                uint64_t v103 = *(void *)&__p[24];
                uint64_t v104 = (uint64_t)(*(void *)&__p[32] - *(void *)&__p[24]) >> 6;
                unint64_t v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 58) {
                  abort();
                }
                uint64_t v106 = *(void *)&__p[40] - *(void *)&__p[24];
                if ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[24]) >> 5 > v105) {
                  unint64_t v105 = v106 >> 5;
                }
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFC0) {
                  unint64_t v107 = 0x3FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v105;
                }
                uint64_t v183 = &__p[40];
                if (v107 >> 58) {
                  goto LABEL_197;
                }
                uint64_t v108 = (char *)operator new(v107 << 6);
                uint64_t v109 = (uint64_t)&v108[64 * v104];
                *(void *)uint64_t v182 = v108;
                *(void *)&v182[8] = v109;
                *(float *)uint64_t v109 = v55;
                *(float *)(v109 + 4) = v53;
                uint64_t v110 = &v108[64 * v107];
                *(float *)(v109 + 8) = v54;
                *(float *)(v109 + 12) = v56;
                *(int64x2_t *)(v109 + 16) = v175;
                *(void *)(v109 + 32) = v174;
                *(int64x2_t *)(v109 + 40) = v177;
                *(void *)(v109 + 56) = v60;
                uint64_t v102 = v109 + 64;
                *(void *)&v182[16] = v109 + 64;
                *(void *)&v182[24] = v110;
                if (v101 == v103)
                {
                  *(void *)&__p[24] = v109;
                  *(void *)&__p[32] = v109 + 64;
                  *(void *)&__p[40] = v110;
                }
                else
                {
                  do
                  {
                    v101 -= 64;
                    uint64_t v109 = std::construct_at[abi:nn180100]<md::MetaDataRegionPolygon,md::MetaDataRegionPolygon,md::MetaDataRegionPolygon*>(v109 - 64, (long long *)v101);
                  }
                  while (v101 != v103);
                  uint64_t v101 = *(void *)&__p[24];
                  uint64_t v111 = *(void *)&__p[32];
                  *(void *)&__p[24] = v109;
                  *(_OWORD *)&__p[32] = *(_OWORD *)&v182[16];
                  uint64_t v102 = *(void *)&v182[16];
                  while (v111 != v101)
                  {
                    uint64_t v112 = *(void *)(v111 - 24);
                    if (v112)
                    {
                      uint64_t v113 = *(void *)(v111 - 16);
                      uint64_t v114 = *(void **)(v111 - 24);
                      if (v113 != v112)
                      {
                        uint64_t v115 = *(void *)(v111 - 16);
                        do
                        {
                          unint64_t v117 = *(void **)(v115 - 24);
                          v115 -= 24;
                          uint64_t v116 = v117;
                          if (v117)
                          {
                            *(void *)(v113 - 16) = v116;
                            operator delete(v116);
                          }
                          uint64_t v113 = v115;
                        }
                        while (v115 != v112);
                        uint64_t v114 = *(void **)(v111 - 24);
                      }
                      *(void *)(v111 - 16) = v112;
                      operator delete(v114);
                    }
                    uint64_t v118 = *(void **)(v111 - 48);
                    if (v118)
                    {
                      *(void *)(v111 - 40) = v118;
                      operator delete(v118);
                    }
                    v111 -= 64;
                  }
                }
                if (v101) {
                  operator delete((void *)v101);
                }
              }
              else
              {
                **(float **)&__p[32] = v55;
                *(float *)(v101 + 4) = v53;
                *(float *)(v101 + 8) = v54;
                *(float *)(v101 + 12) = v56;
                *(int64x2_t *)(v101 + 16) = v175;
                *(void *)(v101 + 32) = v174;
                *(int64x2_t *)(v101 + 40) = v177;
                uint64_t v102 = v101 + 64;
                *(void *)(v101 + 56) = v60;
              }
              *(void *)&__p[32] = v102;
              if (v179[0]) {
                operator delete(v179[0]);
              }
              if (++v176 >= (unint64_t)*(unsigned __int16 *)(v33 + 24)) {
                goto LABEL_159;
              }
            }
            unint64_t v47 = 0;
            int v48 = 0;
            unint64_t v49 = 0;
            do
            {
LABEL_56:
              v49 += *(void *)(v44 + 16 * *(unsigned __int16 *)(v41 + 2 * v47) + 8);
              unint64_t v47 = (unsigned __int16)++v48;
            }
            while (v43 > (unsigned __int16)v48);
            goto LABEL_57;
          }
        }
LABEL_159:
        unint64_t v147 = v173[94];
        unint64_t v148 = v173[95];
        if (v147 < v148)
        {
          uint64_t v34 = *(void *)&__p[16];
          *(_OWORD *)unint64_t v147 = *(_OWORD *)__p;
          *(void *)(v147 + 16) = v34;
          *(void *)(v147 + 24) = 0;
          *(void *)(v147 + 32) = 0;
          *(void *)(v147 + 40) = 0;
          *(_OWORD *)(v147 + 24) = *(_OWORD *)&__p[24];
          *(void *)(v147 + 40) = *(void *)&__p[40];
          v173[94] = v147 + 48;
        }
        else
        {
          uint64_t v149 = v171->i64[0];
          unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - v171->i64[0]) >> 4);
          unint64_t v151 = v150 + 1;
          if (v150 + 1 > 0x555555555555555) {
            abort();
          }
          if (0x5555555555555556 * ((uint64_t)(v148 - v149) >> 4) > v151) {
            unint64_t v151 = 0x5555555555555556 * ((uint64_t)(v148 - v149) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v149) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v152 = 0x555555555555555;
          }
          else {
            unint64_t v152 = v151;
          }
          uint64_t v183 = v173 + 95;
          if (v152 > 0x555555555555555) {
LABEL_197:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          float v153 = (char *)operator new(48 * v152);
          float v154 = &v153[48 * v150];
          *(_OWORD *)float v154 = *(_OWORD *)__p;
          *((void *)v154 + 2) = *(void *)&__p[16];
          *(_OWORD *)(v154 + 24) = *(_OWORD *)&__p[24];
          *((void *)v154 + 5) = *(void *)&__p[40];
          memset(&__p[24], 0, 24);
          if (v147 == v149)
          {
            int64x2_t v157 = vdupq_n_s64(v147);
            float v155 = &v153[48 * v150];
          }
          else
          {
            float v155 = &v153[48 * v150];
            do
            {
              long long v156 = *(_OWORD *)(v147 - 48);
              *((void *)v155 - 4) = *(void *)(v147 - 32);
              *((_OWORD *)v155 - 3) = v156;
              *(_OWORD *)(v155 - 24) = *(_OWORD *)(v147 - 24);
              *((void *)v155 - 1) = *(void *)(v147 - 8);
              v155 -= 48;
              *(void *)(v147 - 24) = 0;
              *(void *)(v147 - 16) = 0;
              *(void *)(v147 - 8) = 0;
              v147 -= 48;
            }
            while (v147 != v149);
            int64x2_t v157 = *v171;
            unint64_t v148 = v173[95];
          }
          float v158 = v154 + 48;
          v173[93] = v155;
          v173[94] = v154 + 48;
          *(int64x2_t *)&v182[8] = v157;
          v173[95] = &v153[48 * v152];
          *(void *)&v182[24] = v148;
          *(void *)uint64_t v182 = v157.i64[0];
          std::__split_buffer<md::MetaDataRegion>::__destruct_at_end[abi:nn180100]((uint64_t)v182, v157.i64[0]);
          if (*(void *)v182) {
            operator delete(*(void **)v182);
          }
          float v159 = *(char **)&__p[24];
          v173[94] = v158;
          if (v159)
          {
            float v160 = *(char **)&__p[32];
            float v161 = v159;
            if (*(char **)&__p[32] != v159)
            {
              do
              {
                uint64_t v162 = *((void *)v160 - 3);
                if (v162)
                {
                  uint64_t v163 = *((void *)v160 - 2);
                  float v164 = (void *)*((void *)v160 - 3);
                  if (v163 != v162)
                  {
                    uint64_t v165 = *((void *)v160 - 2);
                    do
                    {
                      uint64_t v167 = *(void **)(v165 - 24);
                      v165 -= 24;
                      float v166 = v167;
                      if (v167)
                      {
                        *(void *)(v163 - 16) = v166;
                        operator delete(v166);
                      }
                      uint64_t v163 = v165;
                    }
                    while (v165 != v162);
                    float v164 = (void *)*((void *)v160 - 3);
                  }
                  *((void *)v160 - 2) = v162;
                  operator delete(v164);
                }
                uint64_t v168 = (void *)*((void *)v160 - 6);
                if (v168)
                {
                  *((void *)v160 - 5) = v168;
                  operator delete(v168);
                }
                v160 -= 64;
              }
              while (v160 != v159);
              float v161 = *(char **)&__p[24];
            }
            *(void *)&__p[32] = v159;
            operator delete(v161);
          }
        }
      }
      v33 += 128;
      if (v33 == v172) {
        goto LABEL_190;
      }
    }
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (v9) {
    goto LABEL_14;
  }
LABEL_10:
  *a3 = 0;
  a3[1] = 0;
  uint64_t v10 = v178;
  if (!v178) {
    return;
  }
LABEL_191:
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1A19DD204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, md::MapTileData *a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21,long long a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v35 = a11;
  if (*a14)
  {
    std::vector<md::MetaDataRegion>::__base_destruct_at_end[abi:nn180100]((uint64_t)a14, *a14);
    operator delete((void *)*a14);
    uint64_t v35 = a11;
  }
  md::MapTileData::~MapTileData(v35);
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void anonymous namespace'::getPointsFromSegments(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = (unint64_t *)(*(void *)(a1 + 32) + 16 * a2);
  unint64_t v7 = *v6;
  unint64_t v8 = v6[1] + *v6;
  if ((a4 & 1) == 0)
  {
    if (v7 >= v8) {
      return;
    }
    uint64_t v29 = *(void **)(a3 + 8);
    while (1)
    {
      uint64_t v31 = *(void *)(*(void *)(a1 + 8) + 8 * v7);
      unint64_t v32 = *(void *)(a3 + 16);
      if ((unint64_t)v29 >= v32) {
        break;
      }
      *uint64_t v29 = v31;
      long long v30 = v29 + 1;
LABEL_37:
      *(void *)(a3 + 8) = v30;
      ++v7;
      uint64_t v29 = v30;
      if (v7 == v8) {
        return;
      }
    }
    uint64_t v33 = *(unsigned char **)a3;
    uint64_t v34 = (uint64_t)v29 - *(void *)a3;
    uint64_t v35 = v34 >> 3;
    unint64_t v36 = (v34 >> 3) + 1;
    if (v36 >> 61) {
LABEL_67:
    }
      abort();
    uint64_t v37 = v32 - (void)v33;
    if (v37 >> 2 > v36) {
      unint64_t v36 = v37 >> 2;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      if (v38 >> 61) {
LABEL_68:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v39 = operator new(8 * v38);
    }
    else
    {
      uint64_t v39 = 0;
    }
    unint64_t v40 = &v39[8 * v35];
    *unint64_t v40 = v31;
    long long v30 = v40 + 1;
    if (v29 == (void *)v33)
    {
      uint64_t v33 = v29;
      goto LABEL_64;
    }
    unint64_t v41 = (char *)(v29 - 1) - v33;
    if (v41 >= 0x168)
    {
      if (&v39[v34 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8)] > &v39[v34 - 8])
      {
        uint64_t v42 = v29;
      }
      else if ((void *)((char *)v29 - (v41 & 0xFFFFFFFFFFFFFFF8) - 8) > v29 - 1)
      {
        uint64_t v42 = v29;
      }
      else if ((unint64_t)((char *)v29 - &v39[v34]) >= 0x20)
      {
        uint64_t v43 = (v41 >> 3) + 1;
        uint64_t v42 = &v29[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v44 = &v39[8 * v35 - 16];
        unint64_t v45 = (long long *)(v29 - 2);
        uint64_t v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *uint64_t v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v40 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v42 = v29;
      }
    }
    else
    {
      uint64_t v42 = v29;
    }
    do
    {
      uint64_t v48 = *--v42;
      *--unint64_t v40 = v48;
    }
    while (v42 != (void *)v33);
    uint64_t v33 = *(unsigned char **)a3;
LABEL_64:
    *(void *)a3 = v40;
    *(void *)(a3 + 8) = v30;
    *(void *)(a3 + 16) = &v39[8 * v38];
    if (v33) {
      operator delete(v33);
    }
    goto LABEL_37;
  }
  if (v8 > v7)
  {
    uint64_t v9 = *(void **)(a3 + 8);
    while (1)
    {
      --v8;
      uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8 * v8);
      unint64_t v12 = *(void *)(a3 + 16);
      if ((unint64_t)v9 >= v12) {
        break;
      }
      void *v9 = v11;
      uint64_t v10 = v9 + 1;
LABEL_5:
      *(void *)(a3 + 8) = v10;
      uint64_t v9 = v10;
      if (v8 <= v7) {
        return;
      }
    }
    uint64_t v13 = *(unsigned char **)a3;
    uint64_t v14 = (uint64_t)v9 - *(void *)a3;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      goto LABEL_67;
    }
    uint64_t v17 = v12 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        goto LABEL_68;
      }
      uint64_t v19 = operator new(8 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    *uint64_t v20 = v11;
    uint64_t v10 = v20 + 1;
    if (v9 == (void *)v13)
    {
      uint64_t v13 = v9;
    }
    else
    {
      unint64_t v21 = (char *)(v9 - 1) - v13;
      if (v21 < 0x168)
      {
        uint64_t v22 = v9;
        goto LABEL_30;
      }
      if (&v19[v14 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
      {
        uint64_t v22 = v9;
        goto LABEL_30;
      }
      if ((void *)((char *)v9 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8) > v9 - 1)
      {
        uint64_t v22 = v9;
        goto LABEL_30;
      }
      if ((unint64_t)((char *)v9 - v19 - v14) < 0x20)
      {
        uint64_t v22 = v9;
        goto LABEL_30;
      }
      uint64_t v23 = (v21 >> 3) + 1;
      uint64_t v22 = &v9[-(v23 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v24 = &v19[8 * v15 - 16];
      unint64_t v25 = (long long *)(v9 - 2);
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *uint64_t v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_30:
          uint64_t v28 = *--v22;
          *--uint64_t v20 = v28;
        }
        while (v22 != (void *)v13);
        uint64_t v13 = *(unsigned char **)a3;
      }
    }
    *(void *)a3 = v20;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = &v19[8 * v18];
    if (v13) {
      operator delete(v13);
    }
    goto LABEL_5;
  }
}

uint64_t geo::codec::VectorTile::regionFeatures(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 3488;
}

void std::__split_buffer<md::MetaDataRegion>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v5 = i - 48;
      *(void *)(a1 + 16) = i - 48;
      uint64_t v6 = *(void *)(i - 24);
      if (v6) {
        break;
      }
      i -= 48;
      if (v5 == a2) {
        return;
      }
    }
    uint64_t v7 = *(void *)(i - 16);
    unint64_t v8 = *(void **)(i - 24);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(void *)(v7 - 24);
        if (v9)
        {
          uint64_t v10 = *(void *)(v7 - 16);
          uint64_t v11 = *(void **)(v7 - 24);
          if (v10 != v9)
          {
            uint64_t v12 = *(void *)(v7 - 16);
            do
            {
              uint64_t v14 = *(void **)(v12 - 24);
              v12 -= 24;
              uint64_t v13 = v14;
              if (v14)
              {
                *(void *)(v10 - 16) = v13;
                operator delete(v13);
              }
              uint64_t v10 = v12;
            }
            while (v12 != v9);
            uint64_t v11 = *(void **)(v7 - 24);
          }
          *(void *)(v7 - 16) = v9;
          operator delete(v11);
        }
        uint64_t v15 = *(void **)(v7 - 48);
        if (v15)
        {
          *(void *)(v7 - 40) = v15;
          operator delete(v15);
        }
        v7 -= 64;
      }
      while (v7 != v6);
      unint64_t v8 = *(void **)(i - 24);
    }
    *(void *)(i - 16) = v6;
    operator delete(v8);
  }
}

uint64_t md::PendingRegistryLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v9[0] = &unk_1EF575168;
  v9[1] = a2;
  v7[0] = &unk_1EF5751B0;
  v7[1] = a2;
  unint64_t v8 = v7;
  uint64_t v12 = v11;
  uint64_t v10 = v9;
  v11[0] = &unk_1EF5751B0;
  v11[1] = a2;
  _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v9);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  md::RegistryManager::update(*(void **)(a1 + 120), *(void *)(a1 + 120) + 504, *a3, *(void *)(a2 + 80));
  if (!v12)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v12 + 48))(v12);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

void sub_1A19DDB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_1A19DDB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v21)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  std::function<void ()(void)>::~function(&a10);
  std::function<void ()(void)>::~function(&a14);
  _Unwind_Resume(a1);
}

void sub_1A19DDBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (a21) {
    (*(void (**)(void))(*a21 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PendingRegistryLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PendingRegistryLogic", "", v5, 2u);
  }
}

void sub_1A19DDE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ta2::TextureAtlasPage::reserveRegions(unint64_t inserted, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (a3)
  {
    uint64_t v9 = (_DWORD *)inserted;
    BOOL v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = (geo::SkylineBin *)(inserted + 24);
    for (uint64_t i = (unint64_t *)(a2 + 32); ; i += 9)
    {
      uint64_t v14 = *(i - 4);
      uint64_t v16 = *(void *)(v14 + 32);
      uint64_t v15 = *(void *)(v14 + 40);
      unsigned int v17 = v15 - v16 + 2;
      unsigned int v18 = ((unint64_t)(v15 + 0x100000000) >> 32) - ((unint64_t)(v16 - 0x100000000) >> 32);
      int v19 = v9[12];
      if (v19 == 1)
      {
        inserted = geo::SkylineBin::insertMinWaste(v12, v17, v18, a4, a5, a6, a7, a8);
      }
      else if (!v19)
      {
        inserted = geo::SkylineBin::insertBottomLeft(v12, v17, v18);
      }
      int v20 = (HIDWORD(a2) - HIDWORD(inserted)) * (a2 - inserted);
      if (v20 != v18 * v17) {
        break;
      }
      v9[52] += v20;
      unint64_t *i = inserted;
      i[1] = a2;
      i[3] = (unint64_t)v9;
      BOOL v10 = ++v11 >= a3;
      if (a3 == v11) {
        return 1;
      }
    }
    if (!v9[53]) {
      v9[53] = (float)((float)v9[52] * 0.8);
    }
  }
  else
  {
    return 1;
  }
  return v10;
}

unint64_t geo::SkylineBin::insertBottomLeft(geo::SkylineBin *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *((void *)this + 5);
  uint64_t v8 = v7 - v6;
  if (v7 == v6)
  {
    unint64_t v48 = 0;
    unint64_t v49 = 0;
    goto LABEL_46;
  }
  unint64_t v9 = 0;
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = v8 / 12;
  int v14 = *((unsigned __int8 *)this + 28);
  if (v13 <= 1) {
    unint64_t v13 = 1;
  }
  unsigned int v15 = *((_DWORD *)this + 2);
  uint64_t v16 = (unsigned int *)(v6 + 8);
  unint64_t v17 = -1;
  unsigned int v18 = -1;
  unsigned int v19 = -1;
  unsigned int v20 = -1;
  do
  {
    uint64_t v22 = (unsigned int *)(v6 + 12 * v9);
    unsigned int v23 = *v22;
    uint64_t v24 = *v22 + a2;
    if (v24 <= v15)
    {
      unint64_t v25 = v22[1];
      if (a2)
      {
        uint64_t v26 = v16;
        unsigned int v27 = a2;
        while (1)
        {
          unsigned int v28 = *(v26 - 1);
          unint64_t v25 = v25 <= v28 ? v28 : v25;
          uint64_t v29 = v25 + a3;
          if (v29 > *((_DWORD *)this + 3)) {
            break;
          }
          unsigned int v30 = *v26;
          v26 += 3;
          BOOL v31 = v27 >= v30;
          v27 -= v30;
          BOOL v32 = v27 != 0 && v31;
          if (!v31) {
            unsigned int v27 = 0;
          }
          if (!v32)
          {
            BOOL v33 = v29 == v18;
            if (v29 >= v18) {
              goto LABEL_21;
            }
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t v29 = v25 + a3;
        BOOL v33 = v29 == v18;
        if (v29 < v18)
        {
LABEL_19:
          unsigned int v34 = *(_DWORD *)(v6 + 12 * v9 + 8);
LABEL_24:
          unsigned int v18 = v29;
          unint64_t v17 = v9;
          unsigned int v19 = v34;
          unsigned int v20 = v34;
          unint64_t v11 = v25;
          unsigned int v10 = *v22;
          unint64_t v12 = v24 | (v29 << 32);
          goto LABEL_25;
        }
LABEL_21:
        if (v33)
        {
          unsigned int v34 = *(_DWORD *)(v6 + 12 * v9 + 8);
          if (v34 < v20) {
            goto LABEL_24;
          }
        }
      }
    }
LABEL_25:
    if (v14)
    {
      uint64_t v35 = v23 + a3;
      if (v35 <= v15)
      {
        unint64_t v36 = v22[1];
        if (a3)
        {
          uint64_t v37 = v16;
          unsigned int v38 = a3;
          while (1)
          {
            unsigned int v39 = *(v37 - 1);
            unint64_t v36 = v36 <= v39 ? v39 : v36;
            uint64_t v40 = v36 + a2;
            if (v40 > *((_DWORD *)this + 3)) {
              break;
            }
            unsigned int v41 = *v37;
            v37 += 3;
            BOOL v31 = v38 >= v41;
            v38 -= v41;
            BOOL v42 = v38 != 0 && v31;
            if (!v31) {
              unsigned int v38 = 0;
            }
            if (!v42)
            {
              BOOL v43 = v40 == v18;
              if (v40 < v18) {
                goto LABEL_5;
              }
              goto LABEL_39;
            }
          }
        }
        else
        {
          uint64_t v40 = v36 + a2;
          BOOL v43 = v40 == v18;
          if (v40 < v18)
          {
LABEL_5:
            unsigned int v21 = *(_DWORD *)(v6 + 12 * v9 + 8);
LABEL_6:
            unsigned int v18 = v40;
            unint64_t v17 = v9;
            unsigned int v19 = v21;
            unsigned int v20 = v21;
            unint64_t v11 = v36;
            unsigned int v10 = v23;
            unint64_t v12 = v35 | (v40 << 32);
            goto LABEL_7;
          }
LABEL_39:
          if (v43)
          {
            unsigned int v21 = *(_DWORD *)(v6 + 12 * v9 + 8);
            unsigned int v20 = v19;
            if (v21 < v19) {
              goto LABEL_6;
            }
          }
        }
      }
    }
LABEL_7:
    ++v9;
    v16 += 3;
  }
  while (v9 != v13);
  unint64_t v48 = v10 | (v11 << 32);
  unint64_t v49 = v12;
  if (v17 != -1)
  {
    unint64_t v44 = HIDWORD(v12);
    geo::SkylineBin::addSkylineLevel((uint64_t)this, v17, (int *)&v48);
    goto LABEL_49;
  }
LABEL_46:
  unint64_t v48 = 0;
  unint64_t v49 = 0;
  if (*((unsigned char *)this + 56))
  {
    unint64_t v45 = geo::GuillotineBin::insert((geo::SkylineBin *)((char *)this + 64), a2, a3, *((unsigned __int8 *)this + 29));
    unsigned int v10 = v45;
    unint64_t v11 = HIDWORD(v45);
    unint64_t v48 = v45;
    unint64_t v44 = HIDWORD(v46);
    unint64_t v49 = v46;
    LODWORD(v12) = v46;
  }
  else
  {
    LODWORD(v11) = 0;
    LODWORD(v44) = 0;
    unsigned int v10 = 0;
    LODWORD(v12) = 0;
  }
LABEL_49:
  if ((v44 - v11) * (v12 - v10)) {
    *((_DWORD *)this + 4) += a3 * a2;
  }
  return v48;
}

void geo::SkylineBin::addSkylineLevel(uint64_t a1, unint64_t a2, int *a3)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(char **)(a1 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-v6] >> 2) > a2)
    {
      int v8 = a3[1];
      unsigned int v9 = *(_DWORD *)(v6 + 12 * a2);
      unsigned int v10 = v9 + a3[2] - *a3;
      uint64_t v11 = 12 * a2;
      unint64_t v12 = a2;
      do
      {
        unsigned int v13 = *(_DWORD *)(v6 + v11);
        if (v13 >= v10) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(v6 + v11 + 8) + v13;
        if (v14 <= v9) {
          break;
        }
        if (v14 >= v10) {
          unsigned int v14 = v10;
        }
        int v93 = *(_DWORD *)(v6 + v11);
        int v94 = *(_DWORD *)(v6 + v11 + 4);
        unsigned int v95 = v14;
        int v96 = v8;
        if ((v8 - v94) * (v14 - v13))
        {
          geo::GuillotineBin::addFreeRegion(a1 + 64, (uint64_t)&v93);
          uint64_t v6 = *(void *)(a1 + 32);
          uint64_t v7 = *(char **)(a1 + 40);
        }
        ++v12;
        v11 += 12;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-v6] >> 2));
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(char **)(a1 + 40);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 20);
  if (v15 <= a3[3]) {
    unsigned int v15 = a3[3];
  }
  *(_DWORD *)(a1 + 20) = v15;
  int v16 = *a3;
  int v17 = a3[3];
  int v18 = a3[2] - *a3;
  unsigned int v19 = (char *)(v6 + 12 * (int)a2);
  unint64_t v20 = *(void *)(a1 + 48);
  if ((unint64_t)v7 < v20)
  {
    if (v19 == v7)
    {
      *(_DWORD *)uint64_t v7 = v16;
      *((_DWORD *)v7 + 1) = v17;
      *((_DWORD *)v7 + 2) = v18;
      unsigned int v23 = v7 + 12;
      *(void *)(a1 + 40) = v7 + 12;
      goto LABEL_64;
    }
    int64_t v21 = v7 - (v19 + 12);
    unint64_t v22 = (unint64_t)(v7 - 12);
    unsigned int v23 = v7;
    if ((unint64_t)v7 >= 0xC)
    {
      uint64_t v24 = v7 - 12;
      unsigned int v23 = v7;
      do
      {
        uint64_t v25 = *(void *)v24;
        *((_DWORD *)v23 + 2) = *((_DWORD *)v24 + 2);
        *(void *)unsigned int v23 = v25;
        v23 += 12;
        v24 += 12;
      }
      while (v24 < v7);
    }
    *(void *)(a1 + 40) = v23;
    if (v7 == v19 + 12) {
      goto LABEL_50;
    }
    if ((unint64_t)(v21 - 12) >= 0xB4
      && ((unint64_t v26 = (v21 - 12) / 0xCuLL,
           unint64_t v27 = v21 + 12 * (int)a2 - 12 * v26 + v6 - 12,
           (unint64_t)&v7[-12 * v26 - 12] < v22)
        ? (BOOL v28 = v27 >= (unint64_t)v7)
        : (BOOL v28 = 1),
          v28))
    {
      unint64_t v29 = v26 + 1;
      unsigned int v30 = &v7[-12 * (v29 & 0x3FFFFFFFFFFFFFFCLL)];
      BOOL v31 = (const float *)(v7 - 60);
      BOOL v32 = (float *)(v7 - 48);
      uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        float32x4x3_t v97 = vld3q_f32(v31);
        vst3q_f32(v32, v97);
        v32 -= 12;
        v31 -= 12;
        v33 -= 4;
      }
      while (v33);
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_50;
      }
      v22 -= 12 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    }
    else
    {
      unsigned int v30 = v7;
    }
    unint64_t v44 = v30 - 4;
    do
    {
      int v45 = *(_DWORD *)(v22 - 12);
      v22 -= 12;
      *((_DWORD *)v44 - 2) = v45;
      *((_DWORD *)v44 - 1) = *(_DWORD *)(v22 + 4);
      *(_DWORD *)unint64_t v44 = *(_DWORD *)(v22 + 8);
      v44 -= 12;
    }
    while ((char *)v22 != v19);
LABEL_50:
    *(_DWORD *)unsigned int v19 = v16;
    *((_DWORD *)v19 + 1) = v17;
    *(_DWORD *)(v6 + 12 * (int)a2 + 8) = v18;
    goto LABEL_64;
  }
  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-v6] >> 2) + 1;
  if (v34 > 0x1555555555555555) {
    abort();
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v6) >> 2);
  uint64_t v36 = 2 * v35;
  if (2 * v35 <= v34) {
    uint64_t v36 = v34;
  }
  if (v35 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v37 = 0x1555555555555555;
  }
  else {
    unint64_t v37 = v36;
  }
  if (v37)
  {
    if (v37 > 0x1555555555555555) {
      goto LABEL_96;
    }
    int v38 = a3[2] - v16;
    unsigned int v39 = (char *)operator new(12 * v37);
    int v18 = v38;
  }
  else
  {
    unsigned int v39 = 0;
  }
  uint64_t v40 = &v39[12 * (int)a2];
  unsigned int v41 = &v39[12 * v37];
  if (v40 == v41)
  {
    int64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((12 * (int)a2) >> 2);
    if (v40 > v39)
    {
      if (v42 >= -1) {
        uint64_t v43 = v42 + 1;
      }
      else {
        uint64_t v43 = v42 + 2;
      }
      unsigned int v41 = &v39[12 * (int)a2];
      v40 -= 12 * (v43 >> 1);
      goto LABEL_57;
    }
    int v92 = v18;
    unint64_t v46 = 0x5555555555555556 * ((12 * (int)a2) >> 2);
    if (v40 == v39) {
      unint64_t v46 = 1;
    }
    if (v46 <= 0x1555555555555555)
    {
      unint64_t v47 = v46 >> 2;
      uint64_t v48 = 12 * v46;
      unint64_t v49 = (char *)operator new(12 * v46);
      uint64_t v40 = &v49[12 * v47];
      unsigned int v41 = &v49[v48];
      if (v39) {
        operator delete(v39);
      }
      int v18 = v92;
      goto LABEL_57;
    }
LABEL_96:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_57:
  *(_DWORD *)uint64_t v40 = v16;
  *((_DWORD *)v40 + 1) = v17;
  *((_DWORD *)v40 + 2) = v18;
  unsigned int v23 = v40 + 12;
  uint64_t v50 = *(char **)(a1 + 32);
  if (v50 != v19)
  {
    uint64_t v51 = v19;
    do
    {
      uint64_t v52 = *(void *)(v51 - 12);
      v51 -= 12;
      int v53 = *((_DWORD *)v51 + 2);
      *(void *)(v40 - 12) = v52;
      v40 -= 12;
      *((_DWORD *)v40 + 2) = v53;
    }
    while (v51 != v50);
  }
  for (uint64_t i = *(char **)(a1 + 40); v19 != i; v19 += 12)
  {
    uint64_t v55 = *(void *)v19;
    *((_DWORD *)v23 + 2) = *((_DWORD *)v19 + 2);
    *(void *)unsigned int v23 = v55;
    v23 += 12;
  }
  float v56 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v40;
  *(void *)(a1 + 40) = v23;
  *(void *)(a1 + 48) = v41;
  if (v56)
  {
    operator delete(v56);
    unsigned int v23 = *(char **)(a1 + 40);
  }
LABEL_64:
  unint64_t v57 = a2 + 1;
  uint64_t v58 = *(void *)(a1 + 32);
  if (a2 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v58] >> 2))
  {
    unint64_t v59 = (unsigned int *)(v58 + 12 * v57);
    uint64_t v60 = v59 + 2;
    uint64_t v61 = v58 + 12 * (int)v57;
    uint64_t v62 = (char *)(v61 + 12);
    uint64_t v63 = -12 * (int)v57 - v58 - 24;
    while (1)
    {
      unsigned int v64 = *(_DWORD *)(v58 + 12 * a2 + 8) + *(_DWORD *)(v58 + 12 * a2);
      unsigned int v65 = v64 - *v59;
      if (v64 <= *v59) {
        goto LABEL_79;
      }
      *unint64_t v59 = v64;
      BOOL v28 = *v60 >= v65;
      unsigned int v66 = *v60 - v65;
      if (v66 != 0 && v28)
      {
        unsigned int *v60 = v66;
        goto LABEL_79;
      }
      unsigned int *v60 = 0;
      if (v62 != v23) {
        break;
      }
      unsigned int v23 = (char *)(v58 + 12 * (int)v57);
LABEL_67:
      *(void *)(a1 + 40) = v23;
      if (v57 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v58] >> 2)) {
        goto LABEL_79;
      }
    }
    uint64_t v67 = (char *)(v58 + 12 * (int)v57);
    unint64_t v68 = (char *)(v61 + 12);
    if ((unint64_t)&v23[v63] > 0x53)
    {
      unint64_t v69 = (unint64_t)&v23[v63] / 0xC + 1;
      uint64_t v70 = 12 * (v69 & 0x3FFFFFFFFFFFFFF8);
      uint64_t v67 = (char *)(v61 + v70);
      BOOL v71 = (_OWORD *)(v58 + 12 * (int)v57);
      uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        long long v73 = *(_OWORD *)((char *)v71 + 44);
        long long v74 = *(_OWORD *)((char *)v71 + 28);
        long long v75 = *(_OWORD *)((char *)v71 + 92);
        long long v76 = *(_OWORD *)((char *)v71 + 76);
        long long v77 = *(_OWORD *)((char *)v71 + 60);
        *BOOL v71 = *(_OWORD *)((char *)v71 + 12);
        v71[1] = v74;
        v71[2] = v73;
        v71[3] = v77;
        v71[4] = v76;
        v71[5] = v75;
        v71 += 6;
        v72 -= 8;
      }
      while (v72);
      if (v69 == (v69 & 0x3FFFFFFFFFFFFFF8)) {
        goto LABEL_77;
      }
      unint64_t v68 = &v62[v70];
    }
    do
    {
      *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
      *((_DWORD *)v67 + 1) = *((_DWORD *)v68 + 1);
      *((_DWORD *)v67 + 2) = *((_DWORD *)v68 + 2);
      v67 += 12;
      v68 += 12;
    }
    while (v68 != v23);
LABEL_77:
    unsigned int v23 = v67;
    goto LABEL_67;
  }
LABEL_79:
  if (&v23[-v58] != (char *)12)
  {
    unint64_t v78 = 0;
    while (1)
    {
      unint64_t v79 = v78 + 1;
      if (*(_DWORD *)(v58 + 12 * v78 + 4) == *(_DWORD *)(v58 + 12 * v78 + 16)) {
        break;
      }
      ++v78;
LABEL_83:
      if (v78 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v58] >> 2) - 1) {
        return;
      }
    }
    *(_DWORD *)(v58 + 12 * v78 + 8) += *(_DWORD *)(v58 + 12 * v79 + 8);
    uint64_t v80 = (_OWORD *)(v58 + 12 * (int)v79);
    int64x2_t v81 = (_DWORD *)v80 + 3;
    if ((char *)v80 + 12 == v23)
    {
      unint64_t v83 = (char *)(v58 + 12 * (int)v79);
    }
    else
    {
      unint64_t v82 = (unint64_t)&v23[-v58 - 24 + -12 * (int)v79];
      if (v82 >= 0x54)
      {
        unint64_t v84 = v82 / 0xC + 1;
        uint64_t v85 = 12 * (v84 & 0x3FFFFFFFFFFFFFF8);
        unint64_t v83 = (char *)v80 + v85;
        uint64_t v86 = v84 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v87 = *(_OWORD *)((char *)v80 + 44);
          long long v88 = *(_OWORD *)((char *)v80 + 28);
          long long v89 = *(_OWORD *)((char *)v80 + 92);
          long long v90 = *(_OWORD *)((char *)v80 + 76);
          long long v91 = *(_OWORD *)((char *)v80 + 60);
          *uint64_t v80 = *(_OWORD *)((char *)v80 + 12);
          v80[1] = v88;
          v80[2] = v87;
          v80[3] = v91;
          v80[4] = v90;
          v80[5] = v89;
          v80 += 6;
          v86 -= 8;
        }
        while (v86);
        if (v84 == (v84 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_94;
        }
        int64x2_t v81 = (_DWORD *)((char *)v81 + v85);
      }
      else
      {
        unint64_t v83 = (char *)v80;
      }
      do
      {
        *(_DWORD *)unint64_t v83 = *v81;
        *((_DWORD *)v83 + 1) = v81[1];
        *((_DWORD *)v83 + 2) = v81[2];
        v83 += 12;
        v81 += 3;
      }
      while (v81 != (_DWORD *)v23);
    }
LABEL_94:
    *(void *)(a1 + 40) = v83;
    unsigned int v23 = v83;
    goto LABEL_83;
  }
}

void geo::GuillotineBin::addFreeRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(_OWORD **)(a1 + 64);
  unint64_t v4 = *(void *)(a1 + 72);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(_OWORD **)(a1 + 56);
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unsigned int v13 = &v12[16 * v8];
    *(_OWORD *)unsigned int v13 = *(_OWORD *)a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *(v5 - 1);
        v13 -= 16;
        --v5;
      }
      while (v5 != v7);
      uint64_t v5 = *(_OWORD **)(a1 + 56);
    }
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 24) += (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4)) * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
}

unint64_t geo::GuillotineBin::insert(geo::GuillotineBin *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 7);
  uint64_t v6 = *((void *)this + 8) - (void)v5;
  uint64_t v63 = v5;
  if (!v6)
  {
    unint64_t v65 = 0;
    uint64_t v66 = 0;
    unsigned int v11 = 0;
    uint64_t v10 = 0;
    unsigned int v67 = 0;
    goto LABEL_27;
  }
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v9 = 0;
  unsigned int v67 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  unint64_t v12 = v6 >> 4;
  int v13 = 0x7FFFFFFF;
  while (1)
  {
    unsigned int v14 = v5[2] - *v5;
    if (v14 == a2)
    {
      int v15 = v5[1];
      if (v5[3] - v15 == a3)
      {
        uint64_t v66 = v15 + a3;
        uint64_t v10 = v5[1];
        goto LABEL_26;
      }
    }
    int v16 = *((unsigned __int8 *)this + 80);
    if (v14 == a3 && v16 != 0)
    {
      int v18 = v5[1];
      if (v5[3] - v18 == a2) {
        break;
      }
    }
    if (v14 >= a2 && (uint64_t v19 = v5[1], v5[3] - (int)v19 >= a3))
    {
      int v21 = geo::GuillotineBin::scoreByHeuristic(*((unsigned __int8 *)this + 20), a2, a3, v5);
      if (v21 >= v13) {
        goto LABEL_4;
      }
      unsigned int v11 = *v5;
      unsigned int v67 = *v5 + a2;
      uint64_t v22 = v19 + a3;
    }
    else
    {
      if (v14 < a3 || v16 == 0) {
        goto LABEL_4;
      }
      uint64_t v19 = v5[1];
      if (v5[3] - (int)v19 < a2) {
        goto LABEL_4;
      }
      int v21 = geo::GuillotineBin::scoreByHeuristic(*((unsigned __int8 *)this + 20), a3, a2, v5);
      if (v21 >= v13) {
        goto LABEL_4;
      }
      unsigned int v11 = *v5;
      unsigned int v67 = *v5 + a3;
      uint64_t v22 = v19 + a2;
    }
    unint64_t v65 = v9;
    uint64_t v66 = v22;
    uint64_t v10 = v19;
    int v13 = v21;
LABEL_4:
    ++v9;
    v5 += 4;
    if (v9 >= v12) {
      goto LABEL_27;
    }
  }
  uint64_t v66 = v18 + a2;
  uint64_t v10 = v5[1];
  a2 = a3;
LABEL_26:
  unsigned int v67 = *v5 + a2;
  unint64_t v65 = v9;
  unsigned int v11 = *v5;
LABEL_27:
  unint64_t v23 = v11 | (unint64_t)(v10 << 32);
  unsigned int v24 = v67 - v11;
  int v25 = v66 - v10;
  int v26 = (v66 - v10) * (v67 - v11);
  unint64_t v27 = v67 | (unint64_t)(v66 << 32);
  if (v26)
  {
    BOOL v28 = &v63[4 * v65];
    unsigned int v29 = v28[2] - *v28;
    unsigned int v30 = v29 - v24;
    unsigned int v31 = v28[3] - v28[1];
    unsigned int v32 = v31 - v25;
    int v33 = a4;
    switch(*((unsigned char *)this + 21))
    {
      case 0:
        BOOL v34 = v30 <= v32;
        break;
      case 1:
        BOOL v35 = v30 > v32;
        goto LABEL_36;
      case 2:
        BOOL v35 = v32 * v24 > v30 * v25;
        goto LABEL_36;
      case 3:
        BOOL v34 = v32 * v24 <= v30 * v25;
        break;
      case 4:
        BOOL v34 = v29 <= v31;
        break;
      case 5:
        BOOL v35 = v29 > v31;
LABEL_36:
        BOOL v34 = v35;
        break;
      default:
        BOOL v34 = 0;
        int v33 = a4;
        break;
    }
    geo::GuillotineBin::splitFreeRectAlongAxis(this, v28, v67, v66, v34);
    uint64_t v37 = *((void *)this + 7);
    uint64_t v36 = (char *)*((void *)this + 8);
    int v38 = (char *)(v37 + 16 * (int)v65);
    unsigned int v39 = v38 + 16;
    if (v38 + 16 != v36)
    {
      unint64_t v40 = v36 - v38 - 32;
      if (v40 < 0x70)
      {
        do
        {
LABEL_45:
          *(_DWORD *)int v38 = *(_DWORD *)v39;
          *((_DWORD *)v38 + 1) = *((_DWORD *)v39 + 1);
          *((_DWORD *)v38 + 2) = *((_DWORD *)v39 + 2);
          *((_DWORD *)v38 + 3) = *((_DWORD *)v39 + 3);
          v38 += 16;
          v39 += 16;
        }
        while (v39 != v36);
      }
      else
      {
        uint64_t v41 = (v40 >> 4) + 1;
        uint64_t v42 = 16 * (v41 & 0x1FFFFFFFFFFFFFF8);
        v38 += v42;
        uint64_t v43 = (long long *)(v37 + 16 * (int)v65 + 80);
        uint64_t v44 = v41 & 0x1FFFFFFFFFFFFFF8;
        do
        {
          long long v46 = *(v43 - 4);
          long long v45 = *(v43 - 3);
          long long v47 = *(v43 - 1);
          long long v49 = *v43;
          long long v48 = v43[1];
          long long v51 = v43[2];
          long long v50 = v43[3];
          *(v43 - 3) = *(v43 - 2);
          *(v43 - 2) = v47;
          *(v43 - 5) = v46;
          *(v43 - 4) = v45;
          v43[1] = v51;
          v43[2] = v50;
          *(v43 - 1) = v49;
          *uint64_t v43 = v48;
          v43 += 8;
          v44 -= 8;
        }
        while (v44);
        if (v41 != (v41 & 0x1FFFFFFFFFFFFFF8))
        {
          v39 += v42;
          goto LABEL_45;
        }
      }
    }
    *((void *)this + 8) = v38;
    if (v33) {
      geo::GuillotineBin::mergeFreeList((uint64_t)this);
    }
    int v53 = (char *)*((void *)this + 5);
    unint64_t v52 = *((void *)this + 6);
    if ((unint64_t)v53 >= v52)
    {
      uint64_t v55 = (char *)*((void *)this + 4);
      uint64_t v56 = (v53 - v55) >> 4;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 60) {
        abort();
      }
      uint64_t v58 = v52 - (void)v55;
      if (v58 >> 3 > v57) {
        unint64_t v57 = v58 >> 3;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        if (v59 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v60 = (char *)operator new(16 * v59);
      }
      else
      {
        uint64_t v60 = 0;
      }
      uint64_t v61 = &v60[16 * v56];
      *(void *)uint64_t v61 = v23;
      *((void *)v61 + 1) = v27;
      float v54 = v61 + 16;
      if (v53 != v55)
      {
        do
        {
          *((_OWORD *)v61 - 1) = *((_OWORD *)v53 - 1);
          v61 -= 16;
          v53 -= 16;
        }
        while (v53 != v55);
        int v53 = (char *)*((void *)this + 4);
      }
      *((void *)this + 4) = v61;
      *((void *)this + 5) = v54;
      *((void *)this + 6) = &v60[16 * v59];
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *(void *)int v53 = v23;
      *((void *)v53 + 1) = v27;
      float v54 = v53 + 16;
    }
    *((void *)this + 5) = v54;
    *((_DWORD *)this + 4) += v26;
    *((_DWORD *)this + 6) -= v26;
  }
  return v23;
}

void md::DaVinciGroundRenderLayer::layoutMainPass(uint64_t *a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, void *a8, uint64_t a9, char a10)
{
  uint64_t v11 = a3;
  uint64_t v12 = (uint64_t)a1;
  if (a6 != a7)
  {
    int v13 = a8;
    uint64_t v413 = (uint64_t)(a1 + 161);
    v407 = (float *)(a1 + 46);
    v399 = (float *)(a1 + 61);
    v397 = a1 + 293;
    v396 = a1 + 266;
    v402 = (int64x2_t *)(a3 + 264);
    __asm { FMOV            V0.4S, #1.0 }
    int8x16_t v401 = _Q0;
    int v18 = a6;
    do
    {
      uint64_t v19 = v18;
      unint64_t v20 = v18 + 1;
      int v21 = *(unsigned __int8 *)(*(void *)(*v13 + 8 * *v18) + 8);
      while (v20 != a7)
      {
        uint64_t v22 = *v20++;
        if (*(unsigned __int8 *)(*(void *)(*v13 + 8 * v22) + 8) != v21)
        {
          int v18 = v20 - 1;
          if (v21 == 2) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      int v18 = a7;
      if (v21 == 2)
      {
LABEL_8:
        v423 = v18;
        float v23 = *(float *)(v11 + 20);
        v419 = *(void **)(*(void *)(v12 + 40) + 24);
        unsigned int v24 = +[VKDebugSettings sharedSettings];
        int v25 = [v24 daVinciWireframeEnabled];

        uint64_t v26 = *(void *)(v12 + 3128);
        unint64_t v27 = *(std::__shared_weak_count **)(v26 + 8);
        __p[0] = *(void **)v26;
        __p[1] = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v28 = (uint64_t *)*((void *)a2 + 1);
        int8x8_t v29 = (int8x8_t)v28[1];
        uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          uint64_t v31 = 0x1AF456233693CD46;
          if (*(void *)&v29 <= 0x1AF456233693CD46uLL) {
            uint64_t v31 = 0x1AF456233693CD46uLL % *(void *)&v29;
          }
        }
        else
        {
          uint64_t v31 = (*(void *)&v29 - 1) & 0x1AF456233693CD46;
        }
        uint64_t v32 = *v28;
        int v33 = *(void **)(v32 + 8 * v31);
        if (v33)
        {
          BOOL v34 = (void *)*v33;
          if (v34)
          {
            if (v30.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v36 = v34[1];
                if (v36 == 0x1AF456233693CD46)
                {
                  if (v34[2] == 0x1AF456233693CD46) {
                    goto LABEL_32;
                  }
                }
                else if ((v36 & (*(void *)&v29 - 1)) != v31)
                {
                  goto LABEL_32;
                }
                BOOL v34 = (void *)*v34;
                if (!v34) {
                  goto LABEL_32;
                }
              }
            }
            do
            {
              unint64_t v35 = v34[1];
              if (v35 == 0x1AF456233693CD46)
              {
                if (v34[2] == 0x1AF456233693CD46) {
                  break;
                }
              }
              else
              {
                if (v35 >= *(void *)&v29) {
                  v35 %= *(void *)&v29;
                }
                if (v35 != v31) {
                  break;
                }
              }
              BOOL v34 = (void *)*v34;
            }
            while (v34);
          }
        }
LABEL_32:
        if (v30.u32[0] > 1uLL)
        {
          uint64_t v37 = 0x41E8D6E445F4145;
          if (*(void *)&v29 <= 0x41E8D6E445F4145uLL) {
            uint64_t v37 = 0x41E8D6E445F4145uLL % *(void *)&v29;
          }
        }
        else
        {
          uint64_t v37 = (*(void *)&v29 - 1) & 0x41E8D6E445F4145;
        }
        int v38 = *(void **)(v32 + 8 * v37);
        if (!v38) {
          goto LABEL_56;
        }
        unsigned int v39 = (void *)*v38;
        if (!v39) {
          goto LABEL_56;
        }
        if (v30.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v41 = v39[1];
            if (v41 == 0x41E8D6E445F4145)
            {
              if (v39[2] == 0x41E8D6E445F4145) {
                goto LABEL_52;
              }
            }
            else if ((v41 & (*(void *)&v29 - 1)) != v37)
            {
              goto LABEL_56;
            }
            unsigned int v39 = (void *)*v39;
            if (!v39) {
              goto LABEL_56;
            }
          }
        }
        while (1)
        {
          unint64_t v40 = v39[1];
          if (v40 == 0x41E8D6E445F4145)
          {
            if (v39[2] == 0x41E8D6E445F4145)
            {
LABEL_52:
              uint64_t v42 = v39[5];
              if (*(void *)(v42 + 8) == 0x41E8D6E445F4145)
              {
                uint64_t v409 = *(void *)(v42 + 32);
                if (v30.u32[0] > 1uLL)
                {
LABEL_54:
                  unint64_t v43 = 0xDFC317497CF9A4BFLL;
                  if (*(void *)&v29 <= 0xDFC317497CF9A4BFLL) {
                    unint64_t v43 = 0xDFC317497CF9A4BFLL % *(void *)&v29;
                  }
                  goto LABEL_58;
                }
LABEL_57:
                unint64_t v43 = (*(void *)&v29 - 1) & 0xDFC317497CF9A4BFLL;
LABEL_58:
                uint64_t v44 = *(void **)(v32 + 8 * v43);
                int v18 = v423;
                if (!v44) {
                  goto LABEL_82;
                }
                long long v45 = (void *)*v44;
                if (!v45) {
                  goto LABEL_82;
                }
                if (v30.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v47 = v45[1];
                    if (v47 == 0xDFC317497CF9A4BFLL)
                    {
                      if (v45[2] == 0xDFC317497CF9A4BFLL) {
                        goto LABEL_74;
                      }
                    }
                    else if ((v47 & (*(void *)&v29 - 1)) != v43)
                    {
                      goto LABEL_82;
                    }
                    long long v45 = (void *)*v45;
                    if (!v45) {
                      goto LABEL_82;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v46 = v45[1];
                  if (v46 == 0xDFC317497CF9A4BFLL)
                  {
                    if (v45[2] == 0xDFC317497CF9A4BFLL)
                    {
LABEL_74:
                      uint64_t v48 = v45[5];
                      if (*(void *)(v48 + 8) == 0xDFC317497CF9A4BFLL)
                      {
                        uint64_t v49 = *(void *)(v48 + 32);
                        if (v30.u32[0] >= 2uLL) {
                          goto LABEL_76;
                        }
LABEL_83:
                        long long v51 = *(void **)(v32 + 8 * ((*(void *)&v29 - 1) & 0xD2404CDD1F9A6950));
                        do
                        {
                          do
                            long long v51 = (void *)*v51;
                          while (v51[1] != 0xD2404CDD1F9A6950);
                        }
                        while (v51[2] != 0xD2404CDD1F9A6950);
                        goto LABEL_86;
                      }
LABEL_82:
                      uint64_t v49 = 0;
                      if (v30.u32[0] < 2uLL) {
                        goto LABEL_83;
                      }
LABEL_76:
                      unint64_t v50 = 0xD2404CDD1F9A6950;
                      if (*(void *)&v29 <= 0xD2404CDD1F9A6950) {
                        unint64_t v50 = 0xD2404CDD1F9A6950 % *(void *)&v29;
                      }
                      long long v51 = *(void **)(v32 + 8 * v50);
                      do
                      {
                        do
                          long long v51 = (void *)*v51;
                        while (v51[1] != 0xD2404CDD1F9A6950);
                      }
                      while (v51[2] != 0xD2404CDD1F9A6950);
LABEL_86:
                      if (!**(void **)(v51[5] + 32) || !*(void *)(v12 + 3144)) {
                        goto LABEL_259;
                      }
                      if (v49)
                      {
                        LOBYTE(v427) = *(unsigned char *)(v49 + 64) != 0;
                        if (v19 == v423)
                        {
LABEL_259:
                          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                            std::__shared_weak_count::__release_weak(v27);
                          }
                          goto LABEL_3;
                        }
                      }
                      else
                      {
                        LOBYTE(v427) = 0;
                        if (v19 == v423) {
                          goto LABEL_259;
                        }
                      }
                      unint64_t v52 = v397;
                      if (!v25) {
                        unint64_t v52 = v396;
                      }
                      v403 = v52;
                      while (2)
                      {
                        uint64_t v53 = *(void *)(*v13 + 8 * *v19);
                        if (*(unsigned char *)(v53 + 8) == 2)
                        {
                          v421 = *(uint64_t **)(v53 + 216);
                          float v54 = (void *)ggl::FragmentedPool<ggl::DaVinci::DecalPipelineSetup>::pop(*(void *)(v12 + 1696));
                          uint64_t v55 = v53 + 224;
                          (*(void (**)(long long *__return_ptr, float))(**(void **)(v53 + 224) + 1040))(&v442, v23);
                          if ((_BYTE)v442) {
                            v444[0] = 0;
                          }
                          else {
                            (*(void (**)(unsigned char *__return_ptr, float))(**(void **)v55 + 816))(v444, v23);
                          }
                          if (v427)
                          {
                            if ((_BYTE)v442)
                            {
                              BOOL v56 = 1;
                              uint64_t v57 = v419[20];
                              if (!v57) {
                                goto LABEL_111;
                              }
                            }
                            else
                            {
                              BOOL v56 = v444[0] != 0;
                              uint64_t v57 = v419[20];
                              if (!v57) {
                                goto LABEL_111;
                              }
                            }
LABEL_109:
                            unint64_t v58 = *(void *)(v57 + 32);
                            uint64_t v59 = *(void *)(v419[1] + 96);
                            if (v58 >= (*(void *)(v419[1] + 104) - v59) >> 3) {
                              goto LABEL_111;
                            }
                            uint64_t v60 = *(void *)(*(void *)(v59 + 8 * v58) + 16);
                          }
                          else
                          {
                            BOOL v56 = 0;
                            uint64_t v57 = v419[20];
                            if (v57) {
                              goto LABEL_109;
                            }
LABEL_111:
                            uint64_t v60 = 0;
                          }
                          if (v60) {
                            BOOL v61 = v56;
                          }
                          else {
                            BOOL v61 = 0;
                          }
                          HIBYTE(v394) = a10;
                          LOBYTE(v394) = 0;
                          md::DaVinciPipelineStateManager<ggl::DaVinci::DecalPipelineState,std::shared_ptr<ggl::DaVinciDecalShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v450, v413, *(unsigned __int8 *)(v11 + 5), 0, 0, 0, *(unsigned __int8 *)(v11 + 6), 0, v394, 0, v61, 0, 0, 0, 0, 1, 1u, 0, 0,
                            0,
                            0,
                            0,
                            1u,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0);
                          long long v62 = *(_OWORD *)v450;
                          if (*(void *)&v450[8]) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v450[8] + 8), 1uLL, memory_order_relaxed);
                          }
                          BOOL v427 = v56;
                          if (!(void)v62 || **(void **)(v62 + 40) != v54[1])
                          {
                            uint64_t v63 = (std::__shared_weak_count *)v54[3];
                            v54[2] = 0;
                            v54[3] = 0;
                            if (!v63) {
                              goto LABEL_128;
                            }
LABEL_127:
                            if (atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                              goto LABEL_128;
                            }
                            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                            std::__shared_weak_count::__release_weak(v63);
                            if (!*((void *)&v62 + 1)) {
                              goto LABEL_132;
                            }
LABEL_129:
                            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              (*(void (**)(void))(**((void **)&v62 + 1) + 16))(*((void *)&v62 + 1));
                              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
                            }
                            goto LABEL_132;
                          }
                          uint64_t v64 = v54[2];
                          if (v64 && v64 != (void)v62) {
                            ggl::PipelineSetup::resetData((uint64_t)v54);
                          }
                          if (*((void *)&v62 + 1)) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 1uLL, memory_order_relaxed);
                          }
                          uint64_t v63 = (std::__shared_weak_count *)v54[3];
                          *((_OWORD *)v54 + 1) = v62;
                          if (v63) {
                            goto LABEL_127;
                          }
LABEL_128:
                          if (*((void *)&v62 + 1)) {
                            goto LABEL_129;
                          }
LABEL_132:
                          unint64_t v65 = *(std::__shared_weak_count **)&v450[8];
                          uint64_t v12 = (uint64_t)a1;
                          if (*(void *)&v450[8]
                            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v450[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                            std::__shared_weak_count::__release_weak(v65);
                          }
                          uint64_t v66 = v54[2];
                          uint64_t v11 = a3;
                          if (v61 && *(unsigned char *)(v66 + 315)) {
                            *(void *)(v54[12] + 16) = v60;
                          }
                          uint64_t v67 = v66;
                          unint64_t v68 = __p[0];
                          (*(void (**)(unsigned char *__return_ptr, float))(**(void **)v55 + 360))(v436, v23);
                          if (!v436[0] || v436[1])
                          {
                            (*(void (**)(char *__return_ptr, float))(**(void **)v55 + 976))(v433, v23);
                            (*(void (**)(uint64_t *__return_ptr, float))(**(void **)v55 + 928))(&v432, v23);
                            if (v433[0])
                            {
                              v454[0] = 0;
                              goto LABEL_143;
                            }
                            (*(void (**)(unsigned char *__return_ptr, float))(**(void **)v55 + 232))(v454, v23);
                            if (v433[0])
                            {
LABEL_143:
                              v70.i64[0] = v434;
                              v70.i32[2] = v435;
                              unsigned int v71 = (_BYTE)v432 == 0;
                              uint64_t v72 = (float *)&v432 + 1;
                            }
                            else
                            {
                              unsigned int v71 = v454[0] == 0;
                              v69.i64[0] = *(void *)&v454[4];
                              v69.i32[2] = *(_DWORD *)&v454[12];
                              int8x16_t v70 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v71)), 0x1FuLL)), v401, v69);
                              uint64_t v72 = (float *)&v454[16];
                            }
                            float v73 = *v72;
                            if (v71) {
                              float v73 = 1.0;
                            }
                            v458.i64[1] = __PAIR64__(LODWORD(v73), v70.u32[2]);
                            v458.i64[0] = v70.i64[0];
                            uint64_t v74 = a1[393];
                            v450[0] = 1;
                            long long v75 = (std::__shared_weak_count *)a1[261];
                            if (v75) {
                              atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            __n128 v76 = md::MaterialTextureManager::textureFromMaterial(&v431, v74, (uint64_t *)(v53 + 224), (unint64_t *)(v53 + 240), v450, (int)v23);
                            if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *, __n128))v75->__on_zero_shared)(v75, v76);
                              std::__shared_weak_count::__release_weak(v75);
                            }
                            v76.n128_u32[0] = v458.u32[3];
                            if (v458.f32[3] != 0.0)
                            {
                              long long v77 = v68;
                              md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::DecalPipelineSetup,ggl::DaVinci::DecalPipelineState>((uint64_t)a1, (uint64_t)v54, &v458);
                              unint64_t v78 = (md::SharedResource *)v431.n128_u64[0];
                              if (v431.n128_u64[0])
                              {
                                uint64_t v79 = md::LayoutContext::frameState(a2);
                                md::SharedResource::addFrameRef(v78, *(void *)(v79 + 624));
                                long long v77 = (void *)*((void *)v78 + 4);
                              }
                              uint64_t v80 = v54[8];
                              *(void *)(v80 + 48) = a1[252];
                              *(void *)(v80 + 56) = 0;
                              uint64_t v81 = v54[20];
                              unint64_t v82 = *(std::__shared_weak_count **)(v81 + 56);
                              *(void *)(v81 + 48) = 0;
                              *(void *)(v81 + 56) = 0;
                              if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                std::__shared_weak_count::__release_weak(v82);
                              }
                              unint64_t v83 = (void *)v54[8];
                              v83[1] = 0;
                              uint64_t v84 = *(void *)(a5 + 216);
                              void *v83 = v84;
                              uint64_t v85 = (void *)v54[20];
                              uint64_t v86 = *(void *)(a5 + 224);
                              if (v86) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
                              }
                              long long v87 = (std::__shared_weak_count *)v85[1];
                              *uint64_t v85 = v84;
                              v85[1] = v86;
                              if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                                std::__shared_weak_count::__release_weak(v87);
                              }
                              uint64_t v88 = v54[8];
                              *(void *)(v88 + 24) = 0;
                              uint64_t v89 = *(void *)(a5 + 232);
                              *(void *)(v88 + 16) = v89;
                              uint64_t v90 = v54[20];
                              uint64_t v91 = *(void *)(a5 + 240);
                              if (v91) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
                              }
                              int v92 = *(std::__shared_weak_count **)(v90 + 24);
                              *(void *)(v90 + 16) = v89;
                              *(void *)(v90 + 24) = v91;
                              if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                                std::__shared_weak_count::__release_weak(v92);
                              }
                              uint64_t v93 = v54[8];
                              *(void *)(v93 + 72) = 0;
                              uint64_t v94 = *(void *)(v409 + 16);
                              *(void *)(v93 + 64) = v94;
                              uint64_t v95 = v54[20];
                              uint64_t v96 = *(void *)(v409 + 24);
                              if (v96) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
                              }
                              float32x4x3_t v97 = *(std::__shared_weak_count **)(v95 + 72);
                              *(void *)(v95 + 64) = v94;
                              *(void *)(v95 + 72) = v96;
                              if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                                std::__shared_weak_count::__release_weak(v97);
                              }
                              uint64_t v98 = v54[8];
                              *(void *)(v98 + 40) = 0;
                              uint64_t v99 = *(void *)(a5 + 400);
                              *(void *)(v98 + 32) = v99;
                              uint64_t v100 = v54[20];
                              uint64_t v101 = *(void *)(a5 + 408);
                              if (v101) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
                              }
                              uint64_t v102 = *(std::__shared_weak_count **)(v100 + 40);
                              *(void *)(v100 + 32) = v99;
                              *(void *)(v100 + 40) = v101;
                              if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                                std::__shared_weak_count::__release_weak(v102);
                              }
                              uint64_t v103 = v54[8];
                              *(void *)(v103 + 104) = 0;
                              uint64_t v104 = a1[237];
                              *(void *)(v103 + 96) = v104;
                              uint64_t v105 = v54[20];
                              uint64_t v106 = a1[238];
                              if (v106) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
                              }
                              unint64_t v107 = *(std::__shared_weak_count **)(v105 + 104);
                              *(void *)(v105 + 96) = v104;
                              *(void *)(v105 + 104) = v106;
                              if (v107 && !atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                                std::__shared_weak_count::__release_weak(v107);
                              }
                              *(void *)v54[12] = *(void *)(a3 + 280);
                              if (*(unsigned char *)(a3 + 6))
                              {
                                uint64_t v108 = v419[12];
                                if (v108)
                                {
                                  unint64_t v109 = *(void *)(v108 + 32);
                                  uint64_t v110 = *(void *)(v419[1] + 96);
                                  if (v109 >= (*(void *)(v419[1] + 104) - v110) >> 3) {
                                    uint64_t v108 = 0;
                                  }
                                  else {
                                    uint64_t v108 = *(void *)(*(void *)(v110 + 8 * v109) + 16);
                                  }
                                }
                                *(void *)(v54[12] + 8) = v108;
                              }
                              md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::DecalPipelineSetup,ggl::DaVinci::DecalPipelineState>((uint64_t)a1, (uint64_t)v54, &v458);
                              float v111 = *(float *)(a3 + 40);
                              if (*(unsigned __int8 *)(a5 + 24) == 255)
                              {
                                if (*(unsigned char *)(a3 + 5) && *(unsigned char *)(a3 + 4))
                                {
                                  double v114 = *(double *)(a5 + 288);
                                  double v115 = *(double *)(a5 + 296);
                                  double v116 = *(double *)(a5 + 304);
                                  double v117 = *(double *)(a5 + 312);
                                  double v118 = v115 + v115;
                                  double v119 = (v115 + v115) * v115;
                                  double v120 = (v116 + v116) * v116;
                                  double v121 = v114 + v114;
                                  double v122 = (v114 + v114) * v115;
                                  double v123 = (v116 + v116) * v117;
                                  double v124 = v116 * (v114 + v114);
                                  double v125 = 1.0 - (v114 + v114) * v114;
                                  double v126 = v118 * v116;
                                  *(double *)v445 = 1.0 - (v119 + v120);
                                  *(double *)&v445[8] = v123 + v122;
                                  *((double *)&v446 + 1) = v122 - v123;
                                  *(double *)&long long v447 = v125 - v120;
                                  *(double *)&v448[8] = v117 * v118 + v124;
                                  *(double *)&v448[16] = v126 - v117 * v121;
                                  *(double *)&v445[16] = v124 - v117 * v118;
                                  *((double *)&v447 + 1) = v117 * v121 + v126;
                                  *(double *)&v448[24] = v125 - v119;
                                  *(void *)&long long v446 = 0;
                                  *(void *)v448 = 0;
                                  memset(&v448[32], 0, 32);
                                  uint64_t v449 = 0x3FF0000000000000;
                                  gm::Matrix<double,4,4>::inverted<int,void>((double *)v450, (double *)v445);
                                  double v127 = *(double *)(a3 + 80);
                                  double v128 = *(double *)(a3 + 88);
                                  double v129 = *(double *)(a3 + 96);
                                  double v130 = *(double *)(a3 + 104);
                                  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v450, v127), *(float64x2_t *)&v451[8], v128), *(float64x2_t *)&v452[8], v129), *(float64x2_t *)&v452[40], v130);
                                  _D1 = *(double *)&v450[16] * v127
                                      + *(double *)&v451[24] * v128
                                      + *(double *)&v452[24] * v129
                                      + *(double *)&v452[56] * v130;
                                }
                                else
                                {
                                  _Q0 = *(float64x2_t *)(a3 + 80);
                                  _D1 = *(double *)(a3 + 96);
                                }
                              }
                              else
                              {
                                _Q0 = *(float64x2_t *)(a3 + 112);
                                _D1 = *(double *)(a3 + 128);
                              }
                              _S11 = 1.0 / v111;
                              _D2 = _Q0.f64[1];
                              __asm
                              {
                                FCVT            H2, D2
                                FCVT            H0, D0
                              }
                              WORD1(_Q0.f64[0]) = LOWORD(_D2);
                              __asm { FCVT            H12, D1 }
                              int v404 = LODWORD(_Q0.f64[0]);
                              *(void *)v445 = vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]).u64[0];
                              __asm { FCVT            S0, H12 }
                              *(_DWORD *)&v445[8] = _S0;
                              *(float *)&v445[12] = _S11;
                              unint64_t v135 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::find<md::DaVinciGroundRenderLayer::StyleCacheKey>(v407, (float *)v445);
                              if (v135)
                              {
                                uint64_t v136 = v135[4];
                              }
                              else
                              {
                                uint64_t v137 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>::pop(a1[213]);
                                uint64_t v136 = v137;
                                *(_OWORD *)v450 = 0uLL;
                                unint64_t v138 = *(void *)(v137 + 8);
                                if (v138) {
                                  uint64_t v139 = *(void *)(v137 + 72);
                                }
                                else {
                                  uint64_t v139 = 0;
                                }
                                *(void *)&_Q0 = 0;
                                *((void *)&_Q0 + 1) = v137;
                                long long v400 = _Q0;
                                *(_OWORD *)v450 = _Q0;
                                *(void *)&v450[16] = 0;
                                *(void *)v451 = v138;
                                *(void *)&v451[16] = v139;
                                *(_WORD *)&v451[8] = 1;
                                __asm { FCVT            H0, S11 }
                                *(_DWORD *)uint64_t v139 = v404;
                                *(_WORD *)(v139 + 4) = _H12;
                                *(_WORD *)(v139 + 6) = _Q0;
                                std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::StyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>,std::equal_to<md::DaVinciGroundRenderLayer::StyleCacheKey>,md::DaVinciGroundRenderLayer::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::StyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::Style> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::StyleCacheKey,md::DaVinciGroundRenderLayer::StyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::Style> *&>(v407, (float *)v445, v445, v137);
                                if (v138)
                                {
                                  if ((void)v400 && *(unsigned char *)(*((void *)&v400 + 1) + 17) != 2) {
                                    (*(void (**)(void))(*(void *)v400 + 64))();
                                  }
                                  unint64_t v141 = *(void *)(*((void *)&v400 + 1) + 64);
                                  if (v141 <= v138) {
                                    unint64_t v141 = v138;
                                  }
                                  *(void *)(*((void *)&v400 + 1) + 56) = 0;
                                  *(void *)(*((void *)&v400 + 1) + 64) = v141;
                                }
                                uint64_t v12 = (uint64_t)a1;
                              }
                              uint64_t v142 = v54[8];
                              *(void *)(v142 + 80) = v136;
                              *(void *)(v142 + 88) = 0;
                              uint64_t v143 = v54[20];
                              uint64_t v144 = *(std::__shared_weak_count **)(v143 + 88);
                              *(void *)(v143 + 80) = 0;
                              *(void *)(v143 + 88) = 0;
                              uint64_t v145 = v67;
                              if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                                std::__shared_weak_count::__release_weak(v144);
                                uint64_t v145 = v67;
                              }
                              uint64_t v146 = a3;
                              if (v444[0])
                              {
                                BOOL v147 = v427;
                                if (!v145) {
                                  BOOL v147 = 0;
                                }
                                if (!v147) {
                                  goto LABEL_241;
                                }
LABEL_220:
                                if (*(unsigned char *)(v145 + 315))
                                {
                                  if ((_BYTE)v442)
                                  {
                                    v149.i64[0] = *(void *)((char *)&v442 + 4);
                                    v149.i64[1] = __PAIR64__(v401.u32[3], HIDWORD(v442));
                                  }
                                  else
                                  {
                                    float32x4_t v149 = *(float32x4_t *)&v444[4];
                                  }
                                  float32x4_t v405 = v149;
                                  *(float32x4_t *)v445 = v149;
                                  v445[16] = 1;
                                  uint64_t v150 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>(v399, (float *)v445);
                                  if (v150)
                                  {
                                    uint64_t v151 = *(void *)(v150 + 40);
                                  }
                                  else
                                  {
                                    uint64_t v152 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>::pop(*(void *)(v12 + 1920));
                                    uint64_t v151 = v152;
                                    *(_OWORD *)v450 = 0uLL;
                                    unint64_t v153 = *(void *)(v152 + 8);
                                    if (v153) {
                                      float v154 = *(float16x4_t **)(v152 + 72);
                                    }
                                    else {
                                      float v154 = 0;
                                    }
                                    float32x4_t v155 = v405;
                                    v156.i64[0] = 0;
                                    v156.i64[1] = v152;
                                    float32x4_t v406 = v156;
                                    *(float32x4_t *)v450 = v156;
                                    *(void *)&v450[16] = 0;
                                    *(void *)v451 = v153;
                                    *(void *)&v451[16] = v154;
                                    *(_WORD *)&v451[8] = 1;
                                    float16x4_t *v154 = vcvt_f16_f32(v155);
                                    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *&>(v399, (unsigned int *)v445, (uint64_t)v445, v152);
                                    if (v153)
                                    {
                                      if (v406.i64[0] && *(unsigned char *)(v406.i64[1] + 17) != 2) {
                                        (*(void (**)(void))(*(void *)v406.i64[0] + 64))();
                                      }
                                      unint64_t v157 = *(void *)(v406.i64[1] + 64);
                                      if (v157 <= v153) {
                                        unint64_t v157 = v153;
                                      }
                                      *(void *)(v406.i64[1] + 56) = 0;
                                      *(void *)(v406.i64[1] + 64) = v157;
                                    }
                                    uint64_t v12 = (uint64_t)a1;
                                  }
                                  uint64_t v158 = v54[8];
                                  *(void *)(v158 + 128) = v151;
                                  *(void *)(v158 + 136) = 0;
                                  uint64_t v159 = v54[20];
                                  float v160 = *(std::__shared_weak_count **)(v159 + 136);
                                  *(void *)(v159 + 128) = 0;
                                  *(void *)(v159 + 136) = 0;
                                  if (v160 && !atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                                    std::__shared_weak_count::__release_weak(v160);
                                  }
                                  uint64_t v146 = a3;
                                }
                                goto LABEL_241;
                              }
                              char v148 = !v427;
                              if (!(_BYTE)v442) {
                                char v148 = 1;
                              }
                              if ((v148 & 1) == 0 && v145) {
                                goto LABEL_220;
                              }
LABEL_241:
                              float v161 = *(void **)(*v421 + 120);
                              if (!v161) {
LABEL_549:
                              }
                                abort();
                              while (v161[4])
                              {
                                float v161 = (void *)*v161;
                                if (!v161) {
                                  goto LABEL_549;
                                }
                              }
                              uint64_t v162 = (void *)v54[4];
                              *uint64_t v162 = v161[5];
                              v162[1] = 0;
                              uint64_t v163 = (void *)v54[16];
                              float v164 = (std::__shared_weak_count *)v163[1];
                              void *v163 = 0;
                              v163[1] = 0;
                              if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                                std::__shared_weak_count::__release_weak(v164);
                              }
                              *(void *)(v54[12] + 24) = v77;
                              *(void *)v445 = &off_1EF55A458;
                              *(void *)&v445[16] = "";
                              LODWORD(v447) = 0;
                              *(_DWORD *)v448 = 1065353216;
                              memset(&v448[8], 0, 32);
                              *(int64x2_t *)&v448[40] = vdupq_n_s64(1uLL);
                              *(void *)&v448[56] = 0;
                              *((void *)&v446 + 1) = v54;
                              *(void *)&long long v446 = v403;
                              *((void *)&v447 + 1) = 0x100000000;
                              uint64_t v165 = *v421;
                              float v166 = *(void **)(*v421 + 96);
                              uint64_t v167 = (v166[6] - v166[5]) / v166[1];
                              if (*(unsigned char *)(v146 + 176))
                              {
                                int64x2_t v168 = vdupq_n_s64(1uLL);
                                v168.i64[0] = (v166[6] - v166[5]) / v166[1];
                                *(int64x2_t *)(v146 + 184) = vaddq_s64(*(int64x2_t *)(v146 + 184), v168);
                                int64x2_t *v402 = vaddq_s64(*v402, v168);
                              }
                              *(void *)v450 = &off_1EF55A458;
                              *(_OWORD *)&v450[8] = *(_OWORD *)&v445[8];
                              *(_OWORD *)v451 = v446;
                              *(_OWORD *)&v452[32] = *(_OWORD *)&v448[32];
                              *(_OWORD *)&v452[48] = *(_OWORD *)&v448[48];
                              *(_OWORD *)&v451[16] = v447;
                              *(_OWORD *)v452 = *(_OWORD *)v448;
                              *(_OWORD *)&v452[16] = *(_OWORD *)&v448[16];
                              uint64_t v169 = *(void **)(v12 + 3112);
                              uint64_t v170 = v169[1];
                              if (v170 == *(void *)(v12 + 3120))
                              {
                                uint64_t v169 = (void *)*v169;
                                if (!v169)
                                {
                                  uint64_t v169 = malloc_type_malloc(120 * v170 + 16, 0xB644C221uLL);
                                  *uint64_t v169 = 0;
                                  v169[1] = 0;
                                  **(void **)(v12 + 3112) = v169;
                                }
                                *(void *)(v12 + 3112) = v169;
                                uint64_t v170 = v169[1];
                              }
                              uint64_t v171 = &v169[15 * v170];
                              v169[1] = v170 + 1;
                              v171[2] = &off_1EF55A458;
                              long long v173 = *(_OWORD *)&v452[32];
                              long long v172 = *(_OWORD *)&v452[48];
                              long long v174 = *(_OWORD *)&v452[16];
                              *(_OWORD *)(v171 + 9) = *(_OWORD *)v452;
                              *(_OWORD *)(v171 + 11) = v174;
                              *(_OWORD *)(v171 + 13) = v173;
                              long long v175 = *(_OWORD *)&v450[8];
                              long long v176 = *(_OWORD *)v451;
                              *(_OWORD *)(v171 + 7) = *(_OWORD *)&v451[16];
                              *(_OWORD *)(v171 + 5) = v176;
                              *(_OWORD *)(v171 + 3) = v175;
                              *(_OWORD *)(v171 + 15) = v172;
                              v171[10] = v165;
                              v171[11] = 0;
                              v171[12] = v167;
                              v171[13] = 0;
                              v171[14] = 1;
                              ggl::CommandBuffer::pushRenderItem(a9, (uint64_t)(v171 + 2));
                            }
                            int64x2_t v177 = (std::__shared_weak_count *)v431.n128_u64[1];
                            if (v431.n128_u64[1]
                              && !atomic_fetch_add((atomic_ullong *volatile)(v431.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *, __n128))v177->__on_zero_shared)(v177, v76);
                              std::__shared_weak_count::__release_weak(v177);
                            }
                            uint64_t v11 = a3;
                          }
                          int v13 = a8;
                          int v18 = v423;
                        }
                        if (++v19 == v18)
                        {
                          unint64_t v27 = (std::__shared_weak_count *)__p[1];
                          goto LABEL_259;
                        }
                        continue;
                      }
                    }
                  }
                  else
                  {
                    if (v46 >= *(void *)&v29) {
                      v46 %= *(void *)&v29;
                    }
                    if (v46 != v43) {
                      goto LABEL_82;
                    }
                  }
                  long long v45 = (void *)*v45;
                  if (!v45) {
                    goto LABEL_82;
                  }
                }
              }
LABEL_56:
              uint64_t v409 = 0;
              if (v30.u32[0] > 1uLL) {
                goto LABEL_54;
              }
              goto LABEL_57;
            }
          }
          else
          {
            if (v40 >= *(void *)&v29) {
              v40 %= *(void *)&v29;
            }
            if (v40 != v37) {
              goto LABEL_56;
            }
          }
          unsigned int v39 = (void *)*v39;
          if (!v39) {
            goto LABEL_56;
          }
        }
      }
LABEL_13:
      if (v21 == 1) {
        md::DaVinciGroundRenderLayer::layoutMaterialRenderables(v12, a2, v11, a4, a5, v19, v18, v13, a9, a10);
      }
LABEL_3:
      ;
    }
    while (v18 != a7);
  }
  v428 = +[VKDebugSettings sharedSettings];
  if (![v428 daVinciLightingDebugShowLitSphere])
  {

    return;
  }

  if (a7 == a6 || a7 < a6) {
    return;
  }
  uint64_t v178 = (void *)*((void *)a2 + 1);
  int8x8_t v179 = (int8x8_t)v178[1];
  if (!*(void *)&v179) {
    goto LABEL_291;
  }
  uint8x8_t v180 = (uint8x8_t)vcnt_s8(v179);
  v180.i16[0] = vaddlv_u8(v180);
  if (v180.u32[0] > 1uLL)
  {
    uint64_t v181 = 0x1AF456233693CD46;
    if (*(void *)&v179 <= 0x1AF456233693CD46uLL) {
      uint64_t v181 = 0x1AF456233693CD46uLL % *(void *)&v179;
    }
  }
  else
  {
    uint64_t v181 = (*(void *)&v179 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v182 = *(void **)(*v178 + 8 * v181);
  if (!v182) {
    goto LABEL_291;
  }
  uint64_t v183 = (void *)*v182;
  if (!v183) {
    goto LABEL_291;
  }
  if (v180.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v185 = v183[1];
      if (v185 == 0x1AF456233693CD46)
      {
        if (v183[2] == 0x1AF456233693CD46) {
          goto LABEL_289;
        }
      }
      else if ((v185 & (*(void *)&v179 - 1)) != v181)
      {
        goto LABEL_291;
      }
      uint64_t v183 = (void *)*v183;
      if (!v183) {
        goto LABEL_291;
      }
    }
  }
  while (1)
  {
    unint64_t v184 = v183[1];
    if (v184 == 0x1AF456233693CD46) {
      break;
    }
    if (v184 >= *(void *)&v179) {
      v184 %= *(void *)&v179;
    }
    if (v184 != v181) {
      goto LABEL_291;
    }
LABEL_278:
    uint64_t v183 = (void *)*v183;
    if (!v183) {
      goto LABEL_291;
    }
  }
  if (v183[2] != 0x1AF456233693CD46) {
    goto LABEL_278;
  }
LABEL_289:
  uint64_t v186 = v183[5];
  if (*(void *)(v186 + 8) == 0x1AF456233693CD46)
  {
    unint64_t v187 = *(double **)(v186 + 32);
    goto LABEL_292;
  }
LABEL_291:
  unint64_t v187 = 0;
LABEL_292:
  double v188 = v187[2];
  long double v189 = tan(v187[1] * 0.5 + 0.785398163);
  double v190 = log(v189);
  int v191 = 1 << *(unsigned char *)(a5 + 25);
  double v192 = -1.0 / (double)v191;
  float v193 = (v188 * 0.159154943 + 0.5 + v192 * (double)*(int *)(a5 + 32)) * (double)v191;
  if (v193 < 0.0 || v193 > 1.0) {
    return;
  }
  float v195 = (v190 * 0.159154943 + 0.5 + v192 * (double)(v191 + ~*(_DWORD *)(a5 + 28))) * (double)v191;
  if (v195 < 0.0 || v195 > 1.0) {
    return;
  }
  double v197 = *(void **)(*(void *)(v12 + 40) + 24);
  if (!*(void *)&v179) {
    goto LABEL_325;
  }
  uint8x8_t v198 = (uint8x8_t)vcnt_s8(v179);
  v198.i16[0] = vaddlv_u8(v198);
  if (v198.u32[0] > 1uLL)
  {
    uint64_t v199 = 0x41E8D6E445F4145;
    if (*(void *)&v179 <= 0x41E8D6E445F4145uLL) {
      uint64_t v199 = 0x41E8D6E445F4145uLL % *(void *)&v179;
    }
  }
  else
  {
    uint64_t v199 = (*(void *)&v179 - 1) & 0x41E8D6E445F4145;
  }
  double v200 = *(void **)(*v178 + 8 * v199);
  if (!v200) {
    goto LABEL_325;
  }
  double v201 = (void *)*v200;
  if (!v201) {
    goto LABEL_325;
  }
  if (v198.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v203 = v201[1];
      if (v203 == 0x41E8D6E445F4145)
      {
        if (v201[2] == 0x41E8D6E445F4145) {
          goto LABEL_323;
        }
      }
      else if ((v203 & (*(void *)&v179 - 1)) != v199)
      {
        goto LABEL_325;
      }
      double v201 = (void *)*v201;
      if (!v201) {
        goto LABEL_325;
      }
    }
  }
  while (2)
  {
    unint64_t v202 = v201[1];
    if (v202 != 0x41E8D6E445F4145)
    {
      if (v202 >= *(void *)&v179) {
        v202 %= *(void *)&v179;
      }
      if (v202 != v199) {
        goto LABEL_325;
      }
      goto LABEL_312;
    }
    if (v201[2] != 0x41E8D6E445F4145)
    {
LABEL_312:
      double v201 = (void *)*v201;
      if (!v201) {
        goto LABEL_325;
      }
      continue;
    }
    break;
  }
LABEL_323:
  uint64_t v204 = v201[5];
  if (*(void *)(v204 + 8) == 0x41E8D6E445F4145)
  {
    double v205 = *(void **)(v204 + 32);
    goto LABEL_326;
  }
LABEL_325:
  double v205 = 0;
LABEL_326:
  __asm { FMOV            V0.4S, #1.0 }
  *(float32x4_t *)v429 = _Q0;
  float32x4_t v458 = _Q0;
  *(void *)v454 = &off_1EF55A458;
  *(void *)&v454[16] = "";
  *((void *)&v456 + 1) = 0;
  long long v455 = 0uLL;
  LODWORD(v456) = 0;
  *(_DWORD *)v457 = 1065353216;
  memset(&v457[8], 0, 32);
  *(int64x2_t *)&v457[40] = vdupq_n_s64(1uLL);
  *(void *)&v457[56] = 0;
  double v207 = (void *)ggl::FragmentedPool<ggl::DaVinci::GroundPipelineSetup>::pop(*(void *)(v12 + 1648));
  if (!*(void *)(v12 + 3264))
  {
    memset(v444, 0, 24);
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v438 = 0;
    md::GeometryLogic::createIcoSphere((float **)v444, __p, 3);
    double v208 = __p[0];
    v424 = __p[1];
    uint64_t v209 = *(void *)&v444[8];
    uint64_t v210 = *(void *)v444;
    float v211 = operator new(0xA8uLL);
    unint64_t v212 = 0xAAAAAAAAAAAAAAABLL * ((v209 - v210) >> 2);
    v211[1] = 0;
    v211[2] = 0;
    *float v211 = &unk_1EF5895C0;
    a1[408] = (uint64_t)ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((ggl::DaVinci::TexturedCompressedMesh *)(v211 + 3), "/Debug/LitSphere");
    double v213 = (std::__shared_weak_count *)a1[409];
    a1[409] = (uint64_t)v211;
    if (v213 && !atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
    uint64_t v214 = a1[408];
    uint64_t v215 = **(void **)(v214 + 64);
    unint64_t v216 = *(void *)(v215 + 8) * v212;
    uint64_t v217 = *(void *)(v215 + 72);
    unint64_t v218 = *(void *)(v215 + 80) - v217;
    if (v216 == v218)
    {
      float32x4_t v219 = *(float32x4_t *)v429;
    }
    else
    {
      if (v216 <= v218)
      {
        float32x4_t v219 = *(float32x4_t *)v429;
        if (v216 < v218) {
          *(void *)(v215 + 80) = v217 + v216;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v215 + 72, v216 - v218);
        float32x4_t v219 = *(float32x4_t *)v429;
      }
      float v220 = *(std::__shared_weak_count **)(v215 + 32);
      *(void *)(v215 + 24) = 0;
      *(void *)(v215 + 32) = 0;
      if (v220 && !atomic_fetch_add(&v220->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
        float32x4_t v219 = *(float32x4_t *)v429;
      }
      *(void *)(v215 + 120) = 0;
      *(_DWORD *)(v215 + 112) = 0;
      uint64_t v221 = *(void *)(v215 + 80) - *(void *)(v215 + 72);
      *(void *)(v215 + 40) = 0;
      *(void *)(v215 + 48) = v221;
      *(void *)(v215 + 56) = 0;
      *(void *)(v215 + 64) = v221;
      uint64_t v214 = a1[408];
      uint64_t v215 = **(void **)(v214 + 64);
      unint64_t v216 = *(void *)(v215 + 8) * v212;
    }
    *(_OWORD *)v450 = 0uLL;
    *(void *)&long long v222 = 0;
    *((void *)&v222 + 1) = v215;
    if (v216) {
      uint64_t v223 = *(void *)(v215 + 72);
    }
    else {
      uint64_t v223 = 0;
    }
    *(_OWORD *)v450 = v222;
    *(void *)&v450[16] = 0;
    *(void *)v451 = v216;
    *(void *)&v451[16] = v223;
    *(_WORD *)&v451[8] = 1;
    double v224 = *(void **)(v214 + 120);
    if (!v224) {
LABEL_349:
    }
      abort();
    uint64_t v225 = (v424 - v208) >> 2;
    while (1)
    {
      while (1)
      {
        unint64_t v226 = v224[4];
        if (v226 < 2) {
          break;
        }
        double v224 = (void *)*v224;
        if (!v224) {
          goto LABEL_349;
        }
      }
      if (v226) {
        break;
      }
      double v224 = (void *)v224[1];
      if (!v224) {
        goto LABEL_349;
      }
    }
    uint64_t v227 = v224[5];
    *(_OWORD *)v445 = 0uLL;
    unint64_t v228 = *(void *)(v227 + 8) * v212;
    *(void *)&long long v229 = 0;
    *((void *)&v229 + 1) = v227;
    if (v228) {
      double v230 = *(__int16 **)(v227 + 72);
    }
    else {
      double v230 = 0;
    }
    *(_OWORD *)v445 = v229;
    *(void *)&v445[16] = 0;
    *(void *)&long long v446 = v228;
    *(void *)&long long v447 = v230;
    WORD4(v446) = 1;
    float v231 = *(float **)v444;
    double v232 = *(float **)&v444[8];
    if (*(void *)v444 != *(void *)&v444[8])
    {
      unint64_t v233 = *(void *)&v444[8] - *(void *)v444 - 12;
      if (v233 <= 0x23
        || ((unint64_t v234 = v233 / 0xC, v223 + 4 < *(void *)v444 + 12 * v234 + 12)
          ? (_CF = *(void *)v444 >= v223 + 8 * v234 + 8)
          : (_CF = 1),
            !_CF))
      {
        uint64_t v237 = 0;
        goto LABEL_365;
      }
      unint64_t v236 = v234 + 1;
      uint64_t v237 = (v234 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v238 = v223 + 16;
      float32x4_t v239 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
      float32x4_t v240 = (float32x4_t)vdupq_n_s32(0x3E90019Du);
      v241.i64[0] = 0x3F0000003F000000;
      v241.i64[1] = 0x3F0000003F000000;
      uint64_t v242 = *(void *)v444;
      float v243 = v230;
      uint64_t v244 = v237;
      do
      {
        int32x4_t v246 = *(int32x4_t *)(v242 + 16);
        long long v245 = *(_OWORD *)(v242 + 32);
        float32x4_t v247 = *(float32x4_t *)v242;
        float32x4_t v248 = (float32x4_t)vrev64q_s32(v246);
        v248.i32[0] = HIDWORD(*(void *)v242);
        *(_DWORD *)(v238 - 12) = *(void *)(v242 + 8);
        v247.i32[1] = v247.i32[3];
        v247.i64[1] = __PAIR64__(DWORD1(v245), v246.u32[2]);
        v248.i32[3] = DWORD2(v245);
        *(int16x4_t *)v247.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v247, v239)));
        *(int16x4_t *)v248.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v248, v239)));
        *(_WORD *)(v238 - 16) = v247.i16[0];
        *(_WORD *)(v238 - 8) = v247.i16[1];
        *(_WORD *)uint64_t v238 = v247.i16[2];
        *(_WORD *)(v238 + 8) = v247.i16[3];
        *(_WORD *)(v238 - 14) = v248.i16[0];
        *(_WORD *)(v238 - 6) = v248.i16[1];
        *(_WORD *)(v238 + 2) = v248.i16[2];
        *(_WORD *)(v238 + 10) = v248.i16[3];
        *(_DWORD *)(v238 - 4) = v246.i32[1];
        *(_DWORD *)(v238 + 4) = v245;
        *(_DWORD *)(v238 + 12) = HIDWORD(v245);
        float32x4x3_t v460 = vld3q_f32((const float *)v242);
        v242 += 48;
        float32x4_t v249 = vdivq_f32(v219, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v460.val[0], v460.val[0]), v460.val[1], v460.val[1]), v460.val[2], v460.val[2])));
        float32x4_t v250 = vmlaq_f32(v219, v460.val[2], v249);
        float32x4_t v251 = vmulq_f32(v249, v240);
        float32x4_t v252 = vdivq_f32(vmulq_f32(v251, v460.val[0]), v250);
        v460.val[0] = vdivq_f32(vmulq_f32(v251, v460.val[1]), v250);
        *(float16x4_t *)v460.val[1].f32 = vcvt_f16_f32(vaddq_f32(v252, v241));
        *(float16x4_t *)v460.val[2].f32 = vcvt_f16_f32(vaddq_f32(v460.val[0], v241));
        vst2_s16(v243, (int16x4x2_t)v460.val[1]);
        v243 += 8;
        v238 += 32;
        v244 -= 4;
      }
      while (v244);
      if (v236 != v237)
      {
        v231 += 3 * v237;
LABEL_365:
        float v253 = &v230[2 * v237 + 1];
        double v254 = (_DWORD *)(v223 + 8 * v237 + 4);
        do
        {
          int v255 = (int)(float)(v231[1] * 32767.0);
          *((_WORD *)v254 - 2) = (int)(float)(*v231 * 32767.0);
          *((_WORD *)v254 - 1) = v255;
          _DWORD *v254 = *((_DWORD *)v231 + 2);
          v254 += 2;
          float v256 = v231[1];
          float v257 = v231[2];
          float v258 = 1.0 / sqrtf((float)((float)(*v231 * *v231) + (float)(v256 * v256)) + (float)(v257 * v257));
          float v259 = (float)(v258 * v257) + 1.0;
          float v260 = v258 * 0.28126;
          _S2 = (float)((float)(v260 * *v231) / v259) + 0.5;
          _S3 = (float)((float)(v260 * v256) / v259) + 0.5;
          __asm
          {
            FCVT            H2, S2
            FCVT            H3, S3
          }
          *(v253 - 1) = LOWORD(_S2);
          *float v253 = LOWORD(_S3);
          v253 += 2;
          v231 += 3;
        }
        while (v231 != v232);
      }
    }
    std::__shared_count v263 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v263->__shared_owners_ = 0;
    v263->__shared_weak_owners_ = 0;
    v263->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
    uint64_t v264 = ggl::BufferData::BufferData((uint64_t)&v263[1], 2, 1, 0, 6, v225);
    LODWORD(v263[10].__vftable) = 0;
    v263[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
    v263[1].__shared_owners_ = 2;
    v263[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
    v263[9].__shared_weak_owners_ = (uint64_t)"/Debug/LitSphere/IndexData";
    if (v424 == v208) {
      uint64_t v266 = 0;
    }
    else {
      uint64_t v266 = (__int16 *)v263[4].__vftable;
    }
    unint64_t v267 = 0xAAAAAAAAAAAAAAABLL * v225;
    __int16 v268 = __p[0];
    uint64_t v269 = __p[1];
    if (__p[0] != __p[1])
    {
      unint64_t v270 = (char *)__p[1] - (char *)__p[0] - 12;
      if (v270 > 0x53)
      {
        unint64_t v272 = v270 / 0xC + 1;
        uint64_t v273 = v272 & 0x3FFFFFFFFFFFFFF8;
        uint64_t v274 = (const float *)__p[0];
        uint64_t v275 = v266;
        uint64_t v276 = v272 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v277 = v274;
          *(float32x4x3_t *)v265.i8 = vld3q_f32(v277);
          v277 += 12;
          float32x4x3_t v461 = vld3q_f32(v277);
          v462.val[0] = vuzp1q_s16(v265, (int16x8_t)v461.val[0]);
          v462.val[1] = vuzp1q_s16(v278, (int16x8_t)v461.val[1]);
          v462.val[2] = vuzp1q_s16(v279, (int16x8_t)v461.val[2]);
          vst3q_s16(v275, v462);
          v275 += 24;
          v274 += 24;
          v276 -= 8;
        }
        while (v276);
        if (v272 != v273)
        {
          uint64_t v271 = 3 * v273;
          v268 += 3 * (v272 & 0x3FFFFFFFFFFFFFF8);
          goto LABEL_377;
        }
      }
      else
      {
        uint64_t v271 = 0;
LABEL_377:
        long long v280 = &v266[v271];
        do
        {
          v265.i64[0] = *(void *)v268;
          v265.i32[2] = v268[2];
          int16x4_t v281 = vmovn_s32((int32x4_t)v265);
          v280[2] = v281.i16[2];
          *(_DWORD *)long long v280 = v281.i32[0];
          v280 += 3;
          v268 += 3;
        }
        while (v268 != v269);
      }
    }
    uint64_t v282 = a1[408];
    atomic_fetch_add_explicit(&v263->__shared_owners_, 1uLL, memory_order_relaxed);
    char v283 = *(std::__shared_weak_count **)(v282 + 104);
    *(void *)(v282 + 96) = v264;
    *(void *)(v282 + 104) = v263;
    if (v283 && !atomic_fetch_add(&v283->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
    if (v266 && v424 != v208)
    {
      uint64_t shared_weak_owners = 6 * v267;
      if (v263[3].__shared_weak_owners_ > 6 * v267) {
        uint64_t shared_weak_owners = v263[3].__shared_weak_owners_;
      }
      v263[3].__shared_owners_ = 0;
      v263[3].__shared_weak_owners_ = shared_weak_owners;
    }
    if (!atomic_fetch_add(&v263->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
    if ((void)v447)
    {
      unint64_t v285 = *(void *)&v445[16];
      unint64_t v286 = v446;
      if ((void)v446 != *(void *)&v445[16])
      {
        v287 = *(void **)&v445[8];
        int v288 = BYTE8(v446);
        int v289 = BYTE9(v446);
        if (*(void *)v445 && *(unsigned char *)(*(void *)&v445[8] + 17) != 2) {
          (*(void (**)(void))(**(void **)v445 + 64))();
        }
        if (v288 && !v289)
        {
          unint64_t v291 = v287[7];
          unint64_t v290 = v287[8];
          if (v290 == v291) {
            unint64_t v291 = v287[10] - v287[9];
          }
          if (v285 < v291) {
            unint64_t v291 = v285;
          }
          if (v290 <= v286) {
            unint64_t v290 = v286;
          }
          if (v290 == v291) {
            unint64_t v290 = v291 + v287[10] - v287[9];
          }
          v287[7] = v291;
          v287[8] = v290;
        }
      }
    }
    if (*(void *)&v451[16])
    {
      unint64_t v292 = *(void *)&v450[16];
      unint64_t v293 = *(void *)v451;
      if (*(void *)v451 != *(void *)&v450[16])
      {
        CFRange v294 = *(void **)&v450[8];
        int v295 = v451[8];
        int v296 = v451[9];
        if (*(void *)v450 && *(unsigned char *)(*(void *)&v450[8] + 17) != 2) {
          (*(void (**)(void))(**(void **)v450 + 64))();
        }
        if (v295 && !v296)
        {
          unint64_t v298 = v294[7];
          unint64_t v297 = v294[8];
          if (v297 == v298) {
            unint64_t v298 = v294[10] - v294[9];
          }
          if (v292 < v298) {
            unint64_t v298 = v292;
          }
          if (v297 <= v293) {
            unint64_t v297 = v293;
          }
          if (v297 == v298) {
            unint64_t v297 = v298 + v294[10] - v294[9];
          }
          v294[7] = v298;
          v294[8] = v297;
        }
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v12 = (uint64_t)a1;
    uint64_t v11 = a3;
    if (*(void *)v444)
    {
      *(void *)&v444[8] = *(void *)v444;
      operator delete(*(void **)v444);
    }
  }
  BOOL v299 = 0;
  unint64_t v300 = *(void *)(a5 + 384);
  double v301 = v187[4];
  double v302 = v301 * 0.05 * *(float *)(v300 + 1168);
  double v303 = v301 * 0.05 * *(float *)(v300 + 1172);
  double v304 = v301 * 0.05 * *(float *)(v300 + 1176);
  *(_OWORD *)&v451[16] = 0u;
  *(_OWORD *)&v450[8] = 0u;
  *(_OWORD *)v451 = 0u;
  memset(v452, 0, 24);
  memset(&v452[32], 0, 32);
  uint64_t v453 = 0x3FF0000000000000;
  *(double *)v450 = v302;
  *(double *)&v451[16] = v303;
  *(double *)&v452[24] = v304;
  long long v447 = 0u;
  memset(v448, 0, 24);
  long long v446 = 0u;
  *(_OWORD *)&v445[8] = 0u;
  *(void *)v445 = 0x3FF0000000000000;
  *(void *)&long long v447 = 0x3FF0000000000000;
  *(void *)&v448[32] = 0;
  *(void *)&v448[24] = 0x3FF0000000000000;
  uint64_t v449 = 0x3FF0000000000000;
  *(double *)&v448[40] = v193;
  *(double *)&v448[48] = v195;
  *(double *)&v448[56] = v304;
  int v305 = *(unsigned __int8 *)(a5 + 24);
  unsigned __int8 v306 = v305 != 255;
  unsigned int v307 = v305 == 255 && *(unsigned char *)(v11 + 5) != 0;
  if (*(unsigned char *)(v11 + 7) && *(float *)(v11 + 68) >= 0.001)
  {
    float v308 = fmax(v301 * 0.5, 250.0)
         * (float)((float)(*(float *)(v11 + 64) * *(float *)(*(void *)(a5 + 8) + 624))
                 * fmaxf((float)(*(float *)(v11 + 20) * 0.125) + -0.875, 0.0));
    BOOL v299 = v308 >= 0.001;
  }
  gm::operator*<double,4,4,4>((double *)v444, (double *)v445, (double *)v450);
  *(_OWORD *)v430 = *(_OWORD *)&v444[16];
  float64x2_t v422 = *(float64x2_t *)&v444[48];
  float64x2_t v425 = *(float64x2_t *)v444;
  float64x2_t v418 = *(float64x2_t *)&v444[80];
  float64x2_t v420 = *(float64x2_t *)&v444[32];
  float64x2_t v417 = *(float64x2_t *)&v444[64];
  float64x2_t v412 = *(float64x2_t *)&v444[96];
  float64x2_t v414 = *(float64x2_t *)&v444[112];
  md::InstanceData::InstanceData((uint64_t)&v442, 1u, 0);
  uint64_t v310 = *(void *)(v442 + 40);
  uint64_t v309 = *(void *)(v442 + 48);
  unint64_t v311 = *(void *)(v442 + 8);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v312 = 0;
  *((void *)&v312 + 1) = v442;
  v313 = *(float32x4_t **)(v442 + 72);
  *(_OWORD *)std::string __p = v312;
  unint64_t v438 = 0;
  unint64_t v439 = (v309 - v310) / v311 * v311;
  v441 = v313;
  __int16 v440 = 1;
  float32x4_t *v313 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v425), *(float64x2_t *)v430);
  v313[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v420), v422);
  v313[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v417), v418);
  v313[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v412), v414);
  char v443 = 0;
  uint64_t v395 = *(unsigned __int8 *)(a3 + 16);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v444, v12 + 568, v307, 0, 0, 0, 0, 0, 0, 1u, 0, *(unsigned char *)(a3 + 9), 0, v306, v299, 0, 0, 0, *(unsigned char *)a3,
    0,
    0,
    v395,
    BYTE1(v395),
    BYTE2(v395),
    BYTE3(v395),
    BYTE4(v395),
    SBYTE5(v395),
    HIWORD(v395),
    0);
  uint64_t v314 = *(void *)v444;
  v315 = *(std::__shared_weak_count **)&v444[8];
  if (*(void *)&v444[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v444[8] + 8), 1uLL, memory_order_relaxed);
  }
  if (v314 && **(void **)(v314 + 40) == v207[1])
  {
    uint64_t v317 = v207[2];
    if (v317 && v317 != v314) {
      ggl::PipelineSetup::resetData((uint64_t)v207);
    }
    if (v315) {
      atomic_fetch_add_explicit(&v315->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v316 = (std::__shared_weak_count *)v207[3];
    v207[2] = v314;
    v207[3] = v315;
    if (v316) {
      goto LABEL_443;
    }
  }
  else
  {
    v316 = (std::__shared_weak_count *)v207[3];
    v207[2] = 0;
    v207[3] = 0;
    if (!v316) {
      goto LABEL_445;
    }
LABEL_443:
    if (!atomic_fetch_add(&v316->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
LABEL_445:
  if (v315 && !atomic_fetch_add(&v315->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
    std::__shared_weak_count::__release_weak(v315);
  }
  v318 = *(std::__shared_weak_count **)&v444[8];
  if (*(void *)&v444[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v444[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
    std::__shared_weak_count::__release_weak(v318);
  }
  v319 = (unsigned char *)v207[2];
  if (v319[317])
  {
    uint64_t v320 = v207[8];
    *(void *)(v320 + 232) = 0;
    uint64_t v321 = v197[42];
    *(void *)(v320 + 224) = v321;
    uint64_t v322 = v207[20];
    uint64_t v323 = v197[43];
    if (v323) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v323 + 8), 1uLL, memory_order_relaxed);
    }
    v324 = *(std::__shared_weak_count **)(v322 + 232);
    *(void *)(v322 + 224) = v321;
    *(void *)(v322 + 232) = v323;
    if (v324 && !atomic_fetch_add(&v324->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
    v319 = (unsigned char *)v207[2];
  }
  if (v319[309])
  {
    uint64_t v325 = v207[8];
    *(void *)(v325 + 296) = 0;
    uint64_t v326 = *(void *)(v12 + 1880);
    *(void *)(v325 + 288) = v326;
    uint64_t v327 = v207[20];
    uint64_t v328 = *(void *)(v12 + 1888);
    if (v328) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v328 + 8), 1uLL, memory_order_relaxed);
    }
    v329 = *(std::__shared_weak_count **)(v327 + 296);
    *(void *)(v327 + 288) = v326;
    *(void *)(v327 + 296) = v328;
    if (v329 && !atomic_fetch_add(&v329->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
    v319 = (unsigned char *)v207[2];
  }
  if (v319[331])
  {
    uint64_t v330 = v207[8];
    *(void *)(v330 + 120) = 0;
    uint64_t v331 = *(void *)(v12 + 1832);
    *(void *)(v330 + 112) = v331;
    uint64_t v332 = v207[20];
    uint64_t v333 = *(void *)(v12 + 1840);
    if (v333) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v333 + 8), 1uLL, memory_order_relaxed);
    }
    v334 = *(std::__shared_weak_count **)(v332 + 120);
    *(void *)(v332 + 112) = v331;
    *(void *)(v332 + 120) = v333;
    if (v334 && !atomic_fetch_add(&v334->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
    v319 = (unsigned char *)v207[2];
  }
  if (v319[330])
  {
    uint64_t v335 = v207[8];
    *(void *)(v335 + 104) = 0;
    uint64_t v336 = *(void *)(v12 + 1816);
    *(void *)(v335 + 96) = v336;
    uint64_t v337 = v207[20];
    uint64_t v338 = *(void *)(v12 + 1824);
    if (v338) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v338 + 8), 1uLL, memory_order_relaxed);
    }
    v339 = *(std::__shared_weak_count **)(v337 + 104);
    *(void *)(v337 + 96) = v336;
    *(void *)(v337 + 104) = v338;
    if (v339 && !atomic_fetch_add(&v339->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  if (*(unsigned char *)(v207[2] + 326))
  {
    uint64_t v340 = v207[8];
    *(void *)(v340 + 200) = 0;
    uint64_t v341 = v205[4];
    *(void *)(v340 + 192) = v341;
    uint64_t v342 = v207[20];
    uint64_t v343 = v205[5];
    if (v343) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v343 + 8), 1uLL, memory_order_relaxed);
    }
    v344 = *(std::__shared_weak_count **)(v342 + 200);
    *(void *)(v342 + 192) = v341;
    *(void *)(v342 + 200) = v343;
    if (v344 && !atomic_fetch_add(&v344->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  uint64_t v345 = v207[8];
  *(void *)(v345 + 56) = 0;
  uint64_t v346 = v205[2];
  *(void *)(v345 + 48) = v346;
  uint64_t v347 = v207[20];
  uint64_t v348 = v205[3];
  if (v348) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v348 + 8), 1uLL, memory_order_relaxed);
  }
  v349 = *(std::__shared_weak_count **)(v347 + 56);
  *(void *)(v347 + 48) = v346;
  *(void *)(v347 + 56) = v348;
  if (v349 && !atomic_fetch_add(&v349->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
    std::__shared_weak_count::__release_weak(v349);
  }
  *(void *)&v444[8] = 0;
  *(void *)v444 = 0;
  md::DaVinciGroundRenderLayer::setupCommonGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(v207, (void *)a5, v197, v442, *((uint64_t *)&v442 + 1), (uint64_t *)v444, a3);
  uint64_t v350 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>::pop(*(void *)(v12 + 1712));
  uint64_t v351 = v207[8];
  *(void *)(v351 + 256) = v350;
  *(void *)(v351 + 264) = 0;
  uint64_t v352 = v207[20];
  v353 = *(std::__shared_weak_count **)(v352 + 264);
  *(void *)(v352 + 256) = 0;
  *(void *)(v352 + 264) = 0;
  if (v353 && !atomic_fetch_add(&v353->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
    std::__shared_weak_count::__release_weak(v353);
  }
  v354 = (void *)*((void *)a2 + 1);
  int8x8_t v355 = (int8x8_t)v354[1];
  if (v355)
  {
    uint8x8_t v356 = (uint8x8_t)vcnt_s8(v355);
    v356.i16[0] = vaddlv_u8(v356);
    if (v356.u32[0] > 1uLL)
    {
      unint64_t v357 = 0xE42D19AFCA302E68;
      if (*(void *)&v355 <= 0xE42D19AFCA302E68) {
        unint64_t v357 = 0xE42D19AFCA302E68 % *(void *)&v355;
      }
    }
    else
    {
      unint64_t v357 = (*(void *)&v355 - 1) & 0xE42D19AFCA302E68;
    }
    v358 = *(void **)(*v354 + 8 * v357);
    if (v358)
    {
      v359 = (void *)*v358;
      if (v359)
      {
        if (v356.u32[0] < 2uLL)
        {
          uint64_t v360 = *(void *)&v355 - 1;
          while (1)
          {
            uint64_t v362 = v359[1];
            if (v362 == 0xE42D19AFCA302E68)
            {
              if (v359[2] == 0xE42D19AFCA302E68) {
                goto LABEL_512;
              }
            }
            else if ((v362 & v360) != v357)
            {
              goto LABEL_512;
            }
            v359 = (void *)*v359;
            if (!v359) {
              goto LABEL_512;
            }
          }
        }
        do
        {
          unint64_t v361 = v359[1];
          if (v361 == 0xE42D19AFCA302E68)
          {
            if (v359[2] == 0xE42D19AFCA302E68) {
              break;
            }
          }
          else
          {
            if (v361 >= *(void *)&v355) {
              v361 %= *(void *)&v355;
            }
            if (v361 != v357) {
              break;
            }
          }
          v359 = (void *)*v359;
        }
        while (v359);
      }
    }
  }
LABEL_512:
  md::DaVinciGroundRenderLayer::setupSSAOGroundPipelineSetup<ggl::DaVinci::GroundPipelineSetup>(v12, (uint64_t)v205, v207, v197, *(unsigned char *)a3, 1.0);
  v363 = *(uint64_t **)(v12 + 3128);
  uint64_t v364 = *v363;
  v365 = (std::__shared_weak_count *)v363[1];
  if (v365)
  {
    atomic_fetch_add_explicit(&v365->__shared_owners_, 1uLL, memory_order_relaxed);
    v366 = v207 + 12;
    *(void *)(v207[12] + 16) = v364;
    if (!atomic_fetch_add(&v365->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  else
  {
    v366 = v207 + 12;
    *(void *)(v207[12] + 16) = v364;
  }
  v367 = *(uint64_t **)(v12 + 3128);
  uint64_t v368 = *v367;
  v369 = (std::__shared_weak_count *)v367[1];
  if (v369)
  {
    atomic_fetch_add_explicit(&v369->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(*v366 + 40) = v368;
    if (!atomic_fetch_add(&v369->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  else
  {
    *(void *)(*v366 + 40) = v368;
  }
  uint64_t v370 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>::pop(*(void *)(v12 + 1704));
  uint64_t v371 = v207[8];
  *(void *)(v371 + 80) = v370;
  *(void *)(v371 + 88) = 0;
  uint64_t v372 = v207[20];
  v373 = *(std::__shared_weak_count **)(v372 + 88);
  *(void *)(v372 + 80) = 0;
  *(void *)(v372 + 88) = 0;
  if (v373 && !atomic_fetch_add(&v373->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
    std::__shared_weak_count::__release_weak(v373);
  }
  md::DaVinciGroundRenderLayer::setupStyleConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(v12, (uint64_t)v207, a5, a3);
  md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(v12, (uint64_t)v207, &v458);
  if (v299) {
    md::DaVinciGroundRenderLayer::setupStyleGroundOcclusionConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(v12, v207, (uint64_t)v187, a5, a3);
  }
  *((void *)&v456 + 1) = (v300 >> 4) | 0x300;
  *(void *)&long long v455 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v12 + 2992), 3, 1, 1, 0, 0, *(unsigned __int8 *)(a3 + 1), 3);
  *((void *)&v455 + 1) = v207;
  *(void *)&v457[48] = 1;
  uint64_t v374 = *(void *)(v12 + 3264);
  uint64_t v375 = *(void *)(*(void *)(v374 + 96) + 40);
  uint64_t v376 = *(void *)(*(void *)(v374 + 96) + 48);
  *(_OWORD *)&v444[8] = *(_OWORD *)&v454[8];
  *(_OWORD *)&v444[24] = v455;
  *(_OWORD *)&v444[40] = v456;
  *(_OWORD *)&v444[104] = *(_OWORD *)&v457[48];
  *(_OWORD *)&v444[88] = *(_OWORD *)&v457[32];
  *(_OWORD *)&v444[72] = *(_OWORD *)&v457[16];
  unint64_t v377 = (unint64_t)(v376 - v375) >> 1;
  *(void *)v444 = &off_1EF55A458;
  *(_OWORD *)&v444[56] = *(_OWORD *)v457;
  v378 = *(void **)(v12 + 3112);
  uint64_t v379 = v378[1];
  if (v379 == *(void *)(v12 + 3120))
  {
    v378 = (void *)*v378;
    if (!v378)
    {
      v378 = malloc_type_malloc(120 * v379 + 16, 0xB644C221uLL);
      void *v378 = 0;
      v378[1] = 0;
      **(void **)(v12 + 3112) = v378;
    }
    *(void *)(v12 + 3112) = v378;
    uint64_t v379 = v378[1];
  }
  v380 = &v378[15 * v379];
  v378[1] = v379 + 1;
  v380[2] = &off_1EF55A458;
  long long v382 = *(_OWORD *)&v444[88];
  long long v381 = *(_OWORD *)&v444[104];
  long long v383 = *(_OWORD *)&v444[72];
  *(_OWORD *)(v380 + 9) = *(_OWORD *)&v444[56];
  *(_OWORD *)(v380 + 11) = v383;
  *(_OWORD *)(v380 + 13) = v382;
  long long v384 = *(_OWORD *)&v444[8];
  long long v385 = *(_OWORD *)&v444[24];
  *(_OWORD *)(v380 + 7) = *(_OWORD *)&v444[40];
  *(_OWORD *)(v380 + 5) = v385;
  *(_OWORD *)(v380 + 3) = v384;
  *(_OWORD *)(v380 + 15) = v381;
  v380[10] = v374;
  v380[11] = 0;
  v380[12] = v377;
  v380[13] = 0;
  v380[14] = 1;
  ggl::CommandBuffer::pushRenderItem(a9, (uint64_t)(v380 + 2));
  if (v441)
  {
    unint64_t v387 = v438;
    unint64_t v386 = v439;
    if (v439 != v438)
    {
      v388 = __p[1];
      int v389 = v440;
      int v390 = HIBYTE(v440);
      if (__p[0] && *((unsigned char *)__p[1] + 17) != 2) {
        (*(void (**)(void))(*(void *)__p[0] + 64))();
      }
      if (v389 && !v390)
      {
        unint64_t v392 = v388[7];
        unint64_t v391 = v388[8];
        if (v391 == v392) {
          unint64_t v392 = v388[10] - v388[9];
        }
        if (v387 < v392) {
          unint64_t v392 = v387;
        }
        if (v391 <= v386) {
          unint64_t v391 = v386;
        }
        if (v391 == v392) {
          unint64_t v391 = v392 + v388[10] - v388[9];
        }
        v388[7] = v392;
        v388[8] = v391;
      }
    }
  }
  v393 = (std::__shared_weak_count *)*((void *)&v442 + 1);
  if (*((void *)&v442 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v442 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
      std::__shared_weak_count::__release_weak(v393);
    }
  }
}

void sub_1A19E1CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x2A0]);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x320]);
  if (__p) {
    operator delete(__p);
  }
  unint64_t v68 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v68;
    operator delete(v68);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xADE8F13E6C18D970;
    if (a3 <= 0xADE8F13E6C18D970) {
      unint64_t v4 = 0xADE8F13E6C18D970 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0xADE8F13E6C18D970;
  }
  uint64_t v8 = *(void **)(a2 + 8 * v4);
  if (!v8) {
    goto LABEL_25;
  }
  unint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0xADE8F13E6C18D970)
      {
        if (v9[2] == 0xADE8F13E6C18D970) {
          goto LABEL_23;
        }
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0xADE8F13E6C18D970) {
      break;
    }
    if (v10 >= a3) {
      v10 %= a3;
    }
    if (v10 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (v9[2] != 0xADE8F13E6C18D970) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0xADE8F13E6C18D970)
  {
    uint64_t v6 = *(void *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v13 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v13 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v13 = (a3 - 1) & 0x1AF456233693CD46;
  }
  unsigned int v14 = *(void **)(a2 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  int v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0x1AF456233693CD46)
      {
        if (v15[2] == 0x1AF456233693CD46) {
          goto LABEL_46;
        }
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      int v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 0x1AF456233693CD46)
    {
      if (v16 >= a3) {
        v16 %= a3;
      }
      if (v16 != v13) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v15[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      int v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v7 = *(void *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v19 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20) {
      unint64_t v19 = 0x9F2276D081C2CB20 % a3;
    }
  }
  else
  {
    unint64_t v19 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  unint64_t v20 = *(void **)(a2 + 8 * v19);
  if (!v20) {
    goto LABEL_71;
  }
  int v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x9F2276D081C2CB20)
      {
        if (v21[2] == 0x9F2276D081C2CB20) {
          goto LABEL_69;
        }
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      int v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x9F2276D081C2CB20)
    {
      if (v22 >= a3) {
        v22 %= a3;
      }
      if (v22 != v19) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v21[2] != 0x9F2276D081C2CB20)
    {
LABEL_58:
      int v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v5 = *(void *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v25 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v25 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v25 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v26 = *(void **)(a2 + 8 * v25);
  if (!v26) {
    goto LABEL_94;
  }
  unint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0x8BD499FBD96FBB9ELL)
      {
        if (v27[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      unint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v28 >= a3) {
      v28 %= a3;
    }
    if (v28 != v25) {
      goto LABEL_94;
    }
LABEL_81:
    unint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_94;
    }
  }
  if (v27[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_94:
    uint64_t v31 = 0;
    goto LABEL_95;
  }
  uint64_t v31 = *(void *)(v30 + 32);
LABEL_95:
  *uint64_t result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

void md::DrapingLogic::runAfterLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v3 = *(int8x8_t **)(*(void *)a3 + 168);
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  BOOL v34 = &v35;
  unint64_t v4 = (void *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(v3);
  uint64_t v5 = (unint64_t *)v4[7];
  uint64_t v6 = (unint64_t *)v4[8];
  if (v5 != v6)
  {
    uint64_t v7 = v4[10];
    while (1)
    {
      unint64_t v8 = *v5;
      unint64_t v9 = (void *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(v3);
      uint64_t v10 = v9[4];
      if (v8 >> 39 >= (v9[5] - v10) >> 3) {
        break;
      }
      uint64_t v11 = *(void *)(v10 + 8 * (v8 >> 39));
      if (!v11) {
        break;
      }
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(v8) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 >= (v13 - v14) >> 3) {
        break;
      }
      uint64_t v15 = v14 + 8 * v12;
      BOOL v16 = v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(v8);
      if (!v16) {
        break;
      }
      uint64_t v29 = v9[10];
      if (!v29 || v29 + v12 == v9[11]) {
        break;
      }
LABEL_4:
      v7 += 104;
      if (++v5 == v6) {
        goto LABEL_37;
      }
    }
    uint64_t v17 = (uint64_t *)operator new(0x30uLL);
    uint64_t v18 = v17;
    unint64_t v19 = *(void *)(v7 + 88);
    v17[4] = v19;
    unsigned int v20 = *(unsigned __int8 *)(v7 + 96);
    *((unsigned char *)v17 + 40) = v20;
    int v21 = v35;
    unint64_t v22 = &v35;
    uint64_t v23 = &v35;
    if (!v35)
    {
LABEL_31:
      *uint64_t v17 = 0;
      v17[1] = 0;
      v17[2] = (uint64_t)v23;
      *unint64_t v22 = v17;
      if (*v34)
      {
        BOOL v34 = (uint64_t **)*v34;
        uint64_t v18 = *v22;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v35, v18);
      ++v36;
      goto LABEL_4;
    }
    while (1)
    {
      uint64_t v23 = (uint64_t **)v21;
      unint64_t v24 = v21[4];
      if (v19 == v24)
      {
        unsigned int v26 = *((unsigned __int8 *)v21 + 40);
        if (v20 < v26) {
          goto LABEL_14;
        }
        BOOL v27 = v26 == v20;
        if (v26 >= v20) {
          char v28 = 1;
        }
        else {
          char v28 = -1;
        }
        if (v27) {
          char v28 = 0;
        }
        if ((v28 & 0x80) == 0)
        {
LABEL_33:
          operator delete(v17);
          goto LABEL_4;
        }
LABEL_29:
        int v21 = (uint64_t *)v21[1];
        if (!v21)
        {
          unint64_t v22 = v23 + 1;
          goto LABEL_31;
        }
      }
      else
      {
        if (v19 >= v24)
        {
          if (v24 >= v19) {
            char v25 = 1;
          }
          else {
            char v25 = -1;
          }
          if ((v25 & 0x80) == 0) {
            goto LABEL_33;
          }
          goto LABEL_29;
        }
LABEL_14:
        int v21 = (uint64_t *)*v21;
        unint64_t v22 = v23;
        if (!*v23) {
          goto LABEL_31;
        }
      }
    }
  }
LABEL_37:
  uint64_t v30 = v34;
  if (v34 != &v35)
  {
    do
    {
      uint64_t v31 = (md::OverlayTileData *)v30[4];
      if ((_BYTE)v30[5]) {
        md::OverlayTileData::clearEntities(v31);
      }
      else {
        md::ElevatedStrokeTileData::clearEntities(v31);
      }
      uint64_t v32 = v30[1];
      if (v32)
      {
        do
        {
          int v33 = (uint64_t **)v32;
          uint64_t v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          int v33 = (uint64_t **)v30[2];
          BOOL v16 = *v33 == (uint64_t *)v30;
          uint64_t v30 = v33;
        }
        while (!v16);
      }
      uint64_t v30 = v33;
    }
    while (v33 != &v35);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v35);
}

void sub_1A19E25FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t gdc::Registry::storage<md::overlayComponents::VectorOverlay>(int8x8_t *a1)
{
  unint64_t v10 = 0xC3F88573D031CDC5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC3F88573D031CDC5;
    if (*(void *)&v1 <= 0xC3F88573D031CDC5) {
      unint64_t v3 = 0xC3F88573D031CDC5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC3F88573D031CDC5;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC3F88573D031CDC5)
      {
        if (v5[2] == 0xC3F88573D031CDC5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC3F88573D031CDC5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC3F88573D031CDC5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19E2854(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::needsDebugDraw(md::CompositeLabeler *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 296))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

BOOL md::MapStandardLabeler::needsDebugDraw(md::MapStandardLabeler *this)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2)
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 1242));
    if ((v3 & 1) == 0) {
      (*(void (**)(md::MapStandardLabeler *))(*(void *)this + 272))(this);
    }
  }
  uint64_t v4 = *((void *)this + 3);
  return *(unsigned char *)(v4 + 3616)
      || *(unsigned char *)(v4 + 3623)
      || *((void *)this + 23)
      || *((void *)this + 25)
      || *((unsigned char *)this + 452) != 0;
}

uint64_t md::MapNavLabeler::needsDebugDraw(md::MapNavLabeler *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 232) || *(unsigned char *)(*((void *)this + 8) + 249)) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(md::MapNavLabeler *))(*(void *)this + 352))(this);
  if (result)
  {
    unsigned __int8 v3 = (void *)*((void *)this + 7);
    return [v3 needsDebugDraw];
  }
  return result;
}

void md::World::setStyleManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4 != v5)
  {
    while (*(_WORD *)v4 != 1)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_12;
      }
    }
  }
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = (std::__shared_weak_count *)a2[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::PolygonLayerDataSource::setStyleManager(v6, v7, (uint64_t)v8);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v9 != v10)
  {
    while (*(_WORD *)v9 != 59)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_23;
      }
    }
  }
  if (v9 != v10)
  {
    uint64_t v11 = *(void *)(v9 + 8);
    if (v11)
    {
      uint64_t v12 = *a2;
      uint64_t v13 = (std::__shared_weak_count *)a2[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::PolygonLayerDataSource::setStyleManager(v11, v12, (uint64_t)v13);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
LABEL_23:
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v14;
  if (v14 != v15)
  {
    uint64_t v16 = *(void *)(a1 + 32);
    while (*(_WORD *)v16 != 57)
    {
      v16 += 16;
      if (v16 == v15) {
        goto LABEL_36;
      }
    }
  }
  if (v16 != v15)
  {
    uint64_t v17 = *(void *)(v16 + 8);
    if (v17)
    {
      uint64_t v19 = *a2;
      uint64_t v18 = a2[1];
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(v17 + 776) = v19;
      unsigned int v20 = *(std::__shared_weak_count **)(v17 + 784);
      *(void *)(v17 + 784) = v18;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
    }
  }
LABEL_36:
  if (v14 != v15)
  {
    uint64_t v21 = v14;
    while (*(_WORD *)v21 != 58)
    {
      v21 += 16;
      if (v21 == v15) {
        goto LABEL_51;
      }
    }
    if (v21 != v15)
    {
      uint64_t v22 = *(void *)(v21 + 8);
      if (v22)
      {
        uint64_t v24 = *a2;
        uint64_t v23 = a2[1];
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(v22 + 776) = v24;
        char v25 = *(std::__shared_weak_count **)(v22 + 784);
        *(void *)(v22 + 784) = v23;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
      }
    }
LABEL_51:
    while (v14 != v15)
    {
      if (*(_WORD *)v14 == 41)
      {
        if (v14 != v15)
        {
          uint64_t v76 = *(void *)(v14 + 8);
          if (v76)
          {
            uint64_t v77 = *a2;
            unint64_t v78 = (std::__shared_weak_count *)a2[1];
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            md::PolygonLayerDataSource::setStyleManager(v76, v77, (uint64_t)v78);
            if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
        }
        break;
      }
      v14 += 16;
    }
  }
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v27 = *(void *)(a1 + 40);
  if (v26 != v27)
  {
    while (*(_WORD *)v26 != 2)
    {
      v26 += 16;
      if (v26 == v27) {
        goto LABEL_63;
      }
    }
  }
  if (v26 != v27)
  {
    uint64_t v28 = *(void *)(v26 + 8);
    if (v28)
    {
      uint64_t v29 = *a2;
      uint64_t v30 = (std::__shared_weak_count *)a2[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v28, v29, (uint64_t)v30);
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
LABEL_63:
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v32 = *(void *)(a1 + 40);
  if (v31 != v32)
  {
    while (*(_WORD *)v31 != 42)
    {
      v31 += 16;
      if (v31 == v32) {
        goto LABEL_74;
      }
    }
  }
  if (v31 != v32)
  {
    uint64_t v33 = *(void *)(v31 + 8);
    if (v33)
    {
      uint64_t v34 = *a2;
      unint64_t v35 = (std::__shared_weak_count *)a2[1];
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v33, v34, (uint64_t)v35);
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
LABEL_74:
  uint64_t v36 = *(void *)(a1 + 32);
  uint64_t v37 = *(void *)(a1 + 40);
  if (v36 != v37)
  {
    while (*(_WORD *)v36 != 3)
    {
      v36 += 16;
      if (v36 == v37) {
        goto LABEL_85;
      }
    }
  }
  if (v36 != v37)
  {
    uint64_t v38 = *(void *)(v36 + 8);
    if (v38)
    {
      uint64_t v39 = *a2;
      unint64_t v40 = (std::__shared_weak_count *)a2[1];
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v38, v39, (uint64_t)v40);
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
LABEL_85:
  uint64_t v41 = *(void *)(a1 + 32);
  uint64_t v42 = *(void *)(a1 + 40);
  if (v41 != v42)
  {
    while (*(_WORD *)v41 != 52)
    {
      v41 += 16;
      if (v41 == v42) {
        goto LABEL_96;
      }
    }
  }
  if (v41 != v42)
  {
    uint64_t v43 = *(void *)(v41 + 8);
    if (v43)
    {
      uint64_t v44 = *a2;
      long long v45 = (std::__shared_weak_count *)a2[1];
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v43, v44, (uint64_t)v45);
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
LABEL_96:
  uint64_t v46 = *(void *)(a1 + 32);
  uint64_t v47 = *(void *)(a1 + 40);
  uint64_t v48 = v46;
  if (v46 != v47)
  {
    uint64_t v48 = *(void *)(a1 + 32);
    while (*(_WORD *)v48 != 53)
    {
      v48 += 16;
      if (v48 == v47) {
        goto LABEL_111;
      }
    }
  }
  if (v48 != v47)
  {
    uint64_t v49 = *(void *)(v48 + 8);
    if (v49)
    {
      uint64_t v50 = *a2;
      long long v51 = (std::__shared_weak_count *)a2[1];
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v49, v50, (uint64_t)v51);
      if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      *(unsigned char *)(v49 + 784) = 1;
      uint64_t v46 = *(void *)(a1 + 32);
      uint64_t v47 = *(void *)(a1 + 40);
    }
  }
LABEL_111:
  while (v46 != v47)
  {
    if (*(_WORD *)v46 == 4)
    {
      if (v46 != v47)
      {
        uint64_t v73 = *(void *)(v46 + 8);
        if (v73)
        {
          uint64_t v74 = *a2;
          long long v75 = (std::__shared_weak_count *)a2[1];
          if (v75) {
            atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          md::TrafficLayerDataSource::setStyleManager(v73, v74, (uint64_t)v75);
          if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
      }
      break;
    }
    v46 += 16;
  }
  uint64_t v52 = *(void *)(a1 + 32);
  uint64_t v53 = *(void *)(a1 + 40);
  if (v52 != v53)
  {
    while (*(_WORD *)v52 != 65)
    {
      v52 += 16;
      if (v52 == v53) {
        goto LABEL_123;
      }
    }
  }
  if (v52 != v53)
  {
    uint64_t v54 = *(void *)(v52 + 8);
    if (v54)
    {
      uint64_t v55 = *a2;
      BOOL v56 = (std::__shared_weak_count *)a2[1];
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v54, v55, (uint64_t)v56);
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
LABEL_123:
  uint64_t v57 = *(void *)(a1 + 32);
  uint64_t v58 = *(void *)(a1 + 40);
  if (v57 != v58)
  {
    while (*(_WORD *)v57 != 67)
    {
      v57 += 16;
      if (v57 == v58) {
        goto LABEL_134;
      }
    }
  }
  if (v57 != v58)
  {
    uint64_t v59 = *(void *)(v57 + 8);
    if (v59)
    {
      uint64_t v60 = *a2;
      BOOL v61 = (std::__shared_weak_count *)a2[1];
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v59, v60, (uint64_t)v61);
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
LABEL_134:
  uint64_t v62 = *(void *)(a1 + 32);
  uint64_t v63 = *(void *)(a1 + 40);
  if (v62 != v63)
  {
    while (*(_WORD *)v62 != 68)
    {
      v62 += 16;
      if (v62 == v63) {
        goto LABEL_145;
      }
    }
  }
  if (v62 != v63)
  {
    uint64_t v64 = *(void *)(v62 + 8);
    if (v64)
    {
      uint64_t v65 = *a2;
      uint64_t v66 = (std::__shared_weak_count *)a2[1];
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::TrafficLayerDataSource::setStyleManager(v64, v65, (uint64_t)v66);
      if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
LABEL_145:
  uint64_t v67 = *(void *)(a1 + 32);
  uint64_t v68 = *(void *)(a1 + 40);
  if (v67 != v68)
  {
    while (*(_WORD *)v67 != 6)
    {
      v67 += 16;
      if (v67 == v68) {
        goto LABEL_174;
      }
    }
  }
  if (v67 != v68)
  {
    uint64_t v69 = *(void *)(v67 + 8);
    if (v69)
    {
      uint64_t v70 = *a2;
      unsigned int v71 = (std::__shared_weak_count *)a2[1];
      if (v71)
      {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v72 = (const void *)(v69 + 776);
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v72 = (const void *)(v69 + 776);
      }
      sp_mut = std::__get_sp_mut(v72);
      std::__sp_mut::lock(sp_mut);
      *(void *)(v69 + 776) = v70;
      uint64_t v80 = *(std::__shared_weak_count **)(v69 + 784);
      *(void *)(v69 + 784) = v71;
      std::__sp_mut::unlock(sp_mut);
      if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
LABEL_174:
  uint64_t v81 = *(void *)(a1 + 32);
  uint64_t v82 = *(void *)(a1 + 40);
  if (v81 != v82)
  {
    while (*(_WORD *)v81 != 14)
    {
      v81 += 16;
      if (v81 == v82) {
        goto LABEL_189;
      }
    }
  }
  if (v81 != v82)
  {
    uint64_t v83 = *(void *)(v81 + 8);
    if (v83)
    {
      uint64_t v84 = *a2;
      uint64_t v85 = (std::__shared_weak_count *)a2[1];
      if (v85)
      {
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v86 = (const void *)(v83 + 752);
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v86 = (const void *)(v83 + 752);
      }
      long long v87 = std::__get_sp_mut(v86);
      std::__sp_mut::lock(v87);
      *(void *)(v83 + 752) = v84;
      uint64_t v88 = *(std::__shared_weak_count **)(v83 + 760);
      *(void *)(v83 + 760) = v85;
      std::__sp_mut::unlock(v87);
      if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
      if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
LABEL_189:
  uint64_t v89 = *(void *)(a1 + 32);
  uint64_t v90 = *(void *)(a1 + 40);
  uint64_t v91 = v89;
  if (v89 != v90)
  {
    uint64_t v91 = *(void *)(a1 + 32);
    while (*(_WORD *)v91 != 16)
    {
      v91 += 16;
      if (v91 == v90) {
        goto LABEL_202;
      }
    }
  }
  if (v91 != v90)
  {
    uint64_t v92 = *(void *)(v91 + 8);
    if (v92)
    {
      uint64_t v93 = *a2;
      uint64_t v94 = a2[1];
      if (v94) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v95 = std::__get_sp_mut((const void *)(v92 + 792));
      std::__sp_mut::lock(v95);
      *(void *)(v92 + 792) = v93;
      uint64_t v96 = *(std::__shared_weak_count **)(v92 + 800);
      *(void *)(v92 + 800) = v94;
      std::__sp_mut::unlock(v95);
      if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      uint64_t v89 = *(void *)(a1 + 32);
      uint64_t v90 = *(void *)(a1 + 40);
    }
  }
LABEL_202:
  if (v89 != v90)
  {
    uint64_t v97 = v89;
    while (*(_WORD *)v97 != 17)
    {
      v97 += 16;
      if (v97 == v90) {
        goto LABEL_215;
      }
    }
    if (v97 != v90)
    {
      uint64_t v98 = *(void *)(v97 + 8);
      if (v98)
      {
        uint64_t v99 = *a2;
        uint64_t v100 = a2[1];
        if (v100) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v100 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v101 = std::__get_sp_mut((const void *)(v98 + 792));
        std::__sp_mut::lock(v101);
        *(void *)(v98 + 792) = v99;
        uint64_t v102 = *(std::__shared_weak_count **)(v98 + 800);
        *(void *)(v98 + 800) = v100;
        std::__sp_mut::unlock(v101);
        if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
        uint64_t v89 = *(void *)(a1 + 32);
        uint64_t v90 = *(void *)(a1 + 40);
      }
    }
LABEL_215:
    if (v89 != v90)
    {
      uint64_t v103 = v89;
      while (*(_WORD *)v103 != 47)
      {
        v103 += 16;
        if (v103 == v90) {
          goto LABEL_223;
        }
      }
      if (v103 != v90)
      {
        uint64_t v104 = *(void *)(v103 + 8);
        if (v104)
        {
          md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v104, *a2, a2[1]);
          uint64_t v89 = *(void *)(a1 + 32);
          uint64_t v90 = *(void *)(a1 + 40);
        }
      }
LABEL_223:
      if (v89 != v90)
      {
        uint64_t v105 = v89;
        while (*(_WORD *)v105 != 33)
        {
          v105 += 16;
          if (v105 == v90) {
            goto LABEL_231;
          }
        }
        if (v105 != v90)
        {
          uint64_t v106 = *(void *)(v105 + 8);
          if (v106)
          {
            md::DaVinciGroundLayerDataSource::setStyleManager(v106, *a2, a2[1]);
            uint64_t v89 = *(void *)(a1 + 32);
            uint64_t v90 = *(void *)(a1 + 40);
          }
        }
LABEL_231:
        if (v89 != v90)
        {
          uint64_t v107 = v89;
          while (*(_WORD *)v107 != 34)
          {
            v107 += 16;
            if (v107 == v90) {
              goto LABEL_239;
            }
          }
          if (v107 != v90)
          {
            uint64_t v108 = *(void *)(v107 + 8);
            if (v108)
            {
              md::DaVinciGroundLayerDataSource::setStyleManager(v108, *a2, a2[1]);
              uint64_t v89 = *(void *)(a1 + 32);
              uint64_t v90 = *(void *)(a1 + 40);
            }
          }
LABEL_239:
          if (v89 != v90)
          {
            uint64_t v109 = v89;
            while (*(_WORD *)v109 != 54)
            {
              v109 += 16;
              if (v109 == v90) {
                goto LABEL_247;
              }
            }
            if (v109 != v90)
            {
              uint64_t v110 = *(void *)(v109 + 8);
              if (v110)
              {
                md::DaVinciGroundLayerDataSource::setStyleManager(v110, *a2, a2[1]);
                uint64_t v89 = *(void *)(a1 + 32);
                uint64_t v90 = *(void *)(a1 + 40);
              }
            }
LABEL_247:
            if (v89 != v90)
            {
              uint64_t v111 = v89;
              while (*(_WORD *)v111 != 60)
              {
                v111 += 16;
                if (v111 == v90) {
                  goto LABEL_260;
                }
              }
              if (v111 != v90)
              {
                uint64_t v112 = *(void *)(v111 + 8);
                if (v112)
                {
                  uint64_t v113 = *a2;
                  uint64_t v114 = a2[1];
                  if (v114) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v114 + 8), 1uLL, memory_order_relaxed);
                  }
                  double v115 = std::__get_sp_mut((const void *)(v112 + 776));
                  std::__sp_mut::lock(v115);
                  *(void *)(v112 + 776) = v113;
                  double v116 = *(std::__shared_weak_count **)(v112 + 784);
                  *(void *)(v112 + 784) = v114;
                  std::__sp_mut::unlock(v115);
                  if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                  uint64_t v89 = *(void *)(a1 + 32);
                  uint64_t v90 = *(void *)(a1 + 40);
                }
              }
LABEL_260:
              if (v89 != v90)
              {
                uint64_t v117 = v89;
                while (*(_WORD *)v117 != 44)
                {
                  v117 += 16;
                  if (v117 == v90) {
                    goto LABEL_268;
                  }
                }
                if (v117 != v90)
                {
                  uint64_t v118 = *(void *)(v117 + 8);
                  if (v118)
                  {
                    md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v118, *a2, a2[1]);
                    uint64_t v89 = *(void *)(a1 + 32);
                    uint64_t v90 = *(void *)(a1 + 40);
                  }
                }
LABEL_268:
                if (v89 != v90)
                {
                  uint64_t v119 = v89;
                  while (*(_WORD *)v119 != 45)
                  {
                    v119 += 16;
                    if (v119 == v90) {
                      goto LABEL_276;
                    }
                  }
                  if (v119 != v90)
                  {
                    uint64_t v120 = *(void *)(v119 + 8);
                    if (v120)
                    {
                      md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v120, *a2, a2[1]);
                      uint64_t v89 = *(void *)(a1 + 32);
                      uint64_t v90 = *(void *)(a1 + 40);
                    }
                  }
LABEL_276:
                  if (v89 != v90)
                  {
                    uint64_t v121 = v89;
                    while (*(_WORD *)v121 != 46)
                    {
                      v121 += 16;
                      if (v121 == v90) {
                        goto LABEL_284;
                      }
                    }
                    if (v121 != v90)
                    {
                      uint64_t v122 = *(void *)(v121 + 8);
                      if (v122)
                      {
                        md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v122, *a2, a2[1]);
                        uint64_t v89 = *(void *)(a1 + 32);
                        uint64_t v90 = *(void *)(a1 + 40);
                      }
                    }
LABEL_284:
                    if (v89 != v90)
                    {
                      uint64_t v123 = v89;
                      while (*(_WORD *)v123 != 48)
                      {
                        v123 += 16;
                        if (v123 == v90) {
                          goto LABEL_292;
                        }
                      }
                      if (v123 != v90)
                      {
                        uint64_t v124 = *(void *)(v123 + 8);
                        if (v124)
                        {
                          md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v124, *a2, a2[1]);
                          uint64_t v89 = *(void *)(a1 + 32);
                          uint64_t v90 = *(void *)(a1 + 40);
                        }
                      }
LABEL_292:
                      if (v89 != v90)
                      {
                        uint64_t v125 = v89;
                        while (*(_WORD *)v125 != 49)
                        {
                          v125 += 16;
                          if (v125 == v90) {
                            goto LABEL_300;
                          }
                        }
                        if (v125 != v90)
                        {
                          uint64_t v126 = *(void *)(v125 + 8);
                          if (v126)
                          {
                            md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v126, *a2, a2[1]);
                            uint64_t v89 = *(void *)(a1 + 32);
                            uint64_t v90 = *(void *)(a1 + 40);
                          }
                        }
LABEL_300:
                        if (v89 != v90)
                        {
                          uint64_t v127 = v89;
                          while (*(_WORD *)v127 != 50)
                          {
                            v127 += 16;
                            if (v127 == v90) {
                              goto LABEL_308;
                            }
                          }
                          if (v127 != v90)
                          {
                            uint64_t v128 = *(void *)(v127 + 8);
                            if (v128)
                            {
                              md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(v128, *a2, a2[1]);
                              uint64_t v89 = *(void *)(a1 + 32);
                              uint64_t v90 = *(void *)(a1 + 40);
                            }
                          }
LABEL_308:
                          if (v89 != v90)
                          {
                            uint64_t v129 = v89;
                            while (*(_WORD *)v129 != 12)
                            {
                              v129 += 16;
                              if (v129 == v90) {
                                goto LABEL_316;
                              }
                            }
                            if (v129 != v90)
                            {
                              uint64_t v130 = *(void *)(v129 + 8);
                              if (v130)
                              {
                                md::OverlayLayerDataSource::setStyleManager(v130, *a2, a2[1]);
                                uint64_t v89 = *(void *)(a1 + 32);
                                uint64_t v90 = *(void *)(a1 + 40);
                              }
                            }
LABEL_316:
                            if (v89 != v90)
                            {
                              uint64_t v131 = v89;
                              while (*(_WORD *)v131 != 11)
                              {
                                v131 += 16;
                                if (v131 == v90) {
                                  goto LABEL_326;
                                }
                              }
                              if (v131 != v90)
                              {
                                uint64_t v132 = *(void *)(v131 + 8);
                                if (v132)
                                {
                                  md::OverlayLayerDataSource::setStyleManager(v132, *a2, a2[1]);
                                  uint64_t v89 = *(void *)(a1 + 32);
                                  uint64_t v90 = *(void *)(a1 + 40);
                                }
                              }
LABEL_326:
                              while (v89 != v90)
                              {
                                if (*(_WORD *)v89 == 64)
                                {
                                  if (v89 != v90)
                                  {
                                    uint64_t v133 = *(void *)(v89 + 8);
                                    if (v133)
                                    {
                                      uint64_t v134 = *a2;
                                      unint64_t v135 = (std::__shared_weak_count *)a2[1];
                                      if (v135)
                                      {
                                        atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
                                        uint64_t v136 = (const void *)(v133 + 776);
                                        atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
                                      }
                                      else
                                      {
                                        uint64_t v136 = (const void *)(v133 + 776);
                                      }
                                      uint64_t v137 = std::__get_sp_mut(v136);
                                      std::__sp_mut::lock(v137);
                                      *(void *)(v133 + 776) = v134;
                                      unint64_t v138 = *(std::__shared_weak_count **)(v133 + 784);
                                      *(void *)(v133 + 784) = v135;
                                      std::__sp_mut::unlock(v137);
                                      if (v138 && !atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                      {
                                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                                        std::__shared_weak_count::__release_weak(v138);
                                      }
                                      if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                      {
                                        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                                        std::__shared_weak_count::__release_weak(v135);
                                      }
                                    }
                                  }
                                  return;
                                }
                                v89 += 16;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1A19E3C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v9 - 80);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::TrafficLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a1 + 760);
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(void *)(a1 + 760) = a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)(a1 + 768) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A19E3DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::DaVinciCenterLineRoadsLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a1 + 752);
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(void *)(a1 + 752) = a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 760);
  *(void *)(a1 + 760) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A19E3EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::DaVinciGroundLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a1 + 776);
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(void *)(a1 + 776) = a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 784);
  *(void *)(a1 + 784) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A19E3FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::PolygonLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a1 + 784);
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(void *)(a1 + 784) = a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 792);
  *(void *)(a1 + 792) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A19E409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::OverlayLayerDataSource::setStyleManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a1 + 832);
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(void *)(a1 + 832) = a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 840);
  *(void *)(a1 + 840) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A19E418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke_17(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v89 = a5;
  id v90 = a6;
  uint64_t v86 = *(void *)(a1 + 40);
  long long v87 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 decodedRepresentation];
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v88 = v11;
    }
    else
    {
      id v102 = v89;
      uint64_t v88 = [v10 readDataWithError:&v102];
      id v13 = v102;

      id v89 = v13;
    }
  }
  else
  {
    uint64_t v88 = 0;
  }
  uint64_t v14 = (std::__shared_weak_count *)operator new(0x38uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C50;
  uint64_t v92 = gdc::DataObject::DataObject((gdc::DataObject *)&v14[1], v88);
  uint64_t v93 = v14;
  gdc::ResourceKey::ResourceKey((uint64_t)&buf, 0xFFFF, a2, 0x10uLL, 0, 2147483646);
  char v94 = 1;
  uint64_t v15 = v99;
  std::string::size_type size = (char *)buf.__r_.__value_.__l.__size_;
  std::string::size_type v95 = buf.__r_.__value_.__r.__words[0];
  *(void *)&long long v96 = v99;
  uint64_t v97 = v99;
  std::string::size_type v98 = v111.__r_.__value_.__r.__words[0];
  if ((std::string *)buf.__r_.__value_.__l.__size_ != p_buf)
  {
    long long v96 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    goto LABEL_24;
  }
  uint64_t v17 = (char *)buf.__r_.__value_.__r.__words[2];
  std::string::size_type v18 = buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_;
  *((void *)&v96 + 1) = &v99[buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_];
  if (buf.__r_.__value_.__r.__words[2] != buf.__r_.__value_.__l.__size_)
  {
    if (v18 < 8 || (unint64_t)&v92 - buf.__r_.__value_.__l.__size_ + 64 < 0x20) {
      goto LABEL_23;
    }
    if (v18 >= 0x20)
    {
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v20 = (long long *)(buf.__r_.__value_.__l.__size_ + 16);
      uint64_t v21 = v100;
      unint64_t v22 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *uint64_t v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      if (v18 == v19) {
        goto LABEL_24;
      }
      if ((v18 & 0x18) == 0)
      {
        size += v19;
        uint64_t v15 = &v99[v19];
        do
        {
LABEL_23:
          char v29 = *size++;
          *v15++ = v29;
        }
        while (size != v17);
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v24 = v18 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v15 = &v99[v18 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v25 = v19 - (v18 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (uint64_t *)&size[v19];
    uint64_t v27 = (gdc::DataObject **)((char *)&v92 + v19 + 64);
    do
    {
      uint64_t v28 = *v26++;
      *v27++ = v28;
      v25 += 8;
    }
    while (v25);
    if (v18 != v24)
    {
      size += v24;
      goto LABEL_23;
    }
  }
LABEL_24:
  v100[2] = v112;
  long long v101 = v113;
  uint64_t v30 = [v90 objectForKey:*MEMORY[0x1E4F64248]];
  uint64_t v31 = v30;
  if (v30)
  {
    char v32 = [v30 unsignedIntValue];
    unint64_t v33 = 0x2040302010002uLL >> (8 * (v32 + 1));
    if ((v32 + 1) >= 7u) {
      LOBYTE(v33) = 0;
    }
    unsigned __int8 v85 = v33;
  }
  else
  {
    unsigned __int8 v85 = 0;
  }

  uint64_t v34 = [v90 objectForKey:*MEMORY[0x1E4F64250]];
  unint64_t v35 = v34;
  if (v34)
  {
    unsigned int v36 = [v34 unsignedIntValue];
    unsigned int v37 = 0x30102u >> (8 * v36);
    if (v36 >= 3) {
      LOBYTE(v37) = 0;
    }
    unsigned __int8 v84 = v37;
  }
  else
  {
    unsigned __int8 v84 = 0;
  }

  uint64_t v38 = [v90 objectForKey:*MEMORY[0x1E4F64240]];
  uint64_t v39 = v38;
  if (v38)
  {
    int v40 = [v38 unsignedIntValue];
    uint64_t v41 = (1000 * v40) & 0xFFFFFF00;
    uint64_t v42 = (1000 * v40) & 0xF8;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v41 = 0;
  }

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v43 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v44 = v43;
  os_signpost_id_t v45 = *(void *)(a1 + 128);
  if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v43))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v44, OS_SIGNPOST_INTERVAL_END, v45, "ResourceFetch", "", (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v46 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)(a1 + 48));
    uint64_t v47 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    uint64_t v48 = *(void *)(a1 + 144);
    *(_DWORD *)std::string __dst = 136315394;
    *(void *)&__dst[4] = v47;
    *(_WORD *)&__dst[12] = 2048;
    *(void *)&__dst[14] = v48;
    _os_log_impl(&dword_1A1780000, v46, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher done fetching preliminary resource: %s, %llu", __dst, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  if (!v88)
  {
    if (!v89) {
      goto LABEL_113;
    }
    if ([v89 code] == -2)
    {
      uint64_t v58 = [v89 domain];
      uint64_t v59 = GEOErrorDomain();
      int v60 = [v58 isEqualToString:v59];

      if (v60)
      {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v86 + 120))(v86, *(void *)(a1 + 144), a1 + 48);
        goto LABEL_111;
      }
    }
    id v64 = [v89 domain];
    uint64_t v65 = (const void *)[v64 UTF8String];
    uint64_t v66 = [v89 domain];
    unint64_t v67 = [v66 lengthOfBytesUsingEncoding:4];
    size_t v68 = v67;
    if (v67 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (v67 >= 0x17)
    {
      uint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17) {
        uint64_t v70 = v67 | 7;
      }
      uint64_t v71 = v70 + 1;
      uint64_t v69 = operator new(v70 + 1);
      *(void *)&__dst[8] = v68;
      *(void *)&__dst[16] = v71 | 0x8000000000000000;
      *(void *)std::string __dst = v69;
    }
    else
    {
      __dst[23] = v67;
      uint64_t v69 = __dst;
      if (!v67)
      {
LABEL_93:
        v69[v68] = 0;

        id v72 = [v89 description];
        uint64_t v73 = (const void *)[v72 UTF8String];
        uint64_t v74 = [v89 description];
        unint64_t v75 = [v74 lengthOfBytesUsingEncoding:4];
        std::string::size_type v76 = v75;
        if (v75 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        if (v75 >= 0x17)
        {
          uint64_t v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v75 | 7) != 0x17) {
            uint64_t v78 = v75 | 7;
          }
          uint64_t v79 = v78 + 1;
          p_p = (std::string *)operator new(v78 + 1);
          __p.__r_.__value_.__l.__size_ = v76;
          __p.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        }
        else
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v75;
          p_p = &__p;
          if (!v75)
          {
LABEL_101:
            p_p->__r_.__value_.__s.__data_[v76] = 0;

            buf.__r_.__value_.__r.__words[0] = [v89 code];
            int v80 = (char)__dst[23];
            if ((char)__dst[23] < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&buf.__r_.__value_.__r.__words[1], *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *(_OWORD *)__dst;
              p_std::string buf = *(std::string **)&__dst[16];
            }
            int v81 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v111, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else {
              std::string v111 = __p;
            }
            (*(void (**)(uint64_t, void, uint64_t, std::string *))(*(void *)v86 + 112))(v86, *(void *)(a1 + 144), a1 + 48, &buf);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v111.__r_.__value_.__l.__data_);
              if ((SHIBYTE(p_buf) & 0x80000000) == 0)
              {
LABEL_109:
                if ((v81 & 0x80000000) == 0) {
                  goto LABEL_110;
                }
                goto LABEL_123;
              }
            }
            else if ((SHIBYTE(p_buf) & 0x80000000) == 0)
            {
              goto LABEL_109;
            }
            operator delete((void *)buf.__r_.__value_.__l.__size_);
            if ((v81 & 0x80000000) == 0)
            {
LABEL_110:
              if ((v80 & 0x80000000) == 0) {
                goto LABEL_111;
              }
              goto LABEL_124;
            }
LABEL_123:
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((v80 & 0x80000000) == 0)
            {
LABEL_111:
              uint64_t v82 = *(NSObject **)(a1 + 32);
              if (!v82) {
                goto LABEL_113;
              }
LABEL_112:
              dispatch_semaphore_signal(v82);
              goto LABEL_113;
            }
LABEL_124:
            operator delete(*(void **)__dst);
            uint64_t v82 = *(NSObject **)(a1 + 32);
            if (!v82) {
              goto LABEL_113;
            }
            goto LABEL_112;
          }
        }
        memmove(p_p, v73, v76);
        goto LABEL_101;
      }
    }
    memmove(v69, v65, v68);
    goto LABEL_93;
  }
  uint64_t v49 = [MEMORY[0x1E4F648E8] sharedReachability];
  [v49 reportTileLoadSuccess:v90];

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v50 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)(a1 + 48));
    long long v51 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    uint64_t v52 = *(void *)(a1 + 144);
    *(_DWORD *)std::string __dst = 136315394;
    *(void *)&__dst[4] = v51;
    *(_WORD *)&__dst[12] = 2048;
    *(void *)&__dst[14] = v52;
    _os_log_impl(&dword_1A1780000, v50, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher creating preliminary resource: %s, %llu", __dst, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  uint64_t v106 = (void (**)(void **))&unk_1EF57EB50;
  uint64_t v107 = a1 + 48;
  uint64_t v108 = (void **)&v106;
  v104[0] = &unk_1EF57EB98;
  v104[1] = a1 + 48;
  uint64_t v105 = v104;
  p_std::string buf = &buf;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF57EB98;
  buf.__r_.__value_.__l.__size_ = a1 + 48;
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v53 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v54 = v53;
  uint64_t v55 = v107;
  os_signpost_id_t v56 = *(void *)(v107 + 80);
  if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v53))
  {
    uint64_t v57 = *(void *)(v55 + 88);
    *(_DWORD *)std::string __dst = 134217984;
    *(void *)&__dst[4] = v57;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v54, OS_SIGNPOST_INTERVAL_BEGIN, v56, "CreateResource", "parent_signpost=%llu", __dst, 0xCu);
  }

  if (v105 == v104)
  {
    (*(void (**)(void *))(v104[0] + 32))(v104);
  }
  else if (v105)
  {
    (*(void (**)(void))(*v105 + 40))();
  }
  uint64_t v61 = v41 | v42;
  if (v108 != (void **)&v106)
  {
    if (v108) {
      (*((void (**)(void))*v108 + 5))();
    }
    uint64_t v62 = *(void *)(a1 + 144);
    if (v39) {
      goto LABEL_76;
    }
    goto LABEL_83;
  }
  v106[4]((void **)&v106);
  uint64_t v62 = *(void *)(a1 + 144);
  if (!v39) {
LABEL_83:
  }
    uint64_t v61 = *(void *)(a1 + 152);
LABEL_76:
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, gdc::DataObject **))(*(void *)v86 + 128))(v86, v62, a1 + 48, v85, v84, v61, 0, &v92);
  uint64_t v63 = *(NSObject **)(a1 + 32);
  if (v63) {
    dispatch_semaphore_signal(v63);
  }
  if (!p_buf)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(std::string *))(p_buf->__r_.__value_.__r.__words[0] + 48))(p_buf);
  if (p_buf == &buf)
  {
    (*(void (**)(std::string *))(buf.__r_.__value_.__r.__words[0] + 32))(&buf);
  }
  else if (p_buf)
  {
    (*(void (**)(void))(p_buf->__r_.__value_.__r.__words[0] + 40))();
  }
LABEL_113:
  if (v94)
  {
    if ((unsigned char *)v96 != v97) {
      free((void *)v96);
    }
    char v94 = 0;
  }
  uint64_t v83 = v93;
  if (v93)
  {
    if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1A19E4D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v44 - 177) < 0) {
    operator delete(*(void **)(v44 - 200));
  }
  operator delete(v43);
  if (a43 < 0) {
    operator delete(__p);
  }
  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a22);

  _Unwind_Resume(a1);
}

void ___ZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  id v74 = a3;
  id v10 = a5;
  id v75 = a6;
  std::string::size_type v76 = a1;
  id v72 = (unint64_t *)a1[5];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v11 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v12 = v11;
  os_signpost_id_t v13 = a1[16];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v12, OS_SIGNPOST_INTERVAL_END, v13, "ResourceFetch", "", buf, 2u);
  }

  uint64_t v14 = [MEMORY[0x1E4F648E8] sharedReachability];
  if (v10) {
    [v14 reportLoadFailure:v10];
  }
  else {
    [v14 reportTileLoadSuccess:v75];
  }

  if (v74)
  {
    uint64_t v15 = [v74 decodedRepresentation];
    uint64_t v16 = v15;
    if (v15)
    {
      uint64_t v73 = v15;
    }
    else
    {
      id v88 = v10;
      uint64_t v73 = [v74 readDataWithError:&v88];
      id v17 = v88;

      id v10 = v17;
    }
  }
  else
  {
    uint64_t v73 = 0;
  }
  std::string::size_type v18 = (std::__shared_weak_count *)operator new(0x38uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582C50;
  *(void *)std::string buf = gdc::DataObject::DataObject((gdc::DataObject *)&v18[1], v73);
  uint64_t v78 = v18;
  gdc::ResourceKey::ResourceKey((uint64_t)&v96, 0xFFFF, a2, 0x10uLL, 0, 2147483646);
  char v79 = 1;
  unint64_t v19 = v85;
  unsigned int v20 = v97;
  int v80 = v96;
  int v81 = v85;
  uint64_t v83 = v85;
  unsigned __int8 v84 = v100;
  if (v97 != v99)
  {
    int v81 = v97;
    uint64_t v82 = v98;
    goto LABEL_32;
  }
  uint64_t v21 = v98;
  unint64_t v22 = (char *)v98 - (char *)v97;
  uint64_t v82 = (void **)&v85[(char *)v98 - (char *)v97];
  if (v98 != v97)
  {
    if (v22 >= 8 && (unint64_t)(buf - (uint8_t *)v97 + 64) >= 0x20)
    {
      if (v22 < 0x20)
      {
        uint64_t v23 = 0;
LABEL_26:
        unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v19 = &v85[v22 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v29 = v23 - (v22 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v30 = (uint64_t *)((char *)v20 + v23);
        uint64_t v31 = &buf[v23 + 64];
        do
        {
          uint64_t v32 = *v30++;
          *(void *)uint64_t v31 = v32;
          v31 += 8;
          v29 += 8;
        }
        while (v29);
        if (v22 == v28) {
          goto LABEL_32;
        }
        unsigned int v20 = (void **)((char *)v20 + v28);
        goto LABEL_31;
      }
      uint64_t v23 = v22 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v24 = (long long *)(v97 + 2);
      unint64_t v25 = v86;
      unint64_t v26 = v22 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *(v25 - 1) = *(v24 - 1);
        *unint64_t v25 = v27;
        v24 += 2;
        v25 += 2;
        v26 -= 32;
      }
      while (v26);
      if (v22 == v23) {
        goto LABEL_32;
      }
      if ((v22 & 0x18) != 0) {
        goto LABEL_26;
      }
      unsigned int v20 = (void **)((char *)v20 + v23);
      unint64_t v19 = &v85[v23];
    }
    do
    {
LABEL_31:
      char v33 = *(unsigned char *)v20;
      unsigned int v20 = (void **)((char *)v20 + 1);
      *v19++ = v33;
    }
    while (v20 != v21);
  }
LABEL_32:
  v86[2] = v102;
  long long v87 = v103;
  uint64_t v34 = [v75 objectForKey:*MEMORY[0x1E4F64248]];
  unint64_t v35 = v34;
  if (v34)
  {
    char v36 = [v34 unsignedIntValue];
    if ((v36 + 1) >= 7u) {
      unsigned __int8 v37 = 0;
    }
    else {
      unsigned __int8 v37 = 0x2040302010002uLL >> (8 * (v36 + 1));
    }
  }
  else
  {
    unsigned __int8 v37 = 0;
  }

  uint64_t v38 = [v75 objectForKey:*MEMORY[0x1E4F64250]];
  uint64_t v39 = v38;
  if (v38)
  {
    unsigned int v40 = [v38 unsignedIntValue];
    if (v40 >= 3) {
      unsigned __int8 v41 = 0;
    }
    else {
      unsigned __int8 v41 = 0x30102u >> (8 * v40);
    }
  }
  else
  {
    unsigned __int8 v41 = 0;
  }

  uint64_t v42 = a1 + 6;
  if (!v10)
  {
    uint64_t v91 = (void (**)(void **))&unk_1EF57ED48;
    uint64_t v92 = a1 + 6;
    uint64_t v93 = (void **)&v91;
    v89[0] = &unk_1EF57ED90;
    v89[1] = a1 + 6;
    id v90 = v89;
    uint64_t v99 = (void **)&v96;
    long long v96 = (void (**)(void **))&unk_1EF57ED90;
    uint64_t v97 = (void **)(a1 + 6);
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    os_signpost_id_t v56 = (id)GEOGetVectorKitResourceLoadingLog_log;
    uint64_t v57 = v56;
    uint64_t v58 = v92;
    os_signpost_id_t v59 = v92[10];
    if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v56))
    {
      uint64_t v60 = v58[11];
      LODWORD(__dst) = 134217984;
      *(void *)((char *)&__dst + 4) = v60;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v57, OS_SIGNPOST_INTERVAL_BEGIN, v59, "CreateResource", "parent_signpost=%llu", (uint8_t *)&__dst, 0xCu);
    }

    if (v90 == v89)
    {
      (*(void (**)(void *))(v89[0] + 32))(v89);
    }
    else if (v90)
    {
      (*(void (**)(void))(*v90 + 40))();
    }
    if (v93 == (void **)&v91)
    {
      v91[4]((void **)&v91);
    }
    else if (v93)
    {
      (*((void (**)(void))*v93 + 5))();
    }
    if ((*(uint64_t (**)(unint64_t *, void, void *, void, void, void, void, uint8_t *))(*v72 + 128))(v72, v76[18], v42, v37, v41, 0, 0, buf))
    {
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v66 = (void *)MEMORY[0x1E4F28C58];
      unint64_t v67 = GEOErrorDomain();
      uint64_t v65 = [v66 errorWithDomain:v67 code:-11 userInfo:0];
    }
    id v68 = v65;
    unint64_t v69 = atomic_load(v72 + 13);
    if (v69) {
      (*(void (**)(unint64_t, id))(*(void *)v69 + 24))(v69, v68);
    }

    if (!v99)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*((void (**)(void **))*v99 + 6))(v99);
    if (v99 == (void **)&v96)
    {
      v96[4]((void **)&v96);
    }
    else if (v99)
    {
      (*((void (**)(void **))*v99 + 5))(v99);
    }

    goto LABEL_89;
  }
  if ([v10 code] == -2)
  {
    uint64_t v43 = [v10 domain];
    uint64_t v44 = GEOErrorDomain();
    int v45 = [v43 isEqualToString:v44];

    if (v45)
    {
      (*(void (**)(unint64_t *, void, void *))(*v72 + 120))(v72, v76[18], v42);
      unint64_t v46 = atomic_load(v72 + 13);
      if (v46) {
        (*(void (**)(unint64_t, void))(*(void *)v46 + 24))(v46, 0);
      }
      goto LABEL_89;
    }
  }
  uint64_t v47 = [MEMORY[0x1E4F648E8] sharedReachability];
  [v47 reportLoadFailure:v10];

  uint64_t v48 = [v10 code];
  id v49 = [v10 domain];
  uint64_t v50 = (char *)[v49 UTF8String];
  id v51 = [v10 description];
  uint64_t v52 = (const char *)[v51 UTF8String];
  size_t v53 = strlen(v52);
  if (v53 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v54 = v53;
  if (v53 >= 0x17)
  {
    uint64_t v61 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17) {
      uint64_t v61 = v53 | 7;
    }
    uint64_t v62 = v61 + 1;
    p_dst = operator new(v61 + 1);
    *((void *)&__dst + 1) = v54;
    unint64_t v95 = v62 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_63;
  }
  HIBYTE(v95) = v53;
  p_dst = &__dst;
  if (v53) {
LABEL_63:
  }
    memmove(p_dst, v52, v54);
  *((unsigned char *)p_dst + v54) = 0;
  gdc::Error::Error((uint64_t)&v96, v48, v50, &__dst);
  if (SHIBYTE(v95) < 0) {
    operator delete((void *)__dst);
  }

  (*(void (**)(unint64_t *, void, void *, void (***)(void **)))(*v72 + 112))(v72, v76[18], v42, &v96);
  id v63 = v10;
  unint64_t v64 = atomic_load(v72 + 13);
  if (v64) {
    (*(void (**)(unint64_t, id))(*(void *)v64 + 24))(v64, v63);
  }

  if (v101 < 0)
  {
    operator delete(v100);
    if (SHIBYTE(v99) < 0) {
LABEL_72:
    }
      operator delete(v97);
  }
  else if (SHIBYTE(v99) < 0)
  {
    goto LABEL_72;
  }
LABEL_89:
  uint64_t v70 = v76[4];
  if (v70) {
    dispatch_semaphore_signal(v70);
  }
  if (v79)
  {
    if (v81 != v83) {
      free(v81);
    }
    char v79 = 0;
  }
  uint64_t v71 = v78;
  if (v78)
  {
    if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1A19E5944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)va);

  _Unwind_Resume(a1);
}

void ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  id v92 = a3;
  id v10 = a5;
  id v94 = a6;
  id v90 = (unint64_t *)a1[5];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v11 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v12 = v11;
  os_signpost_id_t v13 = a1[16];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v12, OS_SIGNPOST_INTERVAL_END, v13, "ResourceFetch", "", (uint8_t *)&buf, 2u);
  }

  uint64_t v93 = (unsigned __int8 *)(a1 + 6);
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v14 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&buf, v93);
    uint64_t v15 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    std::string::size_type v16 = a1[18];
    LODWORD(v110.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v110.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v110.__r_.__value_.__r.__words[1] + 6) = v16;
    _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher done fetching resource: %s, %llu", (uint8_t *)&v110, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  if (v92)
  {
    id v17 = [v92 decodedRepresentation];
    std::string::size_type v18 = v17;
    if (v17)
    {
      uint64_t v91 = v17;
    }
    else
    {
      id v103 = v10;
      uint64_t v91 = [v92 readDataWithError:&v103];
      id v19 = v103;

      id v10 = v19;
    }
  }
  else
  {
    uint64_t v91 = 0;
  }
  unsigned int v20 = operator new(0x38uLL);
  v20[1] = 0;
  v20[2] = 0;
  *unsigned int v20 = &unk_1EF582C50;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)gdc::DataObject::DataObject((gdc::DataObject *)(v20 + 3), v91);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  gdc::ResourceKey::ResourceKey((uint64_t)&v110, 0xFFFF, a2, 0x10uLL, 0, 2147483646);
  buf.__r_.__value_.__s.__data_[16] = 1;
  uint64_t v21 = v100;
  std::string::size_type size = (char *)v110.__r_.__value_.__l.__size_;
  std::string::size_type v96 = v110.__r_.__value_.__r.__words[0];
  *(void *)&long long v97 = v100;
  std::string::size_type v98 = v100;
  uint64_t v99 = v112;
  if ((std::string *)v110.__r_.__value_.__l.__size_ != v111)
  {
    long long v97 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
    goto LABEL_37;
  }
  uint64_t v23 = (char *)v110.__r_.__value_.__r.__words[2];
  std::string::size_type v24 = v110.__r_.__value_.__r.__words[2] - v110.__r_.__value_.__l.__size_;
  *((void *)&v97 + 1) = &v100[v110.__r_.__value_.__r.__words[2] - v110.__r_.__value_.__l.__size_];
  if (v110.__r_.__value_.__r.__words[2] != v110.__r_.__value_.__l.__size_)
  {
    if (v24 >= 8 && (unint64_t)&buf - v110.__r_.__value_.__l.__size_ + 64 >= 0x20)
    {
      if (v24 < 0x20)
      {
        uint64_t v25 = 0;
LABEL_31:
        unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v21 = &v100[v24 & 0xFFFFFFFFFFFFFFF8];
        std::string::size_type v31 = v25 - (v24 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v32 = (std::string::size_type *)&size[v25];
        char v33 = (std::string *)((char *)&buf + v25 + 64);
        do
        {
          std::string::size_type v34 = *v32++;
          v33->__r_.__value_.__r.__words[0] = v34;
          char v33 = (std::string *)((char *)v33 + 8);
          v31 += 8;
        }
        while (v31);
        if (v24 == v30) {
          goto LABEL_37;
        }
        size += v30;
        goto LABEL_36;
      }
      uint64_t v25 = v24 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v26 = (long long *)(v110.__r_.__value_.__l.__size_ + 16);
      long long v27 = v101;
      unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *long long v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v24 == v25) {
        goto LABEL_37;
      }
      if ((v24 & 0x18) != 0) {
        goto LABEL_31;
      }
      size += v25;
      uint64_t v21 = &v100[v25];
    }
    do
    {
LABEL_36:
      char v35 = *size++;
      *v21++ = v35;
    }
    while (size != v23);
  }
LABEL_37:
  v101[2] = v114;
  long long v102 = v115;
  char v36 = [v94 objectForKey:*MEMORY[0x1E4F64248]];
  unsigned __int8 v37 = v36;
  if (v36)
  {
    char v38 = [v36 unsignedIntValue];
    if ((v38 + 1) >= 7u) {
      unsigned __int8 v39 = 0;
    }
    else {
      unsigned __int8 v39 = 0x2040302010002uLL >> (8 * (v38 + 1));
    }
  }
  else
  {
    unsigned __int8 v39 = 0;
  }

  unsigned int v40 = [v94 objectForKey:*MEMORY[0x1E4F64250]];
  unsigned __int8 v41 = v40;
  if (v40)
  {
    unsigned int v42 = [v40 unsignedIntValue];
    if (v42 >= 3) {
      unsigned __int8 v43 = 0;
    }
    else {
      unsigned __int8 v43 = 0x30102u >> (8 * v42);
    }
  }
  else
  {
    unsigned __int8 v43 = 0;
  }

  uint64_t v44 = [v94 objectForKey:*MEMORY[0x1E4F64240]];
  int v45 = v44;
  if (v44)
  {
    int v46 = [v44 unsignedIntValue];
    uint64_t v47 = (1000 * v46) & 0xFFFFFF00;
    uint64_t v48 = (1000 * v46) & 0xF8;
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v47 = 0;
  }

  if (!v10)
  {
    id v68 = [MEMORY[0x1E4F648E8] sharedReachability];
    [v68 reportTileLoadSuccess:v94];

    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    unint64_t v69 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&v110, v93);
      uint64_t v70 = (v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v110
          : (std::string *)v110.__r_.__value_.__r.__words[0];
      uint64_t v71 = a1[18];
      *(_DWORD *)long long __dst = 136315394;
      *(void *)&__dst[4] = v70;
      *(_WORD *)&__dst[12] = 2048;
      *(void *)&__dst[14] = v71;
      _os_log_impl(&dword_1A1780000, v69, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher creating resource: %s, %llu", __dst, 0x16u);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v106 = (void (**)(void **))&unk_1EF57EBE0;
    uint64_t v107 = a1 + 6;
    uint64_t v108 = (void **)&v106;
    v104[0] = &unk_1EF57EC28;
    v104[1] = a1 + 6;
    uint64_t v105 = v104;
    std::string v111 = &v110;
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF57EC28;
    v110.__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 6);
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    id v72 = (id)GEOGetVectorKitResourceLoadingLog_log;
    uint64_t v73 = v72;
    id v74 = v107;
    os_signpost_id_t v75 = v107[10];
    if (v75 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v72))
    {
      uint64_t v76 = v74[11];
      *(_DWORD *)long long __dst = 134217984;
      *(void *)&__dst[4] = v76;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v73, OS_SIGNPOST_INTERVAL_BEGIN, v75, "CreateResource", "parent_signpost=%llu", __dst, 0xCu);
    }

    if (v105 == v104)
    {
      (*(void (**)(void *))(v104[0] + 32))(v104);
    }
    else if (v105)
    {
      (*(void (**)(void))(*v105 + 40))();
    }
    uint64_t v81 = v47 | v48;
    if (v108 == (void **)&v106)
    {
      v106[4]((void **)&v106);
      uint64_t v82 = a1[18];
      if (v45)
      {
LABEL_110:
        if ((*(uint64_t (**)(unint64_t *, uint64_t, unsigned __int8 *, void, void, uint64_t, void, std::string *))(*v90 + 128))(v90, v82, v93, v39, v43, v81, 0, &buf))
        {
          uint64_t v83 = 0;
        }
        else
        {
          unsigned __int8 v84 = (void *)MEMORY[0x1E4F28C58];
          unsigned __int8 v85 = GEOErrorDomain();
          uint64_t v83 = [v84 errorWithDomain:v85 code:-11 userInfo:0];
        }
        id v86 = v83;
        unint64_t v87 = atomic_load(v90 + 13);
        if (v87) {
          (*(void (**)(unint64_t, id))(*(void *)v87 + 24))(v87, v86);
        }

        if (!v111)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 48))(v111);
        if (v111 == &v110)
        {
          (*(void (**)(std::string *))(v110.__r_.__value_.__r.__words[0] + 32))(&v110);
        }
        else if (v111)
        {
          (*(void (**)(void))(v111->__r_.__value_.__r.__words[0] + 40))();
        }

        goto LABEL_123;
      }
    }
    else
    {
      if (v108) {
        (*((void (**)(void))*v108 + 5))();
      }
      uint64_t v82 = a1[18];
      if (v45) {
        goto LABEL_110;
      }
    }
    uint64_t v81 = a1[19];
    goto LABEL_110;
  }
  if ([v10 code] == -2)
  {
    id v49 = [v10 domain];
    uint64_t v50 = GEOErrorDomain();
    int v51 = [v49 isEqualToString:v50];

    if (v51)
    {
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
      }
      uint64_t v52 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&v110, v93);
        size_t v53 = (v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v110
            : (std::string *)v110.__r_.__value_.__r.__words[0];
        uint64_t v54 = a1[18];
        *(_DWORD *)long long __dst = 136315394;
        *(void *)&__dst[4] = v53;
        *(_WORD *)&__dst[12] = 2048;
        *(void *)&__dst[14] = v54;
        _os_log_impl(&dword_1A1780000, v52, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher received cancelled resource: %s, %llu", __dst, 0x16u);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
      }

      (*(void (**)(unint64_t *, void, unsigned __int8 *))(*v90 + 120))(v90, a1[18], v93);
      unint64_t v55 = atomic_load(v90 + 13);
      if (v55) {
        (*(void (**)(unint64_t, void))(*(void *)v55 + 24))(v55, 0);
      }
      goto LABEL_123;
    }
  }
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  os_signpost_id_t v56 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    gdc::ResourceKey::keysInt32Str(&v110, v93);
    uint64_t v57 = (v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v110
        : (std::string *)v110.__r_.__value_.__r.__words[0];
    uint64_t v58 = a1[18];
    *(_DWORD *)long long __dst = 136315394;
    *(void *)&__dst[4] = v57;
    *(_WORD *)&__dst[12] = 2048;
    *(void *)&__dst[14] = v58;
    _os_log_impl(&dword_1A1780000, v56, OS_LOG_TYPE_ERROR, "TiledGEOResourceFetcher received failed Resource: %s, %llu", __dst, 0x16u);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
  }

  os_signpost_id_t v59 = [MEMORY[0x1E4F648E8] sharedReachability];
  [v59 reportLoadFailure:v10];

  uint64_t v60 = [v10 code];
  id v61 = [v10 domain];
  uint64_t v62 = (char *)[v61 UTF8String];
  id v63 = [v10 description];
  unint64_t v64 = (const char *)[v63 UTF8String];
  size_t v65 = strlen(v64);
  if (v65 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v66 = v65;
  if (v65 >= 0x17)
  {
    uint64_t v77 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17) {
      uint64_t v77 = v65 | 7;
    }
    uint64_t v78 = v77 + 1;
    unint64_t v67 = operator new(v77 + 1);
    *(void *)&__dst[8] = v66;
    *(void *)&__dst[16] = v78 | 0x8000000000000000;
    *(void *)long long __dst = v67;
    goto LABEL_95;
  }
  __dst[23] = v65;
  unint64_t v67 = __dst;
  if (v65) {
LABEL_95:
  }
    memmove(v67, v64, v66);
  v67[v66] = 0;
  gdc::Error::Error((uint64_t)&v110, v60, v62, (long long *)__dst);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }

  (*(void (**)(unint64_t *, void, unsigned __int8 *, std::string *))(*v90 + 112))(v90, a1[18], v93, &v110);
  id v79 = v10;
  unint64_t v80 = atomic_load(v90 + 13);
  if (v80) {
    (*(void (**)(unint64_t, id))(*(void *)v80 + 24))(v80, v79);
  }

  if (v113 < 0)
  {
    operator delete(v112);
    if (SHIBYTE(v111) < 0) {
LABEL_104:
    }
      operator delete((void *)v110.__r_.__value_.__l.__size_);
  }
  else if (SHIBYTE(v111) < 0)
  {
    goto LABEL_104;
  }
LABEL_123:
  id v88 = a1[4];
  if (v88) {
    dispatch_semaphore_signal(v88);
  }
  if (buf.__r_.__value_.__s.__data_[16])
  {
    if ((unsigned char *)v97 != v98) {
      free((void *)v97);
    }
    buf.__r_.__value_.__s.__data_[16] = 0;
  }
  id v89 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_1A19E684C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a15);

  _Unwind_Resume(a1);
}

uint64_t gdc::ResourceKey::ResourceKey(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  *(unsigned char *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_DWORD *)(a1 + 4) = a6;
  id v10 = (unsigned __int8 *)(a1 + 40);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = 32;
  *(void *)(a1 + 72) = 0;
  if (a4 >= 0x21)
  {
    if (a4 <= 0x40) {
      size_t v11 = 64;
    }
    else {
      size_t v11 = a4;
    }
    id v10 = (unsigned __int8 *)malloc_type_malloc(v11, 0x100004077774924uLL);
    uint64_t v12 = *(unsigned __int8 **)(a1 + 8);
    os_signpost_id_t v13 = *(unsigned __int8 **)(a1 + 16);
    if (v12 == v13) {
      goto LABEL_21;
    }
    unint64_t v14 = v13 - v12;
    if ((unint64_t)(v13 - v12) < 8)
    {
      uint64_t v15 = v10;
      goto LABEL_20;
    }
    uint64_t v15 = v10;
    if ((unint64_t)(v10 - v12) < 0x20) {
      goto LABEL_20;
    }
    if (v14 >= 0x20)
    {
      unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFE0;
      id v17 = (long long *)(v12 + 16);
      std::string::size_type v18 = v10 + 16;
      unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *std::string::size_type v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v14 == v16) {
        goto LABEL_21;
      }
      if ((v14 & 0x18) == 0)
      {
        v12 += v16;
        uint64_t v15 = &v10[v16];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v15 = &v10[v14 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v22 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = (uint64_t *)&v12[v16];
    std::string::size_type v24 = &v10[v16];
    do
    {
      uint64_t v25 = *v23++;
      *(void *)std::string::size_type v24 = v25;
      v24 += 8;
      v22 += 8;
    }
    while (v22);
    if (v14 == v21) {
      goto LABEL_21;
    }
    v12 += v21;
    do
    {
LABEL_20:
      unsigned __int8 v26 = *v12++;
      *v15++ = v26;
    }
    while (v12 != v13);
LABEL_21:
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = v11;
  }
  if (!a4)
  {
    unint64_t v28 = v10;
    goto LABEL_40;
  }
  if (a4 < 8 || (unint64_t)&v10[-a3] < 0x20)
  {
    long long v29 = v10;
    unint64_t v30 = (unsigned __int8 *)a3;
    goto LABEL_38;
  }
  if (a4 >= 0x20)
  {
    unint64_t v27 = a4 & 0xFFFFFFFFFFFFFFE0;
    std::string::size_type v31 = (long long *)(a3 + 16);
    uint64_t v32 = v10 + 16;
    unint64_t v33 = a4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v34 = *v31;
      *(v32 - 1) = *(v31 - 1);
      *uint64_t v32 = v34;
      v31 += 2;
      v32 += 2;
      v33 -= 32;
    }
    while (v33);
    if (v27 == a4) {
      goto LABEL_39;
    }
    if ((a4 & 0x18) == 0)
    {
      unint64_t v30 = (unsigned __int8 *)(a3 + v27);
      long long v29 = &v10[v27];
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v27 = 0;
  }
  unint64_t v35 = a4 & 0xFFFFFFFFFFFFFFF8;
  long long v29 = &v10[a4 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v36 = v27 - (a4 & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v37 = (uint64_t *)(a3 + v27);
  char v38 = &v10[v27];
  do
  {
    uint64_t v39 = *v37++;
    *(void *)char v38 = v39;
    v38 += 8;
    v36 += 8;
  }
  while (v36);
  if (v35 == a4) {
    goto LABEL_39;
  }
  unint64_t v30 = (unsigned __int8 *)(a3 + v35);
  do
  {
LABEL_38:
    unsigned __int8 v40 = *v30++;
    *v29++ = v40;
  }
  while (v30 != (unsigned __int8 *)(a3 + a4));
LABEL_39:
  id v10 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v28 = *(unsigned __int8 **)(a1 + 16);
LABEL_40:
  unsigned __int8 v41 = &v28[a4];
  *(void *)(a1 + 16) = v41;
  unint64_t v42 = v41 - v10;
  if (v41 == v10)
  {
    unint64_t v43 = 0;
  }
  else
  {
    unint64_t v43 = 0;
    if (v42 <= 1) {
      unint64_t v42 = 1;
    }
    do
    {
      unsigned int v44 = *v10++;
      v43 ^= (v43 << 6) + (v43 >> 2) - 0x61C8864680B583EBLL + v44;
      --v42;
    }
    while (v42);
  }
  *(void *)(a1 + 72) = v43;
  *(void *)(a1 + 88) = a5;
  return a1;
}

gdc::DataObject *gdc::DataObject::DataObject(gdc::DataObject *this, NSData *a2)
{
  unsigned __int8 v3 = a2;
  *(void *)this = &unk_1EF554E78;
  *((void *)this + 1) = &unk_1EF559D98;
  *((void *)this + 2) = 0;
  uint64_t v7 = v3;
  uint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v7;
  uint64_t v5 = v7;

  return this;
}

void std::__shared_ptr_emplace<gdc::DataObject>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;

  *(void *)(a1 + 32) = &unk_1EF559D98;
}

void gdc::LoadingStatusTracker::didFinishLoadingResources(gdc::LoadingStatusTracker *this, NSError *a2)
{
  uint64_t v4 = a2;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (v4 && *((NSError **)this + 10) != v4) {
    objc_storeStrong((id *)this + 10, a2);
  }
  int v5 = *((_DWORD *)this + 18);
  if (v5 <= 1) {
    int v5 = 1;
  }
  int v6 = v5 - 1;
  *((_DWORD *)this + 18) = v6;
  if (v6) {
    goto LABEL_14;
  }
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v7 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)id v10 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LoadingResources", "", v10, 2u);
  }

  if (!*((void *)this + 19)) {
    goto LABEL_14;
  }
  id v11 = *((id *)this + 10);
  uint64_t v8 = *((void *)this + 19);
  if (v8)
  {
    (*(void (**)(uint64_t, id *))(*(void *)v8 + 48))(v8, &v11);

    uint64_t v9 = (void *)*((void *)this + 10);
    *((void *)this + 10) = 0;

LABEL_14:
    std::mutex::unlock((std::mutex *)((char *)this + 8));

    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A19E6F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t md::TiledGEOResourceFetcher::createResource(id *a1, void *a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t Resource = gdc::ResourceFetcher::createResource((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((Resource & 1) == 0)
  {
    long long v13 = *(_OWORD *)*(void *)(a8 + 32);
    id v11 = md::TiledGEOResourceFetcher::getTileLoader(a1);
    [v11 reportCorruptTile:&v13];
  }
  return Resource;
}

void sub_1A19E7014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::ResourceFetcher::createResource(uint64_t a1, void *a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  char v80 = a5;
  unint64_t v79 = 0;
  if (((*(uint64_t (**)(void))(**(void **)a8 + 16))() & 1) == 0)
  {
    unint64_t v79 = (*(uint64_t (**)(void))(**(void **)a8 + 24))();
    std::mutex::lock((std::mutex *)(a1 + 112));
    uint64_t v16 = a1 + 40 * a5;
    unint64_t v19 = *(void *)(v16 + 208);
    id v17 = (uint64_t *)(v16 + 208);
    unint64_t v18 = v19;
    long long v20 = (double *)(v17 - 4);
    double v21 = (double)v79;
    if (v19)
    {
      *long long v20 = fmin(*v20, v21);
      unint64_t v22 = (double *)(a1 + 40 * a5);
      double v23 = v22[24];
      uint64_t v24 = v18 + 1;
      v22[23] = fmax(v22[23], v21);
      v22[24] = (v23 + v21 / (double)v18) * (double)v18 / (double)(v18 + 1);
      v22[25] = v22[25] + v21;
    }
    else
    {
      int64x2_t v25 = vdupq_lane_s64(*(uint64_t *)&v21, 0);
      *(int64x2_t *)long long v20 = v25;
      *(int64x2_t *)(a1 + 40 * a5 + 192) = v25;
      uint64_t v24 = 1;
    }
    *id v17 = v24;
    std::mutex::unlock((std::mutex *)(a1 + 112));
  }
  long long v78 = 0uLL;
  int v26 = *(unsigned __int16 *)(a3 + 2);
  unint64_t v28 = *(unsigned __int16 **)(a1 + 40);
  unint64_t v27 = *(unsigned __int16 **)(a1 + 48);
  if (v28 != v27)
  {
    while (v26 != *v28)
    {
      v28 += 12;
      if (v28 == v27) {
        goto LABEL_14;
      }
    }
  }
  if (v28 == v27)
  {
LABEL_14:
    __p[31] = 14;
    *(void *)std::string __p = -1;
    strcpy(&__p[8], "GeoDisplayCore");
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    unint64_t v35 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 16), v26);
    goto LABEL_57;
  }
  uint64_t v77 = a2;
  long long v29 = operator new(0x20uLL);
  char v30 = a4;
  *long long v29 = &unk_1EF57A3D0;
  v29[1] = a3;
  v29[2] = &v79;
  void v29[3] = &v80;
  id v89 = v29;
  unint64_t v87 = 0;
  std::string::size_type v31 = operator new(0x20uLL);
  *std::string::size_type v31 = &unk_1EF57A418;
  v31[1] = a3;
  uint64_t v32 = v31 + 1;
  v31[2] = &v79;
  v31[3] = &v80;
  unint64_t v87 = v31;
  unint64_t v33 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v33 = &unk_1EF57A418;
  *(_OWORD *)(v33 + 8) = *(_OWORD *)v32;
  *((void *)v33 + 3) = v32[2];
  *(void *)&__p[24] = v33;
  std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::operator()((uint64_t)v29);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
    char v34 = v30;
  }
  else
  {
    char v34 = v30;
    if (v87) {
      (*(void (**)(void))(*v87 + 40))();
    }
  }
  a2 = v77;
  if (v89 == v88)
  {
    (*(void (**)(void *))(v88[0] + 32))(v88);
  }
  else if (v89)
  {
    (*(void (**)(void))(*v89 + 40))();
  }
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(std::string *__return_ptr))(**((void **)v28 + 1) + 16))(&buf);
  long long v37 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  char v38 = (std::__shared_weak_count *)*((void *)&v78 + 1);
  long long v78 = v37;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  std::mutex::lock((std::mutex *)(a1 + 336));
  double v40 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v36.__d_.__rep_) * 0.000000001;
  unint64_t v41 = *(void *)(a1 + 432);
  if (v41)
  {
    double v42 = fmax(*(double *)(a1 + 408), v40);
    *(double *)(a1 + 400) = fmin(*(double *)(a1 + 400), v40);
    *(double *)(a1 + 408) = v42;
    double v43 = (double)v41;
    double v44 = *(double *)(a1 + 416) + v40 / (double)v41;
    unint64_t v45 = v41 + 1;
    double v40 = *(double *)(a1 + 424) + v40;
    *(double *)(a1 + 416) = v44 * v43 / (double)v45;
  }
  else
  {
    *(double *)(a1 + 400) = v40;
    *(double *)(a1 + 408) = v40;
    unint64_t v45 = 1;
    *(double *)(a1 + 416) = v40;
  }
  *(double *)(a1 + 424) = v40;
  *(void *)(a1 + 432) = v45;
  std::mutex::unlock((std::mutex *)(a1 + 336));
  if (!*(void *)&__p[24])
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_85;
  }
  (*(void (**)(void))(**(void **)&__p[24] + 48))(*(void *)&__p[24]);
  if (*(unsigned char **)&__p[24] == __p)
  {
    (*(void (**)(unsigned char *))(*(void *)__p + 32))(__p);
    uint64_t v46 = v78;
    if ((void)v78) {
      goto LABEL_34;
    }
    goto LABEL_49;
  }
  if (*(void *)&__p[24]) {
    (*(void (**)(void))(**(void **)&__p[24] + 40))();
  }
  uint64_t v46 = v78;
  if (!(void)v78)
  {
LABEL_49:
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    os_signpost_id_t v56 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)a3);
      int v57 = *(unsigned __int16 *)(a3 + 2);
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = p_buf;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v57;
      *(_WORD *)&__p[18] = 2048;
      *(void *)&unsigned char __p[20] = v77;
      _os_log_impl(&dword_1A1780000, v56, OS_LOG_TYPE_ERROR, "Failed to decode key: %s type: %d, rid: %llu", __p, 0x1Cu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }

    __p[31] = 14;
    *(void *)std::string __p = -2;
    strcpy(&__p[8], "GeoDisplayCore");
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    unint64_t v35 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 16), *(_WORD *)(a3 + 2));
LABEL_57:
    gdc::ResourceStore::failed(*(gdc::ResourceStore **)v35, a2, (const gdc::ResourceKey *)a3, (const gdc::Error *)__p);
    uint64_t v59 = 0;
    uint64_t v60 = (std::__shared_weak_count *)*((void *)&v78 + 1);
    if (!*((void *)&v78 + 1)) {
      return v59;
    }
    goto LABEL_81;
  }
LABEL_34:
  if (a6 >= 1) {
    *(void *)(v46 + 112) = a6;
  }
  char v47 = v80;
  *(unsigned char *)(v46 + 120) = v34;
  *(unsigned char *)(v46 + 121) = v47;
  *(void *)(v46 + 128) = v77;
  *(unsigned char *)(v46 + 136) = a7;
  uint64_t v48 = *(void *)geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 16), *(_WORD *)(a3 + 2));
  std::mutex::lock((std::mutex *)(v48 + 128));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  id v49 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str((std::string *)__p, (unsigned __int8 *)v78);
    uint64_t v50 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    std::string::size_type v51 = *(void *)(v78 + 128);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v51;
    _os_log_impl(&dword_1A1780000, v49, OS_LOG_TYPE_DEBUG, "Resource Arrived: %s, rid: %llu", (uint8_t *)&buf, 0x16u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  size_t v53 = *(char **)(v48 + 200);
  unint64_t v52 = *(void *)(v48 + 208);
  if ((unint64_t)v53 < v52)
  {
    *(void *)size_t v53 = v78;
    uint64_t v54 = *((void *)&v78 + 1);
    *((void *)v53 + 1) = *((void *)&v78 + 1);
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v55 = v53 + 16;
    goto LABEL_78;
  }
  id v61 = *(char **)(v48 + 192);
  uint64_t v62 = (v53 - v61) >> 4;
  unint64_t v63 = v62 + 1;
  if ((unint64_t)(v62 + 1) >> 60) {
LABEL_85:
  }
    abort();
  uint64_t v64 = v52 - (void)v61;
  if (v64 >> 3 > v63) {
    unint64_t v63 = v64 >> 3;
  }
  BOOL v65 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v65) {
    unint64_t v66 = v63;
  }
  if (v66 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v67 = 16 * v66;
  id v68 = (char *)operator new(16 * v66);
  unint64_t v69 = &v68[16 * v62];
  uint64_t v70 = *((void *)&v78 + 1);
  *(_OWORD *)unint64_t v69 = v78;
  if (v70)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    id v61 = *(char **)(v48 + 192);
    size_t v53 = *(char **)(v48 + 200);
  }
  uint64_t v71 = &v68[v67];
  unint64_t v55 = v69 + 16;
  if (v53 == v61)
  {
    *(void *)(v48 + 192) = v69;
    *(void *)(v48 + 200) = v55;
    *(void *)(v48 + 208) = v71;
  }
  else
  {
    do
    {
      long long v72 = *((_OWORD *)v53 - 1);
      v53 -= 16;
      *((_OWORD *)v69 - 1) = v72;
      v69 -= 16;
      *(void *)size_t v53 = 0;
      *((void *)v53 + 1) = 0;
    }
    while (v53 != v61);
    id v61 = *(char **)(v48 + 192);
    uint64_t v73 = *(char **)(v48 + 200);
    *(void *)(v48 + 192) = v69;
    *(void *)(v48 + 200) = v55;
    for (*(void *)(v48 + 208) = v71; v73 != v61; v73 -= 16)
    {
      id v74 = (std::__shared_weak_count *)*((void *)v73 - 1);
      if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  if (v61) {
    operator delete(v61);
  }
LABEL_78:
  *(void *)(v48 + 200) = v55;
  uint64_t v75 = *(void *)(v48 + 24);
  if (v75) {
    (*(void (**)(uint64_t, long long *))(*(void *)v75 + 48))(v75, &v78);
  }
  std::mutex::unlock((std::mutex *)(v48 + 128));
  uint64_t v59 = 1;
  uint64_t v60 = (std::__shared_weak_count *)*((void *)&v78 + 1);
  if (*((void *)&v78 + 1))
  {
LABEL_81:
    if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return v59;
}

void sub_1A19E79C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  gdc::Error::~Error((void **)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A19E7A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  if (a22 == &a19)
  {
    (*(void (**)(uint64_t *))(a19 + 32))(&a19);
    _Unwind_Resume(exception_object);
  }
  if (!a22) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(*a22 + 40))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v2 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  unsigned __int8 v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = **(void **)(a1 + 16);
    int v7 = **(unsigned __int8 **)(a1 + 24);
    uint64_t v8 = *(void *)(v4 + 88);
    int v9 = 134218496;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    int v12 = v7;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ResourceDecode", "resourceSize=%lu source=%hhu parent_signpost=%llu", (uint8_t *)&v9, 0x1Cu);
  }
}

BOOL gdc::DataObject::empty(id *this)
{
  return gdc::DataObject::length(this) == 0;
}

uint64_t gdc::DataObject::length(id *this)
{
  id v2 = this[2];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0) {
    return 0;
  }
  id v4 = this[2];
  if (!v4) {
    return 0;
  }
  return [v4 length];
}

void sub_1A19E7C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 400);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  id v2 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  unsigned __int8 v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = **(void **)(a1 + 16);
    int v7 = **(unsigned __int8 **)(a1 + 24);
    uint64_t v8 = *(void *)(v4 + 88);
    int v9 = 134218496;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    int v12 = v7;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v5, "ResourceDecode", "resourceSize=%lu source=%hhu parent_signpost=%llu", (uint8_t *)&v9, 0x1Cu);
  }
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  id v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  unsigned __int8 v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t md::IdentifiedGEOResourceFetcher::createResource(uint64_t a1, void *a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t Resource = gdc::ResourceFetcher::createResource(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((Resource & 1) == 0)
  {
    uint64_t v10 = objc_msgSend(MEMORY[0x1E4F64AC8], "modernLoader", **(void **)(a8 + 32), *(void *)(*(void *)(a8 + 32) + 8));
    [v10 reportCorruptTile:&v12];
  }
  return Resource;
}

void sub_1A19E7FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  id v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  unsigned __int8 v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

void gdc::ResourceFetcher::failedToLoad(unsigned __int16 **this, void *a2, const gdc::ResourceKey *a3, const gdc::Error *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3 != 1)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint64_t v8 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a3);
      int v9 = *((unsigned __int16 *)a3 + 1);
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      uint64_t v11 = *(void *)a4;
      if (*((char *)a4 + 31) >= 0) {
        long long v12 = (char *)a4 + 8;
      }
      else {
        long long v12 = (char *)*((void *)a4 + 1);
      }
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v16 = p_p;
      __int16 v17 = 1024;
      int v18 = v9;
      __int16 v19 = 2048;
      uint64_t v20 = v11;
      __int16 v21 = 2080;
      unint64_t v22 = v12;
      _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_ERROR, "Failed to load key: %s type: %d, %lld: %s", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v13 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[](this + 2, *((_WORD *)a3 + 1));
  gdc::ResourceStore::failed(*(gdc::ResourceStore **)v13, a2, a3, a4);
}

void *md::CartographicRenderer::clearScene(void *this)
{
  uint64_t v1 = (void **)this[5];
  id v2 = (void **)this[6];
  while (v1 != v2)
  {
    this = *v1;
    if (*v1) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 48))(this);
    }
    ++v1;
  }
  return this;
}

void md::MapEngine::updateSettings(md::MapEngine *this, char a2)
{
  uint64_t v302 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0 && !*(void *)(*((void *)this + 141) + 40)) {
    return;
  }
  uint64_t v4 = *((void *)this + 149);
  *(_OWORD *)int v296 = 0u;
  *(_OWORD *)unint64_t v297 = 0u;
  float v298 = *(float *)(v4 + 40);
  size_t prime = *(void *)(v4 + 16);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_5:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v296, prime);
    goto LABEL_6;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(v4 + 16));
    uint64_t v119 = v296[1];
    BOOL v120 = (void *)prime >= v296[1];
    if ((void *)prime > v296[1]) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v119 = 0;
    BOOL v120 = 1;
    if (prime) {
      goto LABEL_5;
    }
  }
  if (!v120)
  {
    unint64_t v125 = vcvtps_u32_f32((float)(unint64_t)v297[1] / v298);
    if ((unint64_t)v119 < 3
      || (uint8x8_t v126 = (uint8x8_t)vcnt_s8((int8x8_t)v119), v126.i16[0] = vaddlv_u8(v126), v126.u32[0] > 1uLL))
    {
      unint64_t v125 = std::__next_prime(v125);
    }
    else
    {
      uint64_t v127 = 1 << -(char)__clz(v125 - 1);
      if (v125 >= 2) {
        unint64_t v125 = v127;
      }
    }
    if (prime <= v125) {
      size_t prime = v125;
    }
    if (prime < (unint64_t)v119) {
      goto LABEL_5;
    }
  }
LABEL_6:
  uint64_t v6 = *(uint64_t **)(v4 + 24);
  if (v6)
  {
    unint64_t v7 = (unint64_t)v296[1];
    do
    {
      unint64_t v8 = *((unsigned __int16 *)v6 + 8);
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned __int16 *)v6 + 8);
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        uint64_t v10 = (uint64_t ***)*((void *)v296[0] + v2);
        if (v10)
        {
          uint64_t v11 = *v10;
          if (v11)
          {
            if (v9.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v13 = (unint64_t)v11[1];
                if (v13 == v8)
                {
                  if (*((unsigned __int16 *)v11 + 8) == v8) {
                    goto LABEL_66;
                  }
                }
                else if ((v13 & (v7 - 1)) != v2)
                {
                  goto LABEL_28;
                }
                uint64_t v11 = (uint64_t **)*v11;
                if (!v11) {
                  goto LABEL_28;
                }
              }
            }
            do
            {
              unint64_t v12 = (unint64_t)v11[1];
              if (v12 == v8)
              {
                if (*((unsigned __int16 *)v11 + 8) == v8) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
                if (v12 != v2) {
                  break;
                }
              }
              uint64_t v11 = (uint64_t **)*v11;
            }
            while (v11);
          }
        }
      }
LABEL_28:
      uint64_t v14 = operator new(0x18uLL);
      *uint64_t v14 = 0;
      v14[1] = v8;
      *((_DWORD *)v14 + 4) = *((_DWORD *)v6 + 4);
      float v15 = (float)((unint64_t)v297[1] + 1);
      if (!v7 || (float)(v298 * (float)v7) < v15)
      {
        BOOL v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v7);
        unint64_t v18 = vcvtps_u32_f32(v15 / v298);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        if (v19 == 1)
        {
          size_t v19 = 2;
        }
        else if ((v19 & (v19 - 1)) != 0)
        {
          size_t v19 = std::__next_prime(v19);
          unint64_t v7 = (unint64_t)v296[1];
        }
        if (v19 > v7) {
          goto LABEL_40;
        }
        if (v19 < v7)
        {
          unint64_t v20 = vcvtps_u32_f32((float)(unint64_t)v297[1] / v298);
          if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
          {
            unint64_t v20 = std::__next_prime(v20);
          }
          else
          {
            uint64_t v22 = 1 << -(char)__clz(v20 - 1);
            if (v20 >= 2) {
              unint64_t v20 = v22;
            }
          }
          if (v19 <= v20) {
            size_t v19 = v20;
          }
          if (v19 < v7) {
LABEL_40:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v296, v19);
        }
        unint64_t v7 = (unint64_t)v296[1];
        if (((unint64_t)v296[1] & ((unint64_t)v296[1] - 1)) != 0)
        {
          if (v296[1] <= (void *)v8) {
            unint64_t v2 = v8 % (unint64_t)v296[1];
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (LODWORD(v296[1]) - 1) & v8;
        }
      }
      uint64_t v23 = v296[0];
      uint64_t v24 = (void *)*((void *)v296[0] + v2);
      if (v24)
      {
        *uint64_t v14 = *v24;
      }
      else
      {
        *uint64_t v14 = v297[0];
        v297[0] = v14;
        v23[v2] = v297;
        if (!*v14) {
          goto LABEL_65;
        }
        unint64_t v25 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7) {
            v25 %= v7;
          }
        }
        else
        {
          v25 &= v7 - 1;
        }
        uint64_t v24 = (char *)v296[0] + 8 * v25;
      }
      *uint64_t v24 = v14;
LABEL_65:
      ++v297[1];
LABEL_66:
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  *(_OWORD *)unint64_t v293 = 0u;
  *(_OWORD *)CFRange v294 = 0u;
  float v295 = *(float *)(v4 + 112);
  size_t v26 = *(void *)(v4 + 88);
  if (v26 == 1)
  {
    size_t v26 = 2;
LABEL_69:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v293, v26);
    goto LABEL_70;
  }
  if ((v26 & (v26 - 1)) != 0)
  {
    size_t v26 = std::__next_prime(*(void *)(v4 + 88));
    uint64_t v121 = v293[1];
    BOOL v122 = (void *)v26 >= v293[1];
    if ((void *)v26 > v293[1]) {
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v121 = 0;
    BOOL v122 = 1;
    if (v26) {
      goto LABEL_69;
    }
  }
  if (!v122)
  {
    unint64_t v128 = vcvtps_u32_f32((float)(unint64_t)v294[1] / v295);
    if ((unint64_t)v121 < 3
      || (uint8x8_t v129 = (uint8x8_t)vcnt_s8((int8x8_t)v121), v129.i16[0] = vaddlv_u8(v129), v129.u32[0] > 1uLL))
    {
      unint64_t v128 = std::__next_prime(v128);
    }
    else
    {
      uint64_t v130 = 1 << -(char)__clz(v128 - 1);
      if (v128 >= 2) {
        unint64_t v128 = v130;
      }
    }
    if (v26 <= v128) {
      size_t v26 = v128;
    }
    if (v26 < (unint64_t)v121) {
      goto LABEL_69;
    }
  }
LABEL_70:
  unint64_t v27 = *(uint64_t **)(v4 + 96);
  if (v27)
  {
    unint64_t v28 = (unint64_t)v293[1];
    do
    {
      unint64_t v29 = *((unsigned __int16 *)v27 + 8);
      if (v28)
      {
        uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned __int16 *)v27 + 8);
          if (v28 <= v29) {
            unint64_t v2 = v29 % v28;
          }
        }
        else
        {
          unint64_t v2 = (v28 - 1) & v29;
        }
        std::string::size_type v31 = (uint64_t ***)*((void *)v293[0] + v2);
        if (v31)
        {
          uint64_t v32 = *v31;
          if (v32)
          {
            if (v30.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v34 = (unint64_t)v32[1];
                if (v34 == v29)
                {
                  if (*((unsigned __int16 *)v32 + 8) == v29) {
                    goto LABEL_130;
                  }
                }
                else if ((v34 & (v28 - 1)) != v2)
                {
                  goto LABEL_92;
                }
                uint64_t v32 = (uint64_t **)*v32;
                if (!v32) {
                  goto LABEL_92;
                }
              }
            }
            do
            {
              unint64_t v33 = (unint64_t)v32[1];
              if (v33 == v29)
              {
                if (*((unsigned __int16 *)v32 + 8) == v29) {
                  goto LABEL_130;
                }
              }
              else
              {
                if (v33 >= v28) {
                  v33 %= v28;
                }
                if (v33 != v2) {
                  break;
                }
              }
              uint64_t v32 = (uint64_t **)*v32;
            }
            while (v32);
          }
        }
      }
LABEL_92:
      unint64_t v35 = operator new(0x18uLL);
      *unint64_t v35 = 0;
      v35[1] = v29;
      int v36 = *((_DWORD *)v27 + 4);
      *((_WORD *)v35 + 10) = *((_WORD *)v27 + 10);
      *((_DWORD *)v35 + 4) = v36;
      float v37 = (float)((unint64_t)v294[1] + 1);
      if (!v28 || (float)(v295 * (float)v28) < v37)
      {
        BOOL v38 = (v28 & (v28 - 1)) != 0;
        if (v28 < 3) {
          BOOL v38 = 1;
        }
        unint64_t v39 = v38 | (2 * v28);
        unint64_t v40 = vcvtps_u32_f32(v37 / v295);
        if (v39 <= v40) {
          size_t v41 = v40;
        }
        else {
          size_t v41 = v39;
        }
        if (v41 == 1)
        {
          size_t v41 = 2;
        }
        else if ((v41 & (v41 - 1)) != 0)
        {
          size_t v41 = std::__next_prime(v41);
          unint64_t v28 = (unint64_t)v293[1];
        }
        if (v41 > v28) {
          goto LABEL_104;
        }
        if (v41 < v28)
        {
          unint64_t v42 = vcvtps_u32_f32((float)(unint64_t)v294[1] / v295);
          if (v28 < 3 || (uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
          {
            unint64_t v42 = std::__next_prime(v42);
          }
          else
          {
            uint64_t v44 = 1 << -(char)__clz(v42 - 1);
            if (v42 >= 2) {
              unint64_t v42 = v44;
            }
          }
          if (v41 <= v42) {
            size_t v41 = v42;
          }
          if (v41 < v28) {
LABEL_104:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v293, v41);
        }
        unint64_t v28 = (unint64_t)v293[1];
        if (((unint64_t)v293[1] & ((unint64_t)v293[1] - 1)) != 0)
        {
          if (v293[1] <= (void *)v29) {
            unint64_t v2 = v29 % (unint64_t)v293[1];
          }
          else {
            unint64_t v2 = v29;
          }
        }
        else
        {
          unint64_t v2 = (LODWORD(v293[1]) - 1) & v29;
        }
      }
      unint64_t v45 = v293[0];
      uint64_t v46 = (void *)*((void *)v293[0] + v2);
      if (v46)
      {
        *unint64_t v35 = *v46;
      }
      else
      {
        *unint64_t v35 = v294[0];
        v294[0] = v35;
        v45[v2] = v294;
        if (!*v35) {
          goto LABEL_129;
        }
        unint64_t v47 = *(void *)(*v35 + 8);
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v47 >= v28) {
            v47 %= v28;
          }
        }
        else
        {
          v47 &= v28 - 1;
        }
        uint64_t v46 = (char *)v293[0] + 8 * v47;
      }
      *uint64_t v46 = v35;
LABEL_129:
      ++v294[1];
LABEL_130:
      unint64_t v27 = (uint64_t *)*v27;
    }
    while (v27);
  }
  *(_OWORD *)unint64_t v290 = 0u;
  *(_OWORD *)unint64_t v291 = 0u;
  float v292 = *(float *)(v4 + 176);
  size_t v48 = *(void *)(v4 + 152);
  if (v48 != 1)
  {
    if ((v48 & (v48 - 1)) != 0)
    {
      size_t v48 = std::__next_prime(*(void *)(v4 + 152));
      uint64_t v123 = v290[1];
      BOOL v124 = (void *)v48 >= v290[1];
      if ((void *)v48 > v290[1]) {
        goto LABEL_133;
      }
    }
    else
    {
      uint64_t v123 = 0;
      BOOL v124 = 1;
      if (v48) {
        goto LABEL_133;
      }
    }
    if (v124) {
      goto LABEL_134;
    }
    unint64_t v131 = vcvtps_u32_f32((float)(unint64_t)v291[1] / v292);
    if ((unint64_t)v123 < 3
      || (uint8x8_t v132 = (uint8x8_t)vcnt_s8((int8x8_t)v123), v132.i16[0] = vaddlv_u8(v132), v132.u32[0] > 1uLL))
    {
      unint64_t v131 = std::__next_prime(v131);
    }
    else
    {
      uint64_t v133 = 1 << -(char)__clz(v131 - 1);
      if (v131 >= 2) {
        unint64_t v131 = v133;
      }
    }
    if (v48 <= v131) {
      size_t v48 = v131;
    }
    if (v48 >= (unint64_t)v123) {
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  size_t v48 = 2;
LABEL_133:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v290, v48);
LABEL_134:
  id v49 = *(uint64_t **)(v4 + 160);
  if (v49)
  {
    unint64_t v50 = (unint64_t)v290[1];
    do
    {
      unint64_t v51 = *((unsigned __int8 *)v49 + 16);
      if (v50)
      {
        uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
        v52.i16[0] = vaddlv_u8(v52);
        if (v52.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned __int8 *)v49 + 16);
          if (v50 <= v51) {
            unint64_t v2 = v51 % v50;
          }
        }
        else
        {
          unint64_t v2 = (v50 - 1) & v51;
        }
        size_t v53 = (uint64_t ***)*((void *)v290[0] + v2);
        if (v53)
        {
          uint64_t v54 = *v53;
          if (v54)
          {
            if (v52.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v55 = (unint64_t)v54[1];
                if (v55 == v51)
                {
                  if (*((unsigned __int8 *)v54 + 16) == v51) {
                    goto LABEL_194;
                  }
                }
                else if ((v55 & (v50 - 1)) != v2)
                {
                  goto LABEL_156;
                }
                uint64_t v54 = (uint64_t **)*v54;
                if (!v54) {
                  goto LABEL_156;
                }
              }
            }
            do
            {
              unint64_t v56 = (unint64_t)v54[1];
              if (v56 == v51)
              {
                if (*((unsigned __int8 *)v54 + 16) == v51) {
                  goto LABEL_194;
                }
              }
              else
              {
                if (v56 >= v50) {
                  v56 %= v50;
                }
                if (v56 != v2) {
                  break;
                }
              }
              uint64_t v54 = (uint64_t **)*v54;
            }
            while (v54);
          }
        }
      }
LABEL_156:
      int v57 = operator new(0x18uLL);
      void *v57 = 0;
      v57[1] = v51;
      *((_WORD *)v57 + 8) = *((_WORD *)v49 + 8);
      float v58 = (float)((unint64_t)v291[1] + 1);
      if (!v50 || (float)(v292 * (float)v50) < v58)
      {
        BOOL v59 = (v50 & (v50 - 1)) != 0;
        if (v50 < 3) {
          BOOL v59 = 1;
        }
        unint64_t v60 = v59 | (2 * v50);
        unint64_t v61 = vcvtps_u32_f32(v58 / v292);
        if (v60 <= v61) {
          size_t v62 = v61;
        }
        else {
          size_t v62 = v60;
        }
        if (v62 == 1)
        {
          size_t v62 = 2;
        }
        else if ((v62 & (v62 - 1)) != 0)
        {
          size_t v62 = std::__next_prime(v62);
          unint64_t v50 = (unint64_t)v290[1];
        }
        if (v62 > v50) {
          goto LABEL_168;
        }
        if (v62 < v50)
        {
          unint64_t v63 = vcvtps_u32_f32((float)(unint64_t)v291[1] / v292);
          if (v50 < 3 || (uint8x8_t v64 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
          {
            unint64_t v63 = std::__next_prime(v63);
          }
          else
          {
            uint64_t v65 = 1 << -(char)__clz(v63 - 1);
            if (v63 >= 2) {
              unint64_t v63 = v65;
            }
          }
          if (v62 <= v63) {
            size_t v62 = v63;
          }
          if (v62 < v50) {
LABEL_168:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v290, v62);
        }
        unint64_t v50 = (unint64_t)v290[1];
        if (((unint64_t)v290[1] & ((unint64_t)v290[1] - 1)) != 0)
        {
          if (v290[1] <= (void *)v51) {
            unint64_t v2 = v51 % (unint64_t)v290[1];
          }
          else {
            unint64_t v2 = v51;
          }
        }
        else
        {
          unint64_t v2 = (LODWORD(v290[1]) - 1) & v51;
        }
      }
      unint64_t v66 = v290[0];
      uint64_t v67 = (void *)*((void *)v290[0] + v2);
      if (v67)
      {
        void *v57 = *v67;
      }
      else
      {
        void *v57 = v291[0];
        v291[0] = v57;
        v66[v2] = v291;
        if (!*v57) {
          goto LABEL_193;
        }
        unint64_t v68 = *(void *)(*v57 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v68 >= v50) {
            v68 %= v50;
          }
        }
        else
        {
          v68 &= v50 - 1;
        }
        uint64_t v67 = (char *)v290[0] + 8 * v68;
      }
      *uint64_t v67 = v57;
LABEL_193:
      ++v291[1];
LABEL_194:
      id v49 = (uint64_t *)*v49;
    }
    while (v49);
  }
  (*(void (**)(uint64_t, md::MapEngine *, void **))(*(void *)v4 + 16))(v4, this, v290);
  (*(void (**)(uint64_t, md::MapEngine *, void **))(*(void *)v4 + 24))(v4, this, v293);
  (*(void (**)(unint64_t ***__return_ptr, uint64_t, void))(*(void *)v4 + 32))(&v289, v4, *((void *)this + 141));
  if (!v289)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v69 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "graph";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MDMapEngine.mm";
      *(_WORD *)&unsigned char buf[22] = 1024;
      LODWORD(v300) = 2632;
      _os_log_impl(&dword_1A1780000, v69, OS_LOG_TYPE_ERROR, "Failed to build an execution graph: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }

    if (!v289) {
      abort();
    }
  }
  uint64_t v70 = *((void *)this + 109);
  uint64_t v71 = *(unsigned __int8 ***)(v70 + 40);
  long long v72 = *(unsigned __int8 ***)(v70 + 48);
  if (v71 == v72) {
    goto LABEL_229;
  }
  int v73 = *(unsigned __int8 *)(v4 + 49);
  while (2)
  {
    uint64_t v75 = *v71;
    if (!*v71) {
      goto LABEL_205;
    }
    if (!v290[1]) {
      goto LABEL_203;
    }
    unint64_t v76 = v75[34];
    uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v290[1]);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      unint64_t v78 = v75[34];
      if (v290[1] <= (void *)v76) {
        unint64_t v78 = v76 % (unint64_t)v290[1];
      }
    }
    else
    {
      unint64_t v78 = (LODWORD(v290[1]) - 1) & v76;
    }
    unint64_t v79 = (uint64_t ***)*((void *)v290[0] + v78);
    if (!v79 || (char v80 = *v79) == 0)
    {
LABEL_203:
      BOOL v74 = 0;
      goto LABEL_204;
    }
    if (v77.u32[0] < 2uLL)
    {
      while (1)
      {
        unint64_t v82 = (unint64_t)v80[1];
        if (v82 == v76)
        {
          if (*((unsigned __int8 *)v80 + 16) == v76) {
            goto LABEL_228;
          }
        }
        else if ((v82 & ((unint64_t)v290[1] - 1)) != v78)
        {
          goto LABEL_203;
        }
        char v80 = (uint64_t **)*v80;
        if (!v80) {
          goto LABEL_203;
        }
      }
    }
    while (1)
    {
      unint64_t v81 = (unint64_t)v80[1];
      if (v81 == v76) {
        break;
      }
      if ((void *)v81 >= v290[1]) {
        v81 %= (unint64_t)v290[1];
      }
      if (v81 != v78) {
        goto LABEL_203;
      }
LABEL_217:
      char v80 = (uint64_t **)*v80;
      if (!v80) {
        goto LABEL_203;
      }
    }
    if (*((unsigned __int8 *)v80 + 16) != v76) {
      goto LABEL_217;
    }
LABEL_228:
    BOOL v74 = *((unsigned __int8 *)v80 + 17) != 2;
LABEL_204:
    (*(void (**)(unsigned __int8 *, BOOL, BOOL))(*(void *)v75 + 40))(v75, v74, v73 != 0);
LABEL_205:
    if (++v71 != v72) {
      continue;
    }
    break;
  }
LABEL_229:
  md::LogicManager::setLogicExecutionGraph(*((int8x8_t **)this + 140), &v289);
  uint64_t v83 = *((void *)this + 112);
  __p[1] = 0;
  uint64_t v288 = 0;
  __p[0] = &__p[1];
  uint64_t v84 = *(void **)(v4 + 120);
  uint64_t v85 = (void *)(v4 + 128);
  if (v84 != (void *)(v4 + 128))
  {
    do
    {
      id v89 = (void **)__p[1];
      uint64_t v90 = &__p[1];
      if (__p[0] == &__p[1]) {
        goto LABEL_239;
      }
      uint64_t v91 = (void **)__p[1];
      id v92 = &__p[1];
      if (__p[1])
      {
        do
        {
          uint64_t v90 = v91;
          uint64_t v91 = (void **)v91[1];
        }
        while (v91);
      }
      else
      {
        do
        {
          uint64_t v90 = (void **)v92[2];
          BOOL v144 = *v90 == v92;
          id v92 = v90;
        }
        while (v144);
      }
      unsigned int v93 = *((unsigned __int16 *)v84 + 13);
      if (*((unsigned __int16 *)v90 + 13) < v93)
      {
LABEL_239:
        if (__p[1]) {
          id v94 = v90;
        }
        else {
          id v94 = &__p[1];
        }
        if (__p[1]) {
          unint64_t v95 = v90 + 1;
        }
        else {
          unint64_t v95 = &__p[1];
        }
      }
      else
      {
        id v94 = &__p[1];
        unint64_t v95 = &__p[1];
        if (__p[1])
        {
          unint64_t v95 = &__p[1];
          while (1)
          {
            while (1)
            {
              id v94 = v89;
              unsigned int v97 = *((unsigned __int16 *)v89 + 13);
              if (v93 >= v97) {
                break;
              }
              id v89 = (void **)*v94;
              unint64_t v95 = v94;
              if (!*v94) {
                goto LABEL_254;
              }
            }
            if (v97 >= v93) {
              break;
            }
            unint64_t v95 = v94 + 1;
            id v89 = (void **)v94[1];
            if (!v89) {
              goto LABEL_254;
            }
          }
        }
      }
      if (*v95)
      {
        std::string::size_type v96 = (void *)v84[1];
        if (v96) {
          goto LABEL_257;
        }
      }
      else
      {
LABEL_254:
        std::string::size_type v98 = operator new(0x20uLL);
        v98[13] = *((_WORD *)v84 + 13);
        *(void *)std::string::size_type v98 = 0;
        *((void *)v98 + 1) = 0;
        *((void *)v98 + 2) = v94;
        *unint64_t v95 = v98;
        if (*(void *)__p[0])
        {
          __p[0] = *(void **)__p[0];
          std::string::size_type v98 = *v95;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)__p[1], (uint64_t *)v98);
        ++v288;
        std::string::size_type v96 = (void *)v84[1];
        if (v96)
        {
          do
          {
LABEL_257:
            uint64_t v99 = v96;
            std::string::size_type v96 = (void *)*v96;
          }
          while (v96);
          goto LABEL_232;
        }
      }
      do
      {
        uint64_t v99 = (void *)v84[2];
        BOOL v144 = *v99 == (void)v84;
        uint64_t v84 = v99;
      }
      while (!v144);
LABEL_232:
      uint64_t v84 = v99;
    }
    while (v99 != v85);
  }
  uint64_t v86 = *(void *)(v83 + 24);
  uint64_t v87 = *(void *)(v86 + 8);
  uint64_t v88 = *(void *)(v86 + 16);
  if (v87 != v88)
  {
    do
    {
      uint64_t v100 = *(void *)(v87 + 8);
      unint64_t v300 = 0;
      gdc::LayerDataSource::setNeedsUpdateFunction(v100, buf);
      if (v300 == buf)
      {
        (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
      }
      else if (v300)
      {
        (*(void (**)(void))(*(void *)v300 + 40))();
      }
      (*(void (**)(void))(**(void **)(v87 + 8) + 24))(*(void *)(v87 + 8));
      v87 += 24;
    }
    while (v87 != v88);
    uint64_t v87 = *(void *)(v86 + 8);
  }
  *(void *)(v86 + 16) = v87;
  if (*(void *)(v83 + 152))
  {
    char v101 = *(void **)(v83 + 144);
    if (v101)
    {
      do
      {
        long long v102 = (void *)*v101;
        operator delete(v101);
        char v101 = v102;
      }
      while (v102);
    }
    *(void *)(v83 + 144) = 0;
    uint64_t v103 = *(void *)(v83 + 136);
    if (v103)
    {
      for (uint64_t i = 0; i != v103; ++i)
        *(void *)(*(void *)(v83 + 128) + 8 * i) = 0;
    }
    *(void *)(v83 + 152) = 0;
  }
  *(void *)(v83 + 176) = *(void *)(v83 + 168);
  unint64_t v286 = (void **)(v83 + 168);
  if (*(void *)(v83 + 240))
  {
    uint64_t v105 = *(void **)(v83 + 232);
    if (v105)
    {
      do
      {
        uint64_t v106 = (void *)*v105;
        operator delete(v105);
        uint64_t v105 = v106;
      }
      while (v106);
    }
    *(void *)(v83 + 232) = 0;
    uint64_t v107 = *(void *)(v83 + 224);
    if (v107)
    {
      for (uint64_t j = 0; j != v107; ++j)
        *(void *)(*(void *)(v83 + 216) + 8 * j) = 0;
    }
    *(void *)(v83 + 240) = 0;
    if (*(void *)(v83 + 152))
    {
      uint64_t v109 = *(void **)(v83 + 144);
      if (v109)
      {
        do
        {
          std::string v110 = (void *)*v109;
          operator delete(v109);
          uint64_t v109 = v110;
        }
        while (v110);
      }
      *(void *)(v83 + 144) = 0;
      uint64_t v111 = *(void *)(v83 + 136);
      if (v111)
      {
        for (uint64_t k = 0; k != v111; ++k)
          *(void *)(*(void *)(v83 + 128) + 8 * k) = 0;
      }
      *(void *)(v83 + 152) = 0;
    }
  }
  char v113 = v293[0];
  v293[0] = 0;
  uint64_t v114 = *(void **)(v83 + 128);
  *(void *)(v83 + 128) = v113;
  if (v114) {
    operator delete(v114);
  }
  unint64_t v115 = (unint64_t)v293[1];
  uint64_t v116 = (unsigned __int16 *)v294[0];
  *(void **)(v83 + 144) = v294[0];
  *(void *)(v83 + 136) = v115;
  v293[1] = 0;
  uint64_t v117 = v294[1];
  *(void **)(v83 + 152) = v294[1];
  *(float *)(v83 + 160) = v295;
  char v283 = this;
  if (v117)
  {
    unint64_t v118 = *((void *)v116 + 1);
    if ((v115 & (v115 - 1)) != 0)
    {
      if (v118 >= v115) {
        v118 %= v115;
      }
    }
    else
    {
      v118 &= v115 - 1;
    }
    *(void *)(*(void *)(v83 + 128) + 8 * v118) = v83 + 144;
    v294[0] = 0;
    v294[1] = 0;
    uint64_t v116 = *(unsigned __int16 **)(v83 + 144);
  }
  if (v116)
  {
    v284 = (void *)(v83 + 232);
    do
    {
      int v136 = v116[8];
      uint64_t v137 = *(unsigned __int16 **)(v83 + 32);
      unint64_t v138 = *(unsigned __int16 **)(v83 + 40);
      if (v137 != v138)
      {
        while (*v137 != v136)
        {
          v137 += 8;
          if (v137 == v138) {
            goto LABEL_340;
          }
        }
      }
      if (v137 == v138) {
LABEL_340:
      }
        uint64_t v139 = 0;
      else {
        uint64_t v139 = (void *)*((void *)v137 + 1);
      }
      float32x4_t v140 = *(unsigned __int16 **)(v83 + 56);
      unint64_t v141 = *(unsigned __int16 **)(v83 + 64);
      if (v140 != v141)
      {
        while (*v140 != v136)
        {
          v140 += 8;
          if (v140 == v141) {
            goto LABEL_350;
          }
        }
      }
      if (v140 == v141)
      {
LABEL_350:
        uint64_t v142 = 0;
        int v143 = *((unsigned __int8 *)v116 + 18);
        if (*((unsigned char *)v116 + 18))
        {
LABEL_351:
          BOOL v144 = v143 != 1 || v139 == 0;
          if (v144 || v142 == 0) {
            goto LABEL_333;
          }
          goto LABEL_358;
        }
      }
      else
      {
        uint64_t v142 = *((void *)v140 + 1);
        int v143 = *((unsigned __int8 *)v116 + 18);
        if (*((unsigned char *)v116 + 18)) {
          goto LABEL_351;
        }
      }
      if (!v139 || !v142) {
        goto LABEL_333;
      }
LABEL_358:
      uint64_t v146 = *(unsigned __int16 **)(v83 + 80);
      BOOL v147 = *(unsigned __int16 **)(v83 + 88);
      if (v146 != v147)
      {
        while (*v146 != v136)
        {
          v146 += 8;
          if (v146 == v147) {
            goto LABEL_364;
          }
        }
      }
      if (v146 == v147) {
LABEL_364:
      }
        uint64_t v148 = 0;
      else {
        uint64_t v148 = *((void *)v146 + 1);
      }
      float32x4_t v149 = *(void **)(v83 + 24);
      uint64_t v150 = (void *)v149[12];
      if (v150)
      {
        if (v150 == v149 + 9)
        {
          unint64_t v300 = buf;
          (*(void (**)(void *, uint8_t *))(*v150 + 24))(v150, buf);
        }
        else
        {
          unint64_t v300 = (uint8_t *)(*(uint64_t (**)(void *))(*v150 + 16))(v150);
        }
      }
      else
      {
        unint64_t v300 = 0;
      }
      gdc::LayerDataSource::setNeedsUpdateFunction((uint64_t)v139, buf);
      if (v300 == buf)
      {
        (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
      }
      else if (v300)
      {
        (*(void (**)(void))(*(void *)v300 + 40))();
      }
      v139[59] = v149[8];
      (*(void (**)(void *))(*v139 + 16))(v139);
      uint64_t v152 = (unsigned __int16 *)v149[1];
      unint64_t v151 = v149[2];
      unint64_t v153 = v152;
      if (v152 != (unsigned __int16 *)v151)
      {
        unint64_t v153 = (unsigned __int16 *)v149[1];
        while (*v153 != v136)
        {
          v153 += 12;
          if (v153 == (unsigned __int16 *)v151) {
            goto LABEL_380;
          }
        }
      }
      if (v153 == (unsigned __int16 *)v151)
      {
LABEL_380:
        *(_OWORD *)&v301[6] = 0uLL;
        unint64_t v153 = v152;
        if (v152 != (unsigned __int16 *)v151)
        {
          unint64_t v153 = v152;
          while (v136 != *v153)
          {
            v153 += 12;
            if (v153 == (unsigned __int16 *)v151) {
              goto LABEL_386;
            }
          }
        }
        if (v153 == (unsigned __int16 *)v151)
        {
LABEL_386:
          unint64_t v154 = v149[3];
          uint64_t v285 = v148;
          if (v151 >= v154)
          {
            unint64_t v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v151 - (void)v152) >> 3) + 1;
            if (v156 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_706;
            }
            unint64_t v157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (void)v152) >> 3);
            if (2 * v157 > v156) {
              unint64_t v156 = 2 * v157;
            }
            if (v157 >= 0x555555555555555) {
              unint64_t v158 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v158 = v156;
            }
            if (v158)
            {
              if (v158 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_707;
              }
              uint64_t v159 = (char *)operator new(24 * v158);
            }
            else
            {
              uint64_t v159 = 0;
            }
            float v160 = &v159[8 * ((uint64_t)(v151 - (void)v152) >> 3)];
            *(_WORD *)float v160 = v136;
            *(_OWORD *)(v160 + 2) = *(_OWORD *)v301;
            *((void *)v160 + 2) = *(void *)&v301[14];
            float v161 = v160;
            if (v152 != (unsigned __int16 *)v151)
            {
              do
              {
                long long v162 = *(_OWORD *)(v151 - 24);
                *((void *)v161 - 1) = *(void *)(v151 - 8);
                *(_OWORD *)(v161 - 24) = v162;
                v161 -= 24;
                v151 -= 24;
              }
              while ((unsigned __int16 *)v151 != v152);
              uint64_t v152 = (unsigned __int16 *)v149[1];
            }
            uint64_t v163 = &v159[24 * v158];
            float32x4_t v155 = v160 + 24;
            v149[1] = v161;
            v149[2] = v160 + 24;
            v149[3] = v163;
            if (v152) {
              operator delete(v152);
            }
          }
          else
          {
            *(_WORD *)unint64_t v151 = v136;
            *(_OWORD *)(v151 + 2) = *(_OWORD *)v301;
            *(void *)(v151 + 16) = *(void *)&v301[14];
            float32x4_t v155 = (char *)(v151 + 24);
          }
          v149[2] = v155;
          unint64_t v153 = (unsigned __int16 *)(v155 - 24);
          uint64_t v148 = v285;
        }
      }
      *((void *)v153 + 1) = v139;
      *((void *)v153 + 2) = v142;
      uint64_t v165 = (unsigned __int16 *)v149[4];
      unint64_t v164 = v149[5];
      float v166 = v165;
      if (v165 != (unsigned __int16 *)v164)
      {
        float v166 = (unsigned __int16 *)v149[4];
        while (*v166 != v136)
        {
          v166 += 8;
          if (v166 == (unsigned __int16 *)v164) {
            goto LABEL_410;
          }
        }
      }
      if (v166 == (unsigned __int16 *)v164)
      {
LABEL_410:
        float v166 = (unsigned __int16 *)v149[4];
        if (v165 != (unsigned __int16 *)v164)
        {
          float v166 = (unsigned __int16 *)v149[4];
          while (v136 != *v166)
          {
            v166 += 8;
            if (v166 == (unsigned __int16 *)v164) {
              goto LABEL_416;
            }
          }
        }
        if (v166 == (unsigned __int16 *)v164)
        {
LABEL_416:
          unint64_t v167 = v149[6];
          if (v164 >= v167)
          {
            uint64_t v170 = (uint64_t)(v164 - (void)v165) >> 4;
            unint64_t v171 = v170 + 1;
            if ((unint64_t)(v170 + 1) >> 60) {
LABEL_706:
            }
              abort();
            uint64_t v168 = v148;
            uint64_t v172 = v167 - (void)v165;
            if (v172 >> 3 > v171) {
              unint64_t v171 = v172 >> 3;
            }
            if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v173 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v173 = v171;
            }
            if (v173)
            {
              if (v173 >> 60) {
                goto LABEL_707;
              }
              long long v174 = (char *)operator new(16 * v173);
            }
            else
            {
              long long v174 = 0;
            }
            long long v175 = &v174[16 * v170];
            *(_WORD *)long long v175 = v136;
            *((void *)v175 + 1) = 0;
            long long v176 = v175;
            if (v165 != (unsigned __int16 *)v164)
            {
              do
              {
                *((_OWORD *)v176 - 1) = *(_OWORD *)(v164 - 16);
                v176 -= 16;
                v164 -= 16;
              }
              while ((unsigned __int16 *)v164 != v165);
              uint64_t v165 = (unsigned __int16 *)v149[4];
            }
            int64x2_t v177 = &v174[16 * v173];
            uint64_t v169 = v175 + 16;
            v149[4] = v176;
            v149[5] = v175 + 16;
            v149[6] = v177;
            if (v165) {
              operator delete(v165);
            }
          }
          else
          {
            uint64_t v168 = v148;
            *(_WORD *)unint64_t v164 = v136;
            *(void *)(v164 + 8) = 0;
            uint64_t v169 = (char *)(v164 + 16);
          }
          v149[5] = v169;
          float v166 = (unsigned __int16 *)(v169 - 16);
          uint64_t v148 = v168;
        }
      }
      *((void *)v166 + 1) = v148;
      uint64_t v178 = (char *)(v116 + 10);
      uint8x8_t v180 = *(unsigned __int16 **)(v83 + 168);
      int8x8_t v179 = *(unsigned __int16 **)(v83 + 176);
      if (v180 != v179)
      {
        while (*v180 < *(unsigned __int16 *)v178)
        {
          if (++v180 == v179) {
            goto LABEL_440;
          }
        }
      }
      if (v180 == v179 || (int8x8_t v179 = v180, *(unsigned __int16 *)v178 != *v180)) {
LABEL_440:
      }
        std::vector<md::TileSelectionTileSetType>::insert(v286, v179, v178);
      if (!v142) {
        goto LABEL_333;
      }
      (*(void (**)(uint8_t *__return_ptr, uint64_t, unsigned __int16 *))(*(void *)v142 + 48))(buf, v142, v179);
      if (!buf[0]) {
        goto LABEL_333;
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v142 + 72))(v301, v142);
      if (v301[0]) {
        unint64_t v181 = *(unsigned int *)&v301[4];
      }
      else {
        unint64_t v181 = 0;
      }
      unint64_t v182 = *(void *)(v83 + 224);
      if (v182)
      {
        uint8x8_t v183 = (uint8x8_t)vcnt_s8((int8x8_t)v182);
        v183.i16[0] = vaddlv_u8(v183);
        if (v183.u32[0] > 1uLL)
        {
          unint64_t v184 = v181;
          if (v182 <= v181) {
            unint64_t v184 = v181 % v182;
          }
        }
        else
        {
          unint64_t v184 = (v182 - 1) & v181;
        }
        uint64_t v185 = *(uint64_t ***)(*(void *)(v83 + 216) + 8 * v184);
        if (v185)
        {
          uint64_t v186 = *v185;
          if (v186)
          {
            if (v183.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v188 = v186[1];
                if (v188 == v181)
                {
                  if (*((_DWORD *)v186 + 4) == v181) {
                    goto LABEL_328;
                  }
                }
                else if ((v188 & (v182 - 1)) != v184)
                {
                  goto LABEL_466;
                }
                uint64_t v186 = (uint64_t *)*v186;
                if (!v186) {
                  goto LABEL_466;
                }
              }
            }
            do
            {
              unint64_t v187 = v186[1];
              if (v187 == v181)
              {
                if (*((_DWORD *)v186 + 4) == v181)
                {
LABEL_328:
                  unsigned int v134 = *((_DWORD *)v186 + 5);
                  unsigned int v135 = *((_DWORD *)v186 + 6);
                  if (*(_DWORD *)&buf[4] < v134) {
                    unsigned int v134 = *(_DWORD *)&buf[4];
                  }
                  if (v135 <= *(_DWORD *)&buf[8]) {
                    unsigned int v135 = *(_DWORD *)&buf[8];
                  }
                  *((_DWORD *)v186 + 5) = v134;
                  *((_DWORD *)v186 + 6) = v135;
                  goto LABEL_333;
                }
              }
              else
              {
                if (v187 >= v182) {
                  v187 %= v182;
                }
                if (v187 != v184) {
                  break;
                }
              }
              uint64_t v186 = (uint64_t *)*v186;
            }
            while (v186);
          }
        }
LABEL_466:
        if (v183.u32[0] > 1uLL)
        {
          unint64_t v164 = v181;
          if (v182 <= v181) {
            unint64_t v164 = v181 % v182;
          }
        }
        else
        {
          unint64_t v164 = (v182 - 1) & v181;
        }
        long double v189 = *(void ***)(*(void *)(v83 + 216) + 8 * v164);
        if (v189)
        {
          double v190 = *v189;
          if (*v189)
          {
            if (v183.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v192 = v190[1];
                if (v192 == v181)
                {
                  if (*((_DWORD *)v190 + 4) == v181) {
                    goto LABEL_552;
                  }
                }
                else if ((v192 & (v182 - 1)) != v164)
                {
                  goto LABEL_485;
                }
                double v190 = (void *)*v190;
                if (!v190) {
                  goto LABEL_485;
                }
              }
            }
            do
            {
              unint64_t v191 = v190[1];
              if (v191 == v181)
              {
                if (*((_DWORD *)v190 + 4) == v181) {
                  goto LABEL_552;
                }
              }
              else
              {
                if (v191 >= v182) {
                  v191 %= v182;
                }
                if (v191 != v164) {
                  break;
                }
              }
              double v190 = (void *)*v190;
            }
            while (v190);
          }
        }
      }
LABEL_485:
      double v190 = operator new(0x20uLL);
      void *v190 = 0;
      v190[1] = v181;
      *((_DWORD *)v190 + 4) = v181;
      float v193 = (float)(unint64_t)(*(void *)(v83 + 240) + 1);
      float v194 = *(float *)(v83 + 248);
      if (v182 && (float)(v194 * (float)v182) >= v193)
      {
        unint64_t v181 = v164;
        goto LABEL_542;
      }
      BOOL v195 = (v182 & (v182 - 1)) != 0;
      if (v182 < 3) {
        BOOL v195 = 1;
      }
      unint64_t v196 = v195 | (2 * v182);
      unint64_t v197 = vcvtps_u32_f32(v193 / v194);
      if (v196 <= v197) {
        size_t v198 = v197;
      }
      else {
        size_t v198 = v196;
      }
      if (v198 == 1)
      {
        size_t v198 = 2;
      }
      else if ((v198 & (v198 - 1)) != 0)
      {
        size_t v198 = std::__next_prime(v198);
        unint64_t v182 = *(void *)(v83 + 224);
      }
      if (v198 <= v182)
      {
        if (v198 >= v182) {
          goto LABEL_538;
        }
        unint64_t v210 = vcvtps_u32_f32((float)*(unint64_t *)(v83 + 240) / *(float *)(v83 + 248));
        if (v182 < 3 || (uint8x8_t v211 = (uint8x8_t)vcnt_s8((int8x8_t)v182), v211.i16[0] = vaddlv_u8(v211), v211.u32[0] > 1uLL))
        {
          unint64_t v210 = std::__next_prime(v210);
        }
        else
        {
          uint64_t v212 = 1 << -(char)__clz(v210 - 1);
          if (v210 >= 2) {
            unint64_t v210 = v212;
          }
        }
        if (v198 <= v210) {
          size_t v198 = v210;
        }
        if (v198 >= v182) {
          goto LABEL_538;
        }
        if (!v198)
        {
          uint64_t v217 = *(void **)(v83 + 216);
          *(void *)(v83 + 216) = 0;
          if (v217) {
            operator delete(v217);
          }
          *(void *)(v83 + 224) = 0;
          goto LABEL_538;
        }
      }
      if (v198 >> 61) {
LABEL_707:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v199 = operator new(8 * v198);
      double v200 = *(void **)(v83 + 216);
      *(void *)(v83 + 216) = v199;
      if (v200) {
        operator delete(v200);
      }
      uint64_t v201 = 0;
      *(void *)(v83 + 224) = v198;
      do
        *(void *)(*(void *)(v83 + 216) + 8 * v201++) = 0;
      while (v198 != v201);
      unint64_t v202 = (void *)*v284;
      if (!*v284) {
        goto LABEL_538;
      }
      size_t v203 = v202[1];
      size_t v204 = v198 - 1;
      if ((v198 & (v198 - 1)) != 0)
      {
        if (v203 >= v198) {
          v203 %= v198;
        }
        *(void *)(*(void *)(v83 + 216) + 8 * v203) = v284;
        double v213 = (void *)*v202;
        if (!*v202) {
          goto LABEL_538;
        }
        while (2)
        {
          size_t v215 = v213[1];
          if (v215 >= v198) {
            v215 %= v198;
          }
          if (v215 != v203)
          {
            uint64_t v216 = *(void *)(v83 + 216);
            if (!*(void *)(v216 + 8 * v215))
            {
              *(void *)(v216 + 8 * v215) = v202;
LABEL_524:
              unint64_t v202 = v213;
              double v213 = (void *)*v213;
              size_t v203 = v215;
              if (!v213) {
                goto LABEL_538;
              }
              continue;
            }
            void *v202 = *v213;
            uint64_t v214 = 8 * v215;
            *double v213 = **(void **)(*(void *)(v83 + 216) + v214);
            **(void **)(*(void *)(v83 + 216) + v214) = v213;
            double v213 = v202;
          }
          break;
        }
        size_t v215 = v203;
        goto LABEL_524;
      }
      size_t v205 = v203 & v204;
      *(void *)(*(void *)(v83 + 216) + 8 * v205) = v284;
      while (1)
      {
        double v206 = (void *)*v202;
        if (!*v202) {
          break;
        }
        size_t v207 = v206[1] & v204;
        if (v207 == v205)
        {
          unint64_t v202 = (void *)*v202;
        }
        else
        {
          uint64_t v208 = *(void *)(v83 + 216);
          if (*(void *)(v208 + 8 * v207))
          {
            void *v202 = *v206;
            uint64_t v209 = 8 * v207;
            *double v206 = **(void **)(*(void *)(v83 + 216) + v209);
            **(void **)(*(void *)(v83 + 216) + v209) = v206;
          }
          else
          {
            *(void *)(v208 + 8 * v207) = v202;
            unint64_t v202 = v206;
            size_t v205 = v207;
          }
        }
      }
LABEL_538:
      unint64_t v182 = *(void *)(v83 + 224);
      if ((v182 & (v182 - 1)) != 0)
      {
        if (v182 <= v181) {
          v181 %= v182;
        }
      }
      else
      {
        unint64_t v181 = (v182 - 1) & v181;
      }
LABEL_542:
      uint64_t v218 = *(void *)(v83 + 216);
      float32x4_t v219 = *(void **)(v218 + 8 * v181);
      if (v219)
      {
        void *v190 = *v219;
LABEL_550:
        *float32x4_t v219 = v190;
        goto LABEL_551;
      }
      void *v190 = *v284;
      void *v284 = v190;
      *(void *)(v218 + 8 * v181) = v284;
      if (*v190)
      {
        unint64_t v220 = *(void *)(*v190 + 8);
        if ((v182 & (v182 - 1)) != 0)
        {
          if (v220 >= v182) {
            v220 %= v182;
          }
        }
        else
        {
          v220 &= v182 - 1;
        }
        float32x4_t v219 = (void *)(*(void *)(v83 + 216) + 8 * v220);
        goto LABEL_550;
      }
LABEL_551:
      ++*(void *)(v83 + 240);
LABEL_552:
      *(void *)((char *)v190 + 20) = *(void *)&buf[4];
LABEL_333:
      uint64_t v116 = *(unsigned __int16 **)v116;
    }
    while (v116);
  }
  uint64_t v221 = (void **)__p[0];
  if (__p[0] != &__p[1])
  {
    do
    {
      unsigned int v226 = *((unsigned __int16 *)v221 + 13);
      *(_WORD *)std::string buf = *((_WORD *)v221 + 13);
      unint64_t v228 = *(unsigned __int16 **)(v83 + 168);
      uint64_t v227 = *(unsigned __int16 **)(v83 + 176);
      if (v228 != v227)
      {
        while (*v228 < v226)
        {
          if (++v228 == v227) {
            goto LABEL_565;
          }
        }
      }
      if (v228 == v227 || (uint64_t v227 = v228, v226 != *v228)) {
LABEL_565:
      }
        std::vector<md::TileSelectionTileSetType>::insert(v286, v227, (char *)buf);
      long long v229 = (void **)v221[1];
      if (v229)
      {
        do
        {
          double v230 = v229;
          long long v229 = (void **)*v229;
        }
        while (v229);
      }
      else
      {
        do
        {
          double v230 = (void **)v221[2];
          BOOL v144 = *v230 == v221;
          uint64_t v221 = v230;
        }
        while (!v144);
      }
      uint64_t v221 = v230;
    }
    while (v230 != &__p[1]);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)__p[1]);
  long long v222 = (void *)*((void *)v283 + 112);
  uint64_t v223 = (uint64_t *)*((void *)v283 + 141);
  uint64_t v224 = *v223;
  uint64_t v225 = v223[1];
  if (*v223 != v225)
  {
    while (*(unsigned char *)v224 != 17)
    {
      v224 += 16;
      if (v224 == v225) {
        goto LABEL_574;
      }
    }
  }
  if (v224 == v225) {
LABEL_574:
  }
    uint64_t v231 = 0;
  else {
    uint64_t v231 = *(void *)(v224 + 8);
  }
  double v232 = (unsigned __int16 *)v222[7];
  unint64_t v233 = (unsigned __int16 *)v222[8];
  if (v232 != v233)
  {
    float v235 = (unsigned __int16 *)v222[24];
    unint64_t v234 = (unsigned __int16 *)v222[25];
    do
    {
      uint64_t v238 = v235;
      if (v235 != v234)
      {
        unsigned int v239 = *v232;
        uint64_t v238 = v235;
        while (1)
        {
          unsigned int v240 = *v238;
          if (v240 == v239) {
            break;
          }
          ++v238;
          if (v239 < v240 || v238 == v234)
          {
            uint64_t v238 = v234;
            break;
          }
        }
      }
      BOOL v237 = v238 == v234 && v231 != 0;
      *(unsigned char *)(*((void *)v232 + 1) + 20) = v237;
      v232 += 8;
    }
    while (v232 != v233);
  }
  (*(void (**)(void, md::MapEngine *))(**((void **)v283 + 148) + 64))(*((void *)v283 + 148), v283);
  memset(buf, 0, sizeof(buf));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v288 = 0;
  uint64_t v242 = *((void *)v283 + 112);
  uint64_t v244 = *(unsigned char **)(v242 + 168);
  float v243 = *(unsigned char **)(v242 + 176);
  int64_t v245 = v243 - v244;
  if (v243 != v244)
  {
    if (v245 < 0) {
      abort();
    }
    int32x4_t v246 = (char *)operator new(v243 - v244);
    memcpy(v246, v244, v245);
    float32x4_t v247 = v246;
    while (1)
    {
      unint64_t v249 = *(unsigned __int16 *)v247;
      if (!v296[1]) {
        goto LABEL_619;
      }
      uint8x8_t v250 = (uint8x8_t)vcnt_s8((int8x8_t)v296[1]);
      v250.i16[0] = vaddlv_u8(v250);
      if (v250.u32[0] > 1uLL)
      {
        unint64_t v251 = *(unsigned __int16 *)v247;
        if (v296[1] <= (void *)v249) {
          unint64_t v251 = v249 % (unint64_t)v296[1];
        }
      }
      else
      {
        unint64_t v251 = (LODWORD(v296[1]) - 1) & v249;
      }
      float32x4_t v252 = (uint64_t ***)*((void *)v296[0] + v251);
      if (!v252 || (float v253 = *v252) == 0)
      {
LABEL_619:
        float v257 = *(unsigned __int16 **)buf;
        float v256 = *(unsigned __int16 **)&buf[8];
        if (*(void *)buf != *(void *)&buf[8])
        {
          while (*v257 < v249)
          {
            if (++v257 == *(unsigned __int16 **)&buf[8]) {
              goto LABEL_596;
            }
          }
        }
        if (v257 != *(unsigned __int16 **)&buf[8])
        {
          if (v249 == *v257) {
            goto LABEL_598;
          }
          goto LABEL_625;
        }
LABEL_596:
        float32x4_t v248 = (void **)buf;
        goto LABEL_597;
      }
      if (v250.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v254 = (unint64_t)v253[1];
          if (v254 == v249)
          {
            if (*((unsigned __int16 *)v253 + 8) == v249) {
              goto LABEL_627;
            }
          }
          else if ((v254 & ((unint64_t)v296[1] - 1)) != v251)
          {
            goto LABEL_619;
          }
          float v253 = (uint64_t **)*v253;
          if (!v253) {
            goto LABEL_619;
          }
        }
      }
      while (1)
      {
        unint64_t v255 = (unint64_t)v253[1];
        if (v255 == v249) {
          break;
        }
        if ((void *)v255 >= v296[1]) {
          v255 %= (unint64_t)v296[1];
        }
        if (v255 != v251) {
          goto LABEL_619;
        }
LABEL_614:
        float v253 = (uint64_t **)*v253;
        if (!v253) {
          goto LABEL_619;
        }
      }
      if (*((unsigned __int16 *)v253 + 8) != v249) {
        goto LABEL_614;
      }
LABEL_627:
      if (!*((unsigned char *)std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>((uint64_t)v296, v249, v247)+ 18))
      {
        float v257 = *(unsigned __int16 **)buf;
        float v256 = *(unsigned __int16 **)&buf[8];
        if (*(void *)buf != *(void *)&buf[8])
        {
          while (*v257 < *(unsigned __int16 *)v247)
          {
            ++v257;
            float32x4_t v248 = (void **)buf;
            if (v257 == *(unsigned __int16 **)&buf[8]) {
              goto LABEL_597;
            }
          }
        }
        if (v257 != *(unsigned __int16 **)&buf[8])
        {
          if (*(unsigned __int16 *)v247 == *v257) {
            goto LABEL_598;
          }
LABEL_625:
          float32x4_t v248 = (void **)buf;
          goto LABEL_626;
        }
        goto LABEL_596;
      }
      if (*((unsigned char *)std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>((uint64_t)v296, *(_WORD *)v247, v247)+ 18) == 1)
      {
        float v257 = (unsigned __int16 *)__p[0];
        float v256 = (unsigned __int16 *)__p[1];
        if (__p[0] != __p[1])
        {
          while (*v257 < *(unsigned __int16 *)v247)
          {
            ++v257;
            float32x4_t v248 = __p;
            if (v257 == __p[1]) {
              goto LABEL_597;
            }
          }
        }
        if (v257 == __p[1])
        {
          float32x4_t v248 = __p;
          goto LABEL_597;
        }
        if (*(unsigned __int16 *)v247 != *v257)
        {
          float32x4_t v248 = __p;
LABEL_626:
          float v256 = v257;
LABEL_597:
          std::vector<md::TileSelectionTileSetType>::insert(v248, v256, v247);
        }
      }
LABEL_598:
      v247 += 2;
      if (v247 == &v246[2 * (v245 >> 1)]) {
        goto LABEL_645;
      }
    }
  }
  int32x4_t v246 = 0;
LABEL_645:
  float v258 = (int8x8_t *)*((void *)v283 + 140);
  int8x8_t v259 = v258[2];
  if (v259)
  {
    uint8x8_t v260 = (uint8x8_t)vcnt_s8(v259);
    v260.i16[0] = vaddlv_u8(v260);
    if (v260.u32[0] > 1uLL)
    {
      unint64_t v261 = 0xAF46DE79C836B0D8;
      if (*(void *)&v259 <= 0xAF46DE79C836B0D8) {
        unint64_t v261 = 0xAF46DE79C836B0D8 % *(void *)&v259;
      }
    }
    else
    {
      unint64_t v261 = (*(void *)&v259 - 1) & 0xAF46DE79C836B0D8;
    }
    uint64_t v262 = *(void **)(*(void *)&v258[1] + 8 * v261);
    if (v262)
    {
      std::__shared_count v263 = (void *)*v262;
      if (v263)
      {
        if (v260.u32[0] < 2uLL)
        {
          uint64_t v264 = *(void *)&v259 - 1;
          while (1)
          {
            uint64_t v266 = v263[1];
            if (v266 == 0xAF46DE79C836B0D8)
            {
              if (v263[2] == 0xAF46DE79C836B0D8) {
                goto LABEL_681;
              }
            }
            else if ((v266 & v264) != v261)
            {
              goto LABEL_683;
            }
            std::__shared_count v263 = (void *)*v263;
            if (!v263) {
              goto LABEL_683;
            }
          }
        }
        do
        {
          unint64_t v265 = v263[1];
          if (v265 == 0xAF46DE79C836B0D8)
          {
            if (v263[2] == 0xAF46DE79C836B0D8)
            {
LABEL_681:
              uint64_t v267 = v263[5];
              if (v267)
              {
                uint64_t v268 = *(void *)(v267 + 256);
                long long v269 = *(_OWORD *)(v267 + 240);
                *(_OWORD *)(v267 + 240) = *(_OWORD *)buf;
                *(void *)(v267 + 256) = *(void *)&buf[16];
                *(_OWORD *)std::string buf = v269;
                *(void *)&buf[16] = v268;
                uint64_t v270 = *(void *)(v267 + 280);
                long long v271 = *(_OWORD *)(v267 + 264);
                *(_OWORD *)(v267 + 264) = *(_OWORD *)__p;
                *(void *)(v267 + 280) = v288;
                *(_OWORD *)std::string __p = v271;
                uint64_t v288 = v270;
                md::TileSelectionLogic::configurationDidChange((md::TileSelectionLogic *)v267);
              }
              break;
            }
          }
          else
          {
            if (v265 >= *(void *)&v259) {
              v265 %= *(void *)&v259;
            }
            if (v265 != v261) {
              break;
            }
          }
          std::__shared_count v263 = (void *)*v263;
        }
        while (v263);
      }
    }
  }
LABEL_683:
  if (v246) {
    operator delete(v246);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  unint64_t v272 = v289;
  int v289 = 0;
  if (v272)
  {
    uint64_t v273 = *v272;
    if (*v272)
    {
      v272[1] = v273;
      operator delete(v273);
    }
    MEMORY[0x1A6239270](v272, 0x20C40960023A9);
  }
  uint64_t v274 = v291[0];
  if (v291[0])
  {
    do
    {
      uint64_t v275 = (void *)*v274;
      operator delete(v274);
      uint64_t v274 = v275;
    }
    while (v275);
  }
  uint64_t v276 = v290[0];
  v290[0] = 0;
  if (v276) {
    operator delete(v276);
  }
  long long v277 = v294[0];
  if (v294[0])
  {
    do
    {
      int16x8_t v278 = (void *)*v277;
      operator delete(v277);
      long long v277 = v278;
    }
    while (v278);
  }
  int16x8_t v279 = v293[0];
  v293[0] = 0;
  if (v279) {
    operator delete(v279);
  }
  long long v280 = v297[0];
  if (v297[0])
  {
    do
    {
      int16x4_t v281 = (void *)*v280;
      operator delete(v280);
      long long v280 = v281;
    }
    while (v281);
  }
  uint64_t v282 = v296[0];
  v296[0] = 0;
  if (v282) {
    operator delete(v282);
  }
}

void sub_1A19EA45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  float v37 = (void *)a15;
  if (v34)
  {
    operator delete(v34);
    float v37 = __p;
    if (!__p)
    {
LABEL_3:
      BOOL v38 = *(void **)(v35 - 160);
      if (!v38)
      {
LABEL_8:
        std::unique_ptr<std::vector<gm::LineSegment<float,2>>>::~unique_ptr[abi:nn180100](&a19);
        std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a20);
        std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a28);
        std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a34);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v38);
      goto LABEL_8;
    }
  }
  else if (!(void)a15)
  {
    goto LABEL_3;
  }
  operator delete(v37);
  BOOL v38 = *(void **)(v35 - 160);
  if (!v38) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t gdc::LayerDataSource::setNeedsUpdateFunction(uint64_t a1, void *a2)
{
  void v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::mutex *)(a1 + 376);
  std::mutex::lock((std::mutex *)(a1 + 376));
  os_signpost_id_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v14 = v13;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v13);
    }
    else
    {
      uint64_t v14 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::__function::__value_func<void ()(void)>::swap[abi:nn180100](v13, (void *)(a1 + 440));
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  std::mutex::unlock(v4);
  uint64_t v6 = *(void *)(a1 + 16);
  v11[0] = &unk_1EF57A2F8;
  v11[1] = a1;
  unint64_t v12 = v11;
  std::mutex::lock((std::mutex *)(v6 + 80));
  unint64_t v7 = (void *)(v6 + 248);
  if (v12)
  {
    if (v12 == v11)
    {
      uint64_t v14 = v13;
      (*(void (**)(void *, void *))(v11[0] + 24))(v11, v13);
    }
    else
    {
      uint64_t v14 = (void *)(*(uint64_t (**)(void))(*v12 + 16))();
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v7 != v13)
  {
    unint64_t v8 = v14;
    uint8x8_t v9 = *(void **)(v6 + 272);
    if (v14 == v13)
    {
      if (v9 == v7)
      {
        (*(void (**)(void *, void *))(v13[0] + 24))(v13, v15);
        (*(void (**)(void *))(*v14 + 32))(v14);
        uint64_t v14 = 0;
        (*(void (**)(void, void *))(**(void **)(v6 + 272) + 24))(*(void *)(v6 + 272), v13);
        (*(void (**)(void))(**(void **)(v6 + 272) + 32))(*(void *)(v6 + 272));
        *(void *)(v6 + 272) = 0;
        uint64_t v14 = v13;
        (*(void (**)(void *, uint64_t))(v15[0] + 24))(v15, v6 + 248);
        (*(void (**)(void *))(v15[0] + 32))(v15);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v13[0] + 24))(v13, v6 + 248);
        (*(void (**)(void *))(*v14 + 32))(v14);
        uint64_t v14 = *(void **)(v6 + 272);
      }
      *(void *)(v6 + 272) = v7;
    }
    else if (v9 == v7)
    {
      (*(void (**)(uint64_t, void *))(*(void *)(v6 + 248) + 24))(v6 + 248, v13);
      (*(void (**)(void))(**(void **)(v6 + 272) + 32))(*(void *)(v6 + 272));
      *(void *)(v6 + 272) = v14;
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v14 = *(void **)(v6 + 272);
      *(void *)(v6 + 272) = v8;
    }
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  std::mutex::unlock((std::mutex *)(v6 + 80));
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A2F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unsigned __int8 v3 = result;
    uint64_t v4 = (void *)result[3];
    os_signpost_id_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_2>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520E88;
  a2[1] = v2;
  return result;
}

uint64_t md::SingleGEOResourceDataRequester::downloadTileSize(md::SingleGEOResourceDataRequester *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 1) + 32))(*((void *)this + 1), *((unsigned __int16 *)this + 12));
}

void md::SceneStateManager::updateMerged(md::SceneStateManager *this)
{
  uint64_t v2 = (void **)((char *)this + 232);
  *((void *)this + 30) = *((void *)this + 29);
  unsigned __int8 v3 = (char *)*((void *)this + 23);
  uint64_t v4 = (char *)*((void *)this + 24);
  while (v3 != v4)
  {
    uint64_t v6 = (unsigned __int16 *)*((void *)this + 29);
    os_signpost_id_t v5 = (unsigned __int16 *)*((void *)this + 30);
    if (v6 != v5)
    {
      while (*v6 < *(unsigned __int16 *)v3)
      {
        if (++v6 == v5) {
          goto LABEL_2;
        }
      }
    }
    if (v6 == v5 || (os_signpost_id_t v5 = v6, *(unsigned __int16 *)v3 != *v6)) {
LABEL_2:
    }
      std::vector<md::TileSelectionTileSetType>::insert(v2, v5, v3);
    v3 += 2;
  }
  unint64_t v7 = (char *)*((void *)this + 26);
  unint64_t v8 = (char *)*((void *)this + 27);
  while (v7 != v8)
  {
    uint64_t v10 = (unsigned __int16 *)*((void *)this + 29);
    uint8x8_t v9 = (unsigned __int16 *)*((void *)this + 30);
    if (v10 != v9)
    {
      while (*v10 < *(unsigned __int16 *)v7)
      {
        if (++v10 == v9) {
          goto LABEL_13;
        }
      }
    }
    if (v10 == v9 || (uint8x8_t v9 = v10, *(unsigned __int16 *)v7 != *v10)) {
LABEL_13:
    }
      std::vector<md::TileSelectionTileSetType>::insert(v2, v9, v7);
    v7 += 2;
  }
}

void std::vector<md::TileSelectionTileSetType>::insert(void **a1, unsigned char *a2, char *a3)
{
  unsigned __int8 v3 = a3;
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 1;
  uint8x8_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)uint8x8_t v9 = *(_WORD *)a3;
      a1[1] = v9 + 2;
    }
    else
    {
      int64_t v11 = v5 - (void)(v9 + 2);
      uint64_t v12 = v11 >> 1;
      unint64_t v13 = (__int16 *)(v5 - 2);
      if (v5 < 2)
      {
        unint64_t v20 = a1[1];
      }
      else
      {
        unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
        float v15 = (char *)(v14 + v6);
        unint64_t v16 = v14 + v6 + 2;
        if (v5 > v16) {
          unint64_t v16 = (unint64_t)a1[1];
        }
        unint64_t v17 = v16 + ~v6 - v14;
        unint64_t v18 = v5 - (void)v15;
        BOOL v19 = v17 >= 0x1E && v18 > 0x1F;
        unint64_t v20 = a1[1];
        if (!v19) {
          goto LABEL_67;
        }
        uint64_t v21 = (v17 >> 1) + 1;
        unint64_t v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v13 = (__int16 *)((char *)v13 + v22);
        uint64_t v23 = (_OWORD *)(v5 + 16);
        uint64_t v24 = (long long *)(2 * v12 + 2 * v8 + v6 + 16);
        unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *uint64_t v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        unint64_t v20 = (_WORD *)(v5 + v22);
        if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_67:
          do
          {
            __int16 v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = v20;
      if ((char *)v5 != v9 + 2) {
        memmove((void *)(v5 - 2 * v12), v9, v11);
      }
      if (v9 <= v3) {
        v3 += 2 * (a1[1] > v3);
      }
      *(_WORD *)uint8x8_t v9 = *(_WORD *)v3;
    }
    return;
  }
  uint64_t v28 = v5 - v6;
  if (v28 <= -3) {
    abort();
  }
  uint64_t v30 = v28 >> 1;
  unint64_t v31 = v10 - v6;
  if (v31 <= v30 + 1) {
    unint64_t v32 = v30 + 1;
  }
  else {
    unint64_t v32 = v31;
  }
  if (v31 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v33 = v32;
  }
  if (v33)
  {
    if (v33 < 0) {
      goto LABEL_64;
    }
    unint64_t v34 = (char *)operator new(2 * v33);
  }
  else
  {
    unint64_t v34 = 0;
  }
  uint64_t v35 = &v34[2 * v8];
  int v36 = &v34[2 * v33];
  if (v8 != v33)
  {
LABEL_33:
    BOOL v38 = (char *)v6;
    goto LABEL_34;
  }
  if (v7 >= 1)
  {
    uint64_t v37 = v8 + 2;
    if (v8 >= -1) {
      uint64_t v37 = v8 + 1;
    }
    v35 -= v37 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  if ((unsigned char *)v6 == a2) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v7;
  }
  if (v48 < 0) {
LABEL_64:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v35 = (char *)operator new(2 * v48);
  int v36 = &v35[2 * v48];
  if (!v34) {
    goto LABEL_33;
  }
  operator delete(v34);
  int v36 = &v35[2 * v48];
  BOOL v38 = (char *)*a1;
LABEL_34:
  *(_WORD *)uint64_t v35 = *(_WORD *)v3;
  unint64_t v39 = v35 + 2;
  if (v38 != v9)
  {
    unint64_t v40 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    unint64_t v41 = v40 - v38 - 2;
    if (v41 < 0x1E)
    {
      uint8x8_t v43 = v9;
    }
    else if ((unint64_t)(v40 - v35) < 0x20)
    {
      uint8x8_t v43 = v9;
    }
    else
    {
      uint64_t v42 = (v41 >> 1) + 1;
      uint8x8_t v43 = &v9[-2 * (v42 & 0xFFFFFFFFFFFFFFF0)];
      uint64_t v44 = v35 - 16;
      unint64_t v45 = (long long *)(v6 + 2 * v8 - 16);
      unint64_t v46 = v42 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v47 = *v45;
        *((_OWORD *)v44 - 1) = *(v45 - 1);
        *(_OWORD *)uint64_t v44 = v47;
        v44 -= 32;
        v45 -= 2;
        v46 -= 16;
      }
      while (v46);
      v35 -= 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
      if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0)) {
        goto LABEL_56;
      }
    }
    do
    {
      __int16 v49 = *((_WORD *)v43 - 1);
      v43 -= 2;
      *((_WORD *)v35 - 1) = v49;
      v35 -= 2;
    }
    while (v43 != v38);
  }
LABEL_56:
  unint64_t v50 = (char *)a1[1];
  int64_t v51 = v50 - v9;
  if (v50 != v9)
  {
    uint8x8_t v52 = v9;
    size_t v53 = v50 - v9;
    uint64_t v54 = v36;
    memmove(v39, v52, v53);
    int v36 = v54;
    BOOL v38 = (char *)*a1;
  }
  *a1 = v35;
  a1[1] = &v39[v51];
  a1[2] = v36;
  if (v38)
  {
    operator delete(v38);
  }
}

void sub_1A19EB1D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        uint8x8_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        uint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  unint64_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  uint64_t v7 = *(void **)(a1 + 208);
  unint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *unint64_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *unint64_t v6 = 0;
  v6[1] = 0;
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        uint8x8_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        uint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::RoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  unint64_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  uint64_t v7 = *(void **)(a1 + 208);
  unint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *unint64_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *unint64_t v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(uint64_t a1)
{
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v29;
      unint64_t v5 = &v29;
      if (v29)
      {
        unint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            unint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            unint64_t v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          unint64_t v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        char *v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  int64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        unint64_t v17 = (void (***)(void))(v16 + 408 * v15);
        unint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        BOOL v19 = &v29;
        do
        {
          unint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            BOOL v19 = (uint64_t **)v20;
          }
          unint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          unint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        unint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        unint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      long long v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          __int16 v27 = v26;
          long long v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          __int16 v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A19EB6FC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::Pool<md::RoadTileDataRenderable>::disposeElements(uint64_t a1)
{
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v29;
      unint64_t v5 = &v29;
      if (v29)
      {
        unint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            unint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            unint64_t v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          unint64_t v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        char *v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  int64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        unint64_t v17 = (void (***)(void))(v16 + 408 * v15);
        unint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        BOOL v19 = &v29;
        do
        {
          unint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            BOOL v19 = (uint64_t **)v20;
          }
          unint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          unint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        unint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        unint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      long long v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          __int16 v27 = v26;
          long long v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          __int16 v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A19EB990(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::RoadRenderLayer::renderablesWillLeaveView(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v5 = *(void *)(*(void *)v2 + 384);
      uint64_t v6 = *(void *)(v5 + 720);
      if (v6) {
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 480), v6);
      }
      uint64_t v7 = *(void *)(v5 + 736);
      if (v7) {
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 480), v7);
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
}

uint64_t md::RenderLayer::setActive(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  return this;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        unint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        uint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::RasterTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  uint64_t v7 = *(void **)(a1 + 208);
  uint64_t v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *uint64_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *uint64_t v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::MapTileDataRenderable<md::RasterTileData>>::disposeElements(uint64_t a1)
{
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v29;
      uint64_t v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            uint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        char *v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  int64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        unint64_t v17 = (void (***)(void))(v16 + 400 * v15);
        unint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        BOOL v19 = &v29;
        do
        {
          unint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            BOOL v19 = (uint64_t **)v20;
          }
          unint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          unint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        unint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        unint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      long long v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          __int16 v27 = v26;
          long long v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          __int16 v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A19EBDE4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

unsigned char *md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void md::LabelLayerDataSource::didDeactivate(md::LabelLayerDataSource *this)
{
  uint64_t v1 = (_OWORD *)((char *)this + 808);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 102);
  *uint64_t v1 = 0u;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

unsigned char *md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

unsigned char *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            long long v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  long long v10 = operator new(0x18uLL);
  *long long v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((unsigned char *)v10 + 18) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_34;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *long long v10 = *v23;
LABEL_58:
    *uint64_t v23 = v10;
    goto LABEL_59;
  }
  *long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A19EC238(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::CartographicMapEngineConfiguration::configureForSettings(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t *)a2[141];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 != v7)
  {
    while (*(unsigned char *)v6 != 20)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
  }
  if (v6 == v7) {
LABEL_7:
  }
    int v8 = 0;
  else {
    int v8 = *(_DWORD *)(v6 + 8);
  }
  unint64_t v9 = (void *)a2[112];
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = *a3;
  if (*a3 != v11)
  {
    uint64_t v12 = *a3;
    while (*(unsigned char *)v12 != 2)
    {
      v12 += 16;
      if (v12 == v11) {
        goto LABEL_15;
      }
    }
  }
  if (v12 == v11 || !*(void *)(v12 + 8))
  {
LABEL_15:
    if (v10 != v11)
    {
      while (*(unsigned char *)v10 != 4)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_25;
        }
      }
    }
    if (v10 == v11 || !*(void *)(v10 + 8))
    {
LABEL_25:
      BOOL v13 = 0;
      float v14 = (uint64_t *)a3[4];
      if (v14) {
        goto LABEL_26;
      }
      goto LABEL_53;
    }
  }
  if (v8 != 5 || (GEOConfigGetBOOL() & 1) != 0)
  {
    BOOL v13 = 1;
    float v14 = (uint64_t *)a3[4];
    if (!v14) {
      goto LABEL_53;
    }
LABEL_26:
    BOOL v15 = (uint64_t **)v14;
    while (1)
    {
      unsigned int v16 = *((unsigned __int8 *)v15 + 25);
      if (v16 <= 2)
      {
        if (v16 == 2)
        {
          uint64_t v18 = v9[4];
          uint64_t v19 = v9[5];
          uint64_t v20 = v18;
          if (v18 != v19)
          {
            uint64_t v20 = v9[4];
            while (*(_WORD *)v20 != 2)
            {
              v20 += 16;
              if (v20 == v19) {
                goto LABEL_69;
              }
            }
          }
          if (v20 == v19 || (uint64_t v21 = *(void *)(v20 + 8)) == 0)
          {
LABEL_69:
            uint64_t v29 = v9[10];
            uint64_t v30 = v9[11];
            uint64_t v31 = v29;
            if (v29 != v30)
            {
              uint64_t v31 = v9[10];
              while (*(_WORD *)v31 != 2)
              {
                v31 += 16;
                if (v31 == v30) {
                  goto LABEL_78;
                }
              }
            }
            if (v31 != v30)
            {
              uint64_t v32 = *(void *)(v31 + 8);
              if (v32)
              {
                for (uint64_t i = *(void *)(v32 + 8); i != v32; uint64_t i = *(void *)(i + 8))
                  *(void *)(*(void *)(i + 128) + 152) = 1;
              }
            }
LABEL_78:
            if (v29 != v30)
            {
              while (*(_WORD *)v29 != 3)
              {
                v29 += 16;
                if (v29 == v30) {
                  goto LABEL_93;
                }
              }
            }
            if (v29 != v30)
            {
              unint64_t v34 = *(void **)(v29 + 8);
              if (v34)
              {
                std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(*(void **)(v29 + 8));
                if (v34[6])
                {
                  uint64_t v35 = (unsigned char *)v34[5];
                  if (v35)
                  {
                    do
                    {
                      if (v35[112]) {
                        v35[112] = 0;
                      }
                      unint64_t v41 = *(unsigned char **)v35;
                      uint64_t v42 = (void *)*((void *)v35 + 4);
                      if (v42 != *((void **)v35 + 6)) {
                        free(v42);
                      }
                      operator delete(v35);
                      uint64_t v35 = v41;
                    }
                    while (v41);
                  }
                  v34[5] = 0;
                  uint64_t v36 = v34[4];
                  if (v36)
                  {
                    for (uint64_t j = 0; j != v36; ++j)
                      *(void *)(v34[3] + 8 * j) = 0;
                  }
                  v34[6] = 0;
                }
                v34[8] = v34;
                v34[9] = 0;
                uint64_t v18 = v9[4];
                uint64_t v19 = v9[5];
              }
            }
LABEL_93:
            while (v18 != v19)
            {
              if (*(_WORD *)v18 == 3)
              {
                if (v18 != v19)
                {
                  uint64_t v49 = *(void *)(v18 + 8);
                  if (v49)
                  {
                    BOOL v50 = a2[150] == 1 && v13;
                    *(unsigned char *)(v49 + 785) = v50;
                  }
                }
                break;
              }
              v18 += 16;
            }
            uint64_t v38 = v9[10];
            uint64_t v39 = v9[11];
            uint64_t v40 = v38;
            if (v38 != v39)
            {
              uint64_t v40 = v9[10];
              while (*(_WORD *)v40 != 52)
              {
                v40 += 16;
                if (v40 == v39) {
                  goto LABEL_115;
                }
              }
            }
            if (v40 != v39)
            {
              uint8x8_t v43 = *(void **)(v40 + 8);
              if (v43)
              {
                std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(*(void **)(v40 + 8));
                if (v43[6])
                {
                  uint64_t v44 = (unsigned char *)v43[5];
                  if (v44)
                  {
                    do
                    {
                      if (v44[112]) {
                        v44[112] = 0;
                      }
                      long long v47 = *(unsigned char **)v44;
                      uint64_t v48 = (void *)*((void *)v44 + 4);
                      if (v48 != *((void **)v44 + 6)) {
                        free(v48);
                      }
                      operator delete(v44);
                      uint64_t v44 = v47;
                    }
                    while (v47);
                  }
                  v43[5] = 0;
                  uint64_t v45 = v43[4];
                  if (v45)
                  {
                    for (uint64_t k = 0; k != v45; ++k)
                      *(void *)(v43[3] + 8 * k) = 0;
                  }
                  v43[6] = 0;
                }
                v43[8] = v43;
                v43[9] = 0;
                uint64_t v38 = v9[10];
                uint64_t v39 = v9[11];
              }
            }
LABEL_115:
            while (v38 != v39)
            {
              if (*(_WORD *)v38 == 53)
              {
                if (v38 != v39)
                {
                  int64_t v51 = *(void **)(v38 + 8);
                  if (v51)
                  {
                    std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(*(void **)(v38 + 8));
                    if (v51[6])
                    {
                      uint8x8_t v52 = (unsigned char *)v51[5];
                      if (v52)
                      {
                        do
                        {
                          if (v52[112]) {
                            v52[112] = 0;
                          }
                          unint64_t v55 = *(unsigned char **)v52;
                          unint64_t v56 = (void *)*((void *)v52 + 4);
                          if (v56 != *((void **)v52 + 6)) {
                            free(v56);
                          }
                          operator delete(v52);
                          uint8x8_t v52 = v55;
                        }
                        while (v55);
                      }
                      v51[5] = 0;
                      uint64_t v53 = v51[4];
                      if (v53)
                      {
                        for (uint64_t m = 0; m != v53; ++m)
                          *(void *)(v51[3] + 8 * m) = 0;
                      }
                      v51[6] = 0;
                    }
                    v51[8] = v51;
                    v51[9] = 0;
                  }
                }
                return;
              }
              v38 += 16;
            }
            return;
          }
LABEL_62:
          char v27 = 1;
          goto LABEL_66;
        }
        ++v15;
      }
      BOOL v15 = (uint64_t **)*v15;
      if (!v15)
      {
        while (1)
        {
          unsigned int v17 = *((unsigned __int8 *)v14 + 25);
          if (v17 <= 4)
          {
            if (v17 == 4)
            {
              int v24 = 1;
              goto LABEL_54;
            }
            ++v14;
          }
          float v14 = (uint64_t *)*v14;
          if (!v14) {
            goto LABEL_53;
          }
        }
      }
    }
  }
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  if (*a3 != v23)
  {
    while (*(unsigned char *)v22 != 25)
    {
      v22 += 16;
      if (v22 == v23) {
        goto LABEL_51;
      }
    }
  }
  if (v22 == v23) {
LABEL_51:
  }
    uint64_t v25 = 0;
  else {
    uint64_t v25 = *(void *)(v22 + 8);
  }
  BOOL v13 = v25 == 0;
  float v14 = (uint64_t *)a3[4];
  if (v14) {
    goto LABEL_26;
  }
LABEL_53:
  int v24 = 0;
LABEL_54:
  uint64_t v18 = v9[4];
  uint64_t v19 = v9[5];
  uint64_t v26 = v18;
  if (v18 != v19)
  {
    uint64_t v26 = v9[4];
    while (*(_WORD *)v26 != 2)
    {
      v26 += 16;
      if (v26 == v19) {
        goto LABEL_63;
      }
    }
  }
  if (v26 == v19 || (uint64_t v21 = *(void *)(v26 + 8)) == 0)
  {
LABEL_63:
    if (v24) {
      goto LABEL_69;
    }
  }
  else
  {
    if (v24) {
      goto LABEL_62;
    }
    char v27 = v13 ^ (*(unsigned char *)(v21 + 752) != 0);
LABEL_66:
    *(unsigned char *)(v21 + 752) = v13;
    char v28 = !v13;
    if (a2[150] != 1) {
      char v28 = 1;
    }
    *(unsigned char *)(v21 + 801) = v28;
    if (v27) {
      goto LABEL_69;
    }
  }
}

uint64_t md::S2ResourceDataRequester::downloadTileSize(md::S2ResourceDataRequester *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 1) + 32))(*((void *)this + 1), *((unsigned __int16 *)this + 12));
}

void md::MapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(uint64_t **)(a2 + 1128);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *v4;
  if (*v4 != v6)
  {
    uint64_t v7 = *v4;
    while (*(unsigned char *)v7)
    {
      v7 += 16;
      if (v7 == v6) {
        goto LABEL_31;
      }
    }
  }
  if (v7 != v6)
  {
    if (*(void *)(v7 + 8))
    {
      int8x8_t v8 = (int8x8_t)a3[1];
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          uint64_t v10 = 6;
          if (*(void *)&v8 <= 6uLL) {
            uint64_t v10 = 6u % a3[1];
          }
        }
        else
        {
          uint64_t v10 = (v8.i8[0] - 1) & 6;
        }
        uint64_t v11 = *(uint64_t ***)(*a3 + 8 * v10);
        if (v11)
        {
          uint64_t v12 = *v11;
          if (v12)
          {
            if (v9.u32[0] < 2uLL)
            {
              uint64_t v13 = *(void *)&v8 - 1;
              while (1)
              {
                uint64_t v15 = v12[1];
                if (v15 == 6)
                {
                  if (*((_WORD *)v12 + 8) == 6) {
                    goto LABEL_29;
                  }
                }
                else if ((v15 & v13) != v10)
                {
                  goto LABEL_31;
                }
                uint64_t v12 = (uint64_t *)*v12;
                if (!v12) {
                  goto LABEL_31;
                }
              }
            }
            do
            {
              unint64_t v14 = v12[1];
              if (v14 == 6)
              {
                if (*((_WORD *)v12 + 8) == 6)
                {
LABEL_29:
                  if (*((unsigned char *)v12 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v12 + 18) = (*((unsigned __int16 *)v12 + 10) << 16) | 1;
                    uint64_t v5 = *v4;
                    uint64_t v6 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v14 >= *(void *)&v8) {
                  v14 %= *(void *)&v8;
                }
                if (v14 != v10) {
                  break;
                }
              }
              uint64_t v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
        }
      }
    }
  }
LABEL_31:
  if (v5 != v6)
  {
    uint64_t v16 = v5;
    do
    {
      if (!*(unsigned char *)v16)
      {
        if (v16 == v6) {
          break;
        }
        if (!*(void *)(v16 + 8)) {
          break;
        }
        int8x8_t v17 = (int8x8_t)a3[1];
        if (!*(void *)&v17) {
          break;
        }
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          uint64_t v19 = 26;
          if (*(void *)&v17 <= 0x1AuLL) {
            uint64_t v19 = 0x1Au % a3[1];
          }
        }
        else
        {
          uint64_t v19 = (v17.i32[0] - 1) & 0x1ALL;
        }
        uint64_t v20 = *(uint64_t ***)(*a3 + 8 * v19);
        if (!v20) {
          break;
        }
        uint64_t v21 = *v20;
        if (!v21) {
          break;
        }
        if (v18.u32[0] < 2uLL)
        {
          uint64_t v22 = *(void *)&v17 - 1;
          while (1)
          {
            uint64_t v24 = v21[1];
            if (v24 == 26)
            {
              if (*((_WORD *)v21 + 8) == 26) {
                goto LABEL_59;
              }
            }
            else if ((v24 & v22) != v19)
            {
              goto LABEL_61;
            }
            uint64_t v21 = (uint64_t *)*v21;
            if (!v21) {
              goto LABEL_61;
            }
          }
        }
        while (1)
        {
          unint64_t v23 = v21[1];
          if (v23 == 26)
          {
            if (*((_WORD *)v21 + 8) == 26)
            {
LABEL_59:
              if (*((unsigned char *)v21 + 18) == 2)
              {
                *(_DWORD *)((char *)v21 + 18) = (*((unsigned __int16 *)v21 + 10) << 16) | 1;
                uint64_t v5 = *v4;
                uint64_t v6 = v4[1];
              }
              goto LABEL_61;
            }
          }
          else
          {
            if (v23 >= *(void *)&v17) {
              v23 %= *(void *)&v17;
            }
            if (v23 != v19) {
              goto LABEL_61;
            }
          }
          uint64_t v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_61;
          }
        }
      }
      v16 += 16;
    }
    while (v16 != v6);
  }
LABEL_61:
  if (v5 == v6) {
    goto LABEL_91;
  }
  uint64_t v25 = v5;
  while (*(unsigned char *)v25 != 32)
  {
    v25 += 16;
    if (v25 == v6) {
      goto LABEL_91;
    }
  }
  if (v25 != v6)
  {
    if (*(void *)(v25 + 8))
    {
      int8x8_t v26 = (int8x8_t)a3[1];
      if (v26)
      {
        uint8x8_t v27 = (uint8x8_t)vcnt_s8(v26);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          uint64_t v28 = 64;
          if (*(void *)&v26 <= 0x40uLL) {
            uint64_t v28 = 0x40u % a3[1];
          }
        }
        else
        {
          uint64_t v28 = (v26.i8[0] - 1) & 0x40;
        }
        uint64_t v29 = *(uint64_t ***)(*a3 + 8 * v28);
        if (v29)
        {
          uint64_t v30 = *v29;
          if (v30)
          {
            if (v27.u32[0] < 2uLL)
            {
              uint64_t v31 = *(void *)&v26 - 1;
              while (1)
              {
                uint64_t v33 = v30[1];
                if (v33 == 64)
                {
                  if (*((_WORD *)v30 + 8) == 64) {
                    goto LABEL_89;
                  }
                }
                else if ((v33 & v31) != v28)
                {
                  goto LABEL_91;
                }
                uint64_t v30 = (uint64_t *)*v30;
                if (!v30) {
                  goto LABEL_91;
                }
              }
            }
            do
            {
              unint64_t v32 = v30[1];
              if (v32 == 64)
              {
                if (*((_WORD *)v30 + 8) == 64)
                {
LABEL_89:
                  if (*((unsigned char *)v30 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v30 + 18) = (*((unsigned __int16 *)v30 + 10) << 16) | 1;
                    uint64_t v5 = *v4;
                    uint64_t v6 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v32 >= *(void *)&v26) {
                  v32 %= *(void *)&v26;
                }
                if (v32 != v28) {
                  break;
                }
              }
              uint64_t v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
      }
    }
  }
LABEL_91:
  if (v5 != v6)
  {
    uint64_t v34 = v5;
    do
    {
      if (*(unsigned char *)v34 == 33)
      {
        if (v34 == v6) {
          break;
        }
        if (!*(void *)(v34 + 8)) {
          break;
        }
        int8x8_t v35 = (int8x8_t)a3[1];
        if (!*(void *)&v35) {
          break;
        }
        uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          uint64_t v37 = 73;
          if (*(void *)&v35 <= 0x49uLL) {
            uint64_t v37 = 0x49u % a3[1];
          }
        }
        else
        {
          uint64_t v37 = (v35.i32[0] - 1) & 0x49;
        }
        uint64_t v38 = *(uint64_t ***)(*a3 + 8 * v37);
        if (!v38) {
          break;
        }
        uint64_t v39 = *v38;
        if (!v39) {
          break;
        }
        if (v36.u32[0] < 2uLL)
        {
          uint64_t v40 = *(void *)&v35 - 1;
          while (1)
          {
            uint64_t v42 = v39[1];
            if (v42 == 73)
            {
              if (*((_WORD *)v39 + 8) == 73) {
                goto LABEL_119;
              }
            }
            else if ((v42 & v40) != v37)
            {
              goto LABEL_121;
            }
            uint64_t v39 = (uint64_t *)*v39;
            if (!v39) {
              goto LABEL_121;
            }
          }
        }
        while (1)
        {
          unint64_t v41 = v39[1];
          if (v41 == 73)
          {
            if (*((_WORD *)v39 + 8) == 73)
            {
LABEL_119:
              if (*((unsigned char *)v39 + 18) == 2)
              {
                *(_DWORD *)((char *)v39 + 18) = (*((unsigned __int16 *)v39 + 10) << 16) | 1;
                uint64_t v5 = *v4;
                uint64_t v6 = v4[1];
              }
              goto LABEL_121;
            }
          }
          else
          {
            if (v41 >= *(void *)&v35) {
              v41 %= *(void *)&v35;
            }
            if (v41 != v37) {
              goto LABEL_121;
            }
          }
          uint64_t v39 = (uint64_t *)*v39;
          if (!v39) {
            goto LABEL_121;
          }
        }
      }
      v34 += 16;
    }
    while (v34 != v6);
  }
LABEL_121:
  if (v5 == v6) {
    goto LABEL_153;
  }
  uint64_t v43 = v5;
  while (*(unsigned char *)v43 != 33)
  {
    v43 += 16;
    if (v43 == v6) {
      goto LABEL_153;
    }
  }
  if (v43 != v6)
  {
    if (*(void *)(v43 + 8))
    {
      int8x8_t v44 = (int8x8_t)a3[1];
      if (v44)
      {
        uint8x8_t v45 = (uint8x8_t)vcnt_s8(v44);
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          uint64_t v46 = 80;
          if (*(void *)&v44 <= 0x50uLL) {
            uint64_t v46 = 0x50u % a3[1];
          }
        }
        else
        {
          uint64_t v46 = (v44.i32[0] - 1) & 0x50;
        }
        long long v47 = *(uint64_t ***)(*a3 + 8 * v46);
        if (v47)
        {
          uint64_t v48 = *v47;
          if (v48)
          {
            if (v45.u32[0] < 2uLL)
            {
              uint64_t v49 = *(void *)&v44 - 1;
              while (1)
              {
                uint64_t v51 = v48[1];
                if (v51 == 80)
                {
                  if (*((_WORD *)v48 + 8) == 80) {
                    goto LABEL_149;
                  }
                }
                else if ((v51 & v49) != v46)
                {
                  goto LABEL_153;
                }
                uint64_t v48 = (uint64_t *)*v48;
                if (!v48) {
                  goto LABEL_153;
                }
              }
            }
            while (1)
            {
              unint64_t v50 = v48[1];
              if (v50 == 80)
              {
                if (*((_WORD *)v48 + 8) == 80)
                {
LABEL_149:
                  if (*((unsigned char *)v48 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v48 + 18) = (*((unsigned __int16 *)v48 + 10) << 16) | 1;
                    uint64_t v5 = *v4;
                    uint64_t v6 = v4[1];
                  }
                  goto LABEL_153;
                }
              }
              else
              {
                if (v50 >= *(void *)&v44) {
                  v50 %= *(void *)&v44;
                }
                if (v50 != v46) {
                  goto LABEL_153;
                }
              }
              uint64_t v48 = (uint64_t *)*v48;
              if (!v48) {
                goto LABEL_153;
              }
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_153:
    if (v5 == v6) {
      goto LABEL_154;
    }
    if (*(unsigned char *)v5 == 33) {
      break;
    }
    v5 += 16;
  }
  if (v5 != v6)
  {
    if (*(void *)(v5 + 8))
    {
      int8x8_t v58 = (int8x8_t)a3[1];
      if (v58)
      {
        uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
        v59.i16[0] = vaddlv_u8(v59);
        if (v59.u32[0] > 1uLL)
        {
          uint64_t v60 = 68;
          if (*(void *)&v58 <= 0x44uLL) {
            uint64_t v60 = 0x44u % a3[1];
          }
        }
        else
        {
          uint64_t v60 = (v58.i32[0] - 1) & 0x44;
        }
        unint64_t v66 = *(uint64_t ***)(*a3 + 8 * v60);
        if (v66)
        {
          uint64_t v67 = *v66;
          if (v67)
          {
            if (v59.u32[0] < 2uLL)
            {
              uint64_t v68 = *(void *)&v58 - 1;
              while (1)
              {
                uint64_t v70 = v67[1];
                if (v70 == 68)
                {
                  if (*((_WORD *)v67 + 8) == 68) {
                    goto LABEL_235;
                  }
                }
                else if ((v70 & v68) != v60)
                {
                  goto LABEL_154;
                }
                uint64_t v67 = (uint64_t *)*v67;
                if (!v67) {
                  goto LABEL_154;
                }
              }
            }
            do
            {
              unint64_t v69 = v67[1];
              if (v69 == 68)
              {
                if (*((_WORD *)v67 + 8) == 68)
                {
LABEL_235:
                  if (*((unsigned char *)v67 + 18) == 2) {
                    *(_DWORD *)((char *)v67 + 18) = (*((unsigned __int16 *)v67 + 10) << 16) | 1;
                  }
                  break;
                }
              }
              else
              {
                if (v69 >= *(void *)&v58) {
                  v69 %= *(void *)&v58;
                }
                if (v69 != v60) {
                  break;
                }
              }
              uint64_t v67 = (uint64_t *)*v67;
            }
            while (v67);
          }
        }
      }
    }
  }
LABEL_154:
  uint64_t v52 = *v4;
  uint64_t v53 = v4[1];
  uint64_t v54 = *v4;
  if (*v4 == v53)
  {
LABEL_159:
    if (v54 == v53) {
      goto LABEL_207;
    }
    if (!*(void *)(v54 + 8)) {
      goto LABEL_207;
    }
    int8x8_t v55 = (int8x8_t)a3[1];
    if (!*(void *)&v55) {
      goto LABEL_207;
    }
    uint8x8_t v56 = (uint8x8_t)vcnt_s8(v55);
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.u32[0] > 1uLL)
    {
      uint64_t v57 = 48;
      if (*(void *)&v55 <= 0x30uLL) {
        uint64_t v57 = 0x30u % a3[1];
      }
    }
    else
    {
      uint64_t v57 = (v55.i8[0] - 1) & 0x30;
    }
    unint64_t v61 = *(uint64_t ***)(*a3 + 8 * v57);
    if (!v61) {
      goto LABEL_207;
    }
    size_t v62 = *v61;
    if (!v62) {
      goto LABEL_207;
    }
    if (v56.u32[0] < 2uLL)
    {
      uint64_t v63 = *(void *)&v55 - 1;
      while (1)
      {
        uint64_t v65 = v62[1];
        if (v65 == 48)
        {
          if (*((_WORD *)v62 + 8) == 48) {
            goto LABEL_205;
          }
        }
        else if ((v65 & v63) != v57)
        {
          goto LABEL_207;
        }
        size_t v62 = (uint64_t *)*v62;
        if (!v62) {
          goto LABEL_207;
        }
      }
    }
    while (1)
    {
      unint64_t v64 = v62[1];
      if (v64 == 48)
      {
        if (*((_WORD *)v62 + 8) == 48)
        {
LABEL_205:
          if (*((unsigned char *)v62 + 18) == 2)
          {
            *(_DWORD *)((char *)v62 + 18) = (*((unsigned __int16 *)v62 + 10) << 16) | 1;
            uint64_t v52 = *v4;
            uint64_t v53 = v4[1];
          }
          goto LABEL_207;
        }
      }
      else
      {
        if (v64 >= *(void *)&v55) {
          v64 %= *(void *)&v55;
        }
        if (v64 != v57) {
          goto LABEL_207;
        }
      }
      size_t v62 = (uint64_t *)*v62;
      if (!v62) {
        goto LABEL_207;
      }
    }
  }
  uint64_t v54 = *v4;
  do
  {
    if (*(unsigned char *)v54 == 33) {
      goto LABEL_159;
    }
    v54 += 16;
  }
  while (v54 != v53);
LABEL_207:
  if (v52 == v53) {
    goto LABEL_241;
  }
  uint64_t v71 = v52;
  while (*(unsigned char *)v71 != 33)
  {
    v71 += 16;
    if (v71 == v53) {
      goto LABEL_241;
    }
  }
  if (v71 != v53)
  {
    if (*(void *)(v71 + 8))
    {
      int8x8_t v72 = (int8x8_t)a3[1];
      if (v72)
      {
        uint8x8_t v73 = (uint8x8_t)vcnt_s8(v72);
        v73.i16[0] = vaddlv_u8(v73);
        if (v73.u32[0] > 1uLL)
        {
          uint64_t v74 = 70;
          if (*(void *)&v72 <= 0x46uLL) {
            uint64_t v74 = 0x46u % a3[1];
          }
        }
        else
        {
          uint64_t v74 = (v72.i32[0] - 1) & 0x46;
        }
        uint64_t v75 = *(uint64_t ***)(*a3 + 8 * v74);
        if (v75)
        {
          unint64_t v76 = *v75;
          if (v76)
          {
            if (v73.u32[0] < 2uLL)
            {
              uint64_t v77 = *(void *)&v72 - 1;
              while (1)
              {
                uint64_t v79 = v76[1];
                if (v79 == 70)
                {
                  if (*((_WORD *)v76 + 8) == 70) {
                    goto LABEL_237;
                  }
                }
                else if ((v79 & v77) != v74)
                {
                  goto LABEL_241;
                }
                unint64_t v76 = (uint64_t *)*v76;
                if (!v76) {
                  goto LABEL_241;
                }
              }
            }
            while (1)
            {
              unint64_t v78 = v76[1];
              if (v78 == 70)
              {
                if (*((_WORD *)v76 + 8) == 70)
                {
LABEL_237:
                  if (*((unsigned char *)v76 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v76 + 18) = (*((unsigned __int16 *)v76 + 10) << 16) | 1;
                    uint64_t v52 = *v4;
                    uint64_t v53 = v4[1];
                  }
                  goto LABEL_241;
                }
              }
              else
              {
                if (v78 >= *(void *)&v72) {
                  v78 %= *(void *)&v72;
                }
                if (v78 != v74) {
                  goto LABEL_241;
                }
              }
              unint64_t v76 = (uint64_t *)*v76;
              if (!v76) {
                goto LABEL_241;
              }
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_241:
    if (v52 == v53) {
      goto LABEL_242;
    }
    if (*(unsigned char *)v52 == 34) {
      break;
    }
    v52 += 16;
  }
  if (v52 != v53)
  {
    if (*(void *)(v52 + 8))
    {
      int8x8_t v84 = (int8x8_t)a3[1];
      if (v84)
      {
        uint8x8_t v85 = (uint8x8_t)vcnt_s8(v84);
        v85.i16[0] = vaddlv_u8(v85);
        if (v85.u32[0] > 1uLL)
        {
          uint64_t v86 = 66;
          if (*(void *)&v84 <= 0x42uLL) {
            uint64_t v86 = 0x42u % a3[1];
          }
        }
        else
        {
          uint64_t v86 = (v84.i32[0] - 1) & 0x42;
        }
        uint64_t v103 = *(uint64_t ***)(*a3 + 8 * v86);
        if (v103)
        {
          uint64_t v104 = *v103;
          if (v104)
          {
            if (v85.u32[0] < 2uLL)
            {
              uint64_t v105 = *(void *)&v84 - 1;
              while (1)
              {
                uint64_t v107 = v104[1];
                if (v107 == 66)
                {
                  if (*((_WORD *)v104 + 8) == 66) {
                    goto LABEL_416;
                  }
                }
                else if ((v107 & v105) != v86)
                {
                  goto LABEL_242;
                }
                uint64_t v104 = (uint64_t *)*v104;
                if (!v104) {
                  goto LABEL_242;
                }
              }
            }
            do
            {
              unint64_t v106 = v104[1];
              if (v106 == 66)
              {
                if (*((_WORD *)v104 + 8) == 66)
                {
LABEL_416:
                  if (*((unsigned char *)v104 + 18) == 2) {
                    *(_DWORD *)((char *)v104 + 18) = (*((unsigned __int16 *)v104 + 10) << 16) | 1;
                  }
                  break;
                }
              }
              else
              {
                if (v106 >= *(void *)&v84) {
                  v106 %= *(void *)&v84;
                }
                if (v106 != v86) {
                  break;
                }
              }
              uint64_t v104 = (uint64_t *)*v104;
            }
            while (v104);
          }
        }
      }
    }
  }
LABEL_242:
  char v80 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v81 = v80[2];
  if (!*(void *)&v81) {
    goto LABEL_267;
  }
  uint8x8_t v82 = (uint8x8_t)vcnt_s8(v81);
  v82.i16[0] = vaddlv_u8(v82);
  if (v82.u32[0] > 1uLL)
  {
    unint64_t v83 = 0xC74495586E0C32F6;
    if (*(void *)&v81 <= 0xC74495586E0C32F6) {
      unint64_t v83 = 0xC74495586E0C32F6 % *(void *)&v81;
    }
  }
  else
  {
    unint64_t v83 = (*(void *)&v81 - 1) & 0xC74495586E0C32F6;
  }
  uint64_t v87 = *(void **)(*(void *)&v80[1] + 8 * v83);
  if (!v87 || (uint64_t v88 = (void *)*v87) == 0)
  {
LABEL_267:
    uint64_t v92 = 0;
    goto LABEL_268;
  }
  if (v82.u32[0] < 2uLL)
  {
    uint64_t v89 = *(void *)&v81 - 1;
    while (1)
    {
      uint64_t v91 = v88[1];
      if (v91 == 0xC74495586E0C32F6)
      {
        if (v88[2] == 0xC74495586E0C32F6) {
          goto LABEL_299;
        }
      }
      else if ((v91 & v89) != v83)
      {
        goto LABEL_267;
      }
      uint64_t v88 = (void *)*v88;
      if (!v88) {
        goto LABEL_267;
      }
    }
  }
  while (1)
  {
    unint64_t v90 = v88[1];
    if (v90 == 0xC74495586E0C32F6) {
      break;
    }
    if (v90 >= *(void *)&v81) {
      v90 %= *(void *)&v81;
    }
    if (v90 != v83) {
      goto LABEL_267;
    }
LABEL_257:
    uint64_t v88 = (void *)*v88;
    if (!v88) {
      goto LABEL_267;
    }
  }
  if (v88[2] != 0xC74495586E0C32F6) {
    goto LABEL_257;
  }
LABEL_299:
  uint64_t v92 = v88[5];
LABEL_268:
  uint64_t v93 = *v4;
  uint64_t v94 = v4[1];
  if (*v4 != v94)
  {
    while (*(unsigned char *)v93 != 34)
    {
      v93 += 16;
      if (v93 == v94) {
        goto LABEL_274;
      }
    }
  }
  if (v93 == v94 || !*(void *)(v93 + 8))
  {
LABEL_274:
    if (!v92 || !*(unsigned char *)(v92 + 56) || !*(unsigned char *)(v92 + 392) || fabsf(*(float *)(v92 + 356)) <= 0.0001) {
      goto LABEL_344;
    }
  }
  int8x8_t v95 = (int8x8_t)a3[1];
  if (!*(void *)&v95) {
    goto LABEL_344;
  }
  uint8x8_t v96 = (uint8x8_t)vcnt_s8(v95);
  v96.i16[0] = vaddlv_u8(v96);
  unint64_t v97 = v96.u32[0];
  if (v96.u32[0] > 1uLL)
  {
    uint64_t v98 = 65;
    if (*(void *)&v95 <= 0x41uLL) {
      uint64_t v98 = 0x41u % a3[1];
    }
  }
  else
  {
    uint64_t v98 = (v95.i32[0] - 1) & 0x41;
  }
  uint64_t v99 = *(uint64_t ***)(*a3 + 8 * v98);
  if (!v99) {
    goto LABEL_322;
  }
  uint64_t v100 = *v99;
  if (!v100) {
    goto LABEL_322;
  }
  if (v96.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v102 = v100[1];
      if (v102 == 65)
      {
        if (*((_WORD *)v100 + 8) == 65) {
          goto LABEL_318;
        }
      }
      else if ((v102 & (*(void *)&v95 - 1)) != v98)
      {
        goto LABEL_320;
      }
      uint64_t v100 = (uint64_t *)*v100;
      if (!v100) {
        goto LABEL_320;
      }
    }
  }
  while (2)
  {
    unint64_t v101 = v100[1];
    if (v101 != 65)
    {
      if (v101 >= *(void *)&v95) {
        v101 %= *(void *)&v95;
      }
      if (v101 != v98) {
        goto LABEL_320;
      }
      goto LABEL_288;
    }
    if (*((_WORD *)v100 + 8) != 65)
    {
LABEL_288:
      uint64_t v100 = (uint64_t *)*v100;
      if (!v100) {
        goto LABEL_320;
      }
      continue;
    }
    break;
  }
LABEL_318:
  if (*((unsigned char *)v100 + 18) == 2)
  {
    *(_DWORD *)((char *)v100 + 18) = (*((unsigned __int16 *)v100 + 10) << 16) | 1;
    int8x8_t v95 = (int8x8_t)a3[1];
  }
LABEL_320:
  if (!*(void *)&v95) {
    goto LABEL_344;
  }
  uint8x8_t v108 = (uint8x8_t)vcnt_s8(v95);
  v108.i16[0] = vaddlv_u8(v108);
  unint64_t v97 = v108.u32[0];
LABEL_322:
  if (v97 > 1)
  {
    uint64_t v109 = 47;
    if (*(void *)&v95 <= 0x2FuLL) {
      uint64_t v109 = 0x2Fu % v95.u8[0];
    }
  }
  else
  {
    uint64_t v109 = (v95.i32[0] - 1) & 0x2FLL;
  }
  std::string v110 = *(uint64_t ***)(*a3 + 8 * v109);
  if (v110)
  {
    uint64_t v111 = *v110;
    if (v111)
    {
      if (v97 < 2)
      {
        uint64_t v112 = *(void *)&v95 - 1;
        while (1)
        {
          uint64_t v114 = v111[1];
          if (v114 == 47)
          {
            if (*((_WORD *)v111 + 8) == 47) {
              goto LABEL_342;
            }
          }
          else if ((v114 & v112) != v109)
          {
            goto LABEL_344;
          }
          uint64_t v111 = (uint64_t *)*v111;
          if (!v111) {
            goto LABEL_344;
          }
        }
      }
      do
      {
        unint64_t v113 = v111[1];
        if (v113 == 47)
        {
          if (*((_WORD *)v111 + 8) == 47)
          {
LABEL_342:
            if (*((unsigned char *)v111 + 18) == 2) {
              *(_DWORD *)((char *)v111 + 18) = (*((unsigned __int16 *)v111 + 10) << 16) | 1;
            }
            break;
          }
        }
        else
        {
          if (v113 >= *(void *)&v95) {
            v113 %= *(void *)&v95;
          }
          if (v113 != v109) {
            break;
          }
        }
        uint64_t v111 = (uint64_t *)*v111;
      }
      while (v111);
    }
  }
LABEL_344:
  uint64_t v115 = *v4;
  uint64_t v116 = v4[1];
  uint64_t v117 = *v4;
  if (*v4 != v116)
  {
    uint64_t v117 = *v4;
    while (*(unsigned char *)v117 != 13)
    {
      v117 += 16;
      if (v117 == v116) {
        goto LABEL_352;
      }
    }
  }
  if (v117 != v116 && *(void *)(v117 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x36u);
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0xEu);
    goto LABEL_444;
  }
LABEL_352:
  uint64_t v118 = *v4;
  if (v115 != v116)
  {
    uint64_t v118 = *v4;
    while (*(unsigned char *)v118 != 1)
    {
      v118 += 16;
      if (v118 == v116) {
        goto LABEL_369;
      }
    }
  }
  if (v118 == v116 || !*(void *)(v118 + 8)) {
    goto LABEL_369;
  }
  uint64_t v119 = *v4;
  if (v115 != v116)
  {
    uint64_t v119 = *v4;
    while (*(unsigned char *)v119 != 24)
    {
      v119 += 16;
      if (v119 == v116) {
        goto LABEL_369;
      }
    }
  }
  if (v119 == v116 || !*(void *)(v119 + 8))
  {
LABEL_369:
    if (v115 != v116)
    {
      while (*(unsigned char *)v115 != 1)
      {
        v115 += 16;
        if (v115 == v116) {
          goto LABEL_444;
        }
      }
    }
    if (v115 != v116)
    {
      if (*(void *)(v115 + 8))
      {
        int8x8_t v124 = (int8x8_t)a3[1];
        if (v124)
        {
          uint8x8_t v125 = (uint8x8_t)vcnt_s8(v124);
          v125.i16[0] = vaddlv_u8(v125);
          if (v125.u32[0] > 1uLL)
          {
            uint64_t v126 = 14;
            if (*(void *)&v124 <= 0xEuLL) {
              uint64_t v126 = 0xEu % a3[1];
            }
          }
          else
          {
            uint64_t v126 = (v124.i8[0] - 1) & 0xE;
          }
          uint64_t v127 = *(uint64_t ***)(*a3 + 8 * v126);
          if (v127)
          {
            unint64_t v128 = *v127;
            if (v128)
            {
              if (v125.u32[0] < 2uLL)
              {
                uint64_t v129 = *(void *)&v124 - 1;
                while (1)
                {
                  uint64_t v131 = v128[1];
                  if (v131 == 14)
                  {
                    if (*((_WORD *)v128 + 8) == 14) {
                      goto LABEL_414;
                    }
                  }
                  else if ((v131 & v129) != v126)
                  {
                    goto LABEL_444;
                  }
                  unint64_t v128 = (uint64_t *)*v128;
                  if (!v128) {
                    goto LABEL_444;
                  }
                }
              }
              while (1)
              {
                unint64_t v130 = v128[1];
                if (v130 == 14)
                {
                  if (*((_WORD *)v128 + 8) == 14)
                  {
LABEL_414:
                    if (*((unsigned char *)v128 + 18) == 2) {
                      *(_DWORD *)((char *)v128 + 18) = (*((unsigned __int16 *)v128 + 10) << 16) | 1;
                    }
                    goto LABEL_444;
                  }
                }
                else
                {
                  if (v130 >= *(void *)&v124) {
                    v130 %= *(void *)&v124;
                  }
                  if (v130 != v126) {
                    goto LABEL_444;
                  }
                }
                unint64_t v128 = (uint64_t *)*v128;
                if (!v128) {
                  goto LABEL_444;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_444;
  }
  int8x8_t v120 = (int8x8_t)a3[1];
  if (!*(void *)&v120) {
    goto LABEL_444;
  }
  uint8x8_t v121 = (uint8x8_t)vcnt_s8(v120);
  v121.i16[0] = vaddlv_u8(v121);
  unint64_t v122 = v121.u32[0];
  if (v121.u32[0] > 1uLL)
  {
    uint64_t v123 = 54;
    if (*(void *)&v120 <= 0x36uLL) {
      uint64_t v123 = 0x36u % a3[1];
    }
  }
  else
  {
    uint64_t v123 = (v120.i32[0] - 1) & 0x36;
  }
  uint8x8_t v132 = *(uint64_t ***)(*a3 + 8 * v123);
  if (!v132) {
    goto LABEL_422;
  }
  uint64_t v133 = *v132;
  if (!v133) {
    goto LABEL_422;
  }
  if (v121.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v135 = v133[1];
      if (v135 == 54)
      {
        if (*((_WORD *)v133 + 8) == 54) {
          goto LABEL_418;
        }
      }
      else if ((v135 & (*(void *)&v120 - 1)) != v123)
      {
        goto LABEL_420;
      }
      uint64_t v133 = (uint64_t *)*v133;
      if (!v133) {
        goto LABEL_420;
      }
    }
  }
  while (2)
  {
    unint64_t v134 = v133[1];
    if (v134 != 54)
    {
      if (v134 >= *(void *)&v120) {
        v134 %= *(void *)&v120;
      }
      if (v134 != v123) {
        goto LABEL_420;
      }
      goto LABEL_403;
    }
    if (*((_WORD *)v133 + 8) != 54)
    {
LABEL_403:
      uint64_t v133 = (uint64_t *)*v133;
      if (!v133) {
        goto LABEL_420;
      }
      continue;
    }
    break;
  }
LABEL_418:
  if (*((unsigned char *)v133 + 18) == 2)
  {
    *(_DWORD *)((char *)v133 + 18) = (*((unsigned __int16 *)v133 + 10) << 16) | 1;
    int8x8_t v120 = (int8x8_t)a3[1];
  }
LABEL_420:
  if (!*(void *)&v120) {
    goto LABEL_444;
  }
  uint8x8_t v136 = (uint8x8_t)vcnt_s8(v120);
  v136.i16[0] = vaddlv_u8(v136);
  unint64_t v122 = v136.u32[0];
LABEL_422:
  if (v122 > 1)
  {
    uint64_t v137 = 60;
    if (*(void *)&v120 <= 0x3CuLL) {
      uint64_t v137 = 0x3Cu % v120.u8[0];
    }
  }
  else
  {
    uint64_t v137 = (v120.i8[0] - 1) & 0x3C;
  }
  unint64_t v138 = *(uint64_t ***)(*a3 + 8 * v137);
  if (v138)
  {
    uint64_t v139 = *v138;
    if (v139)
    {
      if (v122 < 2)
      {
        uint64_t v140 = *(void *)&v120 - 1;
        while (1)
        {
          uint64_t v142 = v139[1];
          if (v142 == 60)
          {
            if (*((_WORD *)v139 + 8) == 60) {
              goto LABEL_442;
            }
          }
          else if ((v142 & v140) != v137)
          {
            goto LABEL_444;
          }
          uint64_t v139 = (uint64_t *)*v139;
          if (!v139) {
            goto LABEL_444;
          }
        }
      }
      do
      {
        unint64_t v141 = v139[1];
        if (v141 == 60)
        {
          if (*((_WORD *)v139 + 8) == 60)
          {
LABEL_442:
            if (*((unsigned char *)v139 + 18) == 2) {
              *(_DWORD *)((char *)v139 + 18) = (*((unsigned __int16 *)v139 + 10) << 16) | 1;
            }
            break;
          }
        }
        else
        {
          if (v141 >= *(void *)&v120) {
            v141 %= *(void *)&v120;
          }
          if (v141 != v137) {
            break;
          }
        }
        uint64_t v139 = (uint64_t *)*v139;
      }
      while (v139);
    }
  }
LABEL_444:
  uint64_t v143 = *v4;
  uint64_t v144 = v4[1];
  uint64_t v145 = *v4;
  if (*v4 != v144)
  {
    uint64_t v145 = *v4;
    while (*(unsigned char *)v145 != 25)
    {
      v145 += 16;
      if (v145 == v144) {
        goto LABEL_461;
      }
    }
  }
  if (v145 == v144 || !*(void *)(v145 + 8)) {
    goto LABEL_461;
  }
  uint64_t v146 = *v4;
  if (v143 != v144)
  {
    uint64_t v146 = *v4;
    while (*(unsigned char *)v146 != 28)
    {
      v146 += 16;
      if (v146 == v144) {
        goto LABEL_461;
      }
    }
  }
  if (v146 == v144 || !*(void *)(v146 + 8))
  {
LABEL_461:
    int8x8_t v150 = (int8x8_t)a3[1];
    if (v150)
    {
      uint8x8_t v151 = (uint8x8_t)vcnt_s8(v150);
      v151.i16[0] = vaddlv_u8(v151);
      if (v151.u32[0] > 1uLL)
      {
        uint64_t v152 = 20;
        if (*(void *)&v150 <= 0x14uLL) {
          uint64_t v152 = 0x14u % a3[1];
        }
      }
      else
      {
        uint64_t v152 = (v150.i32[0] - 1) & 0x14;
      }
      unint64_t v153 = *(uint64_t ***)(*a3 + 8 * v152);
      if (v153)
      {
        unint64_t v154 = *v153;
        if (v154)
        {
          if (v151.u32[0] < 2uLL)
          {
            uint64_t v155 = *(void *)&v150 - 1;
            while (1)
            {
              uint64_t v157 = v154[1];
              if (v157 == 20)
              {
                if (*((_WORD *)v154 + 8) == 20) {
                  goto LABEL_529;
                }
              }
              else if ((v157 & v155) != v152)
              {
                goto LABEL_531;
              }
              unint64_t v154 = (uint64_t *)*v154;
              if (!v154) {
                goto LABEL_531;
              }
            }
          }
          while (1)
          {
            unint64_t v156 = v154[1];
            if (v156 == 20)
            {
              if (*((_WORD *)v154 + 8) == 20) {
                goto LABEL_529;
              }
            }
            else
            {
              if (v156 >= *(void *)&v150) {
                v156 %= *(void *)&v150;
              }
              if (v156 != v152) {
                goto LABEL_531;
              }
            }
            unint64_t v154 = (uint64_t *)*v154;
            if (!v154) {
              goto LABEL_531;
            }
          }
        }
      }
    }
    goto LABEL_531;
  }
  int8x8_t v147 = (int8x8_t)a3[1];
  if (!*(void *)&v147) {
    goto LABEL_504;
  }
  uint8x8_t v148 = (uint8x8_t)vcnt_s8(v147);
  v148.i16[0] = vaddlv_u8(v148);
  if (v148.u32[0] > 1uLL)
  {
    uint64_t v149 = 24;
    if (*(void *)&v147 <= 0x18uLL) {
      uint64_t v149 = 0x18u % a3[1];
    }
  }
  else
  {
    uint64_t v149 = (v147.i8[0] - 1) & 0x18;
  }
  unint64_t v158 = *(uint64_t ***)(*a3 + 8 * v149);
  if (!v158) {
    goto LABEL_504;
  }
  uint64_t v159 = *v158;
  if (!v159) {
    goto LABEL_504;
  }
  if (v148.u32[0] < 2uLL)
  {
    uint64_t v160 = *(void *)&v147 - 1;
    while (1)
    {
      uint64_t v162 = v159[1];
      if (v162 == 24)
      {
        if (*((_WORD *)v159 + 8) == 24) {
          goto LABEL_500;
        }
      }
      else if ((v162 & v160) != v149)
      {
        goto LABEL_504;
      }
      uint64_t v159 = (uint64_t *)*v159;
      if (!v159) {
        goto LABEL_504;
      }
    }
  }
  while (2)
  {
    unint64_t v161 = v159[1];
    if (v161 != 24)
    {
      if (v161 >= *(void *)&v147) {
        v161 %= *(void *)&v147;
      }
      if (v161 != v149) {
        goto LABEL_504;
      }
      goto LABEL_489;
    }
    if (*((_WORD *)v159 + 8) != 24)
    {
LABEL_489:
      uint64_t v159 = (uint64_t *)*v159;
      if (!v159) {
        goto LABEL_504;
      }
      continue;
    }
    break;
  }
LABEL_500:
  if (*((unsigned char *)v159 + 18) == 2)
  {
    *(_DWORD *)((char *)v159 + 18) = (*((unsigned __int16 *)v159 + 10) << 16) | 1;
    uint64_t v143 = *v4;
    uint64_t v144 = v4[1];
  }
  while (1)
  {
LABEL_504:
    if (v143 == v144) {
      goto LABEL_531;
    }
    if (*(unsigned char *)v143 == 39) {
      break;
    }
    v143 += 16;
  }
  if (v143 != v144)
  {
    if (*(void *)(v143 + 8))
    {
      int8x8_t v163 = (int8x8_t)a3[1];
      if (v163)
      {
        uint8x8_t v164 = (uint8x8_t)vcnt_s8(v163);
        v164.i16[0] = vaddlv_u8(v164);
        if (v164.u32[0] > 1uLL)
        {
          uint64_t v165 = 74;
          if (*(void *)&v163 <= 0x4AuLL) {
            uint64_t v165 = 0x4Au % a3[1];
          }
        }
        else
        {
          uint64_t v165 = (v163.i32[0] - 1) & 0x4ALL;
        }
        float v166 = *(uint64_t ***)(*a3 + 8 * v165);
        if (v166)
        {
          unint64_t v154 = *v166;
          if (v154)
          {
            if (v164.u32[0] < 2uLL)
            {
              uint64_t v167 = *(void *)&v163 - 1;
              while (1)
              {
                uint64_t v169 = v154[1];
                if (v169 == 74)
                {
                  if (*((_WORD *)v154 + 8) == 74) {
                    goto LABEL_529;
                  }
                }
                else if ((v169 & v167) != v165)
                {
                  goto LABEL_531;
                }
                unint64_t v154 = (uint64_t *)*v154;
                if (!v154) {
                  goto LABEL_531;
                }
              }
            }
            do
            {
              unint64_t v168 = v154[1];
              if (v168 == 74)
              {
                if (*((_WORD *)v154 + 8) == 74)
                {
LABEL_529:
                  if (*((unsigned char *)v154 + 18) == 2) {
                    *(_DWORD *)((char *)v154 + 18) = (*((unsigned __int16 *)v154 + 10) << 16) | 1;
                  }
                  break;
                }
              }
              else
              {
                if (v168 >= *(void *)&v163) {
                  v168 %= *(void *)&v163;
                }
                if (v168 != v165) {
                  break;
                }
              }
              unint64_t v154 = (uint64_t *)*v154;
            }
            while (v154);
          }
        }
      }
    }
  }
LABEL_531:
  uint64_t v170 = *v4;
  uint64_t v171 = v4[1];
  uint64_t v172 = *v4;
  if (*v4 != v171)
  {
    uint64_t v172 = *v4;
    while (*(unsigned char *)v172 != 2)
    {
      v172 += 16;
      if (v172 == v171) {
        goto LABEL_538;
      }
    }
  }
  if (v172 == v171 || !*(void *)(v172 + 8))
  {
LABEL_538:
    if (v170 != v171)
    {
      while (*(unsigned char *)v170 != 4)
      {
        v170 += 16;
        if (v170 == v171) {
          goto LABEL_615;
        }
      }
    }
    if (v170 == v171 || !*(void *)(v170 + 8)) {
      goto LABEL_615;
    }
  }
  int8x8_t v173 = (int8x8_t)a3[1];
  if (!*(void *)&v173) {
    goto LABEL_615;
  }
  uint8x8_t v174 = (uint8x8_t)vcnt_s8(v173);
  v174.i16[0] = vaddlv_u8(v174);
  unint64_t v175 = v174.u32[0];
  if (v174.u32[0] > 1uLL)
  {
    uint64_t v176 = 3;
    if (*(void *)&v173 <= 3uLL) {
      uint64_t v176 = 3u % a3[1];
    }
  }
  else
  {
    uint64_t v176 = (v173.i8[0] - 1) & 3;
  }
  int64x2_t v177 = *(uint64_t ***)(*a3 + 8 * v176);
  if (!v177) {
    goto LABEL_569;
  }
  uint64_t v178 = *v177;
  if (!v178) {
    goto LABEL_569;
  }
  if (v174.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v180 = v178[1];
      if (v180 == 3)
      {
        if (*((_WORD *)v178 + 8) == 3) {
          goto LABEL_565;
        }
      }
      else if ((v180 & (*(void *)&v173 - 1)) != v176)
      {
        goto LABEL_567;
      }
      uint64_t v178 = (uint64_t *)*v178;
      if (!v178) {
        goto LABEL_567;
      }
    }
  }
  while (2)
  {
    unint64_t v179 = v178[1];
    if (v179 != 3)
    {
      if (v179 >= *(void *)&v173) {
        v179 %= *(void *)&v173;
      }
      if (v179 != v176) {
        goto LABEL_567;
      }
      goto LABEL_554;
    }
    if (*((_WORD *)v178 + 8) != 3)
    {
LABEL_554:
      uint64_t v178 = (uint64_t *)*v178;
      if (!v178) {
        goto LABEL_567;
      }
      continue;
    }
    break;
  }
LABEL_565:
  if (*((unsigned char *)v178 + 18) == 2)
  {
    *(_DWORD *)((char *)v178 + 18) = (*((unsigned __int16 *)v178 + 10) << 16) | 1;
    int8x8_t v173 = (int8x8_t)a3[1];
  }
LABEL_567:
  if (!*(void *)&v173) {
    goto LABEL_615;
  }
  uint8x8_t v181 = (uint8x8_t)vcnt_s8(v173);
  v181.i16[0] = vaddlv_u8(v181);
  unint64_t v175 = v181.u32[0];
LABEL_569:
  if (v175 > 1)
  {
    uint64_t v182 = 52;
    if (*(void *)&v173 <= 0x34uLL) {
      uint64_t v182 = 0x34u % v173.u8[0];
    }
  }
  else
  {
    uint64_t v182 = (v173.i32[0] - 1) & 0x34;
  }
  uint8x8_t v183 = *(uint64_t ***)(*a3 + 8 * v182);
  if (!v183) {
    goto LABEL_593;
  }
  unint64_t v184 = *v183;
  if (!v184) {
    goto LABEL_593;
  }
  if (v175 < 2)
  {
    while (1)
    {
      uint64_t v186 = v184[1];
      if (v186 == 52)
      {
        if (*((_WORD *)v184 + 8) == 52) {
          goto LABEL_589;
        }
      }
      else if ((v186 & (*(void *)&v173 - 1)) != v182)
      {
        goto LABEL_591;
      }
      unint64_t v184 = (uint64_t *)*v184;
      if (!v184) {
        goto LABEL_591;
      }
    }
  }
  while (2)
  {
    unint64_t v185 = v184[1];
    if (v185 != 52)
    {
      if (v185 >= *(void *)&v173) {
        v185 %= *(void *)&v173;
      }
      if (v185 != v182) {
        goto LABEL_591;
      }
      goto LABEL_578;
    }
    if (*((_WORD *)v184 + 8) != 52)
    {
LABEL_578:
      unint64_t v184 = (uint64_t *)*v184;
      if (!v184) {
        goto LABEL_591;
      }
      continue;
    }
    break;
  }
LABEL_589:
  if (*((unsigned char *)v184 + 18) == 2)
  {
    *(_DWORD *)((char *)v184 + 18) = (*((unsigned __int16 *)v184 + 10) << 16) | 1;
    int8x8_t v173 = (int8x8_t)a3[1];
  }
LABEL_591:
  if (!*(void *)&v173) {
    goto LABEL_615;
  }
  uint8x8_t v187 = (uint8x8_t)vcnt_s8(v173);
  v187.i16[0] = vaddlv_u8(v187);
  unint64_t v175 = v187.u32[0];
LABEL_593:
  if (v175 > 1)
  {
    uint64_t v188 = 53;
    if (*(void *)&v173 <= 0x35uLL) {
      uint64_t v188 = 0x35u % v173.u8[0];
    }
  }
  else
  {
    uint64_t v188 = (v173.i32[0] - 1) & 0x35;
  }
  long double v189 = *(uint64_t ***)(*a3 + 8 * v188);
  if (v189)
  {
    double v190 = *v189;
    if (v190)
    {
      if (v175 < 2)
      {
        uint64_t v191 = *(void *)&v173 - 1;
        while (1)
        {
          uint64_t v193 = v190[1];
          if (v193 == 53)
          {
            if (*((_WORD *)v190 + 8) == 53) {
              goto LABEL_613;
            }
          }
          else if ((v193 & v191) != v188)
          {
            goto LABEL_615;
          }
          double v190 = (uint64_t *)*v190;
          if (!v190) {
            goto LABEL_615;
          }
        }
      }
      do
      {
        unint64_t v192 = v190[1];
        if (v192 == 53)
        {
          if (*((_WORD *)v190 + 8) == 53)
          {
LABEL_613:
            if (*((unsigned char *)v190 + 18) == 2) {
              *(_DWORD *)((char *)v190 + 18) = (*((unsigned __int16 *)v190 + 10) << 16) | 1;
            }
            break;
          }
        }
        else
        {
          if (v192 >= *(void *)&v173) {
            v192 %= *(void *)&v173;
          }
          if (v192 != v188) {
            break;
          }
        }
        double v190 = (uint64_t *)*v190;
      }
      while (v190);
    }
  }
LABEL_615:
  uint64_t v194 = *v4;
  uint64_t v195 = v4[1];
  uint64_t v196 = *v4;
  if (*v4 != v195)
  {
    uint64_t v196 = *v4;
    while (*(unsigned char *)v196 != 36)
    {
      v196 += 16;
      if (v196 == v195) {
        goto LABEL_645;
      }
    }
  }
  if (v196 != v195)
  {
    if (*(void *)(v196 + 8))
    {
      int8x8_t v197 = (int8x8_t)a3[1];
      if (v197)
      {
        uint8x8_t v198 = (uint8x8_t)vcnt_s8(v197);
        v198.i16[0] = vaddlv_u8(v198);
        if (v198.u32[0] > 1uLL)
        {
          uint64_t v199 = 69;
          if (*(void *)&v197 <= 0x45uLL) {
            uint64_t v199 = 0x45u % a3[1];
          }
        }
        else
        {
          uint64_t v199 = (v197.i32[0] - 1) & 0x45;
        }
        double v200 = *(uint64_t ***)(*a3 + 8 * v199);
        if (v200)
        {
          uint64_t v201 = *v200;
          if (v201)
          {
            if (v198.u32[0] < 2uLL)
            {
              uint64_t v202 = *(void *)&v197 - 1;
              while (1)
              {
                uint64_t v204 = v201[1];
                if (v204 == 69)
                {
                  if (*((_WORD *)v201 + 8) == 69) {
                    goto LABEL_643;
                  }
                }
                else if ((v204 & v202) != v199)
                {
                  goto LABEL_645;
                }
                uint64_t v201 = (uint64_t *)*v201;
                if (!v201) {
                  goto LABEL_645;
                }
              }
            }
            do
            {
              unint64_t v203 = v201[1];
              if (v203 == 69)
              {
                if (*((_WORD *)v201 + 8) == 69)
                {
LABEL_643:
                  if (*((unsigned char *)v201 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v201 + 18) = (*((unsigned __int16 *)v201 + 10) << 16) | 1;
                    uint64_t v194 = *v4;
                    uint64_t v195 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v203 >= *(void *)&v197) {
                  v203 %= *(void *)&v197;
                }
                if (v203 != v199) {
                  break;
                }
              }
              uint64_t v201 = (uint64_t *)*v201;
            }
            while (v201);
          }
        }
      }
    }
  }
LABEL_645:
  if (v194 != v195)
  {
    uint64_t v205 = v194;
    do
    {
      if (*(unsigned char *)v205 == 5)
      {
        if (v205 == v195) {
          break;
        }
        if (!*(void *)(v205 + 8)) {
          break;
        }
        int8x8_t v206 = (int8x8_t)a3[1];
        if (!*(void *)&v206) {
          break;
        }
        uint8x8_t v207 = (uint8x8_t)vcnt_s8(v206);
        v207.i16[0] = vaddlv_u8(v207);
        if (v207.u32[0] > 1uLL)
        {
          uint64_t v208 = 11;
          if (*(void *)&v206 <= 0xBuLL) {
            uint64_t v208 = 0xBu % a3[1];
          }
        }
        else
        {
          uint64_t v208 = (v206.i32[0] - 1) & 0xBLL;
        }
        uint64_t v209 = *(uint64_t ***)(*a3 + 8 * v208);
        if (!v209) {
          break;
        }
        unint64_t v210 = *v209;
        if (!v210) {
          break;
        }
        if (v207.u32[0] < 2uLL)
        {
          uint64_t v211 = *(void *)&v206 - 1;
          while (1)
          {
            uint64_t v213 = v210[1];
            if (v213 == 11)
            {
              if (*((_WORD *)v210 + 8) == 11) {
                goto LABEL_673;
              }
            }
            else if ((v213 & v211) != v208)
            {
              goto LABEL_675;
            }
            unint64_t v210 = (uint64_t *)*v210;
            if (!v210) {
              goto LABEL_675;
            }
          }
        }
        while (1)
        {
          unint64_t v212 = v210[1];
          if (v212 == 11)
          {
            if (*((_WORD *)v210 + 8) == 11)
            {
LABEL_673:
              if (*((unsigned char *)v210 + 18) == 2)
              {
                *(_DWORD *)((char *)v210 + 18) = (*((unsigned __int16 *)v210 + 10) << 16) | 1;
                uint64_t v194 = *v4;
                uint64_t v195 = v4[1];
              }
              goto LABEL_675;
            }
          }
          else
          {
            if (v212 >= *(void *)&v206) {
              v212 %= *(void *)&v206;
            }
            if (v212 != v208) {
              goto LABEL_675;
            }
          }
          unint64_t v210 = (uint64_t *)*v210;
          if (!v210) {
            goto LABEL_675;
          }
        }
      }
      v205 += 16;
    }
    while (v205 != v195);
  }
LABEL_675:
  if (v194 == v195) {
    goto LABEL_705;
  }
  uint64_t v214 = v194;
  while (*(unsigned char *)v214 != 5)
  {
    v214 += 16;
    if (v214 == v195) {
      goto LABEL_705;
    }
  }
  if (v214 != v195)
  {
    if (*(void *)(v214 + 8))
    {
      int8x8_t v215 = (int8x8_t)a3[1];
      if (v215)
      {
        uint8x8_t v216 = (uint8x8_t)vcnt_s8(v215);
        v216.i16[0] = vaddlv_u8(v216);
        if (v216.u32[0] > 1uLL)
        {
          uint64_t v217 = 12;
          if (*(void *)&v215 <= 0xCuLL) {
            uint64_t v217 = 0xCu % a3[1];
          }
        }
        else
        {
          uint64_t v217 = (v215.i8[0] - 1) & 0xC;
        }
        uint64_t v218 = *(uint64_t ***)(*a3 + 8 * v217);
        if (v218)
        {
          float32x4_t v219 = *v218;
          if (v219)
          {
            if (v216.u32[0] < 2uLL)
            {
              uint64_t v220 = *(void *)&v215 - 1;
              while (1)
              {
                uint64_t v222 = v219[1];
                if (v222 == 12)
                {
                  if (*((_WORD *)v219 + 8) == 12) {
                    goto LABEL_703;
                  }
                }
                else if ((v222 & v220) != v217)
                {
                  goto LABEL_705;
                }
                float32x4_t v219 = (uint64_t *)*v219;
                if (!v219) {
                  goto LABEL_705;
                }
              }
            }
            do
            {
              unint64_t v221 = v219[1];
              if (v221 == 12)
              {
                if (*((_WORD *)v219 + 8) == 12)
                {
LABEL_703:
                  if (*((unsigned char *)v219 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v219 + 18) = (*((unsigned __int16 *)v219 + 10) << 16) | 1;
                    uint64_t v194 = *v4;
                    uint64_t v195 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v221 >= *(void *)&v215) {
                  v221 %= *(void *)&v215;
                }
                if (v221 != v217) {
                  break;
                }
              }
              float32x4_t v219 = (uint64_t *)*v219;
            }
            while (v219);
          }
        }
      }
    }
  }
LABEL_705:
  if (v194 != v195)
  {
    uint64_t v223 = v194;
    do
    {
      if (*(unsigned char *)v223 == 5)
      {
        if (v223 == v195) {
          break;
        }
        if (!*(void *)(v223 + 8)) {
          break;
        }
        int8x8_t v224 = (int8x8_t)a3[1];
        if (!*(void *)&v224) {
          break;
        }
        uint8x8_t v225 = (uint8x8_t)vcnt_s8(v224);
        v225.i16[0] = vaddlv_u8(v225);
        if (v225.u32[0] > 1uLL)
        {
          uint64_t v226 = 71;
          if (*(void *)&v224 <= 0x47uLL) {
            uint64_t v226 = 0x47u % a3[1];
          }
        }
        else
        {
          uint64_t v226 = (v224.i32[0] - 1) & 0x47;
        }
        uint64_t v227 = *(uint64_t ***)(*a3 + 8 * v226);
        if (!v227) {
          break;
        }
        unint64_t v228 = *v227;
        if (!v228) {
          break;
        }
        if (v225.u32[0] < 2uLL)
        {
          uint64_t v229 = *(void *)&v224 - 1;
          while (1)
          {
            uint64_t v231 = v228[1];
            if (v231 == 71)
            {
              if (*((_WORD *)v228 + 8) == 71) {
                goto LABEL_733;
              }
            }
            else if ((v231 & v229) != v226)
            {
              goto LABEL_735;
            }
            unint64_t v228 = (uint64_t *)*v228;
            if (!v228) {
              goto LABEL_735;
            }
          }
        }
        while (1)
        {
          unint64_t v230 = v228[1];
          if (v230 == 71)
          {
            if (*((_WORD *)v228 + 8) == 71)
            {
LABEL_733:
              if (*((unsigned char *)v228 + 18) == 2)
              {
                *(_DWORD *)((char *)v228 + 18) = (*((unsigned __int16 *)v228 + 10) << 16) | 1;
                uint64_t v194 = *v4;
                uint64_t v195 = v4[1];
              }
              goto LABEL_735;
            }
          }
          else
          {
            if (v230 >= *(void *)&v224) {
              v230 %= *(void *)&v224;
            }
            if (v230 != v226) {
              goto LABEL_735;
            }
          }
          unint64_t v228 = (uint64_t *)*v228;
          if (!v228) {
            goto LABEL_735;
          }
        }
      }
      v223 += 16;
    }
    while (v223 != v195);
  }
LABEL_735:
  if (v194 == v195) {
    goto LABEL_765;
  }
  uint64_t v232 = v194;
  while (*(unsigned char *)v232 != 5)
  {
    v232 += 16;
    if (v232 == v195) {
      goto LABEL_765;
    }
  }
  if (v232 != v195)
  {
    if (*(void *)(v232 + 8))
    {
      int8x8_t v233 = (int8x8_t)a3[1];
      if (v233)
      {
        uint8x8_t v234 = (uint8x8_t)vcnt_s8(v233);
        v234.i16[0] = vaddlv_u8(v234);
        if (v234.u32[0] > 1uLL)
        {
          uint64_t v235 = 72;
          if (*(void *)&v233 <= 0x48uLL) {
            uint64_t v235 = 0x48u % a3[1];
          }
        }
        else
        {
          uint64_t v235 = (v233.i32[0] - 1) & 0x48;
        }
        unint64_t v236 = *(uint64_t ***)(*a3 + 8 * v235);
        if (v236)
        {
          BOOL v237 = *v236;
          if (v237)
          {
            if (v234.u32[0] < 2uLL)
            {
              uint64_t v238 = *(void *)&v233 - 1;
              while (1)
              {
                uint64_t v240 = v237[1];
                if (v240 == 72)
                {
                  if (*((_WORD *)v237 + 8) == 72) {
                    goto LABEL_763;
                  }
                }
                else if ((v240 & v238) != v235)
                {
                  goto LABEL_765;
                }
                BOOL v237 = (uint64_t *)*v237;
                if (!v237) {
                  goto LABEL_765;
                }
              }
            }
            do
            {
              unint64_t v239 = v237[1];
              if (v239 == 72)
              {
                if (*((_WORD *)v237 + 8) == 72)
                {
LABEL_763:
                  if (*((unsigned char *)v237 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v237 + 18) = (*((unsigned __int16 *)v237 + 10) << 16) | 1;
                    uint64_t v194 = *v4;
                    uint64_t v195 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v239 >= *(void *)&v233) {
                  v239 %= *(void *)&v233;
                }
                if (v239 != v235) {
                  break;
                }
              }
              BOOL v237 = (uint64_t *)*v237;
            }
            while (v237);
          }
        }
      }
    }
  }
LABEL_765:
  if (v194 != v195)
  {
    uint64_t v241 = v194;
    while (*(unsigned char *)v241 != 8)
    {
      v241 += 16;
      if (v241 == v195) {
        goto LABEL_773;
      }
    }
    if (v241 != v195 && *(void *)(v241 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 2u);
      uint64_t v194 = *v4;
      uint64_t v195 = v4[1];
    }
  }
LABEL_773:
  if (v194 != v195)
  {
    uint64_t v242 = v194;
    while (*(unsigned char *)v242 != 9)
    {
      v242 += 16;
      if (v242 == v195) {
        goto LABEL_781;
      }
    }
    if (v242 != v195 && *(void *)(v242 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x12u);
      uint64_t v194 = *v4;
      uint64_t v195 = v4[1];
    }
  }
LABEL_781:
  if (v194 == v195) {
    goto LABEL_791;
  }
  uint64_t v243 = v194;
  while (*(unsigned char *)v243 != 9)
  {
    v243 += 16;
    if (v243 == v195) {
      goto LABEL_791;
    }
  }
  if (v243 != v195 && *(void *)(v243 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x16u);
    uint64_t v194 = *v4;
    uint64_t v195 = v4[1];
  }
LABEL_791:
  while (v194 != v195)
  {
    if (*(unsigned char *)v194 == 9)
    {
      if (v194 != v195 && *(void *)(v194 + 8)) {
        std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x17u);
      }
      break;
    }
    v194 += 16;
  }
  uint64_t v244 = *v4;
  uint64_t v245 = v4[1];
  uint64_t v246 = *v4;
  if (*v4 != v245)
  {
    uint64_t v246 = *v4;
    while (*(unsigned char *)v246 != 9)
    {
      v246 += 16;
      if (v246 == v245) {
        goto LABEL_800;
      }
    }
  }
  if (v246 != v245 && *(void *)(v246 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x18u);
    uint64_t v244 = *v4;
    uint64_t v245 = v4[1];
  }
LABEL_800:
  if (v244 != v245)
  {
    uint64_t v247 = v244;
    while (*(unsigned char *)v247 != 9)
    {
      v247 += 16;
      if (v247 == v245) {
        goto LABEL_811;
      }
    }
    if (v247 != v245 && *(void *)(v247 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x13u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_811:
  if (v244 != v245)
  {
    uint64_t v248 = v244;
    while (*(unsigned char *)v248 != 9)
    {
      v248 += 16;
      if (v248 == v245) {
        goto LABEL_819;
      }
    }
    if (v248 != v245 && *(void *)(v248 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x14u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_819:
  if (v244 != v245)
  {
    uint64_t v249 = v244;
    while (*(unsigned char *)v249 != 9)
    {
      v249 += 16;
      if (v249 == v245) {
        goto LABEL_827;
      }
    }
    if (v249 != v245 && *(void *)(v249 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0xDu);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_827:
  if (v244 != v245)
  {
    uint64_t v250 = v244;
    while (*(unsigned char *)v250 != 9)
    {
      v250 += 16;
      if (v250 == v245) {
        goto LABEL_835;
      }
    }
    if (v250 != v245 && *(void *)(v250 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x19u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_835:
  if (v244 != v245)
  {
    uint64_t v251 = v244;
    while (*(unsigned char *)v251 != 9)
    {
      v251 += 16;
      if (v251 == v245) {
        goto LABEL_843;
      }
    }
    if (v251 != v245 && *(void *)(v251 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x1Au);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_843:
  if (v244 != v245)
  {
    uint64_t v252 = v244;
    while (*(unsigned char *)v252 != 9)
    {
      v252 += 16;
      if (v252 == v245) {
        goto LABEL_851;
      }
    }
    if (v252 != v245 && *(void *)(v252 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x42u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_851:
  if (v244 != v245)
  {
    uint64_t v253 = v244;
    while (*(unsigned char *)v253 != 9)
    {
      v253 += 16;
      if (v253 == v245) {
        goto LABEL_859;
      }
    }
    if (v253 != v245 && *(void *)(v253 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x49u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_859:
  if (v244 != v245)
  {
    uint64_t v254 = v244;
    while (*(unsigned char *)v254 != 9)
    {
      v254 += 16;
      if (v254 == v245) {
        goto LABEL_867;
      }
    }
    if (v254 != v245 && *(void *)(v254 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x50u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_867:
  if (v244 != v245)
  {
    uint64_t v255 = v244;
    while (*(unsigned char *)v255 != 9)
    {
      v255 += 16;
      if (v255 == v245) {
        goto LABEL_875;
      }
    }
    if (v255 != v245 && *(void *)(v255 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x1Bu);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_875:
  if (v244 != v245)
  {
    uint64_t v256 = v244;
    while (*(unsigned char *)v256 != 9)
    {
      v256 += 16;
      if (v256 == v245) {
        goto LABEL_883;
      }
    }
    if (v256 != v245 && *(void *)(v256 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x4Au);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_883:
  if (v244 != v245)
  {
    uint64_t v257 = v244;
    while (*(unsigned char *)v257 != 9)
    {
      v257 += 16;
      if (v257 == v245) {
        goto LABEL_891;
      }
    }
    if (v257 != v245 && *(void *)(v257 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x25u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_891:
  if (v244 != v245)
  {
    uint64_t v258 = v244;
    while (*(unsigned char *)v258 != 9)
    {
      v258 += 16;
      if (v258 == v245) {
        goto LABEL_899;
      }
    }
    if (v258 != v245 && *(void *)(v258 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x26u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_899:
  if (v244 != v245)
  {
    uint64_t v259 = v244;
    while (*(unsigned char *)v259 != 10)
    {
      v259 += 16;
      if (v259 == v245) {
        goto LABEL_907;
      }
    }
    if (v259 != v245 && *(void *)(v259 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 1u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_907:
  if (v244 != v245)
  {
    uint64_t v260 = v244;
    while (*(unsigned char *)v260 != 14)
    {
      v260 += 16;
      if (v260 == v245) {
        goto LABEL_915;
      }
    }
    if (v260 != v245 && *(void *)(v260 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 8u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_915:
  if (v244 != v245)
  {
    uint64_t v261 = v244;
    while (*(unsigned char *)v261 != 14)
    {
      v261 += 16;
      if (v261 == v245) {
        goto LABEL_923;
      }
    }
    if (v261 != v245 && *(void *)(v261 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 9u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_923:
  if (v244 != v245)
  {
    uint64_t v262 = v244;
    while (*(unsigned char *)v262 != 14)
    {
      v262 += 16;
      if (v262 == v245) {
        goto LABEL_931;
      }
    }
    if (v262 != v245 && *(void *)(v262 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0xAu);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_931:
  if (v244 != v245)
  {
    uint64_t v263 = v244;
    while (*(unsigned char *)v263 != 14)
    {
      v263 += 16;
      if (v263 == v245) {
        goto LABEL_939;
      }
    }
    if (v263 != v245 && *(void *)(v263 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 7u);
      uint64_t v244 = *v4;
      uint64_t v245 = v4[1];
    }
  }
LABEL_939:
  if (v244 == v245) {
    goto LABEL_971;
  }
  uint64_t v264 = v244;
  while (*(unsigned char *)v264 != 18)
  {
    v264 += 16;
    if (v264 == v245) {
      goto LABEL_971;
    }
  }
  if (v264 != v245)
  {
    if (*(void *)(v264 + 8))
    {
      int8x8_t v265 = (int8x8_t)a3[1];
      if (v265)
      {
        uint8x8_t v266 = (uint8x8_t)vcnt_s8(v265);
        v266.i16[0] = vaddlv_u8(v266);
        if (v266.u32[0] > 1uLL)
        {
          uint64_t v267 = 35;
          if (*(void *)&v265 <= 0x23uLL) {
            uint64_t v267 = 0x23u % a3[1];
          }
        }
        else
        {
          uint64_t v267 = (v265.i32[0] - 1) & 0x23;
        }
        uint64_t v268 = *(uint64_t ***)(*a3 + 8 * v267);
        if (v268)
        {
          long long v269 = *v268;
          if (v269)
          {
            if (v266.u32[0] < 2uLL)
            {
              uint64_t v270 = *(void *)&v265 - 1;
              while (1)
              {
                uint64_t v272 = v269[1];
                if (v272 == 35)
                {
                  if (*((_WORD *)v269 + 8) == 35) {
                    goto LABEL_967;
                  }
                }
                else if ((v272 & v270) != v267)
                {
                  goto LABEL_971;
                }
                long long v269 = (uint64_t *)*v269;
                if (!v269) {
                  goto LABEL_971;
                }
              }
            }
            while (1)
            {
              unint64_t v271 = v269[1];
              if (v271 == 35)
              {
                if (*((_WORD *)v269 + 8) == 35)
                {
LABEL_967:
                  if (*((unsigned char *)v269 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v269 + 18) = (*((unsigned __int16 *)v269 + 10) << 16) | 1;
                    uint64_t v244 = *v4;
                    uint64_t v245 = v4[1];
                  }
                  goto LABEL_971;
                }
              }
              else
              {
                if (v271 >= *(void *)&v265) {
                  v271 %= *(void *)&v265;
                }
                if (v271 != v267) {
                  goto LABEL_971;
                }
              }
              long long v269 = (uint64_t *)*v269;
              if (!v269) {
                goto LABEL_971;
              }
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_971:
    if (v244 == v245) {
      goto LABEL_972;
    }
    if (*(unsigned char *)v244 == 19) {
      break;
    }
    v244 += 16;
  }
  if (v244 != v245)
  {
    if (*(void *)(v244 + 8))
    {
      int8x8_t v279 = (int8x8_t)a3[1];
      if (v279)
      {
        uint8x8_t v280 = (uint8x8_t)vcnt_s8(v279);
        v280.i16[0] = vaddlv_u8(v280);
        if (v280.u32[0] > 1uLL)
        {
          uint64_t v281 = 40;
          if (*(void *)&v279 <= 0x28uLL) {
            uint64_t v281 = 0x28u % a3[1];
          }
        }
        else
        {
          uint64_t v281 = (v279.i32[0] - 1) & 0x28;
        }
        v287 = *(uint64_t ***)(*a3 + 8 * v281);
        if (v287)
        {
          uint64_t v288 = *v287;
          if (v288)
          {
            if (v280.u32[0] < 2uLL)
            {
              uint64_t v289 = *(void *)&v279 - 1;
              while (1)
              {
                uint64_t v291 = v288[1];
                if (v291 == 40)
                {
                  if (*((_WORD *)v288 + 8) == 40) {
                    goto LABEL_1052;
                  }
                }
                else if ((v291 & v289) != v281)
                {
                  goto LABEL_972;
                }
                uint64_t v288 = (uint64_t *)*v288;
                if (!v288) {
                  goto LABEL_972;
                }
              }
            }
            do
            {
              unint64_t v290 = v288[1];
              if (v290 == 40)
              {
                if (*((_WORD *)v288 + 8) == 40)
                {
LABEL_1052:
                  if (*((unsigned char *)v288 + 18) == 2) {
                    *(_DWORD *)((char *)v288 + 18) = (*((unsigned __int16 *)v288 + 10) << 16) | 1;
                  }
                  break;
                }
              }
              else
              {
                if (v290 >= *(void *)&v279) {
                  v290 %= *(void *)&v279;
                }
                if (v290 != v281) {
                  break;
                }
              }
              uint64_t v288 = (uint64_t *)*v288;
            }
            while (v288);
          }
        }
      }
    }
  }
LABEL_972:
  uint64_t v273 = *v4;
  uint64_t v274 = v4[1];
  uint64_t v275 = *v4;
  if (*v4 != v274)
  {
    uint64_t v275 = *v4;
    while (*(unsigned char *)v275 != 19)
    {
      v275 += 16;
      if (v275 == v274) {
        goto LABEL_1027;
      }
    }
  }
  if (v275 != v274)
  {
    if (*(void *)(v275 + 8))
    {
      int8x8_t v276 = (int8x8_t)a3[1];
      if (v276)
      {
        uint8x8_t v277 = (uint8x8_t)vcnt_s8(v276);
        v277.i16[0] = vaddlv_u8(v277);
        if (v277.u32[0] > 1uLL)
        {
          uint64_t v278 = 63;
          if (*(void *)&v276 <= 0x3FuLL) {
            uint64_t v278 = 0x3Fu % a3[1];
          }
        }
        else
        {
          uint64_t v278 = (v276.i8[0] - 1) & 0x3F;
        }
        uint64_t v282 = *(uint64_t ***)(*a3 + 8 * v278);
        if (v282)
        {
          char v283 = *v282;
          if (v283)
          {
            if (v277.u32[0] < 2uLL)
            {
              uint64_t v284 = *(void *)&v276 - 1;
              while (1)
              {
                uint64_t v286 = v283[1];
                if (v286 == 63)
                {
                  if (*((_WORD *)v283 + 8) == 63) {
                    goto LABEL_1023;
                  }
                }
                else if ((v286 & v284) != v278)
                {
                  goto LABEL_1027;
                }
                char v283 = (uint64_t *)*v283;
                if (!v283) {
                  goto LABEL_1027;
                }
              }
            }
            while (1)
            {
              unint64_t v285 = v283[1];
              if (v285 == 63)
              {
                if (*((_WORD *)v283 + 8) == 63)
                {
LABEL_1023:
                  if (*((unsigned char *)v283 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v283 + 18) = (*((unsigned __int16 *)v283 + 10) << 16) | 1;
                    uint64_t v273 = *v4;
                    uint64_t v274 = v4[1];
                  }
                  goto LABEL_1027;
                }
              }
              else
              {
                if (v285 >= *(void *)&v276) {
                  v285 %= *(void *)&v276;
                }
                if (v285 != v278) {
                  goto LABEL_1027;
                }
              }
              char v283 = (uint64_t *)*v283;
              if (!v283) {
                goto LABEL_1027;
              }
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_1027:
    if (v273 == v274) {
      return;
    }
    if (*(unsigned char *)v273 == 21) {
      break;
    }
    v273 += 16;
  }
  if (v273 != v274)
  {
    if (*(void *)(v273 + 8))
    {
      int8x8_t v292 = (int8x8_t)a3[1];
      if (v292)
      {
        uint8x8_t v293 = (uint8x8_t)vcnt_s8(v292);
        v293.i16[0] = vaddlv_u8(v293);
        if (v293.u32[0] > 1uLL)
        {
          uint64_t v294 = 51;
          if (*(void *)&v292 <= 0x33uLL) {
            uint64_t v294 = 0x33u % a3[1];
          }
        }
        else
        {
          uint64_t v294 = (v292.i32[0] - 1) & 0x33;
        }
        float v295 = *(uint64_t ***)(*a3 + 8 * v294);
        if (v295)
        {
          int v296 = *v295;
          if (v296)
          {
            if (v293.u32[0] < 2uLL)
            {
              uint64_t v297 = *(void *)&v292 - 1;
              while (1)
              {
                uint64_t v299 = v296[1];
                if (v299 == 51)
                {
                  if (*((_WORD *)v296 + 8) == 51) {
                    goto LABEL_1054;
                  }
                }
                else if ((v299 & v297) != v294)
                {
                  return;
                }
                int v296 = (uint64_t *)*v296;
                if (!v296) {
                  return;
                }
              }
            }
            do
            {
              unint64_t v298 = v296[1];
              if (v298 == 51)
              {
                if (*((_WORD *)v296 + 8) == 51)
                {
LABEL_1054:
                  if (*((unsigned char *)v296 + 18) == 2) {
                    *(_DWORD *)((char *)v296 + 18) = (*((unsigned __int16 *)v296 + 10) << 16) | 1;
                  }
                  return;
                }
              }
              else
              {
                if (v298 >= *(void *)&v292) {
                  v298 %= *(void *)&v292;
                }
                if (v298 != v294) {
                  return;
                }
              }
              int v296 = (uint64_t *)*v296;
            }
            while (v296);
          }
        }
      }
    }
  }
}